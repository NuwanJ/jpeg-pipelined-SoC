
cpu_C.elf:     file format elf32-littlenios2
cpu_C.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000e3d0 memsz 0x0000e3d0 flags r-x
    LOAD off    0x0000f3f0 vaddr 0x0004e3f0 paddr 0x0004fe5c align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x000118c8 vaddr 0x000518c8 paddr 0x000518c8 align 2**12
         filesz 0x00000000 memsz 0x00000300 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000de64  000401b8  000401b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003d4  0004e01c  0004e01c  0000f01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  0004e3f0  0004fe5c  0000f3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000300  000518c8  000518c8  000118c8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010e5c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e58  00000000  00000000  00010e80  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000243f9  00000000  00000000  00011cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009599  00000000  00000000  000360d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000aab3  00000000  00000000  0003f66a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000207c  00000000  00000000  0004a120  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003331  00000000  00000000  0004c19c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001191e  00000000  00000000  0004f4cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  00060dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  00060e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000652ff  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  00065302  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00065307  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00065308  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00065309  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0006530d  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00065311  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000006  00000000  00000000  00065315  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000006  00000000  00000000  0006531b  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000006  00000000  00000000  00065321  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000006  00000000  00000000  00065327  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001d  00000000  00000000  0006532d  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     001b94d0  00000000  00000000  0006534a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b8 l    d  .text	00000000 .text
0004e01c l    d  .rodata	00000000 .rodata
0004e3f0 l    d  .rwdata	00000000 .rwdata
000518c8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu_C_bsp//obj/HAL/src/crt0.o
000401f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
0004fe0c l     O .rwdata	00000002 c2.2956
0004fe0e l     O .rwdata	00000002 c6.2959
0004fe10 l     O .rwdata	00000002 s2.2962
0004fe12 l     O .rwdata	00000002 c7.2960
0004fe14 l     O .rwdata	00000002 c5.2958
0004fe16 l     O .rwdata	00000002 c3.2957
0004fe18 l     O .rwdata	00000002 c1.2955
0004fe1a l     O .rwdata	00000002 s1.2961
0004fe1c l     O .rwdata	00000002 s3.2963
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 IOMap.c
00000000 l    df *ABS*	00000000 utility.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000423b4 l     F .text	00000034 __sprint_r
0004e11e l     O .rodata	00000010 blanks.3515
0004e12e l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000443fc l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00045e6c l     F .text	00000008 __fp_lock
00045e74 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0004e7f8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0004e164 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0004e2ac l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00049c68 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0004a9a8 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0004b114 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004b230 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004b25c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004b35c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004b450 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004b53c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004b718 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0004fe4c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0004b9bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004bafc l     F .text	00000038 alt_dev_reg
0004edac l     O .rwdata	00001060 jtag_C
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004c30c l     F .text	00000204 altera_avalon_jtag_uart_irq
0004c510 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004cb4c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004cef8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004d398 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0004d4f0 l     F .text	00000050 alt_get_errno
0004d540 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00041798 g     F .text	00000030 readStatus_DE
000481a8 g     F .text	00000074 _mprec_log10
00048298 g     F .text	00000084 __any_on
00048eb4 g     F .text	00000064 _isatty_r
0004e194 g     O .rodata	00000028 __mprec_tinytens
0004b660 g     F .text	00000078 alt_main
0004b0d0 g     F .text	00000044 __ashldi3
0004222c g     F .text	00000084 _puts_r
000518c8 g     O .bss	00000004 t
00051938 g     O .bss	00000100 alt_irq
00048f18 g     F .text	0000006c _lseek_r
0004be78 g     F .text	00000058 altera_avalon_fifo_write_almostfull
0004fe5c g       *ABS*	00000000 __flash_rwdata_start
0004136c g     F .text	0000004c write_AE
0004a508 g     F .text	0000005c __eqdf2
00051bc8 g       *ABS*	00000000 __alt_heap_start
000421f0 g     F .text	0000003c printf
00048a58 g     F .text	0000005c __sseek
00045f10 g     F .text	0000010c __sinit
00046ba8 g     F .text	0000009c _setlocale_r
00041708 g     F .text	00000044 read_DE
00045e88 g     F .text	00000078 __sfmoreglue
0004b6f8 g     F .text	00000020 __malloc_unlock
0004025c g     F .text	00000040 processLoop
00051900 g     O .bss	00000004 altera_avalon_timer_ts_freq
00047064 g     F .text	0000018c memmove
0004bbf8 g     F .text	00000098 altera_avalon_fifo_init
00045f00 g     F .text	00000010 _cleanup
0004bf28 g     F .text	00000058 altera_avalon_fifo_write_fifo
000472cc g     F .text	000000a8 _Balloc
00041654 g     F .text	0000004c write_CD
000414e0 g     F .text	00000038 init_BC
0004a5c0 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
0004c0c0 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00040020 g       *ABS*	00000000 __flash_exceptions_start
00048e4c g     F .text	00000068 _fstat_r
000518e0 g     O .bss	00000004 errno
000518f4 g     O .bss	00000004 alt_argv
00057e0c g       *ABS*	00000000 _gp
0004b98c g     F .text	00000030 usleep
0004bdc4 g     F .text	0000005c altera_avalon_fifo_clear_event
00041008 g     F .text	00000038 init_AB_1
00041610 g     F .text	00000044 read_CD
0004ec2c g     O .rwdata	00000180 alt_fd_list
00040f4c g     F .text	00000044 read_AB_0
0004d944 g     F .text	00000090 alt_find_dev
00046f24 g     F .text	00000140 memcpy
00045e7c g     F .text	0000000c _cleanup_r
0004a6e4 g     F .text	000000d4 __floatsidf
000415a8 g     F .text	00000030 readStatus_BC
0004d478 g     F .text	00000078 alt_io_redirect
0004a688 g     F .text	0000005c __ltdf2
000412f0 g     F .text	00000038 init_AE
0004e01c g       *ABS*	00000000 __DTOR_END__
000422b0 g     F .text	00000014 puts
00048104 g     F .text	000000a4 __ratio
0004c710 g     F .text	00000218 altera_avalon_jtag_uart_read
00041a18 g     F .text	00000014 malloc
000421c4 g     F .text	0000002c _printf_r
0004aac8 g     F .text	00000008 __udivsi3
0004b3ac g     F .text	000000a4 isatty
0004e1e4 g     O .rodata	000000c8 __mprec_tens
00040d98 g     F .text	0000006c READ_B
00046c44 g     F .text	0000000c __locale_charset
0004dbbc g     F .text	0000008c alt_icache_flush
000414b0 g     F .text	00000030 readStatus_AF
000518dc g     O .bss	00000004 __malloc_top_pad
0004fe30 g     O .rwdata	00000004 __mb_cur_max
00046c50 g     F .text	0000000c _localeconv_r
000476fc g     F .text	0000003c __i2b
00046564 g     F .text	000004e4 __sfvwrite_r
000422c4 g     F .text	00000064 _sbrk_r
00040f90 g     F .text	00000048 write_AB_0
000416d0 g     F .text	00000038 init_DE
00048f84 g     F .text	0000006c _read_r
0004ebf8 g     O .rwdata	0000000c __lc_ctype
0004fe44 g     O .rwdata	00000004 alt_max_fd
0004aeb8 g     F .text	00000104 __unpack_d
00048cfc g     F .text	0000013c _fclose_r
00045e3c g     F .text	00000030 fflush
000518d8 g     O .bss	00000004 __malloc_max_sbrked_mem
00049fbc g     F .text	00000054 __adddf3
00047e78 g     F .text	00000148 __b2d
00049640 g     F .text	00000628 __umoddi3
00041230 g     F .text	00000044 read_AD
0004b58c g     F .text	000000d4 lseek
000413e8 g     F .text	00000038 init_AF
0004fe28 g     O .rwdata	00000004 _global_impure_ptr
0004831c g     F .text	000005fc _realloc_r
00051bc8 g       *ABS*	00000000 __bss_end
0004d2a8 g     F .text	000000f0 alt_iic_isr_register
0004d820 g     F .text	00000104 alt_tick
00048ff0 g     F .text	00000650 __udivdi3
0004e1bc g     O .rodata	00000028 __mprec_bigtens
000474e0 g     F .text	00000104 __s2b
00041420 g     F .text	00000044 read_AF
00041084 g     F .text	0000004c write_AB_1
0004a88c g     F .text	0000011c __floatunsidf
00047c18 g     F .text	00000058 __mcmp
00046128 g     F .text	00000018 __fp_lock_all
0004d25c g     F .text	0000004c alt_ic_irq_enabled
00040e44 g     F .text	0000001c FIFO_INIT
0004d788 g     F .text	00000098 alt_alarm_stop
00051904 g     O .bss	00000004 alt_irq_active
00041274 g     F .text	0000004c write_AD
000400ec g     F .exceptions	000000cc alt_irq_handler
0004ec04 g     O .rwdata	00000028 alt_dev_null
0004cedc g     F .text	0000001c alt_dcache_flush_all
000475e4 g     F .text	00000068 __hi0bits
0004a7b8 g     F .text	000000d4 __fixdfsi
0004be20 g     F .text	00000058 altera_avalon_fifo_write_ienable
0004fe5c g       *ABS*	00000000 __ram_rwdata_end
0004bd34 g     F .text	0000002c altera_avalon_fifo_read_almostempty
000416a0 g     F .text	00000030 readStatus_CD
0004fe3c g     O .rwdata	00000008 alt_dev_list
0004ba0c g     F .text	000000f0 write
00041844 g     F .text	0000004c write_EF
0004e3f0 g       *ABS*	00000000 __ram_rodata_end
0004b2ac g     F .text	000000b0 fstat
0004b08c g     F .text	00000044 __lshrdi3
00041328 g     F .text	00000044 read_AE
00047990 g     F .text	0000012c __pow5mult
000518ec g     O .bss	00000004 __nlocale_changed
0004aad0 g     F .text	00000008 __umodsi3
00051bc8 g       *ABS*	00000000 end
000417c8 g     F .text	00000038 init_EF
000410d0 g     F .text	00000030 readStatus_AB_1
0004c24c g     F .text	000000c0 altera_avalon_jtag_uart_init
0004bd60 g     F .text	0000003c altera_avalon_fifo_read_event
0004e01c g       *ABS*	00000000 __CTOR_LIST__
00060000 g       *ABS*	00000000 __alt_stack_pointer
0004cbc0 g     F .text	00000088 alt_avalon_timer_sc_init
0004abe8 g     F .text	000000ac __clzsi2
0004c928 g     F .text	00000224 altera_avalon_jtag_uart_write
000518cc g     O .bss	00000004 input_fifo_wrclk_irq_event
00046118 g     F .text	00000004 __sfp_lock_acquire
0004bfec g     F .text	0000004c altera_avalon_fifo_read_fifo
00046e2c g     F .text	000000f8 memchr
000423e8 g     F .text	00001e7c ___vfprintf_internal_r
00046294 g     F .text	000002d0 _free_r
0004de40 g     F .text	000001a0 __call_exitprocs
000518e8 g     O .bss	00000004 __mlocale_changed
0004fe20 g     O .rwdata	00000004 __malloc_sbrk_base
000401b8 g     F .text	0000003c _start
00051908 g     O .bss	00000004 _alt_tick_rate
00047abc g     F .text	0000015c __lshift
0005190c g     O .bss	00000004 _alt_nticks
0004b768 g     F .text	000000f4 read
0004bb68 g     F .text	00000090 alt_sys_init
0004dd10 g     F .text	00000130 __register_exitproc
00047738 g     F .text	00000258 __multiply
0004c5b4 g     F .text	00000068 altera_avalon_jtag_uart_close
000419f0 g     F .text	00000028 __mulsi3
0004e3f0 g       *ABS*	00000000 __ram_rwdata_start
0004e01c g       *ABS*	00000000 __ram_rodata_start
00051910 g     O .bss	00000028 __malloc_current_mallinfo
00047fc0 g     F .text	00000144 __d2b
00040cb4 g     F .text	0000006c INIT_B
00041890 g     F .text	00000030 readStatus_EF
0004c0e8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004dae8 g     F .text	000000d4 alt_get_fd
0004cd88 g     F .text	00000154 alt_busy_sleep
0004afbc g     F .text	000000d0 __fpcmp_parts_d
00048c98 g     F .text	00000064 _close_r
0004dc94 g     F .text	0000007c memcmp
0004c1a8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00051bc8 g       *ABS*	00000000 __alt_stack_base
0004c1f8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00040e60 g     F .text	000000b4 print_status
00044288 g     F .text	00000174 __swsetup_r
0004bc90 g     F .text	0000003c altera_avalon_fifo_read_status
0004a354 g     F .text	000001b4 __divdf3
0004601c g     F .text	000000fc __sfp
0004821c g     F .text	0000007c __copybits
0004e3f0 g     O .rwdata	00000408 __malloc_av_
00046124 g     F .text	00000004 __sinit_lock_release
0004a070 g     F .text	000002e4 __muldf3
0004897c g     F .text	00000054 __sread
00041040 g     F .text	00000044 read_AB_1
0004c094 g     F .text	0000002c altera_avalon_fifo_read_other_info
0004d9d4 g     F .text	00000114 alt_find_file
0004cf48 g     F .text	000000a0 alt_dev_llist_insert
0004b6d8 g     F .text	00000020 __malloc_lock
0004b8dc g     F .text	000000b0 sbrk
00045c54 g     F .text	000001e8 _fflush_r
00048bcc g     F .text	000000cc _calloc_r
000518c8 g       *ABS*	00000000 __bss_start
000518d0 g     O .bss	00000004 data
000471f0 g     F .text	000000dc memset
00040228 g     F .text	00000034 main
000518f8 g     O .bss	00000004 alt_envp
000518d4 g     O .bss	00000004 __malloc_max_total_mem
0004c148 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004bd9c g     F .text	00000028 altera_avalon_fifo_read_level
0004174c g     F .text	0000004c write_DE
00041800 g     F .text	00000044 read_EF
00048ab4 g     F .text	00000008 __sclose
00060000 g       *ABS*	00000000 __alt_heap_limit
00048e38 g     F .text	00000014 fclose
00041100 g     F .text	00000038 init_AB_2
00040f14 g     F .text	00000038 init_AB_0
00051a38 g     O .bss	00000190 _atexit0
00041994 g     F .text	0000005c ledBlink
00044638 g     F .text	0000161c _dtoa_r
00041a40 g     F .text	00000784 _malloc_r
0004fe48 g     O .rwdata	00000004 alt_errno
000413b8 g     F .text	00000030 readStatus_AE
00046a48 g     F .text	000000a8 _fwalk
0004aa1c g     F .text	00000050 __divsi3
0004e2b8 g     O .rodata	00000014 __thenan_df
00046158 g     F .text	0000013c _malloc_trim_r
0004e01c g       *ABS*	00000000 __CTOR_END__
00048abc g     F .text	000000a4 strcmp
000411f8 g     F .text	00000038 init_AD
0004e01c g       *ABS*	00000000 __flash_rodata_start
00041464 g     F .text	0000004c write_AF
0004e01c g       *ABS*	00000000 __DTOR_LIST__
000418c0 g     F .text	0000003c delay
0004a564 g     F .text	0000005c __nedf2
0004029c g     F .text	00000a18 DCT
00000000 g       *ABS*	00000000 __alt_mem_SDRAM_controller
0004bb34 g     F .text	00000034 alt_irq_init
0004117c g     F .text	0000004c write_AB_2
0004b85c g     F .text	00000080 alt_release_fd
0004e2cc g     O .rodata	00000100 __clz_tab
000518e4 g     O .bss	00000004 _PathLocale
00040fd8 g     F .text	00000030 readStatus_AB_0
0004dc48 g     F .text	00000014 atexit
00048b60 g     F .text	0000006c _write_r
00046c5c g     F .text	0000001c setlocale
000401f4 g     F .text	00000034 SEND
00041518 g     F .text	00000044 read_BC
0004fe2c g     O .rwdata	00000004 _impure_ptr
000518f0 g     O .bss	00000004 alt_argc
000518fc g     O .bss	00000004 altera_avalon_timer_ts_base
0004d044 g     F .text	0000005c _do_dtors
00040e24 g     F .text	00000020 READ_FIFO
00040020 g       .exceptions	00000000 alt_irq_entry
00047e18 g     F .text	00000060 __ulp
00048918 g     F .text	00000038 __isinfd
00046140 g     F .text	00000018 __fp_unlock_all
0004fe34 g     O .rwdata	00000008 alt_fs_list
000418fc g     F .text	00000098 ledUpdate
00040020 g       *ABS*	00000000 __ram_exceptions_start
00046c78 g     F .text	0000000c localeconv
0004c038 g     F .text	0000005c altera_avalon_fifo_write_other_info
0004d0d0 g     F .text	00000050 alt_ic_isr_register
000412c0 g     F .text	00000030 readStatus_AD
0004fe5c g       *ABS*	00000000 _edata
00051bc8 g       *ABS*	00000000 _end
000401b8 g       *ABS*	00000000 __ram_exceptions_end
0004c61c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00041138 g     F .text	00000044 read_AB_2
0004d1bc g     F .text	000000a0 alt_ic_irq_disable
000489d0 g     F .text	00000088 __swrite
0004fe24 g     O .rwdata	00000004 __malloc_trim_threshold
0004d924 g     F .text	00000020 altera_nios2_qsys_irq_init
0004dc5c g     F .text	00000038 exit
00046af0 g     F .text	000000b8 _fwalk_reent
00047c70 g     F .text	000001a8 __mdiff
0004aa6c g     F .text	0000005c __modsi3
0004bccc g     F .text	0000003c altera_avalon_fifo_read_ienable
00060000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004611c g     F .text	00000004 __sfp_lock_release
00040d20 g     F .text	00000078 WRITE_B
0004dfe0 g     F .text	0000003c _exit
00048950 g     F .text	0000002c __isnand
0004cc48 g     F .text	00000140 alt_alarm_start
0004aad8 g     F .text	00000110 __muldi3
0004bd08 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00046c84 g     F .text	000001a8 __smakebuf_r
00042328 g     F .text	0000008c strlen
0004d630 g     F .text	00000158 open
0004bf80 g     F .text	0000006c altera_avalon_read_fifo
0004a624 g     F .text	00000064 __gedf2
000415d8 g     F .text	00000038 init_CD
0004d0a0 g     F .text	00000030 alt_icache_flush_all
00040e04 g     F .text	00000020 WRITE_FIFO
0004fe50 g     O .rwdata	00000004 alt_priority_mask
0004d120 g     F .text	0000009c alt_ic_irq_enable
00044264 g     F .text	00000024 __vfprintf_internal
000411c8 g     F .text	00000030 readStatus_AB_2
0004155c g     F .text	0000004c write_BC
0004a010 g     F .text	00000060 __subdf3
0004764c g     F .text	000000b0 __lo0bits
0004bed0 g     F .text	00000058 altera_avalon_fifo_write_almostempty
0004fe54 g     O .rwdata	00000008 alt_alarm_list
0004cfe8 g     F .text	0000005c _do_ctors
0004b164 g     F .text	000000cc close
0004b4bc g     F .text	00000080 alt_load
0004ac94 g     F .text	00000224 __pack_d
00041a2c g     F .text	00000014 free
00046120 g     F .text	00000004 __sinit_lock_acquire
0004739c g     F .text	00000144 __multadd
00047374 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406e14 	ori	at,at,440
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_SDRAM_controller>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001726 	beq	r2,zero,40188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00c00174 	movhi	r3,5
   40130:	18c64e04 	addi	r3,r3,6456
   40134:	e0bffd17 	ldw	r2,-12(fp)
   40138:	100490fa 	slli	r2,r2,3
   4013c:	1885883a 	add	r2,r3,r2
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	01000174 	movhi	r4,5
   40148:	21064e04 	addi	r4,r4,6456
   4014c:	e0bffd17 	ldw	r2,-12(fp)
   40150:	100490fa 	slli	r2,r2,3
   40154:	2085883a 	add	r2,r4,r2
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4017c:	e0bffb17 	ldw	r2,-20(fp)
   40180:	103fe31e 	bne	r2,zero,40110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   40184:	00000706 	br	401a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40188:	e0bffc17 	ldw	r2,-16(fp)
   4018c:	1085883a 	add	r2,r2,r2
   40190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40194:	e0bffd17 	ldw	r2,-12(fp)
   40198:	10800044 	addi	r2,r2,1
   4019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a0:	003fde06 	br	4011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a4:	e037883a 	mov	sp,fp
   401a8:	dfc00117 	ldw	ra,4(sp)
   401ac:	df000017 	ldw	fp,0(sp)
   401b0:	dec00204 	addi	sp,sp,8
   401b4:	f800283a 	ret

Disassembly of section .text:

000401b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401b8:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   401bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   401c0:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401c4:	d69f8314 	ori	gp,gp,32268
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401c8:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401cc:	10863214 	ori	r2,r2,6344

    movhi r3, %hi(__bss_end)
   401d0:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401d4:	18c6f214 	ori	r3,r3,7112

    beq r2, r3, 1f
   401d8:	10c00326 	beq	r2,r3,401e8 <_start+0x30>

0:
    stw zero, (r2)
   401dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e4:	10fffd36 	bltu	r2,r3,401dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401e8:	004b4bc0 	call	4b4bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401ec:	004b6600 	call	4b660 <alt_main>

000401f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401f0:	003fff06 	br	401f0 <alt_after_alt_main>

000401f4 <SEND>:
int *data;

void processLoop();
void DCT(uint8_t round);

void SEND(int16_t val){
   401f4:	defffd04 	addi	sp,sp,-12
   401f8:	dfc00215 	stw	ra,8(sp)
   401fc:	df000115 	stw	fp,4(sp)
   40200:	df000104 	addi	fp,sp,4
   40204:	2005883a 	mov	r2,r4
   40208:	e0bfff0d 	sth	r2,-4(fp)
	write_CD(&val);
   4020c:	e13fff04 	addi	r4,fp,-4
   40210:	00416540 	call	41654 <write_CD>
}
   40214:	e037883a 	mov	sp,fp
   40218:	dfc00117 	ldw	ra,4(sp)
   4021c:	df000017 	ldw	fp,0(sp)
   40220:	dec00204 	addi	sp,sp,8
   40224:	f800283a 	ret

00040228 <main>:

int main(void){
   40228:	defffe04 	addi	sp,sp,-8
   4022c:	dfc00115 	stw	ra,4(sp)
   40230:	df000015 	stw	fp,0(sp)
   40234:	d839883a 	mov	fp,sp

	printf("Hardware JSoC_C begins\n\n");
   40238:	01000174 	movhi	r4,5
   4023c:	21380704 	addi	r4,r4,-8164
   40240:	00422b00 	call	422b0 <puts>

	init_BC();
   40244:	00414e00 	call	414e0 <init_BC>
	init_CD();
   40248:	00415d80 	call	415d8 <init_CD>

	ledBlink(3);
   4024c:	010000c4 	movi	r4,3
   40250:	00419940 	call	41994 <ledBlink>

	while(1){
		processLoop();
   40254:	004025c0 	call	4025c <processLoop>
	}
   40258:	003ffe06 	br	40254 <main+0x2c>

0004025c <processLoop>:

	return 0;
}

void processLoop(){
   4025c:	defffe04 	addi	sp,sp,-8
   40260:	dfc00115 	stw	ra,4(sp)
   40264:	df000015 	stw	fp,0(sp)
   40268:	d839883a 	mov	fp,sp

	data = (int16_t*)malloc(sizeof(int16_t)*64);
   4026c:	01002004 	movi	r4,128
   40270:	0041a180 	call	41a18 <malloc>
   40274:	d0a6b115 	stw	r2,-25916(gp)

	while(1){
		DCT(0);
   40278:	0009883a 	mov	r4,zero
   4027c:	004029c0 	call	4029c <DCT>
		DCT(1);
   40280:	01000044 	movi	r4,1
   40284:	004029c0 	call	4029c <DCT>
		DCT(2);
   40288:	01000084 	movi	r4,2
   4028c:	004029c0 	call	4029c <DCT>
		ledBlink(3);
   40290:	010000c4 	movi	r4,3
   40294:	00419940 	call	41994 <ledBlink>
	}
   40298:	003ff706 	br	40278 <processLoop+0x1c>

0004029c <DCT>:
}

/* DCT for One block(8x8) */
void DCT(uint8_t round){
   4029c:	defff104 	addi	sp,sp,-60
   402a0:	dfc00e15 	stw	ra,56(sp)
   402a4:	df000d15 	stw	fp,52(sp)
   402a8:	dc400c15 	stw	r17,48(sp)
   402ac:	dc000b15 	stw	r16,44(sp)
   402b0:	df000b04 	addi	fp,sp,44
   402b4:	2005883a 	mov	r2,r4
   402b8:	e0bfff05 	stb	r2,-4(fp)
	static const uint16_t s1=3;
	static const uint16_t s2=10;
	static const uint16_t s3=13;

	/* read back from queue */
	for (i=0; i<64; i++){
   402bc:	e03ff50d 	sth	zero,-44(fp)
   402c0:	00001a06 	br	4032c <DCT+0x90>
		data[i] = (int16_t)read_BC();
   402c4:	d0e6b117 	ldw	r3,-25916(gp)
   402c8:	e0bff50b 	ldhu	r2,-44(fp)
   402cc:	1085883a 	add	r2,r2,r2
   402d0:	1085883a 	add	r2,r2,r2
   402d4:	18a1883a 	add	r16,r3,r2
   402d8:	00415180 	call	41518 <read_BC>
   402dc:	10bfffcc 	andi	r2,r2,65535
   402e0:	10a0001c 	xori	r2,r2,32768
   402e4:	10a00004 	addi	r2,r2,-32768
   402e8:	80800015 	stw	r2,0(r16)
		printf("%d | %d -> %d\n", round, i, data[i]);
   402ec:	e17fff03 	ldbu	r5,-4(fp)
   402f0:	e0fff50b 	ldhu	r3,-44(fp)
   402f4:	d126b117 	ldw	r4,-25916(gp)
   402f8:	e0bff50b 	ldhu	r2,-44(fp)
   402fc:	1085883a 	add	r2,r2,r2
   40300:	1085883a 	add	r2,r2,r2
   40304:	2085883a 	add	r2,r4,r2
   40308:	10800017 	ldw	r2,0(r2)
   4030c:	01000174 	movhi	r4,5
   40310:	21380d04 	addi	r4,r4,-8140
   40314:	180d883a 	mov	r6,r3
   40318:	100f883a 	mov	r7,r2
   4031c:	00421f00 	call	421f0 <printf>
	static const uint16_t s1=3;
	static const uint16_t s2=10;
	static const uint16_t s3=13;

	/* read back from queue */
	for (i=0; i<64; i++){
   40320:	e0bff50b 	ldhu	r2,-44(fp)
   40324:	10800044 	addi	r2,r2,1
   40328:	e0bff50d 	sth	r2,-44(fp)
   4032c:	e0bff50b 	ldhu	r2,-44(fp)
   40330:	10801030 	cmpltui	r2,r2,64
   40334:	103fe31e 	bne	r2,zero,402c4 <DCT+0x28>
		data[i] = (int16_t)read_BC();
		printf("%d | %d -> %d\n", round, i, data[i]);
	}
	//ledBlink(3);

	for (i=8; i>0; i--){
   40338:	00800204 	movi	r2,8
   4033c:	e0bff50d 	sth	r2,-44(fp)
   40340:	00011506 	br	40798 <DCT+0x4fc>
		x8 = data[0] + data[7];
   40344:	d0a6b117 	ldw	r2,-25916(gp)
   40348:	10c00017 	ldw	r3,0(r2)
   4034c:	d0a6b117 	ldw	r2,-25916(gp)
   40350:	10800704 	addi	r2,r2,28
   40354:	10800017 	ldw	r2,0(r2)
   40358:	1885883a 	add	r2,r3,r2
   4035c:	e0bff615 	stw	r2,-40(fp)
		x0 = data[0] - data[7];
   40360:	d0a6b117 	ldw	r2,-25916(gp)
   40364:	10c00017 	ldw	r3,0(r2)
   40368:	d0a6b117 	ldw	r2,-25916(gp)
   4036c:	10800704 	addi	r2,r2,28
   40370:	10800017 	ldw	r2,0(r2)
   40374:	1885c83a 	sub	r2,r3,r2
   40378:	e0bff715 	stw	r2,-36(fp)

		x7 = data[1] + data[6];
   4037c:	d0a6b117 	ldw	r2,-25916(gp)
   40380:	10800104 	addi	r2,r2,4
   40384:	10c00017 	ldw	r3,0(r2)
   40388:	d0a6b117 	ldw	r2,-25916(gp)
   4038c:	10800604 	addi	r2,r2,24
   40390:	10800017 	ldw	r2,0(r2)
   40394:	1885883a 	add	r2,r3,r2
   40398:	e0bff815 	stw	r2,-32(fp)
		x1 = data[1] - data[6];
   4039c:	d0a6b117 	ldw	r2,-25916(gp)
   403a0:	10800104 	addi	r2,r2,4
   403a4:	10c00017 	ldw	r3,0(r2)
   403a8:	d0a6b117 	ldw	r2,-25916(gp)
   403ac:	10800604 	addi	r2,r2,24
   403b0:	10800017 	ldw	r2,0(r2)
   403b4:	1885c83a 	sub	r2,r3,r2
   403b8:	e0bff915 	stw	r2,-28(fp)

		x6 = data[2] + data[5];
   403bc:	d0a6b117 	ldw	r2,-25916(gp)
   403c0:	10800204 	addi	r2,r2,8
   403c4:	10c00017 	ldw	r3,0(r2)
   403c8:	d0a6b117 	ldw	r2,-25916(gp)
   403cc:	10800504 	addi	r2,r2,20
   403d0:	10800017 	ldw	r2,0(r2)
   403d4:	1885883a 	add	r2,r3,r2
   403d8:	e0bffa15 	stw	r2,-24(fp)
		x2 = data[2] - data[5];
   403dc:	d0a6b117 	ldw	r2,-25916(gp)
   403e0:	10800204 	addi	r2,r2,8
   403e4:	10c00017 	ldw	r3,0(r2)
   403e8:	d0a6b117 	ldw	r2,-25916(gp)
   403ec:	10800504 	addi	r2,r2,20
   403f0:	10800017 	ldw	r2,0(r2)
   403f4:	1885c83a 	sub	r2,r3,r2
   403f8:	e0bffb15 	stw	r2,-20(fp)

		x5 = data[3] + data[4];
   403fc:	d0a6b117 	ldw	r2,-25916(gp)
   40400:	10800304 	addi	r2,r2,12
   40404:	10c00017 	ldw	r3,0(r2)
   40408:	d0a6b117 	ldw	r2,-25916(gp)
   4040c:	10800404 	addi	r2,r2,16
   40410:	10800017 	ldw	r2,0(r2)
   40414:	1885883a 	add	r2,r3,r2
   40418:	e0bffc15 	stw	r2,-16(fp)
		x3 = data[3] - data[4];
   4041c:	d0a6b117 	ldw	r2,-25916(gp)
   40420:	10800304 	addi	r2,r2,12
   40424:	10c00017 	ldw	r3,0(r2)
   40428:	d0a6b117 	ldw	r2,-25916(gp)
   4042c:	10800404 	addi	r2,r2,16
   40430:	10800017 	ldw	r2,0(r2)
   40434:	1885c83a 	sub	r2,r3,r2
   40438:	e0bffd15 	stw	r2,-12(fp)

		x4 = x8 + x5;
   4043c:	e0fff617 	ldw	r3,-40(fp)
   40440:	e0bffc17 	ldw	r2,-16(fp)
   40444:	1885883a 	add	r2,r3,r2
   40448:	e0bffe15 	stw	r2,-8(fp)
		x8 -= x5;
   4044c:	e0fff617 	ldw	r3,-40(fp)
   40450:	e0bffc17 	ldw	r2,-16(fp)
   40454:	1885c83a 	sub	r2,r3,r2
   40458:	e0bff615 	stw	r2,-40(fp)

		x5 = x7 + x6;
   4045c:	e0fff817 	ldw	r3,-32(fp)
   40460:	e0bffa17 	ldw	r2,-24(fp)
   40464:	1885883a 	add	r2,r3,r2
   40468:	e0bffc15 	stw	r2,-16(fp)
		x7 -= x6;
   4046c:	e0fff817 	ldw	r3,-32(fp)
   40470:	e0bffa17 	ldw	r2,-24(fp)
   40474:	1885c83a 	sub	r2,r3,r2
   40478:	e0bff815 	stw	r2,-32(fp)

		data[0] = (int16_t) (x4 + x5);
   4047c:	d0a6b117 	ldw	r2,-25916(gp)
   40480:	e0fffe17 	ldw	r3,-8(fp)
   40484:	1809883a 	mov	r4,r3
   40488:	e0fffc17 	ldw	r3,-16(fp)
   4048c:	20c7883a 	add	r3,r4,r3
   40490:	18ffffcc 	andi	r3,r3,65535
   40494:	18e0001c 	xori	r3,r3,32768
   40498:	18e00004 	addi	r3,r3,-32768
   4049c:	10c00015 	stw	r3,0(r2)
		data[4] = (int16_t) (x4 - x5);
   404a0:	d0a6b117 	ldw	r2,-25916(gp)
   404a4:	10800404 	addi	r2,r2,16
   404a8:	e0fffe17 	ldw	r3,-8(fp)
   404ac:	1809883a 	mov	r4,r3
   404b0:	e0fffc17 	ldw	r3,-16(fp)
   404b4:	20c7c83a 	sub	r3,r4,r3
   404b8:	18ffffcc 	andi	r3,r3,65535
   404bc:	18e0001c 	xori	r3,r3,32768
   404c0:	18e00004 	addi	r3,r3,-32768
   404c4:	10c00015 	stw	r3,0(r2)

		data[2] = (int16_t) ((x8*c2 + x7*c6) >> s2);
   404c8:	d0a6b117 	ldw	r2,-25916(gp)
   404cc:	14000204 	addi	r16,r2,8
   404d0:	d0a0000b 	ldhu	r2,-32768(gp)
   404d4:	10bfffcc 	andi	r2,r2,65535
   404d8:	1009883a 	mov	r4,r2
   404dc:	e17ff617 	ldw	r5,-40(fp)
   404e0:	00419f00 	call	419f0 <__mulsi3>
   404e4:	1023883a 	mov	r17,r2
   404e8:	d0a0008b 	ldhu	r2,-32766(gp)
   404ec:	10bfffcc 	andi	r2,r2,65535
   404f0:	1009883a 	mov	r4,r2
   404f4:	e17ff817 	ldw	r5,-32(fp)
   404f8:	00419f00 	call	419f0 <__mulsi3>
   404fc:	8887883a 	add	r3,r17,r2
   40500:	d0a0010b 	ldhu	r2,-32764(gp)
   40504:	10bfffcc 	andi	r2,r2,65535
   40508:	1885d83a 	sra	r2,r3,r2
   4050c:	10bfffcc 	andi	r2,r2,65535
   40510:	10a0001c 	xori	r2,r2,32768
   40514:	10a00004 	addi	r2,r2,-32768
   40518:	80800015 	stw	r2,0(r16)
		data[6] = (int16_t) ((x8*c6 - x7*c2) >> s2);
   4051c:	d0a6b117 	ldw	r2,-25916(gp)
   40520:	14000604 	addi	r16,r2,24
   40524:	d0a0008b 	ldhu	r2,-32766(gp)
   40528:	10bfffcc 	andi	r2,r2,65535
   4052c:	1009883a 	mov	r4,r2
   40530:	e17ff617 	ldw	r5,-40(fp)
   40534:	00419f00 	call	419f0 <__mulsi3>
   40538:	1023883a 	mov	r17,r2
   4053c:	d0a0000b 	ldhu	r2,-32768(gp)
   40540:	10bfffcc 	andi	r2,r2,65535
   40544:	1009883a 	mov	r4,r2
   40548:	e17ff817 	ldw	r5,-32(fp)
   4054c:	00419f00 	call	419f0 <__mulsi3>
   40550:	8887c83a 	sub	r3,r17,r2
   40554:	d0a0010b 	ldhu	r2,-32764(gp)
   40558:	10bfffcc 	andi	r2,r2,65535
   4055c:	1885d83a 	sra	r2,r3,r2
   40560:	10bfffcc 	andi	r2,r2,65535
   40564:	10a0001c 	xori	r2,r2,32768
   40568:	10a00004 	addi	r2,r2,-32768
   4056c:	80800015 	stw	r2,0(r16)

		data[7] = (int16_t) ((x0*c7 - x1*c5 + x2*c3 - x3*c1) >> s2);
   40570:	d0a6b117 	ldw	r2,-25916(gp)
   40574:	14000704 	addi	r16,r2,28
   40578:	d0a0018b 	ldhu	r2,-32762(gp)
   4057c:	10bfffcc 	andi	r2,r2,65535
   40580:	1009883a 	mov	r4,r2
   40584:	e17ff717 	ldw	r5,-36(fp)
   40588:	00419f00 	call	419f0 <__mulsi3>
   4058c:	1023883a 	mov	r17,r2
   40590:	d0a0020b 	ldhu	r2,-32760(gp)
   40594:	10bfffcc 	andi	r2,r2,65535
   40598:	1009883a 	mov	r4,r2
   4059c:	e17ff917 	ldw	r5,-28(fp)
   405a0:	00419f00 	call	419f0 <__mulsi3>
   405a4:	88a3c83a 	sub	r17,r17,r2
   405a8:	d0a0028b 	ldhu	r2,-32758(gp)
   405ac:	10bfffcc 	andi	r2,r2,65535
   405b0:	1009883a 	mov	r4,r2
   405b4:	e17ffb17 	ldw	r5,-20(fp)
   405b8:	00419f00 	call	419f0 <__mulsi3>
   405bc:	88a3883a 	add	r17,r17,r2
   405c0:	d0a0030b 	ldhu	r2,-32756(gp)
   405c4:	10bfffcc 	andi	r2,r2,65535
   405c8:	1009883a 	mov	r4,r2
   405cc:	e17ffd17 	ldw	r5,-12(fp)
   405d0:	00419f00 	call	419f0 <__mulsi3>
   405d4:	8887c83a 	sub	r3,r17,r2
   405d8:	d0a0010b 	ldhu	r2,-32764(gp)
   405dc:	10bfffcc 	andi	r2,r2,65535
   405e0:	1885d83a 	sra	r2,r3,r2
   405e4:	10bfffcc 	andi	r2,r2,65535
   405e8:	10a0001c 	xori	r2,r2,32768
   405ec:	10a00004 	addi	r2,r2,-32768
   405f0:	80800015 	stw	r2,0(r16)
		data[5] = (int16_t) ((x0*c5 - x1*c1 + x2*c7 + x3*c3) >> s2);
   405f4:	d0a6b117 	ldw	r2,-25916(gp)
   405f8:	14000504 	addi	r16,r2,20
   405fc:	d0a0020b 	ldhu	r2,-32760(gp)
   40600:	10bfffcc 	andi	r2,r2,65535
   40604:	1009883a 	mov	r4,r2
   40608:	e17ff717 	ldw	r5,-36(fp)
   4060c:	00419f00 	call	419f0 <__mulsi3>
   40610:	1023883a 	mov	r17,r2
   40614:	d0a0030b 	ldhu	r2,-32756(gp)
   40618:	10bfffcc 	andi	r2,r2,65535
   4061c:	1009883a 	mov	r4,r2
   40620:	e17ff917 	ldw	r5,-28(fp)
   40624:	00419f00 	call	419f0 <__mulsi3>
   40628:	88a3c83a 	sub	r17,r17,r2
   4062c:	d0a0018b 	ldhu	r2,-32762(gp)
   40630:	10bfffcc 	andi	r2,r2,65535
   40634:	1009883a 	mov	r4,r2
   40638:	e17ffb17 	ldw	r5,-20(fp)
   4063c:	00419f00 	call	419f0 <__mulsi3>
   40640:	88a3883a 	add	r17,r17,r2
   40644:	d0a0028b 	ldhu	r2,-32758(gp)
   40648:	10bfffcc 	andi	r2,r2,65535
   4064c:	1009883a 	mov	r4,r2
   40650:	e17ffd17 	ldw	r5,-12(fp)
   40654:	00419f00 	call	419f0 <__mulsi3>
   40658:	8887883a 	add	r3,r17,r2
   4065c:	d0a0010b 	ldhu	r2,-32764(gp)
   40660:	10bfffcc 	andi	r2,r2,65535
   40664:	1885d83a 	sra	r2,r3,r2
   40668:	10bfffcc 	andi	r2,r2,65535
   4066c:	10a0001c 	xori	r2,r2,32768
   40670:	10a00004 	addi	r2,r2,-32768
   40674:	80800015 	stw	r2,0(r16)
		data[3] = (int16_t) ((x0*c3 - x1*c7 - x2*c1 - x3*c5) >> s2);
   40678:	d0a6b117 	ldw	r2,-25916(gp)
   4067c:	14000304 	addi	r16,r2,12
   40680:	d0a0028b 	ldhu	r2,-32758(gp)
   40684:	10bfffcc 	andi	r2,r2,65535
   40688:	1009883a 	mov	r4,r2
   4068c:	e17ff717 	ldw	r5,-36(fp)
   40690:	00419f00 	call	419f0 <__mulsi3>
   40694:	1023883a 	mov	r17,r2
   40698:	d0a0018b 	ldhu	r2,-32762(gp)
   4069c:	10bfffcc 	andi	r2,r2,65535
   406a0:	1009883a 	mov	r4,r2
   406a4:	e17ff917 	ldw	r5,-28(fp)
   406a8:	00419f00 	call	419f0 <__mulsi3>
   406ac:	88a3c83a 	sub	r17,r17,r2
   406b0:	d0a0030b 	ldhu	r2,-32756(gp)
   406b4:	10bfffcc 	andi	r2,r2,65535
   406b8:	1009883a 	mov	r4,r2
   406bc:	e17ffb17 	ldw	r5,-20(fp)
   406c0:	00419f00 	call	419f0 <__mulsi3>
   406c4:	88a3c83a 	sub	r17,r17,r2
   406c8:	d0a0020b 	ldhu	r2,-32760(gp)
   406cc:	10bfffcc 	andi	r2,r2,65535
   406d0:	1009883a 	mov	r4,r2
   406d4:	e17ffd17 	ldw	r5,-12(fp)
   406d8:	00419f00 	call	419f0 <__mulsi3>
   406dc:	8887c83a 	sub	r3,r17,r2
   406e0:	d0a0010b 	ldhu	r2,-32764(gp)
   406e4:	10bfffcc 	andi	r2,r2,65535
   406e8:	1885d83a 	sra	r2,r3,r2
   406ec:	10bfffcc 	andi	r2,r2,65535
   406f0:	10a0001c 	xori	r2,r2,32768
   406f4:	10a00004 	addi	r2,r2,-32768
   406f8:	80800015 	stw	r2,0(r16)
		data[1] = (int16_t) ((x0*c1 + x1*c3 + x2*c5 + x3*c7) >> s2);
   406fc:	d0a6b117 	ldw	r2,-25916(gp)
   40700:	14000104 	addi	r16,r2,4
   40704:	d0a0030b 	ldhu	r2,-32756(gp)
   40708:	10bfffcc 	andi	r2,r2,65535
   4070c:	1009883a 	mov	r4,r2
   40710:	e17ff717 	ldw	r5,-36(fp)
   40714:	00419f00 	call	419f0 <__mulsi3>
   40718:	1023883a 	mov	r17,r2
   4071c:	d0a0028b 	ldhu	r2,-32758(gp)
   40720:	10bfffcc 	andi	r2,r2,65535
   40724:	1009883a 	mov	r4,r2
   40728:	e17ff917 	ldw	r5,-28(fp)
   4072c:	00419f00 	call	419f0 <__mulsi3>
   40730:	88a3883a 	add	r17,r17,r2
   40734:	d0a0020b 	ldhu	r2,-32760(gp)
   40738:	10bfffcc 	andi	r2,r2,65535
   4073c:	1009883a 	mov	r4,r2
   40740:	e17ffb17 	ldw	r5,-20(fp)
   40744:	00419f00 	call	419f0 <__mulsi3>
   40748:	88a3883a 	add	r17,r17,r2
   4074c:	d0a0018b 	ldhu	r2,-32762(gp)
   40750:	10bfffcc 	andi	r2,r2,65535
   40754:	1009883a 	mov	r4,r2
   40758:	e17ffd17 	ldw	r5,-12(fp)
   4075c:	00419f00 	call	419f0 <__mulsi3>
   40760:	8887883a 	add	r3,r17,r2
   40764:	d0a0010b 	ldhu	r2,-32764(gp)
   40768:	10bfffcc 	andi	r2,r2,65535
   4076c:	1885d83a 	sra	r2,r3,r2
   40770:	10bfffcc 	andi	r2,r2,65535
   40774:	10a0001c 	xori	r2,r2,32768
   40778:	10a00004 	addi	r2,r2,-32768
   4077c:	80800015 	stw	r2,0(r16)

		data += 8;
   40780:	d0a6b117 	ldw	r2,-25916(gp)
   40784:	10800804 	addi	r2,r2,32
   40788:	d0a6b115 	stw	r2,-25916(gp)
		data[i] = (int16_t)read_BC();
		printf("%d | %d -> %d\n", round, i, data[i]);
	}
	//ledBlink(3);

	for (i=8; i>0; i--){
   4078c:	e0bff50b 	ldhu	r2,-44(fp)
   40790:	10bfffc4 	addi	r2,r2,-1
   40794:	e0bff50d 	sth	r2,-44(fp)
   40798:	e0bff50b 	ldhu	r2,-44(fp)
   4079c:	103ee91e 	bne	r2,zero,40344 <DCT+0xa8>
		data[3] = (int16_t) ((x0*c3 - x1*c7 - x2*c1 - x3*c5) >> s2);
		data[1] = (int16_t) ((x0*c1 + x1*c3 + x2*c5 + x3*c7) >> s2);

		data += 8;
	}
	data -= 64;
   407a0:	d0a6b117 	ldw	r2,-25916(gp)
   407a4:	10bfc004 	addi	r2,r2,-256
   407a8:	d0a6b115 	stw	r2,-25916(gp)

	for (i=8; i>0; i--){
   407ac:	00800204 	movi	r2,8
   407b0:	e0bff50d 	sth	r2,-44(fp)
   407b4:	00011906 	br	40c1c <DCT+0x980>
		x8 = data[0] + data[56];
   407b8:	d0a6b117 	ldw	r2,-25916(gp)
   407bc:	10c00017 	ldw	r3,0(r2)
   407c0:	d0a6b117 	ldw	r2,-25916(gp)
   407c4:	10803804 	addi	r2,r2,224
   407c8:	10800017 	ldw	r2,0(r2)
   407cc:	1885883a 	add	r2,r3,r2
   407d0:	e0bff615 	stw	r2,-40(fp)
		x0 = data[0] - data[56];
   407d4:	d0a6b117 	ldw	r2,-25916(gp)
   407d8:	10c00017 	ldw	r3,0(r2)
   407dc:	d0a6b117 	ldw	r2,-25916(gp)
   407e0:	10803804 	addi	r2,r2,224
   407e4:	10800017 	ldw	r2,0(r2)
   407e8:	1885c83a 	sub	r2,r3,r2
   407ec:	e0bff715 	stw	r2,-36(fp)

		x7 = data[8] + data[48];
   407f0:	d0a6b117 	ldw	r2,-25916(gp)
   407f4:	10800804 	addi	r2,r2,32
   407f8:	10c00017 	ldw	r3,0(r2)
   407fc:	d0a6b117 	ldw	r2,-25916(gp)
   40800:	10803004 	addi	r2,r2,192
   40804:	10800017 	ldw	r2,0(r2)
   40808:	1885883a 	add	r2,r3,r2
   4080c:	e0bff815 	stw	r2,-32(fp)
		x1 = data[8] - data[48];
   40810:	d0a6b117 	ldw	r2,-25916(gp)
   40814:	10800804 	addi	r2,r2,32
   40818:	10c00017 	ldw	r3,0(r2)
   4081c:	d0a6b117 	ldw	r2,-25916(gp)
   40820:	10803004 	addi	r2,r2,192
   40824:	10800017 	ldw	r2,0(r2)
   40828:	1885c83a 	sub	r2,r3,r2
   4082c:	e0bff915 	stw	r2,-28(fp)

		x6 = data[16] + data[40];
   40830:	d0a6b117 	ldw	r2,-25916(gp)
   40834:	10801004 	addi	r2,r2,64
   40838:	10c00017 	ldw	r3,0(r2)
   4083c:	d0a6b117 	ldw	r2,-25916(gp)
   40840:	10802804 	addi	r2,r2,160
   40844:	10800017 	ldw	r2,0(r2)
   40848:	1885883a 	add	r2,r3,r2
   4084c:	e0bffa15 	stw	r2,-24(fp)
		x2 = data[16] - data[40];
   40850:	d0a6b117 	ldw	r2,-25916(gp)
   40854:	10801004 	addi	r2,r2,64
   40858:	10c00017 	ldw	r3,0(r2)
   4085c:	d0a6b117 	ldw	r2,-25916(gp)
   40860:	10802804 	addi	r2,r2,160
   40864:	10800017 	ldw	r2,0(r2)
   40868:	1885c83a 	sub	r2,r3,r2
   4086c:	e0bffb15 	stw	r2,-20(fp)

		x5 = data[24] + data[32];
   40870:	d0a6b117 	ldw	r2,-25916(gp)
   40874:	10801804 	addi	r2,r2,96
   40878:	10c00017 	ldw	r3,0(r2)
   4087c:	d0a6b117 	ldw	r2,-25916(gp)
   40880:	10802004 	addi	r2,r2,128
   40884:	10800017 	ldw	r2,0(r2)
   40888:	1885883a 	add	r2,r3,r2
   4088c:	e0bffc15 	stw	r2,-16(fp)
		x3 = data[24] - data[32];
   40890:	d0a6b117 	ldw	r2,-25916(gp)
   40894:	10801804 	addi	r2,r2,96
   40898:	10c00017 	ldw	r3,0(r2)
   4089c:	d0a6b117 	ldw	r2,-25916(gp)
   408a0:	10802004 	addi	r2,r2,128
   408a4:	10800017 	ldw	r2,0(r2)
   408a8:	1885c83a 	sub	r2,r3,r2
   408ac:	e0bffd15 	stw	r2,-12(fp)

		x4 = x8 + x5;
   408b0:	e0fff617 	ldw	r3,-40(fp)
   408b4:	e0bffc17 	ldw	r2,-16(fp)
   408b8:	1885883a 	add	r2,r3,r2
   408bc:	e0bffe15 	stw	r2,-8(fp)
		x8 -= x5;
   408c0:	e0fff617 	ldw	r3,-40(fp)
   408c4:	e0bffc17 	ldw	r2,-16(fp)
   408c8:	1885c83a 	sub	r2,r3,r2
   408cc:	e0bff615 	stw	r2,-40(fp)

		x5 = x7 + x6;
   408d0:	e0fff817 	ldw	r3,-32(fp)
   408d4:	e0bffa17 	ldw	r2,-24(fp)
   408d8:	1885883a 	add	r2,r3,r2
   408dc:	e0bffc15 	stw	r2,-16(fp)
		x7 -= x6;
   408e0:	e0fff817 	ldw	r3,-32(fp)
   408e4:	e0bffa17 	ldw	r2,-24(fp)
   408e8:	1885c83a 	sub	r2,r3,r2
   408ec:	e0bff815 	stw	r2,-32(fp)

		data[0] = (int16_t) ((x4 + x5) >> s1);
   408f0:	d0a6b117 	ldw	r2,-25916(gp)
   408f4:	e13ffe17 	ldw	r4,-8(fp)
   408f8:	e0fffc17 	ldw	r3,-16(fp)
   408fc:	20c9883a 	add	r4,r4,r3
   40900:	d0e0038b 	ldhu	r3,-32754(gp)
   40904:	18ffffcc 	andi	r3,r3,65535
   40908:	20c7d83a 	sra	r3,r4,r3
   4090c:	18ffffcc 	andi	r3,r3,65535
   40910:	18e0001c 	xori	r3,r3,32768
   40914:	18e00004 	addi	r3,r3,-32768
   40918:	10c00015 	stw	r3,0(r2)
		data[32] = (int16_t) ((x4 - x5) >> s1);
   4091c:	d0a6b117 	ldw	r2,-25916(gp)
   40920:	10802004 	addi	r2,r2,128
   40924:	e13ffe17 	ldw	r4,-8(fp)
   40928:	e0fffc17 	ldw	r3,-16(fp)
   4092c:	20c9c83a 	sub	r4,r4,r3
   40930:	d0e0038b 	ldhu	r3,-32754(gp)
   40934:	18ffffcc 	andi	r3,r3,65535
   40938:	20c7d83a 	sra	r3,r4,r3
   4093c:	18ffffcc 	andi	r3,r3,65535
   40940:	18e0001c 	xori	r3,r3,32768
   40944:	18e00004 	addi	r3,r3,-32768
   40948:	10c00015 	stw	r3,0(r2)

		data[16] = (int16_t) ((x8*c2 + x7*c6) >> s3);
   4094c:	d0a6b117 	ldw	r2,-25916(gp)
   40950:	14001004 	addi	r16,r2,64
   40954:	d0a0000b 	ldhu	r2,-32768(gp)
   40958:	10bfffcc 	andi	r2,r2,65535
   4095c:	1009883a 	mov	r4,r2
   40960:	e17ff617 	ldw	r5,-40(fp)
   40964:	00419f00 	call	419f0 <__mulsi3>
   40968:	1023883a 	mov	r17,r2
   4096c:	d0a0008b 	ldhu	r2,-32766(gp)
   40970:	10bfffcc 	andi	r2,r2,65535
   40974:	1009883a 	mov	r4,r2
   40978:	e17ff817 	ldw	r5,-32(fp)
   4097c:	00419f00 	call	419f0 <__mulsi3>
   40980:	8887883a 	add	r3,r17,r2
   40984:	d0a0040b 	ldhu	r2,-32752(gp)
   40988:	10bfffcc 	andi	r2,r2,65535
   4098c:	1885d83a 	sra	r2,r3,r2
   40990:	10bfffcc 	andi	r2,r2,65535
   40994:	10a0001c 	xori	r2,r2,32768
   40998:	10a00004 	addi	r2,r2,-32768
   4099c:	80800015 	stw	r2,0(r16)
		data[48] = (int16_t) ((x8*c6 - x7*c2) >> s3);
   409a0:	d0a6b117 	ldw	r2,-25916(gp)
   409a4:	14003004 	addi	r16,r2,192
   409a8:	d0a0008b 	ldhu	r2,-32766(gp)
   409ac:	10bfffcc 	andi	r2,r2,65535
   409b0:	1009883a 	mov	r4,r2
   409b4:	e17ff617 	ldw	r5,-40(fp)
   409b8:	00419f00 	call	419f0 <__mulsi3>
   409bc:	1023883a 	mov	r17,r2
   409c0:	d0a0000b 	ldhu	r2,-32768(gp)
   409c4:	10bfffcc 	andi	r2,r2,65535
   409c8:	1009883a 	mov	r4,r2
   409cc:	e17ff817 	ldw	r5,-32(fp)
   409d0:	00419f00 	call	419f0 <__mulsi3>
   409d4:	8887c83a 	sub	r3,r17,r2
   409d8:	d0a0040b 	ldhu	r2,-32752(gp)
   409dc:	10bfffcc 	andi	r2,r2,65535
   409e0:	1885d83a 	sra	r2,r3,r2
   409e4:	10bfffcc 	andi	r2,r2,65535
   409e8:	10a0001c 	xori	r2,r2,32768
   409ec:	10a00004 	addi	r2,r2,-32768
   409f0:	80800015 	stw	r2,0(r16)

		data[56] = (int16_t) ((x0*c7 - x1*c5 + x2*c3 - x3*c1) >> s3);
   409f4:	d0a6b117 	ldw	r2,-25916(gp)
   409f8:	14003804 	addi	r16,r2,224
   409fc:	d0a0018b 	ldhu	r2,-32762(gp)
   40a00:	10bfffcc 	andi	r2,r2,65535
   40a04:	1009883a 	mov	r4,r2
   40a08:	e17ff717 	ldw	r5,-36(fp)
   40a0c:	00419f00 	call	419f0 <__mulsi3>
   40a10:	1023883a 	mov	r17,r2
   40a14:	d0a0020b 	ldhu	r2,-32760(gp)
   40a18:	10bfffcc 	andi	r2,r2,65535
   40a1c:	1009883a 	mov	r4,r2
   40a20:	e17ff917 	ldw	r5,-28(fp)
   40a24:	00419f00 	call	419f0 <__mulsi3>
   40a28:	88a3c83a 	sub	r17,r17,r2
   40a2c:	d0a0028b 	ldhu	r2,-32758(gp)
   40a30:	10bfffcc 	andi	r2,r2,65535
   40a34:	1009883a 	mov	r4,r2
   40a38:	e17ffb17 	ldw	r5,-20(fp)
   40a3c:	00419f00 	call	419f0 <__mulsi3>
   40a40:	88a3883a 	add	r17,r17,r2
   40a44:	d0a0030b 	ldhu	r2,-32756(gp)
   40a48:	10bfffcc 	andi	r2,r2,65535
   40a4c:	1009883a 	mov	r4,r2
   40a50:	e17ffd17 	ldw	r5,-12(fp)
   40a54:	00419f00 	call	419f0 <__mulsi3>
   40a58:	8887c83a 	sub	r3,r17,r2
   40a5c:	d0a0040b 	ldhu	r2,-32752(gp)
   40a60:	10bfffcc 	andi	r2,r2,65535
   40a64:	1885d83a 	sra	r2,r3,r2
   40a68:	10bfffcc 	andi	r2,r2,65535
   40a6c:	10a0001c 	xori	r2,r2,32768
   40a70:	10a00004 	addi	r2,r2,-32768
   40a74:	80800015 	stw	r2,0(r16)
		data[40] = (int16_t) ((x0*c5 - x1*c1 + x2*c7 + x3*c3) >> s3);
   40a78:	d0a6b117 	ldw	r2,-25916(gp)
   40a7c:	14002804 	addi	r16,r2,160
   40a80:	d0a0020b 	ldhu	r2,-32760(gp)
   40a84:	10bfffcc 	andi	r2,r2,65535
   40a88:	1009883a 	mov	r4,r2
   40a8c:	e17ff717 	ldw	r5,-36(fp)
   40a90:	00419f00 	call	419f0 <__mulsi3>
   40a94:	1023883a 	mov	r17,r2
   40a98:	d0a0030b 	ldhu	r2,-32756(gp)
   40a9c:	10bfffcc 	andi	r2,r2,65535
   40aa0:	1009883a 	mov	r4,r2
   40aa4:	e17ff917 	ldw	r5,-28(fp)
   40aa8:	00419f00 	call	419f0 <__mulsi3>
   40aac:	88a3c83a 	sub	r17,r17,r2
   40ab0:	d0a0018b 	ldhu	r2,-32762(gp)
   40ab4:	10bfffcc 	andi	r2,r2,65535
   40ab8:	1009883a 	mov	r4,r2
   40abc:	e17ffb17 	ldw	r5,-20(fp)
   40ac0:	00419f00 	call	419f0 <__mulsi3>
   40ac4:	88a3883a 	add	r17,r17,r2
   40ac8:	d0a0028b 	ldhu	r2,-32758(gp)
   40acc:	10bfffcc 	andi	r2,r2,65535
   40ad0:	1009883a 	mov	r4,r2
   40ad4:	e17ffd17 	ldw	r5,-12(fp)
   40ad8:	00419f00 	call	419f0 <__mulsi3>
   40adc:	8887883a 	add	r3,r17,r2
   40ae0:	d0a0040b 	ldhu	r2,-32752(gp)
   40ae4:	10bfffcc 	andi	r2,r2,65535
   40ae8:	1885d83a 	sra	r2,r3,r2
   40aec:	10bfffcc 	andi	r2,r2,65535
   40af0:	10a0001c 	xori	r2,r2,32768
   40af4:	10a00004 	addi	r2,r2,-32768
   40af8:	80800015 	stw	r2,0(r16)
		data[24] = (int16_t) ((x0*c3 - x1*c7 - x2*c1 - x3*c5) >> s3);
   40afc:	d0a6b117 	ldw	r2,-25916(gp)
   40b00:	14001804 	addi	r16,r2,96
   40b04:	d0a0028b 	ldhu	r2,-32758(gp)
   40b08:	10bfffcc 	andi	r2,r2,65535
   40b0c:	1009883a 	mov	r4,r2
   40b10:	e17ff717 	ldw	r5,-36(fp)
   40b14:	00419f00 	call	419f0 <__mulsi3>
   40b18:	1023883a 	mov	r17,r2
   40b1c:	d0a0018b 	ldhu	r2,-32762(gp)
   40b20:	10bfffcc 	andi	r2,r2,65535
   40b24:	1009883a 	mov	r4,r2
   40b28:	e17ff917 	ldw	r5,-28(fp)
   40b2c:	00419f00 	call	419f0 <__mulsi3>
   40b30:	88a3c83a 	sub	r17,r17,r2
   40b34:	d0a0030b 	ldhu	r2,-32756(gp)
   40b38:	10bfffcc 	andi	r2,r2,65535
   40b3c:	1009883a 	mov	r4,r2
   40b40:	e17ffb17 	ldw	r5,-20(fp)
   40b44:	00419f00 	call	419f0 <__mulsi3>
   40b48:	88a3c83a 	sub	r17,r17,r2
   40b4c:	d0a0020b 	ldhu	r2,-32760(gp)
   40b50:	10bfffcc 	andi	r2,r2,65535
   40b54:	1009883a 	mov	r4,r2
   40b58:	e17ffd17 	ldw	r5,-12(fp)
   40b5c:	00419f00 	call	419f0 <__mulsi3>
   40b60:	8887c83a 	sub	r3,r17,r2
   40b64:	d0a0040b 	ldhu	r2,-32752(gp)
   40b68:	10bfffcc 	andi	r2,r2,65535
   40b6c:	1885d83a 	sra	r2,r3,r2
   40b70:	10bfffcc 	andi	r2,r2,65535
   40b74:	10a0001c 	xori	r2,r2,32768
   40b78:	10a00004 	addi	r2,r2,-32768
   40b7c:	80800015 	stw	r2,0(r16)
		data[8] = (int16_t) ((x0*c1 + x1*c3 + x2*c5 + x3*c7) >> s3);
   40b80:	d0a6b117 	ldw	r2,-25916(gp)
   40b84:	14000804 	addi	r16,r2,32
   40b88:	d0a0030b 	ldhu	r2,-32756(gp)
   40b8c:	10bfffcc 	andi	r2,r2,65535
   40b90:	1009883a 	mov	r4,r2
   40b94:	e17ff717 	ldw	r5,-36(fp)
   40b98:	00419f00 	call	419f0 <__mulsi3>
   40b9c:	1023883a 	mov	r17,r2
   40ba0:	d0a0028b 	ldhu	r2,-32758(gp)
   40ba4:	10bfffcc 	andi	r2,r2,65535
   40ba8:	1009883a 	mov	r4,r2
   40bac:	e17ff917 	ldw	r5,-28(fp)
   40bb0:	00419f00 	call	419f0 <__mulsi3>
   40bb4:	88a3883a 	add	r17,r17,r2
   40bb8:	d0a0020b 	ldhu	r2,-32760(gp)
   40bbc:	10bfffcc 	andi	r2,r2,65535
   40bc0:	1009883a 	mov	r4,r2
   40bc4:	e17ffb17 	ldw	r5,-20(fp)
   40bc8:	00419f00 	call	419f0 <__mulsi3>
   40bcc:	88a3883a 	add	r17,r17,r2
   40bd0:	d0a0018b 	ldhu	r2,-32762(gp)
   40bd4:	10bfffcc 	andi	r2,r2,65535
   40bd8:	1009883a 	mov	r4,r2
   40bdc:	e17ffd17 	ldw	r5,-12(fp)
   40be0:	00419f00 	call	419f0 <__mulsi3>
   40be4:	8887883a 	add	r3,r17,r2
   40be8:	d0a0040b 	ldhu	r2,-32752(gp)
   40bec:	10bfffcc 	andi	r2,r2,65535
   40bf0:	1885d83a 	sra	r2,r3,r2
   40bf4:	10bfffcc 	andi	r2,r2,65535
   40bf8:	10a0001c 	xori	r2,r2,32768
   40bfc:	10a00004 	addi	r2,r2,-32768
   40c00:	80800015 	stw	r2,0(r16)
		data++;
   40c04:	d0a6b117 	ldw	r2,-25916(gp)
   40c08:	10800104 	addi	r2,r2,4
   40c0c:	d0a6b115 	stw	r2,-25916(gp)

		data += 8;
	}
	data -= 64;

	for (i=8; i>0; i--){
   40c10:	e0bff50b 	ldhu	r2,-44(fp)
   40c14:	10bfffc4 	addi	r2,r2,-1
   40c18:	e0bff50d 	sth	r2,-44(fp)
   40c1c:	e0bff50b 	ldhu	r2,-44(fp)
   40c20:	103ee51e 	bne	r2,zero,407b8 <DCT+0x51c>
		data[24] = (int16_t) ((x0*c3 - x1*c7 - x2*c1 - x3*c5) >> s3);
		data[8] = (int16_t) ((x0*c1 + x1*c3 + x2*c5 + x3*c7) >> s3);
		data++;
	}

	data -= 8;
   40c24:	d0a6b117 	ldw	r2,-25916(gp)
   40c28:	10bff804 	addi	r2,r2,-32
   40c2c:	d0a6b115 	stw	r2,-25916(gp)

	/* write out to queue */
	for (i=0; i<64; i++){
   40c30:	e03ff50d 	sth	zero,-44(fp)
   40c34:	00000e06 	br	40c70 <DCT+0x9d4>
		SEND(data[i]);
   40c38:	d0e6b117 	ldw	r3,-25916(gp)
   40c3c:	e0bff50b 	ldhu	r2,-44(fp)
   40c40:	1085883a 	add	r2,r2,r2
   40c44:	1085883a 	add	r2,r2,r2
   40c48:	1885883a 	add	r2,r3,r2
   40c4c:	10800017 	ldw	r2,0(r2)
   40c50:	10bfffcc 	andi	r2,r2,65535
   40c54:	10a0001c 	xori	r2,r2,32768
   40c58:	10a00004 	addi	r2,r2,-32768
   40c5c:	1009883a 	mov	r4,r2
   40c60:	00401f40 	call	401f4 <SEND>
	}

	data -= 8;

	/* write out to queue */
	for (i=0; i<64; i++){
   40c64:	e0bff50b 	ldhu	r2,-44(fp)
   40c68:	10800044 	addi	r2,r2,1
   40c6c:	e0bff50d 	sth	r2,-44(fp)
   40c70:	e0bff50b 	ldhu	r2,-44(fp)
   40c74:	10801030 	cmpltui	r2,r2,64
   40c78:	103fef1e 	bne	r2,zero,40c38 <DCT+0x99c>
		SEND(data[i]);
	}
	printf("round %d\n\n", round);
   40c7c:	e0bfff03 	ldbu	r2,-4(fp)
   40c80:	01000174 	movhi	r4,5
   40c84:	21381104 	addi	r4,r4,-8124
   40c88:	100b883a 	mov	r5,r2
   40c8c:	00421f00 	call	421f0 <printf>
	//readStatus_CD();
	ledBlink(3);
   40c90:	010000c4 	movi	r4,3
   40c94:	00419940 	call	41994 <ledBlink>
}
   40c98:	e037883a 	mov	sp,fp
   40c9c:	dfc00317 	ldw	ra,12(sp)
   40ca0:	df000217 	ldw	fp,8(sp)
   40ca4:	dc400117 	ldw	r17,4(sp)
   40ca8:	dc000017 	ldw	r16,0(sp)
   40cac:	dec00404 	addi	sp,sp,16
   40cb0:	f800283a 	ret

00040cb4 <INIT_B>:
#include <stdlib.h>

//#include "sys/alt_timestamp.h"
#include "FIFO.h"

void INIT_B(uint32_t csrAddr, uint8_t id, uint8_t size){
   40cb4:	defffa04 	addi	sp,sp,-24
   40cb8:	dfc00515 	stw	ra,20(sp)
   40cbc:	df000415 	stw	fp,16(sp)
   40cc0:	df000404 	addi	fp,sp,16
   40cc4:	e13ffd15 	stw	r4,-12(fp)
   40cc8:	2807883a 	mov	r3,r5
   40ccc:	3005883a 	mov	r2,r6
   40cd0:	e0fffe05 	stb	r3,-8(fp)
   40cd4:	e0bfff05 	stb	r2,-4(fp)

	//int resp = altera_avalon_fifo_init(csrAddr, 0, ALMOST_EMPTY, ALMOST_FULL);
	int resp = altera_avalon_fifo_init(csrAddr, 0, 2, size-5);
   40cd8:	e0bfff03 	ldbu	r2,-4(fp)
   40cdc:	10bffec4 	addi	r2,r2,-5
   40ce0:	e13ffd17 	ldw	r4,-12(fp)
   40ce4:	000b883a 	mov	r5,zero
   40ce8:	01800084 	movi	r6,2
   40cec:	100f883a 	mov	r7,r2
   40cf0:	004bbf80 	call	4bbf8 <altera_avalon_fifo_init>
   40cf4:	e0bffc15 	stw	r2,-16(fp)

	printf("FIFO %d Init\n", id);
   40cf8:	e0bffe03 	ldbu	r2,-8(fp)
   40cfc:	01000174 	movhi	r4,5
   40d00:	21381404 	addi	r4,r4,-8112
   40d04:	100b883a 	mov	r5,r2
   40d08:	00421f00 	call	421f0 <printf>
	else if(resp == ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR)  printf("ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR\n\n");
	else if(resp == ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR)  printf("ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR\n\n");
	else printf("Unknown\n\n");
*/
	//print_status(csrAddr);
}
   40d0c:	e037883a 	mov	sp,fp
   40d10:	dfc00117 	ldw	ra,4(sp)
   40d14:	df000017 	ldw	fp,0(sp)
   40d18:	dec00204 	addi	sp,sp,8
   40d1c:	f800283a 	ret

00040d20 <WRITE_B>:

void WRITE_B(int *buffer, uint32_t writeAddr, uint32_t csrAddr, uint8_t size, uint8_t id){
   40d20:	defff804 	addi	sp,sp,-32
   40d24:	dfc00715 	stw	ra,28(sp)
   40d28:	df000615 	stw	fp,24(sp)
   40d2c:	df000604 	addi	fp,sp,24
   40d30:	e13ffb15 	stw	r4,-20(fp)
   40d34:	e17ffc15 	stw	r5,-16(fp)
   40d38:	e1bffd15 	stw	r6,-12(fp)
   40d3c:	3805883a 	mov	r2,r7
   40d40:	e0c00217 	ldw	r3,8(fp)
   40d44:	e0bffe05 	stb	r2,-8(fp)
   40d48:	e0ffff05 	stb	r3,-4(fp)

	while(altera_avalon_fifo_read_level(csrAddr)>=size){
   40d4c:	0001883a 	nop
   40d50:	00000106 	br	40d58 <WRITE_B+0x38>
		continue;
   40d54:	0001883a 	nop
	//print_status(csrAddr);
}

void WRITE_B(int *buffer, uint32_t writeAddr, uint32_t csrAddr, uint8_t size, uint8_t id){

	while(altera_avalon_fifo_read_level(csrAddr)>=size){
   40d58:	e13ffd17 	ldw	r4,-12(fp)
   40d5c:	004bd9c0 	call	4bd9c <altera_avalon_fifo_read_level>
   40d60:	e0fffe03 	ldbu	r3,-8(fp)
   40d64:	10fffb0e 	bge	r2,r3,40d54 <WRITE_B+0x34>
		continue;
	}
	int resp = altera_avalon_fifo_write_fifo(writeAddr, csrAddr , *buffer);
   40d68:	e0bffb17 	ldw	r2,-20(fp)
   40d6c:	10800017 	ldw	r2,0(r2)
   40d70:	e13ffc17 	ldw	r4,-16(fp)
   40d74:	e17ffd17 	ldw	r5,-12(fp)
   40d78:	100d883a 	mov	r6,r2
   40d7c:	004bf280 	call	4bf28 <altera_avalon_fifo_write_fifo>
   40d80:	e0bffa15 	stw	r2,-24(fp)
	else if(resp== ALTERA_AVALON_FIFO_FULL) printf("resp: ALTERA_AVALON_FIFO_FULL\n");
	int level = altera_avalon_fifo_read_level(csrAddr);
	printf("%d > write %d to FIFO, resp=%d level=%d\n\n", id, (int)*buffer, resp, level);
	#endif

}
   40d84:	e037883a 	mov	sp,fp
   40d88:	dfc00117 	ldw	ra,4(sp)
   40d8c:	df000017 	ldw	fp,0(sp)
   40d90:	dec00204 	addi	sp,sp,8
   40d94:	f800283a 	ret

00040d98 <READ_B>:

void READ_B(int *buffer, uint32_t readAddr, uint32_t csrAddr, uint8_t id){
   40d98:	defff904 	addi	sp,sp,-28
   40d9c:	dfc00615 	stw	ra,24(sp)
   40da0:	df000515 	stw	fp,20(sp)
   40da4:	df000504 	addi	fp,sp,20
   40da8:	e13ffc15 	stw	r4,-16(fp)
   40dac:	e17ffd15 	stw	r5,-12(fp)
   40db0:	e1bffe15 	stw	r6,-8(fp)
   40db4:	3805883a 	mov	r2,r7
   40db8:	e0bfff05 	stb	r2,-4(fp)

	while(altera_avalon_fifo_read_level(csrAddr)==0){
   40dbc:	0001883a 	nop
   40dc0:	00000106 	br	40dc8 <READ_B+0x30>
		continue;
   40dc4:	0001883a 	nop

}

void READ_B(int *buffer, uint32_t readAddr, uint32_t csrAddr, uint8_t id){

	while(altera_avalon_fifo_read_level(csrAddr)==0){
   40dc8:	e13ffe17 	ldw	r4,-8(fp)
   40dcc:	004bd9c0 	call	4bd9c <altera_avalon_fifo_read_level>
   40dd0:	103ffc26 	beq	r2,zero,40dc4 <READ_B+0x2c>
		continue;
	}

	int resp = altera_avalon_fifo_read_fifo(readAddr, csrAddr);
   40dd4:	e13ffd17 	ldw	r4,-12(fp)
   40dd8:	e17ffe17 	ldw	r5,-8(fp)
   40ddc:	004bfec0 	call	4bfec <altera_avalon_fifo_read_fifo>
   40de0:	e0bffb15 	stw	r2,-20(fp)
	*buffer = resp;
   40de4:	e0bffc17 	ldw	r2,-16(fp)
   40de8:	e0fffb17 	ldw	r3,-20(fp)
   40dec:	10c00015 	stw	r3,0(r2)
	else if(resp== ALTERA_AVALON_FIFO_FULL) printf("ALTERA_AVALON_FIFO_FULL\n\n");
	int level = altera_avalon_fifo_read_level(csrAddr);
	printf("reading from FIFO, resp=%d level=%d\n", resp, level);
	#endif

}
   40df0:	e037883a 	mov	sp,fp
   40df4:	dfc00117 	ldw	ra,4(sp)
   40df8:	df000017 	ldw	fp,0(sp)
   40dfc:	dec00204 	addi	sp,sp,8
   40e00:	f800283a 	ret

00040e04 <WRITE_FIFO>:



//------------------------------------------------------------------------------

void WRITE_FIFO(int *buffer){
   40e04:	defffe04 	addi	sp,sp,-8
   40e08:	df000115 	stw	fp,4(sp)
   40e0c:	df000104 	addi	fp,sp,4
   40e10:	e13fff15 	stw	r4,-4(fp)
#endif

//printf("%lu \n",(unsigned long)((sw_timeB - sw_timeA)));
//t= t+(sw_timeB - sw_timeA);
*/
}
   40e14:	e037883a 	mov	sp,fp
   40e18:	df000017 	ldw	fp,0(sp)
   40e1c:	dec00104 	addi	sp,sp,4
   40e20:	f800283a 	ret

00040e24 <READ_FIFO>:

void READ_FIFO(int *buffer){
   40e24:	defffe04 	addi	sp,sp,-8
   40e28:	df000115 	stw	fp,4(sp)
   40e2c:	df000104 	addi	fp,sp,4
   40e30:	e13fff15 	stw	r4,-4(fp)
#endif

//printf("%lu \n",(unsigned long)((sw_timeB - sw_timeA)));
//t= t+(sw_timeB - sw_timeA);
*/
}
   40e34:	e037883a 	mov	sp,fp
   40e38:	df000017 	ldw	fp,0(sp)
   40e3c:	dec00104 	addi	sp,sp,4
   40e40:	f800283a 	ret

00040e44 <FIFO_INIT>:

//Initialization
void FIFO_INIT(){
   40e44:	deffff04 	addi	sp,sp,-4
   40e48:	df000015 	stw	fp,0(sp)
   40e4c:	d839883a 	mov	fp,sp
	else if(resp == ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR)  printf("ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR\n\n");
	else printf("Unknown\n\n");

	print_status(INPUT_FIFO_IN_CSR_BASE);
	*/
}
   40e50:	e037883a 	mov	sp,fp
   40e54:	df000017 	ldw	fp,0(sp)
   40e58:	dec00104 	addi	sp,sp,4
   40e5c:	f800283a 	ret

00040e60 <print_status>:


volatile int input_fifo_wrclk_irq_event;

void print_status(alt_u32 control_base_address){
   40e60:	defffd04 	addi	sp,sp,-12
   40e64:	dfc00215 	stw	ra,8(sp)
   40e68:	df000115 	stw	fp,4(sp)
   40e6c:	df000104 	addi	fp,sp,4
   40e70:	e13fff15 	stw	r4,-4(fp)
	printf("--------------------------------------\n");
   40e74:	01000174 	movhi	r4,5
   40e78:	21381804 	addi	r4,r4,-8096
   40e7c:	00422b00 	call	422b0 <puts>
	printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   40e80:	e13fff17 	ldw	r4,-4(fp)
   40e84:	004bd9c0 	call	4bd9c <altera_avalon_fifo_read_level>
   40e88:	01000174 	movhi	r4,5
   40e8c:	21382204 	addi	r4,r4,-8056
   40e90:	100b883a 	mov	r5,r2
   40e94:	00421f00 	call	421f0 <printf>
	printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address, ALTERA_AVALON_FIFO_STATUS_ALL) );
   40e98:	e13fff17 	ldw	r4,-4(fp)
   40e9c:	01400fc4 	movi	r5,63
   40ea0:	004bc900 	call	4bc90 <altera_avalon_fifo_read_status>
   40ea4:	01000174 	movhi	r4,5
   40ea8:	21382504 	addi	r4,r4,-8044
   40eac:	100b883a 	mov	r5,r2
   40eb0:	00421f00 	call	421f0 <printf>
	printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address, ALTERA_AVALON_FIFO_EVENT_ALL) );
   40eb4:	e13fff17 	ldw	r4,-4(fp)
   40eb8:	01400fc4 	movi	r5,63
   40ebc:	004bd600 	call	4bd60 <altera_avalon_fifo_read_event>
   40ec0:	01000174 	movhi	r4,5
   40ec4:	21382904 	addi	r4,r4,-8028
   40ec8:	100b883a 	mov	r5,r2
   40ecc:	00421f00 	call	421f0 <printf>
	//printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address, ALTERA_AVALON_FIFO_IENABLE_ALL) );
	printf("ALMOSTEMPTY = %u\n", altera_avalon_fifo_read_almostempty(control_base_address) );
   40ed0:	e13fff17 	ldw	r4,-4(fp)
   40ed4:	004bd340 	call	4bd34 <altera_avalon_fifo_read_almostempty>
   40ed8:	01000174 	movhi	r4,5
   40edc:	21382c04 	addi	r4,r4,-8016
   40ee0:	100b883a 	mov	r5,r2
   40ee4:	00421f00 	call	421f0 <printf>
	printf("ALMOSTFULL = %u\n\n", 	altera_avalon_fifo_read_almostfull(control_base_address));
   40ee8:	e13fff17 	ldw	r4,-4(fp)
   40eec:	004bd080 	call	4bd08 <altera_avalon_fifo_read_almostfull>
   40ef0:	01000174 	movhi	r4,5
   40ef4:	21383104 	addi	r4,r4,-7996
   40ef8:	100b883a 	mov	r5,r2
   40efc:	00421f00 	call	421f0 <printf>
}
   40f00:	e037883a 	mov	sp,fp
   40f04:	dfc00117 	ldw	ra,4(sp)
   40f08:	df000017 	ldw	fp,0(sp)
   40f0c:	dec00204 	addi	sp,sp,8
   40f10:	f800283a 	ret

00040f14 <init_AB_0>:
#include "FIFO.h"



// FIFO_AB_0 -------------------------------------------------------------------
void init_AB_0(){
   40f14:	defffe04 	addi	sp,sp,-8
   40f18:	dfc00115 	stw	ra,4(sp)
   40f1c:	df000015 	stw	fp,0(sp)
   40f20:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AB_0_CSR, FIFO_AB_0_ID, FIFO_AB_0_SIZE);
   40f24:	01020074 	movhi	r4,2049
   40f28:	21042804 	addi	r4,r4,4256
   40f2c:	000b883a 	mov	r5,zero
   40f30:	01801f44 	movi	r6,125
   40f34:	0040cb40 	call	40cb4 <INIT_B>
}
   40f38:	e037883a 	mov	sp,fp
   40f3c:	dfc00117 	ldw	ra,4(sp)
   40f40:	df000017 	ldw	fp,0(sp)
   40f44:	dec00204 	addi	sp,sp,8
   40f48:	f800283a 	ret

00040f4c <read_AB_0>:
int read_AB_0(){
   40f4c:	defffd04 	addi	sp,sp,-12
   40f50:	dfc00215 	stw	ra,8(sp)
   40f54:	df000115 	stw	fp,4(sp)
   40f58:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AB_0_READ, FIFO_AB_0_CSR, FIFO_AB_0_ID);
   40f5c:	e13fff04 	addi	r4,fp,-4
   40f60:	01420074 	movhi	r5,2049
   40f64:	29445604 	addi	r5,r5,4440
   40f68:	01820074 	movhi	r6,2049
   40f6c:	31842804 	addi	r6,r6,4256
   40f70:	000f883a 	mov	r7,zero
   40f74:	0040d980 	call	40d98 <READ_B>
   return val;
   40f78:	e0bfff17 	ldw	r2,-4(fp)
}
   40f7c:	e037883a 	mov	sp,fp
   40f80:	dfc00117 	ldw	ra,4(sp)
   40f84:	df000017 	ldw	fp,0(sp)
   40f88:	dec00204 	addi	sp,sp,8
   40f8c:	f800283a 	ret

00040f90 <write_AB_0>:
void write_AB_0(int *buffer){
   40f90:	defffc04 	addi	sp,sp,-16
   40f94:	dfc00315 	stw	ra,12(sp)
   40f98:	df000215 	stw	fp,8(sp)
   40f9c:	df000204 	addi	fp,sp,8
   40fa0:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AB_0_WRITE, FIFO_AB_0_CSR, FIFO_AB_0_SIZE, FIFO_AB_0_ID);
   40fa4:	d8000015 	stw	zero,0(sp)
   40fa8:	e13fff17 	ldw	r4,-4(fp)
   40fac:	01420074 	movhi	r5,2049
   40fb0:	29445904 	addi	r5,r5,4452
   40fb4:	01820074 	movhi	r6,2049
   40fb8:	31842804 	addi	r6,r6,4256
   40fbc:	01c01f44 	movi	r7,125
   40fc0:	0040d200 	call	40d20 <WRITE_B>
}
   40fc4:	e037883a 	mov	sp,fp
   40fc8:	dfc00117 	ldw	ra,4(sp)
   40fcc:	df000017 	ldw	fp,0(sp)
   40fd0:	dec00204 	addi	sp,sp,8
   40fd4:	f800283a 	ret

00040fd8 <readStatus_AB_0>:
void readStatus_AB_0(){
   40fd8:	defffe04 	addi	sp,sp,-8
   40fdc:	dfc00115 	stw	ra,4(sp)
   40fe0:	df000015 	stw	fp,0(sp)
   40fe4:	d839883a 	mov	fp,sp
   print_status(FIFO_AB_0_CSR);
   40fe8:	01020074 	movhi	r4,2049
   40fec:	21042804 	addi	r4,r4,4256
   40ff0:	0040e600 	call	40e60 <print_status>
}
   40ff4:	e037883a 	mov	sp,fp
   40ff8:	dfc00117 	ldw	ra,4(sp)
   40ffc:	df000017 	ldw	fp,0(sp)
   41000:	dec00204 	addi	sp,sp,8
   41004:	f800283a 	ret

00041008 <init_AB_1>:

// FIFO_AB_1 -------------------------------------------------------------------
void init_AB_1(){
   41008:	defffe04 	addi	sp,sp,-8
   4100c:	dfc00115 	stw	ra,4(sp)
   41010:	df000015 	stw	fp,0(sp)
   41014:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AB_1_CSR, FIFO_AB_1_ID, FIFO_AB_1_SIZE);
   41018:	01020074 	movhi	r4,2049
   4101c:	21042004 	addi	r4,r4,4224
   41020:	01400044 	movi	r5,1
   41024:	01801f44 	movi	r6,125
   41028:	0040cb40 	call	40cb4 <INIT_B>
}
   4102c:	e037883a 	mov	sp,fp
   41030:	dfc00117 	ldw	ra,4(sp)
   41034:	df000017 	ldw	fp,0(sp)
   41038:	dec00204 	addi	sp,sp,8
   4103c:	f800283a 	ret

00041040 <read_AB_1>:
int read_AB_1(){
   41040:	defffd04 	addi	sp,sp,-12
   41044:	dfc00215 	stw	ra,8(sp)
   41048:	df000115 	stw	fp,4(sp)
   4104c:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AB_1_READ, FIFO_AB_1_CSR, FIFO_AB_1_ID);
   41050:	e13fff04 	addi	r4,fp,-4
   41054:	01420074 	movhi	r5,2049
   41058:	29445504 	addi	r5,r5,4436
   4105c:	01820074 	movhi	r6,2049
   41060:	31842004 	addi	r6,r6,4224
   41064:	01c00044 	movi	r7,1
   41068:	0040d980 	call	40d98 <READ_B>
   return val;
   4106c:	e0bfff17 	ldw	r2,-4(fp)
}
   41070:	e037883a 	mov	sp,fp
   41074:	dfc00117 	ldw	ra,4(sp)
   41078:	df000017 	ldw	fp,0(sp)
   4107c:	dec00204 	addi	sp,sp,8
   41080:	f800283a 	ret

00041084 <write_AB_1>:
void write_AB_1(int *buffer){
   41084:	defffc04 	addi	sp,sp,-16
   41088:	dfc00315 	stw	ra,12(sp)
   4108c:	df000215 	stw	fp,8(sp)
   41090:	df000204 	addi	fp,sp,8
   41094:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AB_1_WRITE, FIFO_AB_1_CSR, FIFO_AB_1_SIZE, FIFO_AB_1_ID);
   41098:	00800044 	movi	r2,1
   4109c:	d8800015 	stw	r2,0(sp)
   410a0:	e13fff17 	ldw	r4,-4(fp)
   410a4:	01420074 	movhi	r5,2049
   410a8:	29445804 	addi	r5,r5,4448
   410ac:	01820074 	movhi	r6,2049
   410b0:	31842004 	addi	r6,r6,4224
   410b4:	01c01f44 	movi	r7,125
   410b8:	0040d200 	call	40d20 <WRITE_B>
}
   410bc:	e037883a 	mov	sp,fp
   410c0:	dfc00117 	ldw	ra,4(sp)
   410c4:	df000017 	ldw	fp,0(sp)
   410c8:	dec00204 	addi	sp,sp,8
   410cc:	f800283a 	ret

000410d0 <readStatus_AB_1>:
void readStatus_AB_1(){
   410d0:	defffe04 	addi	sp,sp,-8
   410d4:	dfc00115 	stw	ra,4(sp)
   410d8:	df000015 	stw	fp,0(sp)
   410dc:	d839883a 	mov	fp,sp
   print_status(FIFO_AB_1_CSR);
   410e0:	01020074 	movhi	r4,2049
   410e4:	21042004 	addi	r4,r4,4224
   410e8:	0040e600 	call	40e60 <print_status>
}
   410ec:	e037883a 	mov	sp,fp
   410f0:	dfc00117 	ldw	ra,4(sp)
   410f4:	df000017 	ldw	fp,0(sp)
   410f8:	dec00204 	addi	sp,sp,8
   410fc:	f800283a 	ret

00041100 <init_AB_2>:

// FIFO_AB_2 -------------------------------------------------------------------
void init_AB_2(){
   41100:	defffe04 	addi	sp,sp,-8
   41104:	dfc00115 	stw	ra,4(sp)
   41108:	df000015 	stw	fp,0(sp)
   4110c:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AB_2_CSR, FIFO_AB_2_ID, FIFO_AB_2_SIZE);
   41110:	01020074 	movhi	r4,2049
   41114:	21041804 	addi	r4,r4,4192
   41118:	01400084 	movi	r5,2
   4111c:	01801f44 	movi	r6,125
   41120:	0040cb40 	call	40cb4 <INIT_B>
}
   41124:	e037883a 	mov	sp,fp
   41128:	dfc00117 	ldw	ra,4(sp)
   4112c:	df000017 	ldw	fp,0(sp)
   41130:	dec00204 	addi	sp,sp,8
   41134:	f800283a 	ret

00041138 <read_AB_2>:
int read_AB_2(){
   41138:	defffd04 	addi	sp,sp,-12
   4113c:	dfc00215 	stw	ra,8(sp)
   41140:	df000115 	stw	fp,4(sp)
   41144:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AB_2_READ, FIFO_AB_2_CSR, FIFO_AB_2_ID);
   41148:	e13fff04 	addi	r4,fp,-4
   4114c:	01420074 	movhi	r5,2049
   41150:	29445404 	addi	r5,r5,4432
   41154:	01820074 	movhi	r6,2049
   41158:	31841804 	addi	r6,r6,4192
   4115c:	01c00084 	movi	r7,2
   41160:	0040d980 	call	40d98 <READ_B>
   return val;
   41164:	e0bfff17 	ldw	r2,-4(fp)
}
   41168:	e037883a 	mov	sp,fp
   4116c:	dfc00117 	ldw	ra,4(sp)
   41170:	df000017 	ldw	fp,0(sp)
   41174:	dec00204 	addi	sp,sp,8
   41178:	f800283a 	ret

0004117c <write_AB_2>:
void write_AB_2(int *buffer){
   4117c:	defffc04 	addi	sp,sp,-16
   41180:	dfc00315 	stw	ra,12(sp)
   41184:	df000215 	stw	fp,8(sp)
   41188:	df000204 	addi	fp,sp,8
   4118c:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AB_2_WRITE, FIFO_AB_2_CSR, FIFO_AB_2_SIZE, FIFO_AB_2_ID);
   41190:	00800084 	movi	r2,2
   41194:	d8800015 	stw	r2,0(sp)
   41198:	e13fff17 	ldw	r4,-4(fp)
   4119c:	01420074 	movhi	r5,2049
   411a0:	29445704 	addi	r5,r5,4444
   411a4:	01820074 	movhi	r6,2049
   411a8:	31841804 	addi	r6,r6,4192
   411ac:	01c01f44 	movi	r7,125
   411b0:	0040d200 	call	40d20 <WRITE_B>
}
   411b4:	e037883a 	mov	sp,fp
   411b8:	dfc00117 	ldw	ra,4(sp)
   411bc:	df000017 	ldw	fp,0(sp)
   411c0:	dec00204 	addi	sp,sp,8
   411c4:	f800283a 	ret

000411c8 <readStatus_AB_2>:
void readStatus_AB_2(){
   411c8:	defffe04 	addi	sp,sp,-8
   411cc:	dfc00115 	stw	ra,4(sp)
   411d0:	df000015 	stw	fp,0(sp)
   411d4:	d839883a 	mov	fp,sp
   print_status(FIFO_AB_2_CSR);
   411d8:	01020074 	movhi	r4,2049
   411dc:	21041804 	addi	r4,r4,4192
   411e0:	0040e600 	call	40e60 <print_status>
}
   411e4:	e037883a 	mov	sp,fp
   411e8:	dfc00117 	ldw	ra,4(sp)
   411ec:	df000017 	ldw	fp,0(sp)
   411f0:	dec00204 	addi	sp,sp,8
   411f4:	f800283a 	ret

000411f8 <init_AD>:

// FIFO_AD -------------------------------------------------------------------
void init_AD(){
   411f8:	defffe04 	addi	sp,sp,-8
   411fc:	dfc00115 	stw	ra,4(sp)
   41200:	df000015 	stw	fp,0(sp)
   41204:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AD_CSR, FIFO_AD_ID, FIFO_AD_SIZE);
   41208:	01020074 	movhi	r4,2049
   4120c:	21041004 	addi	r4,r4,4160
   41210:	014000c4 	movi	r5,3
   41214:	01800744 	movi	r6,29
   41218:	0040cb40 	call	40cb4 <INIT_B>
}
   4121c:	e037883a 	mov	sp,fp
   41220:	dfc00117 	ldw	ra,4(sp)
   41224:	df000017 	ldw	fp,0(sp)
   41228:	dec00204 	addi	sp,sp,8
   4122c:	f800283a 	ret

00041230 <read_AD>:
int read_AD(){
   41230:	defffd04 	addi	sp,sp,-12
   41234:	dfc00215 	stw	ra,8(sp)
   41238:	df000115 	stw	fp,4(sp)
   4123c:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AD_READ, FIFO_AD_CSR, FIFO_AD_ID);
   41240:	e13fff04 	addi	r4,fp,-4
   41244:	01420074 	movhi	r5,2049
   41248:	29445204 	addi	r5,r5,4424
   4124c:	01820074 	movhi	r6,2049
   41250:	31841004 	addi	r6,r6,4160
   41254:	01c000c4 	movi	r7,3
   41258:	0040d980 	call	40d98 <READ_B>
   return val;
   4125c:	e0bfff17 	ldw	r2,-4(fp)
}
   41260:	e037883a 	mov	sp,fp
   41264:	dfc00117 	ldw	ra,4(sp)
   41268:	df000017 	ldw	fp,0(sp)
   4126c:	dec00204 	addi	sp,sp,8
   41270:	f800283a 	ret

00041274 <write_AD>:
void write_AD(int *buffer){
   41274:	defffc04 	addi	sp,sp,-16
   41278:	dfc00315 	stw	ra,12(sp)
   4127c:	df000215 	stw	fp,8(sp)
   41280:	df000204 	addi	fp,sp,8
   41284:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AD_WRITE, FIFO_AD_CSR, FIFO_AD_SIZE, FIFO_AD_ID);
   41288:	008000c4 	movi	r2,3
   4128c:	d8800015 	stw	r2,0(sp)
   41290:	e13fff17 	ldw	r4,-4(fp)
   41294:	01420074 	movhi	r5,2049
   41298:	29445304 	addi	r5,r5,4428
   4129c:	01820074 	movhi	r6,2049
   412a0:	31841004 	addi	r6,r6,4160
   412a4:	01c00744 	movi	r7,29
   412a8:	0040d200 	call	40d20 <WRITE_B>
}
   412ac:	e037883a 	mov	sp,fp
   412b0:	dfc00117 	ldw	ra,4(sp)
   412b4:	df000017 	ldw	fp,0(sp)
   412b8:	dec00204 	addi	sp,sp,8
   412bc:	f800283a 	ret

000412c0 <readStatus_AD>:
void readStatus_AD(){
   412c0:	defffe04 	addi	sp,sp,-8
   412c4:	dfc00115 	stw	ra,4(sp)
   412c8:	df000015 	stw	fp,0(sp)
   412cc:	d839883a 	mov	fp,sp
   print_status(FIFO_AD_CSR);
   412d0:	01020074 	movhi	r4,2049
   412d4:	21041004 	addi	r4,r4,4160
   412d8:	0040e600 	call	40e60 <print_status>
}
   412dc:	e037883a 	mov	sp,fp
   412e0:	dfc00117 	ldw	ra,4(sp)
   412e4:	df000017 	ldw	fp,0(sp)
   412e8:	dec00204 	addi	sp,sp,8
   412ec:	f800283a 	ret

000412f0 <init_AE>:


// FIFO_AE -------------------------------------------------------------------
void init_AE(){
   412f0:	defffe04 	addi	sp,sp,-8
   412f4:	dfc00115 	stw	ra,4(sp)
   412f8:	df000015 	stw	fp,0(sp)
   412fc:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AE_CSR, FIFO_AE_ID, FIFO_AE_SIZE);
   41300:	01020074 	movhi	r4,2049
   41304:	21040804 	addi	r4,r4,4128
   41308:	01400104 	movi	r5,4
   4130c:	01800744 	movi	r6,29
   41310:	0040cb40 	call	40cb4 <INIT_B>
}
   41314:	e037883a 	mov	sp,fp
   41318:	dfc00117 	ldw	ra,4(sp)
   4131c:	df000017 	ldw	fp,0(sp)
   41320:	dec00204 	addi	sp,sp,8
   41324:	f800283a 	ret

00041328 <read_AE>:
int read_AE(){
   41328:	defffd04 	addi	sp,sp,-12
   4132c:	dfc00215 	stw	ra,8(sp)
   41330:	df000115 	stw	fp,4(sp)
   41334:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AE_READ, FIFO_AE_CSR, FIFO_AE_ID);
   41338:	e13fff04 	addi	r4,fp,-4
   4133c:	01420074 	movhi	r5,2049
   41340:	29445004 	addi	r5,r5,4416
   41344:	01820074 	movhi	r6,2049
   41348:	31840804 	addi	r6,r6,4128
   4134c:	01c00104 	movi	r7,4
   41350:	0040d980 	call	40d98 <READ_B>
   return val;
   41354:	e0bfff17 	ldw	r2,-4(fp)
}
   41358:	e037883a 	mov	sp,fp
   4135c:	dfc00117 	ldw	ra,4(sp)
   41360:	df000017 	ldw	fp,0(sp)
   41364:	dec00204 	addi	sp,sp,8
   41368:	f800283a 	ret

0004136c <write_AE>:
void write_AE(int *buffer){
   4136c:	defffc04 	addi	sp,sp,-16
   41370:	dfc00315 	stw	ra,12(sp)
   41374:	df000215 	stw	fp,8(sp)
   41378:	df000204 	addi	fp,sp,8
   4137c:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AE_WRITE, FIFO_AE_CSR, FIFO_AE_SIZE, FIFO_AE_ID);
   41380:	00800104 	movi	r2,4
   41384:	d8800015 	stw	r2,0(sp)
   41388:	e13fff17 	ldw	r4,-4(fp)
   4138c:	01420074 	movhi	r5,2049
   41390:	29445104 	addi	r5,r5,4420
   41394:	01820074 	movhi	r6,2049
   41398:	31840804 	addi	r6,r6,4128
   4139c:	01c00744 	movi	r7,29
   413a0:	0040d200 	call	40d20 <WRITE_B>
}
   413a4:	e037883a 	mov	sp,fp
   413a8:	dfc00117 	ldw	ra,4(sp)
   413ac:	df000017 	ldw	fp,0(sp)
   413b0:	dec00204 	addi	sp,sp,8
   413b4:	f800283a 	ret

000413b8 <readStatus_AE>:
void readStatus_AE(){
   413b8:	defffe04 	addi	sp,sp,-8
   413bc:	dfc00115 	stw	ra,4(sp)
   413c0:	df000015 	stw	fp,0(sp)
   413c4:	d839883a 	mov	fp,sp
   print_status(FIFO_AE_CSR);
   413c8:	01020074 	movhi	r4,2049
   413cc:	21040804 	addi	r4,r4,4128
   413d0:	0040e600 	call	40e60 <print_status>
}
   413d4:	e037883a 	mov	sp,fp
   413d8:	dfc00117 	ldw	ra,4(sp)
   413dc:	df000017 	ldw	fp,0(sp)
   413e0:	dec00204 	addi	sp,sp,8
   413e4:	f800283a 	ret

000413e8 <init_AF>:

// FIFO_AF -------------------------------------------------------------------
void init_AF(){
   413e8:	defffe04 	addi	sp,sp,-8
   413ec:	dfc00115 	stw	ra,4(sp)
   413f0:	df000015 	stw	fp,0(sp)
   413f4:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AF_CSR, FIFO_AF_ID, FIFO_AF_SIZE);
   413f8:	01020074 	movhi	r4,2049
   413fc:	21040004 	addi	r4,r4,4096
   41400:	01400144 	movi	r5,5
   41404:	01800744 	movi	r6,29
   41408:	0040cb40 	call	40cb4 <INIT_B>
}
   4140c:	e037883a 	mov	sp,fp
   41410:	dfc00117 	ldw	ra,4(sp)
   41414:	df000017 	ldw	fp,0(sp)
   41418:	dec00204 	addi	sp,sp,8
   4141c:	f800283a 	ret

00041420 <read_AF>:
int read_AF(){
   41420:	defffd04 	addi	sp,sp,-12
   41424:	dfc00215 	stw	ra,8(sp)
   41428:	df000115 	stw	fp,4(sp)
   4142c:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AF_READ, FIFO_AF_CSR, FIFO_AF_ID);
   41430:	e13fff04 	addi	r4,fp,-4
   41434:	01420074 	movhi	r5,2049
   41438:	29444e04 	addi	r5,r5,4408
   4143c:	01820074 	movhi	r6,2049
   41440:	31840004 	addi	r6,r6,4096
   41444:	01c00144 	movi	r7,5
   41448:	0040d980 	call	40d98 <READ_B>
   return val;
   4144c:	e0bfff17 	ldw	r2,-4(fp)
}
   41450:	e037883a 	mov	sp,fp
   41454:	dfc00117 	ldw	ra,4(sp)
   41458:	df000017 	ldw	fp,0(sp)
   4145c:	dec00204 	addi	sp,sp,8
   41460:	f800283a 	ret

00041464 <write_AF>:
void write_AF(int *buffer){
   41464:	defffc04 	addi	sp,sp,-16
   41468:	dfc00315 	stw	ra,12(sp)
   4146c:	df000215 	stw	fp,8(sp)
   41470:	df000204 	addi	fp,sp,8
   41474:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AF_WRITE, FIFO_AF_CSR, FIFO_AF_SIZE, FIFO_AF_ID);
   41478:	00800144 	movi	r2,5
   4147c:	d8800015 	stw	r2,0(sp)
   41480:	e13fff17 	ldw	r4,-4(fp)
   41484:	01420074 	movhi	r5,2049
   41488:	29444f04 	addi	r5,r5,4412
   4148c:	01820074 	movhi	r6,2049
   41490:	31840004 	addi	r6,r6,4096
   41494:	01c00744 	movi	r7,29
   41498:	0040d200 	call	40d20 <WRITE_B>
}
   4149c:	e037883a 	mov	sp,fp
   414a0:	dfc00117 	ldw	ra,4(sp)
   414a4:	df000017 	ldw	fp,0(sp)
   414a8:	dec00204 	addi	sp,sp,8
   414ac:	f800283a 	ret

000414b0 <readStatus_AF>:
void readStatus_AF(){
   414b0:	defffe04 	addi	sp,sp,-8
   414b4:	dfc00115 	stw	ra,4(sp)
   414b8:	df000015 	stw	fp,0(sp)
   414bc:	d839883a 	mov	fp,sp
   print_status(FIFO_AF_CSR);
   414c0:	01020074 	movhi	r4,2049
   414c4:	21040004 	addi	r4,r4,4096
   414c8:	0040e600 	call	40e60 <print_status>
}
   414cc:	e037883a 	mov	sp,fp
   414d0:	dfc00117 	ldw	ra,4(sp)
   414d4:	df000017 	ldw	fp,0(sp)
   414d8:	dec00204 	addi	sp,sp,8
   414dc:	f800283a 	ret

000414e0 <init_BC>:

// FIFO_BC -------------------------------------------------------------------
void init_BC(){
   414e0:	defffe04 	addi	sp,sp,-8
   414e4:	dfc00115 	stw	ra,4(sp)
   414e8:	df000015 	stw	fp,0(sp)
   414ec:	d839883a 	mov	fp,sp
   INIT_B(FIFO_BC_CSR, FIFO_BC_ID, FIFO_BC_SIZE);
   414f0:	01020074 	movhi	r4,2049
   414f4:	21040004 	addi	r4,r4,4096
   414f8:	01400184 	movi	r5,6
   414fc:	01803f44 	movi	r6,253
   41500:	0040cb40 	call	40cb4 <INIT_B>
}
   41504:	e037883a 	mov	sp,fp
   41508:	dfc00117 	ldw	ra,4(sp)
   4150c:	df000017 	ldw	fp,0(sp)
   41510:	dec00204 	addi	sp,sp,8
   41514:	f800283a 	ret

00041518 <read_BC>:
int read_BC(){
   41518:	defffd04 	addi	sp,sp,-12
   4151c:	dfc00215 	stw	ra,8(sp)
   41520:	df000115 	stw	fp,4(sp)
   41524:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_BC_READ, FIFO_BC_CSR, FIFO_BC_ID);
   41528:	e13fff04 	addi	r4,fp,-4
   4152c:	01420074 	movhi	r5,2049
   41530:	29443604 	addi	r5,r5,4312
   41534:	01820074 	movhi	r6,2049
   41538:	31840004 	addi	r6,r6,4096
   4153c:	01c00184 	movi	r7,6
   41540:	0040d980 	call	40d98 <READ_B>
   return val;
   41544:	e0bfff17 	ldw	r2,-4(fp)
}
   41548:	e037883a 	mov	sp,fp
   4154c:	dfc00117 	ldw	ra,4(sp)
   41550:	df000017 	ldw	fp,0(sp)
   41554:	dec00204 	addi	sp,sp,8
   41558:	f800283a 	ret

0004155c <write_BC>:
void write_BC(int *buffer){
   4155c:	defffc04 	addi	sp,sp,-16
   41560:	dfc00315 	stw	ra,12(sp)
   41564:	df000215 	stw	fp,8(sp)
   41568:	df000204 	addi	fp,sp,8
   4156c:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_BC_WRITE, FIFO_BC_CSR, FIFO_BC_SIZE, FIFO_BC_ID);
   41570:	00800184 	movi	r2,6
   41574:	d8800015 	stw	r2,0(sp)
   41578:	e13fff17 	ldw	r4,-4(fp)
   4157c:	01420074 	movhi	r5,2049
   41580:	29443704 	addi	r5,r5,4316
   41584:	01820074 	movhi	r6,2049
   41588:	31840004 	addi	r6,r6,4096
   4158c:	01c03f44 	movi	r7,253
   41590:	0040d200 	call	40d20 <WRITE_B>
}
   41594:	e037883a 	mov	sp,fp
   41598:	dfc00117 	ldw	ra,4(sp)
   4159c:	df000017 	ldw	fp,0(sp)
   415a0:	dec00204 	addi	sp,sp,8
   415a4:	f800283a 	ret

000415a8 <readStatus_BC>:
void readStatus_BC(){
   415a8:	defffe04 	addi	sp,sp,-8
   415ac:	dfc00115 	stw	ra,4(sp)
   415b0:	df000015 	stw	fp,0(sp)
   415b4:	d839883a 	mov	fp,sp
   print_status(FIFO_BC_CSR);
   415b8:	01020074 	movhi	r4,2049
   415bc:	21040004 	addi	r4,r4,4096
   415c0:	0040e600 	call	40e60 <print_status>
}
   415c4:	e037883a 	mov	sp,fp
   415c8:	dfc00117 	ldw	ra,4(sp)
   415cc:	df000017 	ldw	fp,0(sp)
   415d0:	dec00204 	addi	sp,sp,8
   415d4:	f800283a 	ret

000415d8 <init_CD>:

// FIFO_CD -------------------------------------------------------------------
void init_CD(){
   415d8:	defffe04 	addi	sp,sp,-8
   415dc:	dfc00115 	stw	ra,4(sp)
   415e0:	df000015 	stw	fp,0(sp)
   415e4:	d839883a 	mov	fp,sp
   INIT_B(FIFO_CD_CSR, FIFO_CD_ID, FIFO_CD_SIZE);
   415e8:	01020074 	movhi	r4,2049
   415ec:	21040804 	addi	r4,r4,4128
   415f0:	014001c4 	movi	r5,7
   415f4:	01803f44 	movi	r6,253
   415f8:	0040cb40 	call	40cb4 <INIT_B>
}
   415fc:	e037883a 	mov	sp,fp
   41600:	dfc00117 	ldw	ra,4(sp)
   41604:	df000017 	ldw	fp,0(sp)
   41608:	dec00204 	addi	sp,sp,8
   4160c:	f800283a 	ret

00041610 <read_CD>:
int read_CD(){
   41610:	defffd04 	addi	sp,sp,-12
   41614:	dfc00215 	stw	ra,8(sp)
   41618:	df000115 	stw	fp,4(sp)
   4161c:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_CD_READ, FIFO_CD_CSR, FIFO_CD_ID);
   41620:	e13fff04 	addi	r4,fp,-4
   41624:	01420074 	movhi	r5,2049
   41628:	29442604 	addi	r5,r5,4248
   4162c:	01820074 	movhi	r6,2049
   41630:	31840804 	addi	r6,r6,4128
   41634:	01c001c4 	movi	r7,7
   41638:	0040d980 	call	40d98 <READ_B>
   return val;
   4163c:	e0bfff17 	ldw	r2,-4(fp)
}
   41640:	e037883a 	mov	sp,fp
   41644:	dfc00117 	ldw	ra,4(sp)
   41648:	df000017 	ldw	fp,0(sp)
   4164c:	dec00204 	addi	sp,sp,8
   41650:	f800283a 	ret

00041654 <write_CD>:
void write_CD(int *buffer){
   41654:	defffc04 	addi	sp,sp,-16
   41658:	dfc00315 	stw	ra,12(sp)
   4165c:	df000215 	stw	fp,8(sp)
   41660:	df000204 	addi	fp,sp,8
   41664:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_CD_WRITE, FIFO_CD_CSR, FIFO_CD_SIZE, FIFO_CD_ID);
   41668:	008001c4 	movi	r2,7
   4166c:	d8800015 	stw	r2,0(sp)
   41670:	e13fff17 	ldw	r4,-4(fp)
   41674:	01420074 	movhi	r5,2049
   41678:	29442704 	addi	r5,r5,4252
   4167c:	01820074 	movhi	r6,2049
   41680:	31840804 	addi	r6,r6,4128
   41684:	01c03f44 	movi	r7,253
   41688:	0040d200 	call	40d20 <WRITE_B>
}
   4168c:	e037883a 	mov	sp,fp
   41690:	dfc00117 	ldw	ra,4(sp)
   41694:	df000017 	ldw	fp,0(sp)
   41698:	dec00204 	addi	sp,sp,8
   4169c:	f800283a 	ret

000416a0 <readStatus_CD>:
void readStatus_CD(){
   416a0:	defffe04 	addi	sp,sp,-8
   416a4:	dfc00115 	stw	ra,4(sp)
   416a8:	df000015 	stw	fp,0(sp)
   416ac:	d839883a 	mov	fp,sp
   print_status(FIFO_CD_CSR);
   416b0:	01020074 	movhi	r4,2049
   416b4:	21040804 	addi	r4,r4,4128
   416b8:	0040e600 	call	40e60 <print_status>
}
   416bc:	e037883a 	mov	sp,fp
   416c0:	dfc00117 	ldw	ra,4(sp)
   416c4:	df000017 	ldw	fp,0(sp)
   416c8:	dec00204 	addi	sp,sp,8
   416cc:	f800283a 	ret

000416d0 <init_DE>:

// FIFO_DE -------------------------------------------------------------------
void init_DE(){
   416d0:	defffe04 	addi	sp,sp,-8
   416d4:	dfc00115 	stw	ra,4(sp)
   416d8:	df000015 	stw	fp,0(sp)
   416dc:	d839883a 	mov	fp,sp
   INIT_B(FIFO_DE_CSR, FIFO_DE_ID, FIFO_DE_SIZE);
   416e0:	01020074 	movhi	r4,2049
   416e4:	21040004 	addi	r4,r4,4096
   416e8:	01400204 	movi	r5,8
   416ec:	01803f44 	movi	r6,253
   416f0:	0040cb40 	call	40cb4 <INIT_B>
}
   416f4:	e037883a 	mov	sp,fp
   416f8:	dfc00117 	ldw	ra,4(sp)
   416fc:	df000017 	ldw	fp,0(sp)
   41700:	dec00204 	addi	sp,sp,8
   41704:	f800283a 	ret

00041708 <read_DE>:
int read_DE(){
   41708:	defffd04 	addi	sp,sp,-12
   4170c:	dfc00215 	stw	ra,8(sp)
   41710:	df000115 	stw	fp,4(sp)
   41714:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_DE_READ, FIFO_DE_CSR, FIFO_DE_ID);
   41718:	e13fff04 	addi	r4,fp,-4
   4171c:	01420074 	movhi	r5,2049
   41720:	29443004 	addi	r5,r5,4288
   41724:	01820074 	movhi	r6,2049
   41728:	31840004 	addi	r6,r6,4096
   4172c:	01c00204 	movi	r7,8
   41730:	0040d980 	call	40d98 <READ_B>
   return val;
   41734:	e0bfff17 	ldw	r2,-4(fp)
}
   41738:	e037883a 	mov	sp,fp
   4173c:	dfc00117 	ldw	ra,4(sp)
   41740:	df000017 	ldw	fp,0(sp)
   41744:	dec00204 	addi	sp,sp,8
   41748:	f800283a 	ret

0004174c <write_DE>:
void write_DE(int *buffer){
   4174c:	defffc04 	addi	sp,sp,-16
   41750:	dfc00315 	stw	ra,12(sp)
   41754:	df000215 	stw	fp,8(sp)
   41758:	df000204 	addi	fp,sp,8
   4175c:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_DE_WRITE, FIFO_DE_CSR, FIFO_DE_SIZE, FIFO_DE_ID);
   41760:	00800204 	movi	r2,8
   41764:	d8800015 	stw	r2,0(sp)
   41768:	e13fff17 	ldw	r4,-4(fp)
   4176c:	01420074 	movhi	r5,2049
   41770:	29443104 	addi	r5,r5,4292
   41774:	01820074 	movhi	r6,2049
   41778:	31840004 	addi	r6,r6,4096
   4177c:	01c03f44 	movi	r7,253
   41780:	0040d200 	call	40d20 <WRITE_B>
}
   41784:	e037883a 	mov	sp,fp
   41788:	dfc00117 	ldw	ra,4(sp)
   4178c:	df000017 	ldw	fp,0(sp)
   41790:	dec00204 	addi	sp,sp,8
   41794:	f800283a 	ret

00041798 <readStatus_DE>:
void readStatus_DE(){
   41798:	defffe04 	addi	sp,sp,-8
   4179c:	dfc00115 	stw	ra,4(sp)
   417a0:	df000015 	stw	fp,0(sp)
   417a4:	d839883a 	mov	fp,sp
   print_status(FIFO_DE_CSR);
   417a8:	01020074 	movhi	r4,2049
   417ac:	21040004 	addi	r4,r4,4096
   417b0:	0040e600 	call	40e60 <print_status>
}
   417b4:	e037883a 	mov	sp,fp
   417b8:	dfc00117 	ldw	ra,4(sp)
   417bc:	df000017 	ldw	fp,0(sp)
   417c0:	dec00204 	addi	sp,sp,8
   417c4:	f800283a 	ret

000417c8 <init_EF>:

// FIFO_EF -------------------------------------------------------------------
void init_EF(){
   417c8:	defffe04 	addi	sp,sp,-8
   417cc:	dfc00115 	stw	ra,4(sp)
   417d0:	df000015 	stw	fp,0(sp)
   417d4:	d839883a 	mov	fp,sp
   INIT_B(FIFO_EF_CSR, FIFO_EF_ID, FIFO_EF_SIZE);
   417d8:	01020074 	movhi	r4,2049
   417dc:	21041004 	addi	r4,r4,4160
   417e0:	01400244 	movi	r5,9
   417e4:	01803f44 	movi	r6,253
   417e8:	0040cb40 	call	40cb4 <INIT_B>
}
   417ec:	e037883a 	mov	sp,fp
   417f0:	dfc00117 	ldw	ra,4(sp)
   417f4:	df000017 	ldw	fp,0(sp)
   417f8:	dec00204 	addi	sp,sp,8
   417fc:	f800283a 	ret

00041800 <read_EF>:
int read_EF(){
   41800:	defffd04 	addi	sp,sp,-12
   41804:	dfc00215 	stw	ra,8(sp)
   41808:	df000115 	stw	fp,4(sp)
   4180c:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_EF_READ, FIFO_EF_CSR, FIFO_EF_ID);
   41810:	e13fff04 	addi	r4,fp,-4
   41814:	01420074 	movhi	r5,2049
   41818:	29442e04 	addi	r5,r5,4280
   4181c:	01820074 	movhi	r6,2049
   41820:	31841004 	addi	r6,r6,4160
   41824:	01c00244 	movi	r7,9
   41828:	0040d980 	call	40d98 <READ_B>
   return val;
   4182c:	e0bfff17 	ldw	r2,-4(fp)
}
   41830:	e037883a 	mov	sp,fp
   41834:	dfc00117 	ldw	ra,4(sp)
   41838:	df000017 	ldw	fp,0(sp)
   4183c:	dec00204 	addi	sp,sp,8
   41840:	f800283a 	ret

00041844 <write_EF>:
void write_EF(int *buffer){
   41844:	defffc04 	addi	sp,sp,-16
   41848:	dfc00315 	stw	ra,12(sp)
   4184c:	df000215 	stw	fp,8(sp)
   41850:	df000204 	addi	fp,sp,8
   41854:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_EF_WRITE, FIFO_EF_CSR, FIFO_EF_SIZE, FIFO_EF_ID);
   41858:	00800244 	movi	r2,9
   4185c:	d8800015 	stw	r2,0(sp)
   41860:	e13fff17 	ldw	r4,-4(fp)
   41864:	01420074 	movhi	r5,2049
   41868:	29442f04 	addi	r5,r5,4284
   4186c:	01820074 	movhi	r6,2049
   41870:	31841004 	addi	r6,r6,4160
   41874:	01c03f44 	movi	r7,253
   41878:	0040d200 	call	40d20 <WRITE_B>
}
   4187c:	e037883a 	mov	sp,fp
   41880:	dfc00117 	ldw	ra,4(sp)
   41884:	df000017 	ldw	fp,0(sp)
   41888:	dec00204 	addi	sp,sp,8
   4188c:	f800283a 	ret

00041890 <readStatus_EF>:
void readStatus_EF(){
   41890:	defffe04 	addi	sp,sp,-8
   41894:	dfc00115 	stw	ra,4(sp)
   41898:	df000015 	stw	fp,0(sp)
   4189c:	d839883a 	mov	fp,sp
   print_status(FIFO_EF_CSR);
   418a0:	01020074 	movhi	r4,2049
   418a4:	21041004 	addi	r4,r4,4160
   418a8:	0040e600 	call	40e60 <print_status>
}
   418ac:	e037883a 	mov	sp,fp
   418b0:	dfc00117 	ldw	ra,4(sp)
   418b4:	df000017 	ldw	fp,0(sp)
   418b8:	dec00204 	addi	sp,sp,8
   418bc:	f800283a 	ret

000418c0 <delay>:

#include "./utility.h"
#include "./IOMap.h"


void delay(int ms){
   418c0:	defffd04 	addi	sp,sp,-12
   418c4:	dfc00215 	stw	ra,8(sp)
   418c8:	df000115 	stw	fp,4(sp)
   418cc:	df000104 	addi	fp,sp,4
   418d0:	e13fff15 	stw	r4,-4(fp)
	usleep(ms*1000);
   418d4:	e13fff17 	ldw	r4,-4(fp)
   418d8:	0140fa04 	movi	r5,1000
   418dc:	00419f00 	call	419f0 <__mulsi3>
   418e0:	1009883a 	mov	r4,r2
   418e4:	004b98c0 	call	4b98c <usleep>
}
   418e8:	e037883a 	mov	sp,fp
   418ec:	dfc00117 	ldw	ra,4(sp)
   418f0:	df000017 	ldw	fp,0(sp)
   418f4:	dec00204 	addi	sp,sp,8
   418f8:	f800283a 	ret

000418fc <ledUpdate>:

void ledUpdate(uint8_t digit, uint8_t status){
   418fc:	defffc04 	addi	sp,sp,-16
   41900:	df000315 	stw	fp,12(sp)
   41904:	df000304 	addi	fp,sp,12
   41908:	2007883a 	mov	r3,r4
   4190c:	2805883a 	mov	r2,r5
   41910:	e0fffe05 	stb	r3,-8(fp)
   41914:	e0bfff05 	stb	r2,-4(fp)
	uint8_t value =  (uint8_t)IORD_32DIRECT(LED_BASE, OFFSET);
   41918:	00820074 	movhi	r2,2049
   4191c:	10844004 	addi	r2,r2,4352
   41920:	10800037 	ldwio	r2,0(r2)
   41924:	e0bffd05 	stb	r2,-12(fp)

	if(status==1){
   41928:	e0bfff03 	ldbu	r2,-4(fp)
   4192c:	10800058 	cmpnei	r2,r2,1
   41930:	1000081e 	bne	r2,zero,41954 <ledUpdate+0x58>
		value = value | (1<<digit);
   41934:	e0bffe03 	ldbu	r2,-8(fp)
   41938:	00c00044 	movi	r3,1
   4193c:	1884983a 	sll	r2,r3,r2
   41940:	1007883a 	mov	r3,r2
   41944:	e0bffd03 	ldbu	r2,-12(fp)
   41948:	1884b03a 	or	r2,r3,r2
   4194c:	e0bffd05 	stb	r2,-12(fp)
   41950:	00000806 	br	41974 <ledUpdate+0x78>
	}else{
		value = value & (~(1<<digit));
   41954:	e0bffe03 	ldbu	r2,-8(fp)
   41958:	00c00044 	movi	r3,1
   4195c:	1884983a 	sll	r2,r3,r2
   41960:	0084303a 	nor	r2,zero,r2
   41964:	1007883a 	mov	r3,r2
   41968:	e0bffd03 	ldbu	r2,-12(fp)
   4196c:	1884703a 	and	r2,r3,r2
   41970:	e0bffd05 	stb	r2,-12(fp)
	}
	IOWR_8DIRECT(LED_BASE,OFFSET,value);
   41974:	e0fffd03 	ldbu	r3,-12(fp)
   41978:	00820074 	movhi	r2,2049
   4197c:	10844004 	addi	r2,r2,4352
   41980:	10c00025 	stbio	r3,0(r2)
}
   41984:	e037883a 	mov	sp,fp
   41988:	df000017 	ldw	fp,0(sp)
   4198c:	dec00104 	addi	sp,sp,4
   41990:	f800283a 	ret

00041994 <ledBlink>:

void ledBlink(uint8_t id){
   41994:	defffd04 	addi	sp,sp,-12
   41998:	dfc00215 	stw	ra,8(sp)
   4199c:	df000115 	stw	fp,4(sp)
   419a0:	df000104 	addi	fp,sp,4
   419a4:	2005883a 	mov	r2,r4
   419a8:	e0bfff05 	stb	r2,-4(fp)
	ledUpdate(id,1);
   419ac:	e0bfff03 	ldbu	r2,-4(fp)
   419b0:	1009883a 	mov	r4,r2
   419b4:	01400044 	movi	r5,1
   419b8:	00418fc0 	call	418fc <ledUpdate>
	delay(200);
   419bc:	01003204 	movi	r4,200
   419c0:	00418c00 	call	418c0 <delay>
	ledUpdate(id,0);
   419c4:	e0bfff03 	ldbu	r2,-4(fp)
   419c8:	1009883a 	mov	r4,r2
   419cc:	000b883a 	mov	r5,zero
   419d0:	00418fc0 	call	418fc <ledUpdate>
	delay(50);
   419d4:	01000c84 	movi	r4,50
   419d8:	00418c00 	call	418c0 <delay>
}
   419dc:	e037883a 	mov	sp,fp
   419e0:	dfc00117 	ldw	ra,4(sp)
   419e4:	df000017 	ldw	fp,0(sp)
   419e8:	dec00204 	addi	sp,sp,8
   419ec:	f800283a 	ret

000419f0 <__mulsi3>:
   419f0:	0005883a 	mov	r2,zero
   419f4:	20000726 	beq	r4,zero,41a14 <__mulsi3+0x24>
   419f8:	20c0004c 	andi	r3,r4,1
   419fc:	2008d07a 	srli	r4,r4,1
   41a00:	18000126 	beq	r3,zero,41a08 <__mulsi3+0x18>
   41a04:	1145883a 	add	r2,r2,r5
   41a08:	294b883a 	add	r5,r5,r5
   41a0c:	203ffa1e 	bne	r4,zero,419f8 <__mulsi3+0x8>
   41a10:	f800283a 	ret
   41a14:	f800283a 	ret

00041a18 <malloc>:
   41a18:	00800174 	movhi	r2,5
   41a1c:	10bf8b04 	addi	r2,r2,-468
   41a20:	200b883a 	mov	r5,r4
   41a24:	11000017 	ldw	r4,0(r2)
   41a28:	0041a401 	jmpi	41a40 <_malloc_r>

00041a2c <free>:
   41a2c:	00800174 	movhi	r2,5
   41a30:	10bf8b04 	addi	r2,r2,-468
   41a34:	200b883a 	mov	r5,r4
   41a38:	11000017 	ldw	r4,0(r2)
   41a3c:	00462941 	jmpi	46294 <_free_r>

00041a40 <_malloc_r>:
   41a40:	defff604 	addi	sp,sp,-40
   41a44:	dc800215 	stw	r18,8(sp)
   41a48:	dfc00915 	stw	ra,36(sp)
   41a4c:	df000815 	stw	fp,32(sp)
   41a50:	ddc00715 	stw	r23,28(sp)
   41a54:	dd800615 	stw	r22,24(sp)
   41a58:	dd400515 	stw	r21,20(sp)
   41a5c:	dd000415 	stw	r20,16(sp)
   41a60:	dcc00315 	stw	r19,12(sp)
   41a64:	dc400115 	stw	r17,4(sp)
   41a68:	dc000015 	stw	r16,0(sp)
   41a6c:	288002c4 	addi	r2,r5,11
   41a70:	00c00584 	movi	r3,22
   41a74:	2025883a 	mov	r18,r4
   41a78:	18802b2e 	bgeu	r3,r2,41b28 <_malloc_r+0xe8>
   41a7c:	047ffe04 	movi	r17,-8
   41a80:	1462703a 	and	r17,r2,r17
   41a84:	88002a16 	blt	r17,zero,41b30 <_malloc_r+0xf0>
   41a88:	89402936 	bltu	r17,r5,41b30 <_malloc_r+0xf0>
   41a8c:	9009883a 	mov	r4,r18
   41a90:	004b6d80 	call	4b6d8 <__malloc_lock>
   41a94:	00807dc4 	movi	r2,503
   41a98:	14402936 	bltu	r2,r17,41b40 <_malloc_r+0x100>
   41a9c:	8808d0fa 	srli	r4,r17,3
   41aa0:	04c00174 	movhi	r19,5
   41aa4:	9cf8fc04 	addi	r19,r19,-7184
   41aa8:	2105883a 	add	r2,r4,r4
   41aac:	1085883a 	add	r2,r2,r2
   41ab0:	1085883a 	add	r2,r2,r2
   41ab4:	9885883a 	add	r2,r19,r2
   41ab8:	14000317 	ldw	r16,12(r2)
   41abc:	80815526 	beq	r16,r2,42014 <_malloc_r+0x5d4>
   41ac0:	81000117 	ldw	r4,4(r16)
   41ac4:	00bfff04 	movi	r2,-4
   41ac8:	80c00317 	ldw	r3,12(r16)
   41acc:	2084703a 	and	r2,r4,r2
   41ad0:	8085883a 	add	r2,r16,r2
   41ad4:	11800117 	ldw	r6,4(r2)
   41ad8:	81400217 	ldw	r5,8(r16)
   41adc:	9009883a 	mov	r4,r18
   41ae0:	31800054 	ori	r6,r6,1
   41ae4:	11800115 	stw	r6,4(r2)
   41ae8:	28c00315 	stw	r3,12(r5)
   41aec:	19400215 	stw	r5,8(r3)
   41af0:	004b6f80 	call	4b6f8 <__malloc_unlock>
   41af4:	80800204 	addi	r2,r16,8
   41af8:	dfc00917 	ldw	ra,36(sp)
   41afc:	df000817 	ldw	fp,32(sp)
   41b00:	ddc00717 	ldw	r23,28(sp)
   41b04:	dd800617 	ldw	r22,24(sp)
   41b08:	dd400517 	ldw	r21,20(sp)
   41b0c:	dd000417 	ldw	r20,16(sp)
   41b10:	dcc00317 	ldw	r19,12(sp)
   41b14:	dc800217 	ldw	r18,8(sp)
   41b18:	dc400117 	ldw	r17,4(sp)
   41b1c:	dc000017 	ldw	r16,0(sp)
   41b20:	dec00a04 	addi	sp,sp,40
   41b24:	f800283a 	ret
   41b28:	04400404 	movi	r17,16
   41b2c:	897fd72e 	bgeu	r17,r5,41a8c <_malloc_r+0x4c>
   41b30:	00800304 	movi	r2,12
   41b34:	90800015 	stw	r2,0(r18)
   41b38:	0005883a 	mov	r2,zero
   41b3c:	003fee06 	br	41af8 <_malloc_r+0xb8>
   41b40:	8808d27a 	srli	r4,r17,9
   41b44:	20007126 	beq	r4,zero,41d0c <_malloc_r+0x2cc>
   41b48:	00800104 	movi	r2,4
   41b4c:	1100eb36 	bltu	r2,r4,41efc <_malloc_r+0x4bc>
   41b50:	8808d1ba 	srli	r4,r17,6
   41b54:	21000e04 	addi	r4,r4,56
   41b58:	210b883a 	add	r5,r4,r4
   41b5c:	294b883a 	add	r5,r5,r5
   41b60:	294b883a 	add	r5,r5,r5
   41b64:	04c00174 	movhi	r19,5
   41b68:	9cf8fc04 	addi	r19,r19,-7184
   41b6c:	994b883a 	add	r5,r19,r5
   41b70:	2c000317 	ldw	r16,12(r5)
   41b74:	2c000e26 	beq	r5,r16,41bb0 <_malloc_r+0x170>
   41b78:	80c00117 	ldw	r3,4(r16)
   41b7c:	01ffff04 	movi	r7,-4
   41b80:	018003c4 	movi	r6,15
   41b84:	19c6703a 	and	r3,r3,r7
   41b88:	1c45c83a 	sub	r2,r3,r17
   41b8c:	30800716 	blt	r6,r2,41bac <_malloc_r+0x16c>
   41b90:	1000610e 	bge	r2,zero,41d18 <_malloc_r+0x2d8>
   41b94:	84000317 	ldw	r16,12(r16)
   41b98:	2c000526 	beq	r5,r16,41bb0 <_malloc_r+0x170>
   41b9c:	80c00117 	ldw	r3,4(r16)
   41ba0:	19c6703a 	and	r3,r3,r7
   41ba4:	1c45c83a 	sub	r2,r3,r17
   41ba8:	30bff90e 	bge	r6,r2,41b90 <_malloc_r+0x150>
   41bac:	213fffc4 	addi	r4,r4,-1
   41bb0:	21000044 	addi	r4,r4,1
   41bb4:	9c000417 	ldw	r16,16(r19)
   41bb8:	00c00174 	movhi	r3,5
   41bbc:	18f8fc04 	addi	r3,r3,-7184
   41bc0:	1a400204 	addi	r9,r3,8
   41bc4:	8240ff26 	beq	r16,r9,41fc4 <_malloc_r+0x584>
   41bc8:	81400117 	ldw	r5,4(r16)
   41bcc:	00bfff04 	movi	r2,-4
   41bd0:	018003c4 	movi	r6,15
   41bd4:	2884703a 	and	r2,r5,r2
   41bd8:	144bc83a 	sub	r5,r2,r17
   41bdc:	3140ea16 	blt	r6,r5,41f88 <_malloc_r+0x548>
   41be0:	1a400515 	stw	r9,20(r3)
   41be4:	1a400415 	stw	r9,16(r3)
   41be8:	2800570e 	bge	r5,zero,41d48 <_malloc_r+0x308>
   41bec:	01407fc4 	movi	r5,511
   41bf0:	2880ca36 	bltu	r5,r2,41f1c <_malloc_r+0x4dc>
   41bf4:	1004d0fa 	srli	r2,r2,3
   41bf8:	02000044 	movi	r8,1
   41bfc:	19c00117 	ldw	r7,4(r3)
   41c00:	108b883a 	add	r5,r2,r2
   41c04:	294b883a 	add	r5,r5,r5
   41c08:	1005d0ba 	srai	r2,r2,2
   41c0c:	294b883a 	add	r5,r5,r5
   41c10:	28cb883a 	add	r5,r5,r3
   41c14:	29800217 	ldw	r6,8(r5)
   41c18:	4084983a 	sll	r2,r8,r2
   41c1c:	81400315 	stw	r5,12(r16)
   41c20:	81800215 	stw	r6,8(r16)
   41c24:	11c4b03a 	or	r2,r2,r7
   41c28:	18800115 	stw	r2,4(r3)
   41c2c:	2c000215 	stw	r16,8(r5)
   41c30:	34000315 	stw	r16,12(r6)
   41c34:	200bd0ba 	srai	r5,r4,2
   41c38:	00c00044 	movi	r3,1
   41c3c:	194a983a 	sll	r5,r3,r5
   41c40:	11404936 	bltu	r2,r5,41d68 <_malloc_r+0x328>
   41c44:	1146703a 	and	r3,r2,r5
   41c48:	18000a1e 	bne	r3,zero,41c74 <_malloc_r+0x234>
   41c4c:	00ffff04 	movi	r3,-4
   41c50:	294b883a 	add	r5,r5,r5
   41c54:	20c8703a 	and	r4,r4,r3
   41c58:	1146703a 	and	r3,r2,r5
   41c5c:	21000104 	addi	r4,r4,4
   41c60:	1800041e 	bne	r3,zero,41c74 <_malloc_r+0x234>
   41c64:	294b883a 	add	r5,r5,r5
   41c68:	1146703a 	and	r3,r2,r5
   41c6c:	21000104 	addi	r4,r4,4
   41c70:	183ffc26 	beq	r3,zero,41c64 <_malloc_r+0x224>
   41c74:	023fff04 	movi	r8,-4
   41c78:	01c003c4 	movi	r7,15
   41c7c:	2105883a 	add	r2,r4,r4
   41c80:	1085883a 	add	r2,r2,r2
   41c84:	1085883a 	add	r2,r2,r2
   41c88:	9899883a 	add	r12,r19,r2
   41c8c:	62800304 	addi	r10,r12,12
   41c90:	2017883a 	mov	r11,r4
   41c94:	54000017 	ldw	r16,0(r10)
   41c98:	51bffd04 	addi	r6,r10,-12
   41c9c:	8180041e 	bne	r16,r6,41cb0 <_malloc_r+0x270>
   41ca0:	0000ca06 	br	41fcc <_malloc_r+0x58c>
   41ca4:	10001c0e 	bge	r2,zero,41d18 <_malloc_r+0x2d8>
   41ca8:	84000317 	ldw	r16,12(r16)
   41cac:	8180c726 	beq	r16,r6,41fcc <_malloc_r+0x58c>
   41cb0:	80c00117 	ldw	r3,4(r16)
   41cb4:	1a06703a 	and	r3,r3,r8
   41cb8:	1c45c83a 	sub	r2,r3,r17
   41cbc:	38bff90e 	bge	r7,r2,41ca4 <_malloc_r+0x264>
   41cc0:	81000317 	ldw	r4,12(r16)
   41cc4:	81400217 	ldw	r5,8(r16)
   41cc8:	8447883a 	add	r3,r16,r17
   41ccc:	8c400054 	ori	r17,r17,1
   41cd0:	29000315 	stw	r4,12(r5)
   41cd4:	21400215 	stw	r5,8(r4)
   41cd8:	84400115 	stw	r17,4(r16)
   41cdc:	1889883a 	add	r4,r3,r2
   41ce0:	11400054 	ori	r5,r2,1
   41ce4:	98c00515 	stw	r3,20(r19)
   41ce8:	98c00415 	stw	r3,16(r19)
   41cec:	20800015 	stw	r2,0(r4)
   41cf0:	1a400315 	stw	r9,12(r3)
   41cf4:	1a400215 	stw	r9,8(r3)
   41cf8:	19400115 	stw	r5,4(r3)
   41cfc:	9009883a 	mov	r4,r18
   41d00:	004b6f80 	call	4b6f8 <__malloc_unlock>
   41d04:	80800204 	addi	r2,r16,8
   41d08:	003f7b06 	br	41af8 <_malloc_r+0xb8>
   41d0c:	8808d0fa 	srli	r4,r17,3
   41d10:	210b883a 	add	r5,r4,r4
   41d14:	003f9106 	br	41b5c <_malloc_r+0x11c>
   41d18:	80c7883a 	add	r3,r16,r3
   41d1c:	19400117 	ldw	r5,4(r3)
   41d20:	80800317 	ldw	r2,12(r16)
   41d24:	81000217 	ldw	r4,8(r16)
   41d28:	29400054 	ori	r5,r5,1
   41d2c:	19400115 	stw	r5,4(r3)
   41d30:	20800315 	stw	r2,12(r4)
   41d34:	11000215 	stw	r4,8(r2)
   41d38:	9009883a 	mov	r4,r18
   41d3c:	004b6f80 	call	4b6f8 <__malloc_unlock>
   41d40:	80800204 	addi	r2,r16,8
   41d44:	003f6c06 	br	41af8 <_malloc_r+0xb8>
   41d48:	8085883a 	add	r2,r16,r2
   41d4c:	10c00117 	ldw	r3,4(r2)
   41d50:	9009883a 	mov	r4,r18
   41d54:	18c00054 	ori	r3,r3,1
   41d58:	10c00115 	stw	r3,4(r2)
   41d5c:	004b6f80 	call	4b6f8 <__malloc_unlock>
   41d60:	80800204 	addi	r2,r16,8
   41d64:	003f6406 	br	41af8 <_malloc_r+0xb8>
   41d68:	9c000217 	ldw	r16,8(r19)
   41d6c:	00bfff04 	movi	r2,-4
   41d70:	85400117 	ldw	r21,4(r16)
   41d74:	a8aa703a 	and	r21,r21,r2
   41d78:	ac400336 	bltu	r21,r17,41d88 <_malloc_r+0x348>
   41d7c:	ac45c83a 	sub	r2,r21,r17
   41d80:	00c003c4 	movi	r3,15
   41d84:	18805316 	blt	r3,r2,41ed4 <_malloc_r+0x494>
   41d88:	d5e6b417 	ldw	r23,-25904(gp)
   41d8c:	d0e00517 	ldw	r3,-32748(gp)
   41d90:	00bfffc4 	movi	r2,-1
   41d94:	8579883a 	add	fp,r16,r21
   41d98:	8def883a 	add	r23,r17,r23
   41d9c:	1880d226 	beq	r3,r2,420e8 <_malloc_r+0x6a8>
   41da0:	bdc403c4 	addi	r23,r23,4111
   41da4:	00bc0004 	movi	r2,-4096
   41da8:	b8ae703a 	and	r23,r23,r2
   41dac:	9009883a 	mov	r4,r18
   41db0:	b80b883a 	mov	r5,r23
   41db4:	00422c40 	call	422c4 <_sbrk_r>
   41db8:	1029883a 	mov	r20,r2
   41dbc:	00bfffc4 	movi	r2,-1
   41dc0:	a080d126 	beq	r20,r2,42108 <_malloc_r+0x6c8>
   41dc4:	a7009f36 	bltu	r20,fp,42044 <_malloc_r+0x604>
   41dc8:	05800174 	movhi	r22,5
   41dcc:	b5864404 	addi	r22,r22,6416
   41dd0:	b0800017 	ldw	r2,0(r22)
   41dd4:	b885883a 	add	r2,r23,r2
   41dd8:	b0800015 	stw	r2,0(r22)
   41ddc:	e500cf26 	beq	fp,r20,4211c <_malloc_r+0x6dc>
   41de0:	d1200517 	ldw	r4,-32748(gp)
   41de4:	00ffffc4 	movi	r3,-1
   41de8:	20c0e026 	beq	r4,r3,4216c <_malloc_r+0x72c>
   41dec:	a739c83a 	sub	fp,r20,fp
   41df0:	1705883a 	add	r2,r2,fp
   41df4:	b0800015 	stw	r2,0(r22)
   41df8:	a08001cc 	andi	r2,r20,7
   41dfc:	1000a526 	beq	r2,zero,42094 <_malloc_r+0x654>
   41e00:	a0a9c83a 	sub	r20,r20,r2
   41e04:	00c40204 	movi	r3,4104
   41e08:	a5000204 	addi	r20,r20,8
   41e0c:	1885c83a 	sub	r2,r3,r2
   41e10:	a5c7883a 	add	r3,r20,r23
   41e14:	18c3ffcc 	andi	r3,r3,4095
   41e18:	10efc83a 	sub	r23,r2,r3
   41e1c:	9009883a 	mov	r4,r18
   41e20:	b80b883a 	mov	r5,r23
   41e24:	00422c40 	call	422c4 <_sbrk_r>
   41e28:	00ffffc4 	movi	r3,-1
   41e2c:	10c0cc26 	beq	r2,r3,42160 <_malloc_r+0x720>
   41e30:	1505c83a 	sub	r2,r2,r20
   41e34:	b887883a 	add	r3,r23,r2
   41e38:	18c00054 	ori	r3,r3,1
   41e3c:	b0800017 	ldw	r2,0(r22)
   41e40:	9d000215 	stw	r20,8(r19)
   41e44:	a0c00115 	stw	r3,4(r20)
   41e48:	b885883a 	add	r2,r23,r2
   41e4c:	b0800015 	stw	r2,0(r22)
   41e50:	84c00e26 	beq	r16,r19,41e8c <_malloc_r+0x44c>
   41e54:	00c003c4 	movi	r3,15
   41e58:	1d40902e 	bgeu	r3,r21,4209c <_malloc_r+0x65c>
   41e5c:	ad7ffd04 	addi	r21,r21,-12
   41e60:	013ffe04 	movi	r4,-8
   41e64:	a908703a 	and	r4,r21,r4
   41e68:	810b883a 	add	r5,r16,r4
   41e6c:	01800144 	movi	r6,5
   41e70:	29800115 	stw	r6,4(r5)
   41e74:	29800215 	stw	r6,8(r5)
   41e78:	81400117 	ldw	r5,4(r16)
   41e7c:	2940004c 	andi	r5,r5,1
   41e80:	214ab03a 	or	r5,r4,r5
   41e84:	81400115 	stw	r5,4(r16)
   41e88:	1900ae36 	bltu	r3,r4,42144 <_malloc_r+0x704>
   41e8c:	d0e6b317 	ldw	r3,-25908(gp)
   41e90:	1880012e 	bgeu	r3,r2,41e98 <_malloc_r+0x458>
   41e94:	d0a6b315 	stw	r2,-25908(gp)
   41e98:	d0e6b217 	ldw	r3,-25912(gp)
   41e9c:	9c000217 	ldw	r16,8(r19)
   41ea0:	1880012e 	bgeu	r3,r2,41ea8 <_malloc_r+0x468>
   41ea4:	d0a6b215 	stw	r2,-25912(gp)
   41ea8:	80c00117 	ldw	r3,4(r16)
   41eac:	00bfff04 	movi	r2,-4
   41eb0:	1886703a 	and	r3,r3,r2
   41eb4:	1c45c83a 	sub	r2,r3,r17
   41eb8:	1c400236 	bltu	r3,r17,41ec4 <_malloc_r+0x484>
   41ebc:	00c003c4 	movi	r3,15
   41ec0:	18800416 	blt	r3,r2,41ed4 <_malloc_r+0x494>
   41ec4:	9009883a 	mov	r4,r18
   41ec8:	004b6f80 	call	4b6f8 <__malloc_unlock>
   41ecc:	0005883a 	mov	r2,zero
   41ed0:	003f0906 	br	41af8 <_malloc_r+0xb8>
   41ed4:	88c00054 	ori	r3,r17,1
   41ed8:	10800054 	ori	r2,r2,1
   41edc:	80c00115 	stw	r3,4(r16)
   41ee0:	8463883a 	add	r17,r16,r17
   41ee4:	88800115 	stw	r2,4(r17)
   41ee8:	9009883a 	mov	r4,r18
   41eec:	9c400215 	stw	r17,8(r19)
   41ef0:	004b6f80 	call	4b6f8 <__malloc_unlock>
   41ef4:	80800204 	addi	r2,r16,8
   41ef8:	003eff06 	br	41af8 <_malloc_r+0xb8>
   41efc:	00800504 	movi	r2,20
   41f00:	1100492e 	bgeu	r2,r4,42028 <_malloc_r+0x5e8>
   41f04:	00801504 	movi	r2,84
   41f08:	11005c36 	bltu	r2,r4,4207c <_malloc_r+0x63c>
   41f0c:	8808d33a 	srli	r4,r17,12
   41f10:	21001b84 	addi	r4,r4,110
   41f14:	210b883a 	add	r5,r4,r4
   41f18:	003f1006 	br	41b5c <_malloc_r+0x11c>
   41f1c:	1006d27a 	srli	r3,r2,9
   41f20:	01400104 	movi	r5,4
   41f24:	28c0432e 	bgeu	r5,r3,42034 <_malloc_r+0x5f4>
   41f28:	01400504 	movi	r5,20
   41f2c:	28c07036 	bltu	r5,r3,420f0 <_malloc_r+0x6b0>
   41f30:	194016c4 	addi	r5,r3,91
   41f34:	294d883a 	add	r6,r5,r5
   41f38:	318d883a 	add	r6,r6,r6
   41f3c:	318d883a 	add	r6,r6,r6
   41f40:	998d883a 	add	r6,r19,r6
   41f44:	30c00217 	ldw	r3,8(r6)
   41f48:	01c00174 	movhi	r7,5
   41f4c:	39f8fc04 	addi	r7,r7,-7184
   41f50:	19805726 	beq	r3,r6,420b0 <_malloc_r+0x670>
   41f54:	01ffff04 	movi	r7,-4
   41f58:	19400117 	ldw	r5,4(r3)
   41f5c:	29ca703a 	and	r5,r5,r7
   41f60:	1140022e 	bgeu	r2,r5,41f6c <_malloc_r+0x52c>
   41f64:	18c00217 	ldw	r3,8(r3)
   41f68:	30fffb1e 	bne	r6,r3,41f58 <_malloc_r+0x518>
   41f6c:	19400317 	ldw	r5,12(r3)
   41f70:	98800117 	ldw	r2,4(r19)
   41f74:	81400315 	stw	r5,12(r16)
   41f78:	80c00215 	stw	r3,8(r16)
   41f7c:	2c000215 	stw	r16,8(r5)
   41f80:	1c000315 	stw	r16,12(r3)
   41f84:	003f2b06 	br	41c34 <_malloc_r+0x1f4>
   41f88:	8445883a 	add	r2,r16,r17
   41f8c:	8c400054 	ori	r17,r17,1
   41f90:	18800515 	stw	r2,20(r3)
   41f94:	18800415 	stw	r2,16(r3)
   41f98:	29000054 	ori	r4,r5,1
   41f9c:	1147883a 	add	r3,r2,r5
   41fa0:	84400115 	stw	r17,4(r16)
   41fa4:	11000115 	stw	r4,4(r2)
   41fa8:	12400315 	stw	r9,12(r2)
   41fac:	12400215 	stw	r9,8(r2)
   41fb0:	19400015 	stw	r5,0(r3)
   41fb4:	9009883a 	mov	r4,r18
   41fb8:	004b6f80 	call	4b6f8 <__malloc_unlock>
   41fbc:	80800204 	addi	r2,r16,8
   41fc0:	003ecd06 	br	41af8 <_malloc_r+0xb8>
   41fc4:	18800117 	ldw	r2,4(r3)
   41fc8:	003f1a06 	br	41c34 <_malloc_r+0x1f4>
   41fcc:	5ac00044 	addi	r11,r11,1
   41fd0:	588000cc 	andi	r2,r11,3
   41fd4:	52800204 	addi	r10,r10,8
   41fd8:	103f2e1e 	bne	r2,zero,41c94 <_malloc_r+0x254>
   41fdc:	20c000cc 	andi	r3,r4,3
   41fe0:	60bffe04 	addi	r2,r12,-8
   41fe4:	18006f26 	beq	r3,zero,421a4 <_malloc_r+0x764>
   41fe8:	63000017 	ldw	r12,0(r12)
   41fec:	213fffc4 	addi	r4,r4,-1
   41ff0:	60bffa26 	beq	r12,r2,41fdc <_malloc_r+0x59c>
   41ff4:	98800117 	ldw	r2,4(r19)
   41ff8:	294b883a 	add	r5,r5,r5
   41ffc:	117f5a36 	bltu	r2,r5,41d68 <_malloc_r+0x328>
   42000:	283f5926 	beq	r5,zero,41d68 <_malloc_r+0x328>
   42004:	1146703a 	and	r3,r2,r5
   42008:	18001626 	beq	r3,zero,42064 <_malloc_r+0x624>
   4200c:	5809883a 	mov	r4,r11
   42010:	003f1a06 	br	41c7c <_malloc_r+0x23c>
   42014:	80800204 	addi	r2,r16,8
   42018:	84000517 	ldw	r16,20(r16)
   4201c:	143ea81e 	bne	r2,r16,41ac0 <_malloc_r+0x80>
   42020:	21000084 	addi	r4,r4,2
   42024:	003ee306 	br	41bb4 <_malloc_r+0x174>
   42028:	210016c4 	addi	r4,r4,91
   4202c:	210b883a 	add	r5,r4,r4
   42030:	003eca06 	br	41b5c <_malloc_r+0x11c>
   42034:	100ad1ba 	srli	r5,r2,6
   42038:	29400e04 	addi	r5,r5,56
   4203c:	294d883a 	add	r6,r5,r5
   42040:	003fbd06 	br	41f38 <_malloc_r+0x4f8>
   42044:	84ff6026 	beq	r16,r19,41dc8 <_malloc_r+0x388>
   42048:	00800174 	movhi	r2,5
   4204c:	10b8fc04 	addi	r2,r2,-7184
   42050:	14000217 	ldw	r16,8(r2)
   42054:	00bfff04 	movi	r2,-4
   42058:	80c00117 	ldw	r3,4(r16)
   4205c:	1886703a 	and	r3,r3,r2
   42060:	003f9406 	br	41eb4 <_malloc_r+0x474>
   42064:	294b883a 	add	r5,r5,r5
   42068:	1146703a 	and	r3,r2,r5
   4206c:	5ac00104 	addi	r11,r11,4
   42070:	183ffc26 	beq	r3,zero,42064 <_malloc_r+0x624>
   42074:	5809883a 	mov	r4,r11
   42078:	003f0006 	br	41c7c <_malloc_r+0x23c>
   4207c:	00805504 	movi	r2,340
   42080:	11001336 	bltu	r2,r4,420d0 <_malloc_r+0x690>
   42084:	8808d3fa 	srli	r4,r17,15
   42088:	21001dc4 	addi	r4,r4,119
   4208c:	210b883a 	add	r5,r4,r4
   42090:	003eb206 	br	41b5c <_malloc_r+0x11c>
   42094:	00840004 	movi	r2,4096
   42098:	003f5d06 	br	41e10 <_malloc_r+0x3d0>
   4209c:	00800044 	movi	r2,1
   420a0:	a0800115 	stw	r2,4(r20)
   420a4:	a021883a 	mov	r16,r20
   420a8:	0007883a 	mov	r3,zero
   420ac:	003f8106 	br	41eb4 <_malloc_r+0x474>
   420b0:	280bd0ba 	srai	r5,r5,2
   420b4:	01800044 	movi	r6,1
   420b8:	38800117 	ldw	r2,4(r7)
   420bc:	314c983a 	sll	r6,r6,r5
   420c0:	180b883a 	mov	r5,r3
   420c4:	3084b03a 	or	r2,r6,r2
   420c8:	38800115 	stw	r2,4(r7)
   420cc:	003fa906 	br	41f74 <_malloc_r+0x534>
   420d0:	00815504 	movi	r2,1364
   420d4:	11001836 	bltu	r2,r4,42138 <_malloc_r+0x6f8>
   420d8:	8808d4ba 	srli	r4,r17,18
   420dc:	21001f04 	addi	r4,r4,124
   420e0:	210b883a 	add	r5,r4,r4
   420e4:	003e9d06 	br	41b5c <_malloc_r+0x11c>
   420e8:	bdc00404 	addi	r23,r23,16
   420ec:	003f2f06 	br	41dac <_malloc_r+0x36c>
   420f0:	01401504 	movi	r5,84
   420f4:	28c01f36 	bltu	r5,r3,42174 <_malloc_r+0x734>
   420f8:	100ad33a 	srli	r5,r2,12
   420fc:	29401b84 	addi	r5,r5,110
   42100:	294d883a 	add	r6,r5,r5
   42104:	003f8c06 	br	41f38 <_malloc_r+0x4f8>
   42108:	9c000217 	ldw	r16,8(r19)
   4210c:	00bfff04 	movi	r2,-4
   42110:	80c00117 	ldw	r3,4(r16)
   42114:	1886703a 	and	r3,r3,r2
   42118:	003f6606 	br	41eb4 <_malloc_r+0x474>
   4211c:	e0c3ffcc 	andi	r3,fp,4095
   42120:	183f2f1e 	bne	r3,zero,41de0 <_malloc_r+0x3a0>
   42124:	98c00217 	ldw	r3,8(r19)
   42128:	bd49883a 	add	r4,r23,r21
   4212c:	21000054 	ori	r4,r4,1
   42130:	19000115 	stw	r4,4(r3)
   42134:	003f5506 	br	41e8c <_malloc_r+0x44c>
   42138:	01403f04 	movi	r5,252
   4213c:	01001f84 	movi	r4,126
   42140:	003e8606 	br	41b5c <_malloc_r+0x11c>
   42144:	9009883a 	mov	r4,r18
   42148:	81400204 	addi	r5,r16,8
   4214c:	00462940 	call	46294 <_free_r>
   42150:	00800174 	movhi	r2,5
   42154:	10864404 	addi	r2,r2,6416
   42158:	10800017 	ldw	r2,0(r2)
   4215c:	003f4b06 	br	41e8c <_malloc_r+0x44c>
   42160:	00c00044 	movi	r3,1
   42164:	002f883a 	mov	r23,zero
   42168:	003f3406 	br	41e3c <_malloc_r+0x3fc>
   4216c:	d5200515 	stw	r20,-32748(gp)
   42170:	003f2106 	br	41df8 <_malloc_r+0x3b8>
   42174:	01405504 	movi	r5,340
   42178:	28c00436 	bltu	r5,r3,4218c <_malloc_r+0x74c>
   4217c:	100ad3fa 	srli	r5,r2,15
   42180:	29401dc4 	addi	r5,r5,119
   42184:	294d883a 	add	r6,r5,r5
   42188:	003f6b06 	br	41f38 <_malloc_r+0x4f8>
   4218c:	01415504 	movi	r5,1364
   42190:	28c00936 	bltu	r5,r3,421b8 <_malloc_r+0x778>
   42194:	100ad4ba 	srli	r5,r2,18
   42198:	29401f04 	addi	r5,r5,124
   4219c:	294d883a 	add	r6,r5,r5
   421a0:	003f6506 	br	41f38 <_malloc_r+0x4f8>
   421a4:	98800117 	ldw	r2,4(r19)
   421a8:	0146303a 	nor	r3,zero,r5
   421ac:	1884703a 	and	r2,r3,r2
   421b0:	98800115 	stw	r2,4(r19)
   421b4:	003f9006 	br	41ff8 <_malloc_r+0x5b8>
   421b8:	01803f04 	movi	r6,252
   421bc:	01401f84 	movi	r5,126
   421c0:	003f5d06 	br	41f38 <_malloc_r+0x4f8>

000421c4 <_printf_r>:
   421c4:	defffd04 	addi	sp,sp,-12
   421c8:	dfc00015 	stw	ra,0(sp)
   421cc:	d9800115 	stw	r6,4(sp)
   421d0:	d9c00215 	stw	r7,8(sp)
   421d4:	280d883a 	mov	r6,r5
   421d8:	21400217 	ldw	r5,8(r4)
   421dc:	d9c00104 	addi	r7,sp,4
   421e0:	00423e80 	call	423e8 <___vfprintf_internal_r>
   421e4:	dfc00017 	ldw	ra,0(sp)
   421e8:	dec00304 	addi	sp,sp,12
   421ec:	f800283a 	ret

000421f0 <printf>:
   421f0:	defffc04 	addi	sp,sp,-16
   421f4:	dfc00015 	stw	ra,0(sp)
   421f8:	d9400115 	stw	r5,4(sp)
   421fc:	d9800215 	stw	r6,8(sp)
   42200:	d9c00315 	stw	r7,12(sp)
   42204:	00800174 	movhi	r2,5
   42208:	10bf8b04 	addi	r2,r2,-468
   4220c:	10800017 	ldw	r2,0(r2)
   42210:	200b883a 	mov	r5,r4
   42214:	d9800104 	addi	r6,sp,4
   42218:	11000217 	ldw	r4,8(r2)
   4221c:	00442640 	call	44264 <__vfprintf_internal>
   42220:	dfc00017 	ldw	ra,0(sp)
   42224:	dec00404 	addi	sp,sp,16
   42228:	f800283a 	ret

0004222c <_puts_r>:
   4222c:	defff604 	addi	sp,sp,-40
   42230:	dc400815 	stw	r17,32(sp)
   42234:	2023883a 	mov	r17,r4
   42238:	2809883a 	mov	r4,r5
   4223c:	dc000715 	stw	r16,28(sp)
   42240:	dfc00915 	stw	ra,36(sp)
   42244:	2821883a 	mov	r16,r5
   42248:	00423280 	call	42328 <strlen>
   4224c:	10c00044 	addi	r3,r2,1
   42250:	d8800115 	stw	r2,4(sp)
   42254:	89400217 	ldw	r5,8(r17)
   42258:	00800174 	movhi	r2,5
   4225c:	10b83604 	addi	r2,r2,-7976
   42260:	d8800215 	stw	r2,8(sp)
   42264:	00800044 	movi	r2,1
   42268:	d8800315 	stw	r2,12(sp)
   4226c:	8809883a 	mov	r4,r17
   42270:	00800084 	movi	r2,2
   42274:	d9800404 	addi	r6,sp,16
   42278:	dc000015 	stw	r16,0(sp)
   4227c:	d8c00615 	stw	r3,24(sp)
   42280:	dec00415 	stw	sp,16(sp)
   42284:	d8800515 	stw	r2,20(sp)
   42288:	00465640 	call	46564 <__sfvwrite_r>
   4228c:	1000061e 	bne	r2,zero,422a8 <_puts_r+0x7c>
   42290:	00800284 	movi	r2,10
   42294:	dfc00917 	ldw	ra,36(sp)
   42298:	dc400817 	ldw	r17,32(sp)
   4229c:	dc000717 	ldw	r16,28(sp)
   422a0:	dec00a04 	addi	sp,sp,40
   422a4:	f800283a 	ret
   422a8:	00bfffc4 	movi	r2,-1
   422ac:	003ff906 	br	42294 <_puts_r+0x68>

000422b0 <puts>:
   422b0:	00800174 	movhi	r2,5
   422b4:	10bf8b04 	addi	r2,r2,-468
   422b8:	200b883a 	mov	r5,r4
   422bc:	11000017 	ldw	r4,0(r2)
   422c0:	004222c1 	jmpi	4222c <_puts_r>

000422c4 <_sbrk_r>:
   422c4:	defffd04 	addi	sp,sp,-12
   422c8:	dc400115 	stw	r17,4(sp)
   422cc:	dc000015 	stw	r16,0(sp)
   422d0:	2023883a 	mov	r17,r4
   422d4:	04000174 	movhi	r16,5
   422d8:	84063804 	addi	r16,r16,6368
   422dc:	2809883a 	mov	r4,r5
   422e0:	dfc00215 	stw	ra,8(sp)
   422e4:	80000015 	stw	zero,0(r16)
   422e8:	004b8dc0 	call	4b8dc <sbrk>
   422ec:	00ffffc4 	movi	r3,-1
   422f0:	10c00526 	beq	r2,r3,42308 <_sbrk_r+0x44>
   422f4:	dfc00217 	ldw	ra,8(sp)
   422f8:	dc400117 	ldw	r17,4(sp)
   422fc:	dc000017 	ldw	r16,0(sp)
   42300:	dec00304 	addi	sp,sp,12
   42304:	f800283a 	ret
   42308:	80c00017 	ldw	r3,0(r16)
   4230c:	183ff926 	beq	r3,zero,422f4 <_sbrk_r+0x30>
   42310:	88c00015 	stw	r3,0(r17)
   42314:	dfc00217 	ldw	ra,8(sp)
   42318:	dc400117 	ldw	r17,4(sp)
   4231c:	dc000017 	ldw	r16,0(sp)
   42320:	dec00304 	addi	sp,sp,12
   42324:	f800283a 	ret

00042328 <strlen>:
   42328:	208000cc 	andi	r2,r4,3
   4232c:	10001f1e 	bne	r2,zero,423ac <strlen+0x84>
   42330:	20800017 	ldw	r2,0(r4)
   42334:	01ffbff4 	movhi	r7,65279
   42338:	39ffbfc4 	addi	r7,r7,-257
   4233c:	01a02074 	movhi	r6,32897
   42340:	31a02004 	addi	r6,r6,-32640
   42344:	11c7883a 	add	r3,r2,r7
   42348:	0084303a 	nor	r2,zero,r2
   4234c:	1886703a 	and	r3,r3,r2
   42350:	1986703a 	and	r3,r3,r6
   42354:	2005883a 	mov	r2,r4
   42358:	1800101e 	bne	r3,zero,4239c <strlen+0x74>
   4235c:	10800104 	addi	r2,r2,4
   42360:	10c00017 	ldw	r3,0(r2)
   42364:	19cb883a 	add	r5,r3,r7
   42368:	00c6303a 	nor	r3,zero,r3
   4236c:	28c6703a 	and	r3,r5,r3
   42370:	1986703a 	and	r3,r3,r6
   42374:	1800091e 	bne	r3,zero,4239c <strlen+0x74>
   42378:	10800104 	addi	r2,r2,4
   4237c:	10c00017 	ldw	r3,0(r2)
   42380:	19cb883a 	add	r5,r3,r7
   42384:	00c6303a 	nor	r3,zero,r3
   42388:	28c6703a 	and	r3,r5,r3
   4238c:	1986703a 	and	r3,r3,r6
   42390:	183ff226 	beq	r3,zero,4235c <strlen+0x34>
   42394:	00000106 	br	4239c <strlen+0x74>
   42398:	10800044 	addi	r2,r2,1
   4239c:	10c00007 	ldb	r3,0(r2)
   423a0:	183ffd1e 	bne	r3,zero,42398 <strlen+0x70>
   423a4:	1105c83a 	sub	r2,r2,r4
   423a8:	f800283a 	ret
   423ac:	2005883a 	mov	r2,r4
   423b0:	003ffa06 	br	4239c <strlen+0x74>

000423b4 <__sprint_r>:
   423b4:	30800217 	ldw	r2,8(r6)
   423b8:	defffe04 	addi	sp,sp,-8
   423bc:	dc000015 	stw	r16,0(sp)
   423c0:	dfc00115 	stw	ra,4(sp)
   423c4:	3021883a 	mov	r16,r6
   423c8:	10000226 	beq	r2,zero,423d4 <__sprint_r+0x20>
   423cc:	00465640 	call	46564 <__sfvwrite_r>
   423d0:	80000215 	stw	zero,8(r16)
   423d4:	80000115 	stw	zero,4(r16)
   423d8:	dfc00117 	ldw	ra,4(sp)
   423dc:	dc000017 	ldw	r16,0(sp)
   423e0:	dec00204 	addi	sp,sp,8
   423e4:	f800283a 	ret

000423e8 <___vfprintf_internal_r>:
   423e8:	defeb904 	addi	sp,sp,-1308
   423ec:	dc013d15 	stw	r16,1268(sp)
   423f0:	d9013015 	stw	r4,1216(sp)
   423f4:	dfc14615 	stw	ra,1304(sp)
   423f8:	df014515 	stw	fp,1300(sp)
   423fc:	ddc14415 	stw	r23,1296(sp)
   42400:	dd814315 	stw	r22,1292(sp)
   42404:	dd414215 	stw	r21,1288(sp)
   42408:	dd014115 	stw	r20,1284(sp)
   4240c:	dcc14015 	stw	r19,1280(sp)
   42410:	dc813f15 	stw	r18,1276(sp)
   42414:	dc413e15 	stw	r17,1272(sp)
   42418:	d9412915 	stw	r5,1188(sp)
   4241c:	3021883a 	mov	r16,r6
   42420:	d9c12d15 	stw	r7,1204(sp)
   42424:	0046c500 	call	46c50 <_localeconv_r>
   42428:	10800017 	ldw	r2,0(r2)
   4242c:	d9013017 	ldw	r4,1216(sp)
   42430:	d8013315 	stw	zero,1228(sp)
   42434:	d8813715 	stw	r2,1244(sp)
   42438:	d8013415 	stw	zero,1232(sp)
   4243c:	20000226 	beq	r4,zero,42448 <___vfprintf_internal_r+0x60>
   42440:	20800e17 	ldw	r2,56(r4)
   42444:	10014b26 	beq	r2,zero,42974 <___vfprintf_internal_r+0x58c>
   42448:	d8c12917 	ldw	r3,1188(sp)
   4244c:	1880030b 	ldhu	r2,12(r3)
   42450:	10c0020c 	andi	r3,r2,8
   42454:	18ffffcc 	andi	r3,r3,65535
   42458:	18e0001c 	xori	r3,r3,32768
   4245c:	18e00004 	addi	r3,r3,-32768
   42460:	1800ed26 	beq	r3,zero,42818 <___vfprintf_internal_r+0x430>
   42464:	d9012917 	ldw	r4,1188(sp)
   42468:	20c00417 	ldw	r3,16(r4)
   4246c:	1800ea26 	beq	r3,zero,42818 <___vfprintf_internal_r+0x430>
   42470:	1100068c 	andi	r4,r2,26
   42474:	00c00284 	movi	r3,10
   42478:	20c0f026 	beq	r4,r3,4283c <___vfprintf_internal_r+0x454>
   4247c:	d9010dc4 	addi	r4,sp,1079
   42480:	d8810e04 	addi	r2,sp,1080
   42484:	dc413017 	ldw	r17,1216(sp)
   42488:	d8c00404 	addi	r3,sp,16
   4248c:	d9012615 	stw	r4,1176(sp)
   42490:	1109c83a 	sub	r4,r2,r4
   42494:	d8812715 	stw	r2,1180(sp)
   42498:	d8c11b15 	stw	r3,1132(sp)
   4249c:	d8011d15 	stw	zero,1140(sp)
   424a0:	d8011c15 	stw	zero,1136(sp)
   424a4:	802b883a 	mov	r21,r16
   424a8:	d8013215 	stw	zero,1224(sp)
   424ac:	d8013615 	stw	zero,1240(sp)
   424b0:	d8013515 	stw	zero,1236(sp)
   424b4:	d8012c15 	stw	zero,1200(sp)
   424b8:	1813883a 	mov	r9,r3
   424bc:	d9013915 	stw	r4,1252(sp)
   424c0:	a8800007 	ldb	r2,0(r21)
   424c4:	1002f326 	beq	r2,zero,43094 <___vfprintf_internal_r+0xcac>
   424c8:	00c00944 	movi	r3,37
   424cc:	a825883a 	mov	r18,r21
   424d0:	10c0021e 	bne	r2,r3,424dc <___vfprintf_internal_r+0xf4>
   424d4:	00001406 	br	42528 <___vfprintf_internal_r+0x140>
   424d8:	10c00326 	beq	r2,r3,424e8 <___vfprintf_internal_r+0x100>
   424dc:	94800044 	addi	r18,r18,1
   424e0:	90800007 	ldb	r2,0(r18)
   424e4:	103ffc1e 	bne	r2,zero,424d8 <___vfprintf_internal_r+0xf0>
   424e8:	9561c83a 	sub	r16,r18,r21
   424ec:	80000e26 	beq	r16,zero,42528 <___vfprintf_internal_r+0x140>
   424f0:	da011d17 	ldw	r8,1140(sp)
   424f4:	d8c11c17 	ldw	r3,1136(sp)
   424f8:	4d400015 	stw	r21,0(r9)
   424fc:	4c000115 	stw	r16,4(r9)
   42500:	4411883a 	add	r8,r8,r16
   42504:	18c00044 	addi	r3,r3,1
   42508:	da011d15 	stw	r8,1140(sp)
   4250c:	d8c11c15 	stw	r3,1136(sp)
   42510:	008001c4 	movi	r2,7
   42514:	10c11016 	blt	r2,r3,42958 <___vfprintf_internal_r+0x570>
   42518:	4a400204 	addi	r9,r9,8
   4251c:	d8812c17 	ldw	r2,1200(sp)
   42520:	1405883a 	add	r2,r2,r16
   42524:	d8812c15 	stw	r2,1200(sp)
   42528:	90800007 	ldb	r2,0(r18)
   4252c:	1000ee26 	beq	r2,zero,428e8 <___vfprintf_internal_r+0x500>
   42530:	95400044 	addi	r21,r18,1
   42534:	94800047 	ldb	r18,1(r18)
   42538:	073fffc4 	movi	fp,-1
   4253c:	e007883a 	mov	r3,fp
   42540:	d8012585 	stb	zero,1174(sp)
   42544:	d8012e15 	stw	zero,1208(sp)
   42548:	0021883a 	mov	r16,zero
   4254c:	05001604 	movi	r20,88
   42550:	04c00244 	movi	r19,9
   42554:	4839883a 	mov	fp,r9
   42558:	ad400044 	addi	r21,r21,1
   4255c:	90bff804 	addi	r2,r18,-32
   42560:	a080462e 	bgeu	r20,r2,4267c <___vfprintf_internal_r+0x294>
   42564:	e013883a 	mov	r9,fp
   42568:	9000df26 	beq	r18,zero,428e8 <___vfprintf_internal_r+0x500>
   4256c:	00c00044 	movi	r3,1
   42570:	d8c12815 	stw	r3,1184(sp)
   42574:	dc810405 	stb	r18,1040(sp)
   42578:	d8012585 	stb	zero,1174(sp)
   4257c:	d8c12b15 	stw	r3,1196(sp)
   42580:	dcc10404 	addi	r19,sp,1040
   42584:	d8013115 	stw	zero,1220(sp)
   42588:	80c0008c 	andi	r3,r16,2
   4258c:	d8c12a15 	stw	r3,1192(sp)
   42590:	18000326 	beq	r3,zero,425a0 <___vfprintf_internal_r+0x1b8>
   42594:	d8c12817 	ldw	r3,1184(sp)
   42598:	18c00084 	addi	r3,r3,2
   4259c:	d8c12815 	stw	r3,1184(sp)
   425a0:	80c0210c 	andi	r3,r16,132
   425a4:	d8c12f15 	stw	r3,1212(sp)
   425a8:	1802251e 	bne	r3,zero,42e40 <___vfprintf_internal_r+0xa58>
   425ac:	d9012e17 	ldw	r4,1208(sp)
   425b0:	d8c12817 	ldw	r3,1184(sp)
   425b4:	20edc83a 	sub	r22,r4,r3
   425b8:	0582210e 	bge	zero,r22,42e40 <___vfprintf_internal_r+0xa58>
   425bc:	02800404 	movi	r10,16
   425c0:	da011d17 	ldw	r8,1140(sp)
   425c4:	d8c11c17 	ldw	r3,1136(sp)
   425c8:	05c00174 	movhi	r23,5
   425cc:	bdf84784 	addi	r23,r23,-7906
   425d0:	5580200e 	bge	r10,r22,42654 <___vfprintf_internal_r+0x26c>
   425d4:	dc813815 	stw	r18,1248(sp)
   425d8:	5039883a 	mov	fp,r10
   425dc:	b825883a 	mov	r18,r23
   425e0:	050001c4 	movi	r20,7
   425e4:	b02f883a 	mov	r23,r22
   425e8:	802d883a 	mov	r22,r16
   425ec:	dc012917 	ldw	r16,1188(sp)
   425f0:	00000306 	br	42600 <___vfprintf_internal_r+0x218>
   425f4:	bdfffc04 	addi	r23,r23,-16
   425f8:	4a400204 	addi	r9,r9,8
   425fc:	e5c0110e 	bge	fp,r23,42644 <___vfprintf_internal_r+0x25c>
   42600:	4c800015 	stw	r18,0(r9)
   42604:	4f000115 	stw	fp,4(r9)
   42608:	42000404 	addi	r8,r8,16
   4260c:	18c00044 	addi	r3,r3,1
   42610:	da011d15 	stw	r8,1140(sp)
   42614:	d8c11c15 	stw	r3,1136(sp)
   42618:	a0fff60e 	bge	r20,r3,425f4 <___vfprintf_internal_r+0x20c>
   4261c:	8809883a 	mov	r4,r17
   42620:	800b883a 	mov	r5,r16
   42624:	d9811b04 	addi	r6,sp,1132
   42628:	00423b40 	call	423b4 <__sprint_r>
   4262c:	1000b41e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   42630:	bdfffc04 	addi	r23,r23,-16
   42634:	da011d17 	ldw	r8,1140(sp)
   42638:	d8c11c17 	ldw	r3,1136(sp)
   4263c:	da400404 	addi	r9,sp,16
   42640:	e5ffef16 	blt	fp,r23,42600 <___vfprintf_internal_r+0x218>
   42644:	b021883a 	mov	r16,r22
   42648:	b82d883a 	mov	r22,r23
   4264c:	902f883a 	mov	r23,r18
   42650:	dc813817 	ldw	r18,1248(sp)
   42654:	4dc00015 	stw	r23,0(r9)
   42658:	4d800115 	stw	r22,4(r9)
   4265c:	4591883a 	add	r8,r8,r22
   42660:	18c00044 	addi	r3,r3,1
   42664:	da011d15 	stw	r8,1140(sp)
   42668:	d8c11c15 	stw	r3,1136(sp)
   4266c:	008001c4 	movi	r2,7
   42670:	10c3fe16 	blt	r2,r3,4366c <___vfprintf_internal_r+0x1284>
   42674:	4a400204 	addi	r9,r9,8
   42678:	0001f306 	br	42e48 <___vfprintf_internal_r+0xa60>
   4267c:	1085883a 	add	r2,r2,r2
   42680:	1085883a 	add	r2,r2,r2
   42684:	01000134 	movhi	r4,4
   42688:	2109a604 	addi	r4,r4,9880
   4268c:	1105883a 	add	r2,r2,r4
   42690:	10800017 	ldw	r2,0(r2)
   42694:	1000683a 	jmp	r2
   42698:	00042d74 	movhi	zero,4277
   4269c:	00042564 	muli	zero,zero,4245
   426a0:	00042564 	muli	zero,zero,4245
   426a4:	00042d8c 	andi	zero,zero,4278
   426a8:	00042564 	muli	zero,zero,4245
   426ac:	00042564 	muli	zero,zero,4245
   426b0:	00042564 	muli	zero,zero,4245
   426b4:	00042564 	muli	zero,zero,4245
   426b8:	00042564 	muli	zero,zero,4245
   426bc:	00042564 	muli	zero,zero,4245
   426c0:	00042c44 	movi	zero,4273
   426c4:	00042dd8 	cmpnei	zero,zero,4279
   426c8:	00042564 	muli	zero,zero,4245
   426cc:	0004280c 	andi	zero,zero,4256
   426d0:	00042bac 	andhi	zero,zero,4270
   426d4:	00042564 	muli	zero,zero,4245
   426d8:	00042d98 	cmpnei	zero,zero,4278
   426dc:	00042da4 	muli	zero,zero,4278
   426e0:	00042da4 	muli	zero,zero,4278
   426e4:	00042da4 	muli	zero,zero,4278
   426e8:	00042da4 	muli	zero,zero,4278
   426ec:	00042da4 	muli	zero,zero,4278
   426f0:	00042da4 	muli	zero,zero,4278
   426f4:	00042da4 	muli	zero,zero,4278
   426f8:	00042da4 	muli	zero,zero,4278
   426fc:	00042da4 	muli	zero,zero,4278
   42700:	00042564 	muli	zero,zero,4245
   42704:	00042564 	muli	zero,zero,4245
   42708:	00042564 	muli	zero,zero,4245
   4270c:	00042564 	muli	zero,zero,4245
   42710:	00042564 	muli	zero,zero,4245
   42714:	00042564 	muli	zero,zero,4245
   42718:	00042564 	muli	zero,zero,4245
   4271c:	00042564 	muli	zero,zero,4245
   42720:	00042564 	muli	zero,zero,4245
   42724:	00042564 	muli	zero,zero,4245
   42728:	0004297c 	xorhi	zero,zero,4261
   4272c:	00042a3c 	xorhi	zero,zero,4264
   42730:	00042564 	muli	zero,zero,4245
   42734:	00042a3c 	xorhi	zero,zero,4264
   42738:	00042564 	muli	zero,zero,4245
   4273c:	00042564 	muli	zero,zero,4245
   42740:	00042564 	muli	zero,zero,4245
   42744:	00042564 	muli	zero,zero,4245
   42748:	00042ad0 	cmplti	zero,zero,4267
   4274c:	00042564 	muli	zero,zero,4245
   42750:	00042564 	muli	zero,zero,4245
   42754:	00042adc 	xori	zero,zero,4267
   42758:	00042564 	muli	zero,zero,4245
   4275c:	00042564 	muli	zero,zero,4245
   42760:	00042564 	muli	zero,zero,4245
   42764:	00042564 	muli	zero,zero,4245
   42768:	00042564 	muli	zero,zero,4245
   4276c:	00042b14 	movui	zero,4268
   42770:	00042564 	muli	zero,zero,4245
   42774:	00042564 	muli	zero,zero,4245
   42778:	00042b50 	cmplti	zero,zero,4269
   4277c:	00042564 	muli	zero,zero,4245
   42780:	00042564 	muli	zero,zero,4245
   42784:	00042564 	muli	zero,zero,4245
   42788:	00042564 	muli	zero,zero,4245
   4278c:	00042564 	muli	zero,zero,4245
   42790:	00042564 	muli	zero,zero,4245
   42794:	00042564 	muli	zero,zero,4245
   42798:	00042564 	muli	zero,zero,4245
   4279c:	00042564 	muli	zero,zero,4245
   427a0:	00042564 	muli	zero,zero,4245
   427a4:	00042de8 	cmpgeui	zero,zero,4279
   427a8:	00042e1c 	xori	zero,zero,4280
   427ac:	00042a3c 	xorhi	zero,zero,4264
   427b0:	00042a3c 	xorhi	zero,zero,4264
   427b4:	00042a3c 	xorhi	zero,zero,4264
   427b8:	00042d68 	cmpgeui	zero,zero,4277
   427bc:	00042e1c 	xori	zero,zero,4280
   427c0:	00042564 	muli	zero,zero,4245
   427c4:	00042564 	muli	zero,zero,4245
   427c8:	00042bf4 	movhi	zero,4271
   427cc:	00042564 	muli	zero,zero,4245
   427d0:	00042c0c 	andi	zero,zero,4272
   427d4:	00042e28 	cmpgeui	zero,zero,4280
   427d8:	00042c6c 	andhi	zero,zero,4273
   427dc:	00042cbc 	xorhi	zero,zero,4274
   427e0:	00042564 	muli	zero,zero,4245
   427e4:	00042cc8 	cmpgei	zero,zero,4275
   427e8:	00042564 	muli	zero,zero,4245
   427ec:	00042e34 	movhi	zero,4280
   427f0:	00042564 	muli	zero,zero,4245
   427f4:	00042564 	muli	zero,zero,4245
   427f8:	00042d2c 	andhi	zero,zero,4276
   427fc:	d9012e17 	ldw	r4,1208(sp)
   42800:	d8812d15 	stw	r2,1204(sp)
   42804:	0109c83a 	sub	r4,zero,r4
   42808:	d9012e15 	stw	r4,1208(sp)
   4280c:	84000114 	ori	r16,r16,4
   42810:	ac800007 	ldb	r18,0(r21)
   42814:	003f5006 	br	42558 <___vfprintf_internal_r+0x170>
   42818:	d9013017 	ldw	r4,1216(sp)
   4281c:	d9412917 	ldw	r5,1188(sp)
   42820:	00442880 	call	44288 <__swsetup_r>
   42824:	10003d1e 	bne	r2,zero,4291c <___vfprintf_internal_r+0x534>
   42828:	d8c12917 	ldw	r3,1188(sp)
   4282c:	1880030b 	ldhu	r2,12(r3)
   42830:	00c00284 	movi	r3,10
   42834:	1100068c 	andi	r4,r2,26
   42838:	20ff101e 	bne	r4,r3,4247c <___vfprintf_internal_r+0x94>
   4283c:	d9012917 	ldw	r4,1188(sp)
   42840:	20c0038b 	ldhu	r3,14(r4)
   42844:	193fffcc 	andi	r4,r3,65535
   42848:	2120001c 	xori	r4,r4,32768
   4284c:	21200004 	addi	r4,r4,-32768
   42850:	203f0a16 	blt	r4,zero,4247c <___vfprintf_internal_r+0x94>
   42854:	d9012917 	ldw	r4,1188(sp)
   42858:	d9c12d17 	ldw	r7,1204(sp)
   4285c:	10bfff4c 	andi	r2,r2,65533
   42860:	22800717 	ldw	r10,28(r4)
   42864:	22400917 	ldw	r9,36(r4)
   42868:	d9013017 	ldw	r4,1216(sp)
   4286c:	02010004 	movi	r8,1024
   42870:	d881070d 	sth	r2,1052(sp)
   42874:	d9410404 	addi	r5,sp,1040
   42878:	d8800404 	addi	r2,sp,16
   4287c:	800d883a 	mov	r6,r16
   42880:	d8c1078d 	sth	r3,1054(sp)
   42884:	da810b15 	stw	r10,1068(sp)
   42888:	da410d15 	stw	r9,1076(sp)
   4288c:	d8810415 	stw	r2,1040(sp)
   42890:	d8810815 	stw	r2,1056(sp)
   42894:	da010615 	stw	r8,1048(sp)
   42898:	da010915 	stw	r8,1060(sp)
   4289c:	d8010a15 	stw	zero,1064(sp)
   428a0:	00423e80 	call	423e8 <___vfprintf_internal_r>
   428a4:	d8812c15 	stw	r2,1200(sp)
   428a8:	10000416 	blt	r2,zero,428bc <___vfprintf_internal_r+0x4d4>
   428ac:	d9013017 	ldw	r4,1216(sp)
   428b0:	d9410404 	addi	r5,sp,1040
   428b4:	0045c540 	call	45c54 <_fflush_r>
   428b8:	1006501e 	bne	r2,zero,441fc <___vfprintf_internal_r+0x1e14>
   428bc:	d881070b 	ldhu	r2,1052(sp)
   428c0:	1080100c 	andi	r2,r2,64
   428c4:	10bfffcc 	andi	r2,r2,65535
   428c8:	10a0001c 	xori	r2,r2,32768
   428cc:	10a00004 	addi	r2,r2,-32768
   428d0:	10001426 	beq	r2,zero,42924 <___vfprintf_internal_r+0x53c>
   428d4:	d8c12917 	ldw	r3,1188(sp)
   428d8:	1880030b 	ldhu	r2,12(r3)
   428dc:	10801014 	ori	r2,r2,64
   428e0:	1880030d 	sth	r2,12(r3)
   428e4:	00000f06 	br	42924 <___vfprintf_internal_r+0x53c>
   428e8:	d8811d17 	ldw	r2,1140(sp)
   428ec:	10000426 	beq	r2,zero,42900 <___vfprintf_internal_r+0x518>
   428f0:	d9013017 	ldw	r4,1216(sp)
   428f4:	d9412917 	ldw	r5,1188(sp)
   428f8:	d9811b04 	addi	r6,sp,1132
   428fc:	00423b40 	call	423b4 <__sprint_r>
   42900:	d8c12917 	ldw	r3,1188(sp)
   42904:	1880030b 	ldhu	r2,12(r3)
   42908:	1080100c 	andi	r2,r2,64
   4290c:	10bfffcc 	andi	r2,r2,65535
   42910:	10a0001c 	xori	r2,r2,32768
   42914:	10a00004 	addi	r2,r2,-32768
   42918:	10000226 	beq	r2,zero,42924 <___vfprintf_internal_r+0x53c>
   4291c:	00bfffc4 	movi	r2,-1
   42920:	d8812c15 	stw	r2,1200(sp)
   42924:	d8812c17 	ldw	r2,1200(sp)
   42928:	dfc14617 	ldw	ra,1304(sp)
   4292c:	df014517 	ldw	fp,1300(sp)
   42930:	ddc14417 	ldw	r23,1296(sp)
   42934:	dd814317 	ldw	r22,1292(sp)
   42938:	dd414217 	ldw	r21,1288(sp)
   4293c:	dd014117 	ldw	r20,1284(sp)
   42940:	dcc14017 	ldw	r19,1280(sp)
   42944:	dc813f17 	ldw	r18,1276(sp)
   42948:	dc413e17 	ldw	r17,1272(sp)
   4294c:	dc013d17 	ldw	r16,1268(sp)
   42950:	dec14704 	addi	sp,sp,1308
   42954:	f800283a 	ret
   42958:	d9412917 	ldw	r5,1188(sp)
   4295c:	8809883a 	mov	r4,r17
   42960:	d9811b04 	addi	r6,sp,1132
   42964:	00423b40 	call	423b4 <__sprint_r>
   42968:	103fe51e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   4296c:	da400404 	addi	r9,sp,16
   42970:	003eea06 	br	4251c <___vfprintf_internal_r+0x134>
   42974:	0045f100 	call	45f10 <__sinit>
   42978:	003eb306 	br	42448 <___vfprintf_internal_r+0x60>
   4297c:	e013883a 	mov	r9,fp
   42980:	84000414 	ori	r16,r16,16
   42984:	1839883a 	mov	fp,r3
   42988:	8080080c 	andi	r2,r16,32
   4298c:	10034426 	beq	r2,zero,436a0 <___vfprintf_internal_r+0x12b8>
   42990:	d8c12d17 	ldw	r3,1204(sp)
   42994:	18800117 	ldw	r2,4(r3)
   42998:	1dc00017 	ldw	r23,0(r3)
   4299c:	18c00204 	addi	r3,r3,8
   429a0:	d8c12d15 	stw	r3,1204(sp)
   429a4:	102d883a 	mov	r22,r2
   429a8:	1003020e 	bge	r2,zero,435b4 <___vfprintf_internal_r+0x11cc>
   429ac:	05efc83a 	sub	r23,zero,r23
   429b0:	b804c03a 	cmpne	r2,r23,zero
   429b4:	05adc83a 	sub	r22,zero,r22
   429b8:	b0adc83a 	sub	r22,r22,r2
   429bc:	00800b44 	movi	r2,45
   429c0:	d8812585 	stb	r2,1174(sp)
   429c4:	00c00044 	movi	r3,1
   429c8:	bd84b03a 	or	r2,r23,r22
   429cc:	e0000216 	blt	fp,zero,429d8 <___vfprintf_internal_r+0x5f0>
   429d0:	013fdfc4 	movi	r4,-129
   429d4:	8120703a 	and	r16,r16,r4
   429d8:	1001cc1e 	bne	r2,zero,4310c <___vfprintf_internal_r+0xd24>
   429dc:	e001cb1e 	bne	fp,zero,4310c <___vfprintf_internal_r+0xd24>
   429e0:	18c03fcc 	andi	r3,r3,255
   429e4:	1802ca1e 	bne	r3,zero,43510 <___vfprintf_internal_r+0x1128>
   429e8:	8080004c 	andi	r2,r16,1
   429ec:	1002c826 	beq	r2,zero,43510 <___vfprintf_internal_r+0x1128>
   429f0:	d8c13917 	ldw	r3,1252(sp)
   429f4:	00800c04 	movi	r2,48
   429f8:	d8810dc5 	stb	r2,1079(sp)
   429fc:	d8c12b15 	stw	r3,1196(sp)
   42a00:	dcc10dc4 	addi	r19,sp,1079
   42a04:	d8812b17 	ldw	r2,1196(sp)
   42a08:	d8812815 	stw	r2,1184(sp)
   42a0c:	1700010e 	bge	r2,fp,42a14 <___vfprintf_internal_r+0x62c>
   42a10:	df012815 	stw	fp,1184(sp)
   42a14:	d8812583 	ldbu	r2,1174(sp)
   42a18:	df013115 	stw	fp,1220(sp)
   42a1c:	10803fcc 	andi	r2,r2,255
   42a20:	1080201c 	xori	r2,r2,128
   42a24:	10bfe004 	addi	r2,r2,-128
   42a28:	103ed726 	beq	r2,zero,42588 <___vfprintf_internal_r+0x1a0>
   42a2c:	d8c12817 	ldw	r3,1184(sp)
   42a30:	18c00044 	addi	r3,r3,1
   42a34:	d8c12815 	stw	r3,1184(sp)
   42a38:	003ed306 	br	42588 <___vfprintf_internal_r+0x1a0>
   42a3c:	8080020c 	andi	r2,r16,8
   42a40:	e013883a 	mov	r9,fp
   42a44:	1839883a 	mov	fp,r3
   42a48:	1003a626 	beq	r2,zero,438e4 <___vfprintf_internal_r+0x14fc>
   42a4c:	d9012d17 	ldw	r4,1204(sp)
   42a50:	25800017 	ldw	r22,0(r4)
   42a54:	25000117 	ldw	r20,4(r4)
   42a58:	21000204 	addi	r4,r4,8
   42a5c:	d9012d15 	stw	r4,1204(sp)
   42a60:	dd813315 	stw	r22,1228(sp)
   42a64:	dd013415 	stw	r20,1232(sp)
   42a68:	b009883a 	mov	r4,r22
   42a6c:	a00b883a 	mov	r5,r20
   42a70:	da413c15 	stw	r9,1264(sp)
   42a74:	00489180 	call	48918 <__isinfd>
   42a78:	da413c17 	ldw	r9,1264(sp)
   42a7c:	b009883a 	mov	r4,r22
   42a80:	a00b883a 	mov	r5,r20
   42a84:	10041d26 	beq	r2,zero,43afc <___vfprintf_internal_r+0x1714>
   42a88:	000d883a 	mov	r6,zero
   42a8c:	000f883a 	mov	r7,zero
   42a90:	004a6880 	call	4a688 <__ltdf2>
   42a94:	da413c17 	ldw	r9,1264(sp)
   42a98:	1004da16 	blt	r2,zero,43e04 <___vfprintf_internal_r+0x1a1c>
   42a9c:	d8812583 	ldbu	r2,1174(sp)
   42aa0:	00c011c4 	movi	r3,71
   42aa4:	1c83d116 	blt	r3,r18,439ec <___vfprintf_internal_r+0x1604>
   42aa8:	04c00174 	movhi	r19,5
   42aac:	9cf83704 	addi	r19,r19,-7972
   42ab0:	00c000c4 	movi	r3,3
   42ab4:	d8c12815 	stw	r3,1184(sp)
   42ab8:	00ffdfc4 	movi	r3,-129
   42abc:	80e0703a 	and	r16,r16,r3
   42ac0:	d8c12817 	ldw	r3,1184(sp)
   42ac4:	d8013115 	stw	zero,1220(sp)
   42ac8:	d8c12b15 	stw	r3,1196(sp)
   42acc:	003fd306 	br	42a1c <___vfprintf_internal_r+0x634>
   42ad0:	84000214 	ori	r16,r16,8
   42ad4:	ac800007 	ldb	r18,0(r21)
   42ad8:	003e9f06 	br	42558 <___vfprintf_internal_r+0x170>
   42adc:	e013883a 	mov	r9,fp
   42ae0:	84000414 	ori	r16,r16,16
   42ae4:	1839883a 	mov	fp,r3
   42ae8:	8080080c 	andi	r2,r16,32
   42aec:	10031d26 	beq	r2,zero,43764 <___vfprintf_internal_r+0x137c>
   42af0:	d8812d17 	ldw	r2,1204(sp)
   42af4:	0007883a 	mov	r3,zero
   42af8:	15c00017 	ldw	r23,0(r2)
   42afc:	15800117 	ldw	r22,4(r2)
   42b00:	10800204 	addi	r2,r2,8
   42b04:	d8812d15 	stw	r2,1204(sp)
   42b08:	d8012585 	stb	zero,1174(sp)
   42b0c:	bd84b03a 	or	r2,r23,r22
   42b10:	003fae06 	br	429cc <___vfprintf_internal_r+0x5e4>
   42b14:	e013883a 	mov	r9,fp
   42b18:	84000414 	ori	r16,r16,16
   42b1c:	1839883a 	mov	fp,r3
   42b20:	8080080c 	andi	r2,r16,32
   42b24:	1002e726 	beq	r2,zero,436c4 <___vfprintf_internal_r+0x12dc>
   42b28:	d8c12d17 	ldw	r3,1204(sp)
   42b2c:	d9012d17 	ldw	r4,1204(sp)
   42b30:	1dc00017 	ldw	r23,0(r3)
   42b34:	1d800117 	ldw	r22,4(r3)
   42b38:	21000204 	addi	r4,r4,8
   42b3c:	00c00044 	movi	r3,1
   42b40:	d9012d15 	stw	r4,1204(sp)
   42b44:	bd84b03a 	or	r2,r23,r22
   42b48:	d8012585 	stb	zero,1174(sp)
   42b4c:	003f9f06 	br	429cc <___vfprintf_internal_r+0x5e4>
   42b50:	e013883a 	mov	r9,fp
   42b54:	1839883a 	mov	fp,r3
   42b58:	00c00174 	movhi	r3,5
   42b5c:	18f83b04 	addi	r3,r3,-7956
   42b60:	d8c13615 	stw	r3,1240(sp)
   42b64:	8080080c 	andi	r2,r16,32
   42b68:	10007726 	beq	r2,zero,42d48 <___vfprintf_internal_r+0x960>
   42b6c:	d9012d17 	ldw	r4,1204(sp)
   42b70:	25c00017 	ldw	r23,0(r4)
   42b74:	25800117 	ldw	r22,4(r4)
   42b78:	21000204 	addi	r4,r4,8
   42b7c:	d9012d15 	stw	r4,1204(sp)
   42b80:	8080004c 	andi	r2,r16,1
   42b84:	1002c226 	beq	r2,zero,43690 <___vfprintf_internal_r+0x12a8>
   42b88:	bd84b03a 	or	r2,r23,r22
   42b8c:	10035d26 	beq	r2,zero,43904 <___vfprintf_internal_r+0x151c>
   42b90:	00c00c04 	movi	r3,48
   42b94:	d8c12505 	stb	r3,1172(sp)
   42b98:	dc812545 	stb	r18,1173(sp)
   42b9c:	84000094 	ori	r16,r16,2
   42ba0:	00c00084 	movi	r3,2
   42ba4:	d8012585 	stb	zero,1174(sp)
   42ba8:	003f8806 	br	429cc <___vfprintf_internal_r+0x5e4>
   42bac:	ac800007 	ldb	r18,0(r21)
   42bb0:	00c00a84 	movi	r3,42
   42bb4:	adc00044 	addi	r23,r21,1
   42bb8:	90c57526 	beq	r18,r3,44190 <___vfprintf_internal_r+0x1da8>
   42bbc:	95bff404 	addi	r22,r18,-48
   42bc0:	0009883a 	mov	r4,zero
   42bc4:	9d84ff36 	bltu	r19,r22,43fc4 <___vfprintf_internal_r+0x1bdc>
   42bc8:	01400284 	movi	r5,10
   42bcc:	00419f00 	call	419f0 <__mulsi3>
   42bd0:	bc800007 	ldb	r18,0(r23)
   42bd4:	b089883a 	add	r4,r22,r2
   42bd8:	bdc00044 	addi	r23,r23,1
   42bdc:	95bff404 	addi	r22,r18,-48
   42be0:	9dbff92e 	bgeu	r19,r22,42bc8 <___vfprintf_internal_r+0x7e0>
   42be4:	2007883a 	mov	r3,r4
   42be8:	20044316 	blt	r4,zero,43cf8 <___vfprintf_internal_r+0x1910>
   42bec:	b82b883a 	mov	r21,r23
   42bf0:	003e5a06 	br	4255c <___vfprintf_internal_r+0x174>
   42bf4:	ac800007 	ldb	r18,0(r21)
   42bf8:	01001b04 	movi	r4,108
   42bfc:	a805883a 	mov	r2,r21
   42c00:	91045526 	beq	r18,r4,43d58 <___vfprintf_internal_r+0x1970>
   42c04:	84000414 	ori	r16,r16,16
   42c08:	003e5306 	br	42558 <___vfprintf_internal_r+0x170>
   42c0c:	8080080c 	andi	r2,r16,32
   42c10:	e013883a 	mov	r9,fp
   42c14:	10034026 	beq	r2,zero,43918 <___vfprintf_internal_r+0x1530>
   42c18:	d9012d17 	ldw	r4,1204(sp)
   42c1c:	20800017 	ldw	r2,0(r4)
   42c20:	d9012c17 	ldw	r4,1200(sp)
   42c24:	2007d7fa 	srai	r3,r4,31
   42c28:	d9012d17 	ldw	r4,1204(sp)
   42c2c:	10c00115 	stw	r3,4(r2)
   42c30:	21000104 	addi	r4,r4,4
   42c34:	d9012d15 	stw	r4,1204(sp)
   42c38:	d9012c17 	ldw	r4,1200(sp)
   42c3c:	11000015 	stw	r4,0(r2)
   42c40:	003e1f06 	br	424c0 <___vfprintf_internal_r+0xd8>
   42c44:	d9012d17 	ldw	r4,1204(sp)
   42c48:	21000017 	ldw	r4,0(r4)
   42c4c:	d9012e15 	stw	r4,1208(sp)
   42c50:	d9012d17 	ldw	r4,1204(sp)
   42c54:	20800104 	addi	r2,r4,4
   42c58:	d9012e17 	ldw	r4,1208(sp)
   42c5c:	203ee716 	blt	r4,zero,427fc <___vfprintf_internal_r+0x414>
   42c60:	d8812d15 	stw	r2,1204(sp)
   42c64:	ac800007 	ldb	r18,0(r21)
   42c68:	003e3b06 	br	42558 <___vfprintf_internal_r+0x170>
   42c6c:	e013883a 	mov	r9,fp
   42c70:	1839883a 	mov	fp,r3
   42c74:	d8c12d17 	ldw	r3,1204(sp)
   42c78:	00800c04 	movi	r2,48
   42c7c:	01000174 	movhi	r4,5
   42c80:	21384004 	addi	r4,r4,-7936
   42c84:	1dc00017 	ldw	r23,0(r3)
   42c88:	18c00104 	addi	r3,r3,4
   42c8c:	d8812505 	stb	r2,1172(sp)
   42c90:	00801e04 	movi	r2,120
   42c94:	d8812545 	stb	r2,1173(sp)
   42c98:	d8c12d15 	stw	r3,1204(sp)
   42c9c:	002d883a 	mov	r22,zero
   42ca0:	84000094 	ori	r16,r16,2
   42ca4:	d9013615 	stw	r4,1240(sp)
   42ca8:	00c00084 	movi	r3,2
   42cac:	04801e04 	movi	r18,120
   42cb0:	b805883a 	mov	r2,r23
   42cb4:	d8012585 	stb	zero,1174(sp)
   42cb8:	003f4406 	br	429cc <___vfprintf_internal_r+0x5e4>
   42cbc:	84000814 	ori	r16,r16,32
   42cc0:	ac800007 	ldb	r18,0(r21)
   42cc4:	003e2406 	br	42558 <___vfprintf_internal_r+0x170>
   42cc8:	d8812d17 	ldw	r2,1204(sp)
   42ccc:	d8012585 	stb	zero,1174(sp)
   42cd0:	e013883a 	mov	r9,fp
   42cd4:	14c00017 	ldw	r19,0(r2)
   42cd8:	1839883a 	mov	fp,r3
   42cdc:	15c00104 	addi	r23,r2,4
   42ce0:	98045526 	beq	r19,zero,43e38 <___vfprintf_internal_r+0x1a50>
   42ce4:	9809883a 	mov	r4,r19
   42ce8:	18043116 	blt	r3,zero,43db0 <___vfprintf_internal_r+0x19c8>
   42cec:	000b883a 	mov	r5,zero
   42cf0:	180d883a 	mov	r6,r3
   42cf4:	da413c15 	stw	r9,1264(sp)
   42cf8:	0046e2c0 	call	46e2c <memchr>
   42cfc:	da413c17 	ldw	r9,1264(sp)
   42d00:	10047a26 	beq	r2,zero,43eec <___vfprintf_internal_r+0x1b04>
   42d04:	14c5c83a 	sub	r2,r2,r19
   42d08:	d8812b15 	stw	r2,1196(sp)
   42d0c:	e083d40e 	bge	fp,r2,43c60 <___vfprintf_internal_r+0x1878>
   42d10:	df012815 	stw	fp,1184(sp)
   42d14:	e004e416 	blt	fp,zero,440a8 <___vfprintf_internal_r+0x1cc0>
   42d18:	d8812583 	ldbu	r2,1174(sp)
   42d1c:	df012b15 	stw	fp,1196(sp)
   42d20:	ddc12d15 	stw	r23,1204(sp)
   42d24:	d8013115 	stw	zero,1220(sp)
   42d28:	003f3c06 	br	42a1c <___vfprintf_internal_r+0x634>
   42d2c:	00800174 	movhi	r2,5
   42d30:	10b84004 	addi	r2,r2,-7936
   42d34:	d8813615 	stw	r2,1240(sp)
   42d38:	8080080c 	andi	r2,r16,32
   42d3c:	e013883a 	mov	r9,fp
   42d40:	1839883a 	mov	fp,r3
   42d44:	103f891e 	bne	r2,zero,42b6c <___vfprintf_internal_r+0x784>
   42d48:	8080040c 	andi	r2,r16,16
   42d4c:	1002c326 	beq	r2,zero,4385c <___vfprintf_internal_r+0x1474>
   42d50:	d8812d17 	ldw	r2,1204(sp)
   42d54:	002d883a 	mov	r22,zero
   42d58:	15c00017 	ldw	r23,0(r2)
   42d5c:	10800104 	addi	r2,r2,4
   42d60:	d8812d15 	stw	r2,1204(sp)
   42d64:	003f8606 	br	42b80 <___vfprintf_internal_r+0x798>
   42d68:	84001014 	ori	r16,r16,64
   42d6c:	ac800007 	ldb	r18,0(r21)
   42d70:	003df906 	br	42558 <___vfprintf_internal_r+0x170>
   42d74:	d8812587 	ldb	r2,1174(sp)
   42d78:	1002e51e 	bne	r2,zero,43910 <___vfprintf_internal_r+0x1528>
   42d7c:	00800804 	movi	r2,32
   42d80:	d8812585 	stb	r2,1174(sp)
   42d84:	ac800007 	ldb	r18,0(r21)
   42d88:	003df306 	br	42558 <___vfprintf_internal_r+0x170>
   42d8c:	84000054 	ori	r16,r16,1
   42d90:	ac800007 	ldb	r18,0(r21)
   42d94:	003df006 	br	42558 <___vfprintf_internal_r+0x170>
   42d98:	84002014 	ori	r16,r16,128
   42d9c:	ac800007 	ldb	r18,0(r21)
   42da0:	003ded06 	br	42558 <___vfprintf_internal_r+0x170>
   42da4:	0009883a 	mov	r4,zero
   42da8:	95bff404 	addi	r22,r18,-48
   42dac:	182f883a 	mov	r23,r3
   42db0:	01400284 	movi	r5,10
   42db4:	00419f00 	call	419f0 <__mulsi3>
   42db8:	ac800007 	ldb	r18,0(r21)
   42dbc:	1589883a 	add	r4,r2,r22
   42dc0:	ad400044 	addi	r21,r21,1
   42dc4:	95bff404 	addi	r22,r18,-48
   42dc8:	9dbff92e 	bgeu	r19,r22,42db0 <___vfprintf_internal_r+0x9c8>
   42dcc:	b807883a 	mov	r3,r23
   42dd0:	d9012e15 	stw	r4,1208(sp)
   42dd4:	003de106 	br	4255c <___vfprintf_internal_r+0x174>
   42dd8:	00800ac4 	movi	r2,43
   42ddc:	d8812585 	stb	r2,1174(sp)
   42de0:	ac800007 	ldb	r18,0(r21)
   42de4:	003ddc06 	br	42558 <___vfprintf_internal_r+0x170>
   42de8:	d8c12d17 	ldw	r3,1204(sp)
   42dec:	d9012d17 	ldw	r4,1204(sp)
   42df0:	e013883a 	mov	r9,fp
   42df4:	18800017 	ldw	r2,0(r3)
   42df8:	21000104 	addi	r4,r4,4
   42dfc:	00c00044 	movi	r3,1
   42e00:	d8c12815 	stw	r3,1184(sp)
   42e04:	d8012585 	stb	zero,1174(sp)
   42e08:	d8810405 	stb	r2,1040(sp)
   42e0c:	d9012d15 	stw	r4,1204(sp)
   42e10:	d8c12b15 	stw	r3,1196(sp)
   42e14:	dcc10404 	addi	r19,sp,1040
   42e18:	003dda06 	br	42584 <___vfprintf_internal_r+0x19c>
   42e1c:	e013883a 	mov	r9,fp
   42e20:	1839883a 	mov	fp,r3
   42e24:	003ed806 	br	42988 <___vfprintf_internal_r+0x5a0>
   42e28:	e013883a 	mov	r9,fp
   42e2c:	1839883a 	mov	fp,r3
   42e30:	003f2d06 	br	42ae8 <___vfprintf_internal_r+0x700>
   42e34:	e013883a 	mov	r9,fp
   42e38:	1839883a 	mov	fp,r3
   42e3c:	003f3806 	br	42b20 <___vfprintf_internal_r+0x738>
   42e40:	da011d17 	ldw	r8,1140(sp)
   42e44:	d8c11c17 	ldw	r3,1136(sp)
   42e48:	d8812587 	ldb	r2,1174(sp)
   42e4c:	10000b26 	beq	r2,zero,42e7c <___vfprintf_internal_r+0xa94>
   42e50:	d8812584 	addi	r2,sp,1174
   42e54:	48800015 	stw	r2,0(r9)
   42e58:	00800044 	movi	r2,1
   42e5c:	48800115 	stw	r2,4(r9)
   42e60:	4091883a 	add	r8,r8,r2
   42e64:	1887883a 	add	r3,r3,r2
   42e68:	da011d15 	stw	r8,1140(sp)
   42e6c:	d8c11c15 	stw	r3,1136(sp)
   42e70:	008001c4 	movi	r2,7
   42e74:	10c18e16 	blt	r2,r3,434b0 <___vfprintf_internal_r+0x10c8>
   42e78:	4a400204 	addi	r9,r9,8
   42e7c:	d9012a17 	ldw	r4,1192(sp)
   42e80:	20000b26 	beq	r4,zero,42eb0 <___vfprintf_internal_r+0xac8>
   42e84:	d8812504 	addi	r2,sp,1172
   42e88:	48800015 	stw	r2,0(r9)
   42e8c:	00800084 	movi	r2,2
   42e90:	48800115 	stw	r2,4(r9)
   42e94:	4091883a 	add	r8,r8,r2
   42e98:	18c00044 	addi	r3,r3,1
   42e9c:	da011d15 	stw	r8,1140(sp)
   42ea0:	d8c11c15 	stw	r3,1136(sp)
   42ea4:	008001c4 	movi	r2,7
   42ea8:	10c17816 	blt	r2,r3,4348c <___vfprintf_internal_r+0x10a4>
   42eac:	4a400204 	addi	r9,r9,8
   42eb0:	d9012f17 	ldw	r4,1212(sp)
   42eb4:	00802004 	movi	r2,128
   42eb8:	2080fc26 	beq	r4,r2,432ac <___vfprintf_internal_r+0xec4>
   42ebc:	d8813117 	ldw	r2,1220(sp)
   42ec0:	d9012b17 	ldw	r4,1196(sp)
   42ec4:	112fc83a 	sub	r23,r2,r4
   42ec8:	05c02a0e 	bge	zero,r23,42f74 <___vfprintf_internal_r+0xb8c>
   42ecc:	07000404 	movi	fp,16
   42ed0:	05000174 	movhi	r20,5
   42ed4:	a5384b84 	addi	r20,r20,-7890
   42ed8:	e5c01d0e 	bge	fp,r23,42f50 <___vfprintf_internal_r+0xb68>
   42edc:	dc812a15 	stw	r18,1192(sp)
   42ee0:	058001c4 	movi	r22,7
   42ee4:	a025883a 	mov	r18,r20
   42ee8:	8029883a 	mov	r20,r16
   42eec:	dc012917 	ldw	r16,1188(sp)
   42ef0:	00000306 	br	42f00 <___vfprintf_internal_r+0xb18>
   42ef4:	bdfffc04 	addi	r23,r23,-16
   42ef8:	4a400204 	addi	r9,r9,8
   42efc:	e5c0110e 	bge	fp,r23,42f44 <___vfprintf_internal_r+0xb5c>
   42f00:	4c800015 	stw	r18,0(r9)
   42f04:	4f000115 	stw	fp,4(r9)
   42f08:	42000404 	addi	r8,r8,16
   42f0c:	18c00044 	addi	r3,r3,1
   42f10:	da011d15 	stw	r8,1140(sp)
   42f14:	d8c11c15 	stw	r3,1136(sp)
   42f18:	b0fff60e 	bge	r22,r3,42ef4 <___vfprintf_internal_r+0xb0c>
   42f1c:	8809883a 	mov	r4,r17
   42f20:	800b883a 	mov	r5,r16
   42f24:	d9811b04 	addi	r6,sp,1132
   42f28:	00423b40 	call	423b4 <__sprint_r>
   42f2c:	103e741e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   42f30:	bdfffc04 	addi	r23,r23,-16
   42f34:	da011d17 	ldw	r8,1140(sp)
   42f38:	d8c11c17 	ldw	r3,1136(sp)
   42f3c:	da400404 	addi	r9,sp,16
   42f40:	e5ffef16 	blt	fp,r23,42f00 <___vfprintf_internal_r+0xb18>
   42f44:	a021883a 	mov	r16,r20
   42f48:	9029883a 	mov	r20,r18
   42f4c:	dc812a17 	ldw	r18,1192(sp)
   42f50:	4d000015 	stw	r20,0(r9)
   42f54:	4dc00115 	stw	r23,4(r9)
   42f58:	45d1883a 	add	r8,r8,r23
   42f5c:	18c00044 	addi	r3,r3,1
   42f60:	da011d15 	stw	r8,1140(sp)
   42f64:	d8c11c15 	stw	r3,1136(sp)
   42f68:	008001c4 	movi	r2,7
   42f6c:	10c13e16 	blt	r2,r3,43468 <___vfprintf_internal_r+0x1080>
   42f70:	4a400204 	addi	r9,r9,8
   42f74:	8080400c 	andi	r2,r16,256
   42f78:	1000831e 	bne	r2,zero,43188 <___vfprintf_internal_r+0xda0>
   42f7c:	d8812b17 	ldw	r2,1196(sp)
   42f80:	4cc00015 	stw	r19,0(r9)
   42f84:	48800115 	stw	r2,4(r9)
   42f88:	4091883a 	add	r8,r8,r2
   42f8c:	18c00044 	addi	r3,r3,1
   42f90:	da011d15 	stw	r8,1140(sp)
   42f94:	d8c11c15 	stw	r3,1136(sp)
   42f98:	008001c4 	movi	r2,7
   42f9c:	10c05316 	blt	r2,r3,430ec <___vfprintf_internal_r+0xd04>
   42fa0:	4a400204 	addi	r9,r9,8
   42fa4:	8400010c 	andi	r16,r16,4
   42fa8:	80002e26 	beq	r16,zero,43064 <___vfprintf_internal_r+0xc7c>
   42fac:	d8812e17 	ldw	r2,1208(sp)
   42fb0:	d8c12817 	ldw	r3,1184(sp)
   42fb4:	10e1c83a 	sub	r16,r2,r3
   42fb8:	04002a0e 	bge	zero,r16,43064 <___vfprintf_internal_r+0xc7c>
   42fbc:	04800404 	movi	r18,16
   42fc0:	d8c11c17 	ldw	r3,1136(sp)
   42fc4:	05c00174 	movhi	r23,5
   42fc8:	bdf84784 	addi	r23,r23,-7906
   42fcc:	9400170e 	bge	r18,r16,4302c <___vfprintf_internal_r+0xc44>
   42fd0:	04c001c4 	movi	r19,7
   42fd4:	dd012917 	ldw	r20,1188(sp)
   42fd8:	00000306 	br	42fe8 <___vfprintf_internal_r+0xc00>
   42fdc:	843ffc04 	addi	r16,r16,-16
   42fe0:	4a400204 	addi	r9,r9,8
   42fe4:	9400110e 	bge	r18,r16,4302c <___vfprintf_internal_r+0xc44>
   42fe8:	4dc00015 	stw	r23,0(r9)
   42fec:	4c800115 	stw	r18,4(r9)
   42ff0:	42000404 	addi	r8,r8,16
   42ff4:	18c00044 	addi	r3,r3,1
   42ff8:	da011d15 	stw	r8,1140(sp)
   42ffc:	d8c11c15 	stw	r3,1136(sp)
   43000:	98fff60e 	bge	r19,r3,42fdc <___vfprintf_internal_r+0xbf4>
   43004:	8809883a 	mov	r4,r17
   43008:	a00b883a 	mov	r5,r20
   4300c:	d9811b04 	addi	r6,sp,1132
   43010:	00423b40 	call	423b4 <__sprint_r>
   43014:	103e3a1e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   43018:	843ffc04 	addi	r16,r16,-16
   4301c:	da011d17 	ldw	r8,1140(sp)
   43020:	d8c11c17 	ldw	r3,1136(sp)
   43024:	da400404 	addi	r9,sp,16
   43028:	943fef16 	blt	r18,r16,42fe8 <___vfprintf_internal_r+0xc00>
   4302c:	4dc00015 	stw	r23,0(r9)
   43030:	4c000115 	stw	r16,4(r9)
   43034:	8211883a 	add	r8,r16,r8
   43038:	18c00044 	addi	r3,r3,1
   4303c:	da011d15 	stw	r8,1140(sp)
   43040:	d8c11c15 	stw	r3,1136(sp)
   43044:	008001c4 	movi	r2,7
   43048:	10c0060e 	bge	r2,r3,43064 <___vfprintf_internal_r+0xc7c>
   4304c:	d9412917 	ldw	r5,1188(sp)
   43050:	8809883a 	mov	r4,r17
   43054:	d9811b04 	addi	r6,sp,1132
   43058:	00423b40 	call	423b4 <__sprint_r>
   4305c:	103e281e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   43060:	da011d17 	ldw	r8,1140(sp)
   43064:	dd012817 	ldw	r20,1184(sp)
   43068:	d9012e17 	ldw	r4,1208(sp)
   4306c:	a100010e 	bge	r20,r4,43074 <___vfprintf_internal_r+0xc8c>
   43070:	2029883a 	mov	r20,r4
   43074:	d8812c17 	ldw	r2,1200(sp)
   43078:	1505883a 	add	r2,r2,r20
   4307c:	d8812c15 	stw	r2,1200(sp)
   43080:	4000b91e 	bne	r8,zero,43368 <___vfprintf_internal_r+0xf80>
   43084:	d8011c15 	stw	zero,1136(sp)
   43088:	a8800007 	ldb	r2,0(r21)
   4308c:	da400404 	addi	r9,sp,16
   43090:	103d0d1e 	bne	r2,zero,424c8 <___vfprintf_internal_r+0xe0>
   43094:	a825883a 	mov	r18,r21
   43098:	003d2306 	br	42528 <___vfprintf_internal_r+0x140>
   4309c:	d9412917 	ldw	r5,1188(sp)
   430a0:	8809883a 	mov	r4,r17
   430a4:	d9811b04 	addi	r6,sp,1132
   430a8:	00423b40 	call	423b4 <__sprint_r>
   430ac:	103e141e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   430b0:	da011d17 	ldw	r8,1140(sp)
   430b4:	da400404 	addi	r9,sp,16
   430b8:	8080004c 	andi	r2,r16,1
   430bc:	103fb926 	beq	r2,zero,42fa4 <___vfprintf_internal_r+0xbbc>
   430c0:	d8c11c17 	ldw	r3,1136(sp)
   430c4:	d9013717 	ldw	r4,1244(sp)
   430c8:	00800044 	movi	r2,1
   430cc:	48800115 	stw	r2,4(r9)
   430d0:	49000015 	stw	r4,0(r9)
   430d4:	4091883a 	add	r8,r8,r2
   430d8:	1887883a 	add	r3,r3,r2
   430dc:	da011d15 	stw	r8,1140(sp)
   430e0:	d8c11c15 	stw	r3,1136(sp)
   430e4:	008001c4 	movi	r2,7
   430e8:	10ffad0e 	bge	r2,r3,42fa0 <___vfprintf_internal_r+0xbb8>
   430ec:	d9412917 	ldw	r5,1188(sp)
   430f0:	8809883a 	mov	r4,r17
   430f4:	d9811b04 	addi	r6,sp,1132
   430f8:	00423b40 	call	423b4 <__sprint_r>
   430fc:	103e001e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   43100:	da400404 	addi	r9,sp,16
   43104:	da011d17 	ldw	r8,1140(sp)
   43108:	003fa606 	br	42fa4 <___vfprintf_internal_r+0xbbc>
   4310c:	18803fcc 	andi	r2,r3,255
   43110:	00c00044 	movi	r3,1
   43114:	10c10126 	beq	r2,r3,4351c <___vfprintf_internal_r+0x1134>
   43118:	00c00084 	movi	r3,2
   4311c:	10c0ed26 	beq	r2,r3,434d4 <___vfprintf_internal_r+0x10ec>
   43120:	d8c10dc4 	addi	r3,sp,1079
   43124:	b808d0fa 	srli	r4,r23,3
   43128:	b00a977a 	slli	r5,r22,29
   4312c:	b02cd0fa 	srli	r22,r22,3
   43130:	bdc001cc 	andi	r23,r23,7
   43134:	b8800c04 	addi	r2,r23,48
   43138:	292eb03a 	or	r23,r5,r4
   4313c:	18800005 	stb	r2,0(r3)
   43140:	bd88b03a 	or	r4,r23,r22
   43144:	1827883a 	mov	r19,r3
   43148:	18ffffc4 	addi	r3,r3,-1
   4314c:	203ff51e 	bne	r4,zero,43124 <___vfprintf_internal_r+0xd3c>
   43150:	8100004c 	andi	r4,r16,1
   43154:	980b883a 	mov	r5,r19
   43158:	20000726 	beq	r4,zero,43178 <___vfprintf_internal_r+0xd90>
   4315c:	10803fcc 	andi	r2,r2,255
   43160:	1080201c 	xori	r2,r2,128
   43164:	10bfe004 	addi	r2,r2,-128
   43168:	01000c04 	movi	r4,48
   4316c:	11000226 	beq	r2,r4,43178 <___vfprintf_internal_r+0xd90>
   43170:	1827883a 	mov	r19,r3
   43174:	293fffc5 	stb	r4,-1(r5)
   43178:	d8812717 	ldw	r2,1180(sp)
   4317c:	14c5c83a 	sub	r2,r2,r19
   43180:	d8812b15 	stw	r2,1196(sp)
   43184:	003e1f06 	br	42a04 <___vfprintf_internal_r+0x61c>
   43188:	00801944 	movi	r2,101
   4318c:	14807c0e 	bge	r2,r18,43380 <___vfprintf_internal_r+0xf98>
   43190:	d9013317 	ldw	r4,1228(sp)
   43194:	d9413417 	ldw	r5,1232(sp)
   43198:	000d883a 	mov	r6,zero
   4319c:	000f883a 	mov	r7,zero
   431a0:	d8c13b15 	stw	r3,1260(sp)
   431a4:	da013a15 	stw	r8,1256(sp)
   431a8:	da413c15 	stw	r9,1264(sp)
   431ac:	004a5080 	call	4a508 <__eqdf2>
   431b0:	d8c13b17 	ldw	r3,1260(sp)
   431b4:	da013a17 	ldw	r8,1256(sp)
   431b8:	da413c17 	ldw	r9,1264(sp)
   431bc:	1001001e 	bne	r2,zero,435c0 <___vfprintf_internal_r+0x11d8>
   431c0:	00800174 	movhi	r2,5
   431c4:	10b84704 	addi	r2,r2,-7908
   431c8:	48800015 	stw	r2,0(r9)
   431cc:	00800044 	movi	r2,1
   431d0:	48800115 	stw	r2,4(r9)
   431d4:	4091883a 	add	r8,r8,r2
   431d8:	1887883a 	add	r3,r3,r2
   431dc:	da011d15 	stw	r8,1140(sp)
   431e0:	d8c11c15 	stw	r3,1136(sp)
   431e4:	008001c4 	movi	r2,7
   431e8:	10c20316 	blt	r2,r3,439f8 <___vfprintf_internal_r+0x1610>
   431ec:	4a400204 	addi	r9,r9,8
   431f0:	d8812417 	ldw	r2,1168(sp)
   431f4:	d8c13217 	ldw	r3,1224(sp)
   431f8:	10c00216 	blt	r2,r3,43204 <___vfprintf_internal_r+0xe1c>
   431fc:	8080004c 	andi	r2,r16,1
   43200:	103f6826 	beq	r2,zero,42fa4 <___vfprintf_internal_r+0xbbc>
   43204:	d8c11c17 	ldw	r3,1136(sp)
   43208:	d9013717 	ldw	r4,1244(sp)
   4320c:	00800044 	movi	r2,1
   43210:	48800115 	stw	r2,4(r9)
   43214:	49000015 	stw	r4,0(r9)
   43218:	4091883a 	add	r8,r8,r2
   4321c:	1887883a 	add	r3,r3,r2
   43220:	da011d15 	stw	r8,1140(sp)
   43224:	d8c11c15 	stw	r3,1136(sp)
   43228:	008001c4 	movi	r2,7
   4322c:	10c2ce16 	blt	r2,r3,43d68 <___vfprintf_internal_r+0x1980>
   43230:	4a400204 	addi	r9,r9,8
   43234:	d8813217 	ldw	r2,1224(sp)
   43238:	14bfffc4 	addi	r18,r2,-1
   4323c:	04bf590e 	bge	zero,r18,42fa4 <___vfprintf_internal_r+0xbbc>
   43240:	04c00404 	movi	r19,16
   43244:	d8c11c17 	ldw	r3,1136(sp)
   43248:	05000174 	movhi	r20,5
   4324c:	a5384b84 	addi	r20,r20,-7890
   43250:	9c818a0e 	bge	r19,r18,4387c <___vfprintf_internal_r+0x1494>
   43254:	058001c4 	movi	r22,7
   43258:	ddc12917 	ldw	r23,1188(sp)
   4325c:	00000306 	br	4326c <___vfprintf_internal_r+0xe84>
   43260:	4a400204 	addi	r9,r9,8
   43264:	94bffc04 	addi	r18,r18,-16
   43268:	9c81840e 	bge	r19,r18,4387c <___vfprintf_internal_r+0x1494>
   4326c:	4d000015 	stw	r20,0(r9)
   43270:	4cc00115 	stw	r19,4(r9)
   43274:	42000404 	addi	r8,r8,16
   43278:	18c00044 	addi	r3,r3,1
   4327c:	da011d15 	stw	r8,1140(sp)
   43280:	d8c11c15 	stw	r3,1136(sp)
   43284:	b0fff60e 	bge	r22,r3,43260 <___vfprintf_internal_r+0xe78>
   43288:	8809883a 	mov	r4,r17
   4328c:	b80b883a 	mov	r5,r23
   43290:	d9811b04 	addi	r6,sp,1132
   43294:	00423b40 	call	423b4 <__sprint_r>
   43298:	103d991e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   4329c:	da011d17 	ldw	r8,1140(sp)
   432a0:	d8c11c17 	ldw	r3,1136(sp)
   432a4:	da400404 	addi	r9,sp,16
   432a8:	003fee06 	br	43264 <___vfprintf_internal_r+0xe7c>
   432ac:	d8812e17 	ldw	r2,1208(sp)
   432b0:	d9012817 	ldw	r4,1184(sp)
   432b4:	112fc83a 	sub	r23,r2,r4
   432b8:	05ff000e 	bge	zero,r23,42ebc <___vfprintf_internal_r+0xad4>
   432bc:	07000404 	movi	fp,16
   432c0:	05000174 	movhi	r20,5
   432c4:	a5384b84 	addi	r20,r20,-7890
   432c8:	e5c01d0e 	bge	fp,r23,43340 <___vfprintf_internal_r+0xf58>
   432cc:	dc812a15 	stw	r18,1192(sp)
   432d0:	058001c4 	movi	r22,7
   432d4:	a025883a 	mov	r18,r20
   432d8:	8029883a 	mov	r20,r16
   432dc:	dc012917 	ldw	r16,1188(sp)
   432e0:	00000306 	br	432f0 <___vfprintf_internal_r+0xf08>
   432e4:	bdfffc04 	addi	r23,r23,-16
   432e8:	4a400204 	addi	r9,r9,8
   432ec:	e5c0110e 	bge	fp,r23,43334 <___vfprintf_internal_r+0xf4c>
   432f0:	4c800015 	stw	r18,0(r9)
   432f4:	4f000115 	stw	fp,4(r9)
   432f8:	42000404 	addi	r8,r8,16
   432fc:	18c00044 	addi	r3,r3,1
   43300:	da011d15 	stw	r8,1140(sp)
   43304:	d8c11c15 	stw	r3,1136(sp)
   43308:	b0fff60e 	bge	r22,r3,432e4 <___vfprintf_internal_r+0xefc>
   4330c:	8809883a 	mov	r4,r17
   43310:	800b883a 	mov	r5,r16
   43314:	d9811b04 	addi	r6,sp,1132
   43318:	00423b40 	call	423b4 <__sprint_r>
   4331c:	103d781e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   43320:	bdfffc04 	addi	r23,r23,-16
   43324:	da011d17 	ldw	r8,1140(sp)
   43328:	d8c11c17 	ldw	r3,1136(sp)
   4332c:	da400404 	addi	r9,sp,16
   43330:	e5ffef16 	blt	fp,r23,432f0 <___vfprintf_internal_r+0xf08>
   43334:	a021883a 	mov	r16,r20
   43338:	9029883a 	mov	r20,r18
   4333c:	dc812a17 	ldw	r18,1192(sp)
   43340:	4d000015 	stw	r20,0(r9)
   43344:	4dc00115 	stw	r23,4(r9)
   43348:	45d1883a 	add	r8,r8,r23
   4334c:	18c00044 	addi	r3,r3,1
   43350:	da011d15 	stw	r8,1140(sp)
   43354:	d8c11c15 	stw	r3,1136(sp)
   43358:	008001c4 	movi	r2,7
   4335c:	10c13616 	blt	r2,r3,43838 <___vfprintf_internal_r+0x1450>
   43360:	4a400204 	addi	r9,r9,8
   43364:	003ed506 	br	42ebc <___vfprintf_internal_r+0xad4>
   43368:	d9412917 	ldw	r5,1188(sp)
   4336c:	8809883a 	mov	r4,r17
   43370:	d9811b04 	addi	r6,sp,1132
   43374:	00423b40 	call	423b4 <__sprint_r>
   43378:	103f4226 	beq	r2,zero,43084 <___vfprintf_internal_r+0xc9c>
   4337c:	003d6006 	br	42900 <___vfprintf_internal_r+0x518>
   43380:	d9013217 	ldw	r4,1224(sp)
   43384:	00800044 	movi	r2,1
   43388:	4cc00015 	stw	r19,0(r9)
   4338c:	1101000e 	bge	r2,r4,43790 <___vfprintf_internal_r+0x13a8>
   43390:	00800044 	movi	r2,1
   43394:	48800115 	stw	r2,4(r9)
   43398:	4091883a 	add	r8,r8,r2
   4339c:	1887883a 	add	r3,r3,r2
   433a0:	da011d15 	stw	r8,1140(sp)
   433a4:	d8c11c15 	stw	r3,1136(sp)
   433a8:	008001c4 	movi	r2,7
   433ac:	10c10c16 	blt	r2,r3,437e0 <___vfprintf_internal_r+0x13f8>
   433b0:	4a400204 	addi	r9,r9,8
   433b4:	d8813717 	ldw	r2,1244(sp)
   433b8:	48800015 	stw	r2,0(r9)
   433bc:	00800044 	movi	r2,1
   433c0:	48800115 	stw	r2,4(r9)
   433c4:	4091883a 	add	r8,r8,r2
   433c8:	1887883a 	add	r3,r3,r2
   433cc:	da011d15 	stw	r8,1140(sp)
   433d0:	d8c11c15 	stw	r3,1136(sp)
   433d4:	008001c4 	movi	r2,7
   433d8:	10c10a16 	blt	r2,r3,43804 <___vfprintf_internal_r+0x141c>
   433dc:	4c800204 	addi	r18,r9,8
   433e0:	d9013317 	ldw	r4,1228(sp)
   433e4:	d9413417 	ldw	r5,1232(sp)
   433e8:	000d883a 	mov	r6,zero
   433ec:	000f883a 	mov	r7,zero
   433f0:	d8c13b15 	stw	r3,1260(sp)
   433f4:	da013a15 	stw	r8,1256(sp)
   433f8:	004a5640 	call	4a564 <__nedf2>
   433fc:	d8c13b17 	ldw	r3,1260(sp)
   43400:	da013a17 	ldw	r8,1256(sp)
   43404:	1000ba26 	beq	r2,zero,436f0 <___vfprintf_internal_r+0x1308>
   43408:	d9013217 	ldw	r4,1224(sp)
   4340c:	9cc00044 	addi	r19,r19,1
   43410:	94c00015 	stw	r19,0(r18)
   43414:	20bfffc4 	addi	r2,r4,-1
   43418:	90800115 	stw	r2,4(r18)
   4341c:	4091883a 	add	r8,r8,r2
   43420:	18c00044 	addi	r3,r3,1
   43424:	da011d15 	stw	r8,1140(sp)
   43428:	d8c11c15 	stw	r3,1136(sp)
   4342c:	008001c4 	movi	r2,7
   43430:	10c0e216 	blt	r2,r3,437bc <___vfprintf_internal_r+0x13d4>
   43434:	94800204 	addi	r18,r18,8
   43438:	d9013517 	ldw	r4,1236(sp)
   4343c:	d8811fc4 	addi	r2,sp,1151
   43440:	90800015 	stw	r2,0(r18)
   43444:	91000115 	stw	r4,4(r18)
   43448:	4111883a 	add	r8,r8,r4
   4344c:	18c00044 	addi	r3,r3,1
   43450:	da011d15 	stw	r8,1140(sp)
   43454:	d8c11c15 	stw	r3,1136(sp)
   43458:	008001c4 	movi	r2,7
   4345c:	10ff2316 	blt	r2,r3,430ec <___vfprintf_internal_r+0xd04>
   43460:	92400204 	addi	r9,r18,8
   43464:	003ecf06 	br	42fa4 <___vfprintf_internal_r+0xbbc>
   43468:	d9412917 	ldw	r5,1188(sp)
   4346c:	8809883a 	mov	r4,r17
   43470:	d9811b04 	addi	r6,sp,1132
   43474:	00423b40 	call	423b4 <__sprint_r>
   43478:	103d211e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   4347c:	da011d17 	ldw	r8,1140(sp)
   43480:	d8c11c17 	ldw	r3,1136(sp)
   43484:	da400404 	addi	r9,sp,16
   43488:	003eba06 	br	42f74 <___vfprintf_internal_r+0xb8c>
   4348c:	d9412917 	ldw	r5,1188(sp)
   43490:	8809883a 	mov	r4,r17
   43494:	d9811b04 	addi	r6,sp,1132
   43498:	00423b40 	call	423b4 <__sprint_r>
   4349c:	103d181e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   434a0:	da011d17 	ldw	r8,1140(sp)
   434a4:	d8c11c17 	ldw	r3,1136(sp)
   434a8:	da400404 	addi	r9,sp,16
   434ac:	003e8006 	br	42eb0 <___vfprintf_internal_r+0xac8>
   434b0:	d9412917 	ldw	r5,1188(sp)
   434b4:	8809883a 	mov	r4,r17
   434b8:	d9811b04 	addi	r6,sp,1132
   434bc:	00423b40 	call	423b4 <__sprint_r>
   434c0:	103d0f1e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   434c4:	da011d17 	ldw	r8,1140(sp)
   434c8:	d8c11c17 	ldw	r3,1136(sp)
   434cc:	da400404 	addi	r9,sp,16
   434d0:	003e6a06 	br	42e7c <___vfprintf_internal_r+0xa94>
   434d4:	d9413617 	ldw	r5,1240(sp)
   434d8:	d8810dc4 	addi	r2,sp,1079
   434dc:	b8c003cc 	andi	r3,r23,15
   434e0:	b008973a 	slli	r4,r22,28
   434e4:	28c7883a 	add	r3,r5,r3
   434e8:	b82ed13a 	srli	r23,r23,4
   434ec:	18c00003 	ldbu	r3,0(r3)
   434f0:	b02cd13a 	srli	r22,r22,4
   434f4:	25eeb03a 	or	r23,r4,r23
   434f8:	10c00005 	stb	r3,0(r2)
   434fc:	bd86b03a 	or	r3,r23,r22
   43500:	1027883a 	mov	r19,r2
   43504:	10bfffc4 	addi	r2,r2,-1
   43508:	183ff41e 	bne	r3,zero,434dc <___vfprintf_internal_r+0x10f4>
   4350c:	003f1a06 	br	43178 <___vfprintf_internal_r+0xd90>
   43510:	d8012b15 	stw	zero,1196(sp)
   43514:	dcc10e04 	addi	r19,sp,1080
   43518:	003d3a06 	br	42a04 <___vfprintf_internal_r+0x61c>
   4351c:	b0025426 	beq	r22,zero,43e70 <___vfprintf_internal_r+0x1a88>
   43520:	b807883a 	mov	r3,r23
   43524:	d8810dc4 	addi	r2,sp,1079
   43528:	882f883a 	mov	r23,r17
   4352c:	04c00244 	movi	r19,9
   43530:	8023883a 	mov	r17,r16
   43534:	da412815 	stw	r9,1184(sp)
   43538:	1821883a 	mov	r16,r3
   4353c:	8009883a 	mov	r4,r16
   43540:	b00b883a 	mov	r5,r22
   43544:	01800284 	movi	r6,10
   43548:	000f883a 	mov	r7,zero
   4354c:	1029883a 	mov	r20,r2
   43550:	00496400 	call	49640 <__umoddi3>
   43554:	10800c04 	addi	r2,r2,48
   43558:	8009883a 	mov	r4,r16
   4355c:	b00b883a 	mov	r5,r22
   43560:	a0800005 	stb	r2,0(r20)
   43564:	01800284 	movi	r6,10
   43568:	000f883a 	mov	r7,zero
   4356c:	0048ff00 	call	48ff0 <__udivdi3>
   43570:	1021883a 	mov	r16,r2
   43574:	182d883a 	mov	r22,r3
   43578:	a0bfffc4 	addi	r2,r20,-1
   4357c:	183fef1e 	bne	r3,zero,4353c <___vfprintf_internal_r+0x1154>
   43580:	9c3fee36 	bltu	r19,r16,4353c <___vfprintf_internal_r+0x1154>
   43584:	da412817 	ldw	r9,1184(sp)
   43588:	8005883a 	mov	r2,r16
   4358c:	8821883a 	mov	r16,r17
   43590:	b823883a 	mov	r17,r23
   43594:	102f883a 	mov	r23,r2
   43598:	d8812717 	ldw	r2,1180(sp)
   4359c:	a4ffffc4 	addi	r19,r20,-1
   435a0:	bdc00c04 	addi	r23,r23,48
   435a4:	14c5c83a 	sub	r2,r2,r19
   435a8:	a5ffffc5 	stb	r23,-1(r20)
   435ac:	d8812b15 	stw	r2,1196(sp)
   435b0:	003d1406 	br	42a04 <___vfprintf_internal_r+0x61c>
   435b4:	00c00044 	movi	r3,1
   435b8:	bd84b03a 	or	r2,r23,r22
   435bc:	003d0306 	br	429cc <___vfprintf_internal_r+0x5e4>
   435c0:	dc812417 	ldw	r18,1168(sp)
   435c4:	0481140e 	bge	zero,r18,43a18 <___vfprintf_internal_r+0x1630>
   435c8:	d9013217 	ldw	r4,1224(sp)
   435cc:	4cc00015 	stw	r19,0(r9)
   435d0:	9100ec16 	blt	r18,r4,43984 <___vfprintf_internal_r+0x159c>
   435d4:	49000115 	stw	r4,4(r9)
   435d8:	4111883a 	add	r8,r8,r4
   435dc:	18c00044 	addi	r3,r3,1
   435e0:	da011d15 	stw	r8,1140(sp)
   435e4:	d8c11c15 	stw	r3,1136(sp)
   435e8:	008001c4 	movi	r2,7
   435ec:	10c23616 	blt	r2,r3,43ec8 <___vfprintf_internal_r+0x1ae0>
   435f0:	4a400204 	addi	r9,r9,8
   435f4:	d8813217 	ldw	r2,1224(sp)
   435f8:	90a5c83a 	sub	r18,r18,r2
   435fc:	04beae0e 	bge	zero,r18,430b8 <___vfprintf_internal_r+0xcd0>
   43600:	04c00404 	movi	r19,16
   43604:	d8c11c17 	ldw	r3,1136(sp)
   43608:	05000174 	movhi	r20,5
   4360c:	a5384b84 	addi	r20,r20,-7890
   43610:	9c81dd0e 	bge	r19,r18,43d88 <___vfprintf_internal_r+0x19a0>
   43614:	058001c4 	movi	r22,7
   43618:	ddc12917 	ldw	r23,1188(sp)
   4361c:	00000306 	br	4362c <___vfprintf_internal_r+0x1244>
   43620:	4a400204 	addi	r9,r9,8
   43624:	94bffc04 	addi	r18,r18,-16
   43628:	9c81d70e 	bge	r19,r18,43d88 <___vfprintf_internal_r+0x19a0>
   4362c:	4d000015 	stw	r20,0(r9)
   43630:	4cc00115 	stw	r19,4(r9)
   43634:	42000404 	addi	r8,r8,16
   43638:	18c00044 	addi	r3,r3,1
   4363c:	da011d15 	stw	r8,1140(sp)
   43640:	d8c11c15 	stw	r3,1136(sp)
   43644:	b0fff60e 	bge	r22,r3,43620 <___vfprintf_internal_r+0x1238>
   43648:	8809883a 	mov	r4,r17
   4364c:	b80b883a 	mov	r5,r23
   43650:	d9811b04 	addi	r6,sp,1132
   43654:	00423b40 	call	423b4 <__sprint_r>
   43658:	103ca91e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   4365c:	da011d17 	ldw	r8,1140(sp)
   43660:	d8c11c17 	ldw	r3,1136(sp)
   43664:	da400404 	addi	r9,sp,16
   43668:	003fee06 	br	43624 <___vfprintf_internal_r+0x123c>
   4366c:	d9412917 	ldw	r5,1188(sp)
   43670:	8809883a 	mov	r4,r17
   43674:	d9811b04 	addi	r6,sp,1132
   43678:	00423b40 	call	423b4 <__sprint_r>
   4367c:	103ca01e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   43680:	da011d17 	ldw	r8,1140(sp)
   43684:	d8c11c17 	ldw	r3,1136(sp)
   43688:	da400404 	addi	r9,sp,16
   4368c:	003dee06 	br	42e48 <___vfprintf_internal_r+0xa60>
   43690:	00c00084 	movi	r3,2
   43694:	bd84b03a 	or	r2,r23,r22
   43698:	d8012585 	stb	zero,1174(sp)
   4369c:	003ccb06 	br	429cc <___vfprintf_internal_r+0x5e4>
   436a0:	8080040c 	andi	r2,r16,16
   436a4:	1000ae26 	beq	r2,zero,43960 <___vfprintf_internal_r+0x1578>
   436a8:	d9012d17 	ldw	r4,1204(sp)
   436ac:	25c00017 	ldw	r23,0(r4)
   436b0:	21000104 	addi	r4,r4,4
   436b4:	d9012d15 	stw	r4,1204(sp)
   436b8:	b82dd7fa 	srai	r22,r23,31
   436bc:	b005883a 	mov	r2,r22
   436c0:	003cb906 	br	429a8 <___vfprintf_internal_r+0x5c0>
   436c4:	8080040c 	andi	r2,r16,16
   436c8:	10007026 	beq	r2,zero,4388c <___vfprintf_internal_r+0x14a4>
   436cc:	d8812d17 	ldw	r2,1204(sp)
   436d0:	002d883a 	mov	r22,zero
   436d4:	00c00044 	movi	r3,1
   436d8:	15c00017 	ldw	r23,0(r2)
   436dc:	10800104 	addi	r2,r2,4
   436e0:	d8812d15 	stw	r2,1204(sp)
   436e4:	d8012585 	stb	zero,1174(sp)
   436e8:	b805883a 	mov	r2,r23
   436ec:	003cb706 	br	429cc <___vfprintf_internal_r+0x5e4>
   436f0:	d8813217 	ldw	r2,1224(sp)
   436f4:	14ffffc4 	addi	r19,r2,-1
   436f8:	04ff4f0e 	bge	zero,r19,43438 <___vfprintf_internal_r+0x1050>
   436fc:	05800404 	movi	r22,16
   43700:	05000174 	movhi	r20,5
   43704:	a5384b84 	addi	r20,r20,-7890
   43708:	b4c0470e 	bge	r22,r19,43828 <___vfprintf_internal_r+0x1440>
   4370c:	05c001c4 	movi	r23,7
   43710:	df012917 	ldw	fp,1188(sp)
   43714:	00000306 	br	43724 <___vfprintf_internal_r+0x133c>
   43718:	94800204 	addi	r18,r18,8
   4371c:	9cfffc04 	addi	r19,r19,-16
   43720:	b4c0410e 	bge	r22,r19,43828 <___vfprintf_internal_r+0x1440>
   43724:	95000015 	stw	r20,0(r18)
   43728:	95800115 	stw	r22,4(r18)
   4372c:	42000404 	addi	r8,r8,16
   43730:	18c00044 	addi	r3,r3,1
   43734:	da011d15 	stw	r8,1140(sp)
   43738:	d8c11c15 	stw	r3,1136(sp)
   4373c:	b8fff60e 	bge	r23,r3,43718 <___vfprintf_internal_r+0x1330>
   43740:	8809883a 	mov	r4,r17
   43744:	e00b883a 	mov	r5,fp
   43748:	d9811b04 	addi	r6,sp,1132
   4374c:	00423b40 	call	423b4 <__sprint_r>
   43750:	103c6b1e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   43754:	da011d17 	ldw	r8,1140(sp)
   43758:	d8c11c17 	ldw	r3,1136(sp)
   4375c:	dc800404 	addi	r18,sp,16
   43760:	003fee06 	br	4371c <___vfprintf_internal_r+0x1334>
   43764:	8080040c 	andi	r2,r16,16
   43768:	10005326 	beq	r2,zero,438b8 <___vfprintf_internal_r+0x14d0>
   4376c:	d8c12d17 	ldw	r3,1204(sp)
   43770:	002d883a 	mov	r22,zero
   43774:	1dc00017 	ldw	r23,0(r3)
   43778:	18c00104 	addi	r3,r3,4
   4377c:	d8c12d15 	stw	r3,1204(sp)
   43780:	b805883a 	mov	r2,r23
   43784:	0007883a 	mov	r3,zero
   43788:	d8012585 	stb	zero,1174(sp)
   4378c:	003c8f06 	br	429cc <___vfprintf_internal_r+0x5e4>
   43790:	8088703a 	and	r4,r16,r2
   43794:	203efe1e 	bne	r4,zero,43390 <___vfprintf_internal_r+0xfa8>
   43798:	48800115 	stw	r2,4(r9)
   4379c:	42000044 	addi	r8,r8,1
   437a0:	18c00044 	addi	r3,r3,1
   437a4:	da011d15 	stw	r8,1140(sp)
   437a8:	d8c11c15 	stw	r3,1136(sp)
   437ac:	008001c4 	movi	r2,7
   437b0:	10c00216 	blt	r2,r3,437bc <___vfprintf_internal_r+0x13d4>
   437b4:	4c800204 	addi	r18,r9,8
   437b8:	003f1f06 	br	43438 <___vfprintf_internal_r+0x1050>
   437bc:	d9412917 	ldw	r5,1188(sp)
   437c0:	8809883a 	mov	r4,r17
   437c4:	d9811b04 	addi	r6,sp,1132
   437c8:	00423b40 	call	423b4 <__sprint_r>
   437cc:	103c4c1e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   437d0:	dc800404 	addi	r18,sp,16
   437d4:	da011d17 	ldw	r8,1140(sp)
   437d8:	d8c11c17 	ldw	r3,1136(sp)
   437dc:	003f1606 	br	43438 <___vfprintf_internal_r+0x1050>
   437e0:	d9412917 	ldw	r5,1188(sp)
   437e4:	8809883a 	mov	r4,r17
   437e8:	d9811b04 	addi	r6,sp,1132
   437ec:	00423b40 	call	423b4 <__sprint_r>
   437f0:	103c431e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   437f4:	da011d17 	ldw	r8,1140(sp)
   437f8:	d8c11c17 	ldw	r3,1136(sp)
   437fc:	da400404 	addi	r9,sp,16
   43800:	003eec06 	br	433b4 <___vfprintf_internal_r+0xfcc>
   43804:	d9412917 	ldw	r5,1188(sp)
   43808:	8809883a 	mov	r4,r17
   4380c:	d9811b04 	addi	r6,sp,1132
   43810:	00423b40 	call	423b4 <__sprint_r>
   43814:	103c3a1e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   43818:	da011d17 	ldw	r8,1140(sp)
   4381c:	d8c11c17 	ldw	r3,1136(sp)
   43820:	dc800404 	addi	r18,sp,16
   43824:	003eee06 	br	433e0 <___vfprintf_internal_r+0xff8>
   43828:	95000015 	stw	r20,0(r18)
   4382c:	94c00115 	stw	r19,4(r18)
   43830:	44d1883a 	add	r8,r8,r19
   43834:	003efa06 	br	43420 <___vfprintf_internal_r+0x1038>
   43838:	d9412917 	ldw	r5,1188(sp)
   4383c:	8809883a 	mov	r4,r17
   43840:	d9811b04 	addi	r6,sp,1132
   43844:	00423b40 	call	423b4 <__sprint_r>
   43848:	103c2d1e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   4384c:	da011d17 	ldw	r8,1140(sp)
   43850:	d8c11c17 	ldw	r3,1136(sp)
   43854:	da400404 	addi	r9,sp,16
   43858:	003d9806 	br	42ebc <___vfprintf_internal_r+0xad4>
   4385c:	8080100c 	andi	r2,r16,64
   43860:	10011626 	beq	r2,zero,43cbc <___vfprintf_internal_r+0x18d4>
   43864:	d8c12d17 	ldw	r3,1204(sp)
   43868:	002d883a 	mov	r22,zero
   4386c:	1dc0000b 	ldhu	r23,0(r3)
   43870:	18c00104 	addi	r3,r3,4
   43874:	d8c12d15 	stw	r3,1204(sp)
   43878:	003cc106 	br	42b80 <___vfprintf_internal_r+0x798>
   4387c:	4d000015 	stw	r20,0(r9)
   43880:	4c800115 	stw	r18,4(r9)
   43884:	4491883a 	add	r8,r8,r18
   43888:	003dc006 	br	42f8c <___vfprintf_internal_r+0xba4>
   4388c:	8080100c 	andi	r2,r16,64
   43890:	10010126 	beq	r2,zero,43c98 <___vfprintf_internal_r+0x18b0>
   43894:	d8c12d17 	ldw	r3,1204(sp)
   43898:	002d883a 	mov	r22,zero
   4389c:	1dc0000b 	ldhu	r23,0(r3)
   438a0:	18c00104 	addi	r3,r3,4
   438a4:	d8c12d15 	stw	r3,1204(sp)
   438a8:	b805883a 	mov	r2,r23
   438ac:	00c00044 	movi	r3,1
   438b0:	d8012585 	stb	zero,1174(sp)
   438b4:	003c4506 	br	429cc <___vfprintf_internal_r+0x5e4>
   438b8:	8080100c 	andi	r2,r16,64
   438bc:	10010526 	beq	r2,zero,43cd4 <___vfprintf_internal_r+0x18ec>
   438c0:	d9012d17 	ldw	r4,1204(sp)
   438c4:	002d883a 	mov	r22,zero
   438c8:	0007883a 	mov	r3,zero
   438cc:	25c0000b 	ldhu	r23,0(r4)
   438d0:	21000104 	addi	r4,r4,4
   438d4:	d9012d15 	stw	r4,1204(sp)
   438d8:	b805883a 	mov	r2,r23
   438dc:	d8012585 	stb	zero,1174(sp)
   438e0:	003c3a06 	br	429cc <___vfprintf_internal_r+0x5e4>
   438e4:	d8812d17 	ldw	r2,1204(sp)
   438e8:	15800017 	ldw	r22,0(r2)
   438ec:	15000117 	ldw	r20,4(r2)
   438f0:	10800204 	addi	r2,r2,8
   438f4:	d8812d15 	stw	r2,1204(sp)
   438f8:	dd813315 	stw	r22,1228(sp)
   438fc:	dd013415 	stw	r20,1232(sp)
   43900:	003c5906 	br	42a68 <___vfprintf_internal_r+0x680>
   43904:	00c00084 	movi	r3,2
   43908:	d8012585 	stb	zero,1174(sp)
   4390c:	003c2f06 	br	429cc <___vfprintf_internal_r+0x5e4>
   43910:	ac800007 	ldb	r18,0(r21)
   43914:	003b1006 	br	42558 <___vfprintf_internal_r+0x170>
   43918:	8080040c 	andi	r2,r16,16
   4391c:	1000091e 	bne	r2,zero,43944 <___vfprintf_internal_r+0x155c>
   43920:	8400100c 	andi	r16,r16,64
   43924:	80000726 	beq	r16,zero,43944 <___vfprintf_internal_r+0x155c>
   43928:	d8c12d17 	ldw	r3,1204(sp)
   4392c:	d9012c17 	ldw	r4,1200(sp)
   43930:	18800017 	ldw	r2,0(r3)
   43934:	18c00104 	addi	r3,r3,4
   43938:	d8c12d15 	stw	r3,1204(sp)
   4393c:	1100000d 	sth	r4,0(r2)
   43940:	003adf06 	br	424c0 <___vfprintf_internal_r+0xd8>
   43944:	d8c12d17 	ldw	r3,1204(sp)
   43948:	d9012c17 	ldw	r4,1200(sp)
   4394c:	18800017 	ldw	r2,0(r3)
   43950:	18c00104 	addi	r3,r3,4
   43954:	d8c12d15 	stw	r3,1204(sp)
   43958:	11000015 	stw	r4,0(r2)
   4395c:	003ad806 	br	424c0 <___vfprintf_internal_r+0xd8>
   43960:	8080100c 	andi	r2,r16,64
   43964:	1000c526 	beq	r2,zero,43c7c <___vfprintf_internal_r+0x1894>
   43968:	d8812d17 	ldw	r2,1204(sp)
   4396c:	15c0000f 	ldh	r23,0(r2)
   43970:	10800104 	addi	r2,r2,4
   43974:	d8812d15 	stw	r2,1204(sp)
   43978:	b82dd7fa 	srai	r22,r23,31
   4397c:	b005883a 	mov	r2,r22
   43980:	003c0906 	br	429a8 <___vfprintf_internal_r+0x5c0>
   43984:	4c800115 	stw	r18,4(r9)
   43988:	9211883a 	add	r8,r18,r8
   4398c:	18c00044 	addi	r3,r3,1
   43990:	da011d15 	stw	r8,1140(sp)
   43994:	d8c11c15 	stw	r3,1136(sp)
   43998:	008001c4 	movi	r2,7
   4399c:	10c14016 	blt	r2,r3,43ea0 <___vfprintf_internal_r+0x1ab8>
   439a0:	4a400204 	addi	r9,r9,8
   439a4:	d8813717 	ldw	r2,1244(sp)
   439a8:	9ca7883a 	add	r19,r19,r18
   439ac:	48800015 	stw	r2,0(r9)
   439b0:	00800044 	movi	r2,1
   439b4:	48800115 	stw	r2,4(r9)
   439b8:	4091883a 	add	r8,r8,r2
   439bc:	1887883a 	add	r3,r3,r2
   439c0:	da011d15 	stw	r8,1140(sp)
   439c4:	d8c11c15 	stw	r3,1136(sp)
   439c8:	008001c4 	movi	r2,7
   439cc:	10c12c16 	blt	r2,r3,43e80 <___vfprintf_internal_r+0x1a98>
   439d0:	4a400204 	addi	r9,r9,8
   439d4:	d9013217 	ldw	r4,1224(sp)
   439d8:	da011d17 	ldw	r8,1140(sp)
   439dc:	d8c11c17 	ldw	r3,1136(sp)
   439e0:	24a5c83a 	sub	r18,r4,r18
   439e4:	4cc00015 	stw	r19,0(r9)
   439e8:	003fa506 	br	43880 <___vfprintf_internal_r+0x1498>
   439ec:	04c00174 	movhi	r19,5
   439f0:	9cf83804 	addi	r19,r19,-7968
   439f4:	003c2e06 	br	42ab0 <___vfprintf_internal_r+0x6c8>
   439f8:	d9412917 	ldw	r5,1188(sp)
   439fc:	8809883a 	mov	r4,r17
   43a00:	d9811b04 	addi	r6,sp,1132
   43a04:	00423b40 	call	423b4 <__sprint_r>
   43a08:	103bbd1e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   43a0c:	da011d17 	ldw	r8,1140(sp)
   43a10:	da400404 	addi	r9,sp,16
   43a14:	003df606 	br	431f0 <___vfprintf_internal_r+0xe08>
   43a18:	00800174 	movhi	r2,5
   43a1c:	10b84704 	addi	r2,r2,-7908
   43a20:	48800015 	stw	r2,0(r9)
   43a24:	00800044 	movi	r2,1
   43a28:	48800115 	stw	r2,4(r9)
   43a2c:	4091883a 	add	r8,r8,r2
   43a30:	1887883a 	add	r3,r3,r2
   43a34:	da011d15 	stw	r8,1140(sp)
   43a38:	d8c11c15 	stw	r3,1136(sp)
   43a3c:	008001c4 	movi	r2,7
   43a40:	10c0bc16 	blt	r2,r3,43d34 <___vfprintf_internal_r+0x194c>
   43a44:	4a400204 	addi	r9,r9,8
   43a48:	9000041e 	bne	r18,zero,43a5c <___vfprintf_internal_r+0x1674>
   43a4c:	d8c13217 	ldw	r3,1224(sp)
   43a50:	1800021e 	bne	r3,zero,43a5c <___vfprintf_internal_r+0x1674>
   43a54:	8080004c 	andi	r2,r16,1
   43a58:	103d5226 	beq	r2,zero,42fa4 <___vfprintf_internal_r+0xbbc>
   43a5c:	d8c11c17 	ldw	r3,1136(sp)
   43a60:	d9013717 	ldw	r4,1244(sp)
   43a64:	00800044 	movi	r2,1
   43a68:	48800115 	stw	r2,4(r9)
   43a6c:	49000015 	stw	r4,0(r9)
   43a70:	4091883a 	add	r8,r8,r2
   43a74:	1887883a 	add	r3,r3,r2
   43a78:	da011d15 	stw	r8,1140(sp)
   43a7c:	d8c11c15 	stw	r3,1136(sp)
   43a80:	008001c4 	movi	r2,7
   43a84:	10c14516 	blt	r2,r3,43f9c <___vfprintf_internal_r+0x1bb4>
   43a88:	4a400204 	addi	r9,r9,8
   43a8c:	04a5c83a 	sub	r18,zero,r18
   43a90:	0480d70e 	bge	zero,r18,43df0 <___vfprintf_internal_r+0x1a08>
   43a94:	05800404 	movi	r22,16
   43a98:	05000174 	movhi	r20,5
   43a9c:	a5384b84 	addi	r20,r20,-7890
   43aa0:	b480db0e 	bge	r22,r18,43e10 <___vfprintf_internal_r+0x1a28>
   43aa4:	05c001c4 	movi	r23,7
   43aa8:	df012917 	ldw	fp,1188(sp)
   43aac:	00000306 	br	43abc <___vfprintf_internal_r+0x16d4>
   43ab0:	4a400204 	addi	r9,r9,8
   43ab4:	94bffc04 	addi	r18,r18,-16
   43ab8:	b480d50e 	bge	r22,r18,43e10 <___vfprintf_internal_r+0x1a28>
   43abc:	4d000015 	stw	r20,0(r9)
   43ac0:	4d800115 	stw	r22,4(r9)
   43ac4:	42000404 	addi	r8,r8,16
   43ac8:	18c00044 	addi	r3,r3,1
   43acc:	da011d15 	stw	r8,1140(sp)
   43ad0:	d8c11c15 	stw	r3,1136(sp)
   43ad4:	b8fff60e 	bge	r23,r3,43ab0 <___vfprintf_internal_r+0x16c8>
   43ad8:	8809883a 	mov	r4,r17
   43adc:	e00b883a 	mov	r5,fp
   43ae0:	d9811b04 	addi	r6,sp,1132
   43ae4:	00423b40 	call	423b4 <__sprint_r>
   43ae8:	103b851e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   43aec:	da011d17 	ldw	r8,1140(sp)
   43af0:	d8c11c17 	ldw	r3,1136(sp)
   43af4:	da400404 	addi	r9,sp,16
   43af8:	003fee06 	br	43ab4 <___vfprintf_internal_r+0x16cc>
   43afc:	da413c15 	stw	r9,1264(sp)
   43b00:	00489500 	call	48950 <__isnand>
   43b04:	da413c17 	ldw	r9,1264(sp)
   43b08:	10007e1e 	bne	r2,zero,43d04 <___vfprintf_internal_r+0x191c>
   43b0c:	00bfffc4 	movi	r2,-1
   43b10:	e0816a26 	beq	fp,r2,440bc <___vfprintf_internal_r+0x1cd4>
   43b14:	008019c4 	movi	r2,103
   43b18:	90816526 	beq	r18,r2,440b0 <___vfprintf_internal_r+0x1cc8>
   43b1c:	008011c4 	movi	r2,71
   43b20:	90816326 	beq	r18,r2,440b0 <___vfprintf_internal_r+0x1cc8>
   43b24:	80c04014 	ori	r3,r16,256
   43b28:	d8c12a15 	stw	r3,1192(sp)
   43b2c:	a0016516 	blt	r20,zero,440c4 <___vfprintf_internal_r+0x1cdc>
   43b30:	d8012f05 	stb	zero,1212(sp)
   43b34:	00801984 	movi	r2,102
   43b38:	9080f226 	beq	r18,r2,43f04 <___vfprintf_internal_r+0x1b1c>
   43b3c:	00801184 	movi	r2,70
   43b40:	9080f026 	beq	r18,r2,43f04 <___vfprintf_internal_r+0x1b1c>
   43b44:	00801944 	movi	r2,101
   43b48:	90818d26 	beq	r18,r2,44180 <___vfprintf_internal_r+0x1d98>
   43b4c:	00801144 	movi	r2,69
   43b50:	90818b26 	beq	r18,r2,44180 <___vfprintf_internal_r+0x1d98>
   43b54:	e02f883a 	mov	r23,fp
   43b58:	d8812404 	addi	r2,sp,1168
   43b5c:	d8800115 	stw	r2,4(sp)
   43b60:	d8812304 	addi	r2,sp,1164
   43b64:	d8800215 	stw	r2,8(sp)
   43b68:	d8812204 	addi	r2,sp,1160
   43b6c:	ddc00015 	stw	r23,0(sp)
   43b70:	d8800315 	stw	r2,12(sp)
   43b74:	8809883a 	mov	r4,r17
   43b78:	b00b883a 	mov	r5,r22
   43b7c:	a00d883a 	mov	r6,r20
   43b80:	01c00084 	movi	r7,2
   43b84:	da413c15 	stw	r9,1264(sp)
   43b88:	00446380 	call	44638 <_dtoa_r>
   43b8c:	1027883a 	mov	r19,r2
   43b90:	008019c4 	movi	r2,103
   43b94:	da413c17 	ldw	r9,1264(sp)
   43b98:	9081951e 	bne	r18,r2,441f0 <___vfprintf_internal_r+0x1e08>
   43b9c:	8080004c 	andi	r2,r16,1
   43ba0:	10017926 	beq	r2,zero,44188 <___vfprintf_internal_r+0x1da0>
   43ba4:	00801184 	movi	r2,70
   43ba8:	9dc7883a 	add	r3,r19,r23
   43bac:	9080e626 	beq	r18,r2,43f48 <___vfprintf_internal_r+0x1b60>
   43bb0:	b009883a 	mov	r4,r22
   43bb4:	a00b883a 	mov	r5,r20
   43bb8:	000d883a 	mov	r6,zero
   43bbc:	000f883a 	mov	r7,zero
   43bc0:	d8c13b15 	stw	r3,1260(sp)
   43bc4:	da413c15 	stw	r9,1264(sp)
   43bc8:	004a5080 	call	4a508 <__eqdf2>
   43bcc:	d8c13b17 	ldw	r3,1260(sp)
   43bd0:	da413c17 	ldw	r9,1264(sp)
   43bd4:	10000726 	beq	r2,zero,43bf4 <___vfprintf_internal_r+0x180c>
   43bd8:	d8812217 	ldw	r2,1160(sp)
   43bdc:	10c18a2e 	bgeu	r2,r3,44208 <___vfprintf_internal_r+0x1e20>
   43be0:	01000c04 	movi	r4,48
   43be4:	11000005 	stb	r4,0(r2)
   43be8:	10800044 	addi	r2,r2,1
   43bec:	d8812215 	stw	r2,1160(sp)
   43bf0:	10fffc1e 	bne	r2,r3,43be4 <___vfprintf_internal_r+0x17fc>
   43bf4:	1cc7c83a 	sub	r3,r3,r19
   43bf8:	d8c13215 	stw	r3,1224(sp)
   43bfc:	008019c4 	movi	r2,103
   43c00:	9080fa26 	beq	r18,r2,43fec <___vfprintf_internal_r+0x1c04>
   43c04:	008011c4 	movi	r2,71
   43c08:	9080f826 	beq	r18,r2,43fec <___vfprintf_internal_r+0x1c04>
   43c0c:	00801984 	movi	r2,102
   43c10:	90818e1e 	bne	r18,r2,4424c <___vfprintf_internal_r+0x1e64>
   43c14:	d8812417 	ldw	r2,1168(sp)
   43c18:	d8812b15 	stw	r2,1196(sp)
   43c1c:	00817c0e 	bge	zero,r2,44210 <___vfprintf_internal_r+0x1e28>
   43c20:	e000021e 	bne	fp,zero,43c2c <___vfprintf_internal_r+0x1844>
   43c24:	8400004c 	andi	r16,r16,1
   43c28:	80000426 	beq	r16,zero,43c3c <___vfprintf_internal_r+0x1854>
   43c2c:	d8812b17 	ldw	r2,1196(sp)
   43c30:	e2000044 	addi	r8,fp,1
   43c34:	1205883a 	add	r2,r2,r8
   43c38:	d8812b15 	stw	r2,1196(sp)
   43c3c:	d8812815 	stw	r2,1184(sp)
   43c40:	10010b16 	blt	r2,zero,44070 <___vfprintf_internal_r+0x1c88>
   43c44:	ddc12f07 	ldb	r23,1212(sp)
   43c48:	b800e426 	beq	r23,zero,43fdc <___vfprintf_internal_r+0x1bf4>
   43c4c:	00800b44 	movi	r2,45
   43c50:	d8812585 	stb	r2,1174(sp)
   43c54:	dc012a17 	ldw	r16,1192(sp)
   43c58:	d8013115 	stw	zero,1220(sp)
   43c5c:	003b7306 	br	42a2c <___vfprintf_internal_r+0x644>
   43c60:	d8812b17 	ldw	r2,1196(sp)
   43c64:	d8812815 	stw	r2,1184(sp)
   43c68:	10005716 	blt	r2,zero,43dc8 <___vfprintf_internal_r+0x19e0>
   43c6c:	d8812583 	ldbu	r2,1174(sp)
   43c70:	ddc12d15 	stw	r23,1204(sp)
   43c74:	d8013115 	stw	zero,1220(sp)
   43c78:	003b6806 	br	42a1c <___vfprintf_internal_r+0x634>
   43c7c:	d8c12d17 	ldw	r3,1204(sp)
   43c80:	1dc00017 	ldw	r23,0(r3)
   43c84:	18c00104 	addi	r3,r3,4
   43c88:	d8c12d15 	stw	r3,1204(sp)
   43c8c:	b82dd7fa 	srai	r22,r23,31
   43c90:	b005883a 	mov	r2,r22
   43c94:	003b4406 	br	429a8 <___vfprintf_internal_r+0x5c0>
   43c98:	d9012d17 	ldw	r4,1204(sp)
   43c9c:	002d883a 	mov	r22,zero
   43ca0:	00c00044 	movi	r3,1
   43ca4:	25c00017 	ldw	r23,0(r4)
   43ca8:	21000104 	addi	r4,r4,4
   43cac:	d9012d15 	stw	r4,1204(sp)
   43cb0:	b805883a 	mov	r2,r23
   43cb4:	d8012585 	stb	zero,1174(sp)
   43cb8:	003b4406 	br	429cc <___vfprintf_internal_r+0x5e4>
   43cbc:	d9012d17 	ldw	r4,1204(sp)
   43cc0:	002d883a 	mov	r22,zero
   43cc4:	25c00017 	ldw	r23,0(r4)
   43cc8:	21000104 	addi	r4,r4,4
   43ccc:	d9012d15 	stw	r4,1204(sp)
   43cd0:	003bab06 	br	42b80 <___vfprintf_internal_r+0x798>
   43cd4:	d8812d17 	ldw	r2,1204(sp)
   43cd8:	002d883a 	mov	r22,zero
   43cdc:	0007883a 	mov	r3,zero
   43ce0:	15c00017 	ldw	r23,0(r2)
   43ce4:	10800104 	addi	r2,r2,4
   43ce8:	d8812d15 	stw	r2,1204(sp)
   43cec:	d8012585 	stb	zero,1174(sp)
   43cf0:	b805883a 	mov	r2,r23
   43cf4:	003b3506 	br	429cc <___vfprintf_internal_r+0x5e4>
   43cf8:	00ffffc4 	movi	r3,-1
   43cfc:	b82b883a 	mov	r21,r23
   43d00:	003a1606 	br	4255c <___vfprintf_internal_r+0x174>
   43d04:	008011c4 	movi	r2,71
   43d08:	1480b116 	blt	r2,r18,43fd0 <___vfprintf_internal_r+0x1be8>
   43d0c:	04c00174 	movhi	r19,5
   43d10:	9cf83904 	addi	r19,r19,-7964
   43d14:	00c000c4 	movi	r3,3
   43d18:	00bfdfc4 	movi	r2,-129
   43d1c:	80a0703a 	and	r16,r16,r2
   43d20:	d8c12815 	stw	r3,1184(sp)
   43d24:	d8812583 	ldbu	r2,1174(sp)
   43d28:	d8c12b15 	stw	r3,1196(sp)
   43d2c:	d8013115 	stw	zero,1220(sp)
   43d30:	003b3a06 	br	42a1c <___vfprintf_internal_r+0x634>
   43d34:	d9412917 	ldw	r5,1188(sp)
   43d38:	8809883a 	mov	r4,r17
   43d3c:	d9811b04 	addi	r6,sp,1132
   43d40:	00423b40 	call	423b4 <__sprint_r>
   43d44:	103aee1e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   43d48:	dc812417 	ldw	r18,1168(sp)
   43d4c:	da011d17 	ldw	r8,1140(sp)
   43d50:	da400404 	addi	r9,sp,16
   43d54:	003f3c06 	br	43a48 <___vfprintf_internal_r+0x1660>
   43d58:	ad400044 	addi	r21,r21,1
   43d5c:	84000814 	ori	r16,r16,32
   43d60:	14800047 	ldb	r18,1(r2)
   43d64:	0039fc06 	br	42558 <___vfprintf_internal_r+0x170>
   43d68:	d9412917 	ldw	r5,1188(sp)
   43d6c:	8809883a 	mov	r4,r17
   43d70:	d9811b04 	addi	r6,sp,1132
   43d74:	00423b40 	call	423b4 <__sprint_r>
   43d78:	103ae11e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   43d7c:	da011d17 	ldw	r8,1140(sp)
   43d80:	da400404 	addi	r9,sp,16
   43d84:	003d2b06 	br	43234 <___vfprintf_internal_r+0xe4c>
   43d88:	4d000015 	stw	r20,0(r9)
   43d8c:	4c800115 	stw	r18,4(r9)
   43d90:	4491883a 	add	r8,r8,r18
   43d94:	18c00044 	addi	r3,r3,1
   43d98:	da011d15 	stw	r8,1140(sp)
   43d9c:	d8c11c15 	stw	r3,1136(sp)
   43da0:	008001c4 	movi	r2,7
   43da4:	10fcbd16 	blt	r2,r3,4309c <___vfprintf_internal_r+0xcb4>
   43da8:	4a400204 	addi	r9,r9,8
   43dac:	003cc206 	br	430b8 <___vfprintf_internal_r+0xcd0>
   43db0:	da413c15 	stw	r9,1264(sp)
   43db4:	00423280 	call	42328 <strlen>
   43db8:	d8812b15 	stw	r2,1196(sp)
   43dbc:	d8812815 	stw	r2,1184(sp)
   43dc0:	da413c17 	ldw	r9,1264(sp)
   43dc4:	103fa90e 	bge	r2,zero,43c6c <___vfprintf_internal_r+0x1884>
   43dc8:	d8012815 	stw	zero,1184(sp)
   43dcc:	003fa706 	br	43c6c <___vfprintf_internal_r+0x1884>
   43dd0:	d9412917 	ldw	r5,1188(sp)
   43dd4:	8809883a 	mov	r4,r17
   43dd8:	d9811b04 	addi	r6,sp,1132
   43ddc:	00423b40 	call	423b4 <__sprint_r>
   43de0:	103ac71e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   43de4:	da011d17 	ldw	r8,1140(sp)
   43de8:	d8c11c17 	ldw	r3,1136(sp)
   43dec:	da400404 	addi	r9,sp,16
   43df0:	d8813217 	ldw	r2,1224(sp)
   43df4:	4cc00015 	stw	r19,0(r9)
   43df8:	48800115 	stw	r2,4(r9)
   43dfc:	4091883a 	add	r8,r8,r2
   43e00:	003c6206 	br	42f8c <___vfprintf_internal_r+0xba4>
   43e04:	00800b44 	movi	r2,45
   43e08:	d8812585 	stb	r2,1174(sp)
   43e0c:	003b2406 	br	42aa0 <___vfprintf_internal_r+0x6b8>
   43e10:	4d000015 	stw	r20,0(r9)
   43e14:	4c800115 	stw	r18,4(r9)
   43e18:	4491883a 	add	r8,r8,r18
   43e1c:	18c00044 	addi	r3,r3,1
   43e20:	da011d15 	stw	r8,1140(sp)
   43e24:	d8c11c15 	stw	r3,1136(sp)
   43e28:	008001c4 	movi	r2,7
   43e2c:	10ffe816 	blt	r2,r3,43dd0 <___vfprintf_internal_r+0x19e8>
   43e30:	4a400204 	addi	r9,r9,8
   43e34:	003fee06 	br	43df0 <___vfprintf_internal_r+0x1a08>
   43e38:	d8c12b15 	stw	r3,1196(sp)
   43e3c:	00800184 	movi	r2,6
   43e40:	10c0062e 	bgeu	r2,r3,43e5c <___vfprintf_internal_r+0x1a74>
   43e44:	d8812b15 	stw	r2,1196(sp)
   43e48:	d8812815 	stw	r2,1184(sp)
   43e4c:	ddc12d15 	stw	r23,1204(sp)
   43e50:	04c00174 	movhi	r19,5
   43e54:	9cf84504 	addi	r19,r19,-7916
   43e58:	0039ca06 	br	42584 <___vfprintf_internal_r+0x19c>
   43e5c:	d8812b17 	ldw	r2,1196(sp)
   43e60:	d8812815 	stw	r2,1184(sp)
   43e64:	103ff90e 	bge	r2,zero,43e4c <___vfprintf_internal_r+0x1a64>
   43e68:	d8012815 	stw	zero,1184(sp)
   43e6c:	003ff706 	br	43e4c <___vfprintf_internal_r+0x1a64>
   43e70:	00800244 	movi	r2,9
   43e74:	15fdaa36 	bltu	r2,r23,43520 <___vfprintf_internal_r+0x1138>
   43e78:	dd010e04 	addi	r20,sp,1080
   43e7c:	003dc606 	br	43598 <___vfprintf_internal_r+0x11b0>
   43e80:	d9412917 	ldw	r5,1188(sp)
   43e84:	8809883a 	mov	r4,r17
   43e88:	d9811b04 	addi	r6,sp,1132
   43e8c:	00423b40 	call	423b4 <__sprint_r>
   43e90:	103a9b1e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   43e94:	dc812417 	ldw	r18,1168(sp)
   43e98:	da400404 	addi	r9,sp,16
   43e9c:	003ecd06 	br	439d4 <___vfprintf_internal_r+0x15ec>
   43ea0:	d9412917 	ldw	r5,1188(sp)
   43ea4:	8809883a 	mov	r4,r17
   43ea8:	d9811b04 	addi	r6,sp,1132
   43eac:	00423b40 	call	423b4 <__sprint_r>
   43eb0:	103a931e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   43eb4:	dc812417 	ldw	r18,1168(sp)
   43eb8:	da011d17 	ldw	r8,1140(sp)
   43ebc:	d8c11c17 	ldw	r3,1136(sp)
   43ec0:	da400404 	addi	r9,sp,16
   43ec4:	003eb706 	br	439a4 <___vfprintf_internal_r+0x15bc>
   43ec8:	d9412917 	ldw	r5,1188(sp)
   43ecc:	8809883a 	mov	r4,r17
   43ed0:	d9811b04 	addi	r6,sp,1132
   43ed4:	00423b40 	call	423b4 <__sprint_r>
   43ed8:	103a891e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   43edc:	dc812417 	ldw	r18,1168(sp)
   43ee0:	da011d17 	ldw	r8,1140(sp)
   43ee4:	da400404 	addi	r9,sp,16
   43ee8:	003dc206 	br	435f4 <___vfprintf_internal_r+0x120c>
   43eec:	df012815 	stw	fp,1184(sp)
   43ef0:	d8812583 	ldbu	r2,1174(sp)
   43ef4:	df012b15 	stw	fp,1196(sp)
   43ef8:	ddc12d15 	stw	r23,1204(sp)
   43efc:	d8013115 	stw	zero,1220(sp)
   43f00:	003ac606 	br	42a1c <___vfprintf_internal_r+0x634>
   43f04:	d8812404 	addi	r2,sp,1168
   43f08:	d8800115 	stw	r2,4(sp)
   43f0c:	d8812304 	addi	r2,sp,1164
   43f10:	d8800215 	stw	r2,8(sp)
   43f14:	d8812204 	addi	r2,sp,1160
   43f18:	df000015 	stw	fp,0(sp)
   43f1c:	d8800315 	stw	r2,12(sp)
   43f20:	8809883a 	mov	r4,r17
   43f24:	b00b883a 	mov	r5,r22
   43f28:	a00d883a 	mov	r6,r20
   43f2c:	01c000c4 	movi	r7,3
   43f30:	da413c15 	stw	r9,1264(sp)
   43f34:	00446380 	call	44638 <_dtoa_r>
   43f38:	da413c17 	ldw	r9,1264(sp)
   43f3c:	1027883a 	mov	r19,r2
   43f40:	1707883a 	add	r3,r2,fp
   43f44:	e02f883a 	mov	r23,fp
   43f48:	99000007 	ldb	r4,0(r19)
   43f4c:	00800c04 	movi	r2,48
   43f50:	20800326 	beq	r4,r2,43f60 <___vfprintf_internal_r+0x1b78>
   43f54:	da812417 	ldw	r10,1168(sp)
   43f58:	1a87883a 	add	r3,r3,r10
   43f5c:	003f1406 	br	43bb0 <___vfprintf_internal_r+0x17c8>
   43f60:	b009883a 	mov	r4,r22
   43f64:	a00b883a 	mov	r5,r20
   43f68:	000d883a 	mov	r6,zero
   43f6c:	000f883a 	mov	r7,zero
   43f70:	d8c13b15 	stw	r3,1260(sp)
   43f74:	da413c15 	stw	r9,1264(sp)
   43f78:	004a5640 	call	4a564 <__nedf2>
   43f7c:	d8c13b17 	ldw	r3,1260(sp)
   43f80:	da413c17 	ldw	r9,1264(sp)
   43f84:	103ff326 	beq	r2,zero,43f54 <___vfprintf_internal_r+0x1b6c>
   43f88:	00800044 	movi	r2,1
   43f8c:	15d5c83a 	sub	r10,r2,r23
   43f90:	da812415 	stw	r10,1168(sp)
   43f94:	1a87883a 	add	r3,r3,r10
   43f98:	003f0506 	br	43bb0 <___vfprintf_internal_r+0x17c8>
   43f9c:	d9412917 	ldw	r5,1188(sp)
   43fa0:	8809883a 	mov	r4,r17
   43fa4:	d9811b04 	addi	r6,sp,1132
   43fa8:	00423b40 	call	423b4 <__sprint_r>
   43fac:	103a541e 	bne	r2,zero,42900 <___vfprintf_internal_r+0x518>
   43fb0:	dc812417 	ldw	r18,1168(sp)
   43fb4:	da011d17 	ldw	r8,1140(sp)
   43fb8:	d8c11c17 	ldw	r3,1136(sp)
   43fbc:	da400404 	addi	r9,sp,16
   43fc0:	003eb206 	br	43a8c <___vfprintf_internal_r+0x16a4>
   43fc4:	b82b883a 	mov	r21,r23
   43fc8:	0007883a 	mov	r3,zero
   43fcc:	00396306 	br	4255c <___vfprintf_internal_r+0x174>
   43fd0:	04c00174 	movhi	r19,5
   43fd4:	9cf83a04 	addi	r19,r19,-7960
   43fd8:	003f4e06 	br	43d14 <___vfprintf_internal_r+0x192c>
   43fdc:	d8812583 	ldbu	r2,1174(sp)
   43fe0:	dc012a17 	ldw	r16,1192(sp)
   43fe4:	d8013115 	stw	zero,1220(sp)
   43fe8:	003a8c06 	br	42a1c <___vfprintf_internal_r+0x634>
   43fec:	d8812417 	ldw	r2,1168(sp)
   43ff0:	d8812b15 	stw	r2,1196(sp)
   43ff4:	1029883a 	mov	r20,r2
   43ff8:	00bfff44 	movi	r2,-3
   43ffc:	a0800116 	blt	r20,r2,44004 <___vfprintf_internal_r+0x1c1c>
   44000:	e5001d0e 	bge	fp,r20,44078 <___vfprintf_internal_r+0x1c90>
   44004:	94bfff84 	addi	r18,r18,-2
   44008:	a53fffc4 	addi	r20,r20,-1
   4400c:	dd012415 	stw	r20,1168(sp)
   44010:	dc811fc5 	stb	r18,1151(sp)
   44014:	a0007216 	blt	r20,zero,441e0 <___vfprintf_internal_r+0x1df8>
   44018:	00800ac4 	movi	r2,43
   4401c:	d8812005 	stb	r2,1152(sp)
   44020:	00800244 	movi	r2,9
   44024:	15003516 	blt	r2,r20,440fc <___vfprintf_internal_r+0x1d14>
   44028:	00800c04 	movi	r2,48
   4402c:	a5000c04 	addi	r20,r20,48
   44030:	d8812045 	stb	r2,1153(sp)
   44034:	dd012085 	stb	r20,1154(sp)
   44038:	d8c120c4 	addi	r3,sp,1155
   4403c:	d8811fc4 	addi	r2,sp,1151
   44040:	1885c83a 	sub	r2,r3,r2
   44044:	d8c13217 	ldw	r3,1224(sp)
   44048:	d8813515 	stw	r2,1236(sp)
   4404c:	1885883a 	add	r2,r3,r2
   44050:	d8812b15 	stw	r2,1196(sp)
   44054:	00800044 	movi	r2,1
   44058:	10c0580e 	bge	r2,r3,441bc <___vfprintf_internal_r+0x1dd4>
   4405c:	d8812b17 	ldw	r2,1196(sp)
   44060:	10800044 	addi	r2,r2,1
   44064:	d8812b15 	stw	r2,1196(sp)
   44068:	d8812815 	stw	r2,1184(sp)
   4406c:	103ef50e 	bge	r2,zero,43c44 <___vfprintf_internal_r+0x185c>
   44070:	d8012815 	stw	zero,1184(sp)
   44074:	003ef306 	br	43c44 <___vfprintf_internal_r+0x185c>
   44078:	d8812b17 	ldw	r2,1196(sp)
   4407c:	d8c13217 	ldw	r3,1224(sp)
   44080:	10c01416 	blt	r2,r3,440d4 <___vfprintf_internal_r+0x1cec>
   44084:	8400004c 	andi	r16,r16,1
   44088:	80000326 	beq	r16,zero,44098 <___vfprintf_internal_r+0x1cb0>
   4408c:	d8812b17 	ldw	r2,1196(sp)
   44090:	10800044 	addi	r2,r2,1
   44094:	d8812b15 	stw	r2,1196(sp)
   44098:	d8812815 	stw	r2,1184(sp)
   4409c:	10001416 	blt	r2,zero,440f0 <___vfprintf_internal_r+0x1d08>
   440a0:	048019c4 	movi	r18,103
   440a4:	003ee706 	br	43c44 <___vfprintf_internal_r+0x185c>
   440a8:	d8012815 	stw	zero,1184(sp)
   440ac:	003b1a06 	br	42d18 <___vfprintf_internal_r+0x930>
   440b0:	e03e9c1e 	bne	fp,zero,43b24 <___vfprintf_internal_r+0x173c>
   440b4:	07000044 	movi	fp,1
   440b8:	003e9a06 	br	43b24 <___vfprintf_internal_r+0x173c>
   440bc:	07000184 	movi	fp,6
   440c0:	003e9806 	br	43b24 <___vfprintf_internal_r+0x173c>
   440c4:	00c00b44 	movi	r3,45
   440c8:	a520003c 	xorhi	r20,r20,32768
   440cc:	d8c12f05 	stb	r3,1212(sp)
   440d0:	003e9806 	br	43b34 <___vfprintf_internal_r+0x174c>
   440d4:	05003f0e 	bge	zero,r20,441d4 <___vfprintf_internal_r+0x1dec>
   440d8:	05000044 	movi	r20,1
   440dc:	d8c13217 	ldw	r3,1224(sp)
   440e0:	a0e9883a 	add	r20,r20,r3
   440e4:	dd012b15 	stw	r20,1196(sp)
   440e8:	dd012815 	stw	r20,1184(sp)
   440ec:	a03fec0e 	bge	r20,zero,440a0 <___vfprintf_internal_r+0x1cb8>
   440f0:	d8012815 	stw	zero,1184(sp)
   440f4:	048019c4 	movi	r18,103
   440f8:	003ed206 	br	43c44 <___vfprintf_internal_r+0x185c>
   440fc:	d8c11f84 	addi	r3,sp,1150
   44100:	102f883a 	mov	r23,r2
   44104:	4839883a 	mov	fp,r9
   44108:	a009883a 	mov	r4,r20
   4410c:	01400284 	movi	r5,10
   44110:	182d883a 	mov	r22,r3
   44114:	004aa6c0 	call	4aa6c <__modsi3>
   44118:	10800c04 	addi	r2,r2,48
   4411c:	a009883a 	mov	r4,r20
   44120:	b0800005 	stb	r2,0(r22)
   44124:	01400284 	movi	r5,10
   44128:	004aa1c0 	call	4aa1c <__divsi3>
   4412c:	1029883a 	mov	r20,r2
   44130:	b0ffffc4 	addi	r3,r22,-1
   44134:	b8bff416 	blt	r23,r2,44108 <___vfprintf_internal_r+0x1d20>
   44138:	11400c04 	addi	r5,r2,48
   4413c:	b17fffc5 	stb	r5,-1(r22)
   44140:	d8811fc4 	addi	r2,sp,1151
   44144:	e013883a 	mov	r9,fp
   44148:	18803e2e 	bgeu	r3,r2,44244 <___vfprintf_internal_r+0x1e5c>
   4414c:	b007883a 	mov	r3,r22
   44150:	d9012044 	addi	r4,sp,1153
   44154:	00000206 	br	44160 <___vfprintf_internal_r+0x1d78>
   44158:	19400003 	ldbu	r5,0(r3)
   4415c:	18c00044 	addi	r3,r3,1
   44160:	21400005 	stb	r5,0(r4)
   44164:	21000044 	addi	r4,r4,1
   44168:	10fffb1e 	bne	r2,r3,44158 <___vfprintf_internal_r+0x1d70>
   4416c:	d8c12004 	addi	r3,sp,1152
   44170:	1d87c83a 	sub	r3,r3,r22
   44174:	d9012044 	addi	r4,sp,1153
   44178:	20c7883a 	add	r3,r4,r3
   4417c:	003fb006 	br	44040 <___vfprintf_internal_r+0x1c58>
   44180:	e5c00044 	addi	r23,fp,1
   44184:	003e7406 	br	43b58 <___vfprintf_internal_r+0x1770>
   44188:	d8c12217 	ldw	r3,1160(sp)
   4418c:	003e9906 	br	43bf4 <___vfprintf_internal_r+0x180c>
   44190:	d9012d17 	ldw	r4,1204(sp)
   44194:	ac800043 	ldbu	r18,1(r21)
   44198:	b82b883a 	mov	r21,r23
   4419c:	20c00017 	ldw	r3,0(r4)
   441a0:	20800104 	addi	r2,r4,4
   441a4:	d8812d15 	stw	r2,1204(sp)
   441a8:	18002116 	blt	r3,zero,44230 <___vfprintf_internal_r+0x1e48>
   441ac:	94803fcc 	andi	r18,r18,255
   441b0:	9480201c 	xori	r18,r18,128
   441b4:	94bfe004 	addi	r18,r18,-128
   441b8:	0038e706 	br	42558 <___vfprintf_internal_r+0x170>
   441bc:	80a0703a 	and	r16,r16,r2
   441c0:	803fa61e 	bne	r16,zero,4405c <___vfprintf_internal_r+0x1c74>
   441c4:	d8812b17 	ldw	r2,1196(sp)
   441c8:	d8812815 	stw	r2,1184(sp)
   441cc:	103e9d0e 	bge	r2,zero,43c44 <___vfprintf_internal_r+0x185c>
   441d0:	003fa706 	br	44070 <___vfprintf_internal_r+0x1c88>
   441d4:	00800084 	movi	r2,2
   441d8:	1529c83a 	sub	r20,r2,r20
   441dc:	003fbf06 	br	440dc <___vfprintf_internal_r+0x1cf4>
   441e0:	00800b44 	movi	r2,45
   441e4:	0529c83a 	sub	r20,zero,r20
   441e8:	d8812005 	stb	r2,1152(sp)
   441ec:	003f8c06 	br	44020 <___vfprintf_internal_r+0x1c38>
   441f0:	008011c4 	movi	r2,71
   441f4:	90be6926 	beq	r18,r2,43b9c <___vfprintf_internal_r+0x17b4>
   441f8:	003e6a06 	br	43ba4 <___vfprintf_internal_r+0x17bc>
   441fc:	00bfffc4 	movi	r2,-1
   44200:	d8812c15 	stw	r2,1200(sp)
   44204:	0039ad06 	br	428bc <___vfprintf_internal_r+0x4d4>
   44208:	1007883a 	mov	r3,r2
   4420c:	003e7906 	br	43bf4 <___vfprintf_internal_r+0x180c>
   44210:	e000021e 	bne	fp,zero,4421c <___vfprintf_internal_r+0x1e34>
   44214:	8400004c 	andi	r16,r16,1
   44218:	80000e26 	beq	r16,zero,44254 <___vfprintf_internal_r+0x1e6c>
   4421c:	e7000084 	addi	fp,fp,2
   44220:	df012b15 	stw	fp,1196(sp)
   44224:	df012815 	stw	fp,1184(sp)
   44228:	e03e860e 	bge	fp,zero,43c44 <___vfprintf_internal_r+0x185c>
   4422c:	003f9006 	br	44070 <___vfprintf_internal_r+0x1c88>
   44230:	94803fcc 	andi	r18,r18,255
   44234:	9480201c 	xori	r18,r18,128
   44238:	00ffffc4 	movi	r3,-1
   4423c:	94bfe004 	addi	r18,r18,-128
   44240:	0038c506 	br	42558 <___vfprintf_internal_r+0x170>
   44244:	d8c12044 	addi	r3,sp,1153
   44248:	003f7d06 	br	44040 <___vfprintf_internal_r+0x1c58>
   4424c:	dd012417 	ldw	r20,1168(sp)
   44250:	003f6d06 	br	44008 <___vfprintf_internal_r+0x1c20>
   44254:	00c00044 	movi	r3,1
   44258:	d8c12815 	stw	r3,1184(sp)
   4425c:	d8c12b15 	stw	r3,1196(sp)
   44260:	003e7806 	br	43c44 <___vfprintf_internal_r+0x185c>

00044264 <__vfprintf_internal>:
   44264:	00800174 	movhi	r2,5
   44268:	10bf8b04 	addi	r2,r2,-468
   4426c:	2007883a 	mov	r3,r4
   44270:	11000017 	ldw	r4,0(r2)
   44274:	2805883a 	mov	r2,r5
   44278:	300f883a 	mov	r7,r6
   4427c:	180b883a 	mov	r5,r3
   44280:	100d883a 	mov	r6,r2
   44284:	00423e81 	jmpi	423e8 <___vfprintf_internal_r>

00044288 <__swsetup_r>:
   44288:	00800174 	movhi	r2,5
   4428c:	10bf8b04 	addi	r2,r2,-468
   44290:	10800017 	ldw	r2,0(r2)
   44294:	defffd04 	addi	sp,sp,-12
   44298:	dc400115 	stw	r17,4(sp)
   4429c:	dc000015 	stw	r16,0(sp)
   442a0:	dfc00215 	stw	ra,8(sp)
   442a4:	2023883a 	mov	r17,r4
   442a8:	2821883a 	mov	r16,r5
   442ac:	10000226 	beq	r2,zero,442b8 <__swsetup_r+0x30>
   442b0:	10c00e17 	ldw	r3,56(r2)
   442b4:	18003d26 	beq	r3,zero,443ac <__swsetup_r+0x124>
   442b8:	8080030b 	ldhu	r2,12(r16)
   442bc:	10c0020c 	andi	r3,r2,8
   442c0:	18ffffcc 	andi	r3,r3,65535
   442c4:	18e0001c 	xori	r3,r3,32768
   442c8:	18e00004 	addi	r3,r3,-32768
   442cc:	18001226 	beq	r3,zero,44318 <__swsetup_r+0x90>
   442d0:	80c00417 	ldw	r3,16(r16)
   442d4:	18001f26 	beq	r3,zero,44354 <__swsetup_r+0xcc>
   442d8:	1100004c 	andi	r4,r2,1
   442dc:	2000261e 	bne	r4,zero,44378 <__swsetup_r+0xf0>
   442e0:	1080008c 	andi	r2,r2,2
   442e4:	10bfffcc 	andi	r2,r2,65535
   442e8:	10a0001c 	xori	r2,r2,32768
   442ec:	10a00004 	addi	r2,r2,-32768
   442f0:	1000311e 	bne	r2,zero,443b8 <__swsetup_r+0x130>
   442f4:	80800517 	ldw	r2,20(r16)
   442f8:	80800215 	stw	r2,8(r16)
   442fc:	18002326 	beq	r3,zero,4438c <__swsetup_r+0x104>
   44300:	0005883a 	mov	r2,zero
   44304:	dfc00217 	ldw	ra,8(sp)
   44308:	dc400117 	ldw	r17,4(sp)
   4430c:	dc000017 	ldw	r16,0(sp)
   44310:	dec00304 	addi	sp,sp,12
   44314:	f800283a 	ret
   44318:	10c0040c 	andi	r3,r2,16
   4431c:	18ffffcc 	andi	r3,r3,65535
   44320:	18e0001c 	xori	r3,r3,32768
   44324:	18e00004 	addi	r3,r3,-32768
   44328:	18001e26 	beq	r3,zero,443a4 <__swsetup_r+0x11c>
   4432c:	10c0010c 	andi	r3,r2,4
   44330:	18ffffcc 	andi	r3,r3,65535
   44334:	18e0001c 	xori	r3,r3,32768
   44338:	18e00004 	addi	r3,r3,-32768
   4433c:	1800211e 	bne	r3,zero,443c4 <__swsetup_r+0x13c>
   44340:	80c00417 	ldw	r3,16(r16)
   44344:	11400214 	ori	r5,r2,8
   44348:	8140030d 	sth	r5,12(r16)
   4434c:	2805883a 	mov	r2,r5
   44350:	183fe11e 	bne	r3,zero,442d8 <__swsetup_r+0x50>
   44354:	1140a00c 	andi	r5,r2,640
   44358:	01008004 	movi	r4,512
   4435c:	293fde26 	beq	r5,r4,442d8 <__swsetup_r+0x50>
   44360:	8809883a 	mov	r4,r17
   44364:	800b883a 	mov	r5,r16
   44368:	0046c840 	call	46c84 <__smakebuf_r>
   4436c:	8080030b 	ldhu	r2,12(r16)
   44370:	80c00417 	ldw	r3,16(r16)
   44374:	003fd806 	br	442d8 <__swsetup_r+0x50>
   44378:	80800517 	ldw	r2,20(r16)
   4437c:	80000215 	stw	zero,8(r16)
   44380:	0085c83a 	sub	r2,zero,r2
   44384:	80800615 	stw	r2,24(r16)
   44388:	183fdd1e 	bne	r3,zero,44300 <__swsetup_r+0x78>
   4438c:	8080030b 	ldhu	r2,12(r16)
   44390:	1080200c 	andi	r2,r2,128
   44394:	10bfffcc 	andi	r2,r2,65535
   44398:	10a0001c 	xori	r2,r2,32768
   4439c:	10a00004 	addi	r2,r2,-32768
   443a0:	103fd826 	beq	r2,zero,44304 <__swsetup_r+0x7c>
   443a4:	00bfffc4 	movi	r2,-1
   443a8:	003fd606 	br	44304 <__swsetup_r+0x7c>
   443ac:	1009883a 	mov	r4,r2
   443b0:	0045f100 	call	45f10 <__sinit>
   443b4:	003fc006 	br	442b8 <__swsetup_r+0x30>
   443b8:	0005883a 	mov	r2,zero
   443bc:	80800215 	stw	r2,8(r16)
   443c0:	003fce06 	br	442fc <__swsetup_r+0x74>
   443c4:	81400c17 	ldw	r5,48(r16)
   443c8:	28000626 	beq	r5,zero,443e4 <__swsetup_r+0x15c>
   443cc:	80c01004 	addi	r3,r16,64
   443d0:	28c00326 	beq	r5,r3,443e0 <__swsetup_r+0x158>
   443d4:	8809883a 	mov	r4,r17
   443d8:	00462940 	call	46294 <_free_r>
   443dc:	8080030b 	ldhu	r2,12(r16)
   443e0:	80000c15 	stw	zero,48(r16)
   443e4:	80c00417 	ldw	r3,16(r16)
   443e8:	013ff6c4 	movi	r4,-37
   443ec:	2084703a 	and	r2,r4,r2
   443f0:	80000115 	stw	zero,4(r16)
   443f4:	80c00015 	stw	r3,0(r16)
   443f8:	003fd206 	br	44344 <__swsetup_r+0xbc>

000443fc <quorem>:
   443fc:	defff204 	addi	sp,sp,-56
   44400:	dd000815 	stw	r20,32(sp)
   44404:	20800417 	ldw	r2,16(r4)
   44408:	2d000417 	ldw	r20,16(r5)
   4440c:	dcc00715 	stw	r19,28(sp)
   44410:	dfc00d15 	stw	ra,52(sp)
   44414:	df000c15 	stw	fp,48(sp)
   44418:	ddc00b15 	stw	r23,44(sp)
   4441c:	dd800a15 	stw	r22,40(sp)
   44420:	dd400915 	stw	r21,36(sp)
   44424:	dc800615 	stw	r18,24(sp)
   44428:	dc400515 	stw	r17,20(sp)
   4442c:	dc000415 	stw	r16,16(sp)
   44430:	d9400015 	stw	r5,0(sp)
   44434:	2027883a 	mov	r19,r4
   44438:	15007d16 	blt	r2,r20,44630 <quorem+0x234>
   4443c:	a0800104 	addi	r2,r20,4
   44440:	1085883a 	add	r2,r2,r2
   44444:	1085883a 	add	r2,r2,r2
   44448:	28ad883a 	add	r22,r5,r2
   4444c:	2085883a 	add	r2,r4,r2
   44450:	10800017 	ldw	r2,0(r2)
   44454:	b1400017 	ldw	r5,0(r22)
   44458:	a53fffc4 	addi	r20,r20,-1
   4445c:	1009883a 	mov	r4,r2
   44460:	29400044 	addi	r5,r5,1
   44464:	d8800115 	stw	r2,4(sp)
   44468:	004aac80 	call	4aac8 <__udivsi3>
   4446c:	1025883a 	mov	r18,r2
   44470:	d8800017 	ldw	r2,0(sp)
   44474:	9f000504 	addi	fp,r19,20
   44478:	14000504 	addi	r16,r2,20
   4447c:	90003626 	beq	r18,zero,44558 <quorem+0x15c>
   44480:	802b883a 	mov	r21,r16
   44484:	e023883a 	mov	r17,fp
   44488:	0007883a 	mov	r3,zero
   4448c:	002f883a 	mov	r23,zero
   44490:	a9800017 	ldw	r6,0(r21)
   44494:	900b883a 	mov	r5,r18
   44498:	d8c00315 	stw	r3,12(sp)
   4449c:	313fffcc 	andi	r4,r6,65535
   444a0:	d9800215 	stw	r6,8(sp)
   444a4:	00419f00 	call	419f0 <__mulsi3>
   444a8:	d9800217 	ldw	r6,8(sp)
   444ac:	d8c00317 	ldw	r3,12(sp)
   444b0:	900b883a 	mov	r5,r18
   444b4:	3008d43a 	srli	r4,r6,16
   444b8:	1887883a 	add	r3,r3,r2
   444bc:	d8c00315 	stw	r3,12(sp)
   444c0:	00419f00 	call	419f0 <__mulsi3>
   444c4:	89400017 	ldw	r5,0(r17)
   444c8:	d8c00317 	ldw	r3,12(sp)
   444cc:	ad400104 	addi	r21,r21,4
   444d0:	293fffcc 	andi	r4,r5,65535
   444d4:	1810d43a 	srli	r8,r3,16
   444d8:	25c9883a 	add	r4,r4,r23
   444dc:	18ffffcc 	andi	r3,r3,65535
   444e0:	20c9c83a 	sub	r4,r4,r3
   444e4:	280cd43a 	srli	r6,r5,16
   444e8:	4085883a 	add	r2,r8,r2
   444ec:	2007d43a 	srai	r3,r4,16
   444f0:	117fffcc 	andi	r5,r2,65535
   444f4:	314bc83a 	sub	r5,r6,r5
   444f8:	28cb883a 	add	r5,r5,r3
   444fc:	8940008d 	sth	r5,2(r17)
   44500:	8900000d 	sth	r4,0(r17)
   44504:	1006d43a 	srli	r3,r2,16
   44508:	282fd43a 	srai	r23,r5,16
   4450c:	8c400104 	addi	r17,r17,4
   44510:	b57fdf2e 	bgeu	r22,r21,44490 <quorem+0x94>
   44514:	d8c00117 	ldw	r3,4(sp)
   44518:	18000f1e 	bne	r3,zero,44558 <quorem+0x15c>
   4451c:	a0800144 	addi	r2,r20,5
   44520:	1085883a 	add	r2,r2,r2
   44524:	1085883a 	add	r2,r2,r2
   44528:	9887883a 	add	r3,r19,r2
   4452c:	18bfff04 	addi	r2,r3,-4
   44530:	e080082e 	bgeu	fp,r2,44554 <quorem+0x158>
   44534:	18ffff17 	ldw	r3,-4(r3)
   44538:	18000326 	beq	r3,zero,44548 <quorem+0x14c>
   4453c:	00000506 	br	44554 <quorem+0x158>
   44540:	10c00017 	ldw	r3,0(r2)
   44544:	1800031e 	bne	r3,zero,44554 <quorem+0x158>
   44548:	10bfff04 	addi	r2,r2,-4
   4454c:	a53fffc4 	addi	r20,r20,-1
   44550:	e0bffb36 	bltu	fp,r2,44540 <quorem+0x144>
   44554:	9d000415 	stw	r20,16(r19)
   44558:	d9400017 	ldw	r5,0(sp)
   4455c:	9809883a 	mov	r4,r19
   44560:	0047c180 	call	47c18 <__mcmp>
   44564:	10002516 	blt	r2,zero,445fc <quorem+0x200>
   44568:	94800044 	addi	r18,r18,1
   4456c:	e007883a 	mov	r3,fp
   44570:	000d883a 	mov	r6,zero
   44574:	18800017 	ldw	r2,0(r3)
   44578:	82000017 	ldw	r8,0(r16)
   4457c:	84000104 	addi	r16,r16,4
   44580:	11ffffcc 	andi	r7,r2,65535
   44584:	413fffcc 	andi	r4,r8,65535
   44588:	398d883a 	add	r6,r7,r6
   4458c:	310fc83a 	sub	r7,r6,r4
   44590:	4010d43a 	srli	r8,r8,16
   44594:	100cd43a 	srli	r6,r2,16
   44598:	3809d43a 	srai	r4,r7,16
   4459c:	19c0000d 	sth	r7,0(r3)
   445a0:	320dc83a 	sub	r6,r6,r8
   445a4:	310d883a 	add	r6,r6,r4
   445a8:	1980008d 	sth	r6,2(r3)
   445ac:	300dd43a 	srai	r6,r6,16
   445b0:	18c00104 	addi	r3,r3,4
   445b4:	b43fef2e 	bgeu	r22,r16,44574 <quorem+0x178>
   445b8:	a0800144 	addi	r2,r20,5
   445bc:	1085883a 	add	r2,r2,r2
   445c0:	1085883a 	add	r2,r2,r2
   445c4:	9885883a 	add	r2,r19,r2
   445c8:	10c00017 	ldw	r3,0(r2)
   445cc:	18000b1e 	bne	r3,zero,445fc <quorem+0x200>
   445d0:	10ffff04 	addi	r3,r2,-4
   445d4:	e0c0082e 	bgeu	fp,r3,445f8 <quorem+0x1fc>
   445d8:	10bfff17 	ldw	r2,-4(r2)
   445dc:	10000326 	beq	r2,zero,445ec <quorem+0x1f0>
   445e0:	00000506 	br	445f8 <quorem+0x1fc>
   445e4:	18800017 	ldw	r2,0(r3)
   445e8:	1000031e 	bne	r2,zero,445f8 <quorem+0x1fc>
   445ec:	18ffff04 	addi	r3,r3,-4
   445f0:	a53fffc4 	addi	r20,r20,-1
   445f4:	e0fffb36 	bltu	fp,r3,445e4 <quorem+0x1e8>
   445f8:	9d000415 	stw	r20,16(r19)
   445fc:	9005883a 	mov	r2,r18
   44600:	dfc00d17 	ldw	ra,52(sp)
   44604:	df000c17 	ldw	fp,48(sp)
   44608:	ddc00b17 	ldw	r23,44(sp)
   4460c:	dd800a17 	ldw	r22,40(sp)
   44610:	dd400917 	ldw	r21,36(sp)
   44614:	dd000817 	ldw	r20,32(sp)
   44618:	dcc00717 	ldw	r19,28(sp)
   4461c:	dc800617 	ldw	r18,24(sp)
   44620:	dc400517 	ldw	r17,20(sp)
   44624:	dc000417 	ldw	r16,16(sp)
   44628:	dec00e04 	addi	sp,sp,56
   4462c:	f800283a 	ret
   44630:	0005883a 	mov	r2,zero
   44634:	003ff206 	br	44600 <quorem+0x204>

00044638 <_dtoa_r>:
   44638:	20801017 	ldw	r2,64(r4)
   4463c:	deffdf04 	addi	sp,sp,-132
   44640:	dcc01a15 	stw	r19,104(sp)
   44644:	dc801915 	stw	r18,100(sp)
   44648:	dc401815 	stw	r17,96(sp)
   4464c:	dc001715 	stw	r16,92(sp)
   44650:	dfc02015 	stw	ra,128(sp)
   44654:	df001f15 	stw	fp,124(sp)
   44658:	ddc01e15 	stw	r23,120(sp)
   4465c:	dd801d15 	stw	r22,116(sp)
   44660:	dd401c15 	stw	r21,112(sp)
   44664:	dd001b15 	stw	r20,108(sp)
   44668:	d9400315 	stw	r5,12(sp)
   4466c:	d9c00415 	stw	r7,16(sp)
   44670:	2021883a 	mov	r16,r4
   44674:	3025883a 	mov	r18,r6
   44678:	dcc02317 	ldw	r19,140(sp)
   4467c:	3023883a 	mov	r17,r6
   44680:	10000826 	beq	r2,zero,446a4 <_dtoa_r+0x6c>
   44684:	20c01117 	ldw	r3,68(r4)
   44688:	01800044 	movi	r6,1
   4468c:	100b883a 	mov	r5,r2
   44690:	30cc983a 	sll	r6,r6,r3
   44694:	10c00115 	stw	r3,4(r2)
   44698:	11800215 	stw	r6,8(r2)
   4469c:	00473740 	call	47374 <_Bfree>
   446a0:	80001015 	stw	zero,64(r16)
   446a4:	90002f16 	blt	r18,zero,44764 <_dtoa_r+0x12c>
   446a8:	98000015 	stw	zero,0(r19)
   446ac:	90dffc2c 	andhi	r3,r18,32752
   446b0:	009ffc34 	movhi	r2,32752
   446b4:	18801c26 	beq	r3,r2,44728 <_dtoa_r+0xf0>
   446b8:	d9000317 	ldw	r4,12(sp)
   446bc:	880b883a 	mov	r5,r17
   446c0:	000d883a 	mov	r6,zero
   446c4:	000f883a 	mov	r7,zero
   446c8:	004a5080 	call	4a508 <__eqdf2>
   446cc:	10002c1e 	bne	r2,zero,44780 <_dtoa_r+0x148>
   446d0:	d9002217 	ldw	r4,136(sp)
   446d4:	d9c02417 	ldw	r7,144(sp)
   446d8:	00800044 	movi	r2,1
   446dc:	20800015 	stw	r2,0(r4)
   446e0:	38019426 	beq	r7,zero,44d34 <_dtoa_r+0x6fc>
   446e4:	00800174 	movhi	r2,5
   446e8:	10b84744 	addi	r2,r2,-7907
   446ec:	38800015 	stw	r2,0(r7)
   446f0:	15ffffc4 	addi	r23,r2,-1
   446f4:	b805883a 	mov	r2,r23
   446f8:	dfc02017 	ldw	ra,128(sp)
   446fc:	df001f17 	ldw	fp,124(sp)
   44700:	ddc01e17 	ldw	r23,120(sp)
   44704:	dd801d17 	ldw	r22,116(sp)
   44708:	dd401c17 	ldw	r21,112(sp)
   4470c:	dd001b17 	ldw	r20,108(sp)
   44710:	dcc01a17 	ldw	r19,104(sp)
   44714:	dc801917 	ldw	r18,100(sp)
   44718:	dc401817 	ldw	r17,96(sp)
   4471c:	dc001717 	ldw	r16,92(sp)
   44720:	dec02104 	addi	sp,sp,132
   44724:	f800283a 	ret
   44728:	d8c02217 	ldw	r3,136(sp)
   4472c:	d9000317 	ldw	r4,12(sp)
   44730:	0089c3c4 	movi	r2,9999
   44734:	18800015 	stw	r2,0(r3)
   44738:	20016c26 	beq	r4,zero,44cec <_dtoa_r+0x6b4>
   4473c:	05c00174 	movhi	r23,5
   44740:	bdf85304 	addi	r23,r23,-7860
   44744:	d9c02417 	ldw	r7,144(sp)
   44748:	383fea26 	beq	r7,zero,446f4 <_dtoa_r+0xbc>
   4474c:	b88000c7 	ldb	r2,3(r23)
   44750:	10016d1e 	bne	r2,zero,44d08 <_dtoa_r+0x6d0>
   44754:	b88000c4 	addi	r2,r23,3
   44758:	d8c02417 	ldw	r3,144(sp)
   4475c:	18800015 	stw	r2,0(r3)
   44760:	003fe406 	br	446f4 <_dtoa_r+0xbc>
   44764:	04600034 	movhi	r17,32768
   44768:	8c7fffc4 	addi	r17,r17,-1
   4476c:	9462703a 	and	r17,r18,r17
   44770:	00800044 	movi	r2,1
   44774:	98800015 	stw	r2,0(r19)
   44778:	8825883a 	mov	r18,r17
   4477c:	003fcb06 	br	446ac <_dtoa_r+0x74>
   44780:	d9400317 	ldw	r5,12(sp)
   44784:	9028d53a 	srli	r20,r18,20
   44788:	d8800204 	addi	r2,sp,8
   4478c:	d8800015 	stw	r2,0(sp)
   44790:	8009883a 	mov	r4,r16
   44794:	880d883a 	mov	r6,r17
   44798:	d9c00104 	addi	r7,sp,4
   4479c:	0047fc00 	call	47fc0 <__d2b>
   447a0:	a501ffcc 	andi	r20,r20,2047
   447a4:	1039883a 	mov	fp,r2
   447a8:	a001591e 	bne	r20,zero,44d10 <_dtoa_r+0x6d8>
   447ac:	dd400217 	ldw	r21,8(sp)
   447b0:	dd000117 	ldw	r20,4(sp)
   447b4:	00befbc4 	movi	r2,-1041
   447b8:	ad29883a 	add	r20,r21,r20
   447bc:	a082d216 	blt	r20,r2,45308 <_dtoa_r+0xcd0>
   447c0:	d8c00317 	ldw	r3,12(sp)
   447c4:	013f0384 	movi	r4,-1010
   447c8:	2509c83a 	sub	r4,r4,r20
   447cc:	a0810484 	addi	r2,r20,1042
   447d0:	9124983a 	sll	r18,r18,r4
   447d4:	1884d83a 	srl	r2,r3,r2
   447d8:	9088b03a 	or	r4,r18,r2
   447dc:	004a88c0 	call	4a88c <__floatunsidf>
   447e0:	1009883a 	mov	r4,r2
   447e4:	017f8434 	movhi	r5,65040
   447e8:	00800044 	movi	r2,1
   447ec:	194b883a 	add	r5,r3,r5
   447f0:	a53fffc4 	addi	r20,r20,-1
   447f4:	d8800f15 	stw	r2,60(sp)
   447f8:	000d883a 	mov	r6,zero
   447fc:	01cffe34 	movhi	r7,16376
   44800:	004a0100 	call	4a010 <__subdf3>
   44804:	1009883a 	mov	r4,r2
   44808:	180b883a 	mov	r5,r3
   4480c:	0198dbf4 	movhi	r6,25455
   44810:	3190d844 	addi	r6,r6,17249
   44814:	01cff4f4 	movhi	r7,16339
   44818:	39e1e9c4 	addi	r7,r7,-30809
   4481c:	004a0700 	call	4a070 <__muldf3>
   44820:	180b883a 	mov	r5,r3
   44824:	01a2d874 	movhi	r6,35681
   44828:	31b22cc4 	addi	r6,r6,-14157
   4482c:	01cff1f4 	movhi	r7,16327
   44830:	39e28a04 	addi	r7,r7,-30168
   44834:	1009883a 	mov	r4,r2
   44838:	0049fbc0 	call	49fbc <__adddf3>
   4483c:	a009883a 	mov	r4,r20
   44840:	1027883a 	mov	r19,r2
   44844:	1825883a 	mov	r18,r3
   44848:	004a6e40 	call	4a6e4 <__floatsidf>
   4484c:	1009883a 	mov	r4,r2
   44850:	180b883a 	mov	r5,r3
   44854:	019427f4 	movhi	r6,20639
   44858:	319e7ec4 	addi	r6,r6,31227
   4485c:	01cff4f4 	movhi	r7,16339
   44860:	39d104c4 	addi	r7,r7,17427
   44864:	004a0700 	call	4a070 <__muldf3>
   44868:	9809883a 	mov	r4,r19
   4486c:	900b883a 	mov	r5,r18
   44870:	100d883a 	mov	r6,r2
   44874:	180f883a 	mov	r7,r3
   44878:	0049fbc0 	call	49fbc <__adddf3>
   4487c:	1009883a 	mov	r4,r2
   44880:	180b883a 	mov	r5,r3
   44884:	1027883a 	mov	r19,r2
   44888:	1825883a 	mov	r18,r3
   4488c:	004a7b80 	call	4a7b8 <__fixdfsi>
   44890:	9809883a 	mov	r4,r19
   44894:	900b883a 	mov	r5,r18
   44898:	000d883a 	mov	r6,zero
   4489c:	000f883a 	mov	r7,zero
   448a0:	d8800615 	stw	r2,24(sp)
   448a4:	004a6880 	call	4a688 <__ltdf2>
   448a8:	10027e16 	blt	r2,zero,452a4 <_dtoa_r+0xc6c>
   448ac:	d8c00617 	ldw	r3,24(sp)
   448b0:	00800584 	movi	r2,22
   448b4:	10c26c36 	bltu	r2,r3,45268 <_dtoa_r+0xc30>
   448b8:	180490fa 	slli	r2,r3,3
   448bc:	00c00174 	movhi	r3,5
   448c0:	18f87904 	addi	r3,r3,-7708
   448c4:	d9800317 	ldw	r6,12(sp)
   448c8:	1885883a 	add	r2,r3,r2
   448cc:	11000017 	ldw	r4,0(r2)
   448d0:	11400117 	ldw	r5,4(r2)
   448d4:	880f883a 	mov	r7,r17
   448d8:	004a5c00 	call	4a5c0 <__gtdf2>
   448dc:	00828f0e 	bge	zero,r2,4531c <_dtoa_r+0xce4>
   448e0:	d8800617 	ldw	r2,24(sp)
   448e4:	d8000d15 	stw	zero,52(sp)
   448e8:	10bfffc4 	addi	r2,r2,-1
   448ec:	d8800615 	stw	r2,24(sp)
   448f0:	ad29c83a 	sub	r20,r21,r20
   448f4:	a53fffc4 	addi	r20,r20,-1
   448f8:	a0026616 	blt	r20,zero,45294 <_dtoa_r+0xc5c>
   448fc:	dd000715 	stw	r20,28(sp)
   44900:	d8000815 	stw	zero,32(sp)
   44904:	d8800617 	ldw	r2,24(sp)
   44908:	10025a16 	blt	r2,zero,45274 <_dtoa_r+0xc3c>
   4490c:	d8c00717 	ldw	r3,28(sp)
   44910:	d8800b15 	stw	r2,44(sp)
   44914:	d8000a15 	stw	zero,40(sp)
   44918:	1887883a 	add	r3,r3,r2
   4491c:	d8c00715 	stw	r3,28(sp)
   44920:	d9c00417 	ldw	r7,16(sp)
   44924:	00800244 	movi	r2,9
   44928:	11c10536 	bltu	r2,r7,44d40 <_dtoa_r+0x708>
   4492c:	00800144 	movi	r2,5
   44930:	11c4c60e 	bge	r2,r7,45c4c <_dtoa_r+0x1614>
   44934:	39ffff04 	addi	r7,r7,-4
   44938:	d9c00415 	stw	r7,16(sp)
   4493c:	0027883a 	mov	r19,zero
   44940:	d9c00417 	ldw	r7,16(sp)
   44944:	008000c4 	movi	r2,3
   44948:	3883a226 	beq	r7,r2,457d4 <_dtoa_r+0x119c>
   4494c:	11c2bc16 	blt	r2,r7,45440 <_dtoa_r+0xe08>
   44950:	00800084 	movi	r2,2
   44954:	3880fb1e 	bne	r7,r2,44d44 <_dtoa_r+0x70c>
   44958:	d8000c15 	stw	zero,48(sp)
   4495c:	d9002117 	ldw	r4,132(sp)
   44960:	0103ae0e 	bge	zero,r4,4581c <_dtoa_r+0x11e4>
   44964:	2025883a 	mov	r18,r4
   44968:	d9000e15 	stw	r4,56(sp)
   4496c:	d9000915 	stw	r4,36(sp)
   44970:	80001115 	stw	zero,68(r16)
   44974:	008005c4 	movi	r2,23
   44978:	1484b22e 	bgeu	r2,r18,45c44 <_dtoa_r+0x160c>
   4497c:	00c00044 	movi	r3,1
   44980:	00800104 	movi	r2,4
   44984:	1085883a 	add	r2,r2,r2
   44988:	11000504 	addi	r4,r2,20
   4498c:	180b883a 	mov	r5,r3
   44990:	18c00044 	addi	r3,r3,1
   44994:	913ffb2e 	bgeu	r18,r4,44984 <_dtoa_r+0x34c>
   44998:	81401115 	stw	r5,68(r16)
   4499c:	8009883a 	mov	r4,r16
   449a0:	00472cc0 	call	472cc <_Balloc>
   449a4:	102f883a 	mov	r23,r2
   449a8:	80801015 	stw	r2,64(r16)
   449ac:	00800384 	movi	r2,14
   449b0:	1480f036 	bltu	r2,r18,44d74 <_dtoa_r+0x73c>
   449b4:	9800ef26 	beq	r19,zero,44d74 <_dtoa_r+0x73c>
   449b8:	d8800617 	ldw	r2,24(sp)
   449bc:	00839c0e 	bge	zero,r2,45830 <_dtoa_r+0x11f8>
   449c0:	d8c00617 	ldw	r3,24(sp)
   449c4:	108003cc 	andi	r2,r2,15
   449c8:	100490fa 	slli	r2,r2,3
   449cc:	182bd13a 	srai	r21,r3,4
   449d0:	00c00174 	movhi	r3,5
   449d4:	18f87904 	addi	r3,r3,-7708
   449d8:	1885883a 	add	r2,r3,r2
   449dc:	a8c0040c 	andi	r3,r21,16
   449e0:	12800017 	ldw	r10,0(r2)
   449e4:	15800117 	ldw	r22,4(r2)
   449e8:	18038726 	beq	r3,zero,45808 <_dtoa_r+0x11d0>
   449ec:	00800174 	movhi	r2,5
   449f0:	10b86f04 	addi	r2,r2,-7748
   449f4:	11800817 	ldw	r6,32(r2)
   449f8:	11c00917 	ldw	r7,36(r2)
   449fc:	d9000317 	ldw	r4,12(sp)
   44a00:	880b883a 	mov	r5,r17
   44a04:	da801515 	stw	r10,84(sp)
   44a08:	004a3540 	call	4a354 <__divdf3>
   44a0c:	da801517 	ldw	r10,84(sp)
   44a10:	d8801015 	stw	r2,64(sp)
   44a14:	1829883a 	mov	r20,r3
   44a18:	ad4003cc 	andi	r21,r21,15
   44a1c:	048000c4 	movi	r18,3
   44a20:	a8001126 	beq	r21,zero,44a68 <_dtoa_r+0x430>
   44a24:	04c00174 	movhi	r19,5
   44a28:	9cf86f04 	addi	r19,r19,-7748
   44a2c:	5005883a 	mov	r2,r10
   44a30:	b007883a 	mov	r3,r22
   44a34:	a980004c 	andi	r6,r21,1
   44a38:	1009883a 	mov	r4,r2
   44a3c:	a82bd07a 	srai	r21,r21,1
   44a40:	180b883a 	mov	r5,r3
   44a44:	30000426 	beq	r6,zero,44a58 <_dtoa_r+0x420>
   44a48:	99800017 	ldw	r6,0(r19)
   44a4c:	99c00117 	ldw	r7,4(r19)
   44a50:	94800044 	addi	r18,r18,1
   44a54:	004a0700 	call	4a070 <__muldf3>
   44a58:	9cc00204 	addi	r19,r19,8
   44a5c:	a83ff51e 	bne	r21,zero,44a34 <_dtoa_r+0x3fc>
   44a60:	1015883a 	mov	r10,r2
   44a64:	182d883a 	mov	r22,r3
   44a68:	d9001017 	ldw	r4,64(sp)
   44a6c:	a00b883a 	mov	r5,r20
   44a70:	500d883a 	mov	r6,r10
   44a74:	b00f883a 	mov	r7,r22
   44a78:	004a3540 	call	4a354 <__divdf3>
   44a7c:	1027883a 	mov	r19,r2
   44a80:	1829883a 	mov	r20,r3
   44a84:	d8c00d17 	ldw	r3,52(sp)
   44a88:	18000626 	beq	r3,zero,44aa4 <_dtoa_r+0x46c>
   44a8c:	9809883a 	mov	r4,r19
   44a90:	a00b883a 	mov	r5,r20
   44a94:	000d883a 	mov	r6,zero
   44a98:	01cffc34 	movhi	r7,16368
   44a9c:	004a6880 	call	4a688 <__ltdf2>
   44aa0:	10040e16 	blt	r2,zero,45adc <_dtoa_r+0x14a4>
   44aa4:	9009883a 	mov	r4,r18
   44aa8:	004a6e40 	call	4a6e4 <__floatsidf>
   44aac:	1009883a 	mov	r4,r2
   44ab0:	180b883a 	mov	r5,r3
   44ab4:	980d883a 	mov	r6,r19
   44ab8:	a00f883a 	mov	r7,r20
   44abc:	004a0700 	call	4a070 <__muldf3>
   44ac0:	1009883a 	mov	r4,r2
   44ac4:	180b883a 	mov	r5,r3
   44ac8:	000d883a 	mov	r6,zero
   44acc:	01d00734 	movhi	r7,16412
   44ad0:	0049fbc0 	call	49fbc <__adddf3>
   44ad4:	057f3034 	movhi	r21,64704
   44ad8:	1d6b883a 	add	r21,r3,r21
   44adc:	d8c00917 	ldw	r3,36(sp)
   44ae0:	1025883a 	mov	r18,r2
   44ae4:	18031f26 	beq	r3,zero,45764 <_dtoa_r+0x112c>
   44ae8:	d8800617 	ldw	r2,24(sp)
   44aec:	dac00917 	ldw	r11,36(sp)
   44af0:	d8801315 	stw	r2,76(sp)
   44af4:	d8c00c17 	ldw	r3,48(sp)
   44af8:	18039026 	beq	r3,zero,4593c <_dtoa_r+0x1304>
   44afc:	58bfffc4 	addi	r2,r11,-1
   44b00:	100490fa 	slli	r2,r2,3
   44b04:	00c00174 	movhi	r3,5
   44b08:	18f87904 	addi	r3,r3,-7708
   44b0c:	0009883a 	mov	r4,zero
   44b10:	1885883a 	add	r2,r3,r2
   44b14:	11800017 	ldw	r6,0(r2)
   44b18:	11c00117 	ldw	r7,4(r2)
   44b1c:	014ff834 	movhi	r5,16352
   44b20:	dac01615 	stw	r11,88(sp)
   44b24:	004a3540 	call	4a354 <__divdf3>
   44b28:	900d883a 	mov	r6,r18
   44b2c:	a80f883a 	mov	r7,r21
   44b30:	1009883a 	mov	r4,r2
   44b34:	180b883a 	mov	r5,r3
   44b38:	004a0100 	call	4a010 <__subdf3>
   44b3c:	a00b883a 	mov	r5,r20
   44b40:	9809883a 	mov	r4,r19
   44b44:	182b883a 	mov	r21,r3
   44b48:	d8801015 	stw	r2,64(sp)
   44b4c:	004a7b80 	call	4a7b8 <__fixdfsi>
   44b50:	1009883a 	mov	r4,r2
   44b54:	d8801515 	stw	r2,84(sp)
   44b58:	004a6e40 	call	4a6e4 <__floatsidf>
   44b5c:	9809883a 	mov	r4,r19
   44b60:	a00b883a 	mov	r5,r20
   44b64:	100d883a 	mov	r6,r2
   44b68:	180f883a 	mov	r7,r3
   44b6c:	004a0100 	call	4a010 <__subdf3>
   44b70:	da401517 	ldw	r9,84(sp)
   44b74:	d9001017 	ldw	r4,64(sp)
   44b78:	a80b883a 	mov	r5,r21
   44b7c:	4d000c04 	addi	r20,r9,48
   44b80:	bd000005 	stb	r20,0(r23)
   44b84:	100d883a 	mov	r6,r2
   44b88:	180f883a 	mov	r7,r3
   44b8c:	bd800044 	addi	r22,r23,1
   44b90:	1025883a 	mov	r18,r2
   44b94:	1827883a 	mov	r19,r3
   44b98:	004a5c00 	call	4a5c0 <__gtdf2>
   44b9c:	00842216 	blt	zero,r2,45c28 <_dtoa_r+0x15f0>
   44ba0:	0009883a 	mov	r4,zero
   44ba4:	014ffc34 	movhi	r5,16368
   44ba8:	900d883a 	mov	r6,r18
   44bac:	980f883a 	mov	r7,r19
   44bb0:	004a0100 	call	4a010 <__subdf3>
   44bb4:	d9001017 	ldw	r4,64(sp)
   44bb8:	a80b883a 	mov	r5,r21
   44bbc:	100d883a 	mov	r6,r2
   44bc0:	180f883a 	mov	r7,r3
   44bc4:	004a5c00 	call	4a5c0 <__gtdf2>
   44bc8:	dac01617 	ldw	r11,88(sp)
   44bcc:	00841316 	blt	zero,r2,45c1c <_dtoa_r+0x15e4>
   44bd0:	00800044 	movi	r2,1
   44bd4:	12c0670e 	bge	r2,r11,44d74 <_dtoa_r+0x73c>
   44bd8:	bad7883a 	add	r11,r23,r11
   44bdc:	df001115 	stw	fp,68(sp)
   44be0:	dc401215 	stw	r17,72(sp)
   44be4:	5839883a 	mov	fp,r11
   44be8:	dc401017 	ldw	r17,64(sp)
   44bec:	00000806 	br	44c10 <_dtoa_r+0x5d8>
   44bf0:	004a0100 	call	4a010 <__subdf3>
   44bf4:	1009883a 	mov	r4,r2
   44bf8:	180b883a 	mov	r5,r3
   44bfc:	880d883a 	mov	r6,r17
   44c00:	a80f883a 	mov	r7,r21
   44c04:	004a6880 	call	4a688 <__ltdf2>
   44c08:	1003ee16 	blt	r2,zero,45bc4 <_dtoa_r+0x158c>
   44c0c:	b703f126 	beq	r22,fp,45bd4 <_dtoa_r+0x159c>
   44c10:	8809883a 	mov	r4,r17
   44c14:	a80b883a 	mov	r5,r21
   44c18:	000d883a 	mov	r6,zero
   44c1c:	01d00934 	movhi	r7,16420
   44c20:	004a0700 	call	4a070 <__muldf3>
   44c24:	000d883a 	mov	r6,zero
   44c28:	01d00934 	movhi	r7,16420
   44c2c:	9009883a 	mov	r4,r18
   44c30:	980b883a 	mov	r5,r19
   44c34:	1023883a 	mov	r17,r2
   44c38:	182b883a 	mov	r21,r3
   44c3c:	004a0700 	call	4a070 <__muldf3>
   44c40:	180b883a 	mov	r5,r3
   44c44:	1009883a 	mov	r4,r2
   44c48:	1825883a 	mov	r18,r3
   44c4c:	1027883a 	mov	r19,r2
   44c50:	004a7b80 	call	4a7b8 <__fixdfsi>
   44c54:	1009883a 	mov	r4,r2
   44c58:	1029883a 	mov	r20,r2
   44c5c:	004a6e40 	call	4a6e4 <__floatsidf>
   44c60:	9809883a 	mov	r4,r19
   44c64:	900b883a 	mov	r5,r18
   44c68:	100d883a 	mov	r6,r2
   44c6c:	180f883a 	mov	r7,r3
   44c70:	004a0100 	call	4a010 <__subdf3>
   44c74:	a5000c04 	addi	r20,r20,48
   44c78:	b5000005 	stb	r20,0(r22)
   44c7c:	1009883a 	mov	r4,r2
   44c80:	180b883a 	mov	r5,r3
   44c84:	880d883a 	mov	r6,r17
   44c88:	a80f883a 	mov	r7,r21
   44c8c:	1025883a 	mov	r18,r2
   44c90:	1827883a 	mov	r19,r3
   44c94:	004a6880 	call	4a688 <__ltdf2>
   44c98:	b5800044 	addi	r22,r22,1
   44c9c:	0009883a 	mov	r4,zero
   44ca0:	014ffc34 	movhi	r5,16368
   44ca4:	900d883a 	mov	r6,r18
   44ca8:	980f883a 	mov	r7,r19
   44cac:	103fd00e 	bge	r2,zero,44bf0 <_dtoa_r+0x5b8>
   44cb0:	d9001317 	ldw	r4,76(sp)
   44cb4:	df001117 	ldw	fp,68(sp)
   44cb8:	d9000615 	stw	r4,24(sp)
   44cbc:	8009883a 	mov	r4,r16
   44cc0:	e00b883a 	mov	r5,fp
   44cc4:	00473740 	call	47374 <_Bfree>
   44cc8:	d9c00617 	ldw	r7,24(sp)
   44ccc:	d8c02217 	ldw	r3,136(sp)
   44cd0:	d9002417 	ldw	r4,144(sp)
   44cd4:	b0000005 	stb	zero,0(r22)
   44cd8:	38800044 	addi	r2,r7,1
   44cdc:	18800015 	stw	r2,0(r3)
   44ce0:	203e8426 	beq	r4,zero,446f4 <_dtoa_r+0xbc>
   44ce4:	25800015 	stw	r22,0(r4)
   44ce8:	003e8206 	br	446f4 <_dtoa_r+0xbc>
   44cec:	00800434 	movhi	r2,16
   44cf0:	10bfffc4 	addi	r2,r2,-1
   44cf4:	90a4703a 	and	r18,r18,r2
   44cf8:	903e901e 	bne	r18,zero,4473c <_dtoa_r+0x104>
   44cfc:	05c00174 	movhi	r23,5
   44d00:	bdf85004 	addi	r23,r23,-7872
   44d04:	003e8f06 	br	44744 <_dtoa_r+0x10c>
   44d08:	b8800204 	addi	r2,r23,8
   44d0c:	003e9206 	br	44758 <_dtoa_r+0x120>
   44d10:	01400434 	movhi	r5,16
   44d14:	297fffc4 	addi	r5,r5,-1
   44d18:	894a703a 	and	r5,r17,r5
   44d1c:	d9000317 	ldw	r4,12(sp)
   44d20:	294ffc34 	orhi	r5,r5,16368
   44d24:	a53f0044 	addi	r20,r20,-1023
   44d28:	dd400217 	ldw	r21,8(sp)
   44d2c:	d8000f15 	stw	zero,60(sp)
   44d30:	003eb106 	br	447f8 <_dtoa_r+0x1c0>
   44d34:	05c00174 	movhi	r23,5
   44d38:	bdf84704 	addi	r23,r23,-7908
   44d3c:	003e6d06 	br	446f4 <_dtoa_r+0xbc>
   44d40:	d8000415 	stw	zero,16(sp)
   44d44:	80001115 	stw	zero,68(r16)
   44d48:	8009883a 	mov	r4,r16
   44d4c:	000b883a 	mov	r5,zero
   44d50:	00472cc0 	call	472cc <_Balloc>
   44d54:	01ffffc4 	movi	r7,-1
   44d58:	102f883a 	mov	r23,r2
   44d5c:	80801015 	stw	r2,64(r16)
   44d60:	00800044 	movi	r2,1
   44d64:	d9c00915 	stw	r7,36(sp)
   44d68:	d8002115 	stw	zero,132(sp)
   44d6c:	d9c00e15 	stw	r7,56(sp)
   44d70:	d8800c15 	stw	r2,48(sp)
   44d74:	d8800117 	ldw	r2,4(sp)
   44d78:	10008b16 	blt	r2,zero,44fa8 <_dtoa_r+0x970>
   44d7c:	d9000617 	ldw	r4,24(sp)
   44d80:	00c00384 	movi	r3,14
   44d84:	19008816 	blt	r3,r4,44fa8 <_dtoa_r+0x970>
   44d88:	200490fa 	slli	r2,r4,3
   44d8c:	d9c02117 	ldw	r7,132(sp)
   44d90:	00c00174 	movhi	r3,5
   44d94:	18f87904 	addi	r3,r3,-7708
   44d98:	1885883a 	add	r2,r3,r2
   44d9c:	14800017 	ldw	r18,0(r2)
   44da0:	14c00117 	ldw	r19,4(r2)
   44da4:	3801c916 	blt	r7,zero,454cc <_dtoa_r+0xe94>
   44da8:	d9000317 	ldw	r4,12(sp)
   44dac:	900d883a 	mov	r6,r18
   44db0:	980f883a 	mov	r7,r19
   44db4:	880b883a 	mov	r5,r17
   44db8:	004a3540 	call	4a354 <__divdf3>
   44dbc:	180b883a 	mov	r5,r3
   44dc0:	1009883a 	mov	r4,r2
   44dc4:	004a7b80 	call	4a7b8 <__fixdfsi>
   44dc8:	1009883a 	mov	r4,r2
   44dcc:	102b883a 	mov	r21,r2
   44dd0:	004a6e40 	call	4a6e4 <__floatsidf>
   44dd4:	1009883a 	mov	r4,r2
   44dd8:	180b883a 	mov	r5,r3
   44ddc:	900d883a 	mov	r6,r18
   44de0:	980f883a 	mov	r7,r19
   44de4:	004a0700 	call	4a070 <__muldf3>
   44de8:	d9000317 	ldw	r4,12(sp)
   44dec:	880b883a 	mov	r5,r17
   44df0:	100d883a 	mov	r6,r2
   44df4:	180f883a 	mov	r7,r3
   44df8:	004a0100 	call	4a010 <__subdf3>
   44dfc:	d9c00917 	ldw	r7,36(sp)
   44e00:	1009883a 	mov	r4,r2
   44e04:	a8800c04 	addi	r2,r21,48
   44e08:	b8800005 	stb	r2,0(r23)
   44e0c:	01800044 	movi	r6,1
   44e10:	180b883a 	mov	r5,r3
   44e14:	2005883a 	mov	r2,r4
   44e18:	bd800044 	addi	r22,r23,1
   44e1c:	39803726 	beq	r7,r6,44efc <_dtoa_r+0x8c4>
   44e20:	000d883a 	mov	r6,zero
   44e24:	01d00934 	movhi	r7,16420
   44e28:	004a0700 	call	4a070 <__muldf3>
   44e2c:	1009883a 	mov	r4,r2
   44e30:	180b883a 	mov	r5,r3
   44e34:	000d883a 	mov	r6,zero
   44e38:	000f883a 	mov	r7,zero
   44e3c:	1029883a 	mov	r20,r2
   44e40:	1823883a 	mov	r17,r3
   44e44:	004a5080 	call	4a508 <__eqdf2>
   44e48:	103f9c26 	beq	r2,zero,44cbc <_dtoa_r+0x684>
   44e4c:	dd400917 	ldw	r21,36(sp)
   44e50:	dc000415 	stw	r16,16(sp)
   44e54:	00000906 	br	44e7c <_dtoa_r+0x844>
   44e58:	004a0700 	call	4a070 <__muldf3>
   44e5c:	1009883a 	mov	r4,r2
   44e60:	180b883a 	mov	r5,r3
   44e64:	000d883a 	mov	r6,zero
   44e68:	000f883a 	mov	r7,zero
   44e6c:	1029883a 	mov	r20,r2
   44e70:	1823883a 	mov	r17,r3
   44e74:	004a5080 	call	4a508 <__eqdf2>
   44e78:	10022926 	beq	r2,zero,45720 <_dtoa_r+0x10e8>
   44e7c:	900d883a 	mov	r6,r18
   44e80:	980f883a 	mov	r7,r19
   44e84:	a009883a 	mov	r4,r20
   44e88:	880b883a 	mov	r5,r17
   44e8c:	004a3540 	call	4a354 <__divdf3>
   44e90:	180b883a 	mov	r5,r3
   44e94:	1009883a 	mov	r4,r2
   44e98:	004a7b80 	call	4a7b8 <__fixdfsi>
   44e9c:	1009883a 	mov	r4,r2
   44ea0:	1021883a 	mov	r16,r2
   44ea4:	004a6e40 	call	4a6e4 <__floatsidf>
   44ea8:	1009883a 	mov	r4,r2
   44eac:	180b883a 	mov	r5,r3
   44eb0:	900d883a 	mov	r6,r18
   44eb4:	980f883a 	mov	r7,r19
   44eb8:	004a0700 	call	4a070 <__muldf3>
   44ebc:	a009883a 	mov	r4,r20
   44ec0:	880b883a 	mov	r5,r17
   44ec4:	100d883a 	mov	r6,r2
   44ec8:	180f883a 	mov	r7,r3
   44ecc:	004a0100 	call	4a010 <__subdf3>
   44ed0:	82400c04 	addi	r9,r16,48
   44ed4:	b2400005 	stb	r9,0(r22)
   44ed8:	b5800044 	addi	r22,r22,1
   44edc:	b5d3c83a 	sub	r9,r22,r23
   44ee0:	000d883a 	mov	r6,zero
   44ee4:	01d00934 	movhi	r7,16420
   44ee8:	1009883a 	mov	r4,r2
   44eec:	180b883a 	mov	r5,r3
   44ef0:	aa7fd91e 	bne	r21,r9,44e58 <_dtoa_r+0x820>
   44ef4:	802b883a 	mov	r21,r16
   44ef8:	dc000417 	ldw	r16,16(sp)
   44efc:	1009883a 	mov	r4,r2
   44f00:	180b883a 	mov	r5,r3
   44f04:	100d883a 	mov	r6,r2
   44f08:	180f883a 	mov	r7,r3
   44f0c:	0049fbc0 	call	49fbc <__adddf3>
   44f10:	9009883a 	mov	r4,r18
   44f14:	980b883a 	mov	r5,r19
   44f18:	100d883a 	mov	r6,r2
   44f1c:	180f883a 	mov	r7,r3
   44f20:	1023883a 	mov	r17,r2
   44f24:	1829883a 	mov	r20,r3
   44f28:	004a6880 	call	4a688 <__ltdf2>
   44f2c:	10000816 	blt	r2,zero,44f50 <_dtoa_r+0x918>
   44f30:	9009883a 	mov	r4,r18
   44f34:	980b883a 	mov	r5,r19
   44f38:	880d883a 	mov	r6,r17
   44f3c:	a00f883a 	mov	r7,r20
   44f40:	004a5080 	call	4a508 <__eqdf2>
   44f44:	103f5d1e 	bne	r2,zero,44cbc <_dtoa_r+0x684>
   44f48:	ad40004c 	andi	r21,r21,1
   44f4c:	a83f5b26 	beq	r21,zero,44cbc <_dtoa_r+0x684>
   44f50:	b53fffc3 	ldbu	r20,-1(r22)
   44f54:	b0ffff84 	addi	r3,r22,-2
   44f58:	01400e44 	movi	r5,57
   44f5c:	00000306 	br	44f6c <_dtoa_r+0x934>
   44f60:	1d000003 	ldbu	r20,0(r3)
   44f64:	102d883a 	mov	r22,r2
   44f68:	18ffffc4 	addi	r3,r3,-1
   44f6c:	a1003fcc 	andi	r4,r20,255
   44f70:	2100201c 	xori	r4,r4,128
   44f74:	213fe004 	addi	r4,r4,-128
   44f78:	b0bfffc4 	addi	r2,r22,-1
   44f7c:	2142ca1e 	bne	r4,r5,45aa8 <_dtoa_r+0x1470>
   44f80:	b8bff71e 	bne	r23,r2,44f60 <_dtoa_r+0x928>
   44f84:	d8800617 	ldw	r2,24(sp)
   44f88:	05000c44 	movi	r20,49
   44f8c:	10800044 	addi	r2,r2,1
   44f90:	d8800615 	stw	r2,24(sp)
   44f94:	00800c04 	movi	r2,48
   44f98:	b8800005 	stb	r2,0(r23)
   44f9c:	b805883a 	mov	r2,r23
   44fa0:	15000005 	stb	r20,0(r2)
   44fa4:	003f4506 	br	44cbc <_dtoa_r+0x684>
   44fa8:	d9c00c17 	ldw	r7,48(sp)
   44fac:	3800c926 	beq	r7,zero,452d4 <_dtoa_r+0xc9c>
   44fb0:	d9c00417 	ldw	r7,16(sp)
   44fb4:	00c00044 	movi	r3,1
   44fb8:	19c16c0e 	bge	r3,r7,4556c <_dtoa_r+0xf34>
   44fbc:	d9000917 	ldw	r4,36(sp)
   44fc0:	d9c00a17 	ldw	r7,40(sp)
   44fc4:	24ffffc4 	addi	r19,r4,-1
   44fc8:	3cc20716 	blt	r7,r19,457e8 <_dtoa_r+0x11b0>
   44fcc:	3ce7c83a 	sub	r19,r7,r19
   44fd0:	d9c00917 	ldw	r7,36(sp)
   44fd4:	3802ae16 	blt	r7,zero,45a90 <_dtoa_r+0x1458>
   44fd8:	dc800817 	ldw	r18,32(sp)
   44fdc:	d8800917 	ldw	r2,36(sp)
   44fe0:	d8c00817 	ldw	r3,32(sp)
   44fe4:	d9c00717 	ldw	r7,28(sp)
   44fe8:	8009883a 	mov	r4,r16
   44fec:	1887883a 	add	r3,r3,r2
   44ff0:	388f883a 	add	r7,r7,r2
   44ff4:	01400044 	movi	r5,1
   44ff8:	d8c00815 	stw	r3,32(sp)
   44ffc:	d9c00715 	stw	r7,28(sp)
   45000:	00476fc0 	call	476fc <__i2b>
   45004:	102b883a 	mov	r21,r2
   45008:	90000a26 	beq	r18,zero,45034 <_dtoa_r+0x9fc>
   4500c:	d8800717 	ldw	r2,28(sp)
   45010:	0080080e 	bge	zero,r2,45034 <_dtoa_r+0x9fc>
   45014:	90812b16 	blt	r18,r2,454c4 <_dtoa_r+0xe8c>
   45018:	d8c00817 	ldw	r3,32(sp)
   4501c:	d9000717 	ldw	r4,28(sp)
   45020:	90a5c83a 	sub	r18,r18,r2
   45024:	1887c83a 	sub	r3,r3,r2
   45028:	2089c83a 	sub	r4,r4,r2
   4502c:	d8c00815 	stw	r3,32(sp)
   45030:	d9000715 	stw	r4,28(sp)
   45034:	d9c00a17 	ldw	r7,40(sp)
   45038:	01c0140e 	bge	zero,r7,4508c <_dtoa_r+0xa54>
   4503c:	d8800c17 	ldw	r2,48(sp)
   45040:	1001de26 	beq	r2,zero,457bc <_dtoa_r+0x1184>
   45044:	04c00e0e 	bge	zero,r19,45080 <_dtoa_r+0xa48>
   45048:	a80b883a 	mov	r5,r21
   4504c:	8009883a 	mov	r4,r16
   45050:	980d883a 	mov	r6,r19
   45054:	00479900 	call	47990 <__pow5mult>
   45058:	e00d883a 	mov	r6,fp
   4505c:	8009883a 	mov	r4,r16
   45060:	100b883a 	mov	r5,r2
   45064:	102b883a 	mov	r21,r2
   45068:	00477380 	call	47738 <__multiply>
   4506c:	1029883a 	mov	r20,r2
   45070:	e00b883a 	mov	r5,fp
   45074:	8009883a 	mov	r4,r16
   45078:	00473740 	call	47374 <_Bfree>
   4507c:	a039883a 	mov	fp,r20
   45080:	d8c00a17 	ldw	r3,40(sp)
   45084:	1ccdc83a 	sub	r6,r3,r19
   45088:	3001291e 	bne	r6,zero,45530 <_dtoa_r+0xef8>
   4508c:	8009883a 	mov	r4,r16
   45090:	01400044 	movi	r5,1
   45094:	00476fc0 	call	476fc <__i2b>
   45098:	d9000b17 	ldw	r4,44(sp)
   4509c:	1029883a 	mov	r20,r2
   450a0:	0100050e 	bge	zero,r4,450b8 <_dtoa_r+0xa80>
   450a4:	d9800b17 	ldw	r6,44(sp)
   450a8:	8009883a 	mov	r4,r16
   450ac:	100b883a 	mov	r5,r2
   450b0:	00479900 	call	47990 <__pow5mult>
   450b4:	1029883a 	mov	r20,r2
   450b8:	d9c00417 	ldw	r7,16(sp)
   450bc:	00800044 	movi	r2,1
   450c0:	11c0f00e 	bge	r2,r7,45484 <_dtoa_r+0xe4c>
   450c4:	0023883a 	mov	r17,zero
   450c8:	d8800b17 	ldw	r2,44(sp)
   450cc:	1001741e 	bne	r2,zero,456a0 <_dtoa_r+0x1068>
   450d0:	00800044 	movi	r2,1
   450d4:	d8c00717 	ldw	r3,28(sp)
   450d8:	10c5883a 	add	r2,r2,r3
   450dc:	108007cc 	andi	r2,r2,31
   450e0:	10008026 	beq	r2,zero,452e4 <_dtoa_r+0xcac>
   450e4:	01000804 	movi	r4,32
   450e8:	2089c83a 	sub	r4,r4,r2
   450ec:	00c00104 	movi	r3,4
   450f0:	1902d00e 	bge	r3,r4,45c34 <_dtoa_r+0x15fc>
   450f4:	d9000817 	ldw	r4,32(sp)
   450f8:	d9c00717 	ldw	r7,28(sp)
   450fc:	00c00704 	movi	r3,28
   45100:	1885c83a 	sub	r2,r3,r2
   45104:	2089883a 	add	r4,r4,r2
   45108:	388f883a 	add	r7,r7,r2
   4510c:	d9000815 	stw	r4,32(sp)
   45110:	90a5883a 	add	r18,r18,r2
   45114:	d9c00715 	stw	r7,28(sp)
   45118:	d9c00817 	ldw	r7,32(sp)
   4511c:	01c0050e 	bge	zero,r7,45134 <_dtoa_r+0xafc>
   45120:	e00b883a 	mov	r5,fp
   45124:	8009883a 	mov	r4,r16
   45128:	380d883a 	mov	r6,r7
   4512c:	0047abc0 	call	47abc <__lshift>
   45130:	1039883a 	mov	fp,r2
   45134:	d8800717 	ldw	r2,28(sp)
   45138:	0080050e 	bge	zero,r2,45150 <_dtoa_r+0xb18>
   4513c:	a00b883a 	mov	r5,r20
   45140:	8009883a 	mov	r4,r16
   45144:	100d883a 	mov	r6,r2
   45148:	0047abc0 	call	47abc <__lshift>
   4514c:	1029883a 	mov	r20,r2
   45150:	d8c00d17 	ldw	r3,52(sp)
   45154:	1801401e 	bne	r3,zero,45658 <_dtoa_r+0x1020>
   45158:	d8800917 	ldw	r2,36(sp)
   4515c:	00815a0e 	bge	zero,r2,456c8 <_dtoa_r+0x1090>
   45160:	d8c00c17 	ldw	r3,48(sp)
   45164:	18006f1e 	bne	r3,zero,45324 <_dtoa_r+0xcec>
   45168:	b823883a 	mov	r17,r23
   4516c:	dc800917 	ldw	r18,36(sp)
   45170:	00000206 	br	4517c <_dtoa_r+0xb44>
   45174:	004739c0 	call	4739c <__multadd>
   45178:	1039883a 	mov	fp,r2
   4517c:	e009883a 	mov	r4,fp
   45180:	a00b883a 	mov	r5,r20
   45184:	00443fc0 	call	443fc <quorem>
   45188:	10800c04 	addi	r2,r2,48
   4518c:	88800005 	stb	r2,0(r17)
   45190:	8c400044 	addi	r17,r17,1
   45194:	8dc7c83a 	sub	r3,r17,r23
   45198:	8009883a 	mov	r4,r16
   4519c:	e00b883a 	mov	r5,fp
   451a0:	01800284 	movi	r6,10
   451a4:	000f883a 	mov	r7,zero
   451a8:	1cbff216 	blt	r3,r18,45174 <_dtoa_r+0xb3c>
   451ac:	dd800917 	ldw	r22,36(sp)
   451b0:	1007883a 	mov	r3,r2
   451b4:	05823a0e 	bge	zero,r22,45aa0 <_dtoa_r+0x1468>
   451b8:	bdad883a 	add	r22,r23,r22
   451bc:	0023883a 	mov	r17,zero
   451c0:	e00b883a 	mov	r5,fp
   451c4:	01800044 	movi	r6,1
   451c8:	8009883a 	mov	r4,r16
   451cc:	d8c01515 	stw	r3,84(sp)
   451d0:	0047abc0 	call	47abc <__lshift>
   451d4:	1009883a 	mov	r4,r2
   451d8:	a00b883a 	mov	r5,r20
   451dc:	1039883a 	mov	fp,r2
   451e0:	0047c180 	call	47c18 <__mcmp>
   451e4:	d8c01517 	ldw	r3,84(sp)
   451e8:	0080d60e 	bge	zero,r2,45544 <_dtoa_r+0xf0c>
   451ec:	b13fffc3 	ldbu	r4,-1(r22)
   451f0:	b0ffff84 	addi	r3,r22,-2
   451f4:	01800e44 	movi	r6,57
   451f8:	00000306 	br	45208 <_dtoa_r+0xbd0>
   451fc:	19000003 	ldbu	r4,0(r3)
   45200:	102d883a 	mov	r22,r2
   45204:	18ffffc4 	addi	r3,r3,-1
   45208:	21403fcc 	andi	r5,r4,255
   4520c:	2940201c 	xori	r5,r5,128
   45210:	297fe004 	addi	r5,r5,-128
   45214:	b0bfffc4 	addi	r2,r22,-1
   45218:	2981a71e 	bne	r5,r6,458b8 <_dtoa_r+0x1280>
   4521c:	b8bff71e 	bne	r23,r2,451fc <_dtoa_r+0xbc4>
   45220:	d8800617 	ldw	r2,24(sp)
   45224:	10800044 	addi	r2,r2,1
   45228:	d8800615 	stw	r2,24(sp)
   4522c:	00800c44 	movi	r2,49
   45230:	b8800005 	stb	r2,0(r23)
   45234:	8009883a 	mov	r4,r16
   45238:	a00b883a 	mov	r5,r20
   4523c:	00473740 	call	47374 <_Bfree>
   45240:	a83e9e26 	beq	r21,zero,44cbc <_dtoa_r+0x684>
   45244:	88000426 	beq	r17,zero,45258 <_dtoa_r+0xc20>
   45248:	8d400326 	beq	r17,r21,45258 <_dtoa_r+0xc20>
   4524c:	8009883a 	mov	r4,r16
   45250:	880b883a 	mov	r5,r17
   45254:	00473740 	call	47374 <_Bfree>
   45258:	8009883a 	mov	r4,r16
   4525c:	a80b883a 	mov	r5,r21
   45260:	00473740 	call	47374 <_Bfree>
   45264:	003e9506 	br	44cbc <_dtoa_r+0x684>
   45268:	00c00044 	movi	r3,1
   4526c:	d8c00d15 	stw	r3,52(sp)
   45270:	003d9f06 	br	448f0 <_dtoa_r+0x2b8>
   45274:	d9000817 	ldw	r4,32(sp)
   45278:	d8800617 	ldw	r2,24(sp)
   4527c:	d8000b15 	stw	zero,44(sp)
   45280:	2089c83a 	sub	r4,r4,r2
   45284:	0087c83a 	sub	r3,zero,r2
   45288:	d9000815 	stw	r4,32(sp)
   4528c:	d8c00a15 	stw	r3,40(sp)
   45290:	003da306 	br	44920 <_dtoa_r+0x2e8>
   45294:	0529c83a 	sub	r20,zero,r20
   45298:	dd000815 	stw	r20,32(sp)
   4529c:	d8000715 	stw	zero,28(sp)
   452a0:	003d9806 	br	44904 <_dtoa_r+0x2cc>
   452a4:	d9000617 	ldw	r4,24(sp)
   452a8:	004a6e40 	call	4a6e4 <__floatsidf>
   452ac:	1009883a 	mov	r4,r2
   452b0:	180b883a 	mov	r5,r3
   452b4:	980d883a 	mov	r6,r19
   452b8:	900f883a 	mov	r7,r18
   452bc:	004a5640 	call	4a564 <__nedf2>
   452c0:	103d7a26 	beq	r2,zero,448ac <_dtoa_r+0x274>
   452c4:	d8800617 	ldw	r2,24(sp)
   452c8:	10bfffc4 	addi	r2,r2,-1
   452cc:	d8800615 	stw	r2,24(sp)
   452d0:	003d7606 	br	448ac <_dtoa_r+0x274>
   452d4:	dcc00a17 	ldw	r19,40(sp)
   452d8:	dc800817 	ldw	r18,32(sp)
   452dc:	002b883a 	mov	r21,zero
   452e0:	003f4906 	br	45008 <_dtoa_r+0x9d0>
   452e4:	00800704 	movi	r2,28
   452e8:	d8c00817 	ldw	r3,32(sp)
   452ec:	d9000717 	ldw	r4,28(sp)
   452f0:	90a5883a 	add	r18,r18,r2
   452f4:	1887883a 	add	r3,r3,r2
   452f8:	2089883a 	add	r4,r4,r2
   452fc:	d8c00815 	stw	r3,32(sp)
   45300:	d9000715 	stw	r4,28(sp)
   45304:	003f8406 	br	45118 <_dtoa_r+0xae0>
   45308:	d9c00317 	ldw	r7,12(sp)
   4530c:	013efb84 	movi	r4,-1042
   45310:	2509c83a 	sub	r4,r4,r20
   45314:	3908983a 	sll	r4,r7,r4
   45318:	003d3006 	br	447dc <_dtoa_r+0x1a4>
   4531c:	d8000d15 	stw	zero,52(sp)
   45320:	003d7306 	br	448f0 <_dtoa_r+0x2b8>
   45324:	0480050e 	bge	zero,r18,4533c <_dtoa_r+0xd04>
   45328:	a80b883a 	mov	r5,r21
   4532c:	8009883a 	mov	r4,r16
   45330:	900d883a 	mov	r6,r18
   45334:	0047abc0 	call	47abc <__lshift>
   45338:	102b883a 	mov	r21,r2
   4533c:	8801611e 	bne	r17,zero,458c4 <_dtoa_r+0x128c>
   45340:	a827883a 	mov	r19,r21
   45344:	d8c00317 	ldw	r3,12(sp)
   45348:	d9000917 	ldw	r4,36(sp)
   4534c:	b8bfffc4 	addi	r2,r23,-1
   45350:	18c0004c 	andi	r3,r3,1
   45354:	1105883a 	add	r2,r2,r4
   45358:	b825883a 	mov	r18,r23
   4535c:	d8800515 	stw	r2,20(sp)
   45360:	a823883a 	mov	r17,r21
   45364:	d8c00315 	stw	r3,12(sp)
   45368:	ddc00715 	stw	r23,28(sp)
   4536c:	e009883a 	mov	r4,fp
   45370:	a00b883a 	mov	r5,r20
   45374:	00443fc0 	call	443fc <quorem>
   45378:	e009883a 	mov	r4,fp
   4537c:	880b883a 	mov	r5,r17
   45380:	102d883a 	mov	r22,r2
   45384:	0047c180 	call	47c18 <__mcmp>
   45388:	980d883a 	mov	r6,r19
   4538c:	8009883a 	mov	r4,r16
   45390:	a00b883a 	mov	r5,r20
   45394:	102b883a 	mov	r21,r2
   45398:	0047c700 	call	47c70 <__mdiff>
   4539c:	100d883a 	mov	r6,r2
   453a0:	10800317 	ldw	r2,12(r2)
   453a4:	b5c00c04 	addi	r23,r22,48
   453a8:	10008c26 	beq	r2,zero,455dc <_dtoa_r+0xfa4>
   453ac:	8009883a 	mov	r4,r16
   453b0:	300b883a 	mov	r5,r6
   453b4:	00473740 	call	47374 <_Bfree>
   453b8:	00800044 	movi	r2,1
   453bc:	a8007116 	blt	r21,zero,45584 <_dtoa_r+0xf4c>
   453c0:	a800041e 	bne	r21,zero,453d4 <_dtoa_r+0xd9c>
   453c4:	d9c00417 	ldw	r7,16(sp)
   453c8:	3800021e 	bne	r7,zero,453d4 <_dtoa_r+0xd9c>
   453cc:	d8c00317 	ldw	r3,12(sp)
   453d0:	18006c26 	beq	r3,zero,45584 <_dtoa_r+0xf4c>
   453d4:	00814c16 	blt	zero,r2,45908 <_dtoa_r+0x12d0>
   453d8:	d8c00517 	ldw	r3,20(sp)
   453dc:	95400044 	addi	r21,r18,1
   453e0:	95c00005 	stb	r23,0(r18)
   453e4:	a82d883a 	mov	r22,r21
   453e8:	90c14d26 	beq	r18,r3,45920 <_dtoa_r+0x12e8>
   453ec:	e00b883a 	mov	r5,fp
   453f0:	8009883a 	mov	r4,r16
   453f4:	01800284 	movi	r6,10
   453f8:	000f883a 	mov	r7,zero
   453fc:	004739c0 	call	4739c <__multadd>
   45400:	1039883a 	mov	fp,r2
   45404:	8cc08b26 	beq	r17,r19,45634 <_dtoa_r+0xffc>
   45408:	880b883a 	mov	r5,r17
   4540c:	01800284 	movi	r6,10
   45410:	000f883a 	mov	r7,zero
   45414:	8009883a 	mov	r4,r16
   45418:	004739c0 	call	4739c <__multadd>
   4541c:	980b883a 	mov	r5,r19
   45420:	8009883a 	mov	r4,r16
   45424:	01800284 	movi	r6,10
   45428:	000f883a 	mov	r7,zero
   4542c:	1023883a 	mov	r17,r2
   45430:	004739c0 	call	4739c <__multadd>
   45434:	1027883a 	mov	r19,r2
   45438:	a825883a 	mov	r18,r21
   4543c:	003fcb06 	br	4536c <_dtoa_r+0xd34>
   45440:	d9c00417 	ldw	r7,16(sp)
   45444:	00800104 	movi	r2,4
   45448:	3880e426 	beq	r7,r2,457dc <_dtoa_r+0x11a4>
   4544c:	00800144 	movi	r2,5
   45450:	38be3c1e 	bne	r7,r2,44d44 <_dtoa_r+0x70c>
   45454:	00c00044 	movi	r3,1
   45458:	d8c00c15 	stw	r3,48(sp)
   4545c:	d9c02117 	ldw	r7,132(sp)
   45460:	d8800617 	ldw	r2,24(sp)
   45464:	388f883a 	add	r7,r7,r2
   45468:	3c800044 	addi	r18,r7,1
   4546c:	d9c00e15 	stw	r7,56(sp)
   45470:	dc800915 	stw	r18,36(sp)
   45474:	04bd3e16 	blt	zero,r18,44970 <_dtoa_r+0x338>
   45478:	80001115 	stw	zero,68(r16)
   4547c:	000b883a 	mov	r5,zero
   45480:	003d4606 	br	4499c <_dtoa_r+0x364>
   45484:	d8c00317 	ldw	r3,12(sp)
   45488:	183f0e1e 	bne	r3,zero,450c4 <_dtoa_r+0xa8c>
   4548c:	00c00434 	movhi	r3,16
   45490:	18ffffc4 	addi	r3,r3,-1
   45494:	88c6703a 	and	r3,r17,r3
   45498:	183f0a1e 	bne	r3,zero,450c4 <_dtoa_r+0xa8c>
   4549c:	8c5ffc2c 	andhi	r17,r17,32752
   454a0:	883f0826 	beq	r17,zero,450c4 <_dtoa_r+0xa8c>
   454a4:	d9000817 	ldw	r4,32(sp)
   454a8:	d9c00717 	ldw	r7,28(sp)
   454ac:	1023883a 	mov	r17,r2
   454b0:	2089883a 	add	r4,r4,r2
   454b4:	388f883a 	add	r7,r7,r2
   454b8:	d9000815 	stw	r4,32(sp)
   454bc:	d9c00715 	stw	r7,28(sp)
   454c0:	003f0106 	br	450c8 <_dtoa_r+0xa90>
   454c4:	9005883a 	mov	r2,r18
   454c8:	003ed306 	br	45018 <_dtoa_r+0x9e0>
   454cc:	d8800917 	ldw	r2,36(sp)
   454d0:	00be3516 	blt	zero,r2,44da8 <_dtoa_r+0x770>
   454d4:	1000b61e 	bne	r2,zero,457b0 <_dtoa_r+0x1178>
   454d8:	9009883a 	mov	r4,r18
   454dc:	980b883a 	mov	r5,r19
   454e0:	000d883a 	mov	r6,zero
   454e4:	01d00534 	movhi	r7,16404
   454e8:	004a0700 	call	4a070 <__muldf3>
   454ec:	d9800317 	ldw	r6,12(sp)
   454f0:	1009883a 	mov	r4,r2
   454f4:	180b883a 	mov	r5,r3
   454f8:	880f883a 	mov	r7,r17
   454fc:	004a6240 	call	4a624 <__gedf2>
   45500:	0029883a 	mov	r20,zero
   45504:	002b883a 	mov	r21,zero
   45508:	10007e16 	blt	r2,zero,45704 <_dtoa_r+0x10cc>
   4550c:	d8802117 	ldw	r2,132(sp)
   45510:	b82d883a 	mov	r22,r23
   45514:	0084303a 	nor	r2,zero,r2
   45518:	d8800615 	stw	r2,24(sp)
   4551c:	8009883a 	mov	r4,r16
   45520:	a00b883a 	mov	r5,r20
   45524:	00473740 	call	47374 <_Bfree>
   45528:	a83f4b1e 	bne	r21,zero,45258 <_dtoa_r+0xc20>
   4552c:	003de306 	br	44cbc <_dtoa_r+0x684>
   45530:	e00b883a 	mov	r5,fp
   45534:	8009883a 	mov	r4,r16
   45538:	00479900 	call	47990 <__pow5mult>
   4553c:	1039883a 	mov	fp,r2
   45540:	003ed206 	br	4508c <_dtoa_r+0xa54>
   45544:	1000021e 	bne	r2,zero,45550 <_dtoa_r+0xf18>
   45548:	18c0004c 	andi	r3,r3,1
   4554c:	183f271e 	bne	r3,zero,451ec <_dtoa_r+0xbb4>
   45550:	01000c04 	movi	r4,48
   45554:	00000106 	br	4555c <_dtoa_r+0xf24>
   45558:	102d883a 	mov	r22,r2
   4555c:	b0bfffc4 	addi	r2,r22,-1
   45560:	10c00007 	ldb	r3,0(r2)
   45564:	193ffc26 	beq	r3,r4,45558 <_dtoa_r+0xf20>
   45568:	003f3206 	br	45234 <_dtoa_r+0xbfc>
   4556c:	d8c00f17 	ldw	r3,60(sp)
   45570:	18015026 	beq	r3,zero,45ab4 <_dtoa_r+0x147c>
   45574:	10810cc4 	addi	r2,r2,1075
   45578:	dcc00a17 	ldw	r19,40(sp)
   4557c:	dc800817 	ldw	r18,32(sp)
   45580:	003e9706 	br	44fe0 <_dtoa_r+0x9a8>
   45584:	b807883a 	mov	r3,r23
   45588:	182b883a 	mov	r21,r3
   4558c:	ddc00717 	ldw	r23,28(sp)
   45590:	00800e0e 	bge	zero,r2,455cc <_dtoa_r+0xf94>
   45594:	e00b883a 	mov	r5,fp
   45598:	01800044 	movi	r6,1
   4559c:	8009883a 	mov	r4,r16
   455a0:	d8c01515 	stw	r3,84(sp)
   455a4:	0047abc0 	call	47abc <__lshift>
   455a8:	1009883a 	mov	r4,r2
   455ac:	a00b883a 	mov	r5,r20
   455b0:	1039883a 	mov	fp,r2
   455b4:	0047c180 	call	47c18 <__mcmp>
   455b8:	d8c01517 	ldw	r3,84(sp)
   455bc:	0081880e 	bge	zero,r2,45be0 <_dtoa_r+0x15a8>
   455c0:	00800e44 	movi	r2,57
   455c4:	b0c00c44 	addi	r3,r22,49
   455c8:	a8816326 	beq	r21,r2,45b58 <_dtoa_r+0x1520>
   455cc:	90c00005 	stb	r3,0(r18)
   455d0:	95800044 	addi	r22,r18,1
   455d4:	982b883a 	mov	r21,r19
   455d8:	003f1606 	br	45234 <_dtoa_r+0xbfc>
   455dc:	300b883a 	mov	r5,r6
   455e0:	e009883a 	mov	r4,fp
   455e4:	d9801515 	stw	r6,84(sp)
   455e8:	0047c180 	call	47c18 <__mcmp>
   455ec:	d9801517 	ldw	r6,84(sp)
   455f0:	8009883a 	mov	r4,r16
   455f4:	d8801515 	stw	r2,84(sp)
   455f8:	300b883a 	mov	r5,r6
   455fc:	00473740 	call	47374 <_Bfree>
   45600:	d8801517 	ldw	r2,84(sp)
   45604:	103f6d1e 	bne	r2,zero,453bc <_dtoa_r+0xd84>
   45608:	d9c00417 	ldw	r7,16(sp)
   4560c:	383f6b1e 	bne	r7,zero,453bc <_dtoa_r+0xd84>
   45610:	d8c00317 	ldw	r3,12(sp)
   45614:	183f691e 	bne	r3,zero,453bc <_dtoa_r+0xd84>
   45618:	b807883a 	mov	r3,r23
   4561c:	00800e44 	movi	r2,57
   45620:	ddc00717 	ldw	r23,28(sp)
   45624:	18814c26 	beq	r3,r2,45b58 <_dtoa_r+0x1520>
   45628:	057fe80e 	bge	zero,r21,455cc <_dtoa_r+0xf94>
   4562c:	b0c00c44 	addi	r3,r22,49
   45630:	003fe606 	br	455cc <_dtoa_r+0xf94>
   45634:	880b883a 	mov	r5,r17
   45638:	8009883a 	mov	r4,r16
   4563c:	01800284 	movi	r6,10
   45640:	000f883a 	mov	r7,zero
   45644:	004739c0 	call	4739c <__multadd>
   45648:	1023883a 	mov	r17,r2
   4564c:	1027883a 	mov	r19,r2
   45650:	a825883a 	mov	r18,r21
   45654:	003f4506 	br	4536c <_dtoa_r+0xd34>
   45658:	e009883a 	mov	r4,fp
   4565c:	a00b883a 	mov	r5,r20
   45660:	0047c180 	call	47c18 <__mcmp>
   45664:	103ebc0e 	bge	r2,zero,45158 <_dtoa_r+0xb20>
   45668:	e00b883a 	mov	r5,fp
   4566c:	8009883a 	mov	r4,r16
   45670:	01800284 	movi	r6,10
   45674:	000f883a 	mov	r7,zero
   45678:	004739c0 	call	4739c <__multadd>
   4567c:	1039883a 	mov	fp,r2
   45680:	d8800617 	ldw	r2,24(sp)
   45684:	d8c00c17 	ldw	r3,48(sp)
   45688:	10bfffc4 	addi	r2,r2,-1
   4568c:	d8800615 	stw	r2,24(sp)
   45690:	1801571e 	bne	r3,zero,45bf0 <_dtoa_r+0x15b8>
   45694:	d9c00e17 	ldw	r7,56(sp)
   45698:	d9c00915 	stw	r7,36(sp)
   4569c:	003eae06 	br	45158 <_dtoa_r+0xb20>
   456a0:	a0800417 	ldw	r2,16(r20)
   456a4:	10800104 	addi	r2,r2,4
   456a8:	1085883a 	add	r2,r2,r2
   456ac:	1085883a 	add	r2,r2,r2
   456b0:	a085883a 	add	r2,r20,r2
   456b4:	11000017 	ldw	r4,0(r2)
   456b8:	00475e40 	call	475e4 <__hi0bits>
   456bc:	00c00804 	movi	r3,32
   456c0:	1885c83a 	sub	r2,r3,r2
   456c4:	003e8306 	br	450d4 <_dtoa_r+0xa9c>
   456c8:	d9c00417 	ldw	r7,16(sp)
   456cc:	00800084 	movi	r2,2
   456d0:	11fea30e 	bge	r2,r7,45160 <_dtoa_r+0xb28>
   456d4:	d8800917 	ldw	r2,36(sp)
   456d8:	103f8c1e 	bne	r2,zero,4550c <_dtoa_r+0xed4>
   456dc:	a00b883a 	mov	r5,r20
   456e0:	8009883a 	mov	r4,r16
   456e4:	01800144 	movi	r6,5
   456e8:	000f883a 	mov	r7,zero
   456ec:	004739c0 	call	4739c <__multadd>
   456f0:	e009883a 	mov	r4,fp
   456f4:	100b883a 	mov	r5,r2
   456f8:	1029883a 	mov	r20,r2
   456fc:	0047c180 	call	47c18 <__mcmp>
   45700:	00bf820e 	bge	zero,r2,4550c <_dtoa_r+0xed4>
   45704:	00800c44 	movi	r2,49
   45708:	b8800005 	stb	r2,0(r23)
   4570c:	d8800617 	ldw	r2,24(sp)
   45710:	bd800044 	addi	r22,r23,1
   45714:	10800044 	addi	r2,r2,1
   45718:	d8800615 	stw	r2,24(sp)
   4571c:	003f7f06 	br	4551c <_dtoa_r+0xee4>
   45720:	dc000417 	ldw	r16,16(sp)
   45724:	003d6506 	br	44cbc <_dtoa_r+0x684>
   45728:	9009883a 	mov	r4,r18
   4572c:	004a6e40 	call	4a6e4 <__floatsidf>
   45730:	1009883a 	mov	r4,r2
   45734:	180b883a 	mov	r5,r3
   45738:	980d883a 	mov	r6,r19
   4573c:	a00f883a 	mov	r7,r20
   45740:	004a0700 	call	4a070 <__muldf3>
   45744:	1009883a 	mov	r4,r2
   45748:	180b883a 	mov	r5,r3
   4574c:	000d883a 	mov	r6,zero
   45750:	01d00734 	movhi	r7,16412
   45754:	0049fbc0 	call	49fbc <__adddf3>
   45758:	057f3034 	movhi	r21,64704
   4575c:	1025883a 	mov	r18,r2
   45760:	1d6b883a 	add	r21,r3,r21
   45764:	9809883a 	mov	r4,r19
   45768:	a00b883a 	mov	r5,r20
   4576c:	000d883a 	mov	r6,zero
   45770:	01d00534 	movhi	r7,16404
   45774:	004a0100 	call	4a010 <__subdf3>
   45778:	1009883a 	mov	r4,r2
   4577c:	180b883a 	mov	r5,r3
   45780:	900d883a 	mov	r6,r18
   45784:	a80f883a 	mov	r7,r21
   45788:	1027883a 	mov	r19,r2
   4578c:	1829883a 	mov	r20,r3
   45790:	004a5c00 	call	4a5c0 <__gtdf2>
   45794:	00806616 	blt	zero,r2,45930 <_dtoa_r+0x12f8>
   45798:	a9e0003c 	xorhi	r7,r21,32768
   4579c:	9809883a 	mov	r4,r19
   457a0:	a00b883a 	mov	r5,r20
   457a4:	900d883a 	mov	r6,r18
   457a8:	004a6880 	call	4a688 <__ltdf2>
   457ac:	103d710e 	bge	r2,zero,44d74 <_dtoa_r+0x73c>
   457b0:	0029883a 	mov	r20,zero
   457b4:	002b883a 	mov	r21,zero
   457b8:	003f5406 	br	4550c <_dtoa_r+0xed4>
   457bc:	d9800a17 	ldw	r6,40(sp)
   457c0:	e00b883a 	mov	r5,fp
   457c4:	8009883a 	mov	r4,r16
   457c8:	00479900 	call	47990 <__pow5mult>
   457cc:	1039883a 	mov	fp,r2
   457d0:	003e2e06 	br	4508c <_dtoa_r+0xa54>
   457d4:	d8000c15 	stw	zero,48(sp)
   457d8:	003f2006 	br	4545c <_dtoa_r+0xe24>
   457dc:	00800044 	movi	r2,1
   457e0:	d8800c15 	stw	r2,48(sp)
   457e4:	003c5d06 	br	4495c <_dtoa_r+0x324>
   457e8:	d8c00a17 	ldw	r3,40(sp)
   457ec:	d9000b17 	ldw	r4,44(sp)
   457f0:	dcc00a15 	stw	r19,40(sp)
   457f4:	98c5c83a 	sub	r2,r19,r3
   457f8:	2089883a 	add	r4,r4,r2
   457fc:	d9000b15 	stw	r4,44(sp)
   45800:	0027883a 	mov	r19,zero
   45804:	003df206 	br	44fd0 <_dtoa_r+0x998>
   45808:	d9000317 	ldw	r4,12(sp)
   4580c:	8829883a 	mov	r20,r17
   45810:	04800084 	movi	r18,2
   45814:	d9001015 	stw	r4,64(sp)
   45818:	003c8106 	br	44a20 <_dtoa_r+0x3e8>
   4581c:	04800044 	movi	r18,1
   45820:	dc800e15 	stw	r18,56(sp)
   45824:	dc800915 	stw	r18,36(sp)
   45828:	dc802115 	stw	r18,132(sp)
   4582c:	003f1206 	br	45478 <_dtoa_r+0xe40>
   45830:	d8800617 	ldw	r2,24(sp)
   45834:	00abc83a 	sub	r21,zero,r2
   45838:	a800a426 	beq	r21,zero,45acc <_dtoa_r+0x1494>
   4583c:	a88003cc 	andi	r2,r21,15
   45840:	100490fa 	slli	r2,r2,3
   45844:	00c00174 	movhi	r3,5
   45848:	18f87904 	addi	r3,r3,-7708
   4584c:	d9000317 	ldw	r4,12(sp)
   45850:	1885883a 	add	r2,r3,r2
   45854:	11800017 	ldw	r6,0(r2)
   45858:	11c00117 	ldw	r7,4(r2)
   4585c:	a82bd13a 	srai	r21,r21,4
   45860:	880b883a 	mov	r5,r17
   45864:	004a0700 	call	4a070 <__muldf3>
   45868:	1027883a 	mov	r19,r2
   4586c:	1829883a 	mov	r20,r3
   45870:	a800e826 	beq	r21,zero,45c14 <_dtoa_r+0x15dc>
   45874:	05800174 	movhi	r22,5
   45878:	b5b86f04 	addi	r22,r22,-7748
   4587c:	04800084 	movi	r18,2
   45880:	a980004c 	andi	r6,r21,1
   45884:	1009883a 	mov	r4,r2
   45888:	a82bd07a 	srai	r21,r21,1
   4588c:	180b883a 	mov	r5,r3
   45890:	30000426 	beq	r6,zero,458a4 <_dtoa_r+0x126c>
   45894:	b1800017 	ldw	r6,0(r22)
   45898:	b1c00117 	ldw	r7,4(r22)
   4589c:	94800044 	addi	r18,r18,1
   458a0:	004a0700 	call	4a070 <__muldf3>
   458a4:	b5800204 	addi	r22,r22,8
   458a8:	a83ff51e 	bne	r21,zero,45880 <_dtoa_r+0x1248>
   458ac:	1027883a 	mov	r19,r2
   458b0:	1829883a 	mov	r20,r3
   458b4:	003c7306 	br	44a84 <_dtoa_r+0x44c>
   458b8:	21000044 	addi	r4,r4,1
   458bc:	11000005 	stb	r4,0(r2)
   458c0:	003e5c06 	br	45234 <_dtoa_r+0xbfc>
   458c4:	a9400117 	ldw	r5,4(r21)
   458c8:	8009883a 	mov	r4,r16
   458cc:	00472cc0 	call	472cc <_Balloc>
   458d0:	a9800417 	ldw	r6,16(r21)
   458d4:	11000304 	addi	r4,r2,12
   458d8:	a9400304 	addi	r5,r21,12
   458dc:	31800084 	addi	r6,r6,2
   458e0:	318d883a 	add	r6,r6,r6
   458e4:	318d883a 	add	r6,r6,r6
   458e8:	1023883a 	mov	r17,r2
   458ec:	0046f240 	call	46f24 <memcpy>
   458f0:	8009883a 	mov	r4,r16
   458f4:	880b883a 	mov	r5,r17
   458f8:	01800044 	movi	r6,1
   458fc:	0047abc0 	call	47abc <__lshift>
   45900:	1027883a 	mov	r19,r2
   45904:	003e8f06 	br	45344 <_dtoa_r+0xd0c>
   45908:	b807883a 	mov	r3,r23
   4590c:	00800e44 	movi	r2,57
   45910:	ddc00717 	ldw	r23,28(sp)
   45914:	18809026 	beq	r3,r2,45b58 <_dtoa_r+0x1520>
   45918:	18c00044 	addi	r3,r3,1
   4591c:	003f2b06 	br	455cc <_dtoa_r+0xf94>
   45920:	b807883a 	mov	r3,r23
   45924:	982b883a 	mov	r21,r19
   45928:	ddc00717 	ldw	r23,28(sp)
   4592c:	003e2406 	br	451c0 <_dtoa_r+0xb88>
   45930:	0029883a 	mov	r20,zero
   45934:	002b883a 	mov	r21,zero
   45938:	003f7206 	br	45704 <_dtoa_r+0x10cc>
   4593c:	593fffc4 	addi	r4,r11,-1
   45940:	200490fa 	slli	r2,r4,3
   45944:	00c00174 	movhi	r3,5
   45948:	18f87904 	addi	r3,r3,-7708
   4594c:	d9001015 	stw	r4,64(sp)
   45950:	1885883a 	add	r2,r3,r2
   45954:	11000017 	ldw	r4,0(r2)
   45958:	11400117 	ldw	r5,4(r2)
   4595c:	900d883a 	mov	r6,r18
   45960:	a80f883a 	mov	r7,r21
   45964:	dac01615 	stw	r11,88(sp)
   45968:	004a0700 	call	4a070 <__muldf3>
   4596c:	a00b883a 	mov	r5,r20
   45970:	9809883a 	mov	r4,r19
   45974:	d8c01215 	stw	r3,72(sp)
   45978:	d8801115 	stw	r2,68(sp)
   4597c:	004a7b80 	call	4a7b8 <__fixdfsi>
   45980:	1009883a 	mov	r4,r2
   45984:	1025883a 	mov	r18,r2
   45988:	004a6e40 	call	4a6e4 <__floatsidf>
   4598c:	9809883a 	mov	r4,r19
   45990:	a00b883a 	mov	r5,r20
   45994:	100d883a 	mov	r6,r2
   45998:	180f883a 	mov	r7,r3
   4599c:	94800c04 	addi	r18,r18,48
   459a0:	004a0100 	call	4a010 <__subdf3>
   459a4:	bc800005 	stb	r18,0(r23)
   459a8:	dac01617 	ldw	r11,88(sp)
   459ac:	102b883a 	mov	r21,r2
   459b0:	00800044 	movi	r2,1
   459b4:	bd800044 	addi	r22,r23,1
   459b8:	1815883a 	mov	r10,r3
   459bc:	58802226 	beq	r11,r2,45a48 <_dtoa_r+0x1410>
   459c0:	bad7883a 	add	r11,r23,r11
   459c4:	dc001415 	stw	r16,80(sp)
   459c8:	a805883a 	mov	r2,r21
   459cc:	b027883a 	mov	r19,r22
   459d0:	5821883a 	mov	r16,r11
   459d4:	882b883a 	mov	r21,r17
   459d8:	000d883a 	mov	r6,zero
   459dc:	01d00934 	movhi	r7,16420
   459e0:	1009883a 	mov	r4,r2
   459e4:	180b883a 	mov	r5,r3
   459e8:	004a0700 	call	4a070 <__muldf3>
   459ec:	180b883a 	mov	r5,r3
   459f0:	1009883a 	mov	r4,r2
   459f4:	1829883a 	mov	r20,r3
   459f8:	1023883a 	mov	r17,r2
   459fc:	004a7b80 	call	4a7b8 <__fixdfsi>
   45a00:	1009883a 	mov	r4,r2
   45a04:	1025883a 	mov	r18,r2
   45a08:	004a6e40 	call	4a6e4 <__floatsidf>
   45a0c:	8809883a 	mov	r4,r17
   45a10:	a00b883a 	mov	r5,r20
   45a14:	100d883a 	mov	r6,r2
   45a18:	180f883a 	mov	r7,r3
   45a1c:	94800c04 	addi	r18,r18,48
   45a20:	004a0100 	call	4a010 <__subdf3>
   45a24:	9cc00044 	addi	r19,r19,1
   45a28:	9cbfffc5 	stb	r18,-1(r19)
   45a2c:	9c3fea1e 	bne	r19,r16,459d8 <_dtoa_r+0x13a0>
   45a30:	1815883a 	mov	r10,r3
   45a34:	d8c01017 	ldw	r3,64(sp)
   45a38:	dc001417 	ldw	r16,80(sp)
   45a3c:	a823883a 	mov	r17,r21
   45a40:	b0ed883a 	add	r22,r22,r3
   45a44:	102b883a 	mov	r21,r2
   45a48:	d9001117 	ldw	r4,68(sp)
   45a4c:	d9401217 	ldw	r5,72(sp)
   45a50:	000d883a 	mov	r6,zero
   45a54:	01cff834 	movhi	r7,16352
   45a58:	da801515 	stw	r10,84(sp)
   45a5c:	0049fbc0 	call	49fbc <__adddf3>
   45a60:	da801517 	ldw	r10,84(sp)
   45a64:	1009883a 	mov	r4,r2
   45a68:	180b883a 	mov	r5,r3
   45a6c:	500f883a 	mov	r7,r10
   45a70:	a80d883a 	mov	r6,r21
   45a74:	004a6880 	call	4a688 <__ltdf2>
   45a78:	da801517 	ldw	r10,84(sp)
   45a7c:	10003b0e 	bge	r2,zero,45b6c <_dtoa_r+0x1534>
   45a80:	d9c01317 	ldw	r7,76(sp)
   45a84:	b53fffc3 	ldbu	r20,-1(r22)
   45a88:	d9c00615 	stw	r7,24(sp)
   45a8c:	003d3106 	br	44f54 <_dtoa_r+0x91c>
   45a90:	d8800817 	ldw	r2,32(sp)
   45a94:	11e5c83a 	sub	r18,r2,r7
   45a98:	0005883a 	mov	r2,zero
   45a9c:	003d5006 	br	44fe0 <_dtoa_r+0x9a8>
   45aa0:	05800044 	movi	r22,1
   45aa4:	003dc406 	br	451b8 <_dtoa_r+0xb80>
   45aa8:	a5000044 	addi	r20,r20,1
   45aac:	15000005 	stb	r20,0(r2)
   45ab0:	003c8206 	br	44cbc <_dtoa_r+0x684>
   45ab4:	d8800217 	ldw	r2,8(sp)
   45ab8:	00c00d84 	movi	r3,54
   45abc:	dcc00a17 	ldw	r19,40(sp)
   45ac0:	1885c83a 	sub	r2,r3,r2
   45ac4:	dc800817 	ldw	r18,32(sp)
   45ac8:	003d4506 	br	44fe0 <_dtoa_r+0x9a8>
   45acc:	dcc00317 	ldw	r19,12(sp)
   45ad0:	8829883a 	mov	r20,r17
   45ad4:	04800084 	movi	r18,2
   45ad8:	003bea06 	br	44a84 <_dtoa_r+0x44c>
   45adc:	d9000917 	ldw	r4,36(sp)
   45ae0:	203f1126 	beq	r4,zero,45728 <_dtoa_r+0x10f0>
   45ae4:	d9c00e17 	ldw	r7,56(sp)
   45ae8:	01fca20e 	bge	zero,r7,44d74 <_dtoa_r+0x73c>
   45aec:	a00b883a 	mov	r5,r20
   45af0:	9809883a 	mov	r4,r19
   45af4:	000d883a 	mov	r6,zero
   45af8:	01d00934 	movhi	r7,16420
   45afc:	004a0700 	call	4a070 <__muldf3>
   45b00:	91000044 	addi	r4,r18,1
   45b04:	1027883a 	mov	r19,r2
   45b08:	1829883a 	mov	r20,r3
   45b0c:	004a6e40 	call	4a6e4 <__floatsidf>
   45b10:	9809883a 	mov	r4,r19
   45b14:	a00b883a 	mov	r5,r20
   45b18:	100d883a 	mov	r6,r2
   45b1c:	180f883a 	mov	r7,r3
   45b20:	004a0700 	call	4a070 <__muldf3>
   45b24:	1009883a 	mov	r4,r2
   45b28:	180b883a 	mov	r5,r3
   45b2c:	000d883a 	mov	r6,zero
   45b30:	01d00734 	movhi	r7,16412
   45b34:	0049fbc0 	call	49fbc <__adddf3>
   45b38:	1025883a 	mov	r18,r2
   45b3c:	d8800617 	ldw	r2,24(sp)
   45b40:	057f3034 	movhi	r21,64704
   45b44:	1d6b883a 	add	r21,r3,r21
   45b48:	10bfffc4 	addi	r2,r2,-1
   45b4c:	d8801315 	stw	r2,76(sp)
   45b50:	dac00e17 	ldw	r11,56(sp)
   45b54:	003be706 	br	44af4 <_dtoa_r+0x4bc>
   45b58:	01000e44 	movi	r4,57
   45b5c:	91000005 	stb	r4,0(r18)
   45b60:	95800044 	addi	r22,r18,1
   45b64:	982b883a 	mov	r21,r19
   45b68:	003da106 	br	451f0 <_dtoa_r+0xbb8>
   45b6c:	d9801117 	ldw	r6,68(sp)
   45b70:	d9c01217 	ldw	r7,72(sp)
   45b74:	0009883a 	mov	r4,zero
   45b78:	014ff834 	movhi	r5,16352
   45b7c:	da801515 	stw	r10,84(sp)
   45b80:	004a0100 	call	4a010 <__subdf3>
   45b84:	da801517 	ldw	r10,84(sp)
   45b88:	1009883a 	mov	r4,r2
   45b8c:	180b883a 	mov	r5,r3
   45b90:	a80d883a 	mov	r6,r21
   45b94:	500f883a 	mov	r7,r10
   45b98:	004a5c00 	call	4a5c0 <__gtdf2>
   45b9c:	00bc750e 	bge	zero,r2,44d74 <_dtoa_r+0x73c>
   45ba0:	01000c04 	movi	r4,48
   45ba4:	00000106 	br	45bac <_dtoa_r+0x1574>
   45ba8:	102d883a 	mov	r22,r2
   45bac:	b0bfffc4 	addi	r2,r22,-1
   45bb0:	10c00007 	ldb	r3,0(r2)
   45bb4:	193ffc26 	beq	r3,r4,45ba8 <_dtoa_r+0x1570>
   45bb8:	d8801317 	ldw	r2,76(sp)
   45bbc:	d8800615 	stw	r2,24(sp)
   45bc0:	003c3e06 	br	44cbc <_dtoa_r+0x684>
   45bc4:	d9001317 	ldw	r4,76(sp)
   45bc8:	df001117 	ldw	fp,68(sp)
   45bcc:	d9000615 	stw	r4,24(sp)
   45bd0:	003ce006 	br	44f54 <_dtoa_r+0x91c>
   45bd4:	df001117 	ldw	fp,68(sp)
   45bd8:	dc401217 	ldw	r17,72(sp)
   45bdc:	003c6506 	br	44d74 <_dtoa_r+0x73c>
   45be0:	103e7a1e 	bne	r2,zero,455cc <_dtoa_r+0xf94>
   45be4:	1880004c 	andi	r2,r3,1
   45be8:	103e7826 	beq	r2,zero,455cc <_dtoa_r+0xf94>
   45bec:	003e7406 	br	455c0 <_dtoa_r+0xf88>
   45bf0:	8009883a 	mov	r4,r16
   45bf4:	a80b883a 	mov	r5,r21
   45bf8:	01800284 	movi	r6,10
   45bfc:	000f883a 	mov	r7,zero
   45c00:	004739c0 	call	4739c <__multadd>
   45c04:	d9000e17 	ldw	r4,56(sp)
   45c08:	102b883a 	mov	r21,r2
   45c0c:	d9000915 	stw	r4,36(sp)
   45c10:	003d5106 	br	45158 <_dtoa_r+0xb20>
   45c14:	04800084 	movi	r18,2
   45c18:	003b9a06 	br	44a84 <_dtoa_r+0x44c>
   45c1c:	d8c01317 	ldw	r3,76(sp)
   45c20:	d8c00615 	stw	r3,24(sp)
   45c24:	003ccb06 	br	44f54 <_dtoa_r+0x91c>
   45c28:	d8c01317 	ldw	r3,76(sp)
   45c2c:	d8c00615 	stw	r3,24(sp)
   45c30:	003c2206 	br	44cbc <_dtoa_r+0x684>
   45c34:	20fd3826 	beq	r4,r3,45118 <_dtoa_r+0xae0>
   45c38:	00c00f04 	movi	r3,60
   45c3c:	1885c83a 	sub	r2,r3,r2
   45c40:	003da906 	br	452e8 <_dtoa_r+0xcb0>
   45c44:	000b883a 	mov	r5,zero
   45c48:	003b5406 	br	4499c <_dtoa_r+0x364>
   45c4c:	04c00044 	movi	r19,1
   45c50:	003b3b06 	br	44940 <_dtoa_r+0x308>

00045c54 <_fflush_r>:
   45c54:	defffb04 	addi	sp,sp,-20
   45c58:	dcc00315 	stw	r19,12(sp)
   45c5c:	dc400115 	stw	r17,4(sp)
   45c60:	dfc00415 	stw	ra,16(sp)
   45c64:	dc800215 	stw	r18,8(sp)
   45c68:	dc000015 	stw	r16,0(sp)
   45c6c:	2027883a 	mov	r19,r4
   45c70:	2823883a 	mov	r17,r5
   45c74:	20000226 	beq	r4,zero,45c80 <_fflush_r+0x2c>
   45c78:	20800e17 	ldw	r2,56(r4)
   45c7c:	10005726 	beq	r2,zero,45ddc <_fflush_r+0x188>
   45c80:	8880030b 	ldhu	r2,12(r17)
   45c84:	10c0020c 	andi	r3,r2,8
   45c88:	18ffffcc 	andi	r3,r3,65535
   45c8c:	18e0001c 	xori	r3,r3,32768
   45c90:	18e00004 	addi	r3,r3,-32768
   45c94:	1800311e 	bne	r3,zero,45d5c <_fflush_r+0x108>
   45c98:	89000117 	ldw	r4,4(r17)
   45c9c:	10c20014 	ori	r3,r2,2048
   45ca0:	88c0030d 	sth	r3,12(r17)
   45ca4:	180b883a 	mov	r5,r3
   45ca8:	0100520e 	bge	zero,r4,45df4 <_fflush_r+0x1a0>
   45cac:	88c00a17 	ldw	r3,40(r17)
   45cb0:	18002226 	beq	r3,zero,45d3c <_fflush_r+0xe8>
   45cb4:	1084000c 	andi	r2,r2,4096
   45cb8:	10bfffcc 	andi	r2,r2,65535
   45cbc:	10a0001c 	xori	r2,r2,32768
   45cc0:	10a00004 	addi	r2,r2,-32768
   45cc4:	10004e26 	beq	r2,zero,45e00 <_fflush_r+0x1ac>
   45cc8:	8c001417 	ldw	r16,80(r17)
   45ccc:	2940010c 	andi	r5,r5,4
   45cd0:	297fffcc 	andi	r5,r5,65535
   45cd4:	2960001c 	xori	r5,r5,32768
   45cd8:	29600004 	addi	r5,r5,-32768
   45cdc:	28000626 	beq	r5,zero,45cf8 <_fflush_r+0xa4>
   45ce0:	89000117 	ldw	r4,4(r17)
   45ce4:	88800c17 	ldw	r2,48(r17)
   45ce8:	8121c83a 	sub	r16,r16,r4
   45cec:	10000226 	beq	r2,zero,45cf8 <_fflush_r+0xa4>
   45cf0:	88800f17 	ldw	r2,60(r17)
   45cf4:	80a1c83a 	sub	r16,r16,r2
   45cf8:	89400717 	ldw	r5,28(r17)
   45cfc:	9809883a 	mov	r4,r19
   45d00:	800d883a 	mov	r6,r16
   45d04:	000f883a 	mov	r7,zero
   45d08:	183ee83a 	callr	r3
   45d0c:	8080281e 	bne	r16,r2,45db0 <_fflush_r+0x15c>
   45d10:	8880030b 	ldhu	r2,12(r17)
   45d14:	88c00417 	ldw	r3,16(r17)
   45d18:	88000115 	stw	zero,4(r17)
   45d1c:	113dffcc 	andi	r4,r2,63487
   45d20:	1084000c 	andi	r2,r2,4096
   45d24:	10bfffcc 	andi	r2,r2,65535
   45d28:	10a0001c 	xori	r2,r2,32768
   45d2c:	8900030d 	sth	r4,12(r17)
   45d30:	88c00015 	stw	r3,0(r17)
   45d34:	10a00004 	addi	r2,r2,-32768
   45d38:	10002c1e 	bne	r2,zero,45dec <_fflush_r+0x198>
   45d3c:	0005883a 	mov	r2,zero
   45d40:	dfc00417 	ldw	ra,16(sp)
   45d44:	dcc00317 	ldw	r19,12(sp)
   45d48:	dc800217 	ldw	r18,8(sp)
   45d4c:	dc400117 	ldw	r17,4(sp)
   45d50:	dc000017 	ldw	r16,0(sp)
   45d54:	dec00504 	addi	sp,sp,20
   45d58:	f800283a 	ret
   45d5c:	8c800417 	ldw	r18,16(r17)
   45d60:	903ff626 	beq	r18,zero,45d3c <_fflush_r+0xe8>
   45d64:	8c000017 	ldw	r16,0(r17)
   45d68:	108000cc 	andi	r2,r2,3
   45d6c:	8c800015 	stw	r18,0(r17)
   45d70:	84a1c83a 	sub	r16,r16,r18
   45d74:	10001b1e 	bne	r2,zero,45de4 <_fflush_r+0x190>
   45d78:	88800517 	ldw	r2,20(r17)
   45d7c:	88800215 	stw	r2,8(r17)
   45d80:	04000316 	blt	zero,r16,45d90 <_fflush_r+0x13c>
   45d84:	003fed06 	br	45d3c <_fflush_r+0xe8>
   45d88:	90a5883a 	add	r18,r18,r2
   45d8c:	043feb0e 	bge	zero,r16,45d3c <_fflush_r+0xe8>
   45d90:	88800917 	ldw	r2,36(r17)
   45d94:	89400717 	ldw	r5,28(r17)
   45d98:	800f883a 	mov	r7,r16
   45d9c:	900d883a 	mov	r6,r18
   45da0:	9809883a 	mov	r4,r19
   45da4:	103ee83a 	callr	r2
   45da8:	80a1c83a 	sub	r16,r16,r2
   45dac:	00bff616 	blt	zero,r2,45d88 <_fflush_r+0x134>
   45db0:	88c0030b 	ldhu	r3,12(r17)
   45db4:	00bfffc4 	movi	r2,-1
   45db8:	18c01014 	ori	r3,r3,64
   45dbc:	88c0030d 	sth	r3,12(r17)
   45dc0:	dfc00417 	ldw	ra,16(sp)
   45dc4:	dcc00317 	ldw	r19,12(sp)
   45dc8:	dc800217 	ldw	r18,8(sp)
   45dcc:	dc400117 	ldw	r17,4(sp)
   45dd0:	dc000017 	ldw	r16,0(sp)
   45dd4:	dec00504 	addi	sp,sp,20
   45dd8:	f800283a 	ret
   45ddc:	0045f100 	call	45f10 <__sinit>
   45de0:	003fa706 	br	45c80 <_fflush_r+0x2c>
   45de4:	0005883a 	mov	r2,zero
   45de8:	003fe406 	br	45d7c <_fflush_r+0x128>
   45dec:	8c001415 	stw	r16,80(r17)
   45df0:	003fd206 	br	45d3c <_fflush_r+0xe8>
   45df4:	88c00f17 	ldw	r3,60(r17)
   45df8:	00ffac16 	blt	zero,r3,45cac <_fflush_r+0x58>
   45dfc:	003fcf06 	br	45d3c <_fflush_r+0xe8>
   45e00:	89400717 	ldw	r5,28(r17)
   45e04:	9809883a 	mov	r4,r19
   45e08:	000d883a 	mov	r6,zero
   45e0c:	01c00044 	movi	r7,1
   45e10:	183ee83a 	callr	r3
   45e14:	1021883a 	mov	r16,r2
   45e18:	00bfffc4 	movi	r2,-1
   45e1c:	80800326 	beq	r16,r2,45e2c <_fflush_r+0x1d8>
   45e20:	8940030b 	ldhu	r5,12(r17)
   45e24:	88c00a17 	ldw	r3,40(r17)
   45e28:	003fa806 	br	45ccc <_fflush_r+0x78>
   45e2c:	98c00017 	ldw	r3,0(r19)
   45e30:	00800744 	movi	r2,29
   45e34:	18bfde1e 	bne	r3,r2,45db0 <_fflush_r+0x15c>
   45e38:	003fc006 	br	45d3c <_fflush_r+0xe8>

00045e3c <fflush>:
   45e3c:	200b883a 	mov	r5,r4
   45e40:	20000426 	beq	r4,zero,45e54 <fflush+0x18>
   45e44:	00800174 	movhi	r2,5
   45e48:	10bf8b04 	addi	r2,r2,-468
   45e4c:	11000017 	ldw	r4,0(r2)
   45e50:	0045c541 	jmpi	45c54 <_fflush_r>
   45e54:	00800174 	movhi	r2,5
   45e58:	10bf8a04 	addi	r2,r2,-472
   45e5c:	11000017 	ldw	r4,0(r2)
   45e60:	01400134 	movhi	r5,4
   45e64:	29571504 	addi	r5,r5,23636
   45e68:	0046af01 	jmpi	46af0 <_fwalk_reent>

00045e6c <__fp_lock>:
   45e6c:	0005883a 	mov	r2,zero
   45e70:	f800283a 	ret

00045e74 <__fp_unlock>:
   45e74:	0005883a 	mov	r2,zero
   45e78:	f800283a 	ret

00045e7c <_cleanup_r>:
   45e7c:	01400174 	movhi	r5,5
   45e80:	29638e04 	addi	r5,r5,-29128
   45e84:	0046a481 	jmpi	46a48 <_fwalk>

00045e88 <__sfmoreglue>:
   45e88:	defffc04 	addi	sp,sp,-16
   45e8c:	dc800215 	stw	r18,8(sp)
   45e90:	2825883a 	mov	r18,r5
   45e94:	dc000015 	stw	r16,0(sp)
   45e98:	01401704 	movi	r5,92
   45e9c:	2021883a 	mov	r16,r4
   45ea0:	9009883a 	mov	r4,r18
   45ea4:	dfc00315 	stw	ra,12(sp)
   45ea8:	dc400115 	stw	r17,4(sp)
   45eac:	00419f00 	call	419f0 <__mulsi3>
   45eb0:	8009883a 	mov	r4,r16
   45eb4:	11400304 	addi	r5,r2,12
   45eb8:	1023883a 	mov	r17,r2
   45ebc:	0041a400 	call	41a40 <_malloc_r>
   45ec0:	1021883a 	mov	r16,r2
   45ec4:	10000726 	beq	r2,zero,45ee4 <__sfmoreglue+0x5c>
   45ec8:	11000304 	addi	r4,r2,12
   45ecc:	10000015 	stw	zero,0(r2)
   45ed0:	14800115 	stw	r18,4(r2)
   45ed4:	11000215 	stw	r4,8(r2)
   45ed8:	000b883a 	mov	r5,zero
   45edc:	880d883a 	mov	r6,r17
   45ee0:	00471f00 	call	471f0 <memset>
   45ee4:	8005883a 	mov	r2,r16
   45ee8:	dfc00317 	ldw	ra,12(sp)
   45eec:	dc800217 	ldw	r18,8(sp)
   45ef0:	dc400117 	ldw	r17,4(sp)
   45ef4:	dc000017 	ldw	r16,0(sp)
   45ef8:	dec00404 	addi	sp,sp,16
   45efc:	f800283a 	ret

00045f00 <_cleanup>:
   45f00:	00800174 	movhi	r2,5
   45f04:	10bf8a04 	addi	r2,r2,-472
   45f08:	11000017 	ldw	r4,0(r2)
   45f0c:	0045e7c1 	jmpi	45e7c <_cleanup_r>

00045f10 <__sinit>:
   45f10:	20800e17 	ldw	r2,56(r4)
   45f14:	1000401e 	bne	r2,zero,46018 <__sinit+0x108>
   45f18:	21400117 	ldw	r5,4(r4)
   45f1c:	01800134 	movhi	r6,4
   45f20:	31979f04 	addi	r6,r6,24188
   45f24:	20c00217 	ldw	r3,8(r4)
   45f28:	21800f15 	stw	r6,60(r4)
   45f2c:	2080bb04 	addi	r2,r4,748
   45f30:	02400044 	movi	r9,1
   45f34:	018000c4 	movi	r6,3
   45f38:	2180b915 	stw	r6,740(r4)
   45f3c:	2080ba15 	stw	r2,744(r4)
   45f40:	22400e15 	stw	r9,56(r4)
   45f44:	20800317 	ldw	r2,12(r4)
   45f48:	2000b815 	stw	zero,736(r4)
   45f4c:	02000174 	movhi	r8,5
   45f50:	42225f04 	addi	r8,r8,-30340
   45f54:	01c00174 	movhi	r7,5
   45f58:	39e27404 	addi	r7,r7,-30256
   45f5c:	01800174 	movhi	r6,5
   45f60:	31a29604 	addi	r6,r6,-30120
   45f64:	01000174 	movhi	r4,5
   45f68:	2122ad04 	addi	r4,r4,-30028
   45f6c:	02800104 	movi	r10,4
   45f70:	28000015 	stw	zero,0(r5)
   45f74:	28000115 	stw	zero,4(r5)
   45f78:	28000215 	stw	zero,8(r5)
   45f7c:	2a80030d 	sth	r10,12(r5)
   45f80:	2800038d 	sth	zero,14(r5)
   45f84:	28000415 	stw	zero,16(r5)
   45f88:	28000515 	stw	zero,20(r5)
   45f8c:	28000615 	stw	zero,24(r5)
   45f90:	29400715 	stw	r5,28(r5)
   45f94:	2a000815 	stw	r8,32(r5)
   45f98:	29c00915 	stw	r7,36(r5)
   45f9c:	29800a15 	stw	r6,40(r5)
   45fa0:	29000b15 	stw	r4,44(r5)
   45fa4:	01400284 	movi	r5,10
   45fa8:	18000015 	stw	zero,0(r3)
   45fac:	18000115 	stw	zero,4(r3)
   45fb0:	18000215 	stw	zero,8(r3)
   45fb4:	1940030d 	sth	r5,12(r3)
   45fb8:	1a40038d 	sth	r9,14(r3)
   45fbc:	18000415 	stw	zero,16(r3)
   45fc0:	18000515 	stw	zero,20(r3)
   45fc4:	18000615 	stw	zero,24(r3)
   45fc8:	18c00715 	stw	r3,28(r3)
   45fcc:	1a000815 	stw	r8,32(r3)
   45fd0:	19c00915 	stw	r7,36(r3)
   45fd4:	19800a15 	stw	r6,40(r3)
   45fd8:	19000b15 	stw	r4,44(r3)
   45fdc:	00c00484 	movi	r3,18
   45fe0:	10c0030d 	sth	r3,12(r2)
   45fe4:	00c00084 	movi	r3,2
   45fe8:	10000015 	stw	zero,0(r2)
   45fec:	10000115 	stw	zero,4(r2)
   45ff0:	10000215 	stw	zero,8(r2)
   45ff4:	10c0038d 	sth	r3,14(r2)
   45ff8:	10000415 	stw	zero,16(r2)
   45ffc:	10000515 	stw	zero,20(r2)
   46000:	10000615 	stw	zero,24(r2)
   46004:	10800715 	stw	r2,28(r2)
   46008:	12000815 	stw	r8,32(r2)
   4600c:	11c00915 	stw	r7,36(r2)
   46010:	11800a15 	stw	r6,40(r2)
   46014:	11000b15 	stw	r4,44(r2)
   46018:	f800283a 	ret

0004601c <__sfp>:
   4601c:	defffc04 	addi	sp,sp,-16
   46020:	00800174 	movhi	r2,5
   46024:	10bf8a04 	addi	r2,r2,-472
   46028:	dc400115 	stw	r17,4(sp)
   4602c:	14400017 	ldw	r17,0(r2)
   46030:	dc800215 	stw	r18,8(sp)
   46034:	dfc00315 	stw	ra,12(sp)
   46038:	88800e17 	ldw	r2,56(r17)
   4603c:	dc000015 	stw	r16,0(sp)
   46040:	2025883a 	mov	r18,r4
   46044:	10002826 	beq	r2,zero,460e8 <__sfp+0xcc>
   46048:	8c40b804 	addi	r17,r17,736
   4604c:	043fffc4 	movi	r16,-1
   46050:	89400117 	ldw	r5,4(r17)
   46054:	88800217 	ldw	r2,8(r17)
   46058:	297fffc4 	addi	r5,r5,-1
   4605c:	28000a16 	blt	r5,zero,46088 <__sfp+0x6c>
   46060:	10c0030f 	ldh	r3,12(r2)
   46064:	18000c26 	beq	r3,zero,46098 <__sfp+0x7c>
   46068:	10c01a04 	addi	r3,r2,104
   4606c:	00000206 	br	46078 <__sfp+0x5c>
   46070:	19bfe90f 	ldh	r6,-92(r3)
   46074:	30000826 	beq	r6,zero,46098 <__sfp+0x7c>
   46078:	297fffc4 	addi	r5,r5,-1
   4607c:	18bffd04 	addi	r2,r3,-12
   46080:	18c01704 	addi	r3,r3,92
   46084:	2c3ffa1e 	bne	r5,r16,46070 <__sfp+0x54>
   46088:	88800017 	ldw	r2,0(r17)
   4608c:	10001926 	beq	r2,zero,460f4 <__sfp+0xd8>
   46090:	1023883a 	mov	r17,r2
   46094:	003fee06 	br	46050 <__sfp+0x34>
   46098:	00ffffc4 	movi	r3,-1
   4609c:	10c0038d 	sth	r3,14(r2)
   460a0:	00c00044 	movi	r3,1
   460a4:	10c0030d 	sth	r3,12(r2)
   460a8:	10000015 	stw	zero,0(r2)
   460ac:	10000215 	stw	zero,8(r2)
   460b0:	10000115 	stw	zero,4(r2)
   460b4:	10000415 	stw	zero,16(r2)
   460b8:	10000515 	stw	zero,20(r2)
   460bc:	10000615 	stw	zero,24(r2)
   460c0:	10000c15 	stw	zero,48(r2)
   460c4:	10000d15 	stw	zero,52(r2)
   460c8:	10001115 	stw	zero,68(r2)
   460cc:	10001215 	stw	zero,72(r2)
   460d0:	dfc00317 	ldw	ra,12(sp)
   460d4:	dc800217 	ldw	r18,8(sp)
   460d8:	dc400117 	ldw	r17,4(sp)
   460dc:	dc000017 	ldw	r16,0(sp)
   460e0:	dec00404 	addi	sp,sp,16
   460e4:	f800283a 	ret
   460e8:	8809883a 	mov	r4,r17
   460ec:	0045f100 	call	45f10 <__sinit>
   460f0:	003fd506 	br	46048 <__sfp+0x2c>
   460f4:	9009883a 	mov	r4,r18
   460f8:	01400104 	movi	r5,4
   460fc:	0045e880 	call	45e88 <__sfmoreglue>
   46100:	88800015 	stw	r2,0(r17)
   46104:	103fe21e 	bne	r2,zero,46090 <__sfp+0x74>
   46108:	00800304 	movi	r2,12
   4610c:	90800015 	stw	r2,0(r18)
   46110:	0005883a 	mov	r2,zero
   46114:	003fee06 	br	460d0 <__sfp+0xb4>

00046118 <__sfp_lock_acquire>:
   46118:	f800283a 	ret

0004611c <__sfp_lock_release>:
   4611c:	f800283a 	ret

00046120 <__sinit_lock_acquire>:
   46120:	f800283a 	ret

00046124 <__sinit_lock_release>:
   46124:	f800283a 	ret

00046128 <__fp_lock_all>:
   46128:	00800174 	movhi	r2,5
   4612c:	10bf8b04 	addi	r2,r2,-468
   46130:	11000017 	ldw	r4,0(r2)
   46134:	01400134 	movhi	r5,4
   46138:	29579b04 	addi	r5,r5,24172
   4613c:	0046a481 	jmpi	46a48 <_fwalk>

00046140 <__fp_unlock_all>:
   46140:	00800174 	movhi	r2,5
   46144:	10bf8b04 	addi	r2,r2,-468
   46148:	11000017 	ldw	r4,0(r2)
   4614c:	01400134 	movhi	r5,4
   46150:	29579d04 	addi	r5,r5,24180
   46154:	0046a481 	jmpi	46a48 <_fwalk>

00046158 <_malloc_trim_r>:
   46158:	defffb04 	addi	sp,sp,-20
   4615c:	dcc00315 	stw	r19,12(sp)
   46160:	dc800215 	stw	r18,8(sp)
   46164:	dc400115 	stw	r17,4(sp)
   46168:	dc000015 	stw	r16,0(sp)
   4616c:	2827883a 	mov	r19,r5
   46170:	dfc00415 	stw	ra,16(sp)
   46174:	04400174 	movhi	r17,5
   46178:	8c78fc04 	addi	r17,r17,-7184
   4617c:	2021883a 	mov	r16,r4
   46180:	004b6d80 	call	4b6d8 <__malloc_lock>
   46184:	88800217 	ldw	r2,8(r17)
   46188:	14800117 	ldw	r18,4(r2)
   4618c:	00bfff04 	movi	r2,-4
   46190:	90a4703a 	and	r18,r18,r2
   46194:	9083fbc4 	addi	r2,r18,4079
   46198:	14e7c83a 	sub	r19,r2,r19
   4619c:	9826d33a 	srli	r19,r19,12
   461a0:	0083ffc4 	movi	r2,4095
   461a4:	9cffffc4 	addi	r19,r19,-1
   461a8:	9826933a 	slli	r19,r19,12
   461ac:	14c0060e 	bge	r2,r19,461c8 <_malloc_trim_r+0x70>
   461b0:	8009883a 	mov	r4,r16
   461b4:	000b883a 	mov	r5,zero
   461b8:	00422c40 	call	422c4 <_sbrk_r>
   461bc:	88c00217 	ldw	r3,8(r17)
   461c0:	1c87883a 	add	r3,r3,r18
   461c4:	10c00a26 	beq	r2,r3,461f0 <_malloc_trim_r+0x98>
   461c8:	8009883a 	mov	r4,r16
   461cc:	004b6f80 	call	4b6f8 <__malloc_unlock>
   461d0:	0005883a 	mov	r2,zero
   461d4:	dfc00417 	ldw	ra,16(sp)
   461d8:	dcc00317 	ldw	r19,12(sp)
   461dc:	dc800217 	ldw	r18,8(sp)
   461e0:	dc400117 	ldw	r17,4(sp)
   461e4:	dc000017 	ldw	r16,0(sp)
   461e8:	dec00504 	addi	sp,sp,20
   461ec:	f800283a 	ret
   461f0:	8009883a 	mov	r4,r16
   461f4:	04cbc83a 	sub	r5,zero,r19
   461f8:	00422c40 	call	422c4 <_sbrk_r>
   461fc:	00ffffc4 	movi	r3,-1
   46200:	10c01326 	beq	r2,r3,46250 <_malloc_trim_r+0xf8>
   46204:	00800174 	movhi	r2,5
   46208:	10864404 	addi	r2,r2,6416
   4620c:	11000017 	ldw	r4,0(r2)
   46210:	88c00217 	ldw	r3,8(r17)
   46214:	94e5c83a 	sub	r18,r18,r19
   46218:	94800054 	ori	r18,r18,1
   4621c:	24e7c83a 	sub	r19,r4,r19
   46220:	1c800115 	stw	r18,4(r3)
   46224:	8009883a 	mov	r4,r16
   46228:	14c00015 	stw	r19,0(r2)
   4622c:	004b6f80 	call	4b6f8 <__malloc_unlock>
   46230:	00800044 	movi	r2,1
   46234:	dfc00417 	ldw	ra,16(sp)
   46238:	dcc00317 	ldw	r19,12(sp)
   4623c:	dc800217 	ldw	r18,8(sp)
   46240:	dc400117 	ldw	r17,4(sp)
   46244:	dc000017 	ldw	r16,0(sp)
   46248:	dec00504 	addi	sp,sp,20
   4624c:	f800283a 	ret
   46250:	8009883a 	mov	r4,r16
   46254:	000b883a 	mov	r5,zero
   46258:	00422c40 	call	422c4 <_sbrk_r>
   4625c:	88c00217 	ldw	r3,8(r17)
   46260:	014003c4 	movi	r5,15
   46264:	10c9c83a 	sub	r4,r2,r3
   46268:	293fd70e 	bge	r5,r4,461c8 <_malloc_trim_r+0x70>
   4626c:	01400174 	movhi	r5,5
   46270:	297f8804 	addi	r5,r5,-480
   46274:	29400017 	ldw	r5,0(r5)
   46278:	21000054 	ori	r4,r4,1
   4627c:	19000115 	stw	r4,4(r3)
   46280:	1145c83a 	sub	r2,r2,r5
   46284:	01400174 	movhi	r5,5
   46288:	29464404 	addi	r5,r5,6416
   4628c:	28800015 	stw	r2,0(r5)
   46290:	003fcd06 	br	461c8 <_malloc_trim_r+0x70>

00046294 <_free_r>:
   46294:	defffd04 	addi	sp,sp,-12
   46298:	dc400115 	stw	r17,4(sp)
   4629c:	dc000015 	stw	r16,0(sp)
   462a0:	dfc00215 	stw	ra,8(sp)
   462a4:	2821883a 	mov	r16,r5
   462a8:	2023883a 	mov	r17,r4
   462ac:	28004b26 	beq	r5,zero,463dc <_free_r+0x148>
   462b0:	004b6d80 	call	4b6d8 <__malloc_lock>
   462b4:	823fff17 	ldw	r8,-4(r16)
   462b8:	00bfff84 	movi	r2,-2
   462bc:	81bffe04 	addi	r6,r16,-8
   462c0:	4084703a 	and	r2,r8,r2
   462c4:	3087883a 	add	r3,r6,r2
   462c8:	01400174 	movhi	r5,5
   462cc:	2978fc04 	addi	r5,r5,-7184
   462d0:	1a400117 	ldw	r9,4(r3)
   462d4:	29000217 	ldw	r4,8(r5)
   462d8:	01ffff04 	movi	r7,-4
   462dc:	49ce703a 	and	r7,r9,r7
   462e0:	20c06526 	beq	r4,r3,46478 <_free_r+0x1e4>
   462e4:	19c00115 	stw	r7,4(r3)
   462e8:	4200004c 	andi	r8,r8,1
   462ec:	40003026 	beq	r8,zero,463b0 <_free_r+0x11c>
   462f0:	0009883a 	mov	r4,zero
   462f4:	19d1883a 	add	r8,r3,r7
   462f8:	42000117 	ldw	r8,4(r8)
   462fc:	4200004c 	andi	r8,r8,1
   46300:	4000061e 	bne	r8,zero,4631c <_free_r+0x88>
   46304:	11c5883a 	add	r2,r2,r7
   46308:	19c00217 	ldw	r7,8(r3)
   4630c:	20004e26 	beq	r4,zero,46448 <_free_r+0x1b4>
   46310:	18c00317 	ldw	r3,12(r3)
   46314:	38c00315 	stw	r3,12(r7)
   46318:	19c00215 	stw	r7,8(r3)
   4631c:	11c00054 	ori	r7,r2,1
   46320:	3087883a 	add	r3,r6,r2
   46324:	31c00115 	stw	r7,4(r6)
   46328:	18800015 	stw	r2,0(r3)
   4632c:	20001a1e 	bne	r4,zero,46398 <_free_r+0x104>
   46330:	00c07fc4 	movi	r3,511
   46334:	18802e2e 	bgeu	r3,r2,463f0 <_free_r+0x15c>
   46338:	1006d27a 	srli	r3,r2,9
   4633c:	01000104 	movi	r4,4
   46340:	20c06636 	bltu	r4,r3,464dc <_free_r+0x248>
   46344:	1008d1ba 	srli	r4,r2,6
   46348:	21000e04 	addi	r4,r4,56
   4634c:	210f883a 	add	r7,r4,r4
   46350:	39cf883a 	add	r7,r7,r7
   46354:	39cf883a 	add	r7,r7,r7
   46358:	29cf883a 	add	r7,r5,r7
   4635c:	38c00217 	ldw	r3,8(r7)
   46360:	01400174 	movhi	r5,5
   46364:	2978fc04 	addi	r5,r5,-7184
   46368:	19c06126 	beq	r3,r7,464f0 <_free_r+0x25c>
   4636c:	013fff04 	movi	r4,-4
   46370:	19400117 	ldw	r5,4(r3)
   46374:	290a703a 	and	r5,r5,r4
   46378:	1140022e 	bgeu	r2,r5,46384 <_free_r+0xf0>
   4637c:	18c00217 	ldw	r3,8(r3)
   46380:	38fffb1e 	bne	r7,r3,46370 <_free_r+0xdc>
   46384:	18800317 	ldw	r2,12(r3)
   46388:	30800315 	stw	r2,12(r6)
   4638c:	30c00215 	stw	r3,8(r6)
   46390:	11800215 	stw	r6,8(r2)
   46394:	19800315 	stw	r6,12(r3)
   46398:	8809883a 	mov	r4,r17
   4639c:	dfc00217 	ldw	ra,8(sp)
   463a0:	dc400117 	ldw	r17,4(sp)
   463a4:	dc000017 	ldw	r16,0(sp)
   463a8:	dec00304 	addi	sp,sp,12
   463ac:	004b6f81 	jmpi	4b6f8 <__malloc_unlock>
   463b0:	813ffe17 	ldw	r4,-8(r16)
   463b4:	2a400204 	addi	r9,r5,8
   463b8:	310dc83a 	sub	r6,r6,r4
   463bc:	32000217 	ldw	r8,8(r6)
   463c0:	1105883a 	add	r2,r2,r4
   463c4:	42404326 	beq	r8,r9,464d4 <_free_r+0x240>
   463c8:	32400317 	ldw	r9,12(r6)
   463cc:	0009883a 	mov	r4,zero
   463d0:	42400315 	stw	r9,12(r8)
   463d4:	4a000215 	stw	r8,8(r9)
   463d8:	003fc606 	br	462f4 <_free_r+0x60>
   463dc:	dfc00217 	ldw	ra,8(sp)
   463e0:	dc400117 	ldw	r17,4(sp)
   463e4:	dc000017 	ldw	r16,0(sp)
   463e8:	dec00304 	addi	sp,sp,12
   463ec:	f800283a 	ret
   463f0:	1004d0fa 	srli	r2,r2,3
   463f4:	02000044 	movi	r8,1
   463f8:	29c00117 	ldw	r7,4(r5)
   463fc:	1087883a 	add	r3,r2,r2
   46400:	18c7883a 	add	r3,r3,r3
   46404:	1005d0ba 	srai	r2,r2,2
   46408:	18c7883a 	add	r3,r3,r3
   4640c:	28c7883a 	add	r3,r5,r3
   46410:	19000217 	ldw	r4,8(r3)
   46414:	4084983a 	sll	r2,r8,r2
   46418:	30c00315 	stw	r3,12(r6)
   4641c:	31000215 	stw	r4,8(r6)
   46420:	11c4b03a 	or	r2,r2,r7
   46424:	21800315 	stw	r6,12(r4)
   46428:	8809883a 	mov	r4,r17
   4642c:	28800115 	stw	r2,4(r5)
   46430:	19800215 	stw	r6,8(r3)
   46434:	dfc00217 	ldw	ra,8(sp)
   46438:	dc400117 	ldw	r17,4(sp)
   4643c:	dc000017 	ldw	r16,0(sp)
   46440:	dec00304 	addi	sp,sp,12
   46444:	004b6f81 	jmpi	4b6f8 <__malloc_unlock>
   46448:	02000174 	movhi	r8,5
   4644c:	4238fe04 	addi	r8,r8,-7176
   46450:	3a3faf1e 	bne	r7,r8,46310 <_free_r+0x7c>
   46454:	29800515 	stw	r6,20(r5)
   46458:	29800415 	stw	r6,16(r5)
   4645c:	11000054 	ori	r4,r2,1
   46460:	3087883a 	add	r3,r6,r2
   46464:	31c00315 	stw	r7,12(r6)
   46468:	31c00215 	stw	r7,8(r6)
   4646c:	31000115 	stw	r4,4(r6)
   46470:	18800015 	stw	r2,0(r3)
   46474:	003fc806 	br	46398 <_free_r+0x104>
   46478:	4200004c 	andi	r8,r8,1
   4647c:	3885883a 	add	r2,r7,r2
   46480:	4000071e 	bne	r8,zero,464a0 <_free_r+0x20c>
   46484:	81fffe17 	ldw	r7,-8(r16)
   46488:	31cdc83a 	sub	r6,r6,r7
   4648c:	30c00317 	ldw	r3,12(r6)
   46490:	31000217 	ldw	r4,8(r6)
   46494:	11c5883a 	add	r2,r2,r7
   46498:	20c00315 	stw	r3,12(r4)
   4649c:	19000215 	stw	r4,8(r3)
   464a0:	00c00174 	movhi	r3,5
   464a4:	18ff8904 	addi	r3,r3,-476
   464a8:	18c00017 	ldw	r3,0(r3)
   464ac:	11000054 	ori	r4,r2,1
   464b0:	31000115 	stw	r4,4(r6)
   464b4:	29800215 	stw	r6,8(r5)
   464b8:	10ffb736 	bltu	r2,r3,46398 <_free_r+0x104>
   464bc:	00800174 	movhi	r2,5
   464c0:	10863704 	addi	r2,r2,6364
   464c4:	11400017 	ldw	r5,0(r2)
   464c8:	8809883a 	mov	r4,r17
   464cc:	00461580 	call	46158 <_malloc_trim_r>
   464d0:	003fb106 	br	46398 <_free_r+0x104>
   464d4:	01000044 	movi	r4,1
   464d8:	003f8606 	br	462f4 <_free_r+0x60>
   464dc:	01000504 	movi	r4,20
   464e0:	20c00b36 	bltu	r4,r3,46510 <_free_r+0x27c>
   464e4:	190016c4 	addi	r4,r3,91
   464e8:	210f883a 	add	r7,r4,r4
   464ec:	003f9806 	br	46350 <_free_r+0xbc>
   464f0:	2009d0ba 	srai	r4,r4,2
   464f4:	00800044 	movi	r2,1
   464f8:	29c00117 	ldw	r7,4(r5)
   464fc:	1108983a 	sll	r4,r2,r4
   46500:	1805883a 	mov	r2,r3
   46504:	21c8b03a 	or	r4,r4,r7
   46508:	29000115 	stw	r4,4(r5)
   4650c:	003f9e06 	br	46388 <_free_r+0xf4>
   46510:	01001504 	movi	r4,84
   46514:	20c00436 	bltu	r4,r3,46528 <_free_r+0x294>
   46518:	1008d33a 	srli	r4,r2,12
   4651c:	21001b84 	addi	r4,r4,110
   46520:	210f883a 	add	r7,r4,r4
   46524:	003f8a06 	br	46350 <_free_r+0xbc>
   46528:	01005504 	movi	r4,340
   4652c:	20c00436 	bltu	r4,r3,46540 <_free_r+0x2ac>
   46530:	1008d3fa 	srli	r4,r2,15
   46534:	21001dc4 	addi	r4,r4,119
   46538:	210f883a 	add	r7,r4,r4
   4653c:	003f8406 	br	46350 <_free_r+0xbc>
   46540:	01015504 	movi	r4,1364
   46544:	20c00436 	bltu	r4,r3,46558 <_free_r+0x2c4>
   46548:	1008d4ba 	srli	r4,r2,18
   4654c:	21001f04 	addi	r4,r4,124
   46550:	210f883a 	add	r7,r4,r4
   46554:	003f7e06 	br	46350 <_free_r+0xbc>
   46558:	01c03f04 	movi	r7,252
   4655c:	01001f84 	movi	r4,126
   46560:	003f7b06 	br	46350 <_free_r+0xbc>

00046564 <__sfvwrite_r>:
   46564:	30800217 	ldw	r2,8(r6)
   46568:	defff504 	addi	sp,sp,-44
   4656c:	dd400615 	stw	r21,24(sp)
   46570:	dd000515 	stw	r20,20(sp)
   46574:	dc000115 	stw	r16,4(sp)
   46578:	dfc00a15 	stw	ra,40(sp)
   4657c:	df000915 	stw	fp,36(sp)
   46580:	ddc00815 	stw	r23,32(sp)
   46584:	dd800715 	stw	r22,28(sp)
   46588:	dcc00415 	stw	r19,16(sp)
   4658c:	dc800315 	stw	r18,12(sp)
   46590:	dc400215 	stw	r17,8(sp)
   46594:	3029883a 	mov	r20,r6
   46598:	202b883a 	mov	r21,r4
   4659c:	2821883a 	mov	r16,r5
   465a0:	10002126 	beq	r2,zero,46628 <__sfvwrite_r+0xc4>
   465a4:	2880030b 	ldhu	r2,12(r5)
   465a8:	10c0020c 	andi	r3,r2,8
   465ac:	18ffffcc 	andi	r3,r3,65535
   465b0:	18e0001c 	xori	r3,r3,32768
   465b4:	18e00004 	addi	r3,r3,-32768
   465b8:	18002826 	beq	r3,zero,4665c <__sfvwrite_r+0xf8>
   465bc:	28c00417 	ldw	r3,16(r5)
   465c0:	18002626 	beq	r3,zero,4665c <__sfvwrite_r+0xf8>
   465c4:	10c0008c 	andi	r3,r2,2
   465c8:	18ffffcc 	andi	r3,r3,65535
   465cc:	18e0001c 	xori	r3,r3,32768
   465d0:	18e00004 	addi	r3,r3,-32768
   465d4:	a4400017 	ldw	r17,0(r20)
   465d8:	18002b26 	beq	r3,zero,46688 <__sfvwrite_r+0x124>
   465dc:	0027883a 	mov	r19,zero
   465e0:	0025883a 	mov	r18,zero
   465e4:	05810004 	movi	r22,1024
   465e8:	980d883a 	mov	r6,r19
   465ec:	a809883a 	mov	r4,r21
   465f0:	90004f26 	beq	r18,zero,46730 <__sfvwrite_r+0x1cc>
   465f4:	900f883a 	mov	r7,r18
   465f8:	81400717 	ldw	r5,28(r16)
   465fc:	b480012e 	bgeu	r22,r18,46604 <__sfvwrite_r+0xa0>
   46600:	01c10004 	movi	r7,1024
   46604:	80800917 	ldw	r2,36(r16)
   46608:	103ee83a 	callr	r2
   4660c:	0080540e 	bge	zero,r2,46760 <__sfvwrite_r+0x1fc>
   46610:	a0c00217 	ldw	r3,8(r20)
   46614:	98a7883a 	add	r19,r19,r2
   46618:	90a5c83a 	sub	r18,r18,r2
   4661c:	1885c83a 	sub	r2,r3,r2
   46620:	a0800215 	stw	r2,8(r20)
   46624:	103ff01e 	bne	r2,zero,465e8 <__sfvwrite_r+0x84>
   46628:	0005883a 	mov	r2,zero
   4662c:	dfc00a17 	ldw	ra,40(sp)
   46630:	df000917 	ldw	fp,36(sp)
   46634:	ddc00817 	ldw	r23,32(sp)
   46638:	dd800717 	ldw	r22,28(sp)
   4663c:	dd400617 	ldw	r21,24(sp)
   46640:	dd000517 	ldw	r20,20(sp)
   46644:	dcc00417 	ldw	r19,16(sp)
   46648:	dc800317 	ldw	r18,12(sp)
   4664c:	dc400217 	ldw	r17,8(sp)
   46650:	dc000117 	ldw	r16,4(sp)
   46654:	dec00b04 	addi	sp,sp,44
   46658:	f800283a 	ret
   4665c:	a809883a 	mov	r4,r21
   46660:	800b883a 	mov	r5,r16
   46664:	00442880 	call	44288 <__swsetup_r>
   46668:	1000f01e 	bne	r2,zero,46a2c <__sfvwrite_r+0x4c8>
   4666c:	8080030b 	ldhu	r2,12(r16)
   46670:	a4400017 	ldw	r17,0(r20)
   46674:	10c0008c 	andi	r3,r2,2
   46678:	18ffffcc 	andi	r3,r3,65535
   4667c:	18e0001c 	xori	r3,r3,32768
   46680:	18e00004 	addi	r3,r3,-32768
   46684:	183fd51e 	bne	r3,zero,465dc <__sfvwrite_r+0x78>
   46688:	10c0004c 	andi	r3,r2,1
   4668c:	002d883a 	mov	r22,zero
   46690:	1800381e 	bne	r3,zero,46774 <__sfvwrite_r+0x210>
   46694:	0025883a 	mov	r18,zero
   46698:	90002126 	beq	r18,zero,46720 <__sfvwrite_r+0x1bc>
   4669c:	10c0800c 	andi	r3,r2,512
   466a0:	18ffffcc 	andi	r3,r3,65535
   466a4:	18e0001c 	xori	r3,r3,32768
   466a8:	18e00004 	addi	r3,r3,-32768
   466ac:	84c00217 	ldw	r19,8(r16)
   466b0:	18006b26 	beq	r3,zero,46860 <__sfvwrite_r+0x2fc>
   466b4:	980f883a 	mov	r7,r19
   466b8:	94c08636 	bltu	r18,r19,468d4 <__sfvwrite_r+0x370>
   466bc:	10c1200c 	andi	r3,r2,1152
   466c0:	18009f1e 	bne	r3,zero,46940 <__sfvwrite_r+0x3dc>
   466c4:	81000017 	ldw	r4,0(r16)
   466c8:	982f883a 	mov	r23,r19
   466cc:	9039883a 	mov	fp,r18
   466d0:	9027883a 	mov	r19,r18
   466d4:	380d883a 	mov	r6,r7
   466d8:	b00b883a 	mov	r5,r22
   466dc:	d9c00015 	stw	r7,0(sp)
   466e0:	00470640 	call	47064 <memmove>
   466e4:	d9c00017 	ldw	r7,0(sp)
   466e8:	81000217 	ldw	r4,8(r16)
   466ec:	80800017 	ldw	r2,0(r16)
   466f0:	25efc83a 	sub	r23,r4,r23
   466f4:	11cf883a 	add	r7,r2,r7
   466f8:	85c00215 	stw	r23,8(r16)
   466fc:	81c00015 	stw	r7,0(r16)
   46700:	a0800217 	ldw	r2,8(r20)
   46704:	b72d883a 	add	r22,r22,fp
   46708:	9725c83a 	sub	r18,r18,fp
   4670c:	14e7c83a 	sub	r19,r2,r19
   46710:	a4c00215 	stw	r19,8(r20)
   46714:	983fc426 	beq	r19,zero,46628 <__sfvwrite_r+0xc4>
   46718:	8080030b 	ldhu	r2,12(r16)
   4671c:	903fdf1e 	bne	r18,zero,4669c <__sfvwrite_r+0x138>
   46720:	8d800017 	ldw	r22,0(r17)
   46724:	8c800117 	ldw	r18,4(r17)
   46728:	8c400204 	addi	r17,r17,8
   4672c:	003fda06 	br	46698 <__sfvwrite_r+0x134>
   46730:	8cc00017 	ldw	r19,0(r17)
   46734:	8c800117 	ldw	r18,4(r17)
   46738:	8c400204 	addi	r17,r17,8
   4673c:	003faa06 	br	465e8 <__sfvwrite_r+0x84>
   46740:	004831c0 	call	4831c <_realloc_r>
   46744:	102f883a 	mov	r23,r2
   46748:	10009f1e 	bne	r2,zero,469c8 <__sfvwrite_r+0x464>
   4674c:	81400417 	ldw	r5,16(r16)
   46750:	a809883a 	mov	r4,r21
   46754:	00462940 	call	46294 <_free_r>
   46758:	00800304 	movi	r2,12
   4675c:	a8800015 	stw	r2,0(r21)
   46760:	80c0030b 	ldhu	r3,12(r16)
   46764:	00bfffc4 	movi	r2,-1
   46768:	18c01014 	ori	r3,r3,64
   4676c:	80c0030d 	sth	r3,12(r16)
   46770:	003fae06 	br	4662c <__sfvwrite_r+0xc8>
   46774:	0007883a 	mov	r3,zero
   46778:	0039883a 	mov	fp,zero
   4677c:	0025883a 	mov	r18,zero
   46780:	90001e26 	beq	r18,zero,467fc <__sfvwrite_r+0x298>
   46784:	18006526 	beq	r3,zero,4691c <__sfvwrite_r+0x3b8>
   46788:	b02f883a 	mov	r23,r22
   4678c:	9580012e 	bgeu	r18,r22,46794 <__sfvwrite_r+0x230>
   46790:	902f883a 	mov	r23,r18
   46794:	81000017 	ldw	r4,0(r16)
   46798:	80800417 	ldw	r2,16(r16)
   4679c:	84c00217 	ldw	r19,8(r16)
   467a0:	81c00517 	ldw	r7,20(r16)
   467a4:	1100022e 	bgeu	r2,r4,467b0 <__sfvwrite_r+0x24c>
   467a8:	99e7883a 	add	r19,r19,r7
   467ac:	9dc01816 	blt	r19,r23,46810 <__sfvwrite_r+0x2ac>
   467b0:	b9c03b16 	blt	r23,r7,468a0 <__sfvwrite_r+0x33c>
   467b4:	80800917 	ldw	r2,36(r16)
   467b8:	81400717 	ldw	r5,28(r16)
   467bc:	a809883a 	mov	r4,r21
   467c0:	d8c00015 	stw	r3,0(sp)
   467c4:	e00d883a 	mov	r6,fp
   467c8:	103ee83a 	callr	r2
   467cc:	1027883a 	mov	r19,r2
   467d0:	d8c00017 	ldw	r3,0(sp)
   467d4:	00bfe20e 	bge	zero,r2,46760 <__sfvwrite_r+0x1fc>
   467d8:	b4edc83a 	sub	r22,r22,r19
   467dc:	b0001a26 	beq	r22,zero,46848 <__sfvwrite_r+0x2e4>
   467e0:	a0800217 	ldw	r2,8(r20)
   467e4:	e4f9883a 	add	fp,fp,r19
   467e8:	94e5c83a 	sub	r18,r18,r19
   467ec:	14e7c83a 	sub	r19,r2,r19
   467f0:	a4c00215 	stw	r19,8(r20)
   467f4:	983f8c26 	beq	r19,zero,46628 <__sfvwrite_r+0xc4>
   467f8:	903fe21e 	bne	r18,zero,46784 <__sfvwrite_r+0x220>
   467fc:	8f000017 	ldw	fp,0(r17)
   46800:	8c800117 	ldw	r18,4(r17)
   46804:	0007883a 	mov	r3,zero
   46808:	8c400204 	addi	r17,r17,8
   4680c:	003fdc06 	br	46780 <__sfvwrite_r+0x21c>
   46810:	e00b883a 	mov	r5,fp
   46814:	980d883a 	mov	r6,r19
   46818:	d8c00015 	stw	r3,0(sp)
   4681c:	00470640 	call	47064 <memmove>
   46820:	80800017 	ldw	r2,0(r16)
   46824:	a809883a 	mov	r4,r21
   46828:	800b883a 	mov	r5,r16
   4682c:	14c5883a 	add	r2,r2,r19
   46830:	80800015 	stw	r2,0(r16)
   46834:	0045c540 	call	45c54 <_fflush_r>
   46838:	d8c00017 	ldw	r3,0(sp)
   4683c:	103fc81e 	bne	r2,zero,46760 <__sfvwrite_r+0x1fc>
   46840:	b4edc83a 	sub	r22,r22,r19
   46844:	b03fe61e 	bne	r22,zero,467e0 <__sfvwrite_r+0x27c>
   46848:	a809883a 	mov	r4,r21
   4684c:	800b883a 	mov	r5,r16
   46850:	0045c540 	call	45c54 <_fflush_r>
   46854:	103fc21e 	bne	r2,zero,46760 <__sfvwrite_r+0x1fc>
   46858:	0007883a 	mov	r3,zero
   4685c:	003fe006 	br	467e0 <__sfvwrite_r+0x27c>
   46860:	81000017 	ldw	r4,0(r16)
   46864:	80800417 	ldw	r2,16(r16)
   46868:	1100022e 	bgeu	r2,r4,46874 <__sfvwrite_r+0x310>
   4686c:	9839883a 	mov	fp,r19
   46870:	9c806036 	bltu	r19,r18,469f4 <__sfvwrite_r+0x490>
   46874:	81c00517 	ldw	r7,20(r16)
   46878:	91c01c36 	bltu	r18,r7,468ec <__sfvwrite_r+0x388>
   4687c:	80800917 	ldw	r2,36(r16)
   46880:	81400717 	ldw	r5,28(r16)
   46884:	a809883a 	mov	r4,r21
   46888:	b00d883a 	mov	r6,r22
   4688c:	103ee83a 	callr	r2
   46890:	1027883a 	mov	r19,r2
   46894:	00bfb20e 	bge	zero,r2,46760 <__sfvwrite_r+0x1fc>
   46898:	1039883a 	mov	fp,r2
   4689c:	003f9806 	br	46700 <__sfvwrite_r+0x19c>
   468a0:	b80d883a 	mov	r6,r23
   468a4:	e00b883a 	mov	r5,fp
   468a8:	d8c00015 	stw	r3,0(sp)
   468ac:	00470640 	call	47064 <memmove>
   468b0:	80800217 	ldw	r2,8(r16)
   468b4:	81000017 	ldw	r4,0(r16)
   468b8:	b827883a 	mov	r19,r23
   468bc:	15c5c83a 	sub	r2,r2,r23
   468c0:	25ef883a 	add	r23,r4,r23
   468c4:	80800215 	stw	r2,8(r16)
   468c8:	85c00015 	stw	r23,0(r16)
   468cc:	d8c00017 	ldw	r3,0(sp)
   468d0:	003fc106 	br	467d8 <__sfvwrite_r+0x274>
   468d4:	81000017 	ldw	r4,0(r16)
   468d8:	902f883a 	mov	r23,r18
   468dc:	9039883a 	mov	fp,r18
   468e0:	9027883a 	mov	r19,r18
   468e4:	900f883a 	mov	r7,r18
   468e8:	003f7a06 	br	466d4 <__sfvwrite_r+0x170>
   468ec:	b00b883a 	mov	r5,r22
   468f0:	900d883a 	mov	r6,r18
   468f4:	00470640 	call	47064 <memmove>
   468f8:	80c00217 	ldw	r3,8(r16)
   468fc:	80800017 	ldw	r2,0(r16)
   46900:	9027883a 	mov	r19,r18
   46904:	1c87c83a 	sub	r3,r3,r18
   46908:	1485883a 	add	r2,r2,r18
   4690c:	80c00215 	stw	r3,8(r16)
   46910:	80800015 	stw	r2,0(r16)
   46914:	9039883a 	mov	fp,r18
   46918:	003f7906 	br	46700 <__sfvwrite_r+0x19c>
   4691c:	e009883a 	mov	r4,fp
   46920:	01400284 	movi	r5,10
   46924:	900d883a 	mov	r6,r18
   46928:	0046e2c0 	call	46e2c <memchr>
   4692c:	10003c26 	beq	r2,zero,46a20 <__sfvwrite_r+0x4bc>
   46930:	15800044 	addi	r22,r2,1
   46934:	b72dc83a 	sub	r22,r22,fp
   46938:	00c00044 	movi	r3,1
   4693c:	003f9206 	br	46788 <__sfvwrite_r+0x224>
   46940:	81000517 	ldw	r4,20(r16)
   46944:	81400417 	ldw	r5,16(r16)
   46948:	80c00017 	ldw	r3,0(r16)
   4694c:	210d883a 	add	r6,r4,r4
   46950:	3109883a 	add	r4,r6,r4
   46954:	2026d7fa 	srli	r19,r4,31
   46958:	1979c83a 	sub	fp,r3,r5
   4695c:	e1800044 	addi	r6,fp,1
   46960:	9909883a 	add	r4,r19,r4
   46964:	2027d07a 	srai	r19,r4,1
   46968:	3489883a 	add	r4,r6,r18
   4696c:	980d883a 	mov	r6,r19
   46970:	9900022e 	bgeu	r19,r4,4697c <__sfvwrite_r+0x418>
   46974:	2027883a 	mov	r19,r4
   46978:	200d883a 	mov	r6,r4
   4697c:	1081000c 	andi	r2,r2,1024
   46980:	10bfffcc 	andi	r2,r2,65535
   46984:	10a0001c 	xori	r2,r2,32768
   46988:	10a00004 	addi	r2,r2,-32768
   4698c:	a809883a 	mov	r4,r21
   46990:	103f6b26 	beq	r2,zero,46740 <__sfvwrite_r+0x1dc>
   46994:	300b883a 	mov	r5,r6
   46998:	0041a400 	call	41a40 <_malloc_r>
   4699c:	102f883a 	mov	r23,r2
   469a0:	103f6d26 	beq	r2,zero,46758 <__sfvwrite_r+0x1f4>
   469a4:	81400417 	ldw	r5,16(r16)
   469a8:	1009883a 	mov	r4,r2
   469ac:	e00d883a 	mov	r6,fp
   469b0:	0046f240 	call	46f24 <memcpy>
   469b4:	8080030b 	ldhu	r2,12(r16)
   469b8:	00fedfc4 	movi	r3,-1153
   469bc:	10c4703a 	and	r2,r2,r3
   469c0:	10802014 	ori	r2,r2,128
   469c4:	8080030d 	sth	r2,12(r16)
   469c8:	bf09883a 	add	r4,r23,fp
   469cc:	9f07c83a 	sub	r3,r19,fp
   469d0:	85c00415 	stw	r23,16(r16)
   469d4:	84c00515 	stw	r19,20(r16)
   469d8:	81000015 	stw	r4,0(r16)
   469dc:	902f883a 	mov	r23,r18
   469e0:	80c00215 	stw	r3,8(r16)
   469e4:	9039883a 	mov	fp,r18
   469e8:	9027883a 	mov	r19,r18
   469ec:	900f883a 	mov	r7,r18
   469f0:	003f3806 	br	466d4 <__sfvwrite_r+0x170>
   469f4:	b00b883a 	mov	r5,r22
   469f8:	980d883a 	mov	r6,r19
   469fc:	00470640 	call	47064 <memmove>
   46a00:	80800017 	ldw	r2,0(r16)
   46a04:	a809883a 	mov	r4,r21
   46a08:	800b883a 	mov	r5,r16
   46a0c:	14c5883a 	add	r2,r2,r19
   46a10:	80800015 	stw	r2,0(r16)
   46a14:	0045c540 	call	45c54 <_fflush_r>
   46a18:	103f3926 	beq	r2,zero,46700 <__sfvwrite_r+0x19c>
   46a1c:	003f5006 	br	46760 <__sfvwrite_r+0x1fc>
   46a20:	95800044 	addi	r22,r18,1
   46a24:	00c00044 	movi	r3,1
   46a28:	003f5706 	br	46788 <__sfvwrite_r+0x224>
   46a2c:	80c0030b 	ldhu	r3,12(r16)
   46a30:	00bfffc4 	movi	r2,-1
   46a34:	18c01014 	ori	r3,r3,64
   46a38:	80c0030d 	sth	r3,12(r16)
   46a3c:	00c00244 	movi	r3,9
   46a40:	a8c00015 	stw	r3,0(r21)
   46a44:	003ef906 	br	4662c <__sfvwrite_r+0xc8>

00046a48 <_fwalk>:
   46a48:	defff904 	addi	sp,sp,-28
   46a4c:	dcc00315 	stw	r19,12(sp)
   46a50:	24c0b804 	addi	r19,r4,736
   46a54:	dd400515 	stw	r21,20(sp)
   46a58:	dd000415 	stw	r20,16(sp)
   46a5c:	dfc00615 	stw	ra,24(sp)
   46a60:	dc800215 	stw	r18,8(sp)
   46a64:	dc400115 	stw	r17,4(sp)
   46a68:	dc000015 	stw	r16,0(sp)
   46a6c:	282b883a 	mov	r21,r5
   46a70:	0029883a 	mov	r20,zero
   46a74:	00461180 	call	46118 <__sfp_lock_acquire>
   46a78:	98001226 	beq	r19,zero,46ac4 <_fwalk+0x7c>
   46a7c:	04bfffc4 	movi	r18,-1
   46a80:	9c400117 	ldw	r17,4(r19)
   46a84:	9c000217 	ldw	r16,8(r19)
   46a88:	8c7fffc4 	addi	r17,r17,-1
   46a8c:	88000b16 	blt	r17,zero,46abc <_fwalk+0x74>
   46a90:	84000304 	addi	r16,r16,12
   46a94:	80c0000f 	ldh	r3,0(r16)
   46a98:	8c7fffc4 	addi	r17,r17,-1
   46a9c:	813ffd04 	addi	r4,r16,-12
   46aa0:	18000426 	beq	r3,zero,46ab4 <_fwalk+0x6c>
   46aa4:	80c0008f 	ldh	r3,2(r16)
   46aa8:	1c800226 	beq	r3,r18,46ab4 <_fwalk+0x6c>
   46aac:	a83ee83a 	callr	r21
   46ab0:	a0a8b03a 	or	r20,r20,r2
   46ab4:	84001704 	addi	r16,r16,92
   46ab8:	8cbff61e 	bne	r17,r18,46a94 <_fwalk+0x4c>
   46abc:	9cc00017 	ldw	r19,0(r19)
   46ac0:	983fef1e 	bne	r19,zero,46a80 <_fwalk+0x38>
   46ac4:	004611c0 	call	4611c <__sfp_lock_release>
   46ac8:	a005883a 	mov	r2,r20
   46acc:	dfc00617 	ldw	ra,24(sp)
   46ad0:	dd400517 	ldw	r21,20(sp)
   46ad4:	dd000417 	ldw	r20,16(sp)
   46ad8:	dcc00317 	ldw	r19,12(sp)
   46adc:	dc800217 	ldw	r18,8(sp)
   46ae0:	dc400117 	ldw	r17,4(sp)
   46ae4:	dc000017 	ldw	r16,0(sp)
   46ae8:	dec00704 	addi	sp,sp,28
   46aec:	f800283a 	ret

00046af0 <_fwalk_reent>:
   46af0:	defff804 	addi	sp,sp,-32
   46af4:	dcc00315 	stw	r19,12(sp)
   46af8:	24c0b804 	addi	r19,r4,736
   46afc:	dd800615 	stw	r22,24(sp)
   46b00:	dd400515 	stw	r21,20(sp)
   46b04:	dd000415 	stw	r20,16(sp)
   46b08:	dfc00715 	stw	ra,28(sp)
   46b0c:	dc800215 	stw	r18,8(sp)
   46b10:	dc400115 	stw	r17,4(sp)
   46b14:	dc000015 	stw	r16,0(sp)
   46b18:	2029883a 	mov	r20,r4
   46b1c:	282b883a 	mov	r21,r5
   46b20:	002d883a 	mov	r22,zero
   46b24:	00461180 	call	46118 <__sfp_lock_acquire>
   46b28:	98001326 	beq	r19,zero,46b78 <_fwalk_reent+0x88>
   46b2c:	04bfffc4 	movi	r18,-1
   46b30:	9c400117 	ldw	r17,4(r19)
   46b34:	9c000217 	ldw	r16,8(r19)
   46b38:	8c7fffc4 	addi	r17,r17,-1
   46b3c:	88000c16 	blt	r17,zero,46b70 <_fwalk_reent+0x80>
   46b40:	84000304 	addi	r16,r16,12
   46b44:	80c0000f 	ldh	r3,0(r16)
   46b48:	8c7fffc4 	addi	r17,r17,-1
   46b4c:	817ffd04 	addi	r5,r16,-12
   46b50:	18000526 	beq	r3,zero,46b68 <_fwalk_reent+0x78>
   46b54:	80c0008f 	ldh	r3,2(r16)
   46b58:	a009883a 	mov	r4,r20
   46b5c:	1c800226 	beq	r3,r18,46b68 <_fwalk_reent+0x78>
   46b60:	a83ee83a 	callr	r21
   46b64:	b0acb03a 	or	r22,r22,r2
   46b68:	84001704 	addi	r16,r16,92
   46b6c:	8cbff51e 	bne	r17,r18,46b44 <_fwalk_reent+0x54>
   46b70:	9cc00017 	ldw	r19,0(r19)
   46b74:	983fee1e 	bne	r19,zero,46b30 <_fwalk_reent+0x40>
   46b78:	004611c0 	call	4611c <__sfp_lock_release>
   46b7c:	b005883a 	mov	r2,r22
   46b80:	dfc00717 	ldw	ra,28(sp)
   46b84:	dd800617 	ldw	r22,24(sp)
   46b88:	dd400517 	ldw	r21,20(sp)
   46b8c:	dd000417 	ldw	r20,16(sp)
   46b90:	dcc00317 	ldw	r19,12(sp)
   46b94:	dc800217 	ldw	r18,8(sp)
   46b98:	dc400117 	ldw	r17,4(sp)
   46b9c:	dc000017 	ldw	r16,0(sp)
   46ba0:	dec00804 	addi	sp,sp,32
   46ba4:	f800283a 	ret

00046ba8 <_setlocale_r>:
   46ba8:	defffc04 	addi	sp,sp,-16
   46bac:	dc800215 	stw	r18,8(sp)
   46bb0:	dc400115 	stw	r17,4(sp)
   46bb4:	dc000015 	stw	r16,0(sp)
   46bb8:	dfc00315 	stw	ra,12(sp)
   46bbc:	3021883a 	mov	r16,r6
   46bc0:	2023883a 	mov	r17,r4
   46bc4:	2825883a 	mov	r18,r5
   46bc8:	30001626 	beq	r6,zero,46c24 <_setlocale_r+0x7c>
   46bcc:	3009883a 	mov	r4,r6
   46bd0:	01400174 	movhi	r5,5
   46bd4:	29785404 	addi	r5,r5,-7856
   46bd8:	0048abc0 	call	48abc <strcmp>
   46bdc:	10000a1e 	bne	r2,zero,46c08 <_setlocale_r+0x60>
   46be0:	8c800c15 	stw	r18,48(r17)
   46be4:	8c000d15 	stw	r16,52(r17)
   46be8:	00800174 	movhi	r2,5
   46bec:	10b85404 	addi	r2,r2,-7856
   46bf0:	dfc00317 	ldw	ra,12(sp)
   46bf4:	dc800217 	ldw	r18,8(sp)
   46bf8:	dc400117 	ldw	r17,4(sp)
   46bfc:	dc000017 	ldw	r16,0(sp)
   46c00:	dec00404 	addi	sp,sp,16
   46c04:	f800283a 	ret
   46c08:	8009883a 	mov	r4,r16
   46c0c:	01400174 	movhi	r5,5
   46c10:	29783f04 	addi	r5,r5,-7940
   46c14:	0048abc0 	call	48abc <strcmp>
   46c18:	103ff126 	beq	r2,zero,46be0 <_setlocale_r+0x38>
   46c1c:	0005883a 	mov	r2,zero
   46c20:	003ff306 	br	46bf0 <_setlocale_r+0x48>
   46c24:	00800174 	movhi	r2,5
   46c28:	10b85404 	addi	r2,r2,-7856
   46c2c:	dfc00317 	ldw	ra,12(sp)
   46c30:	dc800217 	ldw	r18,8(sp)
   46c34:	dc400117 	ldw	r17,4(sp)
   46c38:	dc000017 	ldw	r16,0(sp)
   46c3c:	dec00404 	addi	sp,sp,16
   46c40:	f800283a 	ret

00046c44 <__locale_charset>:
   46c44:	00800174 	movhi	r2,5
   46c48:	10b85504 	addi	r2,r2,-7852
   46c4c:	f800283a 	ret

00046c50 <_localeconv_r>:
   46c50:	00800174 	movhi	r2,5
   46c54:	10b85904 	addi	r2,r2,-7836
   46c58:	f800283a 	ret

00046c5c <setlocale>:
   46c5c:	00c00174 	movhi	r3,5
   46c60:	18ff8b04 	addi	r3,r3,-468
   46c64:	2005883a 	mov	r2,r4
   46c68:	19000017 	ldw	r4,0(r3)
   46c6c:	280d883a 	mov	r6,r5
   46c70:	100b883a 	mov	r5,r2
   46c74:	0046ba81 	jmpi	46ba8 <_setlocale_r>

00046c78 <localeconv>:
   46c78:	00800174 	movhi	r2,5
   46c7c:	10b85904 	addi	r2,r2,-7836
   46c80:	f800283a 	ret

00046c84 <__smakebuf_r>:
   46c84:	2880030b 	ldhu	r2,12(r5)
   46c88:	deffed04 	addi	sp,sp,-76
   46c8c:	dc401015 	stw	r17,64(sp)
   46c90:	10c0008c 	andi	r3,r2,2
   46c94:	18ffffcc 	andi	r3,r3,65535
   46c98:	18e0001c 	xori	r3,r3,32768
   46c9c:	dc000f15 	stw	r16,60(sp)
   46ca0:	dfc01215 	stw	ra,72(sp)
   46ca4:	dc801115 	stw	r18,68(sp)
   46ca8:	18e00004 	addi	r3,r3,-32768
   46cac:	2821883a 	mov	r16,r5
   46cb0:	2023883a 	mov	r17,r4
   46cb4:	1800381e 	bne	r3,zero,46d98 <__smakebuf_r+0x114>
   46cb8:	2940038f 	ldh	r5,14(r5)
   46cbc:	28002d16 	blt	r5,zero,46d74 <__smakebuf_r+0xf0>
   46cc0:	d80d883a 	mov	r6,sp
   46cc4:	0048e4c0 	call	48e4c <_fstat_r>
   46cc8:	10002916 	blt	r2,zero,46d70 <__smakebuf_r+0xec>
   46ccc:	d8800117 	ldw	r2,4(sp)
   46cd0:	00e00014 	movui	r3,32768
   46cd4:	10bc000c 	andi	r2,r2,61440
   46cd8:	10c03c26 	beq	r2,r3,46dcc <__smakebuf_r+0x148>
   46cdc:	80c0030b 	ldhu	r3,12(r16)
   46ce0:	18c20014 	ori	r3,r3,2048
   46ce4:	80c0030d 	sth	r3,12(r16)
   46ce8:	00c80004 	movi	r3,8192
   46cec:	10c00c1e 	bne	r2,r3,46d20 <__smakebuf_r+0x9c>
   46cf0:	8140038f 	ldh	r5,14(r16)
   46cf4:	8809883a 	mov	r4,r17
   46cf8:	0048eb40 	call	48eb4 <_isatty_r>
   46cfc:	10000826 	beq	r2,zero,46d20 <__smakebuf_r+0x9c>
   46d00:	80c0030b 	ldhu	r3,12(r16)
   46d04:	808010c4 	addi	r2,r16,67
   46d08:	80800015 	stw	r2,0(r16)
   46d0c:	18c00054 	ori	r3,r3,1
   46d10:	80800415 	stw	r2,16(r16)
   46d14:	00800044 	movi	r2,1
   46d18:	80c0030d 	sth	r3,12(r16)
   46d1c:	80800515 	stw	r2,20(r16)
   46d20:	04810004 	movi	r18,1024
   46d24:	8809883a 	mov	r4,r17
   46d28:	900b883a 	mov	r5,r18
   46d2c:	0041a400 	call	41a40 <_malloc_r>
   46d30:	10003026 	beq	r2,zero,46df4 <__smakebuf_r+0x170>
   46d34:	80c0030b 	ldhu	r3,12(r16)
   46d38:	01000134 	movhi	r4,4
   46d3c:	21179f04 	addi	r4,r4,24188
   46d40:	89000f15 	stw	r4,60(r17)
   46d44:	18c02014 	ori	r3,r3,128
   46d48:	80c0030d 	sth	r3,12(r16)
   46d4c:	80800015 	stw	r2,0(r16)
   46d50:	80800415 	stw	r2,16(r16)
   46d54:	84800515 	stw	r18,20(r16)
   46d58:	dfc01217 	ldw	ra,72(sp)
   46d5c:	dc801117 	ldw	r18,68(sp)
   46d60:	dc401017 	ldw	r17,64(sp)
   46d64:	dc000f17 	ldw	r16,60(sp)
   46d68:	dec01304 	addi	sp,sp,76
   46d6c:	f800283a 	ret
   46d70:	8080030b 	ldhu	r2,12(r16)
   46d74:	10c0200c 	andi	r3,r2,128
   46d78:	18ffffcc 	andi	r3,r3,65535
   46d7c:	18e0001c 	xori	r3,r3,32768
   46d80:	18e00004 	addi	r3,r3,-32768
   46d84:	18000f1e 	bne	r3,zero,46dc4 <__smakebuf_r+0x140>
   46d88:	04810004 	movi	r18,1024
   46d8c:	10820014 	ori	r2,r2,2048
   46d90:	8080030d 	sth	r2,12(r16)
   46d94:	003fe306 	br	46d24 <__smakebuf_r+0xa0>
   46d98:	288010c4 	addi	r2,r5,67
   46d9c:	28800015 	stw	r2,0(r5)
   46da0:	28800415 	stw	r2,16(r5)
   46da4:	00800044 	movi	r2,1
   46da8:	28800515 	stw	r2,20(r5)
   46dac:	dfc01217 	ldw	ra,72(sp)
   46db0:	dc801117 	ldw	r18,68(sp)
   46db4:	dc401017 	ldw	r17,64(sp)
   46db8:	dc000f17 	ldw	r16,60(sp)
   46dbc:	dec01304 	addi	sp,sp,76
   46dc0:	f800283a 	ret
   46dc4:	04801004 	movi	r18,64
   46dc8:	003ff006 	br	46d8c <__smakebuf_r+0x108>
   46dcc:	81000a17 	ldw	r4,40(r16)
   46dd0:	00c00174 	movhi	r3,5
   46dd4:	18e29604 	addi	r3,r3,-30120
   46dd8:	20ffc01e 	bne	r4,r3,46cdc <__smakebuf_r+0x58>
   46ddc:	8080030b 	ldhu	r2,12(r16)
   46de0:	00c10004 	movi	r3,1024
   46de4:	80c01315 	stw	r3,76(r16)
   46de8:	10c4b03a 	or	r2,r2,r3
   46dec:	8080030d 	sth	r2,12(r16)
   46df0:	003fcb06 	br	46d20 <__smakebuf_r+0x9c>
   46df4:	8080030b 	ldhu	r2,12(r16)
   46df8:	10c0800c 	andi	r3,r2,512
   46dfc:	18ffffcc 	andi	r3,r3,65535
   46e00:	18e0001c 	xori	r3,r3,32768
   46e04:	18e00004 	addi	r3,r3,-32768
   46e08:	183fd31e 	bne	r3,zero,46d58 <__smakebuf_r+0xd4>
   46e0c:	10800094 	ori	r2,r2,2
   46e10:	80c010c4 	addi	r3,r16,67
   46e14:	8080030d 	sth	r2,12(r16)
   46e18:	00800044 	movi	r2,1
   46e1c:	80c00015 	stw	r3,0(r16)
   46e20:	80c00415 	stw	r3,16(r16)
   46e24:	80800515 	stw	r2,20(r16)
   46e28:	003fcb06 	br	46d58 <__smakebuf_r+0xd4>

00046e2c <memchr>:
   46e2c:	008000c4 	movi	r2,3
   46e30:	29403fcc 	andi	r5,r5,255
   46e34:	1180282e 	bgeu	r2,r6,46ed8 <memchr+0xac>
   46e38:	2086703a 	and	r3,r4,r2
   46e3c:	1800351e 	bne	r3,zero,46f14 <memchr+0xe8>
   46e40:	2816923a 	slli	r11,r5,8
   46e44:	2093883a 	add	r9,r4,r2
   46e48:	22000084 	addi	r8,r4,2
   46e4c:	5957883a 	add	r11,r11,r5
   46e50:	5816923a 	slli	r11,r11,8
   46e54:	20c00044 	addi	r3,r4,1
   46e58:	037fbff4 	movhi	r13,65279
   46e5c:	6b7fbfc4 	addi	r13,r13,-257
   46e60:	5957883a 	add	r11,r11,r5
   46e64:	5816923a 	slli	r11,r11,8
   46e68:	03202074 	movhi	r12,32897
   46e6c:	63202004 	addi	r12,r12,-32640
   46e70:	101d883a 	mov	r14,r2
   46e74:	5957883a 	add	r11,r11,r5
   46e78:	21c00017 	ldw	r7,0(r4)
   46e7c:	31bfff04 	addi	r6,r6,-4
   46e80:	1805883a 	mov	r2,r3
   46e84:	3acef03a 	xor	r7,r7,r11
   46e88:	3b55883a 	add	r10,r7,r13
   46e8c:	01ce303a 	nor	r7,zero,r7
   46e90:	51ce703a 	and	r7,r10,r7
   46e94:	3b0e703a 	and	r7,r7,r12
   46e98:	38000a26 	beq	r7,zero,46ec4 <memchr+0x98>
   46e9c:	21c00003 	ldbu	r7,0(r4)
   46ea0:	39401e26 	beq	r7,r5,46f1c <memchr+0xf0>
   46ea4:	19c00003 	ldbu	r7,0(r3)
   46ea8:	39401926 	beq	r7,r5,46f10 <memchr+0xe4>
   46eac:	41c00003 	ldbu	r7,0(r8)
   46eb0:	4005883a 	mov	r2,r8
   46eb4:	39401626 	beq	r7,r5,46f10 <memchr+0xe4>
   46eb8:	49c00003 	ldbu	r7,0(r9)
   46ebc:	4805883a 	mov	r2,r9
   46ec0:	39401326 	beq	r7,r5,46f10 <memchr+0xe4>
   46ec4:	21000104 	addi	r4,r4,4
   46ec8:	4a400104 	addi	r9,r9,4
   46ecc:	42000104 	addi	r8,r8,4
   46ed0:	18c00104 	addi	r3,r3,4
   46ed4:	71bfe836 	bltu	r14,r6,46e78 <memchr+0x4c>
   46ed8:	2005883a 	mov	r2,r4
   46edc:	30000a26 	beq	r6,zero,46f08 <memchr+0xdc>
   46ee0:	10c00003 	ldbu	r3,0(r2)
   46ee4:	19400a26 	beq	r3,r5,46f10 <memchr+0xe4>
   46ee8:	10c00044 	addi	r3,r2,1
   46eec:	118d883a 	add	r6,r2,r6
   46ef0:	00000306 	br	46f00 <memchr+0xd4>
   46ef4:	11000003 	ldbu	r4,0(r2)
   46ef8:	18c00044 	addi	r3,r3,1
   46efc:	21400426 	beq	r4,r5,46f10 <memchr+0xe4>
   46f00:	1805883a 	mov	r2,r3
   46f04:	19bffb1e 	bne	r3,r6,46ef4 <memchr+0xc8>
   46f08:	0005883a 	mov	r2,zero
   46f0c:	f800283a 	ret
   46f10:	f800283a 	ret
   46f14:	2005883a 	mov	r2,r4
   46f18:	003ff106 	br	46ee0 <memchr+0xb4>
   46f1c:	2005883a 	mov	r2,r4
   46f20:	f800283a 	ret

00046f24 <memcpy>:
   46f24:	defffb04 	addi	sp,sp,-20
   46f28:	dc000015 	stw	r16,0(sp)
   46f2c:	dfc00415 	stw	ra,16(sp)
   46f30:	dcc00315 	stw	r19,12(sp)
   46f34:	dc800215 	stw	r18,8(sp)
   46f38:	dc400115 	stw	r17,4(sp)
   46f3c:	00c003c4 	movi	r3,15
   46f40:	2021883a 	mov	r16,r4
   46f44:	3005883a 	mov	r2,r6
   46f48:	1980032e 	bgeu	r3,r6,46f58 <memcpy+0x34>
   46f4c:	2906b03a 	or	r3,r5,r4
   46f50:	18c000cc 	andi	r3,r3,3
   46f54:	18001026 	beq	r3,zero,46f98 <memcpy+0x74>
   46f58:	8007883a 	mov	r3,r16
   46f5c:	288f883a 	add	r7,r5,r2
   46f60:	10000526 	beq	r2,zero,46f78 <memcpy+0x54>
   46f64:	29800003 	ldbu	r6,0(r5)
   46f68:	18c00044 	addi	r3,r3,1
   46f6c:	29400044 	addi	r5,r5,1
   46f70:	19bfffc5 	stb	r6,-1(r3)
   46f74:	29fffb1e 	bne	r5,r7,46f64 <memcpy+0x40>
   46f78:	8005883a 	mov	r2,r16
   46f7c:	dfc00417 	ldw	ra,16(sp)
   46f80:	dcc00317 	ldw	r19,12(sp)
   46f84:	dc800217 	ldw	r18,8(sp)
   46f88:	dc400117 	ldw	r17,4(sp)
   46f8c:	dc000017 	ldw	r16,0(sp)
   46f90:	dec00504 	addi	sp,sp,20
   46f94:	f800283a 	ret
   46f98:	32bffc04 	addi	r10,r6,-16
   46f9c:	5014d13a 	srli	r10,r10,4
   46fa0:	20800404 	addi	r2,r4,16
   46fa4:	2007883a 	mov	r3,r4
   46fa8:	5008913a 	slli	r4,r10,4
   46fac:	280f883a 	mov	r7,r5
   46fb0:	1105883a 	add	r2,r2,r4
   46fb4:	3a000017 	ldw	r8,0(r7)
   46fb8:	18c00404 	addi	r3,r3,16
   46fbc:	39c00404 	addi	r7,r7,16
   46fc0:	1a3ffc15 	stw	r8,-16(r3)
   46fc4:	3a3ffd17 	ldw	r8,-12(r7)
   46fc8:	1a3ffd15 	stw	r8,-12(r3)
   46fcc:	3a3ffe17 	ldw	r8,-8(r7)
   46fd0:	1a3ffe15 	stw	r8,-8(r3)
   46fd4:	3a3fff17 	ldw	r8,-4(r7)
   46fd8:	1a3fff15 	stw	r8,-4(r3)
   46fdc:	18bff51e 	bne	r3,r2,46fb4 <memcpy+0x90>
   46fe0:	52800044 	addi	r10,r10,1
   46fe4:	5014913a 	slli	r10,r10,4
   46fe8:	308003cc 	andi	r2,r6,15
   46fec:	010000c4 	movi	r4,3
   46ff0:	8287883a 	add	r3,r16,r10
   46ff4:	2a95883a 	add	r10,r5,r10
   46ff8:	2080182e 	bgeu	r4,r2,4705c <memcpy+0x138>
   46ffc:	147fff04 	addi	r17,r2,-4
   47000:	8808d0ba 	srli	r4,r17,2
   47004:	1a400104 	addi	r9,r3,4
   47008:	180d883a 	mov	r6,r3
   4700c:	2105883a 	add	r2,r4,r4
   47010:	1085883a 	add	r2,r2,r2
   47014:	4893883a 	add	r9,r9,r2
   47018:	500f883a 	mov	r7,r10
   4701c:	3a000017 	ldw	r8,0(r7)
   47020:	31800104 	addi	r6,r6,4
   47024:	39c00104 	addi	r7,r7,4
   47028:	323fff15 	stw	r8,-4(r6)
   4702c:	327ffb1e 	bne	r6,r9,4701c <memcpy+0xf8>
   47030:	20800044 	addi	r2,r4,1
   47034:	1085883a 	add	r2,r2,r2
   47038:	1085883a 	add	r2,r2,r2
   4703c:	017fff04 	movi	r5,-4
   47040:	18a5883a 	add	r18,r3,r2
   47044:	50a7883a 	add	r19,r10,r2
   47048:	00419f00 	call	419f0 <__mulsi3>
   4704c:	1445883a 	add	r2,r2,r17
   47050:	980b883a 	mov	r5,r19
   47054:	9007883a 	mov	r3,r18
   47058:	003fc006 	br	46f5c <memcpy+0x38>
   4705c:	500b883a 	mov	r5,r10
   47060:	003fbe06 	br	46f5c <memcpy+0x38>

00047064 <memmove>:
   47064:	defffb04 	addi	sp,sp,-20
   47068:	dc000015 	stw	r16,0(sp)
   4706c:	dfc00415 	stw	ra,16(sp)
   47070:	dcc00315 	stw	r19,12(sp)
   47074:	dc800215 	stw	r18,8(sp)
   47078:	dc400115 	stw	r17,4(sp)
   4707c:	2021883a 	mov	r16,r4
   47080:	300f883a 	mov	r7,r6
   47084:	2900122e 	bgeu	r5,r4,470d0 <memmove+0x6c>
   47088:	2987883a 	add	r3,r5,r6
   4708c:	20c0102e 	bgeu	r4,r3,470d0 <memmove+0x6c>
   47090:	218b883a 	add	r5,r4,r6
   47094:	1989c83a 	sub	r4,r3,r6
   47098:	30000526 	beq	r6,zero,470b0 <memmove+0x4c>
   4709c:	18ffffc4 	addi	r3,r3,-1
   470a0:	18800003 	ldbu	r2,0(r3)
   470a4:	297fffc4 	addi	r5,r5,-1
   470a8:	28800005 	stb	r2,0(r5)
   470ac:	193ffb1e 	bne	r3,r4,4709c <memmove+0x38>
   470b0:	8005883a 	mov	r2,r16
   470b4:	dfc00417 	ldw	ra,16(sp)
   470b8:	dcc00317 	ldw	r19,12(sp)
   470bc:	dc800217 	ldw	r18,8(sp)
   470c0:	dc400117 	ldw	r17,4(sp)
   470c4:	dc000017 	ldw	r16,0(sp)
   470c8:	dec00504 	addi	sp,sp,20
   470cc:	f800283a 	ret
   470d0:	008003c4 	movi	r2,15
   470d4:	1180422e 	bgeu	r2,r6,471e0 <memmove+0x17c>
   470d8:	2c04b03a 	or	r2,r5,r16
   470dc:	108000cc 	andi	r2,r2,3
   470e0:	10003f1e 	bne	r2,zero,471e0 <memmove+0x17c>
   470e4:	32bffc04 	addi	r10,r6,-16
   470e8:	5014d13a 	srli	r10,r10,4
   470ec:	81000404 	addi	r4,r16,16
   470f0:	8007883a 	mov	r3,r16
   470f4:	5004913a 	slli	r2,r10,4
   470f8:	280f883a 	mov	r7,r5
   470fc:	2089883a 	add	r4,r4,r2
   47100:	38800017 	ldw	r2,0(r7)
   47104:	18c00404 	addi	r3,r3,16
   47108:	39c00404 	addi	r7,r7,16
   4710c:	18bffc15 	stw	r2,-16(r3)
   47110:	38bffd17 	ldw	r2,-12(r7)
   47114:	18bffd15 	stw	r2,-12(r3)
   47118:	38bffe17 	ldw	r2,-8(r7)
   4711c:	18bffe15 	stw	r2,-8(r3)
   47120:	38bfff17 	ldw	r2,-4(r7)
   47124:	18bfff15 	stw	r2,-4(r3)
   47128:	193ff51e 	bne	r3,r4,47100 <memmove+0x9c>
   4712c:	52800044 	addi	r10,r10,1
   47130:	5014913a 	slli	r10,r10,4
   47134:	31c003cc 	andi	r7,r6,15
   47138:	008000c4 	movi	r2,3
   4713c:	8287883a 	add	r3,r16,r10
   47140:	2a95883a 	add	r10,r5,r10
   47144:	11c0282e 	bgeu	r2,r7,471e8 <memmove+0x184>
   47148:	3c7fff04 	addi	r17,r7,-4
   4714c:	8808d0ba 	srli	r4,r17,2
   47150:	1a400104 	addi	r9,r3,4
   47154:	180d883a 	mov	r6,r3
   47158:	2105883a 	add	r2,r4,r4
   4715c:	1085883a 	add	r2,r2,r2
   47160:	4893883a 	add	r9,r9,r2
   47164:	5005883a 	mov	r2,r10
   47168:	12000017 	ldw	r8,0(r2)
   4716c:	31800104 	addi	r6,r6,4
   47170:	10800104 	addi	r2,r2,4
   47174:	323fff15 	stw	r8,-4(r6)
   47178:	327ffb1e 	bne	r6,r9,47168 <memmove+0x104>
   4717c:	20800044 	addi	r2,r4,1
   47180:	1085883a 	add	r2,r2,r2
   47184:	1085883a 	add	r2,r2,r2
   47188:	017fff04 	movi	r5,-4
   4718c:	18a5883a 	add	r18,r3,r2
   47190:	50a7883a 	add	r19,r10,r2
   47194:	00419f00 	call	419f0 <__mulsi3>
   47198:	144f883a 	add	r7,r2,r17
   4719c:	980b883a 	mov	r5,r19
   471a0:	9007883a 	mov	r3,r18
   471a4:	383fc226 	beq	r7,zero,470b0 <memmove+0x4c>
   471a8:	19cf883a 	add	r7,r3,r7
   471ac:	29800003 	ldbu	r6,0(r5)
   471b0:	18c00044 	addi	r3,r3,1
   471b4:	29400044 	addi	r5,r5,1
   471b8:	19bfffc5 	stb	r6,-1(r3)
   471bc:	19fffb1e 	bne	r3,r7,471ac <memmove+0x148>
   471c0:	8005883a 	mov	r2,r16
   471c4:	dfc00417 	ldw	ra,16(sp)
   471c8:	dcc00317 	ldw	r19,12(sp)
   471cc:	dc800217 	ldw	r18,8(sp)
   471d0:	dc400117 	ldw	r17,4(sp)
   471d4:	dc000017 	ldw	r16,0(sp)
   471d8:	dec00504 	addi	sp,sp,20
   471dc:	f800283a 	ret
   471e0:	8007883a 	mov	r3,r16
   471e4:	003fef06 	br	471a4 <memmove+0x140>
   471e8:	500b883a 	mov	r5,r10
   471ec:	003fed06 	br	471a4 <memmove+0x140>

000471f0 <memset>:
   471f0:	00c000c4 	movi	r3,3
   471f4:	2005883a 	mov	r2,r4
   471f8:	29403fcc 	andi	r5,r5,255
   471fc:	19802d2e 	bgeu	r3,r6,472b4 <memset+0xc4>
   47200:	20c6703a 	and	r3,r4,r3
   47204:	18002e1e 	bne	r3,zero,472c0 <memset+0xd0>
   47208:	2806923a 	slli	r3,r5,8
   4720c:	010003c4 	movi	r4,15
   47210:	3011883a 	mov	r8,r6
   47214:	1946b03a 	or	r3,r3,r5
   47218:	180e943a 	slli	r7,r3,16
   4721c:	38ceb03a 	or	r7,r7,r3
   47220:	1007883a 	mov	r3,r2
   47224:	21800f2e 	bgeu	r4,r6,47264 <memset+0x74>
   47228:	19c00015 	stw	r7,0(r3)
   4722c:	19c00115 	stw	r7,4(r3)
   47230:	19c00215 	stw	r7,8(r3)
   47234:	19c00315 	stw	r7,12(r3)
   47238:	423ffc04 	addi	r8,r8,-16
   4723c:	18c00404 	addi	r3,r3,16
   47240:	223ff936 	bltu	r4,r8,47228 <memset+0x38>
   47244:	30fffc04 	addi	r3,r6,-16
   47248:	1806d13a 	srli	r3,r3,4
   4724c:	318003cc 	andi	r6,r6,15
   47250:	010000c4 	movi	r4,3
   47254:	18c00044 	addi	r3,r3,1
   47258:	1806913a 	slli	r3,r3,4
   4725c:	10c7883a 	add	r3,r2,r3
   47260:	21800e2e 	bgeu	r4,r6,4729c <memset+0xac>
   47264:	1813883a 	mov	r9,r3
   47268:	3011883a 	mov	r8,r6
   4726c:	010000c4 	movi	r4,3
   47270:	49c00015 	stw	r7,0(r9)
   47274:	423fff04 	addi	r8,r8,-4
   47278:	4a400104 	addi	r9,r9,4
   4727c:	223ffc36 	bltu	r4,r8,47270 <memset+0x80>
   47280:	313fff04 	addi	r4,r6,-4
   47284:	2008d0ba 	srli	r4,r4,2
   47288:	318000cc 	andi	r6,r6,3
   4728c:	21000044 	addi	r4,r4,1
   47290:	2109883a 	add	r4,r4,r4
   47294:	2109883a 	add	r4,r4,r4
   47298:	1907883a 	add	r3,r3,r4
   4729c:	30000a26 	beq	r6,zero,472c8 <memset+0xd8>
   472a0:	198d883a 	add	r6,r3,r6
   472a4:	19400005 	stb	r5,0(r3)
   472a8:	18c00044 	addi	r3,r3,1
   472ac:	19bffd1e 	bne	r3,r6,472a4 <memset+0xb4>
   472b0:	f800283a 	ret
   472b4:	2007883a 	mov	r3,r4
   472b8:	303ff91e 	bne	r6,zero,472a0 <memset+0xb0>
   472bc:	00000206 	br	472c8 <memset+0xd8>
   472c0:	2007883a 	mov	r3,r4
   472c4:	003ff606 	br	472a0 <memset+0xb0>
   472c8:	f800283a 	ret

000472cc <_Balloc>:
   472cc:	20801317 	ldw	r2,76(r4)
   472d0:	defffc04 	addi	sp,sp,-16
   472d4:	dc400115 	stw	r17,4(sp)
   472d8:	dc000015 	stw	r16,0(sp)
   472dc:	dfc00315 	stw	ra,12(sp)
   472e0:	dc800215 	stw	r18,8(sp)
   472e4:	2023883a 	mov	r17,r4
   472e8:	2821883a 	mov	r16,r5
   472ec:	10000f26 	beq	r2,zero,4732c <_Balloc+0x60>
   472f0:	8407883a 	add	r3,r16,r16
   472f4:	18c7883a 	add	r3,r3,r3
   472f8:	10c7883a 	add	r3,r2,r3
   472fc:	18800017 	ldw	r2,0(r3)
   47300:	10001126 	beq	r2,zero,47348 <_Balloc+0x7c>
   47304:	11000017 	ldw	r4,0(r2)
   47308:	19000015 	stw	r4,0(r3)
   4730c:	10000415 	stw	zero,16(r2)
   47310:	10000315 	stw	zero,12(r2)
   47314:	dfc00317 	ldw	ra,12(sp)
   47318:	dc800217 	ldw	r18,8(sp)
   4731c:	dc400117 	ldw	r17,4(sp)
   47320:	dc000017 	ldw	r16,0(sp)
   47324:	dec00404 	addi	sp,sp,16
   47328:	f800283a 	ret
   4732c:	01400104 	movi	r5,4
   47330:	01800404 	movi	r6,16
   47334:	0048bcc0 	call	48bcc <_calloc_r>
   47338:	88801315 	stw	r2,76(r17)
   4733c:	103fec1e 	bne	r2,zero,472f0 <_Balloc+0x24>
   47340:	0005883a 	mov	r2,zero
   47344:	003ff306 	br	47314 <_Balloc+0x48>
   47348:	01400044 	movi	r5,1
   4734c:	2c24983a 	sll	r18,r5,r16
   47350:	8809883a 	mov	r4,r17
   47354:	91800144 	addi	r6,r18,5
   47358:	318d883a 	add	r6,r6,r6
   4735c:	318d883a 	add	r6,r6,r6
   47360:	0048bcc0 	call	48bcc <_calloc_r>
   47364:	103ff626 	beq	r2,zero,47340 <_Balloc+0x74>
   47368:	14000115 	stw	r16,4(r2)
   4736c:	14800215 	stw	r18,8(r2)
   47370:	003fe606 	br	4730c <_Balloc+0x40>

00047374 <_Bfree>:
   47374:	28000826 	beq	r5,zero,47398 <_Bfree+0x24>
   47378:	28c00117 	ldw	r3,4(r5)
   4737c:	20801317 	ldw	r2,76(r4)
   47380:	18c7883a 	add	r3,r3,r3
   47384:	18c7883a 	add	r3,r3,r3
   47388:	10c5883a 	add	r2,r2,r3
   4738c:	10c00017 	ldw	r3,0(r2)
   47390:	28c00015 	stw	r3,0(r5)
   47394:	11400015 	stw	r5,0(r2)
   47398:	f800283a 	ret

0004739c <__multadd>:
   4739c:	defff604 	addi	sp,sp,-40
   473a0:	dd400515 	stw	r21,20(sp)
   473a4:	2d400417 	ldw	r21,16(r5)
   473a8:	df000815 	stw	fp,32(sp)
   473ac:	ddc00715 	stw	r23,28(sp)
   473b0:	dd800615 	stw	r22,24(sp)
   473b4:	dd000415 	stw	r20,16(sp)
   473b8:	dc400115 	stw	r17,4(sp)
   473bc:	dc000015 	stw	r16,0(sp)
   473c0:	dfc00915 	stw	ra,36(sp)
   473c4:	dcc00315 	stw	r19,12(sp)
   473c8:	dc800215 	stw	r18,8(sp)
   473cc:	282d883a 	mov	r22,r5
   473d0:	202f883a 	mov	r23,r4
   473d4:	3029883a 	mov	r20,r6
   473d8:	3839883a 	mov	fp,r7
   473dc:	2c000504 	addi	r16,r5,20
   473e0:	0023883a 	mov	r17,zero
   473e4:	84c00017 	ldw	r19,0(r16)
   473e8:	a00b883a 	mov	r5,r20
   473ec:	8c400044 	addi	r17,r17,1
   473f0:	993fffcc 	andi	r4,r19,65535
   473f4:	00419f00 	call	419f0 <__mulsi3>
   473f8:	1725883a 	add	r18,r2,fp
   473fc:	9808d43a 	srli	r4,r19,16
   47400:	9026d43a 	srli	r19,r18,16
   47404:	a00b883a 	mov	r5,r20
   47408:	00419f00 	call	419f0 <__mulsi3>
   4740c:	988f883a 	add	r7,r19,r2
   47410:	3804943a 	slli	r2,r7,16
   47414:	94bfffcc 	andi	r18,r18,65535
   47418:	3838d43a 	srli	fp,r7,16
   4741c:	14a5883a 	add	r18,r2,r18
   47420:	84800015 	stw	r18,0(r16)
   47424:	84000104 	addi	r16,r16,4
   47428:	8d7fee16 	blt	r17,r21,473e4 <__multadd+0x48>
   4742c:	e0000926 	beq	fp,zero,47454 <__multadd+0xb8>
   47430:	b0800217 	ldw	r2,8(r22)
   47434:	a880140e 	bge	r21,r2,47488 <__multadd+0xec>
   47438:	a8800144 	addi	r2,r21,5
   4743c:	1085883a 	add	r2,r2,r2
   47440:	1085883a 	add	r2,r2,r2
   47444:	b085883a 	add	r2,r22,r2
   47448:	ad400044 	addi	r21,r21,1
   4744c:	17000015 	stw	fp,0(r2)
   47450:	b5400415 	stw	r21,16(r22)
   47454:	b005883a 	mov	r2,r22
   47458:	dfc00917 	ldw	ra,36(sp)
   4745c:	df000817 	ldw	fp,32(sp)
   47460:	ddc00717 	ldw	r23,28(sp)
   47464:	dd800617 	ldw	r22,24(sp)
   47468:	dd400517 	ldw	r21,20(sp)
   4746c:	dd000417 	ldw	r20,16(sp)
   47470:	dcc00317 	ldw	r19,12(sp)
   47474:	dc800217 	ldw	r18,8(sp)
   47478:	dc400117 	ldw	r17,4(sp)
   4747c:	dc000017 	ldw	r16,0(sp)
   47480:	dec00a04 	addi	sp,sp,40
   47484:	f800283a 	ret
   47488:	b1400117 	ldw	r5,4(r22)
   4748c:	b809883a 	mov	r4,r23
   47490:	29400044 	addi	r5,r5,1
   47494:	00472cc0 	call	472cc <_Balloc>
   47498:	b1800417 	ldw	r6,16(r22)
   4749c:	b1400304 	addi	r5,r22,12
   474a0:	11000304 	addi	r4,r2,12
   474a4:	31800084 	addi	r6,r6,2
   474a8:	318d883a 	add	r6,r6,r6
   474ac:	318d883a 	add	r6,r6,r6
   474b0:	1021883a 	mov	r16,r2
   474b4:	0046f240 	call	46f24 <memcpy>
   474b8:	b0c00117 	ldw	r3,4(r22)
   474bc:	b8801317 	ldw	r2,76(r23)
   474c0:	18c7883a 	add	r3,r3,r3
   474c4:	18c7883a 	add	r3,r3,r3
   474c8:	10c5883a 	add	r2,r2,r3
   474cc:	10c00017 	ldw	r3,0(r2)
   474d0:	b0c00015 	stw	r3,0(r22)
   474d4:	15800015 	stw	r22,0(r2)
   474d8:	802d883a 	mov	r22,r16
   474dc:	003fd606 	br	47438 <__multadd+0x9c>

000474e0 <__s2b>:
   474e0:	defff904 	addi	sp,sp,-28
   474e4:	dd000415 	stw	r20,16(sp)
   474e8:	dc400115 	stw	r17,4(sp)
   474ec:	2829883a 	mov	r20,r5
   474f0:	2023883a 	mov	r17,r4
   474f4:	01400244 	movi	r5,9
   474f8:	39000204 	addi	r4,r7,8
   474fc:	dcc00315 	stw	r19,12(sp)
   47500:	dc800215 	stw	r18,8(sp)
   47504:	dfc00615 	stw	ra,24(sp)
   47508:	dd400515 	stw	r21,20(sp)
   4750c:	dc000015 	stw	r16,0(sp)
   47510:	3825883a 	mov	r18,r7
   47514:	3027883a 	mov	r19,r6
   47518:	004aa1c0 	call	4aa1c <__divsi3>
   4751c:	00c00044 	movi	r3,1
   47520:	000b883a 	mov	r5,zero
   47524:	1880030e 	bge	r3,r2,47534 <__s2b+0x54>
   47528:	18c7883a 	add	r3,r3,r3
   4752c:	29400044 	addi	r5,r5,1
   47530:	18bffd16 	blt	r3,r2,47528 <__s2b+0x48>
   47534:	8809883a 	mov	r4,r17
   47538:	00472cc0 	call	472cc <_Balloc>
   4753c:	d8c00717 	ldw	r3,28(sp)
   47540:	10c00515 	stw	r3,20(r2)
   47544:	00c00044 	movi	r3,1
   47548:	10c00415 	stw	r3,16(r2)
   4754c:	00c00244 	movi	r3,9
   47550:	1cc0210e 	bge	r3,r19,475d8 <__s2b+0xf8>
   47554:	a0eb883a 	add	r21,r20,r3
   47558:	a821883a 	mov	r16,r21
   4755c:	a4e9883a 	add	r20,r20,r19
   47560:	81c00007 	ldb	r7,0(r16)
   47564:	8809883a 	mov	r4,r17
   47568:	84000044 	addi	r16,r16,1
   4756c:	100b883a 	mov	r5,r2
   47570:	01800284 	movi	r6,10
   47574:	39fff404 	addi	r7,r7,-48
   47578:	004739c0 	call	4739c <__multadd>
   4757c:	853ff81e 	bne	r16,r20,47560 <__s2b+0x80>
   47580:	ace1883a 	add	r16,r21,r19
   47584:	843ffe04 	addi	r16,r16,-8
   47588:	9c800a0e 	bge	r19,r18,475b4 <__s2b+0xd4>
   4758c:	94e5c83a 	sub	r18,r18,r19
   47590:	84a5883a 	add	r18,r16,r18
   47594:	81c00007 	ldb	r7,0(r16)
   47598:	8809883a 	mov	r4,r17
   4759c:	84000044 	addi	r16,r16,1
   475a0:	100b883a 	mov	r5,r2
   475a4:	01800284 	movi	r6,10
   475a8:	39fff404 	addi	r7,r7,-48
   475ac:	004739c0 	call	4739c <__multadd>
   475b0:	84bff81e 	bne	r16,r18,47594 <__s2b+0xb4>
   475b4:	dfc00617 	ldw	ra,24(sp)
   475b8:	dd400517 	ldw	r21,20(sp)
   475bc:	dd000417 	ldw	r20,16(sp)
   475c0:	dcc00317 	ldw	r19,12(sp)
   475c4:	dc800217 	ldw	r18,8(sp)
   475c8:	dc400117 	ldw	r17,4(sp)
   475cc:	dc000017 	ldw	r16,0(sp)
   475d0:	dec00704 	addi	sp,sp,28
   475d4:	f800283a 	ret
   475d8:	a4000284 	addi	r16,r20,10
   475dc:	1827883a 	mov	r19,r3
   475e0:	003fe906 	br	47588 <__s2b+0xa8>

000475e4 <__hi0bits>:
   475e4:	20bfffec 	andhi	r2,r4,65535
   475e8:	1000141e 	bne	r2,zero,4763c <__hi0bits+0x58>
   475ec:	2008943a 	slli	r4,r4,16
   475f0:	00800404 	movi	r2,16
   475f4:	20ffc02c 	andhi	r3,r4,65280
   475f8:	1800021e 	bne	r3,zero,47604 <__hi0bits+0x20>
   475fc:	2008923a 	slli	r4,r4,8
   47600:	10800204 	addi	r2,r2,8
   47604:	20fc002c 	andhi	r3,r4,61440
   47608:	1800021e 	bne	r3,zero,47614 <__hi0bits+0x30>
   4760c:	2008913a 	slli	r4,r4,4
   47610:	10800104 	addi	r2,r2,4
   47614:	20f0002c 	andhi	r3,r4,49152
   47618:	1800031e 	bne	r3,zero,47628 <__hi0bits+0x44>
   4761c:	2109883a 	add	r4,r4,r4
   47620:	10800084 	addi	r2,r2,2
   47624:	2109883a 	add	r4,r4,r4
   47628:	20000316 	blt	r4,zero,47638 <__hi0bits+0x54>
   4762c:	2110002c 	andhi	r4,r4,16384
   47630:	2000041e 	bne	r4,zero,47644 <__hi0bits+0x60>
   47634:	00800804 	movi	r2,32
   47638:	f800283a 	ret
   4763c:	0005883a 	mov	r2,zero
   47640:	003fec06 	br	475f4 <__hi0bits+0x10>
   47644:	10800044 	addi	r2,r2,1
   47648:	f800283a 	ret

0004764c <__lo0bits>:
   4764c:	20c00017 	ldw	r3,0(r4)
   47650:	188001cc 	andi	r2,r3,7
   47654:	10000826 	beq	r2,zero,47678 <__lo0bits+0x2c>
   47658:	1880004c 	andi	r2,r3,1
   4765c:	1000211e 	bne	r2,zero,476e4 <__lo0bits+0x98>
   47660:	1880008c 	andi	r2,r3,2
   47664:	1000211e 	bne	r2,zero,476ec <__lo0bits+0xa0>
   47668:	1806d0ba 	srli	r3,r3,2
   4766c:	00800084 	movi	r2,2
   47670:	20c00015 	stw	r3,0(r4)
   47674:	f800283a 	ret
   47678:	18bfffcc 	andi	r2,r3,65535
   4767c:	10001326 	beq	r2,zero,476cc <__lo0bits+0x80>
   47680:	0005883a 	mov	r2,zero
   47684:	19403fcc 	andi	r5,r3,255
   47688:	2800021e 	bne	r5,zero,47694 <__lo0bits+0x48>
   4768c:	1806d23a 	srli	r3,r3,8
   47690:	10800204 	addi	r2,r2,8
   47694:	194003cc 	andi	r5,r3,15
   47698:	2800021e 	bne	r5,zero,476a4 <__lo0bits+0x58>
   4769c:	1806d13a 	srli	r3,r3,4
   476a0:	10800104 	addi	r2,r2,4
   476a4:	194000cc 	andi	r5,r3,3
   476a8:	2800021e 	bne	r5,zero,476b4 <__lo0bits+0x68>
   476ac:	1806d0ba 	srli	r3,r3,2
   476b0:	10800084 	addi	r2,r2,2
   476b4:	1940004c 	andi	r5,r3,1
   476b8:	2800081e 	bne	r5,zero,476dc <__lo0bits+0x90>
   476bc:	1806d07a 	srli	r3,r3,1
   476c0:	1800051e 	bne	r3,zero,476d8 <__lo0bits+0x8c>
   476c4:	00800804 	movi	r2,32
   476c8:	f800283a 	ret
   476cc:	1806d43a 	srli	r3,r3,16
   476d0:	00800404 	movi	r2,16
   476d4:	003feb06 	br	47684 <__lo0bits+0x38>
   476d8:	10800044 	addi	r2,r2,1
   476dc:	20c00015 	stw	r3,0(r4)
   476e0:	f800283a 	ret
   476e4:	0005883a 	mov	r2,zero
   476e8:	f800283a 	ret
   476ec:	1806d07a 	srli	r3,r3,1
   476f0:	00800044 	movi	r2,1
   476f4:	20c00015 	stw	r3,0(r4)
   476f8:	f800283a 	ret

000476fc <__i2b>:
   476fc:	defffd04 	addi	sp,sp,-12
   47700:	dc000015 	stw	r16,0(sp)
   47704:	04000044 	movi	r16,1
   47708:	dc400115 	stw	r17,4(sp)
   4770c:	2823883a 	mov	r17,r5
   47710:	800b883a 	mov	r5,r16
   47714:	dfc00215 	stw	ra,8(sp)
   47718:	00472cc0 	call	472cc <_Balloc>
   4771c:	14400515 	stw	r17,20(r2)
   47720:	14000415 	stw	r16,16(r2)
   47724:	dfc00217 	ldw	ra,8(sp)
   47728:	dc400117 	ldw	r17,4(sp)
   4772c:	dc000017 	ldw	r16,0(sp)
   47730:	dec00304 	addi	sp,sp,12
   47734:	f800283a 	ret

00047738 <__multiply>:
   47738:	defff004 	addi	sp,sp,-64
   4773c:	dc800815 	stw	r18,32(sp)
   47740:	dc400715 	stw	r17,28(sp)
   47744:	34800417 	ldw	r18,16(r6)
   47748:	2c400417 	ldw	r17,16(r5)
   4774c:	ddc00d15 	stw	r23,52(sp)
   47750:	dc000615 	stw	r16,24(sp)
   47754:	dfc00f15 	stw	ra,60(sp)
   47758:	df000e15 	stw	fp,56(sp)
   4775c:	dd800c15 	stw	r22,48(sp)
   47760:	dd400b15 	stw	r21,44(sp)
   47764:	dd000a15 	stw	r20,40(sp)
   47768:	dcc00915 	stw	r19,36(sp)
   4776c:	2821883a 	mov	r16,r5
   47770:	302f883a 	mov	r23,r6
   47774:	8c80050e 	bge	r17,r18,4778c <__multiply+0x54>
   47778:	8807883a 	mov	r3,r17
   4777c:	3021883a 	mov	r16,r6
   47780:	9023883a 	mov	r17,r18
   47784:	282f883a 	mov	r23,r5
   47788:	1825883a 	mov	r18,r3
   4778c:	80800217 	ldw	r2,8(r16)
   47790:	8c87883a 	add	r3,r17,r18
   47794:	d8c00115 	stw	r3,4(sp)
   47798:	81400117 	ldw	r5,4(r16)
   4779c:	10c0010e 	bge	r2,r3,477a4 <__multiply+0x6c>
   477a0:	29400044 	addi	r5,r5,1
   477a4:	00472cc0 	call	472cc <_Balloc>
   477a8:	d8c00117 	ldw	r3,4(sp)
   477ac:	d8800515 	stw	r2,20(sp)
   477b0:	14c00504 	addi	r19,r2,20
   477b4:	1d400144 	addi	r21,r3,5
   477b8:	ad6b883a 	add	r21,r21,r21
   477bc:	ad6b883a 	add	r21,r21,r21
   477c0:	156b883a 	add	r21,r2,r21
   477c4:	dd400215 	stw	r21,8(sp)
   477c8:	9805883a 	mov	r2,r19
   477cc:	9d40042e 	bgeu	r19,r21,477e0 <__multiply+0xa8>
   477d0:	d8c00217 	ldw	r3,8(sp)
   477d4:	10000015 	stw	zero,0(r2)
   477d8:	10800104 	addi	r2,r2,4
   477dc:	10fffc36 	bltu	r2,r3,477d0 <__multiply+0x98>
   477e0:	94800144 	addi	r18,r18,5
   477e4:	94a5883a 	add	r18,r18,r18
   477e8:	94ad883a 	add	r22,r18,r18
   477ec:	8c400144 	addi	r17,r17,5
   477f0:	8c63883a 	add	r17,r17,r17
   477f4:	bdad883a 	add	r22,r23,r22
   477f8:	80c00504 	addi	r3,r16,20
   477fc:	8c63883a 	add	r17,r17,r17
   47800:	bc800504 	addi	r18,r23,20
   47804:	dd800315 	stw	r22,12(sp)
   47808:	d8c00415 	stw	r3,16(sp)
   4780c:	dcc00015 	stw	r19,0(sp)
   47810:	8463883a 	add	r17,r16,r17
   47814:	9580412e 	bgeu	r18,r22,4791c <__multiply+0x1e4>
   47818:	90800017 	ldw	r2,0(r18)
   4781c:	173fffcc 	andi	fp,r2,65535
   47820:	e0001a26 	beq	fp,zero,4788c <__multiply+0x154>
   47824:	dd000017 	ldw	r20,0(sp)
   47828:	dd800417 	ldw	r22,16(sp)
   4782c:	002b883a 	mov	r21,zero
   47830:	b4c00017 	ldw	r19,0(r22)
   47834:	a4000017 	ldw	r16,0(r20)
   47838:	e00b883a 	mov	r5,fp
   4783c:	993fffcc 	andi	r4,r19,65535
   47840:	00419f00 	call	419f0 <__mulsi3>
   47844:	9808d43a 	srli	r4,r19,16
   47848:	817fffcc 	andi	r5,r16,65535
   4784c:	1145883a 	add	r2,r2,r5
   47850:	e00b883a 	mov	r5,fp
   47854:	1567883a 	add	r19,r2,r21
   47858:	8020d43a 	srli	r16,r16,16
   4785c:	00419f00 	call	419f0 <__mulsi3>
   47860:	9808d43a 	srli	r4,r19,16
   47864:	1405883a 	add	r2,r2,r16
   47868:	a4c0000d 	sth	r19,0(r20)
   4786c:	110f883a 	add	r7,r2,r4
   47870:	a1c0008d 	sth	r7,2(r20)
   47874:	b5800104 	addi	r22,r22,4
   47878:	382ad43a 	srli	r21,r7,16
   4787c:	a5000104 	addi	r20,r20,4
   47880:	b47feb36 	bltu	r22,r17,47830 <__multiply+0xf8>
   47884:	a5400015 	stw	r21,0(r20)
   47888:	90800017 	ldw	r2,0(r18)
   4788c:	1038d43a 	srli	fp,r2,16
   47890:	e0001c26 	beq	fp,zero,47904 <__multiply+0x1cc>
   47894:	d8c00017 	ldw	r3,0(sp)
   47898:	dd000417 	ldw	r20,16(sp)
   4789c:	002b883a 	mov	r21,zero
   478a0:	1d800017 	ldw	r22,0(r3)
   478a4:	182f883a 	mov	r23,r3
   478a8:	b021883a 	mov	r16,r22
   478ac:	a4c00017 	ldw	r19,0(r20)
   478b0:	8020d43a 	srli	r16,r16,16
   478b4:	e00b883a 	mov	r5,fp
   478b8:	993fffcc 	andi	r4,r19,65535
   478bc:	00419f00 	call	419f0 <__mulsi3>
   478c0:	1405883a 	add	r2,r2,r16
   478c4:	9808d43a 	srli	r4,r19,16
   478c8:	156b883a 	add	r21,r2,r21
   478cc:	bdc00104 	addi	r23,r23,4
   478d0:	bdbfff0d 	sth	r22,-4(r23)
   478d4:	bd7fff8d 	sth	r21,-2(r23)
   478d8:	bc000017 	ldw	r16,0(r23)
   478dc:	e00b883a 	mov	r5,fp
   478e0:	00419f00 	call	419f0 <__mulsi3>
   478e4:	a80ed43a 	srli	r7,r21,16
   478e8:	813fffcc 	andi	r4,r16,65535
   478ec:	2085883a 	add	r2,r4,r2
   478f0:	11ed883a 	add	r22,r2,r7
   478f4:	a5000104 	addi	r20,r20,4
   478f8:	b02ad43a 	srli	r21,r22,16
   478fc:	a47feb36 	bltu	r20,r17,478ac <__multiply+0x174>
   47900:	bd800015 	stw	r22,0(r23)
   47904:	d8c00017 	ldw	r3,0(sp)
   47908:	94800104 	addi	r18,r18,4
   4790c:	18c00104 	addi	r3,r3,4
   47910:	d8c00015 	stw	r3,0(sp)
   47914:	d8c00317 	ldw	r3,12(sp)
   47918:	90ffbf36 	bltu	r18,r3,47818 <__multiply+0xe0>
   4791c:	d8c00117 	ldw	r3,4(sp)
   47920:	00c00c0e 	bge	zero,r3,47954 <__multiply+0x21c>
   47924:	d8c00217 	ldw	r3,8(sp)
   47928:	18bfff17 	ldw	r2,-4(r3)
   4792c:	1d7fff04 	addi	r21,r3,-4
   47930:	10000326 	beq	r2,zero,47940 <__multiply+0x208>
   47934:	00000706 	br	47954 <__multiply+0x21c>
   47938:	a8800017 	ldw	r2,0(r21)
   4793c:	1000051e 	bne	r2,zero,47954 <__multiply+0x21c>
   47940:	d8c00117 	ldw	r3,4(sp)
   47944:	ad7fff04 	addi	r21,r21,-4
   47948:	18ffffc4 	addi	r3,r3,-1
   4794c:	d8c00115 	stw	r3,4(sp)
   47950:	183ff91e 	bne	r3,zero,47938 <__multiply+0x200>
   47954:	d8800517 	ldw	r2,20(sp)
   47958:	d8c00117 	ldw	r3,4(sp)
   4795c:	10c00415 	stw	r3,16(r2)
   47960:	dfc00f17 	ldw	ra,60(sp)
   47964:	df000e17 	ldw	fp,56(sp)
   47968:	ddc00d17 	ldw	r23,52(sp)
   4796c:	dd800c17 	ldw	r22,48(sp)
   47970:	dd400b17 	ldw	r21,44(sp)
   47974:	dd000a17 	ldw	r20,40(sp)
   47978:	dcc00917 	ldw	r19,36(sp)
   4797c:	dc800817 	ldw	r18,32(sp)
   47980:	dc400717 	ldw	r17,28(sp)
   47984:	dc000617 	ldw	r16,24(sp)
   47988:	dec01004 	addi	sp,sp,64
   4798c:	f800283a 	ret

00047990 <__pow5mult>:
   47990:	defffb04 	addi	sp,sp,-20
   47994:	dcc00315 	stw	r19,12(sp)
   47998:	dc800215 	stw	r18,8(sp)
   4799c:	dc000015 	stw	r16,0(sp)
   479a0:	dfc00415 	stw	ra,16(sp)
   479a4:	dc400115 	stw	r17,4(sp)
   479a8:	308000cc 	andi	r2,r6,3
   479ac:	3021883a 	mov	r16,r6
   479b0:	2027883a 	mov	r19,r4
   479b4:	2825883a 	mov	r18,r5
   479b8:	10002e1e 	bne	r2,zero,47a74 <__pow5mult+0xe4>
   479bc:	8021d0ba 	srai	r16,r16,2
   479c0:	80001a26 	beq	r16,zero,47a2c <__pow5mult+0x9c>
   479c4:	9c401217 	ldw	r17,72(r19)
   479c8:	8800061e 	bne	r17,zero,479e4 <__pow5mult+0x54>
   479cc:	00003406 	br	47aa0 <__pow5mult+0x110>
   479d0:	8021d07a 	srai	r16,r16,1
   479d4:	80001526 	beq	r16,zero,47a2c <__pow5mult+0x9c>
   479d8:	88c00017 	ldw	r3,0(r17)
   479dc:	18001b26 	beq	r3,zero,47a4c <__pow5mult+0xbc>
   479e0:	1823883a 	mov	r17,r3
   479e4:	80c0004c 	andi	r3,r16,1
   479e8:	183ff926 	beq	r3,zero,479d0 <__pow5mult+0x40>
   479ec:	900b883a 	mov	r5,r18
   479f0:	880d883a 	mov	r6,r17
   479f4:	9809883a 	mov	r4,r19
   479f8:	00477380 	call	47738 <__multiply>
   479fc:	90001b26 	beq	r18,zero,47a6c <__pow5mult+0xdc>
   47a00:	91000117 	ldw	r4,4(r18)
   47a04:	98c01317 	ldw	r3,76(r19)
   47a08:	8021d07a 	srai	r16,r16,1
   47a0c:	2109883a 	add	r4,r4,r4
   47a10:	2109883a 	add	r4,r4,r4
   47a14:	1907883a 	add	r3,r3,r4
   47a18:	19000017 	ldw	r4,0(r3)
   47a1c:	91000015 	stw	r4,0(r18)
   47a20:	1c800015 	stw	r18,0(r3)
   47a24:	1025883a 	mov	r18,r2
   47a28:	803feb1e 	bne	r16,zero,479d8 <__pow5mult+0x48>
   47a2c:	9005883a 	mov	r2,r18
   47a30:	dfc00417 	ldw	ra,16(sp)
   47a34:	dcc00317 	ldw	r19,12(sp)
   47a38:	dc800217 	ldw	r18,8(sp)
   47a3c:	dc400117 	ldw	r17,4(sp)
   47a40:	dc000017 	ldw	r16,0(sp)
   47a44:	dec00504 	addi	sp,sp,20
   47a48:	f800283a 	ret
   47a4c:	880b883a 	mov	r5,r17
   47a50:	880d883a 	mov	r6,r17
   47a54:	9809883a 	mov	r4,r19
   47a58:	00477380 	call	47738 <__multiply>
   47a5c:	88800015 	stw	r2,0(r17)
   47a60:	10000015 	stw	zero,0(r2)
   47a64:	1023883a 	mov	r17,r2
   47a68:	003fde06 	br	479e4 <__pow5mult+0x54>
   47a6c:	1025883a 	mov	r18,r2
   47a70:	003fd706 	br	479d0 <__pow5mult+0x40>
   47a74:	10bfffc4 	addi	r2,r2,-1
   47a78:	1085883a 	add	r2,r2,r2
   47a7c:	00c00174 	movhi	r3,5
   47a80:	18f8ab04 	addi	r3,r3,-7508
   47a84:	1085883a 	add	r2,r2,r2
   47a88:	1885883a 	add	r2,r3,r2
   47a8c:	11800017 	ldw	r6,0(r2)
   47a90:	000f883a 	mov	r7,zero
   47a94:	004739c0 	call	4739c <__multadd>
   47a98:	1025883a 	mov	r18,r2
   47a9c:	003fc706 	br	479bc <__pow5mult+0x2c>
   47aa0:	9809883a 	mov	r4,r19
   47aa4:	01409c44 	movi	r5,625
   47aa8:	00476fc0 	call	476fc <__i2b>
   47aac:	98801215 	stw	r2,72(r19)
   47ab0:	1023883a 	mov	r17,r2
   47ab4:	10000015 	stw	zero,0(r2)
   47ab8:	003fca06 	br	479e4 <__pow5mult+0x54>

00047abc <__lshift>:
   47abc:	defff904 	addi	sp,sp,-28
   47ac0:	dd400515 	stw	r21,20(sp)
   47ac4:	dc400115 	stw	r17,4(sp)
   47ac8:	2d400417 	ldw	r21,16(r5)
   47acc:	3023d17a 	srai	r17,r6,5
   47ad0:	28800217 	ldw	r2,8(r5)
   47ad4:	dd000415 	stw	r20,16(sp)
   47ad8:	8d6b883a 	add	r21,r17,r21
   47adc:	dcc00315 	stw	r19,12(sp)
   47ae0:	dc800215 	stw	r18,8(sp)
   47ae4:	dc000015 	stw	r16,0(sp)
   47ae8:	dfc00615 	stw	ra,24(sp)
   47aec:	ac000044 	addi	r16,r21,1
   47af0:	2825883a 	mov	r18,r5
   47af4:	3029883a 	mov	r20,r6
   47af8:	2027883a 	mov	r19,r4
   47afc:	29400117 	ldw	r5,4(r5)
   47b00:	1400030e 	bge	r2,r16,47b10 <__lshift+0x54>
   47b04:	1085883a 	add	r2,r2,r2
   47b08:	29400044 	addi	r5,r5,1
   47b0c:	143ffd16 	blt	r2,r16,47b04 <__lshift+0x48>
   47b10:	9809883a 	mov	r4,r19
   47b14:	00472cc0 	call	472cc <_Balloc>
   47b18:	10c00504 	addi	r3,r2,20
   47b1c:	0440090e 	bge	zero,r17,47b44 <__lshift+0x88>
   47b20:	000f883a 	mov	r7,zero
   47b24:	18000015 	stw	zero,0(r3)
   47b28:	39c00044 	addi	r7,r7,1
   47b2c:	18c00104 	addi	r3,r3,4
   47b30:	3c7ffc1e 	bne	r7,r17,47b24 <__lshift+0x68>
   47b34:	38c00144 	addi	r3,r7,5
   47b38:	18c7883a 	add	r3,r3,r3
   47b3c:	18c7883a 	add	r3,r3,r3
   47b40:	10c7883a 	add	r3,r2,r3
   47b44:	92000417 	ldw	r8,16(r18)
   47b48:	a18007cc 	andi	r6,r20,31
   47b4c:	91c00504 	addi	r7,r18,20
   47b50:	42000144 	addi	r8,r8,5
   47b54:	4211883a 	add	r8,r8,r8
   47b58:	4211883a 	add	r8,r8,r8
   47b5c:	9211883a 	add	r8,r18,r8
   47b60:	30002226 	beq	r6,zero,47bec <__lshift+0x130>
   47b64:	02800804 	movi	r10,32
   47b68:	5195c83a 	sub	r10,r10,r6
   47b6c:	000b883a 	mov	r5,zero
   47b70:	3a400017 	ldw	r9,0(r7)
   47b74:	18c00104 	addi	r3,r3,4
   47b78:	39c00104 	addi	r7,r7,4
   47b7c:	4992983a 	sll	r9,r9,r6
   47b80:	2a4ab03a 	or	r5,r5,r9
   47b84:	197fff15 	stw	r5,-4(r3)
   47b88:	397fff17 	ldw	r5,-4(r7)
   47b8c:	2a8ad83a 	srl	r5,r5,r10
   47b90:	3a3ff736 	bltu	r7,r8,47b70 <__lshift+0xb4>
   47b94:	19400015 	stw	r5,0(r3)
   47b98:	28000126 	beq	r5,zero,47ba0 <__lshift+0xe4>
   47b9c:	ac000084 	addi	r16,r21,2
   47ba0:	91000117 	ldw	r4,4(r18)
   47ba4:	98c01317 	ldw	r3,76(r19)
   47ba8:	843fffc4 	addi	r16,r16,-1
   47bac:	2109883a 	add	r4,r4,r4
   47bb0:	2109883a 	add	r4,r4,r4
   47bb4:	1907883a 	add	r3,r3,r4
   47bb8:	19000017 	ldw	r4,0(r3)
   47bbc:	14000415 	stw	r16,16(r2)
   47bc0:	91000015 	stw	r4,0(r18)
   47bc4:	1c800015 	stw	r18,0(r3)
   47bc8:	dfc00617 	ldw	ra,24(sp)
   47bcc:	dd400517 	ldw	r21,20(sp)
   47bd0:	dd000417 	ldw	r20,16(sp)
   47bd4:	dcc00317 	ldw	r19,12(sp)
   47bd8:	dc800217 	ldw	r18,8(sp)
   47bdc:	dc400117 	ldw	r17,4(sp)
   47be0:	dc000017 	ldw	r16,0(sp)
   47be4:	dec00704 	addi	sp,sp,28
   47be8:	f800283a 	ret
   47bec:	39400017 	ldw	r5,0(r7)
   47bf0:	18c00104 	addi	r3,r3,4
   47bf4:	39c00104 	addi	r7,r7,4
   47bf8:	197fff15 	stw	r5,-4(r3)
   47bfc:	3a3fe82e 	bgeu	r7,r8,47ba0 <__lshift+0xe4>
   47c00:	39400017 	ldw	r5,0(r7)
   47c04:	18c00104 	addi	r3,r3,4
   47c08:	39c00104 	addi	r7,r7,4
   47c0c:	197fff15 	stw	r5,-4(r3)
   47c10:	3a3ff636 	bltu	r7,r8,47bec <__lshift+0x130>
   47c14:	003fe206 	br	47ba0 <__lshift+0xe4>

00047c18 <__mcmp>:
   47c18:	20800417 	ldw	r2,16(r4)
   47c1c:	28c00417 	ldw	r3,16(r5)
   47c20:	10c5c83a 	sub	r2,r2,r3
   47c24:	10000f1e 	bne	r2,zero,47c64 <__mcmp+0x4c>
   47c28:	18c00144 	addi	r3,r3,5
   47c2c:	18c7883a 	add	r3,r3,r3
   47c30:	18c7883a 	add	r3,r3,r3
   47c34:	21c00504 	addi	r7,r4,20
   47c38:	28cb883a 	add	r5,r5,r3
   47c3c:	20c9883a 	add	r4,r4,r3
   47c40:	213fff04 	addi	r4,r4,-4
   47c44:	297fff04 	addi	r5,r5,-4
   47c48:	21800017 	ldw	r6,0(r4)
   47c4c:	28c00017 	ldw	r3,0(r5)
   47c50:	30c0021e 	bne	r6,r3,47c5c <__mcmp+0x44>
   47c54:	393ffa36 	bltu	r7,r4,47c40 <__mcmp+0x28>
   47c58:	f800283a 	ret
   47c5c:	30c00236 	bltu	r6,r3,47c68 <__mcmp+0x50>
   47c60:	00800044 	movi	r2,1
   47c64:	f800283a 	ret
   47c68:	00bfffc4 	movi	r2,-1
   47c6c:	f800283a 	ret

00047c70 <__mdiff>:
   47c70:	defffb04 	addi	sp,sp,-20
   47c74:	dc000015 	stw	r16,0(sp)
   47c78:	2821883a 	mov	r16,r5
   47c7c:	dc800215 	stw	r18,8(sp)
   47c80:	300b883a 	mov	r5,r6
   47c84:	2025883a 	mov	r18,r4
   47c88:	8009883a 	mov	r4,r16
   47c8c:	dc400115 	stw	r17,4(sp)
   47c90:	dfc00415 	stw	ra,16(sp)
   47c94:	dcc00315 	stw	r19,12(sp)
   47c98:	3023883a 	mov	r17,r6
   47c9c:	0047c180 	call	47c18 <__mcmp>
   47ca0:	10005026 	beq	r2,zero,47de4 <__mdiff+0x174>
   47ca4:	10004a16 	blt	r2,zero,47dd0 <__mdiff+0x160>
   47ca8:	0027883a 	mov	r19,zero
   47cac:	81400117 	ldw	r5,4(r16)
   47cb0:	9009883a 	mov	r4,r18
   47cb4:	00472cc0 	call	472cc <_Balloc>
   47cb8:	82400417 	ldw	r9,16(r16)
   47cbc:	89800417 	ldw	r6,16(r17)
   47cc0:	14c00315 	stw	r19,12(r2)
   47cc4:	4b800144 	addi	r14,r9,5
   47cc8:	31800144 	addi	r6,r6,5
   47ccc:	739d883a 	add	r14,r14,r14
   47cd0:	318d883a 	add	r6,r6,r6
   47cd4:	739d883a 	add	r14,r14,r14
   47cd8:	318d883a 	add	r6,r6,r6
   47cdc:	81c00504 	addi	r7,r16,20
   47ce0:	839d883a 	add	r14,r16,r14
   47ce4:	8a000504 	addi	r8,r17,20
   47ce8:	898d883a 	add	r6,r17,r6
   47cec:	10c00504 	addi	r3,r2,20
   47cf0:	0009883a 	mov	r4,zero
   47cf4:	3b000017 	ldw	r12,0(r7)
   47cf8:	42c00017 	ldw	r11,0(r8)
   47cfc:	42000104 	addi	r8,r8,4
   47d00:	62bfffcc 	andi	r10,r12,65535
   47d04:	5b7fffcc 	andi	r13,r11,65535
   47d08:	5109883a 	add	r4,r10,r4
   47d0c:	2355c83a 	sub	r10,r4,r13
   47d10:	5816d43a 	srli	r11,r11,16
   47d14:	6008d43a 	srli	r4,r12,16
   47d18:	501bd43a 	srai	r13,r10,16
   47d1c:	1a80000d 	sth	r10,0(r3)
   47d20:	22c9c83a 	sub	r4,r4,r11
   47d24:	2349883a 	add	r4,r4,r13
   47d28:	1900008d 	sth	r4,2(r3)
   47d2c:	39c00104 	addi	r7,r7,4
   47d30:	2009d43a 	srai	r4,r4,16
   47d34:	18c00104 	addi	r3,r3,4
   47d38:	41bfee36 	bltu	r8,r6,47cf4 <__mdiff+0x84>
   47d3c:	180b883a 	mov	r5,r3
   47d40:	3815883a 	mov	r10,r7
   47d44:	3b80132e 	bgeu	r7,r14,47d94 <__mdiff+0x124>
   47d48:	3a000017 	ldw	r8,0(r7)
   47d4c:	18c00104 	addi	r3,r3,4
   47d50:	39c00104 	addi	r7,r7,4
   47d54:	41bfffcc 	andi	r6,r8,65535
   47d58:	310d883a 	add	r6,r6,r4
   47d5c:	3009d43a 	srai	r4,r6,16
   47d60:	4010d43a 	srli	r8,r8,16
   47d64:	19bfff0d 	sth	r6,-4(r3)
   47d68:	2209883a 	add	r4,r4,r8
   47d6c:	193fff8d 	sth	r4,-2(r3)
   47d70:	2009d43a 	srai	r4,r4,16
   47d74:	3bbff436 	bltu	r7,r14,47d48 <__mdiff+0xd8>
   47d78:	0286303a 	nor	r3,zero,r10
   47d7c:	1b87883a 	add	r3,r3,r14
   47d80:	1806d0ba 	srli	r3,r3,2
   47d84:	18c00044 	addi	r3,r3,1
   47d88:	18c7883a 	add	r3,r3,r3
   47d8c:	18c7883a 	add	r3,r3,r3
   47d90:	28c7883a 	add	r3,r5,r3
   47d94:	193fff17 	ldw	r4,-4(r3)
   47d98:	18ffff04 	addi	r3,r3,-4
   47d9c:	2000041e 	bne	r4,zero,47db0 <__mdiff+0x140>
   47da0:	18ffff04 	addi	r3,r3,-4
   47da4:	19000017 	ldw	r4,0(r3)
   47da8:	4a7fffc4 	addi	r9,r9,-1
   47dac:	203ffc26 	beq	r4,zero,47da0 <__mdiff+0x130>
   47db0:	12400415 	stw	r9,16(r2)
   47db4:	dfc00417 	ldw	ra,16(sp)
   47db8:	dcc00317 	ldw	r19,12(sp)
   47dbc:	dc800217 	ldw	r18,8(sp)
   47dc0:	dc400117 	ldw	r17,4(sp)
   47dc4:	dc000017 	ldw	r16,0(sp)
   47dc8:	dec00504 	addi	sp,sp,20
   47dcc:	f800283a 	ret
   47dd0:	8005883a 	mov	r2,r16
   47dd4:	04c00044 	movi	r19,1
   47dd8:	8821883a 	mov	r16,r17
   47ddc:	1023883a 	mov	r17,r2
   47de0:	003fb206 	br	47cac <__mdiff+0x3c>
   47de4:	9009883a 	mov	r4,r18
   47de8:	000b883a 	mov	r5,zero
   47dec:	00472cc0 	call	472cc <_Balloc>
   47df0:	00c00044 	movi	r3,1
   47df4:	10c00415 	stw	r3,16(r2)
   47df8:	10000515 	stw	zero,20(r2)
   47dfc:	dfc00417 	ldw	ra,16(sp)
   47e00:	dcc00317 	ldw	r19,12(sp)
   47e04:	dc800217 	ldw	r18,8(sp)
   47e08:	dc400117 	ldw	r17,4(sp)
   47e0c:	dc000017 	ldw	r16,0(sp)
   47e10:	dec00504 	addi	sp,sp,20
   47e14:	f800283a 	ret

00047e18 <__ulp>:
   47e18:	295ffc2c 	andhi	r5,r5,32752
   47e1c:	00bf3034 	movhi	r2,64704
   47e20:	2887883a 	add	r3,r5,r2
   47e24:	00c0020e 	bge	zero,r3,47e30 <__ulp+0x18>
   47e28:	0005883a 	mov	r2,zero
   47e2c:	f800283a 	ret
   47e30:	00c7c83a 	sub	r3,zero,r3
   47e34:	1805d53a 	srai	r2,r3,20
   47e38:	00c004c4 	movi	r3,19
   47e3c:	18800a0e 	bge	r3,r2,47e68 <__ulp+0x50>
   47e40:	01000c84 	movi	r4,50
   47e44:	0007883a 	mov	r3,zero
   47e48:	20800516 	blt	r4,r2,47e60 <__ulp+0x48>
   47e4c:	01000cc4 	movi	r4,51
   47e50:	2085c83a 	sub	r2,r4,r2
   47e54:	01000044 	movi	r4,1
   47e58:	2084983a 	sll	r2,r4,r2
   47e5c:	f800283a 	ret
   47e60:	00800044 	movi	r2,1
   47e64:	f800283a 	ret
   47e68:	00c00234 	movhi	r3,8
   47e6c:	1887d83a 	sra	r3,r3,r2
   47e70:	0005883a 	mov	r2,zero
   47e74:	f800283a 	ret

00047e78 <__b2d>:
   47e78:	defffa04 	addi	sp,sp,-24
   47e7c:	dc000015 	stw	r16,0(sp)
   47e80:	24000417 	ldw	r16,16(r4)
   47e84:	dc400115 	stw	r17,4(sp)
   47e88:	dcc00315 	stw	r19,12(sp)
   47e8c:	84000144 	addi	r16,r16,5
   47e90:	8421883a 	add	r16,r16,r16
   47e94:	8421883a 	add	r16,r16,r16
   47e98:	2421883a 	add	r16,r4,r16
   47e9c:	847fff17 	ldw	r17,-4(r16)
   47ea0:	24c00504 	addi	r19,r4,20
   47ea4:	dd000415 	stw	r20,16(sp)
   47ea8:	8809883a 	mov	r4,r17
   47eac:	dc800215 	stw	r18,8(sp)
   47eb0:	2829883a 	mov	r20,r5
   47eb4:	dfc00515 	stw	ra,20(sp)
   47eb8:	00475e40 	call	475e4 <__hi0bits>
   47ebc:	00c00804 	movi	r3,32
   47ec0:	1887c83a 	sub	r3,r3,r2
   47ec4:	a0c00015 	stw	r3,0(r20)
   47ec8:	00c00284 	movi	r3,10
   47ecc:	84bfff04 	addi	r18,r16,-4
   47ed0:	18801216 	blt	r3,r2,47f1c <__b2d+0xa4>
   47ed4:	010002c4 	movi	r4,11
   47ed8:	2089c83a 	sub	r4,r4,r2
   47edc:	8906d83a 	srl	r3,r17,r4
   47ee0:	18cffc34 	orhi	r3,r3,16368
   47ee4:	9c80322e 	bgeu	r19,r18,47fb0 <__b2d+0x138>
   47ee8:	817ffe17 	ldw	r5,-8(r16)
   47eec:	2908d83a 	srl	r4,r5,r4
   47ef0:	10800544 	addi	r2,r2,21
   47ef4:	88a2983a 	sll	r17,r17,r2
   47ef8:	2444b03a 	or	r2,r4,r17
   47efc:	dfc00517 	ldw	ra,20(sp)
   47f00:	dd000417 	ldw	r20,16(sp)
   47f04:	dcc00317 	ldw	r19,12(sp)
   47f08:	dc800217 	ldw	r18,8(sp)
   47f0c:	dc400117 	ldw	r17,4(sp)
   47f10:	dc000017 	ldw	r16,0(sp)
   47f14:	dec00604 	addi	sp,sp,24
   47f18:	f800283a 	ret
   47f1c:	9c801636 	bltu	r19,r18,47f78 <__b2d+0x100>
   47f20:	113ffd44 	addi	r4,r2,-11
   47f24:	000b883a 	mov	r5,zero
   47f28:	20001726 	beq	r4,zero,47f88 <__b2d+0x110>
   47f2c:	00c00ac4 	movi	r3,43
   47f30:	1885c83a 	sub	r2,r3,r2
   47f34:	8906983a 	sll	r3,r17,r4
   47f38:	288cd83a 	srl	r6,r5,r2
   47f3c:	18cffc34 	orhi	r3,r3,16368
   47f40:	1986b03a 	or	r3,r3,r6
   47f44:	9c801c2e 	bgeu	r19,r18,47fb8 <__b2d+0x140>
   47f48:	91bfff17 	ldw	r6,-4(r18)
   47f4c:	3084d83a 	srl	r2,r6,r2
   47f50:	2908983a 	sll	r4,r5,r4
   47f54:	1104b03a 	or	r2,r2,r4
   47f58:	dfc00517 	ldw	ra,20(sp)
   47f5c:	dd000417 	ldw	r20,16(sp)
   47f60:	dcc00317 	ldw	r19,12(sp)
   47f64:	dc800217 	ldw	r18,8(sp)
   47f68:	dc400117 	ldw	r17,4(sp)
   47f6c:	dc000017 	ldw	r16,0(sp)
   47f70:	dec00604 	addi	sp,sp,24
   47f74:	f800283a 	ret
   47f78:	113ffd44 	addi	r4,r2,-11
   47f7c:	84bffe04 	addi	r18,r16,-8
   47f80:	817ffe17 	ldw	r5,-8(r16)
   47f84:	203fe91e 	bne	r4,zero,47f2c <__b2d+0xb4>
   47f88:	88cffc34 	orhi	r3,r17,16368
   47f8c:	2805883a 	mov	r2,r5
   47f90:	dfc00517 	ldw	ra,20(sp)
   47f94:	dd000417 	ldw	r20,16(sp)
   47f98:	dcc00317 	ldw	r19,12(sp)
   47f9c:	dc800217 	ldw	r18,8(sp)
   47fa0:	dc400117 	ldw	r17,4(sp)
   47fa4:	dc000017 	ldw	r16,0(sp)
   47fa8:	dec00604 	addi	sp,sp,24
   47fac:	f800283a 	ret
   47fb0:	0009883a 	mov	r4,zero
   47fb4:	003fce06 	br	47ef0 <__b2d+0x78>
   47fb8:	0005883a 	mov	r2,zero
   47fbc:	003fe406 	br	47f50 <__b2d+0xd8>

00047fc0 <__d2b>:
   47fc0:	defff804 	addi	sp,sp,-32
   47fc4:	dc400315 	stw	r17,12(sp)
   47fc8:	3023883a 	mov	r17,r6
   47fcc:	dc800415 	stw	r18,16(sp)
   47fd0:	8824907a 	slli	r18,r17,1
   47fd4:	dcc00515 	stw	r19,20(sp)
   47fd8:	2827883a 	mov	r19,r5
   47fdc:	9024d57a 	srli	r18,r18,21
   47fe0:	01400044 	movi	r5,1
   47fe4:	dd000615 	stw	r20,24(sp)
   47fe8:	dc000215 	stw	r16,8(sp)
   47fec:	dfc00715 	stw	ra,28(sp)
   47ff0:	3829883a 	mov	r20,r7
   47ff4:	00472cc0 	call	472cc <_Balloc>
   47ff8:	1021883a 	mov	r16,r2
   47ffc:	00800434 	movhi	r2,16
   48000:	10bfffc4 	addi	r2,r2,-1
   48004:	88a2703a 	and	r17,r17,r2
   48008:	90000126 	beq	r18,zero,48010 <__d2b+0x50>
   4800c:	8c400434 	orhi	r17,r17,16
   48010:	dc400015 	stw	r17,0(sp)
   48014:	98002226 	beq	r19,zero,480a0 <__d2b+0xe0>
   48018:	d9000104 	addi	r4,sp,4
   4801c:	dcc00115 	stw	r19,4(sp)
   48020:	004764c0 	call	4764c <__lo0bits>
   48024:	d8c00017 	ldw	r3,0(sp)
   48028:	10002d1e 	bne	r2,zero,480e0 <__d2b+0x120>
   4802c:	d9000117 	ldw	r4,4(sp)
   48030:	81000515 	stw	r4,20(r16)
   48034:	1823003a 	cmpeq	r17,r3,zero
   48038:	01000084 	movi	r4,2
   4803c:	2463c83a 	sub	r17,r4,r17
   48040:	80c00615 	stw	r3,24(r16)
   48044:	84400415 	stw	r17,16(r16)
   48048:	90001d1e 	bne	r18,zero,480c0 <__d2b+0x100>
   4804c:	88c00104 	addi	r3,r17,4
   48050:	18c7883a 	add	r3,r3,r3
   48054:	18c7883a 	add	r3,r3,r3
   48058:	80c7883a 	add	r3,r16,r3
   4805c:	19000017 	ldw	r4,0(r3)
   48060:	10bef384 	addi	r2,r2,-1074
   48064:	a0800015 	stw	r2,0(r20)
   48068:	00475e40 	call	475e4 <__hi0bits>
   4806c:	8822917a 	slli	r17,r17,5
   48070:	d8c00817 	ldw	r3,32(sp)
   48074:	8885c83a 	sub	r2,r17,r2
   48078:	18800015 	stw	r2,0(r3)
   4807c:	8005883a 	mov	r2,r16
   48080:	dfc00717 	ldw	ra,28(sp)
   48084:	dd000617 	ldw	r20,24(sp)
   48088:	dcc00517 	ldw	r19,20(sp)
   4808c:	dc800417 	ldw	r18,16(sp)
   48090:	dc400317 	ldw	r17,12(sp)
   48094:	dc000217 	ldw	r16,8(sp)
   48098:	dec00804 	addi	sp,sp,32
   4809c:	f800283a 	ret
   480a0:	d809883a 	mov	r4,sp
   480a4:	004764c0 	call	4764c <__lo0bits>
   480a8:	d8c00017 	ldw	r3,0(sp)
   480ac:	04400044 	movi	r17,1
   480b0:	84400415 	stw	r17,16(r16)
   480b4:	80c00515 	stw	r3,20(r16)
   480b8:	10800804 	addi	r2,r2,32
   480bc:	903fe326 	beq	r18,zero,4804c <__d2b+0x8c>
   480c0:	00c00d44 	movi	r3,53
   480c4:	94bef344 	addi	r18,r18,-1075
   480c8:	90a5883a 	add	r18,r18,r2
   480cc:	1885c83a 	sub	r2,r3,r2
   480d0:	d8c00817 	ldw	r3,32(sp)
   480d4:	a4800015 	stw	r18,0(r20)
   480d8:	18800015 	stw	r2,0(r3)
   480dc:	003fe706 	br	4807c <__d2b+0xbc>
   480e0:	01000804 	movi	r4,32
   480e4:	2089c83a 	sub	r4,r4,r2
   480e8:	1908983a 	sll	r4,r3,r4
   480ec:	d9400117 	ldw	r5,4(sp)
   480f0:	1886d83a 	srl	r3,r3,r2
   480f4:	2148b03a 	or	r4,r4,r5
   480f8:	81000515 	stw	r4,20(r16)
   480fc:	d8c00015 	stw	r3,0(sp)
   48100:	003fcc06 	br	48034 <__d2b+0x74>

00048104 <__ratio>:
   48104:	defff904 	addi	sp,sp,-28
   48108:	dc400315 	stw	r17,12(sp)
   4810c:	2823883a 	mov	r17,r5
   48110:	d9400104 	addi	r5,sp,4
   48114:	dfc00615 	stw	ra,24(sp)
   48118:	dcc00515 	stw	r19,20(sp)
   4811c:	dc800415 	stw	r18,16(sp)
   48120:	2027883a 	mov	r19,r4
   48124:	dc000215 	stw	r16,8(sp)
   48128:	0047e780 	call	47e78 <__b2d>
   4812c:	8809883a 	mov	r4,r17
   48130:	d80b883a 	mov	r5,sp
   48134:	1025883a 	mov	r18,r2
   48138:	1821883a 	mov	r16,r3
   4813c:	0047e780 	call	47e78 <__b2d>
   48140:	99400417 	ldw	r5,16(r19)
   48144:	89000417 	ldw	r4,16(r17)
   48148:	d9800117 	ldw	r6,4(sp)
   4814c:	2909c83a 	sub	r4,r5,r4
   48150:	d9400017 	ldw	r5,0(sp)
   48154:	2008917a 	slli	r4,r4,5
   48158:	314bc83a 	sub	r5,r6,r5
   4815c:	290b883a 	add	r5,r5,r4
   48160:	01400e0e 	bge	zero,r5,4819c <__ratio+0x98>
   48164:	280a953a 	slli	r5,r5,20
   48168:	2c21883a 	add	r16,r5,r16
   4816c:	9009883a 	mov	r4,r18
   48170:	800b883a 	mov	r5,r16
   48174:	100d883a 	mov	r6,r2
   48178:	180f883a 	mov	r7,r3
   4817c:	004a3540 	call	4a354 <__divdf3>
   48180:	dfc00617 	ldw	ra,24(sp)
   48184:	dcc00517 	ldw	r19,20(sp)
   48188:	dc800417 	ldw	r18,16(sp)
   4818c:	dc400317 	ldw	r17,12(sp)
   48190:	dc000217 	ldw	r16,8(sp)
   48194:	dec00704 	addi	sp,sp,28
   48198:	f800283a 	ret
   4819c:	280a953a 	slli	r5,r5,20
   481a0:	1947c83a 	sub	r3,r3,r5
   481a4:	003ff106 	br	4816c <__ratio+0x68>

000481a8 <_mprec_log10>:
   481a8:	defffe04 	addi	sp,sp,-8
   481ac:	dc000015 	stw	r16,0(sp)
   481b0:	dfc00115 	stw	ra,4(sp)
   481b4:	008005c4 	movi	r2,23
   481b8:	2021883a 	mov	r16,r4
   481bc:	11000d0e 	bge	r2,r4,481f4 <_mprec_log10+0x4c>
   481c0:	0005883a 	mov	r2,zero
   481c4:	00cffc34 	movhi	r3,16368
   481c8:	843fffc4 	addi	r16,r16,-1
   481cc:	1009883a 	mov	r4,r2
   481d0:	180b883a 	mov	r5,r3
   481d4:	000d883a 	mov	r6,zero
   481d8:	01d00934 	movhi	r7,16420
   481dc:	004a0700 	call	4a070 <__muldf3>
   481e0:	803ff91e 	bne	r16,zero,481c8 <_mprec_log10+0x20>
   481e4:	dfc00117 	ldw	ra,4(sp)
   481e8:	dc000017 	ldw	r16,0(sp)
   481ec:	dec00204 	addi	sp,sp,8
   481f0:	f800283a 	ret
   481f4:	202090fa 	slli	r16,r4,3
   481f8:	00800174 	movhi	r2,5
   481fc:	10b87904 	addi	r2,r2,-7708
   48200:	1421883a 	add	r16,r2,r16
   48204:	80800017 	ldw	r2,0(r16)
   48208:	80c00117 	ldw	r3,4(r16)
   4820c:	dfc00117 	ldw	ra,4(sp)
   48210:	dc000017 	ldw	r16,0(sp)
   48214:	dec00204 	addi	sp,sp,8
   48218:	f800283a 	ret

0004821c <__copybits>:
   4821c:	297fffc4 	addi	r5,r5,-1
   48220:	31c00417 	ldw	r7,16(r6)
   48224:	2811d17a 	srai	r8,r5,5
   48228:	30800504 	addi	r2,r6,20
   4822c:	39c00144 	addi	r7,r7,5
   48230:	42000044 	addi	r8,r8,1
   48234:	39cf883a 	add	r7,r7,r7
   48238:	4211883a 	add	r8,r8,r8
   4823c:	39cf883a 	add	r7,r7,r7
   48240:	4211883a 	add	r8,r8,r8
   48244:	31cf883a 	add	r7,r6,r7
   48248:	2211883a 	add	r8,r4,r8
   4824c:	11c00d2e 	bgeu	r2,r7,48284 <__copybits+0x68>
   48250:	2007883a 	mov	r3,r4
   48254:	11400017 	ldw	r5,0(r2)
   48258:	18c00104 	addi	r3,r3,4
   4825c:	10800104 	addi	r2,r2,4
   48260:	197fff15 	stw	r5,-4(r3)
   48264:	11fffb36 	bltu	r2,r7,48254 <__copybits+0x38>
   48268:	3985c83a 	sub	r2,r7,r6
   4826c:	10bffac4 	addi	r2,r2,-21
   48270:	1004d0ba 	srli	r2,r2,2
   48274:	10800044 	addi	r2,r2,1
   48278:	1085883a 	add	r2,r2,r2
   4827c:	1085883a 	add	r2,r2,r2
   48280:	2089883a 	add	r4,r4,r2
   48284:	2200032e 	bgeu	r4,r8,48294 <__copybits+0x78>
   48288:	20000015 	stw	zero,0(r4)
   4828c:	21000104 	addi	r4,r4,4
   48290:	223ffd36 	bltu	r4,r8,48288 <__copybits+0x6c>
   48294:	f800283a 	ret

00048298 <__any_on>:
   48298:	21800417 	ldw	r6,16(r4)
   4829c:	2805d17a 	srai	r2,r5,5
   482a0:	20c00504 	addi	r3,r4,20
   482a4:	30800f0e 	bge	r6,r2,482e4 <__any_on+0x4c>
   482a8:	3005883a 	mov	r2,r6
   482ac:	10800144 	addi	r2,r2,5
   482b0:	1085883a 	add	r2,r2,r2
   482b4:	1085883a 	add	r2,r2,r2
   482b8:	2089883a 	add	r4,r4,r2
   482bc:	1900152e 	bgeu	r3,r4,48314 <__any_on+0x7c>
   482c0:	20bfff17 	ldw	r2,-4(r4)
   482c4:	213fff04 	addi	r4,r4,-4
   482c8:	1000041e 	bne	r2,zero,482dc <__any_on+0x44>
   482cc:	1900112e 	bgeu	r3,r4,48314 <__any_on+0x7c>
   482d0:	213fff04 	addi	r4,r4,-4
   482d4:	20800017 	ldw	r2,0(r4)
   482d8:	103ffc26 	beq	r2,zero,482cc <__any_on+0x34>
   482dc:	00800044 	movi	r2,1
   482e0:	f800283a 	ret
   482e4:	11bff10e 	bge	r2,r6,482ac <__any_on+0x14>
   482e8:	294007cc 	andi	r5,r5,31
   482ec:	283fef26 	beq	r5,zero,482ac <__any_on+0x14>
   482f0:	11800144 	addi	r6,r2,5
   482f4:	318d883a 	add	r6,r6,r6
   482f8:	318d883a 	add	r6,r6,r6
   482fc:	218d883a 	add	r6,r4,r6
   48300:	31800017 	ldw	r6,0(r6)
   48304:	314ed83a 	srl	r7,r6,r5
   48308:	394a983a 	sll	r5,r7,r5
   4830c:	29bff31e 	bne	r5,r6,482dc <__any_on+0x44>
   48310:	003fe606 	br	482ac <__any_on+0x14>
   48314:	0005883a 	mov	r2,zero
   48318:	f800283a 	ret

0004831c <_realloc_r>:
   4831c:	defff504 	addi	sp,sp,-44
   48320:	dd400615 	stw	r21,24(sp)
   48324:	dc800315 	stw	r18,12(sp)
   48328:	dc000115 	stw	r16,4(sp)
   4832c:	dfc00a15 	stw	ra,40(sp)
   48330:	df000915 	stw	fp,36(sp)
   48334:	ddc00815 	stw	r23,32(sp)
   48338:	dd800715 	stw	r22,28(sp)
   4833c:	dd000515 	stw	r20,20(sp)
   48340:	dcc00415 	stw	r19,16(sp)
   48344:	dc400215 	stw	r17,8(sp)
   48348:	2821883a 	mov	r16,r5
   4834c:	202b883a 	mov	r21,r4
   48350:	3025883a 	mov	r18,r6
   48354:	28009626 	beq	r5,zero,485b0 <_realloc_r+0x294>
   48358:	004b6d80 	call	4b6d8 <__malloc_lock>
   4835c:	80bfff17 	ldw	r2,-4(r16)
   48360:	04ffff04 	movi	r19,-4
   48364:	90c002c4 	addi	r3,r18,11
   48368:	01000584 	movi	r4,22
   4836c:	85bffe04 	addi	r22,r16,-8
   48370:	14e6703a 	and	r19,r2,r19
   48374:	20c0372e 	bgeu	r4,r3,48454 <_realloc_r+0x138>
   48378:	047ffe04 	movi	r17,-8
   4837c:	1c62703a 	and	r17,r3,r17
   48380:	8807883a 	mov	r3,r17
   48384:	88005a16 	blt	r17,zero,484f0 <_realloc_r+0x1d4>
   48388:	8c805936 	bltu	r17,r18,484f0 <_realloc_r+0x1d4>
   4838c:	98c0340e 	bge	r19,r3,48460 <_realloc_r+0x144>
   48390:	07000174 	movhi	fp,5
   48394:	e738fc04 	addi	fp,fp,-7184
   48398:	e1400217 	ldw	r5,8(fp)
   4839c:	b4c9883a 	add	r4,r22,r19
   483a0:	29009026 	beq	r5,r4,485e4 <_realloc_r+0x2c8>
   483a4:	21800117 	ldw	r6,4(r4)
   483a8:	01ffff84 	movi	r7,-2
   483ac:	31ce703a 	and	r7,r6,r7
   483b0:	21cf883a 	add	r7,r4,r7
   483b4:	39c00117 	ldw	r7,4(r7)
   483b8:	39c0004c 	andi	r7,r7,1
   483bc:	38004326 	beq	r7,zero,484cc <_realloc_r+0x1b0>
   483c0:	000d883a 	mov	r6,zero
   483c4:	0009883a 	mov	r4,zero
   483c8:	1080004c 	andi	r2,r2,1
   483cc:	10005a1e 	bne	r2,zero,48538 <_realloc_r+0x21c>
   483d0:	85fffe17 	ldw	r23,-8(r16)
   483d4:	00bfff04 	movi	r2,-4
   483d8:	b5efc83a 	sub	r23,r22,r23
   483dc:	b9c00117 	ldw	r7,4(r23)
   483e0:	388e703a 	and	r7,r7,r2
   483e4:	3ccf883a 	add	r7,r7,r19
   483e8:	20005226 	beq	r4,zero,48534 <_realloc_r+0x218>
   483ec:	31e9883a 	add	r20,r6,r7
   483f0:	2140c726 	beq	r4,r5,48710 <_realloc_r+0x3f4>
   483f4:	a0c04f16 	blt	r20,r3,48534 <_realloc_r+0x218>
   483f8:	20800317 	ldw	r2,12(r4)
   483fc:	20c00217 	ldw	r3,8(r4)
   48400:	99bfff04 	addi	r6,r19,-4
   48404:	01000904 	movi	r4,36
   48408:	18800315 	stw	r2,12(r3)
   4840c:	10c00215 	stw	r3,8(r2)
   48410:	b8c00217 	ldw	r3,8(r23)
   48414:	b8800317 	ldw	r2,12(r23)
   48418:	bc800204 	addi	r18,r23,8
   4841c:	18800315 	stw	r2,12(r3)
   48420:	10c00215 	stw	r3,8(r2)
   48424:	2180ed36 	bltu	r4,r6,487dc <_realloc_r+0x4c0>
   48428:	008004c4 	movi	r2,19
   4842c:	11809b2e 	bgeu	r2,r6,4869c <_realloc_r+0x380>
   48430:	80800017 	ldw	r2,0(r16)
   48434:	b8800215 	stw	r2,8(r23)
   48438:	80800117 	ldw	r2,4(r16)
   4843c:	b8800315 	stw	r2,12(r23)
   48440:	008006c4 	movi	r2,27
   48444:	1180f936 	bltu	r2,r6,4882c <_realloc_r+0x510>
   48448:	b8800404 	addi	r2,r23,16
   4844c:	80c00204 	addi	r3,r16,8
   48450:	00009406 	br	486a4 <_realloc_r+0x388>
   48454:	00c00404 	movi	r3,16
   48458:	1823883a 	mov	r17,r3
   4845c:	003fca06 	br	48388 <_realloc_r+0x6c>
   48460:	9829883a 	mov	r20,r19
   48464:	a447c83a 	sub	r3,r20,r17
   48468:	010003c4 	movi	r4,15
   4846c:	1080004c 	andi	r2,r2,1
   48470:	20c02336 	bltu	r4,r3,48500 <_realloc_r+0x1e4>
   48474:	1504b03a 	or	r2,r2,r20
   48478:	b0800115 	stw	r2,4(r22)
   4847c:	b52d883a 	add	r22,r22,r20
   48480:	b0800117 	ldw	r2,4(r22)
   48484:	10800054 	ori	r2,r2,1
   48488:	b0800115 	stw	r2,4(r22)
   4848c:	a809883a 	mov	r4,r21
   48490:	004b6f80 	call	4b6f8 <__malloc_unlock>
   48494:	8025883a 	mov	r18,r16
   48498:	9005883a 	mov	r2,r18
   4849c:	dfc00a17 	ldw	ra,40(sp)
   484a0:	df000917 	ldw	fp,36(sp)
   484a4:	ddc00817 	ldw	r23,32(sp)
   484a8:	dd800717 	ldw	r22,28(sp)
   484ac:	dd400617 	ldw	r21,24(sp)
   484b0:	dd000517 	ldw	r20,20(sp)
   484b4:	dcc00417 	ldw	r19,16(sp)
   484b8:	dc800317 	ldw	r18,12(sp)
   484bc:	dc400217 	ldw	r17,8(sp)
   484c0:	dc000117 	ldw	r16,4(sp)
   484c4:	dec00b04 	addi	sp,sp,44
   484c8:	f800283a 	ret
   484cc:	01ffff04 	movi	r7,-4
   484d0:	31cc703a 	and	r6,r6,r7
   484d4:	34e9883a 	add	r20,r6,r19
   484d8:	a0ffbb16 	blt	r20,r3,483c8 <_realloc_r+0xac>
   484dc:	20c00317 	ldw	r3,12(r4)
   484e0:	21000217 	ldw	r4,8(r4)
   484e4:	20c00315 	stw	r3,12(r4)
   484e8:	19000215 	stw	r4,8(r3)
   484ec:	003fdd06 	br	48464 <_realloc_r+0x148>
   484f0:	00800304 	movi	r2,12
   484f4:	a8800015 	stw	r2,0(r21)
   484f8:	0025883a 	mov	r18,zero
   484fc:	003fe606 	br	48498 <_realloc_r+0x17c>
   48500:	1444b03a 	or	r2,r2,r17
   48504:	b0800115 	stw	r2,4(r22)
   48508:	b44b883a 	add	r5,r22,r17
   4850c:	18800054 	ori	r2,r3,1
   48510:	28800115 	stw	r2,4(r5)
   48514:	28c7883a 	add	r3,r5,r3
   48518:	18800117 	ldw	r2,4(r3)
   4851c:	a809883a 	mov	r4,r21
   48520:	29400204 	addi	r5,r5,8
   48524:	10800054 	ori	r2,r2,1
   48528:	18800115 	stw	r2,4(r3)
   4852c:	00462940 	call	46294 <_free_r>
   48530:	003fd606 	br	4848c <_realloc_r+0x170>
   48534:	38c0330e 	bge	r7,r3,48604 <_realloc_r+0x2e8>
   48538:	900b883a 	mov	r5,r18
   4853c:	a809883a 	mov	r4,r21
   48540:	0041a400 	call	41a40 <_malloc_r>
   48544:	1025883a 	mov	r18,r2
   48548:	10001626 	beq	r2,zero,485a4 <_realloc_r+0x288>
   4854c:	80bfff17 	ldw	r2,-4(r16)
   48550:	00ffff84 	movi	r3,-2
   48554:	913ffe04 	addi	r4,r18,-8
   48558:	10c6703a 	and	r3,r2,r3
   4855c:	b0c7883a 	add	r3,r22,r3
   48560:	20c09926 	beq	r4,r3,487c8 <_realloc_r+0x4ac>
   48564:	99bfff04 	addi	r6,r19,-4
   48568:	00800904 	movi	r2,36
   4856c:	11806436 	bltu	r2,r6,48700 <_realloc_r+0x3e4>
   48570:	00c004c4 	movi	r3,19
   48574:	19804036 	bltu	r3,r6,48678 <_realloc_r+0x35c>
   48578:	9005883a 	mov	r2,r18
   4857c:	8007883a 	mov	r3,r16
   48580:	19000017 	ldw	r4,0(r3)
   48584:	11000015 	stw	r4,0(r2)
   48588:	19000117 	ldw	r4,4(r3)
   4858c:	11000115 	stw	r4,4(r2)
   48590:	18c00217 	ldw	r3,8(r3)
   48594:	10c00215 	stw	r3,8(r2)
   48598:	a809883a 	mov	r4,r21
   4859c:	800b883a 	mov	r5,r16
   485a0:	00462940 	call	46294 <_free_r>
   485a4:	a809883a 	mov	r4,r21
   485a8:	004b6f80 	call	4b6f8 <__malloc_unlock>
   485ac:	003fba06 	br	48498 <_realloc_r+0x17c>
   485b0:	300b883a 	mov	r5,r6
   485b4:	dfc00a17 	ldw	ra,40(sp)
   485b8:	df000917 	ldw	fp,36(sp)
   485bc:	ddc00817 	ldw	r23,32(sp)
   485c0:	dd800717 	ldw	r22,28(sp)
   485c4:	dd400617 	ldw	r21,24(sp)
   485c8:	dd000517 	ldw	r20,20(sp)
   485cc:	dcc00417 	ldw	r19,16(sp)
   485d0:	dc800317 	ldw	r18,12(sp)
   485d4:	dc400217 	ldw	r17,8(sp)
   485d8:	dc000117 	ldw	r16,4(sp)
   485dc:	dec00b04 	addi	sp,sp,44
   485e0:	0041a401 	jmpi	41a40 <_malloc_r>
   485e4:	29800117 	ldw	r6,4(r5)
   485e8:	013fff04 	movi	r4,-4
   485ec:	89c00404 	addi	r7,r17,16
   485f0:	310c703a 	and	r6,r6,r4
   485f4:	34c9883a 	add	r4,r6,r19
   485f8:	21c0340e 	bge	r4,r7,486cc <_realloc_r+0x3b0>
   485fc:	2809883a 	mov	r4,r5
   48600:	003f7106 	br	483c8 <_realloc_r+0xac>
   48604:	b8800317 	ldw	r2,12(r23)
   48608:	b8c00217 	ldw	r3,8(r23)
   4860c:	99bfff04 	addi	r6,r19,-4
   48610:	01000904 	movi	r4,36
   48614:	18800315 	stw	r2,12(r3)
   48618:	10c00215 	stw	r3,8(r2)
   4861c:	bc800204 	addi	r18,r23,8
   48620:	21807836 	bltu	r4,r6,48804 <_realloc_r+0x4e8>
   48624:	008004c4 	movi	r2,19
   48628:	1180732e 	bgeu	r2,r6,487f8 <_realloc_r+0x4dc>
   4862c:	80800017 	ldw	r2,0(r16)
   48630:	b8800215 	stw	r2,8(r23)
   48634:	80800117 	ldw	r2,4(r16)
   48638:	b8800315 	stw	r2,12(r23)
   4863c:	008006c4 	movi	r2,27
   48640:	11808936 	bltu	r2,r6,48868 <_realloc_r+0x54c>
   48644:	b8800404 	addi	r2,r23,16
   48648:	80c00204 	addi	r3,r16,8
   4864c:	19000017 	ldw	r4,0(r3)
   48650:	9021883a 	mov	r16,r18
   48654:	3829883a 	mov	r20,r7
   48658:	11000015 	stw	r4,0(r2)
   4865c:	19000117 	ldw	r4,4(r3)
   48660:	b82d883a 	mov	r22,r23
   48664:	11000115 	stw	r4,4(r2)
   48668:	18c00217 	ldw	r3,8(r3)
   4866c:	10c00215 	stw	r3,8(r2)
   48670:	b8800117 	ldw	r2,4(r23)
   48674:	003f7b06 	br	48464 <_realloc_r+0x148>
   48678:	80c00017 	ldw	r3,0(r16)
   4867c:	90c00015 	stw	r3,0(r18)
   48680:	80c00117 	ldw	r3,4(r16)
   48684:	90c00115 	stw	r3,4(r18)
   48688:	00c006c4 	movi	r3,27
   4868c:	19804636 	bltu	r3,r6,487a8 <_realloc_r+0x48c>
   48690:	90800204 	addi	r2,r18,8
   48694:	80c00204 	addi	r3,r16,8
   48698:	003fb906 	br	48580 <_realloc_r+0x264>
   4869c:	9005883a 	mov	r2,r18
   486a0:	8007883a 	mov	r3,r16
   486a4:	19000017 	ldw	r4,0(r3)
   486a8:	9021883a 	mov	r16,r18
   486ac:	b82d883a 	mov	r22,r23
   486b0:	11000015 	stw	r4,0(r2)
   486b4:	19000117 	ldw	r4,4(r3)
   486b8:	11000115 	stw	r4,4(r2)
   486bc:	18c00217 	ldw	r3,8(r3)
   486c0:	10c00215 	stw	r3,8(r2)
   486c4:	b8800117 	ldw	r2,4(r23)
   486c8:	003f6606 	br	48464 <_realloc_r+0x148>
   486cc:	2445c83a 	sub	r2,r4,r17
   486d0:	b46d883a 	add	r22,r22,r17
   486d4:	10800054 	ori	r2,r2,1
   486d8:	b0800115 	stw	r2,4(r22)
   486dc:	80bfff17 	ldw	r2,-4(r16)
   486e0:	a809883a 	mov	r4,r21
   486e4:	e5800215 	stw	r22,8(fp)
   486e8:	1080004c 	andi	r2,r2,1
   486ec:	88a2b03a 	or	r17,r17,r2
   486f0:	847fff15 	stw	r17,-4(r16)
   486f4:	004b6f80 	call	4b6f8 <__malloc_unlock>
   486f8:	8025883a 	mov	r18,r16
   486fc:	003f6606 	br	48498 <_realloc_r+0x17c>
   48700:	9009883a 	mov	r4,r18
   48704:	800b883a 	mov	r5,r16
   48708:	00470640 	call	47064 <memmove>
   4870c:	003fa206 	br	48598 <_realloc_r+0x27c>
   48710:	88800404 	addi	r2,r17,16
   48714:	a0bf8716 	blt	r20,r2,48534 <_realloc_r+0x218>
   48718:	b8800317 	ldw	r2,12(r23)
   4871c:	b8c00217 	ldw	r3,8(r23)
   48720:	99bfff04 	addi	r6,r19,-4
   48724:	01000904 	movi	r4,36
   48728:	18800315 	stw	r2,12(r3)
   4872c:	10c00215 	stw	r3,8(r2)
   48730:	bc800204 	addi	r18,r23,8
   48734:	21806536 	bltu	r4,r6,488cc <_realloc_r+0x5b0>
   48738:	008004c4 	movi	r2,19
   4873c:	1180592e 	bgeu	r2,r6,488a4 <_realloc_r+0x588>
   48740:	80800017 	ldw	r2,0(r16)
   48744:	b8800215 	stw	r2,8(r23)
   48748:	80800117 	ldw	r2,4(r16)
   4874c:	b8800315 	stw	r2,12(r23)
   48750:	008006c4 	movi	r2,27
   48754:	11806136 	bltu	r2,r6,488dc <_realloc_r+0x5c0>
   48758:	b8800404 	addi	r2,r23,16
   4875c:	80c00204 	addi	r3,r16,8
   48760:	19000017 	ldw	r4,0(r3)
   48764:	11000015 	stw	r4,0(r2)
   48768:	19000117 	ldw	r4,4(r3)
   4876c:	11000115 	stw	r4,4(r2)
   48770:	18c00217 	ldw	r3,8(r3)
   48774:	10c00215 	stw	r3,8(r2)
   48778:	a447c83a 	sub	r3,r20,r17
   4877c:	bc45883a 	add	r2,r23,r17
   48780:	18c00054 	ori	r3,r3,1
   48784:	10c00115 	stw	r3,4(r2)
   48788:	b8c00117 	ldw	r3,4(r23)
   4878c:	e0800215 	stw	r2,8(fp)
   48790:	a809883a 	mov	r4,r21
   48794:	1880004c 	andi	r2,r3,1
   48798:	88a2b03a 	or	r17,r17,r2
   4879c:	bc400115 	stw	r17,4(r23)
   487a0:	004b6f80 	call	4b6f8 <__malloc_unlock>
   487a4:	003f3c06 	br	48498 <_realloc_r+0x17c>
   487a8:	80c00217 	ldw	r3,8(r16)
   487ac:	90c00215 	stw	r3,8(r18)
   487b0:	80c00317 	ldw	r3,12(r16)
   487b4:	90c00315 	stw	r3,12(r18)
   487b8:	30802426 	beq	r6,r2,4884c <_realloc_r+0x530>
   487bc:	90800404 	addi	r2,r18,16
   487c0:	80c00404 	addi	r3,r16,16
   487c4:	003f6e06 	br	48580 <_realloc_r+0x264>
   487c8:	953fff17 	ldw	r20,-4(r18)
   487cc:	00ffff04 	movi	r3,-4
   487d0:	a0e8703a 	and	r20,r20,r3
   487d4:	a4e9883a 	add	r20,r20,r19
   487d8:	003f2206 	br	48464 <_realloc_r+0x148>
   487dc:	800b883a 	mov	r5,r16
   487e0:	9009883a 	mov	r4,r18
   487e4:	00470640 	call	47064 <memmove>
   487e8:	9021883a 	mov	r16,r18
   487ec:	b8800117 	ldw	r2,4(r23)
   487f0:	b82d883a 	mov	r22,r23
   487f4:	003f1b06 	br	48464 <_realloc_r+0x148>
   487f8:	9005883a 	mov	r2,r18
   487fc:	8007883a 	mov	r3,r16
   48800:	003f9206 	br	4864c <_realloc_r+0x330>
   48804:	800b883a 	mov	r5,r16
   48808:	9009883a 	mov	r4,r18
   4880c:	d9c00015 	stw	r7,0(sp)
   48810:	00470640 	call	47064 <memmove>
   48814:	d9c00017 	ldw	r7,0(sp)
   48818:	9021883a 	mov	r16,r18
   4881c:	b8800117 	ldw	r2,4(r23)
   48820:	3829883a 	mov	r20,r7
   48824:	b82d883a 	mov	r22,r23
   48828:	003f0e06 	br	48464 <_realloc_r+0x148>
   4882c:	80800217 	ldw	r2,8(r16)
   48830:	b8800415 	stw	r2,16(r23)
   48834:	80800317 	ldw	r2,12(r16)
   48838:	b8800515 	stw	r2,20(r23)
   4883c:	31001226 	beq	r6,r4,48888 <_realloc_r+0x56c>
   48840:	b8800604 	addi	r2,r23,24
   48844:	80c00404 	addi	r3,r16,16
   48848:	003f9606 	br	486a4 <_realloc_r+0x388>
   4884c:	81000417 	ldw	r4,16(r16)
   48850:	90800604 	addi	r2,r18,24
   48854:	80c00604 	addi	r3,r16,24
   48858:	91000415 	stw	r4,16(r18)
   4885c:	81000517 	ldw	r4,20(r16)
   48860:	91000515 	stw	r4,20(r18)
   48864:	003f4606 	br	48580 <_realloc_r+0x264>
   48868:	80800217 	ldw	r2,8(r16)
   4886c:	b8800415 	stw	r2,16(r23)
   48870:	80800317 	ldw	r2,12(r16)
   48874:	b8800515 	stw	r2,20(r23)
   48878:	31000d26 	beq	r6,r4,488b0 <_realloc_r+0x594>
   4887c:	b8800604 	addi	r2,r23,24
   48880:	80c00404 	addi	r3,r16,16
   48884:	003f7106 	br	4864c <_realloc_r+0x330>
   48888:	81000417 	ldw	r4,16(r16)
   4888c:	b8800804 	addi	r2,r23,32
   48890:	80c00604 	addi	r3,r16,24
   48894:	b9000615 	stw	r4,24(r23)
   48898:	81000517 	ldw	r4,20(r16)
   4889c:	b9000715 	stw	r4,28(r23)
   488a0:	003f8006 	br	486a4 <_realloc_r+0x388>
   488a4:	9005883a 	mov	r2,r18
   488a8:	8007883a 	mov	r3,r16
   488ac:	003fac06 	br	48760 <_realloc_r+0x444>
   488b0:	81000417 	ldw	r4,16(r16)
   488b4:	b8800804 	addi	r2,r23,32
   488b8:	80c00604 	addi	r3,r16,24
   488bc:	b9000615 	stw	r4,24(r23)
   488c0:	81000517 	ldw	r4,20(r16)
   488c4:	b9000715 	stw	r4,28(r23)
   488c8:	003f6006 	br	4864c <_realloc_r+0x330>
   488cc:	9009883a 	mov	r4,r18
   488d0:	800b883a 	mov	r5,r16
   488d4:	00470640 	call	47064 <memmove>
   488d8:	003fa706 	br	48778 <_realloc_r+0x45c>
   488dc:	80800217 	ldw	r2,8(r16)
   488e0:	b8800415 	stw	r2,16(r23)
   488e4:	80800317 	ldw	r2,12(r16)
   488e8:	b8800515 	stw	r2,20(r23)
   488ec:	31000326 	beq	r6,r4,488fc <_realloc_r+0x5e0>
   488f0:	b8800604 	addi	r2,r23,24
   488f4:	80c00404 	addi	r3,r16,16
   488f8:	003f9906 	br	48760 <_realloc_r+0x444>
   488fc:	81000417 	ldw	r4,16(r16)
   48900:	b8800804 	addi	r2,r23,32
   48904:	80c00604 	addi	r3,r16,24
   48908:	b9000615 	stw	r4,24(r23)
   4890c:	81000517 	ldw	r4,20(r16)
   48910:	b9000715 	stw	r4,28(r23)
   48914:	003f9206 	br	48760 <_realloc_r+0x444>

00048918 <__isinfd>:
   48918:	0105c83a 	sub	r2,zero,r4
   4891c:	1108b03a 	or	r4,r2,r4
   48920:	2004d7fa 	srli	r2,r4,31
   48924:	00e00034 	movhi	r3,32768
   48928:	18ffffc4 	addi	r3,r3,-1
   4892c:	28ca703a 	and	r5,r5,r3
   48930:	1144b03a 	or	r2,r2,r5
   48934:	00dffc34 	movhi	r3,32752
   48938:	1885c83a 	sub	r2,r3,r2
   4893c:	0087c83a 	sub	r3,zero,r2
   48940:	1884b03a 	or	r2,r3,r2
   48944:	1005d7fa 	srai	r2,r2,31
   48948:	10800044 	addi	r2,r2,1
   4894c:	f800283a 	ret

00048950 <__isnand>:
   48950:	0105c83a 	sub	r2,zero,r4
   48954:	1108b03a 	or	r4,r2,r4
   48958:	2004d7fa 	srli	r2,r4,31
   4895c:	00e00034 	movhi	r3,32768
   48960:	18ffffc4 	addi	r3,r3,-1
   48964:	28ca703a 	and	r5,r5,r3
   48968:	1144b03a 	or	r2,r2,r5
   4896c:	00dffc34 	movhi	r3,32752
   48970:	1885c83a 	sub	r2,r3,r2
   48974:	1004d7fa 	srli	r2,r2,31
   48978:	f800283a 	ret

0004897c <__sread>:
   4897c:	defffe04 	addi	sp,sp,-8
   48980:	dc000015 	stw	r16,0(sp)
   48984:	2821883a 	mov	r16,r5
   48988:	2940038f 	ldh	r5,14(r5)
   4898c:	dfc00115 	stw	ra,4(sp)
   48990:	0048f840 	call	48f84 <_read_r>
   48994:	10000716 	blt	r2,zero,489b4 <__sread+0x38>
   48998:	80c01417 	ldw	r3,80(r16)
   4899c:	1887883a 	add	r3,r3,r2
   489a0:	80c01415 	stw	r3,80(r16)
   489a4:	dfc00117 	ldw	ra,4(sp)
   489a8:	dc000017 	ldw	r16,0(sp)
   489ac:	dec00204 	addi	sp,sp,8
   489b0:	f800283a 	ret
   489b4:	80c0030b 	ldhu	r3,12(r16)
   489b8:	18fbffcc 	andi	r3,r3,61439
   489bc:	80c0030d 	sth	r3,12(r16)
   489c0:	dfc00117 	ldw	ra,4(sp)
   489c4:	dc000017 	ldw	r16,0(sp)
   489c8:	dec00204 	addi	sp,sp,8
   489cc:	f800283a 	ret

000489d0 <__swrite>:
   489d0:	2880030b 	ldhu	r2,12(r5)
   489d4:	defffb04 	addi	sp,sp,-20
   489d8:	dcc00315 	stw	r19,12(sp)
   489dc:	10c0400c 	andi	r3,r2,256
   489e0:	18ffffcc 	andi	r3,r3,65535
   489e4:	18e0001c 	xori	r3,r3,32768
   489e8:	dc800215 	stw	r18,8(sp)
   489ec:	dc400115 	stw	r17,4(sp)
   489f0:	dc000015 	stw	r16,0(sp)
   489f4:	dfc00415 	stw	ra,16(sp)
   489f8:	18e00004 	addi	r3,r3,-32768
   489fc:	2821883a 	mov	r16,r5
   48a00:	2027883a 	mov	r19,r4
   48a04:	3025883a 	mov	r18,r6
   48a08:	3823883a 	mov	r17,r7
   48a0c:	18000526 	beq	r3,zero,48a24 <__swrite+0x54>
   48a10:	2940038f 	ldh	r5,14(r5)
   48a14:	000d883a 	mov	r6,zero
   48a18:	01c00084 	movi	r7,2
   48a1c:	0048f180 	call	48f18 <_lseek_r>
   48a20:	8080030b 	ldhu	r2,12(r16)
   48a24:	8140038f 	ldh	r5,14(r16)
   48a28:	10bbffcc 	andi	r2,r2,61439
   48a2c:	9809883a 	mov	r4,r19
   48a30:	900d883a 	mov	r6,r18
   48a34:	880f883a 	mov	r7,r17
   48a38:	8080030d 	sth	r2,12(r16)
   48a3c:	dfc00417 	ldw	ra,16(sp)
   48a40:	dcc00317 	ldw	r19,12(sp)
   48a44:	dc800217 	ldw	r18,8(sp)
   48a48:	dc400117 	ldw	r17,4(sp)
   48a4c:	dc000017 	ldw	r16,0(sp)
   48a50:	dec00504 	addi	sp,sp,20
   48a54:	0048b601 	jmpi	48b60 <_write_r>

00048a58 <__sseek>:
   48a58:	defffe04 	addi	sp,sp,-8
   48a5c:	dc000015 	stw	r16,0(sp)
   48a60:	2821883a 	mov	r16,r5
   48a64:	2940038f 	ldh	r5,14(r5)
   48a68:	dfc00115 	stw	ra,4(sp)
   48a6c:	0048f180 	call	48f18 <_lseek_r>
   48a70:	00ffffc4 	movi	r3,-1
   48a74:	10c00826 	beq	r2,r3,48a98 <__sseek+0x40>
   48a78:	80c0030b 	ldhu	r3,12(r16)
   48a7c:	80801415 	stw	r2,80(r16)
   48a80:	18c40014 	ori	r3,r3,4096
   48a84:	80c0030d 	sth	r3,12(r16)
   48a88:	dfc00117 	ldw	ra,4(sp)
   48a8c:	dc000017 	ldw	r16,0(sp)
   48a90:	dec00204 	addi	sp,sp,8
   48a94:	f800283a 	ret
   48a98:	80c0030b 	ldhu	r3,12(r16)
   48a9c:	18fbffcc 	andi	r3,r3,61439
   48aa0:	80c0030d 	sth	r3,12(r16)
   48aa4:	dfc00117 	ldw	ra,4(sp)
   48aa8:	dc000017 	ldw	r16,0(sp)
   48aac:	dec00204 	addi	sp,sp,8
   48ab0:	f800283a 	ret

00048ab4 <__sclose>:
   48ab4:	2940038f 	ldh	r5,14(r5)
   48ab8:	0048c981 	jmpi	48c98 <_close_r>

00048abc <strcmp>:
   48abc:	2904b03a 	or	r2,r5,r4
   48ac0:	108000cc 	andi	r2,r2,3
   48ac4:	1000171e 	bne	r2,zero,48b24 <strcmp+0x68>
   48ac8:	20800017 	ldw	r2,0(r4)
   48acc:	28c00017 	ldw	r3,0(r5)
   48ad0:	10c0141e 	bne	r2,r3,48b24 <strcmp+0x68>
   48ad4:	027fbff4 	movhi	r9,65279
   48ad8:	4a7fbfc4 	addi	r9,r9,-257
   48adc:	1247883a 	add	r3,r2,r9
   48ae0:	0084303a 	nor	r2,zero,r2
   48ae4:	1884703a 	and	r2,r3,r2
   48ae8:	02202074 	movhi	r8,32897
   48aec:	42202004 	addi	r8,r8,-32640
   48af0:	1204703a 	and	r2,r2,r8
   48af4:	10000226 	beq	r2,zero,48b00 <strcmp+0x44>
   48af8:	00001706 	br	48b58 <strcmp+0x9c>
   48afc:	3000161e 	bne	r6,zero,48b58 <strcmp+0x9c>
   48b00:	21000104 	addi	r4,r4,4
   48b04:	20800017 	ldw	r2,0(r4)
   48b08:	29400104 	addi	r5,r5,4
   48b0c:	28c00017 	ldw	r3,0(r5)
   48b10:	124f883a 	add	r7,r2,r9
   48b14:	008c303a 	nor	r6,zero,r2
   48b18:	398c703a 	and	r6,r7,r6
   48b1c:	320c703a 	and	r6,r6,r8
   48b20:	10fff626 	beq	r2,r3,48afc <strcmp+0x40>
   48b24:	20800007 	ldb	r2,0(r4)
   48b28:	1000051e 	bne	r2,zero,48b40 <strcmp+0x84>
   48b2c:	00000606 	br	48b48 <strcmp+0x8c>
   48b30:	21000044 	addi	r4,r4,1
   48b34:	20800007 	ldb	r2,0(r4)
   48b38:	29400044 	addi	r5,r5,1
   48b3c:	10000226 	beq	r2,zero,48b48 <strcmp+0x8c>
   48b40:	28c00007 	ldb	r3,0(r5)
   48b44:	10fffa26 	beq	r2,r3,48b30 <strcmp+0x74>
   48b48:	20c00003 	ldbu	r3,0(r4)
   48b4c:	28800003 	ldbu	r2,0(r5)
   48b50:	1885c83a 	sub	r2,r3,r2
   48b54:	f800283a 	ret
   48b58:	0005883a 	mov	r2,zero
   48b5c:	f800283a 	ret

00048b60 <_write_r>:
   48b60:	defffd04 	addi	sp,sp,-12
   48b64:	dc400115 	stw	r17,4(sp)
   48b68:	dc000015 	stw	r16,0(sp)
   48b6c:	2023883a 	mov	r17,r4
   48b70:	04000174 	movhi	r16,5
   48b74:	84063804 	addi	r16,r16,6368
   48b78:	2809883a 	mov	r4,r5
   48b7c:	300b883a 	mov	r5,r6
   48b80:	380d883a 	mov	r6,r7
   48b84:	dfc00215 	stw	ra,8(sp)
   48b88:	80000015 	stw	zero,0(r16)
   48b8c:	004ba0c0 	call	4ba0c <write>
   48b90:	00ffffc4 	movi	r3,-1
   48b94:	10c00526 	beq	r2,r3,48bac <_write_r+0x4c>
   48b98:	dfc00217 	ldw	ra,8(sp)
   48b9c:	dc400117 	ldw	r17,4(sp)
   48ba0:	dc000017 	ldw	r16,0(sp)
   48ba4:	dec00304 	addi	sp,sp,12
   48ba8:	f800283a 	ret
   48bac:	80c00017 	ldw	r3,0(r16)
   48bb0:	183ff926 	beq	r3,zero,48b98 <_write_r+0x38>
   48bb4:	88c00015 	stw	r3,0(r17)
   48bb8:	dfc00217 	ldw	ra,8(sp)
   48bbc:	dc400117 	ldw	r17,4(sp)
   48bc0:	dc000017 	ldw	r16,0(sp)
   48bc4:	dec00304 	addi	sp,sp,12
   48bc8:	f800283a 	ret

00048bcc <_calloc_r>:
   48bcc:	defffe04 	addi	sp,sp,-8
   48bd0:	dc000015 	stw	r16,0(sp)
   48bd4:	2021883a 	mov	r16,r4
   48bd8:	3009883a 	mov	r4,r6
   48bdc:	dfc00115 	stw	ra,4(sp)
   48be0:	00419f00 	call	419f0 <__mulsi3>
   48be4:	8009883a 	mov	r4,r16
   48be8:	100b883a 	mov	r5,r2
   48bec:	0041a400 	call	41a40 <_malloc_r>
   48bf0:	1021883a 	mov	r16,r2
   48bf4:	10000c26 	beq	r2,zero,48c28 <_calloc_r+0x5c>
   48bf8:	11bfff17 	ldw	r6,-4(r2)
   48bfc:	00ffff04 	movi	r3,-4
   48c00:	00800904 	movi	r2,36
   48c04:	30cc703a 	and	r6,r6,r3
   48c08:	30cd883a 	add	r6,r6,r3
   48c0c:	11801436 	bltu	r2,r6,48c60 <_calloc_r+0x94>
   48c10:	00c004c4 	movi	r3,19
   48c14:	19800936 	bltu	r3,r6,48c3c <_calloc_r+0x70>
   48c18:	8005883a 	mov	r2,r16
   48c1c:	10000015 	stw	zero,0(r2)
   48c20:	10000115 	stw	zero,4(r2)
   48c24:	10000215 	stw	zero,8(r2)
   48c28:	8005883a 	mov	r2,r16
   48c2c:	dfc00117 	ldw	ra,4(sp)
   48c30:	dc000017 	ldw	r16,0(sp)
   48c34:	dec00204 	addi	sp,sp,8
   48c38:	f800283a 	ret
   48c3c:	80000015 	stw	zero,0(r16)
   48c40:	80000115 	stw	zero,4(r16)
   48c44:	00c006c4 	movi	r3,27
   48c48:	19800d2e 	bgeu	r3,r6,48c80 <_calloc_r+0xb4>
   48c4c:	80000215 	stw	zero,8(r16)
   48c50:	80000315 	stw	zero,12(r16)
   48c54:	30800c26 	beq	r6,r2,48c88 <_calloc_r+0xbc>
   48c58:	80800404 	addi	r2,r16,16
   48c5c:	003fef06 	br	48c1c <_calloc_r+0x50>
   48c60:	8009883a 	mov	r4,r16
   48c64:	000b883a 	mov	r5,zero
   48c68:	00471f00 	call	471f0 <memset>
   48c6c:	8005883a 	mov	r2,r16
   48c70:	dfc00117 	ldw	ra,4(sp)
   48c74:	dc000017 	ldw	r16,0(sp)
   48c78:	dec00204 	addi	sp,sp,8
   48c7c:	f800283a 	ret
   48c80:	80800204 	addi	r2,r16,8
   48c84:	003fe506 	br	48c1c <_calloc_r+0x50>
   48c88:	80000415 	stw	zero,16(r16)
   48c8c:	80000515 	stw	zero,20(r16)
   48c90:	80800604 	addi	r2,r16,24
   48c94:	003fe106 	br	48c1c <_calloc_r+0x50>

00048c98 <_close_r>:
   48c98:	defffd04 	addi	sp,sp,-12
   48c9c:	dc400115 	stw	r17,4(sp)
   48ca0:	dc000015 	stw	r16,0(sp)
   48ca4:	2023883a 	mov	r17,r4
   48ca8:	04000174 	movhi	r16,5
   48cac:	84063804 	addi	r16,r16,6368
   48cb0:	2809883a 	mov	r4,r5
   48cb4:	dfc00215 	stw	ra,8(sp)
   48cb8:	80000015 	stw	zero,0(r16)
   48cbc:	004b1640 	call	4b164 <close>
   48cc0:	00ffffc4 	movi	r3,-1
   48cc4:	10c00526 	beq	r2,r3,48cdc <_close_r+0x44>
   48cc8:	dfc00217 	ldw	ra,8(sp)
   48ccc:	dc400117 	ldw	r17,4(sp)
   48cd0:	dc000017 	ldw	r16,0(sp)
   48cd4:	dec00304 	addi	sp,sp,12
   48cd8:	f800283a 	ret
   48cdc:	80c00017 	ldw	r3,0(r16)
   48ce0:	183ff926 	beq	r3,zero,48cc8 <_close_r+0x30>
   48ce4:	88c00015 	stw	r3,0(r17)
   48ce8:	dfc00217 	ldw	ra,8(sp)
   48cec:	dc400117 	ldw	r17,4(sp)
   48cf0:	dc000017 	ldw	r16,0(sp)
   48cf4:	dec00304 	addi	sp,sp,12
   48cf8:	f800283a 	ret

00048cfc <_fclose_r>:
   48cfc:	defffc04 	addi	sp,sp,-16
   48d00:	dc400115 	stw	r17,4(sp)
   48d04:	dc000015 	stw	r16,0(sp)
   48d08:	dfc00315 	stw	ra,12(sp)
   48d0c:	dc800215 	stw	r18,8(sp)
   48d10:	2821883a 	mov	r16,r5
   48d14:	2023883a 	mov	r17,r4
   48d18:	28003426 	beq	r5,zero,48dec <_fclose_r+0xf0>
   48d1c:	00461180 	call	46118 <__sfp_lock_acquire>
   48d20:	88000226 	beq	r17,zero,48d2c <_fclose_r+0x30>
   48d24:	88800e17 	ldw	r2,56(r17)
   48d28:	10003826 	beq	r2,zero,48e0c <_fclose_r+0x110>
   48d2c:	8080030f 	ldh	r2,12(r16)
   48d30:	10002526 	beq	r2,zero,48dc8 <_fclose_r+0xcc>
   48d34:	8809883a 	mov	r4,r17
   48d38:	800b883a 	mov	r5,r16
   48d3c:	0045c540 	call	45c54 <_fflush_r>
   48d40:	1025883a 	mov	r18,r2
   48d44:	80800b17 	ldw	r2,44(r16)
   48d48:	10000426 	beq	r2,zero,48d5c <_fclose_r+0x60>
   48d4c:	81400717 	ldw	r5,28(r16)
   48d50:	8809883a 	mov	r4,r17
   48d54:	103ee83a 	callr	r2
   48d58:	10003516 	blt	r2,zero,48e30 <_fclose_r+0x134>
   48d5c:	8080030b 	ldhu	r2,12(r16)
   48d60:	1080200c 	andi	r2,r2,128
   48d64:	10bfffcc 	andi	r2,r2,65535
   48d68:	10a0001c 	xori	r2,r2,32768
   48d6c:	10a00004 	addi	r2,r2,-32768
   48d70:	10002b1e 	bne	r2,zero,48e20 <_fclose_r+0x124>
   48d74:	81400c17 	ldw	r5,48(r16)
   48d78:	28000526 	beq	r5,zero,48d90 <_fclose_r+0x94>
   48d7c:	80801004 	addi	r2,r16,64
   48d80:	28800226 	beq	r5,r2,48d8c <_fclose_r+0x90>
   48d84:	8809883a 	mov	r4,r17
   48d88:	00462940 	call	46294 <_free_r>
   48d8c:	80000c15 	stw	zero,48(r16)
   48d90:	81401117 	ldw	r5,68(r16)
   48d94:	28000326 	beq	r5,zero,48da4 <_fclose_r+0xa8>
   48d98:	8809883a 	mov	r4,r17
   48d9c:	00462940 	call	46294 <_free_r>
   48da0:	80001115 	stw	zero,68(r16)
   48da4:	8000030d 	sth	zero,12(r16)
   48da8:	004611c0 	call	4611c <__sfp_lock_release>
   48dac:	9005883a 	mov	r2,r18
   48db0:	dfc00317 	ldw	ra,12(sp)
   48db4:	dc800217 	ldw	r18,8(sp)
   48db8:	dc400117 	ldw	r17,4(sp)
   48dbc:	dc000017 	ldw	r16,0(sp)
   48dc0:	dec00404 	addi	sp,sp,16
   48dc4:	f800283a 	ret
   48dc8:	004611c0 	call	4611c <__sfp_lock_release>
   48dcc:	0025883a 	mov	r18,zero
   48dd0:	9005883a 	mov	r2,r18
   48dd4:	dfc00317 	ldw	ra,12(sp)
   48dd8:	dc800217 	ldw	r18,8(sp)
   48ddc:	dc400117 	ldw	r17,4(sp)
   48de0:	dc000017 	ldw	r16,0(sp)
   48de4:	dec00404 	addi	sp,sp,16
   48de8:	f800283a 	ret
   48dec:	0025883a 	mov	r18,zero
   48df0:	9005883a 	mov	r2,r18
   48df4:	dfc00317 	ldw	ra,12(sp)
   48df8:	dc800217 	ldw	r18,8(sp)
   48dfc:	dc400117 	ldw	r17,4(sp)
   48e00:	dc000017 	ldw	r16,0(sp)
   48e04:	dec00404 	addi	sp,sp,16
   48e08:	f800283a 	ret
   48e0c:	8809883a 	mov	r4,r17
   48e10:	0045f100 	call	45f10 <__sinit>
   48e14:	8080030f 	ldh	r2,12(r16)
   48e18:	103fc61e 	bne	r2,zero,48d34 <_fclose_r+0x38>
   48e1c:	003fea06 	br	48dc8 <_fclose_r+0xcc>
   48e20:	81400417 	ldw	r5,16(r16)
   48e24:	8809883a 	mov	r4,r17
   48e28:	00462940 	call	46294 <_free_r>
   48e2c:	003fd106 	br	48d74 <_fclose_r+0x78>
   48e30:	04bfffc4 	movi	r18,-1
   48e34:	003fc906 	br	48d5c <_fclose_r+0x60>

00048e38 <fclose>:
   48e38:	00800174 	movhi	r2,5
   48e3c:	10bf8b04 	addi	r2,r2,-468
   48e40:	200b883a 	mov	r5,r4
   48e44:	11000017 	ldw	r4,0(r2)
   48e48:	0048cfc1 	jmpi	48cfc <_fclose_r>

00048e4c <_fstat_r>:
   48e4c:	defffd04 	addi	sp,sp,-12
   48e50:	dc400115 	stw	r17,4(sp)
   48e54:	dc000015 	stw	r16,0(sp)
   48e58:	2023883a 	mov	r17,r4
   48e5c:	04000174 	movhi	r16,5
   48e60:	84063804 	addi	r16,r16,6368
   48e64:	2809883a 	mov	r4,r5
   48e68:	300b883a 	mov	r5,r6
   48e6c:	dfc00215 	stw	ra,8(sp)
   48e70:	80000015 	stw	zero,0(r16)
   48e74:	004b2ac0 	call	4b2ac <fstat>
   48e78:	00ffffc4 	movi	r3,-1
   48e7c:	10c00526 	beq	r2,r3,48e94 <_fstat_r+0x48>
   48e80:	dfc00217 	ldw	ra,8(sp)
   48e84:	dc400117 	ldw	r17,4(sp)
   48e88:	dc000017 	ldw	r16,0(sp)
   48e8c:	dec00304 	addi	sp,sp,12
   48e90:	f800283a 	ret
   48e94:	80c00017 	ldw	r3,0(r16)
   48e98:	183ff926 	beq	r3,zero,48e80 <_fstat_r+0x34>
   48e9c:	88c00015 	stw	r3,0(r17)
   48ea0:	dfc00217 	ldw	ra,8(sp)
   48ea4:	dc400117 	ldw	r17,4(sp)
   48ea8:	dc000017 	ldw	r16,0(sp)
   48eac:	dec00304 	addi	sp,sp,12
   48eb0:	f800283a 	ret

00048eb4 <_isatty_r>:
   48eb4:	defffd04 	addi	sp,sp,-12
   48eb8:	dc400115 	stw	r17,4(sp)
   48ebc:	dc000015 	stw	r16,0(sp)
   48ec0:	2023883a 	mov	r17,r4
   48ec4:	04000174 	movhi	r16,5
   48ec8:	84063804 	addi	r16,r16,6368
   48ecc:	2809883a 	mov	r4,r5
   48ed0:	dfc00215 	stw	ra,8(sp)
   48ed4:	80000015 	stw	zero,0(r16)
   48ed8:	004b3ac0 	call	4b3ac <isatty>
   48edc:	00ffffc4 	movi	r3,-1
   48ee0:	10c00526 	beq	r2,r3,48ef8 <_isatty_r+0x44>
   48ee4:	dfc00217 	ldw	ra,8(sp)
   48ee8:	dc400117 	ldw	r17,4(sp)
   48eec:	dc000017 	ldw	r16,0(sp)
   48ef0:	dec00304 	addi	sp,sp,12
   48ef4:	f800283a 	ret
   48ef8:	80c00017 	ldw	r3,0(r16)
   48efc:	183ff926 	beq	r3,zero,48ee4 <_isatty_r+0x30>
   48f00:	88c00015 	stw	r3,0(r17)
   48f04:	dfc00217 	ldw	ra,8(sp)
   48f08:	dc400117 	ldw	r17,4(sp)
   48f0c:	dc000017 	ldw	r16,0(sp)
   48f10:	dec00304 	addi	sp,sp,12
   48f14:	f800283a 	ret

00048f18 <_lseek_r>:
   48f18:	defffd04 	addi	sp,sp,-12
   48f1c:	dc400115 	stw	r17,4(sp)
   48f20:	dc000015 	stw	r16,0(sp)
   48f24:	2023883a 	mov	r17,r4
   48f28:	04000174 	movhi	r16,5
   48f2c:	84063804 	addi	r16,r16,6368
   48f30:	2809883a 	mov	r4,r5
   48f34:	300b883a 	mov	r5,r6
   48f38:	380d883a 	mov	r6,r7
   48f3c:	dfc00215 	stw	ra,8(sp)
   48f40:	80000015 	stw	zero,0(r16)
   48f44:	004b58c0 	call	4b58c <lseek>
   48f48:	00ffffc4 	movi	r3,-1
   48f4c:	10c00526 	beq	r2,r3,48f64 <_lseek_r+0x4c>
   48f50:	dfc00217 	ldw	ra,8(sp)
   48f54:	dc400117 	ldw	r17,4(sp)
   48f58:	dc000017 	ldw	r16,0(sp)
   48f5c:	dec00304 	addi	sp,sp,12
   48f60:	f800283a 	ret
   48f64:	80c00017 	ldw	r3,0(r16)
   48f68:	183ff926 	beq	r3,zero,48f50 <_lseek_r+0x38>
   48f6c:	88c00015 	stw	r3,0(r17)
   48f70:	dfc00217 	ldw	ra,8(sp)
   48f74:	dc400117 	ldw	r17,4(sp)
   48f78:	dc000017 	ldw	r16,0(sp)
   48f7c:	dec00304 	addi	sp,sp,12
   48f80:	f800283a 	ret

00048f84 <_read_r>:
   48f84:	defffd04 	addi	sp,sp,-12
   48f88:	dc400115 	stw	r17,4(sp)
   48f8c:	dc000015 	stw	r16,0(sp)
   48f90:	2023883a 	mov	r17,r4
   48f94:	04000174 	movhi	r16,5
   48f98:	84063804 	addi	r16,r16,6368
   48f9c:	2809883a 	mov	r4,r5
   48fa0:	300b883a 	mov	r5,r6
   48fa4:	380d883a 	mov	r6,r7
   48fa8:	dfc00215 	stw	ra,8(sp)
   48fac:	80000015 	stw	zero,0(r16)
   48fb0:	004b7680 	call	4b768 <read>
   48fb4:	00ffffc4 	movi	r3,-1
   48fb8:	10c00526 	beq	r2,r3,48fd0 <_read_r+0x4c>
   48fbc:	dfc00217 	ldw	ra,8(sp)
   48fc0:	dc400117 	ldw	r17,4(sp)
   48fc4:	dc000017 	ldw	r16,0(sp)
   48fc8:	dec00304 	addi	sp,sp,12
   48fcc:	f800283a 	ret
   48fd0:	80c00017 	ldw	r3,0(r16)
   48fd4:	183ff926 	beq	r3,zero,48fbc <_read_r+0x38>
   48fd8:	88c00015 	stw	r3,0(r17)
   48fdc:	dfc00217 	ldw	ra,8(sp)
   48fe0:	dc400117 	ldw	r17,4(sp)
   48fe4:	dc000017 	ldw	r16,0(sp)
   48fe8:	dec00304 	addi	sp,sp,12
   48fec:	f800283a 	ret

00048ff0 <__udivdi3>:
   48ff0:	defff504 	addi	sp,sp,-44
   48ff4:	dd000515 	stw	r20,20(sp)
   48ff8:	dcc00415 	stw	r19,16(sp)
   48ffc:	dc800315 	stw	r18,12(sp)
   49000:	dc400215 	stw	r17,8(sp)
   49004:	dc000115 	stw	r16,4(sp)
   49008:	dfc00a15 	stw	ra,40(sp)
   4900c:	df000915 	stw	fp,36(sp)
   49010:	ddc00815 	stw	r23,32(sp)
   49014:	dd800715 	stw	r22,28(sp)
   49018:	dd400615 	stw	r21,24(sp)
   4901c:	2025883a 	mov	r18,r4
   49020:	2823883a 	mov	r17,r5
   49024:	3021883a 	mov	r16,r6
   49028:	2027883a 	mov	r19,r4
   4902c:	2829883a 	mov	r20,r5
   49030:	3800451e 	bne	r7,zero,49148 <__udivdi3+0x158>
   49034:	2980652e 	bgeu	r5,r6,491cc <__udivdi3+0x1dc>
   49038:	00bfffd4 	movui	r2,65535
   4903c:	1180b436 	bltu	r2,r6,49310 <__udivdi3+0x320>
   49040:	00803fc4 	movi	r2,255
   49044:	11816636 	bltu	r2,r6,495e0 <__udivdi3+0x5f0>
   49048:	0005883a 	mov	r2,zero
   4904c:	0007883a 	mov	r3,zero
   49050:	3084d83a 	srl	r2,r6,r2
   49054:	01000174 	movhi	r4,5
   49058:	2138b304 	addi	r4,r4,-7476
   4905c:	2085883a 	add	r2,r4,r2
   49060:	10800003 	ldbu	r2,0(r2)
   49064:	10c7883a 	add	r3,r2,r3
   49068:	00800804 	movi	r2,32
   4906c:	10c5c83a 	sub	r2,r2,r3
   49070:	10000526 	beq	r2,zero,49088 <__udivdi3+0x98>
   49074:	88a2983a 	sll	r17,r17,r2
   49078:	90c6d83a 	srl	r3,r18,r3
   4907c:	30a0983a 	sll	r16,r6,r2
   49080:	90a6983a 	sll	r19,r18,r2
   49084:	88e8b03a 	or	r20,r17,r3
   49088:	8022d43a 	srli	r17,r16,16
   4908c:	a009883a 	mov	r4,r20
   49090:	857fffcc 	andi	r21,r16,65535
   49094:	880b883a 	mov	r5,r17
   49098:	004aad00 	call	4aad0 <__umodsi3>
   4909c:	a009883a 	mov	r4,r20
   490a0:	880b883a 	mov	r5,r17
   490a4:	102d883a 	mov	r22,r2
   490a8:	004aac80 	call	4aac8 <__udivsi3>
   490ac:	1009883a 	mov	r4,r2
   490b0:	a80b883a 	mov	r5,r21
   490b4:	1025883a 	mov	r18,r2
   490b8:	00419f00 	call	419f0 <__mulsi3>
   490bc:	1009883a 	mov	r4,r2
   490c0:	b006943a 	slli	r3,r22,16
   490c4:	9804d43a 	srli	r2,r19,16
   490c8:	1886b03a 	or	r3,r3,r2
   490cc:	1900052e 	bgeu	r3,r4,490e4 <__udivdi3+0xf4>
   490d0:	1c07883a 	add	r3,r3,r16
   490d4:	90bfffc4 	addi	r2,r18,-1
   490d8:	1c000136 	bltu	r3,r16,490e0 <__udivdi3+0xf0>
   490dc:	19015536 	bltu	r3,r4,49634 <__udivdi3+0x644>
   490e0:	1025883a 	mov	r18,r2
   490e4:	1929c83a 	sub	r20,r3,r4
   490e8:	880b883a 	mov	r5,r17
   490ec:	a009883a 	mov	r4,r20
   490f0:	004aad00 	call	4aad0 <__umodsi3>
   490f4:	102d883a 	mov	r22,r2
   490f8:	880b883a 	mov	r5,r17
   490fc:	a009883a 	mov	r4,r20
   49100:	b02c943a 	slli	r22,r22,16
   49104:	004aac80 	call	4aac8 <__udivsi3>
   49108:	1009883a 	mov	r4,r2
   4910c:	a80b883a 	mov	r5,r21
   49110:	9cffffcc 	andi	r19,r19,65535
   49114:	1023883a 	mov	r17,r2
   49118:	b4e6b03a 	or	r19,r22,r19
   4911c:	00419f00 	call	419f0 <__mulsi3>
   49120:	9880052e 	bgeu	r19,r2,49138 <__udivdi3+0x148>
   49124:	9c27883a 	add	r19,r19,r16
   49128:	88ffffc4 	addi	r3,r17,-1
   4912c:	9c011436 	bltu	r19,r16,49580 <__udivdi3+0x590>
   49130:	9881132e 	bgeu	r19,r2,49580 <__udivdi3+0x590>
   49134:	8c7fff84 	addi	r17,r17,-2
   49138:	9004943a 	slli	r2,r18,16
   4913c:	0007883a 	mov	r3,zero
   49140:	8884b03a 	or	r2,r17,r2
   49144:	00001506 	br	4919c <__udivdi3+0x1ac>
   49148:	29c06a36 	bltu	r5,r7,492f4 <__udivdi3+0x304>
   4914c:	00bfffd4 	movui	r2,65535
   49150:	11c06a2e 	bgeu	r2,r7,492fc <__udivdi3+0x30c>
   49154:	00804034 	movhi	r2,256
   49158:	10bfffc4 	addi	r2,r2,-1
   4915c:	11c11436 	bltu	r2,r7,495b0 <__udivdi3+0x5c0>
   49160:	00c00404 	movi	r3,16
   49164:	180b883a 	mov	r5,r3
   49168:	38c6d83a 	srl	r3,r7,r3
   4916c:	01000174 	movhi	r4,5
   49170:	2138b304 	addi	r4,r4,-7476
   49174:	04000804 	movi	r16,32
   49178:	20c7883a 	add	r3,r4,r3
   4917c:	18800003 	ldbu	r2,0(r3)
   49180:	1145883a 	add	r2,r2,r5
   49184:	80a1c83a 	sub	r16,r16,r2
   49188:	80006e1e 	bne	r16,zero,49344 <__udivdi3+0x354>
   4918c:	0007883a 	mov	r3,zero
   49190:	3c406a36 	bltu	r7,r17,4933c <__udivdi3+0x34c>
   49194:	9180692e 	bgeu	r18,r6,4933c <__udivdi3+0x34c>
   49198:	0005883a 	mov	r2,zero
   4919c:	dfc00a17 	ldw	ra,40(sp)
   491a0:	df000917 	ldw	fp,36(sp)
   491a4:	ddc00817 	ldw	r23,32(sp)
   491a8:	dd800717 	ldw	r22,28(sp)
   491ac:	dd400617 	ldw	r21,24(sp)
   491b0:	dd000517 	ldw	r20,20(sp)
   491b4:	dcc00417 	ldw	r19,16(sp)
   491b8:	dc800317 	ldw	r18,12(sp)
   491bc:	dc400217 	ldw	r17,8(sp)
   491c0:	dc000117 	ldw	r16,4(sp)
   491c4:	dec00b04 	addi	sp,sp,44
   491c8:	f800283a 	ret
   491cc:	3000041e 	bne	r6,zero,491e0 <__udivdi3+0x1f0>
   491d0:	01000044 	movi	r4,1
   491d4:	000b883a 	mov	r5,zero
   491d8:	004aac80 	call	4aac8 <__udivsi3>
   491dc:	1021883a 	mov	r16,r2
   491e0:	00bfffd4 	movui	r2,65535
   491e4:	1400502e 	bgeu	r2,r16,49328 <__udivdi3+0x338>
   491e8:	00804034 	movhi	r2,256
   491ec:	10bfffc4 	addi	r2,r2,-1
   491f0:	1400f536 	bltu	r2,r16,495c8 <__udivdi3+0x5d8>
   491f4:	00800404 	movi	r2,16
   491f8:	1007883a 	mov	r3,r2
   491fc:	8084d83a 	srl	r2,r16,r2
   49200:	01000174 	movhi	r4,5
   49204:	2138b304 	addi	r4,r4,-7476
   49208:	2085883a 	add	r2,r4,r2
   4920c:	10800003 	ldbu	r2,0(r2)
   49210:	10c7883a 	add	r3,r2,r3
   49214:	00800804 	movi	r2,32
   49218:	10c5c83a 	sub	r2,r2,r3
   4921c:	1000a01e 	bne	r2,zero,494a0 <__udivdi3+0x4b0>
   49220:	8028d43a 	srli	r20,r16,16
   49224:	8c23c83a 	sub	r17,r17,r16
   49228:	857fffcc 	andi	r21,r16,65535
   4922c:	00c00044 	movi	r3,1
   49230:	8809883a 	mov	r4,r17
   49234:	a00b883a 	mov	r5,r20
   49238:	d8c00015 	stw	r3,0(sp)
   4923c:	004aad00 	call	4aad0 <__umodsi3>
   49240:	8809883a 	mov	r4,r17
   49244:	a00b883a 	mov	r5,r20
   49248:	102d883a 	mov	r22,r2
   4924c:	004aac80 	call	4aac8 <__udivsi3>
   49250:	1009883a 	mov	r4,r2
   49254:	a80b883a 	mov	r5,r21
   49258:	1025883a 	mov	r18,r2
   4925c:	00419f00 	call	419f0 <__mulsi3>
   49260:	1009883a 	mov	r4,r2
   49264:	b00c943a 	slli	r6,r22,16
   49268:	9804d43a 	srli	r2,r19,16
   4926c:	d8c00017 	ldw	r3,0(sp)
   49270:	308cb03a 	or	r6,r6,r2
   49274:	3100052e 	bgeu	r6,r4,4928c <__udivdi3+0x29c>
   49278:	340d883a 	add	r6,r6,r16
   4927c:	90bfffc4 	addi	r2,r18,-1
   49280:	34000136 	bltu	r6,r16,49288 <__udivdi3+0x298>
   49284:	3100e836 	bltu	r6,r4,49628 <__udivdi3+0x638>
   49288:	1025883a 	mov	r18,r2
   4928c:	3123c83a 	sub	r17,r6,r4
   49290:	8809883a 	mov	r4,r17
   49294:	a00b883a 	mov	r5,r20
   49298:	d8c00015 	stw	r3,0(sp)
   4929c:	004aad00 	call	4aad0 <__umodsi3>
   492a0:	102d883a 	mov	r22,r2
   492a4:	8809883a 	mov	r4,r17
   492a8:	a00b883a 	mov	r5,r20
   492ac:	b02c943a 	slli	r22,r22,16
   492b0:	004aac80 	call	4aac8 <__udivsi3>
   492b4:	1009883a 	mov	r4,r2
   492b8:	a80b883a 	mov	r5,r21
   492bc:	9cffffcc 	andi	r19,r19,65535
   492c0:	1023883a 	mov	r17,r2
   492c4:	b4e6b03a 	or	r19,r22,r19
   492c8:	00419f00 	call	419f0 <__mulsi3>
   492cc:	d8c00017 	ldw	r3,0(sp)
   492d0:	9880052e 	bgeu	r19,r2,492e8 <__udivdi3+0x2f8>
   492d4:	9c27883a 	add	r19,r19,r16
   492d8:	893fffc4 	addi	r4,r17,-1
   492dc:	9c00aa36 	bltu	r19,r16,49588 <__udivdi3+0x598>
   492e0:	9880a92e 	bgeu	r19,r2,49588 <__udivdi3+0x598>
   492e4:	8c7fff84 	addi	r17,r17,-2
   492e8:	9004943a 	slli	r2,r18,16
   492ec:	8884b03a 	or	r2,r17,r2
   492f0:	003faa06 	br	4919c <__udivdi3+0x1ac>
   492f4:	0007883a 	mov	r3,zero
   492f8:	003fa706 	br	49198 <__udivdi3+0x1a8>
   492fc:	00803fc4 	movi	r2,255
   49300:	11c0ae36 	bltu	r2,r7,495bc <__udivdi3+0x5cc>
   49304:	0007883a 	mov	r3,zero
   49308:	000b883a 	mov	r5,zero
   4930c:	003f9606 	br	49168 <__udivdi3+0x178>
   49310:	00804034 	movhi	r2,256
   49314:	10bfffc4 	addi	r2,r2,-1
   49318:	1180ae36 	bltu	r2,r6,495d4 <__udivdi3+0x5e4>
   4931c:	00800404 	movi	r2,16
   49320:	1007883a 	mov	r3,r2
   49324:	003f4a06 	br	49050 <__udivdi3+0x60>
   49328:	00803fc4 	movi	r2,255
   4932c:	1400af36 	bltu	r2,r16,495ec <__udivdi3+0x5fc>
   49330:	0005883a 	mov	r2,zero
   49334:	0007883a 	mov	r3,zero
   49338:	003fb006 	br	491fc <__udivdi3+0x20c>
   4933c:	00800044 	movi	r2,1
   49340:	003f9606 	br	4919c <__udivdi3+0x1ac>
   49344:	3c0e983a 	sll	r7,r7,r16
   49348:	3086d83a 	srl	r3,r6,r2
   4934c:	88aed83a 	srl	r23,r17,r2
   49350:	9084d83a 	srl	r2,r18,r2
   49354:	38e6b03a 	or	r19,r7,r3
   49358:	9828d43a 	srli	r20,r19,16
   4935c:	8c22983a 	sll	r17,r17,r16
   49360:	b809883a 	mov	r4,r23
   49364:	a00b883a 	mov	r5,r20
   49368:	342a983a 	sll	r21,r6,r16
   4936c:	88a2b03a 	or	r17,r17,r2
   49370:	004aad00 	call	4aad0 <__umodsi3>
   49374:	b809883a 	mov	r4,r23
   49378:	a00b883a 	mov	r5,r20
   4937c:	1039883a 	mov	fp,r2
   49380:	9dbfffcc 	andi	r22,r19,65535
   49384:	004aac80 	call	4aac8 <__udivsi3>
   49388:	1009883a 	mov	r4,r2
   4938c:	b00b883a 	mov	r5,r22
   49390:	102f883a 	mov	r23,r2
   49394:	00419f00 	call	419f0 <__mulsi3>
   49398:	1009883a 	mov	r4,r2
   4939c:	e00e943a 	slli	r7,fp,16
   493a0:	8804d43a 	srli	r2,r17,16
   493a4:	388eb03a 	or	r7,r7,r2
   493a8:	3900042e 	bgeu	r7,r4,493bc <__udivdi3+0x3cc>
   493ac:	3ccf883a 	add	r7,r7,r19
   493b0:	b8bfffc4 	addi	r2,r23,-1
   493b4:	3cc0942e 	bgeu	r7,r19,49608 <__udivdi3+0x618>
   493b8:	102f883a 	mov	r23,r2
   493bc:	3939c83a 	sub	fp,r7,r4
   493c0:	a00b883a 	mov	r5,r20
   493c4:	e009883a 	mov	r4,fp
   493c8:	004aad00 	call	4aad0 <__umodsi3>
   493cc:	a00b883a 	mov	r5,r20
   493d0:	e009883a 	mov	r4,fp
   493d4:	d8800015 	stw	r2,0(sp)
   493d8:	004aac80 	call	4aac8 <__udivsi3>
   493dc:	1009883a 	mov	r4,r2
   493e0:	b00b883a 	mov	r5,r22
   493e4:	1029883a 	mov	r20,r2
   493e8:	00419f00 	call	419f0 <__mulsi3>
   493ec:	d8c00017 	ldw	r3,0(sp)
   493f0:	8c7fffcc 	andi	r17,r17,65535
   493f4:	1806943a 	slli	r3,r3,16
   493f8:	1c46b03a 	or	r3,r3,r17
   493fc:	1880042e 	bgeu	r3,r2,49410 <__udivdi3+0x420>
   49400:	1cc7883a 	add	r3,r3,r19
   49404:	a13fffc4 	addi	r4,r20,-1
   49408:	1cc07b2e 	bgeu	r3,r19,495f8 <__udivdi3+0x608>
   4940c:	2029883a 	mov	r20,r4
   49410:	b82e943a 	slli	r23,r23,16
   49414:	a822d43a 	srli	r17,r21,16
   49418:	ad7fffcc 	andi	r21,r21,65535
   4941c:	a5e8b03a 	or	r20,r20,r23
   49420:	a5bfffcc 	andi	r22,r20,65535
   49424:	b009883a 	mov	r4,r22
   49428:	a80b883a 	mov	r5,r21
   4942c:	18afc83a 	sub	r23,r3,r2
   49430:	a026d43a 	srli	r19,r20,16
   49434:	00419f00 	call	419f0 <__mulsi3>
   49438:	b009883a 	mov	r4,r22
   4943c:	880b883a 	mov	r5,r17
   49440:	1039883a 	mov	fp,r2
   49444:	00419f00 	call	419f0 <__mulsi3>
   49448:	a80b883a 	mov	r5,r21
   4944c:	9809883a 	mov	r4,r19
   49450:	102d883a 	mov	r22,r2
   49454:	00419f00 	call	419f0 <__mulsi3>
   49458:	9809883a 	mov	r4,r19
   4945c:	880b883a 	mov	r5,r17
   49460:	102b883a 	mov	r21,r2
   49464:	00419f00 	call	419f0 <__mulsi3>
   49468:	100b883a 	mov	r5,r2
   4946c:	e004d43a 	srli	r2,fp,16
   49470:	ad89883a 	add	r4,r21,r22
   49474:	2089883a 	add	r4,r4,r2
   49478:	2540022e 	bgeu	r4,r21,49484 <__udivdi3+0x494>
   4947c:	00800074 	movhi	r2,1
   49480:	288b883a 	add	r5,r5,r2
   49484:	2004d43a 	srli	r2,r4,16
   49488:	288b883a 	add	r5,r5,r2
   4948c:	b9404536 	bltu	r23,r5,495a4 <__udivdi3+0x5b4>
   49490:	b9403f26 	beq	r23,r5,49590 <__udivdi3+0x5a0>
   49494:	a005883a 	mov	r2,r20
   49498:	0007883a 	mov	r3,zero
   4949c:	003f3f06 	br	4919c <__udivdi3+0x1ac>
   494a0:	80a0983a 	sll	r16,r16,r2
   494a4:	88eed83a 	srl	r23,r17,r3
   494a8:	90c6d83a 	srl	r3,r18,r3
   494ac:	8028d43a 	srli	r20,r16,16
   494b0:	88a2983a 	sll	r17,r17,r2
   494b4:	b809883a 	mov	r4,r23
   494b8:	a00b883a 	mov	r5,r20
   494bc:	88ecb03a 	or	r22,r17,r3
   494c0:	90a6983a 	sll	r19,r18,r2
   494c4:	004aad00 	call	4aad0 <__umodsi3>
   494c8:	b809883a 	mov	r4,r23
   494cc:	a00b883a 	mov	r5,r20
   494d0:	1023883a 	mov	r17,r2
   494d4:	857fffcc 	andi	r21,r16,65535
   494d8:	004aac80 	call	4aac8 <__udivsi3>
   494dc:	1009883a 	mov	r4,r2
   494e0:	a80b883a 	mov	r5,r21
   494e4:	102f883a 	mov	r23,r2
   494e8:	00419f00 	call	419f0 <__mulsi3>
   494ec:	1009883a 	mov	r4,r2
   494f0:	880a943a 	slli	r5,r17,16
   494f4:	b004d43a 	srli	r2,r22,16
   494f8:	288ab03a 	or	r5,r5,r2
   494fc:	2900062e 	bgeu	r5,r4,49518 <__udivdi3+0x528>
   49500:	2c0b883a 	add	r5,r5,r16
   49504:	b8bfffc4 	addi	r2,r23,-1
   49508:	2c004536 	bltu	r5,r16,49620 <__udivdi3+0x630>
   4950c:	2900442e 	bgeu	r5,r4,49620 <__udivdi3+0x630>
   49510:	bdffff84 	addi	r23,r23,-2
   49514:	2c0b883a 	add	r5,r5,r16
   49518:	2925c83a 	sub	r18,r5,r4
   4951c:	9009883a 	mov	r4,r18
   49520:	a00b883a 	mov	r5,r20
   49524:	004aad00 	call	4aad0 <__umodsi3>
   49528:	1023883a 	mov	r17,r2
   4952c:	9009883a 	mov	r4,r18
   49530:	a00b883a 	mov	r5,r20
   49534:	8822943a 	slli	r17,r17,16
   49538:	004aac80 	call	4aac8 <__udivsi3>
   4953c:	1009883a 	mov	r4,r2
   49540:	a80b883a 	mov	r5,r21
   49544:	b5bfffcc 	andi	r22,r22,65535
   49548:	1025883a 	mov	r18,r2
   4954c:	8da2b03a 	or	r17,r17,r22
   49550:	00419f00 	call	419f0 <__mulsi3>
   49554:	8880062e 	bgeu	r17,r2,49570 <__udivdi3+0x580>
   49558:	8c23883a 	add	r17,r17,r16
   4955c:	90ffffc4 	addi	r3,r18,-1
   49560:	8c002d36 	bltu	r17,r16,49618 <__udivdi3+0x628>
   49564:	88802c2e 	bgeu	r17,r2,49618 <__udivdi3+0x628>
   49568:	94bfff84 	addi	r18,r18,-2
   4956c:	8c23883a 	add	r17,r17,r16
   49570:	b806943a 	slli	r3,r23,16
   49574:	88a3c83a 	sub	r17,r17,r2
   49578:	90c6b03a 	or	r3,r18,r3
   4957c:	003f2c06 	br	49230 <__udivdi3+0x240>
   49580:	1823883a 	mov	r17,r3
   49584:	003eec06 	br	49138 <__udivdi3+0x148>
   49588:	2023883a 	mov	r17,r4
   4958c:	003f5606 	br	492e8 <__udivdi3+0x2f8>
   49590:	2008943a 	slli	r4,r4,16
   49594:	9420983a 	sll	r16,r18,r16
   49598:	e73fffcc 	andi	fp,fp,65535
   4959c:	2709883a 	add	r4,r4,fp
   495a0:	813fbc2e 	bgeu	r16,r4,49494 <__udivdi3+0x4a4>
   495a4:	a0bfffc4 	addi	r2,r20,-1
   495a8:	0007883a 	mov	r3,zero
   495ac:	003efb06 	br	4919c <__udivdi3+0x1ac>
   495b0:	00c00604 	movi	r3,24
   495b4:	180b883a 	mov	r5,r3
   495b8:	003eeb06 	br	49168 <__udivdi3+0x178>
   495bc:	00c00204 	movi	r3,8
   495c0:	180b883a 	mov	r5,r3
   495c4:	003ee806 	br	49168 <__udivdi3+0x178>
   495c8:	00800604 	movi	r2,24
   495cc:	1007883a 	mov	r3,r2
   495d0:	003f0a06 	br	491fc <__udivdi3+0x20c>
   495d4:	00800604 	movi	r2,24
   495d8:	1007883a 	mov	r3,r2
   495dc:	003e9c06 	br	49050 <__udivdi3+0x60>
   495e0:	00800204 	movi	r2,8
   495e4:	1007883a 	mov	r3,r2
   495e8:	003e9906 	br	49050 <__udivdi3+0x60>
   495ec:	00800204 	movi	r2,8
   495f0:	1007883a 	mov	r3,r2
   495f4:	003f0106 	br	491fc <__udivdi3+0x20c>
   495f8:	18bf842e 	bgeu	r3,r2,4940c <__udivdi3+0x41c>
   495fc:	a53fff84 	addi	r20,r20,-2
   49600:	1cc7883a 	add	r3,r3,r19
   49604:	003f8206 	br	49410 <__udivdi3+0x420>
   49608:	393f6b2e 	bgeu	r7,r4,493b8 <__udivdi3+0x3c8>
   4960c:	bdffff84 	addi	r23,r23,-2
   49610:	3ccf883a 	add	r7,r7,r19
   49614:	003f6906 	br	493bc <__udivdi3+0x3cc>
   49618:	1825883a 	mov	r18,r3
   4961c:	003fd406 	br	49570 <__udivdi3+0x580>
   49620:	102f883a 	mov	r23,r2
   49624:	003fbc06 	br	49518 <__udivdi3+0x528>
   49628:	94bfff84 	addi	r18,r18,-2
   4962c:	340d883a 	add	r6,r6,r16
   49630:	003f1606 	br	4928c <__udivdi3+0x29c>
   49634:	94bfff84 	addi	r18,r18,-2
   49638:	1c07883a 	add	r3,r3,r16
   4963c:	003ea906 	br	490e4 <__udivdi3+0xf4>

00049640 <__umoddi3>:
   49640:	defff304 	addi	sp,sp,-52
   49644:	dd000715 	stw	r20,28(sp)
   49648:	dcc00615 	stw	r19,24(sp)
   4964c:	dc800515 	stw	r18,20(sp)
   49650:	dc400415 	stw	r17,16(sp)
   49654:	dc000315 	stw	r16,12(sp)
   49658:	dfc00c15 	stw	ra,48(sp)
   4965c:	df000b15 	stw	fp,44(sp)
   49660:	ddc00a15 	stw	r23,40(sp)
   49664:	dd800915 	stw	r22,36(sp)
   49668:	dd400815 	stw	r21,32(sp)
   4966c:	2025883a 	mov	r18,r4
   49670:	2823883a 	mov	r17,r5
   49674:	3021883a 	mov	r16,r6
   49678:	2027883a 	mov	r19,r4
   4967c:	2829883a 	mov	r20,r5
   49680:	38003a1e 	bne	r7,zero,4976c <__umoddi3+0x12c>
   49684:	2980522e 	bgeu	r5,r6,497d0 <__umoddi3+0x190>
   49688:	00bfffd4 	movui	r2,65535
   4968c:	1180a436 	bltu	r2,r6,49920 <__umoddi3+0x2e0>
   49690:	00803fc4 	movi	r2,255
   49694:	11816036 	bltu	r2,r6,49c18 <__umoddi3+0x5d8>
   49698:	0005883a 	mov	r2,zero
   4969c:	0009883a 	mov	r4,zero
   496a0:	3084d83a 	srl	r2,r6,r2
   496a4:	00c00174 	movhi	r3,5
   496a8:	18f8b304 	addi	r3,r3,-7476
   496ac:	05400804 	movi	r21,32
   496b0:	1885883a 	add	r2,r3,r2
   496b4:	10800003 	ldbu	r2,0(r2)
   496b8:	1109883a 	add	r4,r2,r4
   496bc:	a92bc83a 	sub	r21,r21,r4
   496c0:	a8010e26 	beq	r21,zero,49afc <__umoddi3+0x4bc>
   496c4:	8d62983a 	sll	r17,r17,r21
   496c8:	9108d83a 	srl	r4,r18,r4
   496cc:	3560983a 	sll	r16,r6,r21
   496d0:	9566983a 	sll	r19,r18,r21
   496d4:	8928b03a 	or	r20,r17,r4
   496d8:	8022d43a 	srli	r17,r16,16
   496dc:	a009883a 	mov	r4,r20
   496e0:	84bfffcc 	andi	r18,r16,65535
   496e4:	880b883a 	mov	r5,r17
   496e8:	004aad00 	call	4aad0 <__umodsi3>
   496ec:	a009883a 	mov	r4,r20
   496f0:	880b883a 	mov	r5,r17
   496f4:	102d883a 	mov	r22,r2
   496f8:	004aac80 	call	4aac8 <__udivsi3>
   496fc:	1009883a 	mov	r4,r2
   49700:	900b883a 	mov	r5,r18
   49704:	00419f00 	call	419f0 <__mulsi3>
   49708:	1009883a 	mov	r4,r2
   4970c:	b006943a 	slli	r3,r22,16
   49710:	9804d43a 	srli	r2,r19,16
   49714:	1886b03a 	or	r3,r3,r2
   49718:	1900042e 	bgeu	r3,r4,4972c <__umoddi3+0xec>
   4971c:	1c07883a 	add	r3,r3,r16
   49720:	1c000236 	bltu	r3,r16,4972c <__umoddi3+0xec>
   49724:	1900012e 	bgeu	r3,r4,4972c <__umoddi3+0xec>
   49728:	1c07883a 	add	r3,r3,r16
   4972c:	1929c83a 	sub	r20,r3,r4
   49730:	a009883a 	mov	r4,r20
   49734:	880b883a 	mov	r5,r17
   49738:	004aad00 	call	4aad0 <__umodsi3>
   4973c:	102d883a 	mov	r22,r2
   49740:	a009883a 	mov	r4,r20
   49744:	880b883a 	mov	r5,r17
   49748:	b02c943a 	slli	r22,r22,16
   4974c:	004aac80 	call	4aac8 <__udivsi3>
   49750:	1009883a 	mov	r4,r2
   49754:	900b883a 	mov	r5,r18
   49758:	9cffffcc 	andi	r19,r19,65535
   4975c:	00419f00 	call	419f0 <__mulsi3>
   49760:	b4e6b03a 	or	r19,r22,r19
   49764:	9880572e 	bgeu	r19,r2,498c4 <__umoddi3+0x284>
   49768:	00005206 	br	498b4 <__umoddi3+0x274>
   4976c:	29c05936 	bltu	r5,r7,498d4 <__umoddi3+0x294>
   49770:	00bfffd4 	movui	r2,65535
   49774:	11c0652e 	bgeu	r2,r7,4990c <__umoddi3+0x2cc>
   49778:	00804034 	movhi	r2,256
   4977c:	10bfffc4 	addi	r2,r2,-1
   49780:	11c11936 	bltu	r2,r7,49be8 <__umoddi3+0x5a8>
   49784:	00c00404 	movi	r3,16
   49788:	1827883a 	mov	r19,r3
   4978c:	38c6d83a 	srl	r3,r7,r3
   49790:	01000174 	movhi	r4,5
   49794:	2138b304 	addi	r4,r4,-7476
   49798:	04000804 	movi	r16,32
   4979c:	20c7883a 	add	r3,r4,r3
   497a0:	18800003 	ldbu	r2,0(r3)
   497a4:	14e7883a 	add	r19,r2,r19
   497a8:	84e1c83a 	sub	r16,r16,r19
   497ac:	8000671e 	bne	r16,zero,4994c <__umoddi3+0x30c>
   497b0:	3c400136 	bltu	r7,r17,497b8 <__umoddi3+0x178>
   497b4:	91812536 	bltu	r18,r6,49c4c <__umoddi3+0x60c>
   497b8:	9185c83a 	sub	r2,r18,r6
   497bc:	89e3c83a 	sub	r17,r17,r7
   497c0:	90a5803a 	cmpltu	r18,r18,r2
   497c4:	8ca9c83a 	sub	r20,r17,r18
   497c8:	a007883a 	mov	r3,r20
   497cc:	00004306 	br	498dc <__umoddi3+0x29c>
   497d0:	3000041e 	bne	r6,zero,497e4 <__umoddi3+0x1a4>
   497d4:	01000044 	movi	r4,1
   497d8:	000b883a 	mov	r5,zero
   497dc:	004aac80 	call	4aac8 <__udivsi3>
   497e0:	1021883a 	mov	r16,r2
   497e4:	00bfffd4 	movui	r2,65535
   497e8:	1400532e 	bgeu	r2,r16,49938 <__umoddi3+0x2f8>
   497ec:	00804034 	movhi	r2,256
   497f0:	10bfffc4 	addi	r2,r2,-1
   497f4:	14010536 	bltu	r2,r16,49c0c <__umoddi3+0x5cc>
   497f8:	00800404 	movi	r2,16
   497fc:	1007883a 	mov	r3,r2
   49800:	8084d83a 	srl	r2,r16,r2
   49804:	01000174 	movhi	r4,5
   49808:	2138b304 	addi	r4,r4,-7476
   4980c:	05400804 	movi	r21,32
   49810:	2085883a 	add	r2,r4,r2
   49814:	10800003 	ldbu	r2,0(r2)
   49818:	10c7883a 	add	r3,r2,r3
   4981c:	a8ebc83a 	sub	r21,r21,r3
   49820:	a800b81e 	bne	r21,zero,49b04 <__umoddi3+0x4c4>
   49824:	8028d43a 	srli	r20,r16,16
   49828:	8c23c83a 	sub	r17,r17,r16
   4982c:	85bfffcc 	andi	r22,r16,65535
   49830:	8809883a 	mov	r4,r17
   49834:	a00b883a 	mov	r5,r20
   49838:	004aad00 	call	4aad0 <__umodsi3>
   4983c:	8809883a 	mov	r4,r17
   49840:	a00b883a 	mov	r5,r20
   49844:	1025883a 	mov	r18,r2
   49848:	004aac80 	call	4aac8 <__udivsi3>
   4984c:	1009883a 	mov	r4,r2
   49850:	b00b883a 	mov	r5,r22
   49854:	00419f00 	call	419f0 <__mulsi3>
   49858:	1009883a 	mov	r4,r2
   4985c:	9006943a 	slli	r3,r18,16
   49860:	9804d43a 	srli	r2,r19,16
   49864:	1886b03a 	or	r3,r3,r2
   49868:	1900032e 	bgeu	r3,r4,49878 <__umoddi3+0x238>
   4986c:	1c07883a 	add	r3,r3,r16
   49870:	1c000136 	bltu	r3,r16,49878 <__umoddi3+0x238>
   49874:	1900f336 	bltu	r3,r4,49c44 <__umoddi3+0x604>
   49878:	1923c83a 	sub	r17,r3,r4
   4987c:	8809883a 	mov	r4,r17
   49880:	a00b883a 	mov	r5,r20
   49884:	004aad00 	call	4aad0 <__umodsi3>
   49888:	102f883a 	mov	r23,r2
   4988c:	8809883a 	mov	r4,r17
   49890:	a00b883a 	mov	r5,r20
   49894:	b82e943a 	slli	r23,r23,16
   49898:	004aac80 	call	4aac8 <__udivsi3>
   4989c:	1009883a 	mov	r4,r2
   498a0:	b00b883a 	mov	r5,r22
   498a4:	9cffffcc 	andi	r19,r19,65535
   498a8:	00419f00 	call	419f0 <__mulsi3>
   498ac:	bce6b03a 	or	r19,r23,r19
   498b0:	9880042e 	bgeu	r19,r2,498c4 <__umoddi3+0x284>
   498b4:	9c27883a 	add	r19,r19,r16
   498b8:	9c000236 	bltu	r19,r16,498c4 <__umoddi3+0x284>
   498bc:	9880012e 	bgeu	r19,r2,498c4 <__umoddi3+0x284>
   498c0:	9c27883a 	add	r19,r19,r16
   498c4:	9885c83a 	sub	r2,r19,r2
   498c8:	1544d83a 	srl	r2,r2,r21
   498cc:	0007883a 	mov	r3,zero
   498d0:	00000206 	br	498dc <__umoddi3+0x29c>
   498d4:	2005883a 	mov	r2,r4
   498d8:	2807883a 	mov	r3,r5
   498dc:	dfc00c17 	ldw	ra,48(sp)
   498e0:	df000b17 	ldw	fp,44(sp)
   498e4:	ddc00a17 	ldw	r23,40(sp)
   498e8:	dd800917 	ldw	r22,36(sp)
   498ec:	dd400817 	ldw	r21,32(sp)
   498f0:	dd000717 	ldw	r20,28(sp)
   498f4:	dcc00617 	ldw	r19,24(sp)
   498f8:	dc800517 	ldw	r18,20(sp)
   498fc:	dc400417 	ldw	r17,16(sp)
   49900:	dc000317 	ldw	r16,12(sp)
   49904:	dec00d04 	addi	sp,sp,52
   49908:	f800283a 	ret
   4990c:	00803fc4 	movi	r2,255
   49910:	11c0b236 	bltu	r2,r7,49bdc <__umoddi3+0x59c>
   49914:	0007883a 	mov	r3,zero
   49918:	0027883a 	mov	r19,zero
   4991c:	003f9b06 	br	4978c <__umoddi3+0x14c>
   49920:	00804034 	movhi	r2,256
   49924:	10bfffc4 	addi	r2,r2,-1
   49928:	1180b236 	bltu	r2,r6,49bf4 <__umoddi3+0x5b4>
   4992c:	00800404 	movi	r2,16
   49930:	1009883a 	mov	r4,r2
   49934:	003f5a06 	br	496a0 <__umoddi3+0x60>
   49938:	00803fc4 	movi	r2,255
   4993c:	1400b036 	bltu	r2,r16,49c00 <__umoddi3+0x5c0>
   49940:	0005883a 	mov	r2,zero
   49944:	0007883a 	mov	r3,zero
   49948:	003fad06 	br	49800 <__umoddi3+0x1c0>
   4994c:	34c4d83a 	srl	r2,r6,r19
   49950:	3c0e983a 	sll	r7,r7,r16
   49954:	8cf8d83a 	srl	fp,r17,r19
   49958:	8c22983a 	sll	r17,r17,r16
   4995c:	38a8b03a 	or	r20,r7,r2
   49960:	a02ad43a 	srli	r21,r20,16
   49964:	94c4d83a 	srl	r2,r18,r19
   49968:	e009883a 	mov	r4,fp
   4996c:	a80b883a 	mov	r5,r21
   49970:	342c983a 	sll	r22,r6,r16
   49974:	88a2b03a 	or	r17,r17,r2
   49978:	004aad00 	call	4aad0 <__umodsi3>
   4997c:	e009883a 	mov	r4,fp
   49980:	a80b883a 	mov	r5,r21
   49984:	a5ffffcc 	andi	r23,r20,65535
   49988:	d8800215 	stw	r2,8(sp)
   4998c:	004aac80 	call	4aac8 <__udivsi3>
   49990:	1009883a 	mov	r4,r2
   49994:	b80b883a 	mov	r5,r23
   49998:	1039883a 	mov	fp,r2
   4999c:	00419f00 	call	419f0 <__mulsi3>
   499a0:	d8c00217 	ldw	r3,8(sp)
   499a4:	1009883a 	mov	r4,r2
   499a8:	8804d43a 	srli	r2,r17,16
   499ac:	1806943a 	slli	r3,r3,16
   499b0:	9424983a 	sll	r18,r18,r16
   499b4:	1886b03a 	or	r3,r3,r2
   499b8:	1900042e 	bgeu	r3,r4,499cc <__umoddi3+0x38c>
   499bc:	1d07883a 	add	r3,r3,r20
   499c0:	e0bfffc4 	addi	r2,fp,-1
   499c4:	1d009b2e 	bgeu	r3,r20,49c34 <__umoddi3+0x5f4>
   499c8:	1039883a 	mov	fp,r2
   499cc:	1907c83a 	sub	r3,r3,r4
   499d0:	1809883a 	mov	r4,r3
   499d4:	a80b883a 	mov	r5,r21
   499d8:	d8c00215 	stw	r3,8(sp)
   499dc:	004aad00 	call	4aad0 <__umodsi3>
   499e0:	d8c00217 	ldw	r3,8(sp)
   499e4:	a80b883a 	mov	r5,r21
   499e8:	d8800015 	stw	r2,0(sp)
   499ec:	1809883a 	mov	r4,r3
   499f0:	004aac80 	call	4aac8 <__udivsi3>
   499f4:	1009883a 	mov	r4,r2
   499f8:	b80b883a 	mov	r5,r23
   499fc:	102b883a 	mov	r21,r2
   49a00:	00419f00 	call	419f0 <__mulsi3>
   49a04:	d9c00017 	ldw	r7,0(sp)
   49a08:	8c7fffcc 	andi	r17,r17,65535
   49a0c:	380e943a 	slli	r7,r7,16
   49a10:	3c4eb03a 	or	r7,r7,r17
   49a14:	3880042e 	bgeu	r7,r2,49a28 <__umoddi3+0x3e8>
   49a18:	3d0f883a 	add	r7,r7,r20
   49a1c:	a8ffffc4 	addi	r3,r21,-1
   49a20:	3d00802e 	bgeu	r7,r20,49c24 <__umoddi3+0x5e4>
   49a24:	182b883a 	mov	r21,r3
   49a28:	e038943a 	slli	fp,fp,16
   49a2c:	b010d43a 	srli	r8,r22,16
   49a30:	b1bfffcc 	andi	r6,r22,65535
   49a34:	af2ab03a 	or	r21,r21,fp
   49a38:	a82ed43a 	srli	r23,r21,16
   49a3c:	ad7fffcc 	andi	r21,r21,65535
   49a40:	300b883a 	mov	r5,r6
   49a44:	a809883a 	mov	r4,r21
   49a48:	38a3c83a 	sub	r17,r7,r2
   49a4c:	d9800115 	stw	r6,4(sp)
   49a50:	da000015 	stw	r8,0(sp)
   49a54:	00419f00 	call	419f0 <__mulsi3>
   49a58:	da000017 	ldw	r8,0(sp)
   49a5c:	a809883a 	mov	r4,r21
   49a60:	1039883a 	mov	fp,r2
   49a64:	400b883a 	mov	r5,r8
   49a68:	da000215 	stw	r8,8(sp)
   49a6c:	00419f00 	call	419f0 <__mulsi3>
   49a70:	d9800117 	ldw	r6,4(sp)
   49a74:	b809883a 	mov	r4,r23
   49a78:	d8800015 	stw	r2,0(sp)
   49a7c:	300b883a 	mov	r5,r6
   49a80:	00419f00 	call	419f0 <__mulsi3>
   49a84:	d8c00217 	ldw	r3,8(sp)
   49a88:	b809883a 	mov	r4,r23
   49a8c:	102b883a 	mov	r21,r2
   49a90:	180b883a 	mov	r5,r3
   49a94:	00419f00 	call	419f0 <__mulsi3>
   49a98:	d9c00017 	ldw	r7,0(sp)
   49a9c:	1007883a 	mov	r3,r2
   49aa0:	e004d43a 	srli	r2,fp,16
   49aa4:	a9c9883a 	add	r4,r21,r7
   49aa8:	2089883a 	add	r4,r4,r2
   49aac:	2540022e 	bgeu	r4,r21,49ab8 <__umoddi3+0x478>
   49ab0:	00800074 	movhi	r2,1
   49ab4:	1887883a 	add	r3,r3,r2
   49ab8:	2004d43a 	srli	r2,r4,16
   49abc:	2008943a 	slli	r4,r4,16
   49ac0:	e73fffcc 	andi	fp,fp,65535
   49ac4:	1887883a 	add	r3,r3,r2
   49ac8:	2709883a 	add	r4,r4,fp
   49acc:	88c03d36 	bltu	r17,r3,49bc4 <__umoddi3+0x584>
   49ad0:	88c06126 	beq	r17,r3,49c58 <__umoddi3+0x618>
   49ad4:	88c7c83a 	sub	r3,r17,r3
   49ad8:	202d883a 	mov	r22,r4
   49adc:	95adc83a 	sub	r22,r18,r22
   49ae0:	95a5803a 	cmpltu	r18,r18,r22
   49ae4:	1c87c83a 	sub	r3,r3,r18
   49ae8:	1cc4983a 	sll	r2,r3,r19
   49aec:	b42cd83a 	srl	r22,r22,r16
   49af0:	1c06d83a 	srl	r3,r3,r16
   49af4:	1584b03a 	or	r2,r2,r22
   49af8:	003f7806 	br	498dc <__umoddi3+0x29c>
   49afc:	002b883a 	mov	r21,zero
   49b00:	003ef506 	br	496d8 <__umoddi3+0x98>
   49b04:	8560983a 	sll	r16,r16,r21
   49b08:	88e6d83a 	srl	r19,r17,r3
   49b0c:	90c6d83a 	srl	r3,r18,r3
   49b10:	8028d43a 	srli	r20,r16,16
   49b14:	8d62983a 	sll	r17,r17,r21
   49b18:	9809883a 	mov	r4,r19
   49b1c:	a00b883a 	mov	r5,r20
   49b20:	88eeb03a 	or	r23,r17,r3
   49b24:	004aad00 	call	4aad0 <__umodsi3>
   49b28:	9809883a 	mov	r4,r19
   49b2c:	a00b883a 	mov	r5,r20
   49b30:	1023883a 	mov	r17,r2
   49b34:	85bfffcc 	andi	r22,r16,65535
   49b38:	004aac80 	call	4aac8 <__udivsi3>
   49b3c:	1009883a 	mov	r4,r2
   49b40:	b00b883a 	mov	r5,r22
   49b44:	00419f00 	call	419f0 <__mulsi3>
   49b48:	1007883a 	mov	r3,r2
   49b4c:	8808943a 	slli	r4,r17,16
   49b50:	b804d43a 	srli	r2,r23,16
   49b54:	9566983a 	sll	r19,r18,r21
   49b58:	2088b03a 	or	r4,r4,r2
   49b5c:	20c0042e 	bgeu	r4,r3,49b70 <__umoddi3+0x530>
   49b60:	2409883a 	add	r4,r4,r16
   49b64:	24000236 	bltu	r4,r16,49b70 <__umoddi3+0x530>
   49b68:	20c0012e 	bgeu	r4,r3,49b70 <__umoddi3+0x530>
   49b6c:	2409883a 	add	r4,r4,r16
   49b70:	20e5c83a 	sub	r18,r4,r3
   49b74:	9009883a 	mov	r4,r18
   49b78:	a00b883a 	mov	r5,r20
   49b7c:	004aad00 	call	4aad0 <__umodsi3>
   49b80:	1023883a 	mov	r17,r2
   49b84:	9009883a 	mov	r4,r18
   49b88:	a00b883a 	mov	r5,r20
   49b8c:	8822943a 	slli	r17,r17,16
   49b90:	004aac80 	call	4aac8 <__udivsi3>
   49b94:	1009883a 	mov	r4,r2
   49b98:	b00b883a 	mov	r5,r22
   49b9c:	bdffffcc 	andi	r23,r23,65535
   49ba0:	00419f00 	call	419f0 <__mulsi3>
   49ba4:	8de2b03a 	or	r17,r17,r23
   49ba8:	8880042e 	bgeu	r17,r2,49bbc <__umoddi3+0x57c>
   49bac:	8c23883a 	add	r17,r17,r16
   49bb0:	8c000236 	bltu	r17,r16,49bbc <__umoddi3+0x57c>
   49bb4:	8880012e 	bgeu	r17,r2,49bbc <__umoddi3+0x57c>
   49bb8:	8c23883a 	add	r17,r17,r16
   49bbc:	88a3c83a 	sub	r17,r17,r2
   49bc0:	003f1b06 	br	49830 <__umoddi3+0x1f0>
   49bc4:	25adc83a 	sub	r22,r4,r22
   49bc8:	1d07c83a 	sub	r3,r3,r20
   49bcc:	2589803a 	cmpltu	r4,r4,r22
   49bd0:	1907c83a 	sub	r3,r3,r4
   49bd4:	88c7c83a 	sub	r3,r17,r3
   49bd8:	003fc006 	br	49adc <__umoddi3+0x49c>
   49bdc:	00c00204 	movi	r3,8
   49be0:	1827883a 	mov	r19,r3
   49be4:	003ee906 	br	4978c <__umoddi3+0x14c>
   49be8:	00c00604 	movi	r3,24
   49bec:	1827883a 	mov	r19,r3
   49bf0:	003ee606 	br	4978c <__umoddi3+0x14c>
   49bf4:	00800604 	movi	r2,24
   49bf8:	1009883a 	mov	r4,r2
   49bfc:	003ea806 	br	496a0 <__umoddi3+0x60>
   49c00:	00800204 	movi	r2,8
   49c04:	1007883a 	mov	r3,r2
   49c08:	003efd06 	br	49800 <__umoddi3+0x1c0>
   49c0c:	00800604 	movi	r2,24
   49c10:	1007883a 	mov	r3,r2
   49c14:	003efa06 	br	49800 <__umoddi3+0x1c0>
   49c18:	00800204 	movi	r2,8
   49c1c:	1009883a 	mov	r4,r2
   49c20:	003e9f06 	br	496a0 <__umoddi3+0x60>
   49c24:	38bf7f2e 	bgeu	r7,r2,49a24 <__umoddi3+0x3e4>
   49c28:	ad7fff84 	addi	r21,r21,-2
   49c2c:	3d0f883a 	add	r7,r7,r20
   49c30:	003f7d06 	br	49a28 <__umoddi3+0x3e8>
   49c34:	193f642e 	bgeu	r3,r4,499c8 <__umoddi3+0x388>
   49c38:	e73fff84 	addi	fp,fp,-2
   49c3c:	1d07883a 	add	r3,r3,r20
   49c40:	003f6206 	br	499cc <__umoddi3+0x38c>
   49c44:	1c07883a 	add	r3,r3,r16
   49c48:	003f0b06 	br	49878 <__umoddi3+0x238>
   49c4c:	9005883a 	mov	r2,r18
   49c50:	a007883a 	mov	r3,r20
   49c54:	003f2106 	br	498dc <__umoddi3+0x29c>
   49c58:	913fda36 	bltu	r18,r4,49bc4 <__umoddi3+0x584>
   49c5c:	202d883a 	mov	r22,r4
   49c60:	0007883a 	mov	r3,zero
   49c64:	003f9d06 	br	49adc <__umoddi3+0x49c>

00049c68 <_fpadd_parts>:
   49c68:	2005883a 	mov	r2,r4
   49c6c:	21000017 	ldw	r4,0(r4)
   49c70:	01c00044 	movi	r7,1
   49c74:	3900622e 	bgeu	r7,r4,49e00 <_fpadd_parts+0x198>
   49c78:	28c00017 	ldw	r3,0(r5)
   49c7c:	38c05f2e 	bgeu	r7,r3,49dfc <_fpadd_parts+0x194>
   49c80:	01c00104 	movi	r7,4
   49c84:	21c0c626 	beq	r4,r7,49fa0 <_fpadd_parts+0x338>
   49c88:	19c05c26 	beq	r3,r7,49dfc <_fpadd_parts+0x194>
   49c8c:	01c00084 	movi	r7,2
   49c90:	19c06b26 	beq	r3,r7,49e40 <_fpadd_parts+0x1d8>
   49c94:	21c05926 	beq	r4,r7,49dfc <_fpadd_parts+0x194>
   49c98:	11c00217 	ldw	r7,8(r2)
   49c9c:	2ac00217 	ldw	r11,8(r5)
   49ca0:	13000317 	ldw	r12,12(r2)
   49ca4:	13400417 	ldw	r13,16(r2)
   49ca8:	3ac9c83a 	sub	r4,r7,r11
   49cac:	2a000317 	ldw	r8,12(r5)
   49cb0:	2a400417 	ldw	r9,16(r5)
   49cb4:	2015883a 	mov	r10,r4
   49cb8:	20007516 	blt	r4,zero,49e90 <_fpadd_parts+0x228>
   49cbc:	00c00fc4 	movi	r3,63
   49cc0:	1a805016 	blt	r3,r10,49e04 <_fpadd_parts+0x19c>
   49cc4:	0100870e 	bge	zero,r4,49ee4 <_fpadd_parts+0x27c>
   49cc8:	50fff804 	addi	r3,r10,-32
   49ccc:	18009916 	blt	r3,zero,49f34 <_fpadd_parts+0x2cc>
   49cd0:	48d6d83a 	srl	r11,r9,r3
   49cd4:	001d883a 	mov	r14,zero
   49cd8:	18009e16 	blt	r3,zero,49f54 <_fpadd_parts+0x2ec>
   49cdc:	01000044 	movi	r4,1
   49ce0:	20c6983a 	sll	r3,r4,r3
   49ce4:	0015883a 	mov	r10,zero
   49ce8:	513fffc4 	addi	r4,r10,-1
   49cec:	2295403a 	cmpgeu	r10,r4,r10
   49cf0:	1a87c83a 	sub	r3,r3,r10
   49cf4:	1a52703a 	and	r9,r3,r9
   49cf8:	2210703a 	and	r8,r4,r8
   49cfc:	4250b03a 	or	r8,r8,r9
   49d00:	4010c03a 	cmpne	r8,r8,zero
   49d04:	42d0b03a 	or	r8,r8,r11
   49d08:	7013883a 	mov	r9,r14
   49d0c:	11000117 	ldw	r4,4(r2)
   49d10:	28800117 	ldw	r2,4(r5)
   49d14:	20804126 	beq	r4,r2,49e1c <_fpadd_parts+0x1b4>
   49d18:	20006326 	beq	r4,zero,49ea8 <_fpadd_parts+0x240>
   49d1c:	4305c83a 	sub	r2,r8,r12
   49d20:	4091803a 	cmpltu	r8,r8,r2
   49d24:	4b47c83a 	sub	r3,r9,r13
   49d28:	1a07c83a 	sub	r3,r3,r8
   49d2c:	18006316 	blt	r3,zero,49ebc <_fpadd_parts+0x254>
   49d30:	30000115 	stw	zero,4(r6)
   49d34:	31c00215 	stw	r7,8(r6)
   49d38:	30800315 	stw	r2,12(r6)
   49d3c:	30c00415 	stw	r3,16(r6)
   49d40:	11ffffc4 	addi	r7,r2,-1
   49d44:	388b403a 	cmpgeu	r5,r7,r2
   49d48:	194bc83a 	sub	r5,r3,r5
   49d4c:	01040034 	movhi	r4,4096
   49d50:	213fffc4 	addi	r4,r4,-1
   49d54:	21401736 	bltu	r4,r5,49db4 <_fpadd_parts+0x14c>
   49d58:	29008226 	beq	r5,r4,49f64 <_fpadd_parts+0x2fc>
   49d5c:	31400217 	ldw	r5,8(r6)
   49d60:	02840034 	movhi	r10,4096
   49d64:	52bfffc4 	addi	r10,r10,-1
   49d68:	033fff84 	movi	r12,-2
   49d6c:	297fffc4 	addi	r5,r5,-1
   49d70:	00000106 	br	49d78 <_fpadd_parts+0x110>
   49d74:	3a804a26 	beq	r7,r10,49ea0 <_fpadd_parts+0x238>
   49d78:	1089883a 	add	r4,r2,r2
   49d7c:	2091803a 	cmpltu	r8,r4,r2
   49d80:	18c7883a 	add	r3,r3,r3
   49d84:	227fffc4 	addi	r9,r4,-1
   49d88:	40d1883a 	add	r8,r8,r3
   49d8c:	490f403a 	cmpgeu	r7,r9,r4
   49d90:	41cfc83a 	sub	r7,r8,r7
   49d94:	2817883a 	mov	r11,r5
   49d98:	2005883a 	mov	r2,r4
   49d9c:	4007883a 	mov	r3,r8
   49da0:	297fffc4 	addi	r5,r5,-1
   49da4:	51fff32e 	bgeu	r10,r7,49d74 <_fpadd_parts+0x10c>
   49da8:	31000315 	stw	r4,12(r6)
   49dac:	32000415 	stw	r8,16(r6)
   49db0:	32c00215 	stw	r11,8(r6)
   49db4:	010000c4 	movi	r4,3
   49db8:	31000015 	stw	r4,0(r6)
   49dbc:	01080034 	movhi	r4,8192
   49dc0:	213fffc4 	addi	r4,r4,-1
   49dc4:	20c00b2e 	bgeu	r4,r3,49df4 <_fpadd_parts+0x18c>
   49dc8:	180e97fa 	slli	r7,r3,31
   49dcc:	1008d07a 	srli	r4,r2,1
   49dd0:	31400217 	ldw	r5,8(r6)
   49dd4:	1806d07a 	srli	r3,r3,1
   49dd8:	1080004c 	andi	r2,r2,1
   49ddc:	3908b03a 	or	r4,r7,r4
   49de0:	1108b03a 	or	r4,r2,r4
   49de4:	29400044 	addi	r5,r5,1
   49de8:	31000315 	stw	r4,12(r6)
   49dec:	30c00415 	stw	r3,16(r6)
   49df0:	31400215 	stw	r5,8(r6)
   49df4:	3005883a 	mov	r2,r6
   49df8:	f800283a 	ret
   49dfc:	2805883a 	mov	r2,r5
   49e00:	f800283a 	ret
   49e04:	59c01e0e 	bge	r11,r7,49e80 <_fpadd_parts+0x218>
   49e08:	11000117 	ldw	r4,4(r2)
   49e0c:	28800117 	ldw	r2,4(r5)
   49e10:	0011883a 	mov	r8,zero
   49e14:	0013883a 	mov	r9,zero
   49e18:	20bfbf1e 	bne	r4,r2,49d18 <_fpadd_parts+0xb0>
   49e1c:	4305883a 	add	r2,r8,r12
   49e20:	1207803a 	cmpltu	r3,r2,r8
   49e24:	4b53883a 	add	r9,r9,r13
   49e28:	1a47883a 	add	r3,r3,r9
   49e2c:	31000115 	stw	r4,4(r6)
   49e30:	31c00215 	stw	r7,8(r6)
   49e34:	30800315 	stw	r2,12(r6)
   49e38:	30c00415 	stw	r3,16(r6)
   49e3c:	003fdd06 	br	49db4 <_fpadd_parts+0x14c>
   49e40:	20ffef1e 	bne	r4,r3,49e00 <_fpadd_parts+0x198>
   49e44:	31000015 	stw	r4,0(r6)
   49e48:	10c00117 	ldw	r3,4(r2)
   49e4c:	30c00115 	stw	r3,4(r6)
   49e50:	10c00217 	ldw	r3,8(r2)
   49e54:	11000117 	ldw	r4,4(r2)
   49e58:	29400117 	ldw	r5,4(r5)
   49e5c:	30c00215 	stw	r3,8(r6)
   49e60:	10c00317 	ldw	r3,12(r2)
   49e64:	2908703a 	and	r4,r5,r4
   49e68:	30c00315 	stw	r3,12(r6)
   49e6c:	10c00417 	ldw	r3,16(r2)
   49e70:	31000115 	stw	r4,4(r6)
   49e74:	3005883a 	mov	r2,r6
   49e78:	30c00415 	stw	r3,16(r6)
   49e7c:	f800283a 	ret
   49e80:	580f883a 	mov	r7,r11
   49e84:	0019883a 	mov	r12,zero
   49e88:	001b883a 	mov	r13,zero
   49e8c:	003f9f06 	br	49d0c <_fpadd_parts+0xa4>
   49e90:	0115c83a 	sub	r10,zero,r4
   49e94:	00c00fc4 	movi	r3,63
   49e98:	1abfda16 	blt	r3,r10,49e04 <_fpadd_parts+0x19c>
   49e9c:	003f8906 	br	49cc4 <_fpadd_parts+0x5c>
   49ea0:	627fb52e 	bgeu	r12,r9,49d78 <_fpadd_parts+0x110>
   49ea4:	003fc006 	br	49da8 <_fpadd_parts+0x140>
   49ea8:	6205c83a 	sub	r2,r12,r8
   49eac:	6099803a 	cmpltu	r12,r12,r2
   49eb0:	6a47c83a 	sub	r3,r13,r9
   49eb4:	1b07c83a 	sub	r3,r3,r12
   49eb8:	183f9d0e 	bge	r3,zero,49d30 <_fpadd_parts+0xc8>
   49ebc:	0085c83a 	sub	r2,zero,r2
   49ec0:	1008c03a 	cmpne	r4,r2,zero
   49ec4:	00c7c83a 	sub	r3,zero,r3
   49ec8:	1907c83a 	sub	r3,r3,r4
   49ecc:	01000044 	movi	r4,1
   49ed0:	31000115 	stw	r4,4(r6)
   49ed4:	31c00215 	stw	r7,8(r6)
   49ed8:	30800315 	stw	r2,12(r6)
   49edc:	30c00415 	stw	r3,16(r6)
   49ee0:	003f9706 	br	49d40 <_fpadd_parts+0xd8>
   49ee4:	203f8926 	beq	r4,zero,49d0c <_fpadd_parts+0xa4>
   49ee8:	50fff804 	addi	r3,r10,-32
   49eec:	3a8f883a 	add	r7,r7,r10
   49ef0:	18002316 	blt	r3,zero,49f80 <_fpadd_parts+0x318>
   49ef4:	68d6d83a 	srl	r11,r13,r3
   49ef8:	001d883a 	mov	r14,zero
   49efc:	18001c16 	blt	r3,zero,49f70 <_fpadd_parts+0x308>
   49f00:	01000044 	movi	r4,1
   49f04:	20c6983a 	sll	r3,r4,r3
   49f08:	0015883a 	mov	r10,zero
   49f0c:	513fffc4 	addi	r4,r10,-1
   49f10:	2295403a 	cmpgeu	r10,r4,r10
   49f14:	1a87c83a 	sub	r3,r3,r10
   49f18:	1b5a703a 	and	r13,r3,r13
   49f1c:	2318703a 	and	r12,r4,r12
   49f20:	6358b03a 	or	r12,r12,r13
   49f24:	6018c03a 	cmpne	r12,r12,zero
   49f28:	62d8b03a 	or	r12,r12,r11
   49f2c:	701b883a 	mov	r13,r14
   49f30:	003f7606 	br	49d0c <_fpadd_parts+0xa4>
   49f34:	4808907a 	slli	r4,r9,1
   49f38:	02c007c4 	movi	r11,31
   49f3c:	5a97c83a 	sub	r11,r11,r10
   49f40:	22c8983a 	sll	r4,r4,r11
   49f44:	4296d83a 	srl	r11,r8,r10
   49f48:	4a9cd83a 	srl	r14,r9,r10
   49f4c:	22d6b03a 	or	r11,r4,r11
   49f50:	003f6106 	br	49cd8 <_fpadd_parts+0x70>
   49f54:	00c00044 	movi	r3,1
   49f58:	1a94983a 	sll	r10,r3,r10
   49f5c:	0007883a 	mov	r3,zero
   49f60:	003f6106 	br	49ce8 <_fpadd_parts+0x80>
   49f64:	013fff84 	movi	r4,-2
   49f68:	21ff7c2e 	bgeu	r4,r7,49d5c <_fpadd_parts+0xf4>
   49f6c:	003f9106 	br	49db4 <_fpadd_parts+0x14c>
   49f70:	00c00044 	movi	r3,1
   49f74:	1a94983a 	sll	r10,r3,r10
   49f78:	0007883a 	mov	r3,zero
   49f7c:	003fe306 	br	49f0c <_fpadd_parts+0x2a4>
   49f80:	6816907a 	slli	r11,r13,1
   49f84:	010007c4 	movi	r4,31
   49f88:	2289c83a 	sub	r4,r4,r10
   49f8c:	5908983a 	sll	r4,r11,r4
   49f90:	6296d83a 	srl	r11,r12,r10
   49f94:	6a9cd83a 	srl	r14,r13,r10
   49f98:	22d6b03a 	or	r11,r4,r11
   49f9c:	003fd706 	br	49efc <_fpadd_parts+0x294>
   49fa0:	193f971e 	bne	r3,r4,49e00 <_fpadd_parts+0x198>
   49fa4:	11000117 	ldw	r4,4(r2)
   49fa8:	28c00117 	ldw	r3,4(r5)
   49fac:	20ff9426 	beq	r4,r3,49e00 <_fpadd_parts+0x198>
   49fb0:	00800174 	movhi	r2,5
   49fb4:	10b8ae04 	addi	r2,r2,-7496
   49fb8:	f800283a 	ret

00049fbc <__adddf3>:
   49fbc:	deffec04 	addi	sp,sp,-80
   49fc0:	d9001115 	stw	r4,68(sp)
   49fc4:	d9401215 	stw	r5,72(sp)
   49fc8:	d9001104 	addi	r4,sp,68
   49fcc:	d9400a04 	addi	r5,sp,40
   49fd0:	dfc01315 	stw	ra,76(sp)
   49fd4:	d9c01015 	stw	r7,64(sp)
   49fd8:	d9800f15 	stw	r6,60(sp)
   49fdc:	004aeb80 	call	4aeb8 <__unpack_d>
   49fe0:	d9000f04 	addi	r4,sp,60
   49fe4:	d9400504 	addi	r5,sp,20
   49fe8:	004aeb80 	call	4aeb8 <__unpack_d>
   49fec:	d9000a04 	addi	r4,sp,40
   49ff0:	d9400504 	addi	r5,sp,20
   49ff4:	d80d883a 	mov	r6,sp
   49ff8:	0049c680 	call	49c68 <_fpadd_parts>
   49ffc:	1009883a 	mov	r4,r2
   4a000:	004ac940 	call	4ac94 <__pack_d>
   4a004:	dfc01317 	ldw	ra,76(sp)
   4a008:	dec01404 	addi	sp,sp,80
   4a00c:	f800283a 	ret

0004a010 <__subdf3>:
   4a010:	deffec04 	addi	sp,sp,-80
   4a014:	d9001115 	stw	r4,68(sp)
   4a018:	d9401215 	stw	r5,72(sp)
   4a01c:	d9001104 	addi	r4,sp,68
   4a020:	d9400a04 	addi	r5,sp,40
   4a024:	dfc01315 	stw	ra,76(sp)
   4a028:	d9c01015 	stw	r7,64(sp)
   4a02c:	d9800f15 	stw	r6,60(sp)
   4a030:	004aeb80 	call	4aeb8 <__unpack_d>
   4a034:	d9000f04 	addi	r4,sp,60
   4a038:	d9400504 	addi	r5,sp,20
   4a03c:	004aeb80 	call	4aeb8 <__unpack_d>
   4a040:	d8800617 	ldw	r2,24(sp)
   4a044:	d9000a04 	addi	r4,sp,40
   4a048:	d9400504 	addi	r5,sp,20
   4a04c:	d80d883a 	mov	r6,sp
   4a050:	1080005c 	xori	r2,r2,1
   4a054:	d8800615 	stw	r2,24(sp)
   4a058:	0049c680 	call	49c68 <_fpadd_parts>
   4a05c:	1009883a 	mov	r4,r2
   4a060:	004ac940 	call	4ac94 <__pack_d>
   4a064:	dfc01317 	ldw	ra,76(sp)
   4a068:	dec01404 	addi	sp,sp,80
   4a06c:	f800283a 	ret

0004a070 <__muldf3>:
   4a070:	deffe404 	addi	sp,sp,-112
   4a074:	d9001115 	stw	r4,68(sp)
   4a078:	d9401215 	stw	r5,72(sp)
   4a07c:	d9001104 	addi	r4,sp,68
   4a080:	d9400a04 	addi	r5,sp,40
   4a084:	dfc01b15 	stw	ra,108(sp)
   4a088:	d9800f15 	stw	r6,60(sp)
   4a08c:	d9c01015 	stw	r7,64(sp)
   4a090:	ddc01a15 	stw	r23,104(sp)
   4a094:	dd801915 	stw	r22,100(sp)
   4a098:	dd401815 	stw	r21,96(sp)
   4a09c:	dd001715 	stw	r20,92(sp)
   4a0a0:	dcc01615 	stw	r19,88(sp)
   4a0a4:	dc801515 	stw	r18,84(sp)
   4a0a8:	dc401415 	stw	r17,80(sp)
   4a0ac:	dc001315 	stw	r16,76(sp)
   4a0b0:	004aeb80 	call	4aeb8 <__unpack_d>
   4a0b4:	d9000f04 	addi	r4,sp,60
   4a0b8:	d9400504 	addi	r5,sp,20
   4a0bc:	004aeb80 	call	4aeb8 <__unpack_d>
   4a0c0:	d8c00a17 	ldw	r3,40(sp)
   4a0c4:	00800044 	movi	r2,1
   4a0c8:	10c01136 	bltu	r2,r3,4a110 <__muldf3+0xa0>
   4a0cc:	d8c00b17 	ldw	r3,44(sp)
   4a0d0:	d8800617 	ldw	r2,24(sp)
   4a0d4:	d9000a04 	addi	r4,sp,40
   4a0d8:	1884c03a 	cmpne	r2,r3,r2
   4a0dc:	d8800b15 	stw	r2,44(sp)
   4a0e0:	004ac940 	call	4ac94 <__pack_d>
   4a0e4:	dfc01b17 	ldw	ra,108(sp)
   4a0e8:	ddc01a17 	ldw	r23,104(sp)
   4a0ec:	dd801917 	ldw	r22,100(sp)
   4a0f0:	dd401817 	ldw	r21,96(sp)
   4a0f4:	dd001717 	ldw	r20,92(sp)
   4a0f8:	dcc01617 	ldw	r19,88(sp)
   4a0fc:	dc801517 	ldw	r18,84(sp)
   4a100:	dc401417 	ldw	r17,80(sp)
   4a104:	dc001317 	ldw	r16,76(sp)
   4a108:	dec01c04 	addi	sp,sp,112
   4a10c:	f800283a 	ret
   4a110:	d9000517 	ldw	r4,20(sp)
   4a114:	11000636 	bltu	r2,r4,4a130 <__muldf3+0xc0>
   4a118:	d8800617 	ldw	r2,24(sp)
   4a11c:	d8c00b17 	ldw	r3,44(sp)
   4a120:	d9000504 	addi	r4,sp,20
   4a124:	1884c03a 	cmpne	r2,r3,r2
   4a128:	d8800615 	stw	r2,24(sp)
   4a12c:	003fec06 	br	4a0e0 <__muldf3+0x70>
   4a130:	00800104 	movi	r2,4
   4a134:	1880051e 	bne	r3,r2,4a14c <__muldf3+0xdc>
   4a138:	00800084 	movi	r2,2
   4a13c:	20bfe31e 	bne	r4,r2,4a0cc <__muldf3+0x5c>
   4a140:	01000174 	movhi	r4,5
   4a144:	2138ae04 	addi	r4,r4,-7496
   4a148:	003fe506 	br	4a0e0 <__muldf3+0x70>
   4a14c:	2080031e 	bne	r4,r2,4a15c <__muldf3+0xec>
   4a150:	00800084 	movi	r2,2
   4a154:	18bffa26 	beq	r3,r2,4a140 <__muldf3+0xd0>
   4a158:	003fef06 	br	4a118 <__muldf3+0xa8>
   4a15c:	00800084 	movi	r2,2
   4a160:	18bfda26 	beq	r3,r2,4a0cc <__muldf3+0x5c>
   4a164:	20bfec26 	beq	r4,r2,4a118 <__muldf3+0xa8>
   4a168:	dc000d17 	ldw	r16,52(sp)
   4a16c:	dd000817 	ldw	r20,32(sp)
   4a170:	dc800917 	ldw	r18,36(sp)
   4a174:	8009883a 	mov	r4,r16
   4a178:	000b883a 	mov	r5,zero
   4a17c:	a00d883a 	mov	r6,r20
   4a180:	000f883a 	mov	r7,zero
   4a184:	004aad80 	call	4aad8 <__muldi3>
   4a188:	dc400e17 	ldw	r17,56(sp)
   4a18c:	9009883a 	mov	r4,r18
   4a190:	800d883a 	mov	r6,r16
   4a194:	000b883a 	mov	r5,zero
   4a198:	000f883a 	mov	r7,zero
   4a19c:	102f883a 	mov	r23,r2
   4a1a0:	1827883a 	mov	r19,r3
   4a1a4:	004aad80 	call	4aad8 <__muldi3>
   4a1a8:	900d883a 	mov	r6,r18
   4a1ac:	8809883a 	mov	r4,r17
   4a1b0:	000b883a 	mov	r5,zero
   4a1b4:	000f883a 	mov	r7,zero
   4a1b8:	102b883a 	mov	r21,r2
   4a1bc:	1821883a 	mov	r16,r3
   4a1c0:	004aad80 	call	4aad8 <__muldi3>
   4a1c4:	8809883a 	mov	r4,r17
   4a1c8:	000b883a 	mov	r5,zero
   4a1cc:	a00d883a 	mov	r6,r20
   4a1d0:	000f883a 	mov	r7,zero
   4a1d4:	102d883a 	mov	r22,r2
   4a1d8:	1825883a 	mov	r18,r3
   4a1dc:	004aad80 	call	4aad8 <__muldi3>
   4a1e0:	154b883a 	add	r5,r2,r21
   4a1e4:	2889803a 	cmpltu	r4,r5,r2
   4a1e8:	1c07883a 	add	r3,r3,r16
   4a1ec:	20c9883a 	add	r4,r4,r3
   4a1f0:	24004b36 	bltu	r4,r16,4a320 <__muldf3+0x2b0>
   4a1f4:	8100011e 	bne	r16,r4,4a1fc <__muldf3+0x18c>
   4a1f8:	2d404936 	bltu	r5,r21,4a320 <__muldf3+0x2b0>
   4a1fc:	0011883a 	mov	r8,zero
   4a200:	0007883a 	mov	r3,zero
   4a204:	2ccb883a 	add	r5,r5,r19
   4a208:	b80d883a 	mov	r6,r23
   4a20c:	2cc0012e 	bgeu	r5,r19,4a214 <__muldf3+0x1a4>
   4a210:	02000044 	movi	r8,1
   4a214:	258f883a 	add	r7,r4,r22
   4a218:	3909803a 	cmpltu	r4,r7,r4
   4a21c:	da400c17 	ldw	r9,48(sp)
   4a220:	2489883a 	add	r4,r4,r18
   4a224:	d8800717 	ldw	r2,28(sp)
   4a228:	20c9883a 	add	r4,r4,r3
   4a22c:	da800b17 	ldw	r10,44(sp)
   4a230:	d8c00617 	ldw	r3,24(sp)
   4a234:	3a11883a 	add	r8,r7,r8
   4a238:	4885883a 	add	r2,r9,r2
   4a23c:	50c6c03a 	cmpne	r3,r10,r3
   4a240:	41cf803a 	cmpltu	r7,r8,r7
   4a244:	12400104 	addi	r9,r2,4
   4a248:	d8c00115 	stw	r3,4(sp)
   4a24c:	3909883a 	add	r4,r7,r4
   4a250:	da400215 	stw	r9,8(sp)
   4a254:	03480034 	movhi	r13,8192
   4a258:	6b7fffc4 	addi	r13,r13,-1
   4a25c:	4007883a 	mov	r3,r8
   4a260:	6900102e 	bgeu	r13,r4,4a2a4 <__muldf3+0x234>
   4a264:	10800144 	addi	r2,r2,5
   4a268:	180ed07a 	srli	r7,r3,1
   4a26c:	18c0004c 	andi	r3,r3,1
   4a270:	201097fa 	slli	r8,r4,31
   4a274:	281697fa 	slli	r11,r5,31
   4a278:	2008d07a 	srli	r4,r4,1
   4a27c:	3014d07a 	srli	r10,r6,1
   4a280:	2812d07a 	srli	r9,r5,1
   4a284:	1019883a 	mov	r12,r2
   4a288:	18000226 	beq	r3,zero,4a294 <__muldf3+0x224>
   4a28c:	5a8cb03a 	or	r6,r11,r10
   4a290:	49600034 	orhi	r5,r9,32768
   4a294:	41c6b03a 	or	r3,r8,r7
   4a298:	10800044 	addi	r2,r2,1
   4a29c:	693ff236 	bltu	r13,r4,4a268 <__muldf3+0x1f8>
   4a2a0:	db000215 	stw	r12,8(sp)
   4a2a4:	03440034 	movhi	r13,4096
   4a2a8:	6b7fffc4 	addi	r13,r13,-1
   4a2ac:	69001336 	bltu	r13,r4,4a2fc <__muldf3+0x28c>
   4a2b0:	d8800217 	ldw	r2,8(sp)
   4a2b4:	10bfffc4 	addi	r2,r2,-1
   4a2b8:	18d3883a 	add	r9,r3,r3
   4a2bc:	48c7803a 	cmpltu	r3,r9,r3
   4a2c0:	2109883a 	add	r4,r4,r4
   4a2c4:	190f883a 	add	r7,r3,r4
   4a2c8:	3191883a 	add	r8,r6,r6
   4a2cc:	4197803a 	cmpltu	r11,r8,r6
   4a2d0:	2955883a 	add	r10,r5,r5
   4a2d4:	1019883a 	mov	r12,r2
   4a2d8:	4807883a 	mov	r3,r9
   4a2dc:	3809883a 	mov	r4,r7
   4a2e0:	2800010e 	bge	r5,zero,4a2e8 <__muldf3+0x278>
   4a2e4:	48c00054 	ori	r3,r9,1
   4a2e8:	400d883a 	mov	r6,r8
   4a2ec:	5a8b883a 	add	r5,r11,r10
   4a2f0:	10bfffc4 	addi	r2,r2,-1
   4a2f4:	69fff02e 	bgeu	r13,r7,4a2b8 <__muldf3+0x248>
   4a2f8:	db000215 	stw	r12,8(sp)
   4a2fc:	18803fcc 	andi	r2,r3,255
   4a300:	01c02004 	movi	r7,128
   4a304:	11c00926 	beq	r2,r7,4a32c <__muldf3+0x2bc>
   4a308:	008000c4 	movi	r2,3
   4a30c:	d9000415 	stw	r4,16(sp)
   4a310:	d8c00315 	stw	r3,12(sp)
   4a314:	d8800015 	stw	r2,0(sp)
   4a318:	d809883a 	mov	r4,sp
   4a31c:	003f7006 	br	4a0e0 <__muldf3+0x70>
   4a320:	0011883a 	mov	r8,zero
   4a324:	00c00044 	movi	r3,1
   4a328:	003fb606 	br	4a204 <__muldf3+0x194>
   4a32c:	19c0400c 	andi	r7,r3,256
   4a330:	383ff51e 	bne	r7,zero,4a308 <__muldf3+0x298>
   4a334:	314ab03a 	or	r5,r6,r5
   4a338:	283ff326 	beq	r5,zero,4a308 <__muldf3+0x298>
   4a33c:	1885883a 	add	r2,r3,r2
   4a340:	10cb803a 	cmpltu	r5,r2,r3
   4a344:	00ffc004 	movi	r3,-256
   4a348:	10c6703a 	and	r3,r2,r3
   4a34c:	2909883a 	add	r4,r5,r4
   4a350:	003fed06 	br	4a308 <__muldf3+0x298>

0004a354 <__divdf3>:
   4a354:	defff104 	addi	sp,sp,-60
   4a358:	d9000c15 	stw	r4,48(sp)
   4a35c:	d9400d15 	stw	r5,52(sp)
   4a360:	d9000c04 	addi	r4,sp,48
   4a364:	d9400504 	addi	r5,sp,20
   4a368:	dfc00e15 	stw	ra,56(sp)
   4a36c:	d9800a15 	stw	r6,40(sp)
   4a370:	d9c00b15 	stw	r7,44(sp)
   4a374:	004aeb80 	call	4aeb8 <__unpack_d>
   4a378:	d9000a04 	addi	r4,sp,40
   4a37c:	d80b883a 	mov	r5,sp
   4a380:	004aeb80 	call	4aeb8 <__unpack_d>
   4a384:	d8c00517 	ldw	r3,20(sp)
   4a388:	00800044 	movi	r2,1
   4a38c:	10c00536 	bltu	r2,r3,4a3a4 <__divdf3+0x50>
   4a390:	d9000504 	addi	r4,sp,20
   4a394:	004ac940 	call	4ac94 <__pack_d>
   4a398:	dfc00e17 	ldw	ra,56(sp)
   4a39c:	dec00f04 	addi	sp,sp,60
   4a3a0:	f800283a 	ret
   4a3a4:	d9000017 	ldw	r4,0(sp)
   4a3a8:	11000536 	bltu	r2,r4,4a3c0 <__divdf3+0x6c>
   4a3ac:	d809883a 	mov	r4,sp
   4a3b0:	004ac940 	call	4ac94 <__pack_d>
   4a3b4:	dfc00e17 	ldw	ra,56(sp)
   4a3b8:	dec00f04 	addi	sp,sp,60
   4a3bc:	f800283a 	ret
   4a3c0:	d9800617 	ldw	r6,24(sp)
   4a3c4:	d9400117 	ldw	r5,4(sp)
   4a3c8:	00800104 	movi	r2,4
   4a3cc:	314af03a 	xor	r5,r6,r5
   4a3d0:	d9400615 	stw	r5,24(sp)
   4a3d4:	18800226 	beq	r3,r2,4a3e0 <__divdf3+0x8c>
   4a3d8:	01400084 	movi	r5,2
   4a3dc:	1940041e 	bne	r3,r5,4a3f0 <__divdf3+0x9c>
   4a3e0:	193feb1e 	bne	r3,r4,4a390 <__divdf3+0x3c>
   4a3e4:	01000174 	movhi	r4,5
   4a3e8:	2138ae04 	addi	r4,r4,-7496
   4a3ec:	003fe906 	br	4a394 <__divdf3+0x40>
   4a3f0:	20803326 	beq	r4,r2,4a4c0 <__divdf3+0x16c>
   4a3f4:	21403726 	beq	r4,r5,4a4d4 <__divdf3+0x180>
   4a3f8:	d8800217 	ldw	r2,8(sp)
   4a3fc:	d9000717 	ldw	r4,28(sp)
   4a400:	d8c00917 	ldw	r3,36(sp)
   4a404:	da000417 	ldw	r8,16(sp)
   4a408:	2089c83a 	sub	r4,r4,r2
   4a40c:	d9000715 	stw	r4,28(sp)
   4a410:	d8800817 	ldw	r2,32(sp)
   4a414:	dbc00317 	ldw	r15,12(sp)
   4a418:	1a000236 	bltu	r3,r8,4a424 <__divdf3+0xd0>
   4a41c:	40c0081e 	bne	r8,r3,4a440 <__divdf3+0xec>
   4a420:	13c0072e 	bgeu	r2,r15,4a440 <__divdf3+0xec>
   4a424:	108b883a 	add	r5,r2,r2
   4a428:	288d803a 	cmpltu	r6,r5,r2
   4a42c:	18c7883a 	add	r3,r3,r3
   4a430:	213fffc4 	addi	r4,r4,-1
   4a434:	2805883a 	mov	r2,r5
   4a438:	30c7883a 	add	r3,r6,r3
   4a43c:	d9000715 	stw	r4,28(sp)
   4a440:	01400f44 	movi	r5,61
   4a444:	000f883a 	mov	r7,zero
   4a448:	01040034 	movhi	r4,4096
   4a44c:	0019883a 	mov	r12,zero
   4a450:	001b883a 	mov	r13,zero
   4a454:	201697fa 	slli	r11,r4,31
   4a458:	3814d07a 	srli	r10,r7,1
   4a45c:	297fffc4 	addi	r5,r5,-1
   4a460:	1a000936 	bltu	r3,r8,4a488 <__divdf3+0x134>
   4a464:	13cdc83a 	sub	r6,r2,r15
   4a468:	1193803a 	cmpltu	r9,r2,r6
   4a46c:	1a1dc83a 	sub	r14,r3,r8
   4a470:	40c0011e 	bne	r8,r3,4a478 <__divdf3+0x124>
   4a474:	13c00436 	bltu	r2,r15,4a488 <__divdf3+0x134>
   4a478:	3005883a 	mov	r2,r6
   4a47c:	7247c83a 	sub	r3,r14,r9
   4a480:	61d8b03a 	or	r12,r12,r7
   4a484:	691ab03a 	or	r13,r13,r4
   4a488:	108d883a 	add	r6,r2,r2
   4a48c:	3093803a 	cmpltu	r9,r6,r2
   4a490:	18c7883a 	add	r3,r3,r3
   4a494:	5a8eb03a 	or	r7,r11,r10
   4a498:	2008d07a 	srli	r4,r4,1
   4a49c:	3005883a 	mov	r2,r6
   4a4a0:	48c7883a 	add	r3,r9,r3
   4a4a4:	283feb1e 	bne	r5,zero,4a454 <__divdf3+0x100>
   4a4a8:	61003fcc 	andi	r4,r12,255
   4a4ac:	01402004 	movi	r5,128
   4a4b0:	21400b26 	beq	r4,r5,4a4e0 <__divdf3+0x18c>
   4a4b4:	db000815 	stw	r12,32(sp)
   4a4b8:	db400915 	stw	r13,36(sp)
   4a4bc:	003fb406 	br	4a390 <__divdf3+0x3c>
   4a4c0:	d8000815 	stw	zero,32(sp)
   4a4c4:	d8000915 	stw	zero,36(sp)
   4a4c8:	d8000715 	stw	zero,28(sp)
   4a4cc:	d9000504 	addi	r4,sp,20
   4a4d0:	003fb006 	br	4a394 <__divdf3+0x40>
   4a4d4:	d8800515 	stw	r2,20(sp)
   4a4d8:	d9000504 	addi	r4,sp,20
   4a4dc:	003fad06 	br	4a394 <__divdf3+0x40>
   4a4e0:	6140400c 	andi	r5,r12,256
   4a4e4:	283ff31e 	bne	r5,zero,4a4b4 <__divdf3+0x160>
   4a4e8:	30c4b03a 	or	r2,r6,r3
   4a4ec:	103ff126 	beq	r2,zero,4a4b4 <__divdf3+0x160>
   4a4f0:	6109883a 	add	r4,r12,r4
   4a4f4:	2305803a 	cmpltu	r2,r4,r12
   4a4f8:	033fc004 	movi	r12,-256
   4a4fc:	2318703a 	and	r12,r4,r12
   4a500:	135b883a 	add	r13,r2,r13
   4a504:	003feb06 	br	4a4b4 <__divdf3+0x160>

0004a508 <__eqdf2>:
   4a508:	defff104 	addi	sp,sp,-60
   4a50c:	d9000c15 	stw	r4,48(sp)
   4a510:	d9400d15 	stw	r5,52(sp)
   4a514:	d9000c04 	addi	r4,sp,48
   4a518:	d9400504 	addi	r5,sp,20
   4a51c:	dfc00e15 	stw	ra,56(sp)
   4a520:	d9800a15 	stw	r6,40(sp)
   4a524:	d9c00b15 	stw	r7,44(sp)
   4a528:	004aeb80 	call	4aeb8 <__unpack_d>
   4a52c:	d9000a04 	addi	r4,sp,40
   4a530:	d80b883a 	mov	r5,sp
   4a534:	004aeb80 	call	4aeb8 <__unpack_d>
   4a538:	d8c00517 	ldw	r3,20(sp)
   4a53c:	00800044 	movi	r2,1
   4a540:	10c0052e 	bgeu	r2,r3,4a558 <__eqdf2+0x50>
   4a544:	d8c00017 	ldw	r3,0(sp)
   4a548:	10c0032e 	bgeu	r2,r3,4a558 <__eqdf2+0x50>
   4a54c:	d9000504 	addi	r4,sp,20
   4a550:	d80b883a 	mov	r5,sp
   4a554:	004afbc0 	call	4afbc <__fpcmp_parts_d>
   4a558:	dfc00e17 	ldw	ra,56(sp)
   4a55c:	dec00f04 	addi	sp,sp,60
   4a560:	f800283a 	ret

0004a564 <__nedf2>:
   4a564:	defff104 	addi	sp,sp,-60
   4a568:	d9000c15 	stw	r4,48(sp)
   4a56c:	d9400d15 	stw	r5,52(sp)
   4a570:	d9000c04 	addi	r4,sp,48
   4a574:	d9400504 	addi	r5,sp,20
   4a578:	dfc00e15 	stw	ra,56(sp)
   4a57c:	d9800a15 	stw	r6,40(sp)
   4a580:	d9c00b15 	stw	r7,44(sp)
   4a584:	004aeb80 	call	4aeb8 <__unpack_d>
   4a588:	d9000a04 	addi	r4,sp,40
   4a58c:	d80b883a 	mov	r5,sp
   4a590:	004aeb80 	call	4aeb8 <__unpack_d>
   4a594:	d8c00517 	ldw	r3,20(sp)
   4a598:	00800044 	movi	r2,1
   4a59c:	10c0052e 	bgeu	r2,r3,4a5b4 <__nedf2+0x50>
   4a5a0:	d8c00017 	ldw	r3,0(sp)
   4a5a4:	10c0032e 	bgeu	r2,r3,4a5b4 <__nedf2+0x50>
   4a5a8:	d9000504 	addi	r4,sp,20
   4a5ac:	d80b883a 	mov	r5,sp
   4a5b0:	004afbc0 	call	4afbc <__fpcmp_parts_d>
   4a5b4:	dfc00e17 	ldw	ra,56(sp)
   4a5b8:	dec00f04 	addi	sp,sp,60
   4a5bc:	f800283a 	ret

0004a5c0 <__gtdf2>:
   4a5c0:	defff104 	addi	sp,sp,-60
   4a5c4:	d9000c15 	stw	r4,48(sp)
   4a5c8:	d9400d15 	stw	r5,52(sp)
   4a5cc:	d9000c04 	addi	r4,sp,48
   4a5d0:	d9400504 	addi	r5,sp,20
   4a5d4:	dfc00e15 	stw	ra,56(sp)
   4a5d8:	d9800a15 	stw	r6,40(sp)
   4a5dc:	d9c00b15 	stw	r7,44(sp)
   4a5e0:	004aeb80 	call	4aeb8 <__unpack_d>
   4a5e4:	d9000a04 	addi	r4,sp,40
   4a5e8:	d80b883a 	mov	r5,sp
   4a5ec:	004aeb80 	call	4aeb8 <__unpack_d>
   4a5f0:	d8c00517 	ldw	r3,20(sp)
   4a5f4:	00800044 	movi	r2,1
   4a5f8:	10c0082e 	bgeu	r2,r3,4a61c <__gtdf2+0x5c>
   4a5fc:	d8c00017 	ldw	r3,0(sp)
   4a600:	10c0062e 	bgeu	r2,r3,4a61c <__gtdf2+0x5c>
   4a604:	d9000504 	addi	r4,sp,20
   4a608:	d80b883a 	mov	r5,sp
   4a60c:	004afbc0 	call	4afbc <__fpcmp_parts_d>
   4a610:	dfc00e17 	ldw	ra,56(sp)
   4a614:	dec00f04 	addi	sp,sp,60
   4a618:	f800283a 	ret
   4a61c:	00bfffc4 	movi	r2,-1
   4a620:	003ffb06 	br	4a610 <__gtdf2+0x50>

0004a624 <__gedf2>:
   4a624:	defff104 	addi	sp,sp,-60
   4a628:	d9000c15 	stw	r4,48(sp)
   4a62c:	d9400d15 	stw	r5,52(sp)
   4a630:	d9000c04 	addi	r4,sp,48
   4a634:	d9400504 	addi	r5,sp,20
   4a638:	dfc00e15 	stw	ra,56(sp)
   4a63c:	d9800a15 	stw	r6,40(sp)
   4a640:	d9c00b15 	stw	r7,44(sp)
   4a644:	004aeb80 	call	4aeb8 <__unpack_d>
   4a648:	d9000a04 	addi	r4,sp,40
   4a64c:	d80b883a 	mov	r5,sp
   4a650:	004aeb80 	call	4aeb8 <__unpack_d>
   4a654:	d8c00517 	ldw	r3,20(sp)
   4a658:	00800044 	movi	r2,1
   4a65c:	10c0082e 	bgeu	r2,r3,4a680 <__gedf2+0x5c>
   4a660:	d8c00017 	ldw	r3,0(sp)
   4a664:	10c0062e 	bgeu	r2,r3,4a680 <__gedf2+0x5c>
   4a668:	d9000504 	addi	r4,sp,20
   4a66c:	d80b883a 	mov	r5,sp
   4a670:	004afbc0 	call	4afbc <__fpcmp_parts_d>
   4a674:	dfc00e17 	ldw	ra,56(sp)
   4a678:	dec00f04 	addi	sp,sp,60
   4a67c:	f800283a 	ret
   4a680:	00bfffc4 	movi	r2,-1
   4a684:	003ffb06 	br	4a674 <__gedf2+0x50>

0004a688 <__ltdf2>:
   4a688:	defff104 	addi	sp,sp,-60
   4a68c:	d9000c15 	stw	r4,48(sp)
   4a690:	d9400d15 	stw	r5,52(sp)
   4a694:	d9000c04 	addi	r4,sp,48
   4a698:	d9400504 	addi	r5,sp,20
   4a69c:	dfc00e15 	stw	ra,56(sp)
   4a6a0:	d9800a15 	stw	r6,40(sp)
   4a6a4:	d9c00b15 	stw	r7,44(sp)
   4a6a8:	004aeb80 	call	4aeb8 <__unpack_d>
   4a6ac:	d9000a04 	addi	r4,sp,40
   4a6b0:	d80b883a 	mov	r5,sp
   4a6b4:	004aeb80 	call	4aeb8 <__unpack_d>
   4a6b8:	d8c00517 	ldw	r3,20(sp)
   4a6bc:	00800044 	movi	r2,1
   4a6c0:	10c0052e 	bgeu	r2,r3,4a6d8 <__ltdf2+0x50>
   4a6c4:	d8c00017 	ldw	r3,0(sp)
   4a6c8:	10c0032e 	bgeu	r2,r3,4a6d8 <__ltdf2+0x50>
   4a6cc:	d9000504 	addi	r4,sp,20
   4a6d0:	d80b883a 	mov	r5,sp
   4a6d4:	004afbc0 	call	4afbc <__fpcmp_parts_d>
   4a6d8:	dfc00e17 	ldw	ra,56(sp)
   4a6dc:	dec00f04 	addi	sp,sp,60
   4a6e0:	f800283a 	ret

0004a6e4 <__floatsidf>:
   4a6e4:	2004d7fa 	srli	r2,r4,31
   4a6e8:	defff904 	addi	sp,sp,-28
   4a6ec:	00c000c4 	movi	r3,3
   4a6f0:	dfc00615 	stw	ra,24(sp)
   4a6f4:	dc000515 	stw	r16,20(sp)
   4a6f8:	d8c00015 	stw	r3,0(sp)
   4a6fc:	d8800115 	stw	r2,4(sp)
   4a700:	2000081e 	bne	r4,zero,4a724 <__floatsidf+0x40>
   4a704:	00800084 	movi	r2,2
   4a708:	d8800015 	stw	r2,0(sp)
   4a70c:	d809883a 	mov	r4,sp
   4a710:	004ac940 	call	4ac94 <__pack_d>
   4a714:	dfc00617 	ldw	ra,24(sp)
   4a718:	dc000517 	ldw	r16,20(sp)
   4a71c:	dec00704 	addi	sp,sp,28
   4a720:	f800283a 	ret
   4a724:	00c00f04 	movi	r3,60
   4a728:	d8c00215 	stw	r3,8(sp)
   4a72c:	10000f1e 	bne	r2,zero,4a76c <__floatsidf+0x88>
   4a730:	2021883a 	mov	r16,r4
   4a734:	8009883a 	mov	r4,r16
   4a738:	004abe80 	call	4abe8 <__clzsi2>
   4a73c:	11000744 	addi	r4,r2,29
   4a740:	0100110e 	bge	zero,r4,4a788 <__floatsidf+0xa4>
   4a744:	10ffff44 	addi	r3,r2,-3
   4a748:	18001216 	blt	r3,zero,4a794 <__floatsidf+0xb0>
   4a74c:	80c6983a 	sll	r3,r16,r3
   4a750:	0009883a 	mov	r4,zero
   4a754:	014007c4 	movi	r5,31
   4a758:	2885c83a 	sub	r2,r5,r2
   4a75c:	d9000315 	stw	r4,12(sp)
   4a760:	d8c00415 	stw	r3,16(sp)
   4a764:	d8800215 	stw	r2,8(sp)
   4a768:	003fe806 	br	4a70c <__floatsidf+0x28>
   4a76c:	00a00034 	movhi	r2,32768
   4a770:	20800e26 	beq	r4,r2,4a7ac <__floatsidf+0xc8>
   4a774:	0121c83a 	sub	r16,zero,r4
   4a778:	8009883a 	mov	r4,r16
   4a77c:	004abe80 	call	4abe8 <__clzsi2>
   4a780:	11000744 	addi	r4,r2,29
   4a784:	013fef16 	blt	zero,r4,4a744 <__floatsidf+0x60>
   4a788:	dc000315 	stw	r16,12(sp)
   4a78c:	d8000415 	stw	zero,16(sp)
   4a790:	003fde06 	br	4a70c <__floatsidf+0x28>
   4a794:	800ad07a 	srli	r5,r16,1
   4a798:	00c007c4 	movi	r3,31
   4a79c:	1907c83a 	sub	r3,r3,r4
   4a7a0:	28c6d83a 	srl	r3,r5,r3
   4a7a4:	8108983a 	sll	r4,r16,r4
   4a7a8:	003fea06 	br	4a754 <__floatsidf+0x70>
   4a7ac:	0005883a 	mov	r2,zero
   4a7b0:	00f07834 	movhi	r3,49632
   4a7b4:	003fd706 	br	4a714 <__floatsidf+0x30>

0004a7b8 <__fixdfsi>:
   4a7b8:	defff804 	addi	sp,sp,-32
   4a7bc:	d9000515 	stw	r4,20(sp)
   4a7c0:	d9400615 	stw	r5,24(sp)
   4a7c4:	d9000504 	addi	r4,sp,20
   4a7c8:	d80b883a 	mov	r5,sp
   4a7cc:	dfc00715 	stw	ra,28(sp)
   4a7d0:	004aeb80 	call	4aeb8 <__unpack_d>
   4a7d4:	d8800017 	ldw	r2,0(sp)
   4a7d8:	00c00084 	movi	r3,2
   4a7dc:	10c01c26 	beq	r2,r3,4a850 <__fixdfsi+0x98>
   4a7e0:	00c00044 	movi	r3,1
   4a7e4:	18801a2e 	bgeu	r3,r2,4a850 <__fixdfsi+0x98>
   4a7e8:	00c00104 	movi	r3,4
   4a7ec:	10c01126 	beq	r2,r3,4a834 <__fixdfsi+0x7c>
   4a7f0:	d8800217 	ldw	r2,8(sp)
   4a7f4:	10001616 	blt	r2,zero,4a850 <__fixdfsi+0x98>
   4a7f8:	00c00784 	movi	r3,30
   4a7fc:	18800d16 	blt	r3,r2,4a834 <__fixdfsi+0x7c>
   4a800:	00c00f04 	movi	r3,60
   4a804:	1885c83a 	sub	r2,r3,r2
   4a808:	10fff804 	addi	r3,r2,-32
   4a80c:	d9400317 	ldw	r5,12(sp)
   4a810:	d9000417 	ldw	r4,16(sp)
   4a814:	18001616 	blt	r3,zero,4a870 <__fixdfsi+0xb8>
   4a818:	20c4d83a 	srl	r2,r4,r3
   4a81c:	d8c00117 	ldw	r3,4(sp)
   4a820:	18000126 	beq	r3,zero,4a828 <__fixdfsi+0x70>
   4a824:	0085c83a 	sub	r2,zero,r2
   4a828:	dfc00717 	ldw	ra,28(sp)
   4a82c:	dec00804 	addi	sp,sp,32
   4a830:	f800283a 	ret
   4a834:	d8800117 	ldw	r2,4(sp)
   4a838:	1000091e 	bne	r2,zero,4a860 <__fixdfsi+0xa8>
   4a83c:	00a00034 	movhi	r2,32768
   4a840:	10bfffc4 	addi	r2,r2,-1
   4a844:	dfc00717 	ldw	ra,28(sp)
   4a848:	dec00804 	addi	sp,sp,32
   4a84c:	f800283a 	ret
   4a850:	0005883a 	mov	r2,zero
   4a854:	dfc00717 	ldw	ra,28(sp)
   4a858:	dec00804 	addi	sp,sp,32
   4a85c:	f800283a 	ret
   4a860:	00a00034 	movhi	r2,32768
   4a864:	dfc00717 	ldw	ra,28(sp)
   4a868:	dec00804 	addi	sp,sp,32
   4a86c:	f800283a 	ret
   4a870:	2008907a 	slli	r4,r4,1
   4a874:	018007c4 	movi	r6,31
   4a878:	308dc83a 	sub	r6,r6,r2
   4a87c:	2188983a 	sll	r4,r4,r6
   4a880:	2884d83a 	srl	r2,r5,r2
   4a884:	2084b03a 	or	r2,r4,r2
   4a888:	003fe406 	br	4a81c <__fixdfsi+0x64>

0004a88c <__floatunsidf>:
   4a88c:	defff904 	addi	sp,sp,-28
   4a890:	dc000515 	stw	r16,20(sp)
   4a894:	dfc00615 	stw	ra,24(sp)
   4a898:	d8000115 	stw	zero,4(sp)
   4a89c:	2021883a 	mov	r16,r4
   4a8a0:	20001726 	beq	r4,zero,4a900 <__floatunsidf+0x74>
   4a8a4:	008000c4 	movi	r2,3
   4a8a8:	d8800015 	stw	r2,0(sp)
   4a8ac:	00800f04 	movi	r2,60
   4a8b0:	d8800215 	stw	r2,8(sp)
   4a8b4:	004abe80 	call	4abe8 <__clzsi2>
   4a8b8:	10c00744 	addi	r3,r2,29
   4a8bc:	18001816 	blt	r3,zero,4a920 <__floatunsidf+0x94>
   4a8c0:	18002d26 	beq	r3,zero,4a978 <__floatunsidf+0xec>
   4a8c4:	113fff44 	addi	r4,r2,-3
   4a8c8:	20002e16 	blt	r4,zero,4a984 <__floatunsidf+0xf8>
   4a8cc:	8108983a 	sll	r4,r16,r4
   4a8d0:	0021883a 	mov	r16,zero
   4a8d4:	014007c4 	movi	r5,31
   4a8d8:	2885c83a 	sub	r2,r5,r2
   4a8dc:	dc000315 	stw	r16,12(sp)
   4a8e0:	d9000415 	stw	r4,16(sp)
   4a8e4:	d8800215 	stw	r2,8(sp)
   4a8e8:	d809883a 	mov	r4,sp
   4a8ec:	004ac940 	call	4ac94 <__pack_d>
   4a8f0:	dfc00617 	ldw	ra,24(sp)
   4a8f4:	dc000517 	ldw	r16,20(sp)
   4a8f8:	dec00704 	addi	sp,sp,28
   4a8fc:	f800283a 	ret
   4a900:	00800084 	movi	r2,2
   4a904:	d809883a 	mov	r4,sp
   4a908:	d8800015 	stw	r2,0(sp)
   4a90c:	004ac940 	call	4ac94 <__pack_d>
   4a910:	dfc00617 	ldw	ra,24(sp)
   4a914:	dc000517 	ldw	r16,20(sp)
   4a918:	dec00704 	addi	sp,sp,28
   4a91c:	f800283a 	ret
   4a920:	00c7c83a 	sub	r3,zero,r3
   4a924:	193ff804 	addi	r4,r3,-32
   4a928:	20001c16 	blt	r4,zero,4a99c <__floatunsidf+0x110>
   4a92c:	000b883a 	mov	r5,zero
   4a930:	2009d7fa 	srai	r4,r4,31
   4a934:	80c6d83a 	srl	r3,r16,r3
   4a938:	297fffc4 	addi	r5,r5,-1
   4a93c:	2c20703a 	and	r16,r5,r16
   4a940:	8020c03a 	cmpne	r16,r16,zero
   4a944:	1906703a 	and	r3,r3,r4
   4a948:	010007c4 	movi	r4,31
   4a94c:	80c6b03a 	or	r3,r16,r3
   4a950:	2085c83a 	sub	r2,r4,r2
   4a954:	d809883a 	mov	r4,sp
   4a958:	d8c00315 	stw	r3,12(sp)
   4a95c:	d8000415 	stw	zero,16(sp)
   4a960:	d8800215 	stw	r2,8(sp)
   4a964:	004ac940 	call	4ac94 <__pack_d>
   4a968:	dfc00617 	ldw	ra,24(sp)
   4a96c:	dc000517 	ldw	r16,20(sp)
   4a970:	dec00704 	addi	sp,sp,28
   4a974:	f800283a 	ret
   4a978:	dc000315 	stw	r16,12(sp)
   4a97c:	d8000415 	stw	zero,16(sp)
   4a980:	003fd906 	br	4a8e8 <__floatunsidf+0x5c>
   4a984:	800ad07a 	srli	r5,r16,1
   4a988:	010007c4 	movi	r4,31
   4a98c:	20c9c83a 	sub	r4,r4,r3
   4a990:	2908d83a 	srl	r4,r5,r4
   4a994:	80e0983a 	sll	r16,r16,r3
   4a998:	003fce06 	br	4a8d4 <__floatunsidf+0x48>
   4a99c:	01400044 	movi	r5,1
   4a9a0:	28ca983a 	sll	r5,r5,r3
   4a9a4:	003fe206 	br	4a930 <__floatunsidf+0xa4>

0004a9a8 <udivmodsi4>:
   4a9a8:	2005883a 	mov	r2,r4
   4a9ac:	2900182e 	bgeu	r5,r4,4aa10 <udivmodsi4+0x68>
   4a9b0:	28001716 	blt	r5,zero,4aa10 <udivmodsi4+0x68>
   4a9b4:	01000804 	movi	r4,32
   4a9b8:	00c00044 	movi	r3,1
   4a9bc:	00000206 	br	4a9c8 <udivmodsi4+0x20>
   4a9c0:	20001126 	beq	r4,zero,4aa08 <udivmodsi4+0x60>
   4a9c4:	28000516 	blt	r5,zero,4a9dc <udivmodsi4+0x34>
   4a9c8:	294b883a 	add	r5,r5,r5
   4a9cc:	213fffc4 	addi	r4,r4,-1
   4a9d0:	18c7883a 	add	r3,r3,r3
   4a9d4:	28bffa36 	bltu	r5,r2,4a9c0 <udivmodsi4+0x18>
   4a9d8:	18000b26 	beq	r3,zero,4aa08 <udivmodsi4+0x60>
   4a9dc:	0009883a 	mov	r4,zero
   4a9e0:	11400236 	bltu	r2,r5,4a9ec <udivmodsi4+0x44>
   4a9e4:	1145c83a 	sub	r2,r2,r5
   4a9e8:	20c8b03a 	or	r4,r4,r3
   4a9ec:	1806d07a 	srli	r3,r3,1
   4a9f0:	280ad07a 	srli	r5,r5,1
   4a9f4:	183ffa1e 	bne	r3,zero,4a9e0 <udivmodsi4+0x38>
   4a9f8:	3000021e 	bne	r6,zero,4aa04 <udivmodsi4+0x5c>
   4a9fc:	2005883a 	mov	r2,r4
   4aa00:	f800283a 	ret
   4aa04:	f800283a 	ret
   4aa08:	0009883a 	mov	r4,zero
   4aa0c:	003ffa06 	br	4a9f8 <udivmodsi4+0x50>
   4aa10:	00c00044 	movi	r3,1
   4aa14:	0009883a 	mov	r4,zero
   4aa18:	003ff106 	br	4a9e0 <udivmodsi4+0x38>

0004aa1c <__divsi3>:
   4aa1c:	defffe04 	addi	sp,sp,-8
   4aa20:	dfc00115 	stw	ra,4(sp)
   4aa24:	dc000015 	stw	r16,0(sp)
   4aa28:	20000a16 	blt	r4,zero,4aa54 <__divsi3+0x38>
   4aa2c:	0021883a 	mov	r16,zero
   4aa30:	28000b16 	blt	r5,zero,4aa60 <__divsi3+0x44>
   4aa34:	000d883a 	mov	r6,zero
   4aa38:	004a9a80 	call	4a9a8 <udivmodsi4>
   4aa3c:	80000126 	beq	r16,zero,4aa44 <__divsi3+0x28>
   4aa40:	0085c83a 	sub	r2,zero,r2
   4aa44:	dfc00117 	ldw	ra,4(sp)
   4aa48:	dc000017 	ldw	r16,0(sp)
   4aa4c:	dec00204 	addi	sp,sp,8
   4aa50:	f800283a 	ret
   4aa54:	0109c83a 	sub	r4,zero,r4
   4aa58:	04000044 	movi	r16,1
   4aa5c:	283ff50e 	bge	r5,zero,4aa34 <__divsi3+0x18>
   4aa60:	014bc83a 	sub	r5,zero,r5
   4aa64:	8400005c 	xori	r16,r16,1
   4aa68:	003ff206 	br	4aa34 <__divsi3+0x18>

0004aa6c <__modsi3>:
   4aa6c:	deffff04 	addi	sp,sp,-4
   4aa70:	dfc00015 	stw	ra,0(sp)
   4aa74:	20000516 	blt	r4,zero,4aa8c <__modsi3+0x20>
   4aa78:	28000c16 	blt	r5,zero,4aaac <__modsi3+0x40>
   4aa7c:	01800044 	movi	r6,1
   4aa80:	dfc00017 	ldw	ra,0(sp)
   4aa84:	dec00104 	addi	sp,sp,4
   4aa88:	004a9a81 	jmpi	4a9a8 <udivmodsi4>
   4aa8c:	0109c83a 	sub	r4,zero,r4
   4aa90:	28000b16 	blt	r5,zero,4aac0 <__modsi3+0x54>
   4aa94:	01800044 	movi	r6,1
   4aa98:	004a9a80 	call	4a9a8 <udivmodsi4>
   4aa9c:	0085c83a 	sub	r2,zero,r2
   4aaa0:	dfc00017 	ldw	ra,0(sp)
   4aaa4:	dec00104 	addi	sp,sp,4
   4aaa8:	f800283a 	ret
   4aaac:	014bc83a 	sub	r5,zero,r5
   4aab0:	01800044 	movi	r6,1
   4aab4:	dfc00017 	ldw	ra,0(sp)
   4aab8:	dec00104 	addi	sp,sp,4
   4aabc:	004a9a81 	jmpi	4a9a8 <udivmodsi4>
   4aac0:	014bc83a 	sub	r5,zero,r5
   4aac4:	003ff306 	br	4aa94 <__modsi3+0x28>

0004aac8 <__udivsi3>:
   4aac8:	000d883a 	mov	r6,zero
   4aacc:	004a9a81 	jmpi	4a9a8 <udivmodsi4>

0004aad0 <__umodsi3>:
   4aad0:	01800044 	movi	r6,1
   4aad4:	004a9a81 	jmpi	4a9a8 <udivmodsi4>

0004aad8 <__muldi3>:
   4aad8:	defff604 	addi	sp,sp,-40
   4aadc:	dd400515 	stw	r21,20(sp)
   4aae0:	dd000415 	stw	r20,16(sp)
   4aae4:	257fffcc 	andi	r21,r4,65535
   4aae8:	353fffcc 	andi	r20,r6,65535
   4aaec:	dcc00315 	stw	r19,12(sp)
   4aaf0:	3026d43a 	srli	r19,r6,16
   4aaf4:	dd800615 	stw	r22,24(sp)
   4aaf8:	dc800215 	stw	r18,8(sp)
   4aafc:	dc400115 	stw	r17,4(sp)
   4ab00:	2024d43a 	srli	r18,r4,16
   4ab04:	2023883a 	mov	r17,r4
   4ab08:	282d883a 	mov	r22,r5
   4ab0c:	a009883a 	mov	r4,r20
   4ab10:	a80b883a 	mov	r5,r21
   4ab14:	dfc00915 	stw	ra,36(sp)
   4ab18:	df000815 	stw	fp,32(sp)
   4ab1c:	ddc00715 	stw	r23,28(sp)
   4ab20:	3839883a 	mov	fp,r7
   4ab24:	dc000015 	stw	r16,0(sp)
   4ab28:	3021883a 	mov	r16,r6
   4ab2c:	00419f00 	call	419f0 <__mulsi3>
   4ab30:	a80b883a 	mov	r5,r21
   4ab34:	9809883a 	mov	r4,r19
   4ab38:	102f883a 	mov	r23,r2
   4ab3c:	00419f00 	call	419f0 <__mulsi3>
   4ab40:	a009883a 	mov	r4,r20
   4ab44:	900b883a 	mov	r5,r18
   4ab48:	102b883a 	mov	r21,r2
   4ab4c:	00419f00 	call	419f0 <__mulsi3>
   4ab50:	9809883a 	mov	r4,r19
   4ab54:	900b883a 	mov	r5,r18
   4ab58:	1029883a 	mov	r20,r2
   4ab5c:	00419f00 	call	419f0 <__mulsi3>
   4ab60:	1007883a 	mov	r3,r2
   4ab64:	b804d43a 	srli	r2,r23,16
   4ab68:	a549883a 	add	r4,r20,r21
   4ab6c:	2089883a 	add	r4,r4,r2
   4ab70:	2500022e 	bgeu	r4,r20,4ab7c <__muldi3+0xa4>
   4ab74:	00800074 	movhi	r2,1
   4ab78:	1887883a 	add	r3,r3,r2
   4ab7c:	200cd43a 	srli	r6,r4,16
   4ab80:	2004943a 	slli	r2,r4,16
   4ab84:	e00b883a 	mov	r5,fp
   4ab88:	8809883a 	mov	r4,r17
   4ab8c:	bdffffcc 	andi	r23,r23,65535
   4ab90:	19a3883a 	add	r17,r3,r6
   4ab94:	15ef883a 	add	r23,r2,r23
   4ab98:	00419f00 	call	419f0 <__mulsi3>
   4ab9c:	8009883a 	mov	r4,r16
   4aba0:	b00b883a 	mov	r5,r22
   4aba4:	1025883a 	mov	r18,r2
   4aba8:	00419f00 	call	419f0 <__mulsi3>
   4abac:	9085883a 	add	r2,r18,r2
   4abb0:	1447883a 	add	r3,r2,r17
   4abb4:	b805883a 	mov	r2,r23
   4abb8:	dfc00917 	ldw	ra,36(sp)
   4abbc:	df000817 	ldw	fp,32(sp)
   4abc0:	ddc00717 	ldw	r23,28(sp)
   4abc4:	dd800617 	ldw	r22,24(sp)
   4abc8:	dd400517 	ldw	r21,20(sp)
   4abcc:	dd000417 	ldw	r20,16(sp)
   4abd0:	dcc00317 	ldw	r19,12(sp)
   4abd4:	dc800217 	ldw	r18,8(sp)
   4abd8:	dc400117 	ldw	r17,4(sp)
   4abdc:	dc000017 	ldw	r16,0(sp)
   4abe0:	dec00a04 	addi	sp,sp,40
   4abe4:	f800283a 	ret

0004abe8 <__clzsi2>:
   4abe8:	00bfffd4 	movui	r2,65535
   4abec:	11000b36 	bltu	r2,r4,4ac1c <__clzsi2+0x34>
   4abf0:	00803fc4 	movi	r2,255
   4abf4:	11001e2e 	bgeu	r2,r4,4ac70 <__clzsi2+0x88>
   4abf8:	00c00204 	movi	r3,8
   4abfc:	20c8d83a 	srl	r4,r4,r3
   4ac00:	00c00174 	movhi	r3,5
   4ac04:	18f8b304 	addi	r3,r3,-7476
   4ac08:	00800604 	movi	r2,24
   4ac0c:	1909883a 	add	r4,r3,r4
   4ac10:	20c00003 	ldbu	r3,0(r4)
   4ac14:	10c5c83a 	sub	r2,r2,r3
   4ac18:	f800283a 	ret
   4ac1c:	00804034 	movhi	r2,256
   4ac20:	10bfffc4 	addi	r2,r2,-1
   4ac24:	11000936 	bltu	r2,r4,4ac4c <__clzsi2+0x64>
   4ac28:	00800404 	movi	r2,16
   4ac2c:	1007883a 	mov	r3,r2
   4ac30:	20c8d83a 	srl	r4,r4,r3
   4ac34:	00c00174 	movhi	r3,5
   4ac38:	18f8b304 	addi	r3,r3,-7476
   4ac3c:	1909883a 	add	r4,r3,r4
   4ac40:	20c00003 	ldbu	r3,0(r4)
   4ac44:	10c5c83a 	sub	r2,r2,r3
   4ac48:	f800283a 	ret
   4ac4c:	00c00604 	movi	r3,24
   4ac50:	20c8d83a 	srl	r4,r4,r3
   4ac54:	00c00174 	movhi	r3,5
   4ac58:	18f8b304 	addi	r3,r3,-7476
   4ac5c:	00800204 	movi	r2,8
   4ac60:	1909883a 	add	r4,r3,r4
   4ac64:	20c00003 	ldbu	r3,0(r4)
   4ac68:	10c5c83a 	sub	r2,r2,r3
   4ac6c:	f800283a 	ret
   4ac70:	0007883a 	mov	r3,zero
   4ac74:	20c8d83a 	srl	r4,r4,r3
   4ac78:	00c00174 	movhi	r3,5
   4ac7c:	18f8b304 	addi	r3,r3,-7476
   4ac80:	00800804 	movi	r2,32
   4ac84:	1909883a 	add	r4,r3,r4
   4ac88:	20c00003 	ldbu	r3,0(r4)
   4ac8c:	10c5c83a 	sub	r2,r2,r3
   4ac90:	f800283a 	ret

0004ac94 <__pack_d>:
   4ac94:	20800017 	ldw	r2,0(r4)
   4ac98:	defff804 	addi	sp,sp,-32
   4ac9c:	dcc00315 	stw	r19,12(sp)
   4aca0:	dc800215 	stw	r18,8(sp)
   4aca4:	dfc00715 	stw	ra,28(sp)
   4aca8:	dd800615 	stw	r22,24(sp)
   4acac:	dd400515 	stw	r21,20(sp)
   4acb0:	dd000415 	stw	r20,16(sp)
   4acb4:	dc400115 	stw	r17,4(sp)
   4acb8:	dc000015 	stw	r16,0(sp)
   4acbc:	04800044 	movi	r18,1
   4acc0:	24400317 	ldw	r17,12(r4)
   4acc4:	24000417 	ldw	r16,16(r4)
   4acc8:	24c00117 	ldw	r19,4(r4)
   4accc:	9080422e 	bgeu	r18,r2,4add8 <__pack_d+0x144>
   4acd0:	00c00104 	movi	r3,4
   4acd4:	10c03c26 	beq	r2,r3,4adc8 <__pack_d+0x134>
   4acd8:	00c00084 	movi	r3,2
   4acdc:	10c01926 	beq	r2,r3,4ad44 <__pack_d+0xb0>
   4ace0:	8c04b03a 	or	r2,r17,r16
   4ace4:	10001726 	beq	r2,zero,4ad44 <__pack_d+0xb0>
   4ace8:	21000217 	ldw	r4,8(r4)
   4acec:	00bf0084 	movi	r2,-1022
   4acf0:	20804016 	blt	r4,r2,4adf4 <__pack_d+0x160>
   4acf4:	0080ffc4 	movi	r2,1023
   4acf8:	11003316 	blt	r2,r4,4adc8 <__pack_d+0x134>
   4acfc:	88803fcc 	andi	r2,r17,255
   4ad00:	00c02004 	movi	r3,128
   4ad04:	10c02926 	beq	r2,r3,4adac <__pack_d+0x118>
   4ad08:	88801fc4 	addi	r2,r17,127
   4ad0c:	1463803a 	cmpltu	r17,r2,r17
   4ad10:	8c21883a 	add	r16,r17,r16
   4ad14:	1023883a 	mov	r17,r2
   4ad18:	00880034 	movhi	r2,8192
   4ad1c:	10bfffc4 	addi	r2,r2,-1
   4ad20:	14001c36 	bltu	r2,r16,4ad94 <__pack_d+0x100>
   4ad24:	2100ffc4 	addi	r4,r4,1023
   4ad28:	8006963a 	slli	r3,r16,24
   4ad2c:	8804d23a 	srli	r2,r17,8
   4ad30:	8020913a 	slli	r16,r16,4
   4ad34:	2101ffcc 	andi	r4,r4,2047
   4ad38:	1884b03a 	or	r2,r3,r2
   4ad3c:	8020d33a 	srli	r16,r16,12
   4ad40:	00000306 	br	4ad50 <__pack_d+0xbc>
   4ad44:	0009883a 	mov	r4,zero
   4ad48:	0005883a 	mov	r2,zero
   4ad4c:	0021883a 	mov	r16,zero
   4ad50:	2008953a 	slli	r4,r4,20
   4ad54:	982697fa 	slli	r19,r19,31
   4ad58:	00c00434 	movhi	r3,16
   4ad5c:	18ffffc4 	addi	r3,r3,-1
   4ad60:	80e0703a 	and	r16,r16,r3
   4ad64:	8106b03a 	or	r3,r16,r4
   4ad68:	1cc6b03a 	or	r3,r3,r19
   4ad6c:	dfc00717 	ldw	ra,28(sp)
   4ad70:	dd800617 	ldw	r22,24(sp)
   4ad74:	dd400517 	ldw	r21,20(sp)
   4ad78:	dd000417 	ldw	r20,16(sp)
   4ad7c:	dcc00317 	ldw	r19,12(sp)
   4ad80:	dc800217 	ldw	r18,8(sp)
   4ad84:	dc400117 	ldw	r17,4(sp)
   4ad88:	dc000017 	ldw	r16,0(sp)
   4ad8c:	dec00804 	addi	sp,sp,32
   4ad90:	f800283a 	ret
   4ad94:	800697fa 	slli	r3,r16,31
   4ad98:	8804d07a 	srli	r2,r17,1
   4ad9c:	21010004 	addi	r4,r4,1024
   4ada0:	8020d07a 	srli	r16,r16,1
   4ada4:	18a2b03a 	or	r17,r3,r2
   4ada8:	003fdf06 	br	4ad28 <__pack_d+0x94>
   4adac:	88c0400c 	andi	r3,r17,256
   4adb0:	183fd926 	beq	r3,zero,4ad18 <__pack_d+0x84>
   4adb4:	8885883a 	add	r2,r17,r2
   4adb8:	1463803a 	cmpltu	r17,r2,r17
   4adbc:	8c21883a 	add	r16,r17,r16
   4adc0:	1023883a 	mov	r17,r2
   4adc4:	003fd406 	br	4ad18 <__pack_d+0x84>
   4adc8:	0101ffc4 	movi	r4,2047
   4adcc:	0005883a 	mov	r2,zero
   4add0:	0021883a 	mov	r16,zero
   4add4:	003fde06 	br	4ad50 <__pack_d+0xbc>
   4add8:	84000234 	orhi	r16,r16,8
   4addc:	00c00434 	movhi	r3,16
   4ade0:	18ffffc4 	addi	r3,r3,-1
   4ade4:	8805883a 	mov	r2,r17
   4ade8:	80e0703a 	and	r16,r16,r3
   4adec:	0101ffc4 	movi	r4,2047
   4adf0:	003fd706 	br	4ad50 <__pack_d+0xbc>
   4adf4:	1129c83a 	sub	r20,r2,r4
   4adf8:	00800e04 	movi	r2,56
   4adfc:	15002716 	blt	r2,r20,4ae9c <__pack_d+0x208>
   4ae00:	800b883a 	mov	r5,r16
   4ae04:	a00d883a 	mov	r6,r20
   4ae08:	8809883a 	mov	r4,r17
   4ae0c:	004b08c0 	call	4b08c <__lshrdi3>
   4ae10:	9009883a 	mov	r4,r18
   4ae14:	000b883a 	mov	r5,zero
   4ae18:	a00d883a 	mov	r6,r20
   4ae1c:	102d883a 	mov	r22,r2
   4ae20:	182b883a 	mov	r21,r3
   4ae24:	004b0d00 	call	4b0d0 <__ashldi3>
   4ae28:	1009003a 	cmpeq	r4,r2,zero
   4ae2c:	1907c83a 	sub	r3,r3,r4
   4ae30:	10bfffc4 	addi	r2,r2,-1
   4ae34:	1c20703a 	and	r16,r3,r16
   4ae38:	1444703a 	and	r2,r2,r17
   4ae3c:	1404b03a 	or	r2,r2,r16
   4ae40:	1004c03a 	cmpne	r2,r2,zero
   4ae44:	1584b03a 	or	r2,r2,r22
   4ae48:	11003fcc 	andi	r4,r2,255
   4ae4c:	01402004 	movi	r5,128
   4ae50:	a807883a 	mov	r3,r21
   4ae54:	2140131e 	bne	r4,r5,4aea4 <__pack_d+0x210>
   4ae58:	1140400c 	andi	r5,r2,256
   4ae5c:	28000426 	beq	r5,zero,4ae70 <__pack_d+0x1dc>
   4ae60:	1109883a 	add	r4,r2,r4
   4ae64:	2085803a 	cmpltu	r2,r4,r2
   4ae68:	1547883a 	add	r3,r2,r21
   4ae6c:	2005883a 	mov	r2,r4
   4ae70:	1808963a 	slli	r4,r3,24
   4ae74:	1004d23a 	srli	r2,r2,8
   4ae78:	1820913a 	slli	r16,r3,4
   4ae7c:	01440034 	movhi	r5,4096
   4ae80:	297fffc4 	addi	r5,r5,-1
   4ae84:	2084b03a 	or	r2,r4,r2
   4ae88:	8020d33a 	srli	r16,r16,12
   4ae8c:	01000044 	movi	r4,1
   4ae90:	28ffaf36 	bltu	r5,r3,4ad50 <__pack_d+0xbc>
   4ae94:	0009883a 	mov	r4,zero
   4ae98:	003fad06 	br	4ad50 <__pack_d+0xbc>
   4ae9c:	0005883a 	mov	r2,zero
   4aea0:	0007883a 	mov	r3,zero
   4aea4:	11001fc4 	addi	r4,r2,127
   4aea8:	2085803a 	cmpltu	r2,r4,r2
   4aeac:	10c7883a 	add	r3,r2,r3
   4aeb0:	2005883a 	mov	r2,r4
   4aeb4:	003fee06 	br	4ae70 <__pack_d+0x1dc>

0004aeb8 <__unpack_d>:
   4aeb8:	21800117 	ldw	r6,4(r4)
   4aebc:	20c00017 	ldw	r3,0(r4)
   4aec0:	3004d7fa 	srli	r2,r6,31
   4aec4:	3008d53a 	srli	r4,r6,20
   4aec8:	28800115 	stw	r2,4(r5)
   4aecc:	2101ffcc 	andi	r4,r4,2047
   4aed0:	00800434 	movhi	r2,16
   4aed4:	10bfffc4 	addi	r2,r2,-1
   4aed8:	3084703a 	and	r2,r6,r2
   4aedc:	20001a1e 	bne	r4,zero,4af48 <__unpack_d+0x90>
   4aee0:	1888b03a 	or	r4,r3,r2
   4aee4:	20002626 	beq	r4,zero,4af80 <__unpack_d+0xc8>
   4aee8:	1808d63a 	srli	r4,r3,24
   4aeec:	1004923a 	slli	r2,r2,8
   4aef0:	01bf0084 	movi	r6,-1022
   4aef4:	29800215 	stw	r6,8(r5)
   4aef8:	2084b03a 	or	r2,r4,r2
   4aefc:	010000c4 	movi	r4,3
   4af00:	29000015 	stw	r4,0(r5)
   4af04:	02040034 	movhi	r8,4096
   4af08:	423fffc4 	addi	r8,r8,-1
   4af0c:	1806923a 	slli	r3,r3,8
   4af10:	40801836 	bltu	r8,r2,4af74 <__unpack_d+0xbc>
   4af14:	013f0044 	movi	r4,-1023
   4af18:	18cd883a 	add	r6,r3,r3
   4af1c:	30c7803a 	cmpltu	r3,r6,r3
   4af20:	1085883a 	add	r2,r2,r2
   4af24:	1885883a 	add	r2,r3,r2
   4af28:	200f883a 	mov	r7,r4
   4af2c:	3007883a 	mov	r3,r6
   4af30:	213fffc4 	addi	r4,r4,-1
   4af34:	40bff82e 	bgeu	r8,r2,4af18 <__unpack_d+0x60>
   4af38:	29c00215 	stw	r7,8(r5)
   4af3c:	28c00315 	stw	r3,12(r5)
   4af40:	28800415 	stw	r2,16(r5)
   4af44:	f800283a 	ret
   4af48:	01c1ffc4 	movi	r7,2047
   4af4c:	21c00f26 	beq	r4,r7,4af8c <__unpack_d+0xd4>
   4af50:	180cd63a 	srli	r6,r3,24
   4af54:	1004923a 	slli	r2,r2,8
   4af58:	213f0044 	addi	r4,r4,-1023
   4af5c:	1806923a 	slli	r3,r3,8
   4af60:	3084b03a 	or	r2,r6,r2
   4af64:	29000215 	stw	r4,8(r5)
   4af68:	010000c4 	movi	r4,3
   4af6c:	10840034 	orhi	r2,r2,4096
   4af70:	29000015 	stw	r4,0(r5)
   4af74:	28c00315 	stw	r3,12(r5)
   4af78:	28800415 	stw	r2,16(r5)
   4af7c:	f800283a 	ret
   4af80:	00800084 	movi	r2,2
   4af84:	28800015 	stw	r2,0(r5)
   4af88:	f800283a 	ret
   4af8c:	1888b03a 	or	r4,r3,r2
   4af90:	20000526 	beq	r4,zero,4afa8 <__unpack_d+0xf0>
   4af94:	3180022c 	andhi	r6,r6,8
   4af98:	30000626 	beq	r6,zero,4afb4 <__unpack_d+0xfc>
   4af9c:	01000044 	movi	r4,1
   4afa0:	29000015 	stw	r4,0(r5)
   4afa4:	003ff306 	br	4af74 <__unpack_d+0xbc>
   4afa8:	00800104 	movi	r2,4
   4afac:	28800015 	stw	r2,0(r5)
   4afb0:	f800283a 	ret
   4afb4:	28000015 	stw	zero,0(r5)
   4afb8:	003fee06 	br	4af74 <__unpack_d+0xbc>

0004afbc <__fpcmp_parts_d>:
   4afbc:	20c00017 	ldw	r3,0(r4)
   4afc0:	00800044 	movi	r2,1
   4afc4:	10c0142e 	bgeu	r2,r3,4b018 <__fpcmp_parts_d+0x5c>
   4afc8:	29800017 	ldw	r6,0(r5)
   4afcc:	1180122e 	bgeu	r2,r6,4b018 <__fpcmp_parts_d+0x5c>
   4afd0:	01c00104 	movi	r7,4
   4afd4:	19c02826 	beq	r3,r7,4b078 <__fpcmp_parts_d+0xbc>
   4afd8:	31c00926 	beq	r6,r7,4b000 <__fpcmp_parts_d+0x44>
   4afdc:	01c00084 	movi	r7,2
   4afe0:	19c00626 	beq	r3,r7,4affc <__fpcmp_parts_d+0x40>
   4afe4:	31c00a26 	beq	r6,r7,4b010 <__fpcmp_parts_d+0x54>
   4afe8:	20c00117 	ldw	r3,4(r4)
   4afec:	29800117 	ldw	r6,4(r5)
   4aff0:	19800b26 	beq	r3,r6,4b020 <__fpcmp_parts_d+0x64>
   4aff4:	1800041e 	bne	r3,zero,4b008 <__fpcmp_parts_d+0x4c>
   4aff8:	f800283a 	ret
   4affc:	30c01a26 	beq	r6,r3,4b068 <__fpcmp_parts_d+0xac>
   4b000:	28800117 	ldw	r2,4(r5)
   4b004:	1000041e 	bne	r2,zero,4b018 <__fpcmp_parts_d+0x5c>
   4b008:	00bfffc4 	movi	r2,-1
   4b00c:	f800283a 	ret
   4b010:	20800117 	ldw	r2,4(r4)
   4b014:	103ffc1e 	bne	r2,zero,4b008 <__fpcmp_parts_d+0x4c>
   4b018:	00800044 	movi	r2,1
   4b01c:	f800283a 	ret
   4b020:	21c00217 	ldw	r7,8(r4)
   4b024:	29800217 	ldw	r6,8(r5)
   4b028:	31c0020e 	bge	r6,r7,4b034 <__fpcmp_parts_d+0x78>
   4b02c:	183ff61e 	bne	r3,zero,4b008 <__fpcmp_parts_d+0x4c>
   4b030:	f800283a 	ret
   4b034:	39800a16 	blt	r7,r6,4b060 <__fpcmp_parts_d+0xa4>
   4b038:	20800417 	ldw	r2,16(r4)
   4b03c:	29800417 	ldw	r6,16(r5)
   4b040:	21c00317 	ldw	r7,12(r4)
   4b044:	29000317 	ldw	r4,12(r5)
   4b048:	30800936 	bltu	r6,r2,4b070 <__fpcmp_parts_d+0xb4>
   4b04c:	1180011e 	bne	r2,r6,4b054 <__fpcmp_parts_d+0x98>
   4b050:	21c00736 	bltu	r4,r7,4b070 <__fpcmp_parts_d+0xb4>
   4b054:	11800236 	bltu	r2,r6,4b060 <__fpcmp_parts_d+0xa4>
   4b058:	3080031e 	bne	r6,r2,4b068 <__fpcmp_parts_d+0xac>
   4b05c:	3900022e 	bgeu	r7,r4,4b068 <__fpcmp_parts_d+0xac>
   4b060:	183fe926 	beq	r3,zero,4b008 <__fpcmp_parts_d+0x4c>
   4b064:	003fec06 	br	4b018 <__fpcmp_parts_d+0x5c>
   4b068:	0005883a 	mov	r2,zero
   4b06c:	f800283a 	ret
   4b070:	183fe926 	beq	r3,zero,4b018 <__fpcmp_parts_d+0x5c>
   4b074:	003fe406 	br	4b008 <__fpcmp_parts_d+0x4c>
   4b078:	30ffe51e 	bne	r6,r3,4b010 <__fpcmp_parts_d+0x54>
   4b07c:	28c00117 	ldw	r3,4(r5)
   4b080:	20800117 	ldw	r2,4(r4)
   4b084:	1885c83a 	sub	r2,r3,r2
   4b088:	f800283a 	ret

0004b08c <__lshrdi3>:
   4b08c:	2005883a 	mov	r2,r4
   4b090:	2807883a 	mov	r3,r5
   4b094:	30000826 	beq	r6,zero,4b0b8 <__lshrdi3+0x2c>
   4b098:	01000804 	movi	r4,32
   4b09c:	2189c83a 	sub	r4,r4,r6
   4b0a0:	0100060e 	bge	zero,r4,4b0bc <__lshrdi3+0x30>
   4b0a4:	1184d83a 	srl	r2,r2,r6
   4b0a8:	2908983a 	sll	r4,r5,r4
   4b0ac:	298cd83a 	srl	r6,r5,r6
   4b0b0:	2084b03a 	or	r2,r4,r2
   4b0b4:	3007883a 	mov	r3,r6
   4b0b8:	f800283a 	ret
   4b0bc:	0105c83a 	sub	r2,zero,r4
   4b0c0:	000d883a 	mov	r6,zero
   4b0c4:	2884d83a 	srl	r2,r5,r2
   4b0c8:	3007883a 	mov	r3,r6
   4b0cc:	003ffa06 	br	4b0b8 <__lshrdi3+0x2c>

0004b0d0 <__ashldi3>:
   4b0d0:	2005883a 	mov	r2,r4
   4b0d4:	2807883a 	mov	r3,r5
   4b0d8:	30000826 	beq	r6,zero,4b0fc <__ashldi3+0x2c>
   4b0dc:	01000804 	movi	r4,32
   4b0e0:	2189c83a 	sub	r4,r4,r6
   4b0e4:	0100060e 	bge	zero,r4,4b100 <__ashldi3+0x30>
   4b0e8:	1108d83a 	srl	r4,r2,r4
   4b0ec:	2986983a 	sll	r3,r5,r6
   4b0f0:	118c983a 	sll	r6,r2,r6
   4b0f4:	20c6b03a 	or	r3,r4,r3
   4b0f8:	3005883a 	mov	r2,r6
   4b0fc:	f800283a 	ret
   4b100:	0107c83a 	sub	r3,zero,r4
   4b104:	000d883a 	mov	r6,zero
   4b108:	10c6983a 	sll	r3,r2,r3
   4b10c:	3005883a 	mov	r2,r6
   4b110:	003ffa06 	br	4b0fc <__ashldi3+0x2c>

0004b114 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b114:	defffe04 	addi	sp,sp,-8
   4b118:	dfc00115 	stw	ra,4(sp)
   4b11c:	df000015 	stw	fp,0(sp)
   4b120:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b124:	00800174 	movhi	r2,5
   4b128:	10bf9204 	addi	r2,r2,-440
   4b12c:	10800017 	ldw	r2,0(r2)
   4b130:	10000526 	beq	r2,zero,4b148 <alt_get_errno+0x34>
   4b134:	00800174 	movhi	r2,5
   4b138:	10bf9204 	addi	r2,r2,-440
   4b13c:	10800017 	ldw	r2,0(r2)
   4b140:	103ee83a 	callr	r2
   4b144:	00000206 	br	4b150 <alt_get_errno+0x3c>
   4b148:	00800174 	movhi	r2,5
   4b14c:	10863804 	addi	r2,r2,6368
}
   4b150:	e037883a 	mov	sp,fp
   4b154:	dfc00117 	ldw	ra,4(sp)
   4b158:	df000017 	ldw	fp,0(sp)
   4b15c:	dec00204 	addi	sp,sp,8
   4b160:	f800283a 	ret

0004b164 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4b164:	defffb04 	addi	sp,sp,-20
   4b168:	dfc00415 	stw	ra,16(sp)
   4b16c:	df000315 	stw	fp,12(sp)
   4b170:	df000304 	addi	fp,sp,12
   4b174:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4b178:	e0bfff17 	ldw	r2,-4(fp)
   4b17c:	10000716 	blt	r2,zero,4b19c <close+0x38>
   4b180:	e13fff17 	ldw	r4,-4(fp)
   4b184:	01400304 	movi	r5,12
   4b188:	00419f00 	call	419f0 <__mulsi3>
   4b18c:	00c00174 	movhi	r3,5
   4b190:	18fb0b04 	addi	r3,r3,-5076
   4b194:	10c5883a 	add	r2,r2,r3
   4b198:	00000106 	br	4b1a0 <close+0x3c>
   4b19c:	0005883a 	mov	r2,zero
   4b1a0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4b1a4:	e0bffd17 	ldw	r2,-12(fp)
   4b1a8:	10001826 	beq	r2,zero,4b20c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4b1ac:	e0bffd17 	ldw	r2,-12(fp)
   4b1b0:	10800017 	ldw	r2,0(r2)
   4b1b4:	10800417 	ldw	r2,16(r2)
   4b1b8:	10000626 	beq	r2,zero,4b1d4 <close+0x70>
   4b1bc:	e0bffd17 	ldw	r2,-12(fp)
   4b1c0:	10800017 	ldw	r2,0(r2)
   4b1c4:	10800417 	ldw	r2,16(r2)
   4b1c8:	e13ffd17 	ldw	r4,-12(fp)
   4b1cc:	103ee83a 	callr	r2
   4b1d0:	00000106 	br	4b1d8 <close+0x74>
   4b1d4:	0005883a 	mov	r2,zero
   4b1d8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4b1dc:	e13fff17 	ldw	r4,-4(fp)
   4b1e0:	004b85c0 	call	4b85c <alt_release_fd>
    if (rval < 0)
   4b1e4:	e0bffe17 	ldw	r2,-8(fp)
   4b1e8:	1000060e 	bge	r2,zero,4b204 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4b1ec:	004b1140 	call	4b114 <alt_get_errno>
   4b1f0:	e0fffe17 	ldw	r3,-8(fp)
   4b1f4:	00c7c83a 	sub	r3,zero,r3
   4b1f8:	10c00015 	stw	r3,0(r2)
      return -1;
   4b1fc:	00bfffc4 	movi	r2,-1
   4b200:	00000606 	br	4b21c <close+0xb8>
    }
    return 0;
   4b204:	0005883a 	mov	r2,zero
   4b208:	00000406 	br	4b21c <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4b20c:	004b1140 	call	4b114 <alt_get_errno>
   4b210:	00c01444 	movi	r3,81
   4b214:	10c00015 	stw	r3,0(r2)
    return -1;
   4b218:	00bfffc4 	movi	r2,-1
  }
}
   4b21c:	e037883a 	mov	sp,fp
   4b220:	dfc00117 	ldw	ra,4(sp)
   4b224:	df000017 	ldw	fp,0(sp)
   4b228:	dec00204 	addi	sp,sp,8
   4b22c:	f800283a 	ret

0004b230 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4b230:	defffc04 	addi	sp,sp,-16
   4b234:	df000315 	stw	fp,12(sp)
   4b238:	df000304 	addi	fp,sp,12
   4b23c:	e13ffd15 	stw	r4,-12(fp)
   4b240:	e17ffe15 	stw	r5,-8(fp)
   4b244:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4b248:	e0bfff17 	ldw	r2,-4(fp)
}
   4b24c:	e037883a 	mov	sp,fp
   4b250:	df000017 	ldw	fp,0(sp)
   4b254:	dec00104 	addi	sp,sp,4
   4b258:	f800283a 	ret

0004b25c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b25c:	defffe04 	addi	sp,sp,-8
   4b260:	dfc00115 	stw	ra,4(sp)
   4b264:	df000015 	stw	fp,0(sp)
   4b268:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b26c:	00800174 	movhi	r2,5
   4b270:	10bf9204 	addi	r2,r2,-440
   4b274:	10800017 	ldw	r2,0(r2)
   4b278:	10000526 	beq	r2,zero,4b290 <alt_get_errno+0x34>
   4b27c:	00800174 	movhi	r2,5
   4b280:	10bf9204 	addi	r2,r2,-440
   4b284:	10800017 	ldw	r2,0(r2)
   4b288:	103ee83a 	callr	r2
   4b28c:	00000206 	br	4b298 <alt_get_errno+0x3c>
   4b290:	00800174 	movhi	r2,5
   4b294:	10863804 	addi	r2,r2,6368
}
   4b298:	e037883a 	mov	sp,fp
   4b29c:	dfc00117 	ldw	ra,4(sp)
   4b2a0:	df000017 	ldw	fp,0(sp)
   4b2a4:	dec00204 	addi	sp,sp,8
   4b2a8:	f800283a 	ret

0004b2ac <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4b2ac:	defffb04 	addi	sp,sp,-20
   4b2b0:	dfc00415 	stw	ra,16(sp)
   4b2b4:	df000315 	stw	fp,12(sp)
   4b2b8:	df000304 	addi	fp,sp,12
   4b2bc:	e13ffe15 	stw	r4,-8(fp)
   4b2c0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4b2c4:	e0bffe17 	ldw	r2,-8(fp)
   4b2c8:	10000716 	blt	r2,zero,4b2e8 <fstat+0x3c>
   4b2cc:	e13ffe17 	ldw	r4,-8(fp)
   4b2d0:	01400304 	movi	r5,12
   4b2d4:	00419f00 	call	419f0 <__mulsi3>
   4b2d8:	00c00174 	movhi	r3,5
   4b2dc:	18fb0b04 	addi	r3,r3,-5076
   4b2e0:	10c5883a 	add	r2,r2,r3
   4b2e4:	00000106 	br	4b2ec <fstat+0x40>
   4b2e8:	0005883a 	mov	r2,zero
   4b2ec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4b2f0:	e0bffd17 	ldw	r2,-12(fp)
   4b2f4:	10001026 	beq	r2,zero,4b338 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4b2f8:	e0bffd17 	ldw	r2,-12(fp)
   4b2fc:	10800017 	ldw	r2,0(r2)
   4b300:	10800817 	ldw	r2,32(r2)
   4b304:	10000726 	beq	r2,zero,4b324 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   4b308:	e0bffd17 	ldw	r2,-12(fp)
   4b30c:	10800017 	ldw	r2,0(r2)
   4b310:	10800817 	ldw	r2,32(r2)
   4b314:	e13ffd17 	ldw	r4,-12(fp)
   4b318:	e17fff17 	ldw	r5,-4(fp)
   4b31c:	103ee83a 	callr	r2
   4b320:	00000906 	br	4b348 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4b324:	e0bfff17 	ldw	r2,-4(fp)
   4b328:	00c80004 	movi	r3,8192
   4b32c:	10c00115 	stw	r3,4(r2)
      return 0;
   4b330:	0005883a 	mov	r2,zero
   4b334:	00000406 	br	4b348 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4b338:	004b25c0 	call	4b25c <alt_get_errno>
   4b33c:	00c01444 	movi	r3,81
   4b340:	10c00015 	stw	r3,0(r2)
    return -1;
   4b344:	00bfffc4 	movi	r2,-1
  }
}
   4b348:	e037883a 	mov	sp,fp
   4b34c:	dfc00117 	ldw	ra,4(sp)
   4b350:	df000017 	ldw	fp,0(sp)
   4b354:	dec00204 	addi	sp,sp,8
   4b358:	f800283a 	ret

0004b35c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b35c:	defffe04 	addi	sp,sp,-8
   4b360:	dfc00115 	stw	ra,4(sp)
   4b364:	df000015 	stw	fp,0(sp)
   4b368:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b36c:	00800174 	movhi	r2,5
   4b370:	10bf9204 	addi	r2,r2,-440
   4b374:	10800017 	ldw	r2,0(r2)
   4b378:	10000526 	beq	r2,zero,4b390 <alt_get_errno+0x34>
   4b37c:	00800174 	movhi	r2,5
   4b380:	10bf9204 	addi	r2,r2,-440
   4b384:	10800017 	ldw	r2,0(r2)
   4b388:	103ee83a 	callr	r2
   4b38c:	00000206 	br	4b398 <alt_get_errno+0x3c>
   4b390:	00800174 	movhi	r2,5
   4b394:	10863804 	addi	r2,r2,6368
}
   4b398:	e037883a 	mov	sp,fp
   4b39c:	dfc00117 	ldw	ra,4(sp)
   4b3a0:	df000017 	ldw	fp,0(sp)
   4b3a4:	dec00204 	addi	sp,sp,8
   4b3a8:	f800283a 	ret

0004b3ac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4b3ac:	deffed04 	addi	sp,sp,-76
   4b3b0:	dfc01215 	stw	ra,72(sp)
   4b3b4:	df001115 	stw	fp,68(sp)
   4b3b8:	df001104 	addi	fp,sp,68
   4b3bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4b3c0:	e0bfff17 	ldw	r2,-4(fp)
   4b3c4:	10000716 	blt	r2,zero,4b3e4 <isatty+0x38>
   4b3c8:	e13fff17 	ldw	r4,-4(fp)
   4b3cc:	01400304 	movi	r5,12
   4b3d0:	00419f00 	call	419f0 <__mulsi3>
   4b3d4:	00c00174 	movhi	r3,5
   4b3d8:	18fb0b04 	addi	r3,r3,-5076
   4b3dc:	10c5883a 	add	r2,r2,r3
   4b3e0:	00000106 	br	4b3e8 <isatty+0x3c>
   4b3e4:	0005883a 	mov	r2,zero
   4b3e8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4b3ec:	e0bfef17 	ldw	r2,-68(fp)
   4b3f0:	10000e26 	beq	r2,zero,4b42c <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4b3f4:	e0bfef17 	ldw	r2,-68(fp)
   4b3f8:	10800017 	ldw	r2,0(r2)
   4b3fc:	10800817 	ldw	r2,32(r2)
   4b400:	1000021e 	bne	r2,zero,4b40c <isatty+0x60>
    {
      return 1;
   4b404:	00800044 	movi	r2,1
   4b408:	00000c06 	br	4b43c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4b40c:	e0bff004 	addi	r2,fp,-64
   4b410:	e13fff17 	ldw	r4,-4(fp)
   4b414:	100b883a 	mov	r5,r2
   4b418:	004b2ac0 	call	4b2ac <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4b41c:	e0bff117 	ldw	r2,-60(fp)
   4b420:	10880020 	cmpeqi	r2,r2,8192
   4b424:	10803fcc 	andi	r2,r2,255
   4b428:	00000406 	br	4b43c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4b42c:	004b35c0 	call	4b35c <alt_get_errno>
   4b430:	00c01444 	movi	r3,81
   4b434:	10c00015 	stw	r3,0(r2)
    return 0;
   4b438:	0005883a 	mov	r2,zero
  }
}
   4b43c:	e037883a 	mov	sp,fp
   4b440:	dfc00117 	ldw	ra,4(sp)
   4b444:	df000017 	ldw	fp,0(sp)
   4b448:	dec00204 	addi	sp,sp,8
   4b44c:	f800283a 	ret

0004b450 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4b450:	defffc04 	addi	sp,sp,-16
   4b454:	df000315 	stw	fp,12(sp)
   4b458:	df000304 	addi	fp,sp,12
   4b45c:	e13ffd15 	stw	r4,-12(fp)
   4b460:	e17ffe15 	stw	r5,-8(fp)
   4b464:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4b468:	e0fffe17 	ldw	r3,-8(fp)
   4b46c:	e0bffd17 	ldw	r2,-12(fp)
   4b470:	18800e26 	beq	r3,r2,4b4ac <alt_load_section+0x5c>
  {
    while( to != end )
   4b474:	00000a06 	br	4b4a0 <alt_load_section+0x50>
    {
      *to++ = *from++;
   4b478:	e0bffd17 	ldw	r2,-12(fp)
   4b47c:	10c00017 	ldw	r3,0(r2)
   4b480:	e0bffe17 	ldw	r2,-8(fp)
   4b484:	10c00015 	stw	r3,0(r2)
   4b488:	e0bffe17 	ldw	r2,-8(fp)
   4b48c:	10800104 	addi	r2,r2,4
   4b490:	e0bffe15 	stw	r2,-8(fp)
   4b494:	e0bffd17 	ldw	r2,-12(fp)
   4b498:	10800104 	addi	r2,r2,4
   4b49c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4b4a0:	e0fffe17 	ldw	r3,-8(fp)
   4b4a4:	e0bfff17 	ldw	r2,-4(fp)
   4b4a8:	18bff31e 	bne	r3,r2,4b478 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   4b4ac:	e037883a 	mov	sp,fp
   4b4b0:	df000017 	ldw	fp,0(sp)
   4b4b4:	dec00104 	addi	sp,sp,4
   4b4b8:	f800283a 	ret

0004b4bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4b4bc:	defffe04 	addi	sp,sp,-8
   4b4c0:	dfc00115 	stw	ra,4(sp)
   4b4c4:	df000015 	stw	fp,0(sp)
   4b4c8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4b4cc:	01000174 	movhi	r4,5
   4b4d0:	213f9704 	addi	r4,r4,-420
   4b4d4:	01400174 	movhi	r5,5
   4b4d8:	2978fc04 	addi	r5,r5,-7184
   4b4dc:	01800174 	movhi	r6,5
   4b4e0:	31bf9704 	addi	r6,r6,-420
   4b4e4:	004b4500 	call	4b450 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4b4e8:	01000134 	movhi	r4,4
   4b4ec:	21000804 	addi	r4,r4,32
   4b4f0:	01400134 	movhi	r5,4
   4b4f4:	29400804 	addi	r5,r5,32
   4b4f8:	01800134 	movhi	r6,4
   4b4fc:	31806e04 	addi	r6,r6,440
   4b500:	004b4500 	call	4b450 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4b504:	01000174 	movhi	r4,5
   4b508:	21380704 	addi	r4,r4,-8164
   4b50c:	01400174 	movhi	r5,5
   4b510:	29780704 	addi	r5,r5,-8164
   4b514:	01800174 	movhi	r6,5
   4b518:	31b8fc04 	addi	r6,r6,-7184
   4b51c:	004b4500 	call	4b450 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4b520:	004cedc0 	call	4cedc <alt_dcache_flush_all>
  alt_icache_flush_all();
   4b524:	004d0a00 	call	4d0a0 <alt_icache_flush_all>
}
   4b528:	e037883a 	mov	sp,fp
   4b52c:	dfc00117 	ldw	ra,4(sp)
   4b530:	df000017 	ldw	fp,0(sp)
   4b534:	dec00204 	addi	sp,sp,8
   4b538:	f800283a 	ret

0004b53c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b53c:	defffe04 	addi	sp,sp,-8
   4b540:	dfc00115 	stw	ra,4(sp)
   4b544:	df000015 	stw	fp,0(sp)
   4b548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b54c:	00800174 	movhi	r2,5
   4b550:	10bf9204 	addi	r2,r2,-440
   4b554:	10800017 	ldw	r2,0(r2)
   4b558:	10000526 	beq	r2,zero,4b570 <alt_get_errno+0x34>
   4b55c:	00800174 	movhi	r2,5
   4b560:	10bf9204 	addi	r2,r2,-440
   4b564:	10800017 	ldw	r2,0(r2)
   4b568:	103ee83a 	callr	r2
   4b56c:	00000206 	br	4b578 <alt_get_errno+0x3c>
   4b570:	00800174 	movhi	r2,5
   4b574:	10863804 	addi	r2,r2,6368
}
   4b578:	e037883a 	mov	sp,fp
   4b57c:	dfc00117 	ldw	ra,4(sp)
   4b580:	df000017 	ldw	fp,0(sp)
   4b584:	dec00204 	addi	sp,sp,8
   4b588:	f800283a 	ret

0004b58c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4b58c:	defff904 	addi	sp,sp,-28
   4b590:	dfc00615 	stw	ra,24(sp)
   4b594:	df000515 	stw	fp,20(sp)
   4b598:	df000504 	addi	fp,sp,20
   4b59c:	e13ffd15 	stw	r4,-12(fp)
   4b5a0:	e17ffe15 	stw	r5,-8(fp)
   4b5a4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4b5a8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4b5ac:	e0bffd17 	ldw	r2,-12(fp)
   4b5b0:	10000716 	blt	r2,zero,4b5d0 <lseek+0x44>
   4b5b4:	e13ffd17 	ldw	r4,-12(fp)
   4b5b8:	01400304 	movi	r5,12
   4b5bc:	00419f00 	call	419f0 <__mulsi3>
   4b5c0:	00c00174 	movhi	r3,5
   4b5c4:	18fb0b04 	addi	r3,r3,-5076
   4b5c8:	10c5883a 	add	r2,r2,r3
   4b5cc:	00000106 	br	4b5d4 <lseek+0x48>
   4b5d0:	0005883a 	mov	r2,zero
   4b5d4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4b5d8:	e0bffc17 	ldw	r2,-16(fp)
   4b5dc:	10001026 	beq	r2,zero,4b620 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4b5e0:	e0bffc17 	ldw	r2,-16(fp)
   4b5e4:	10800017 	ldw	r2,0(r2)
   4b5e8:	10800717 	ldw	r2,28(r2)
   4b5ec:	10000926 	beq	r2,zero,4b614 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4b5f0:	e0bffc17 	ldw	r2,-16(fp)
   4b5f4:	10800017 	ldw	r2,0(r2)
   4b5f8:	10800717 	ldw	r2,28(r2)
   4b5fc:	e13ffc17 	ldw	r4,-16(fp)
   4b600:	e17ffe17 	ldw	r5,-8(fp)
   4b604:	e1bfff17 	ldw	r6,-4(fp)
   4b608:	103ee83a 	callr	r2
   4b60c:	e0bffb15 	stw	r2,-20(fp)
   4b610:	00000506 	br	4b628 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4b614:	00bfde84 	movi	r2,-134
   4b618:	e0bffb15 	stw	r2,-20(fp)
   4b61c:	00000206 	br	4b628 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   4b620:	00bfebc4 	movi	r2,-81
   4b624:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4b628:	e0bffb17 	ldw	r2,-20(fp)
   4b62c:	1000060e 	bge	r2,zero,4b648 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4b630:	004b53c0 	call	4b53c <alt_get_errno>
   4b634:	e0fffb17 	ldw	r3,-20(fp)
   4b638:	00c7c83a 	sub	r3,zero,r3
   4b63c:	10c00015 	stw	r3,0(r2)
    rc = -1;
   4b640:	00bfffc4 	movi	r2,-1
   4b644:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4b648:	e0bffb17 	ldw	r2,-20(fp)
}
   4b64c:	e037883a 	mov	sp,fp
   4b650:	dfc00117 	ldw	ra,4(sp)
   4b654:	df000017 	ldw	fp,0(sp)
   4b658:	dec00204 	addi	sp,sp,8
   4b65c:	f800283a 	ret

0004b660 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4b660:	defffd04 	addi	sp,sp,-12
   4b664:	dfc00215 	stw	ra,8(sp)
   4b668:	df000115 	stw	fp,4(sp)
   4b66c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4b670:	0009883a 	mov	r4,zero
   4b674:	004bb340 	call	4bb34 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4b678:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4b67c:	004bb680 	call	4bb68 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4b680:	01000174 	movhi	r4,5
   4b684:	2138f604 	addi	r4,r4,-7208
   4b688:	01400174 	movhi	r5,5
   4b68c:	2978f604 	addi	r5,r5,-7208
   4b690:	01800174 	movhi	r6,5
   4b694:	31b8f604 	addi	r6,r6,-7208
   4b698:	004d4780 	call	4d478 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4b69c:	004cfe80 	call	4cfe8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4b6a0:	01000174 	movhi	r4,5
   4b6a4:	21341104 	addi	r4,r4,-12220
   4b6a8:	004dc480 	call	4dc48 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4b6ac:	d126b917 	ldw	r4,-25884(gp)
   4b6b0:	d0e6ba17 	ldw	r3,-25880(gp)
   4b6b4:	d0a6bb17 	ldw	r2,-25876(gp)
   4b6b8:	180b883a 	mov	r5,r3
   4b6bc:	100d883a 	mov	r6,r2
   4b6c0:	00402280 	call	40228 <main>
   4b6c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4b6c8:	01000044 	movi	r4,1
   4b6cc:	004b1640 	call	4b164 <close>
  exit (result);
   4b6d0:	e13fff17 	ldw	r4,-4(fp)
   4b6d4:	004dc5c0 	call	4dc5c <exit>

0004b6d8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4b6d8:	defffe04 	addi	sp,sp,-8
   4b6dc:	df000115 	stw	fp,4(sp)
   4b6e0:	df000104 	addi	fp,sp,4
   4b6e4:	e13fff15 	stw	r4,-4(fp)
}
   4b6e8:	e037883a 	mov	sp,fp
   4b6ec:	df000017 	ldw	fp,0(sp)
   4b6f0:	dec00104 	addi	sp,sp,4
   4b6f4:	f800283a 	ret

0004b6f8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4b6f8:	defffe04 	addi	sp,sp,-8
   4b6fc:	df000115 	stw	fp,4(sp)
   4b700:	df000104 	addi	fp,sp,4
   4b704:	e13fff15 	stw	r4,-4(fp)
}
   4b708:	e037883a 	mov	sp,fp
   4b70c:	df000017 	ldw	fp,0(sp)
   4b710:	dec00104 	addi	sp,sp,4
   4b714:	f800283a 	ret

0004b718 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b718:	defffe04 	addi	sp,sp,-8
   4b71c:	dfc00115 	stw	ra,4(sp)
   4b720:	df000015 	stw	fp,0(sp)
   4b724:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b728:	00800174 	movhi	r2,5
   4b72c:	10bf9204 	addi	r2,r2,-440
   4b730:	10800017 	ldw	r2,0(r2)
   4b734:	10000526 	beq	r2,zero,4b74c <alt_get_errno+0x34>
   4b738:	00800174 	movhi	r2,5
   4b73c:	10bf9204 	addi	r2,r2,-440
   4b740:	10800017 	ldw	r2,0(r2)
   4b744:	103ee83a 	callr	r2
   4b748:	00000206 	br	4b754 <alt_get_errno+0x3c>
   4b74c:	00800174 	movhi	r2,5
   4b750:	10863804 	addi	r2,r2,6368
}
   4b754:	e037883a 	mov	sp,fp
   4b758:	dfc00117 	ldw	ra,4(sp)
   4b75c:	df000017 	ldw	fp,0(sp)
   4b760:	dec00204 	addi	sp,sp,8
   4b764:	f800283a 	ret

0004b768 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4b768:	defff904 	addi	sp,sp,-28
   4b76c:	dfc00615 	stw	ra,24(sp)
   4b770:	df000515 	stw	fp,20(sp)
   4b774:	df000504 	addi	fp,sp,20
   4b778:	e13ffd15 	stw	r4,-12(fp)
   4b77c:	e17ffe15 	stw	r5,-8(fp)
   4b780:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4b784:	e0bffd17 	ldw	r2,-12(fp)
   4b788:	10000716 	blt	r2,zero,4b7a8 <read+0x40>
   4b78c:	e13ffd17 	ldw	r4,-12(fp)
   4b790:	01400304 	movi	r5,12
   4b794:	00419f00 	call	419f0 <__mulsi3>
   4b798:	00c00174 	movhi	r3,5
   4b79c:	18fb0b04 	addi	r3,r3,-5076
   4b7a0:	10c5883a 	add	r2,r2,r3
   4b7a4:	00000106 	br	4b7ac <read+0x44>
   4b7a8:	0005883a 	mov	r2,zero
   4b7ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4b7b0:	e0bffb17 	ldw	r2,-20(fp)
   4b7b4:	10002026 	beq	r2,zero,4b838 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4b7b8:	e0bffb17 	ldw	r2,-20(fp)
   4b7bc:	10800217 	ldw	r2,8(r2)
   4b7c0:	108000cc 	andi	r2,r2,3
   4b7c4:	10800060 	cmpeqi	r2,r2,1
   4b7c8:	1000171e 	bne	r2,zero,4b828 <read+0xc0>
        (fd->dev->read))
   4b7cc:	e0bffb17 	ldw	r2,-20(fp)
   4b7d0:	10800017 	ldw	r2,0(r2)
   4b7d4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4b7d8:	10001326 	beq	r2,zero,4b828 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4b7dc:	e0bffb17 	ldw	r2,-20(fp)
   4b7e0:	10800017 	ldw	r2,0(r2)
   4b7e4:	10c00517 	ldw	r3,20(r2)
   4b7e8:	e0bfff17 	ldw	r2,-4(fp)
   4b7ec:	e13ffb17 	ldw	r4,-20(fp)
   4b7f0:	e17ffe17 	ldw	r5,-8(fp)
   4b7f4:	100d883a 	mov	r6,r2
   4b7f8:	183ee83a 	callr	r3
   4b7fc:	e0bffc15 	stw	r2,-16(fp)
   4b800:	e0bffc17 	ldw	r2,-16(fp)
   4b804:	1000060e 	bge	r2,zero,4b820 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4b808:	004b7180 	call	4b718 <alt_get_errno>
   4b80c:	e0fffc17 	ldw	r3,-16(fp)
   4b810:	00c7c83a 	sub	r3,zero,r3
   4b814:	10c00015 	stw	r3,0(r2)
          return -1;
   4b818:	00bfffc4 	movi	r2,-1
   4b81c:	00000a06 	br	4b848 <read+0xe0>
        }
        return rval;
   4b820:	e0bffc17 	ldw	r2,-16(fp)
   4b824:	00000806 	br	4b848 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4b828:	004b7180 	call	4b718 <alt_get_errno>
   4b82c:	00c00344 	movi	r3,13
   4b830:	10c00015 	stw	r3,0(r2)
   4b834:	00000306 	br	4b844 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4b838:	004b7180 	call	4b718 <alt_get_errno>
   4b83c:	00c01444 	movi	r3,81
   4b840:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4b844:	00bfffc4 	movi	r2,-1
}
   4b848:	e037883a 	mov	sp,fp
   4b84c:	dfc00117 	ldw	ra,4(sp)
   4b850:	df000017 	ldw	fp,0(sp)
   4b854:	dec00204 	addi	sp,sp,8
   4b858:	f800283a 	ret

0004b85c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4b85c:	defffc04 	addi	sp,sp,-16
   4b860:	dfc00315 	stw	ra,12(sp)
   4b864:	df000215 	stw	fp,8(sp)
   4b868:	dc000115 	stw	r16,4(sp)
   4b86c:	df000104 	addi	fp,sp,4
   4b870:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4b874:	e0bfff17 	ldw	r2,-4(fp)
   4b878:	108000d0 	cmplti	r2,r2,3
   4b87c:	1000111e 	bne	r2,zero,4b8c4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   4b880:	04000174 	movhi	r16,5
   4b884:	843b0b04 	addi	r16,r16,-5076
   4b888:	e0bfff17 	ldw	r2,-4(fp)
   4b88c:	1009883a 	mov	r4,r2
   4b890:	01400304 	movi	r5,12
   4b894:	00419f00 	call	419f0 <__mulsi3>
   4b898:	8085883a 	add	r2,r16,r2
   4b89c:	10800204 	addi	r2,r2,8
   4b8a0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4b8a4:	04000174 	movhi	r16,5
   4b8a8:	843b0b04 	addi	r16,r16,-5076
   4b8ac:	e0bfff17 	ldw	r2,-4(fp)
   4b8b0:	1009883a 	mov	r4,r2
   4b8b4:	01400304 	movi	r5,12
   4b8b8:	00419f00 	call	419f0 <__mulsi3>
   4b8bc:	8085883a 	add	r2,r16,r2
   4b8c0:	10000015 	stw	zero,0(r2)
  }
}
   4b8c4:	e037883a 	mov	sp,fp
   4b8c8:	dfc00217 	ldw	ra,8(sp)
   4b8cc:	df000117 	ldw	fp,4(sp)
   4b8d0:	dc000017 	ldw	r16,0(sp)
   4b8d4:	dec00304 	addi	sp,sp,12
   4b8d8:	f800283a 	ret

0004b8dc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4b8dc:	defff904 	addi	sp,sp,-28
   4b8e0:	df000615 	stw	fp,24(sp)
   4b8e4:	df000604 	addi	fp,sp,24
   4b8e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b8ec:	0005303a 	rdctl	r2,status
   4b8f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b8f4:	e0fffc17 	ldw	r3,-16(fp)
   4b8f8:	00bfff84 	movi	r2,-2
   4b8fc:	1884703a 	and	r2,r3,r2
   4b900:	1001703a 	wrctl	status,r2
  
  return context;
   4b904:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4b908:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4b90c:	d0a01017 	ldw	r2,-32704(gp)
   4b910:	10c000c4 	addi	r3,r2,3
   4b914:	00bfff04 	movi	r2,-4
   4b918:	1884703a 	and	r2,r3,r2
   4b91c:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4b920:	d0e01017 	ldw	r3,-32704(gp)
   4b924:	e0bfff17 	ldw	r2,-4(fp)
   4b928:	1885883a 	add	r2,r3,r2
   4b92c:	00c001b4 	movhi	r3,6
   4b930:	18c00004 	addi	r3,r3,0
   4b934:	1880062e 	bgeu	r3,r2,4b950 <sbrk+0x74>
   4b938:	e0bffa17 	ldw	r2,-24(fp)
   4b93c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b940:	e0bffd17 	ldw	r2,-12(fp)
   4b944:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4b948:	00bfffc4 	movi	r2,-1
   4b94c:	00000b06 	br	4b97c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4b950:	d0a01017 	ldw	r2,-32704(gp)
   4b954:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   4b958:	d0e01017 	ldw	r3,-32704(gp)
   4b95c:	e0bfff17 	ldw	r2,-4(fp)
   4b960:	1885883a 	add	r2,r3,r2
   4b964:	d0a01015 	stw	r2,-32704(gp)
   4b968:	e0bffa17 	ldw	r2,-24(fp)
   4b96c:	e0bffe15 	stw	r2,-8(fp)
   4b970:	e0bffe17 	ldw	r2,-8(fp)
   4b974:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4b978:	e0bffb17 	ldw	r2,-20(fp)
} 
   4b97c:	e037883a 	mov	sp,fp
   4b980:	df000017 	ldw	fp,0(sp)
   4b984:	dec00104 	addi	sp,sp,4
   4b988:	f800283a 	ret

0004b98c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   4b98c:	defffd04 	addi	sp,sp,-12
   4b990:	dfc00215 	stw	ra,8(sp)
   4b994:	df000115 	stw	fp,4(sp)
   4b998:	df000104 	addi	fp,sp,4
   4b99c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   4b9a0:	e13fff17 	ldw	r4,-4(fp)
   4b9a4:	004cd880 	call	4cd88 <alt_busy_sleep>
}
   4b9a8:	e037883a 	mov	sp,fp
   4b9ac:	dfc00117 	ldw	ra,4(sp)
   4b9b0:	df000017 	ldw	fp,0(sp)
   4b9b4:	dec00204 	addi	sp,sp,8
   4b9b8:	f800283a 	ret

0004b9bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b9bc:	defffe04 	addi	sp,sp,-8
   4b9c0:	dfc00115 	stw	ra,4(sp)
   4b9c4:	df000015 	stw	fp,0(sp)
   4b9c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b9cc:	00800174 	movhi	r2,5
   4b9d0:	10bf9204 	addi	r2,r2,-440
   4b9d4:	10800017 	ldw	r2,0(r2)
   4b9d8:	10000526 	beq	r2,zero,4b9f0 <alt_get_errno+0x34>
   4b9dc:	00800174 	movhi	r2,5
   4b9e0:	10bf9204 	addi	r2,r2,-440
   4b9e4:	10800017 	ldw	r2,0(r2)
   4b9e8:	103ee83a 	callr	r2
   4b9ec:	00000206 	br	4b9f8 <alt_get_errno+0x3c>
   4b9f0:	00800174 	movhi	r2,5
   4b9f4:	10863804 	addi	r2,r2,6368
}
   4b9f8:	e037883a 	mov	sp,fp
   4b9fc:	dfc00117 	ldw	ra,4(sp)
   4ba00:	df000017 	ldw	fp,0(sp)
   4ba04:	dec00204 	addi	sp,sp,8
   4ba08:	f800283a 	ret

0004ba0c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4ba0c:	defff904 	addi	sp,sp,-28
   4ba10:	dfc00615 	stw	ra,24(sp)
   4ba14:	df000515 	stw	fp,20(sp)
   4ba18:	df000504 	addi	fp,sp,20
   4ba1c:	e13ffd15 	stw	r4,-12(fp)
   4ba20:	e17ffe15 	stw	r5,-8(fp)
   4ba24:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4ba28:	e0bffd17 	ldw	r2,-12(fp)
   4ba2c:	10000716 	blt	r2,zero,4ba4c <write+0x40>
   4ba30:	e13ffd17 	ldw	r4,-12(fp)
   4ba34:	01400304 	movi	r5,12
   4ba38:	00419f00 	call	419f0 <__mulsi3>
   4ba3c:	00c00174 	movhi	r3,5
   4ba40:	18fb0b04 	addi	r3,r3,-5076
   4ba44:	10c5883a 	add	r2,r2,r3
   4ba48:	00000106 	br	4ba50 <write+0x44>
   4ba4c:	0005883a 	mov	r2,zero
   4ba50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4ba54:	e0bffb17 	ldw	r2,-20(fp)
   4ba58:	10001f26 	beq	r2,zero,4bad8 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4ba5c:	e0bffb17 	ldw	r2,-20(fp)
   4ba60:	10800217 	ldw	r2,8(r2)
   4ba64:	108000cc 	andi	r2,r2,3
   4ba68:	10001726 	beq	r2,zero,4bac8 <write+0xbc>
   4ba6c:	e0bffb17 	ldw	r2,-20(fp)
   4ba70:	10800017 	ldw	r2,0(r2)
   4ba74:	10800617 	ldw	r2,24(r2)
   4ba78:	10001326 	beq	r2,zero,4bac8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4ba7c:	e0bffb17 	ldw	r2,-20(fp)
   4ba80:	10800017 	ldw	r2,0(r2)
   4ba84:	10c00617 	ldw	r3,24(r2)
   4ba88:	e0bfff17 	ldw	r2,-4(fp)
   4ba8c:	e13ffb17 	ldw	r4,-20(fp)
   4ba90:	e17ffe17 	ldw	r5,-8(fp)
   4ba94:	100d883a 	mov	r6,r2
   4ba98:	183ee83a 	callr	r3
   4ba9c:	e0bffc15 	stw	r2,-16(fp)
   4baa0:	e0bffc17 	ldw	r2,-16(fp)
   4baa4:	1000060e 	bge	r2,zero,4bac0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   4baa8:	004b9bc0 	call	4b9bc <alt_get_errno>
   4baac:	e0fffc17 	ldw	r3,-16(fp)
   4bab0:	00c7c83a 	sub	r3,zero,r3
   4bab4:	10c00015 	stw	r3,0(r2)
        return -1;
   4bab8:	00bfffc4 	movi	r2,-1
   4babc:	00000a06 	br	4bae8 <write+0xdc>
      }
      return rval;
   4bac0:	e0bffc17 	ldw	r2,-16(fp)
   4bac4:	00000806 	br	4bae8 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4bac8:	004b9bc0 	call	4b9bc <alt_get_errno>
   4bacc:	00c00344 	movi	r3,13
   4bad0:	10c00015 	stw	r3,0(r2)
   4bad4:	00000306 	br	4bae4 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4bad8:	004b9bc0 	call	4b9bc <alt_get_errno>
   4badc:	00c01444 	movi	r3,81
   4bae0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4bae4:	00bfffc4 	movi	r2,-1
}
   4bae8:	e037883a 	mov	sp,fp
   4baec:	dfc00117 	ldw	ra,4(sp)
   4baf0:	df000017 	ldw	fp,0(sp)
   4baf4:	dec00204 	addi	sp,sp,8
   4baf8:	f800283a 	ret

0004bafc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4bafc:	defffd04 	addi	sp,sp,-12
   4bb00:	dfc00215 	stw	ra,8(sp)
   4bb04:	df000115 	stw	fp,4(sp)
   4bb08:	df000104 	addi	fp,sp,4
   4bb0c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4bb10:	e13fff17 	ldw	r4,-4(fp)
   4bb14:	01400174 	movhi	r5,5
   4bb18:	297f8f04 	addi	r5,r5,-452
   4bb1c:	004cf480 	call	4cf48 <alt_dev_llist_insert>
}
   4bb20:	e037883a 	mov	sp,fp
   4bb24:	dfc00117 	ldw	ra,4(sp)
   4bb28:	df000017 	ldw	fp,0(sp)
   4bb2c:	dec00204 	addi	sp,sp,8
   4bb30:	f800283a 	ret

0004bb34 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4bb34:	defffd04 	addi	sp,sp,-12
   4bb38:	dfc00215 	stw	ra,8(sp)
   4bb3c:	df000115 	stw	fp,4(sp)
   4bb40:	df000104 	addi	fp,sp,4
   4bb44:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_C, cpu_C);
   4bb48:	004d9240 	call	4d924 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4bb4c:	00800044 	movi	r2,1
   4bb50:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4bb54:	e037883a 	mov	sp,fp
   4bb58:	dfc00117 	ldw	ra,4(sp)
   4bb5c:	df000017 	ldw	fp,0(sp)
   4bb60:	dec00204 	addi	sp,sp,8
   4bb64:	f800283a 	ret

0004bb68 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4bb68:	defffe04 	addi	sp,sp,-8
   4bb6c:	dfc00115 	stw	ra,4(sp)
   4bb70:	df000015 	stw	fp,0(sp)
   4bb74:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGHTIMER_C, highTimer_C);
   4bb78:	00800174 	movhi	r2,5
   4bb7c:	10863f04 	addi	r2,r2,6396
   4bb80:	00c20074 	movhi	r3,2049
   4bb84:	18c41804 	addi	r3,r3,4192
   4bb88:	10c00015 	stw	r3,0(r2)
   4bb8c:	00800174 	movhi	r2,5
   4bb90:	10864004 	addi	r2,r2,6400
   4bb94:	00c17db4 	movhi	r3,1526
   4bb98:	18f84004 	addi	r3,r3,-7936
   4bb9c:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_C, timer_C);
   4bba0:	01020074 	movhi	r4,2049
   4bba4:	21041004 	addi	r4,r4,4160
   4bba8:	000b883a 	mov	r5,zero
   4bbac:	000d883a 	mov	r6,zero
   4bbb0:	01c0fa04 	movi	r7,1000
   4bbb4:	004cbc00 	call	4cbc0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_BC, fifo_BC);
   4bbb8:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_CD, fifo_CD);
   4bbbc:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_C, jtag_C);
   4bbc0:	01000174 	movhi	r4,5
   4bbc4:	213b7504 	addi	r4,r4,-4652
   4bbc8:	000b883a 	mov	r5,zero
   4bbcc:	01800084 	movi	r6,2
   4bbd0:	004c24c0 	call	4c24c <altera_avalon_jtag_uart_init>
   4bbd4:	01000174 	movhi	r4,5
   4bbd8:	213b6b04 	addi	r4,r4,-4692
   4bbdc:	004bafc0 	call	4bafc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_C, sysid_C);
   4bbe0:	0001883a 	nop
}
   4bbe4:	e037883a 	mov	sp,fp
   4bbe8:	dfc00117 	ldw	ra,4(sp)
   4bbec:	df000017 	ldw	fp,0(sp)
   4bbf0:	dec00204 	addi	sp,sp,8
   4bbf4:	f800283a 	ret

0004bbf8 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   4bbf8:	defffa04 	addi	sp,sp,-24
   4bbfc:	dfc00515 	stw	ra,20(sp)
   4bc00:	df000415 	stw	fp,16(sp)
   4bc04:	df000404 	addi	fp,sp,16
   4bc08:	e13ffc15 	stw	r4,-16(fp)
   4bc0c:	e17ffd15 	stw	r5,-12(fp)
   4bc10:	e1bffe15 	stw	r6,-8(fp)
   4bc14:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   4bc18:	e13ffc17 	ldw	r4,-16(fp)
   4bc1c:	01400fc4 	movi	r5,63
   4bc20:	004bdc40 	call	4bdc4 <altera_avalon_fifo_clear_event>
   4bc24:	10000226 	beq	r2,zero,4bc30 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4bc28:	00bfffc4 	movi	r2,-1
   4bc2c:	00001306 	br	4bc7c <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   4bc30:	e13ffc17 	ldw	r4,-16(fp)
   4bc34:	e17ffd17 	ldw	r5,-12(fp)
   4bc38:	004be200 	call	4be20 <altera_avalon_fifo_write_ienable>
   4bc3c:	10000226 	beq	r2,zero,4bc48 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4bc40:	00bfff84 	movi	r2,-2
   4bc44:	00000d06 	br	4bc7c <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   4bc48:	e13ffc17 	ldw	r4,-16(fp)
   4bc4c:	e17fff17 	ldw	r5,-4(fp)
   4bc50:	004be780 	call	4be78 <altera_avalon_fifo_write_almostfull>
   4bc54:	10000226 	beq	r2,zero,4bc60 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4bc58:	00bfff44 	movi	r2,-3
   4bc5c:	00000706 	br	4bc7c <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   4bc60:	e13ffc17 	ldw	r4,-16(fp)
   4bc64:	e17ffe17 	ldw	r5,-8(fp)
   4bc68:	004bed00 	call	4bed0 <altera_avalon_fifo_write_almostempty>
   4bc6c:	10000226 	beq	r2,zero,4bc78 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4bc70:	00bfff44 	movi	r2,-3
   4bc74:	00000106 	br	4bc7c <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   4bc78:	0005883a 	mov	r2,zero
}
   4bc7c:	e037883a 	mov	sp,fp
   4bc80:	dfc00117 	ldw	ra,4(sp)
   4bc84:	df000017 	ldw	fp,0(sp)
   4bc88:	dec00204 	addi	sp,sp,8
   4bc8c:	f800283a 	ret

0004bc90 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   4bc90:	defffd04 	addi	sp,sp,-12
   4bc94:	df000215 	stw	fp,8(sp)
   4bc98:	df000204 	addi	fp,sp,8
   4bc9c:	e13ffe15 	stw	r4,-8(fp)
   4bca0:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   4bca4:	e0bffe17 	ldw	r2,-8(fp)
   4bca8:	10800104 	addi	r2,r2,4
   4bcac:	10800037 	ldwio	r2,0(r2)
   4bcb0:	1007883a 	mov	r3,r2
   4bcb4:	e0bfff17 	ldw	r2,-4(fp)
   4bcb8:	1884703a 	and	r2,r3,r2
}
   4bcbc:	e037883a 	mov	sp,fp
   4bcc0:	df000017 	ldw	fp,0(sp)
   4bcc4:	dec00104 	addi	sp,sp,4
   4bcc8:	f800283a 	ret

0004bccc <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   4bccc:	defffd04 	addi	sp,sp,-12
   4bcd0:	df000215 	stw	fp,8(sp)
   4bcd4:	df000204 	addi	fp,sp,8
   4bcd8:	e13ffe15 	stw	r4,-8(fp)
   4bcdc:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   4bce0:	e0bffe17 	ldw	r2,-8(fp)
   4bce4:	10800304 	addi	r2,r2,12
   4bce8:	10800037 	ldwio	r2,0(r2)
   4bcec:	1007883a 	mov	r3,r2
   4bcf0:	e0bfff17 	ldw	r2,-4(fp)
   4bcf4:	1884703a 	and	r2,r3,r2
}
   4bcf8:	e037883a 	mov	sp,fp
   4bcfc:	df000017 	ldw	fp,0(sp)
   4bd00:	dec00104 	addi	sp,sp,4
   4bd04:	f800283a 	ret

0004bd08 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   4bd08:	defffe04 	addi	sp,sp,-8
   4bd0c:	df000115 	stw	fp,4(sp)
   4bd10:	df000104 	addi	fp,sp,4
   4bd14:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   4bd18:	e0bfff17 	ldw	r2,-4(fp)
   4bd1c:	10800404 	addi	r2,r2,16
   4bd20:	10800037 	ldwio	r2,0(r2)
}
   4bd24:	e037883a 	mov	sp,fp
   4bd28:	df000017 	ldw	fp,0(sp)
   4bd2c:	dec00104 	addi	sp,sp,4
   4bd30:	f800283a 	ret

0004bd34 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   4bd34:	defffe04 	addi	sp,sp,-8
   4bd38:	df000115 	stw	fp,4(sp)
   4bd3c:	df000104 	addi	fp,sp,4
   4bd40:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   4bd44:	e0bfff17 	ldw	r2,-4(fp)
   4bd48:	10800504 	addi	r2,r2,20
   4bd4c:	10800037 	ldwio	r2,0(r2)
}
   4bd50:	e037883a 	mov	sp,fp
   4bd54:	df000017 	ldw	fp,0(sp)
   4bd58:	dec00104 	addi	sp,sp,4
   4bd5c:	f800283a 	ret

0004bd60 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   4bd60:	defffd04 	addi	sp,sp,-12
   4bd64:	df000215 	stw	fp,8(sp)
   4bd68:	df000204 	addi	fp,sp,8
   4bd6c:	e13ffe15 	stw	r4,-8(fp)
   4bd70:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   4bd74:	e0bffe17 	ldw	r2,-8(fp)
   4bd78:	10800204 	addi	r2,r2,8
   4bd7c:	10800037 	ldwio	r2,0(r2)
   4bd80:	1007883a 	mov	r3,r2
   4bd84:	e0bfff17 	ldw	r2,-4(fp)
   4bd88:	1884703a 	and	r2,r3,r2
}
   4bd8c:	e037883a 	mov	sp,fp
   4bd90:	df000017 	ldw	fp,0(sp)
   4bd94:	dec00104 	addi	sp,sp,4
   4bd98:	f800283a 	ret

0004bd9c <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   4bd9c:	defffe04 	addi	sp,sp,-8
   4bda0:	df000115 	stw	fp,4(sp)
   4bda4:	df000104 	addi	fp,sp,4
   4bda8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   4bdac:	e0bfff17 	ldw	r2,-4(fp)
   4bdb0:	10800037 	ldwio	r2,0(r2)
}
   4bdb4:	e037883a 	mov	sp,fp
   4bdb8:	df000017 	ldw	fp,0(sp)
   4bdbc:	dec00104 	addi	sp,sp,4
   4bdc0:	f800283a 	ret

0004bdc4 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   4bdc4:	defffd04 	addi	sp,sp,-12
   4bdc8:	df000215 	stw	fp,8(sp)
   4bdcc:	df000204 	addi	fp,sp,8
   4bdd0:	e13ffe15 	stw	r4,-8(fp)
   4bdd4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   4bdd8:	e0bffe17 	ldw	r2,-8(fp)
   4bddc:	10800204 	addi	r2,r2,8
   4bde0:	e0ffff17 	ldw	r3,-4(fp)
   4bde4:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   4bde8:	e0bffe17 	ldw	r2,-8(fp)
   4bdec:	10800204 	addi	r2,r2,8
   4bdf0:	10800037 	ldwio	r2,0(r2)
   4bdf4:	1007883a 	mov	r3,r2
   4bdf8:	e0bfff17 	ldw	r2,-4(fp)
   4bdfc:	1884703a 	and	r2,r3,r2
   4be00:	1000021e 	bne	r2,zero,4be0c <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   4be04:	0005883a 	mov	r2,zero
   4be08:	00000106 	br	4be10 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4be0c:	00bfffc4 	movi	r2,-1
}
   4be10:	e037883a 	mov	sp,fp
   4be14:	df000017 	ldw	fp,0(sp)
   4be18:	dec00104 	addi	sp,sp,4
   4be1c:	f800283a 	ret

0004be20 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   4be20:	defffd04 	addi	sp,sp,-12
   4be24:	df000215 	stw	fp,8(sp)
   4be28:	df000204 	addi	fp,sp,8
   4be2c:	e13ffe15 	stw	r4,-8(fp)
   4be30:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   4be34:	e0bffe17 	ldw	r2,-8(fp)
   4be38:	10800304 	addi	r2,r2,12
   4be3c:	e0ffff17 	ldw	r3,-4(fp)
   4be40:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   4be44:	e0bffe17 	ldw	r2,-8(fp)
   4be48:	10800304 	addi	r2,r2,12
   4be4c:	10800037 	ldwio	r2,0(r2)
   4be50:	1007883a 	mov	r3,r2
   4be54:	e0bfff17 	ldw	r2,-4(fp)
   4be58:	1880021e 	bne	r3,r2,4be64 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   4be5c:	0005883a 	mov	r2,zero
   4be60:	00000106 	br	4be68 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4be64:	00bfff84 	movi	r2,-2
}
   4be68:	e037883a 	mov	sp,fp
   4be6c:	df000017 	ldw	fp,0(sp)
   4be70:	dec00104 	addi	sp,sp,4
   4be74:	f800283a 	ret

0004be78 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   4be78:	defffd04 	addi	sp,sp,-12
   4be7c:	df000215 	stw	fp,8(sp)
   4be80:	df000204 	addi	fp,sp,8
   4be84:	e13ffe15 	stw	r4,-8(fp)
   4be88:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   4be8c:	e0bffe17 	ldw	r2,-8(fp)
   4be90:	10800404 	addi	r2,r2,16
   4be94:	e0ffff17 	ldw	r3,-4(fp)
   4be98:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   4be9c:	e0bffe17 	ldw	r2,-8(fp)
   4bea0:	10800404 	addi	r2,r2,16
   4bea4:	10800037 	ldwio	r2,0(r2)
   4bea8:	1007883a 	mov	r3,r2
   4beac:	e0bfff17 	ldw	r2,-4(fp)
   4beb0:	1880021e 	bne	r3,r2,4bebc <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   4beb4:	0005883a 	mov	r2,zero
   4beb8:	00000106 	br	4bec0 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4bebc:	00bfff44 	movi	r2,-3
}
   4bec0:	e037883a 	mov	sp,fp
   4bec4:	df000017 	ldw	fp,0(sp)
   4bec8:	dec00104 	addi	sp,sp,4
   4becc:	f800283a 	ret

0004bed0 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   4bed0:	defffd04 	addi	sp,sp,-12
   4bed4:	df000215 	stw	fp,8(sp)
   4bed8:	df000204 	addi	fp,sp,8
   4bedc:	e13ffe15 	stw	r4,-8(fp)
   4bee0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   4bee4:	e0bffe17 	ldw	r2,-8(fp)
   4bee8:	10800504 	addi	r2,r2,20
   4beec:	e0ffff17 	ldw	r3,-4(fp)
   4bef0:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   4bef4:	e0bffe17 	ldw	r2,-8(fp)
   4bef8:	10800504 	addi	r2,r2,20
   4befc:	10800037 	ldwio	r2,0(r2)
   4bf00:	1007883a 	mov	r3,r2
   4bf04:	e0bfff17 	ldw	r2,-4(fp)
   4bf08:	1880021e 	bne	r3,r2,4bf14 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   4bf0c:	0005883a 	mov	r2,zero
   4bf10:	00000106 	br	4bf18 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4bf14:	00bfff44 	movi	r2,-3
}
   4bf18:	e037883a 	mov	sp,fp
   4bf1c:	df000017 	ldw	fp,0(sp)
   4bf20:	dec00104 	addi	sp,sp,4
   4bf24:	f800283a 	ret

0004bf28 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   4bf28:	defffb04 	addi	sp,sp,-20
   4bf2c:	dfc00415 	stw	ra,16(sp)
   4bf30:	df000315 	stw	fp,12(sp)
   4bf34:	df000304 	addi	fp,sp,12
   4bf38:	e13ffd15 	stw	r4,-12(fp)
   4bf3c:	e17ffe15 	stw	r5,-8(fp)
   4bf40:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4bf44:	e13ffe17 	ldw	r4,-8(fp)
   4bf48:	01400044 	movi	r5,1
   4bf4c:	004bc900 	call	4bc90 <altera_avalon_fifo_read_status>
   4bf50:	1000051e 	bne	r2,zero,4bf68 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   4bf54:	e0bffd17 	ldw	r2,-12(fp)
   4bf58:	e0ffff17 	ldw	r3,-4(fp)
   4bf5c:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   4bf60:	0005883a 	mov	r2,zero
   4bf64:	00000106 	br	4bf6c <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   4bf68:	00bfff04 	movi	r2,-4
    }
}
   4bf6c:	e037883a 	mov	sp,fp
   4bf70:	dfc00117 	ldw	ra,4(sp)
   4bf74:	df000017 	ldw	fp,0(sp)
   4bf78:	dec00204 	addi	sp,sp,8
   4bf7c:	f800283a 	ret

0004bf80 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   4bf80:	defffa04 	addi	sp,sp,-24
   4bf84:	dfc00515 	stw	ra,20(sp)
   4bf88:	df000415 	stw	fp,16(sp)
   4bf8c:	df000404 	addi	fp,sp,16
   4bf90:	e13ffd15 	stw	r4,-12(fp)
   4bf94:	e17ffe15 	stw	r5,-8(fp)
   4bf98:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   4bf9c:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   4bfa0:	e0bfff17 	ldw	r2,-4(fp)
   4bfa4:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   4bfa8:	e13ffe17 	ldw	r4,-8(fp)
   4bfac:	01400084 	movi	r5,2
   4bfb0:	004bc900 	call	4bc90 <altera_avalon_fifo_read_status>
   4bfb4:	1000071e 	bne	r2,zero,4bfd4 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   4bfb8:	e13ffe17 	ldw	r4,-8(fp)
   4bfbc:	004bd9c0 	call	4bd9c <altera_avalon_fifo_read_level>
   4bfc0:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4bfc4:	e0bffd17 	ldw	r2,-12(fp)
   4bfc8:	10c00037 	ldwio	r3,0(r2)
   4bfcc:	e0bfff17 	ldw	r2,-4(fp)
   4bfd0:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   4bfd4:	e0bffc17 	ldw	r2,-16(fp)
}
   4bfd8:	e037883a 	mov	sp,fp
   4bfdc:	dfc00117 	ldw	ra,4(sp)
   4bfe0:	df000017 	ldw	fp,0(sp)
   4bfe4:	dec00204 	addi	sp,sp,8
   4bfe8:	f800283a 	ret

0004bfec <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   4bfec:	defffc04 	addi	sp,sp,-16
   4bff0:	dfc00315 	stw	ra,12(sp)
   4bff4:	df000215 	stw	fp,8(sp)
   4bff8:	df000204 	addi	fp,sp,8
   4bffc:	e13ffe15 	stw	r4,-8(fp)
   4c000:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   4c004:	e13fff17 	ldw	r4,-4(fp)
   4c008:	01400084 	movi	r5,2
   4c00c:	004bc900 	call	4bc90 <altera_avalon_fifo_read_status>
   4c010:	1000031e 	bne	r2,zero,4c020 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4c014:	e0bffe17 	ldw	r2,-8(fp)
   4c018:	10800037 	ldwio	r2,0(r2)
   4c01c:	00000106 	br	4c024 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   4c020:	0005883a 	mov	r2,zero
}
   4c024:	e037883a 	mov	sp,fp
   4c028:	dfc00117 	ldw	ra,4(sp)
   4c02c:	df000017 	ldw	fp,0(sp)
   4c030:	dec00204 	addi	sp,sp,8
   4c034:	f800283a 	ret

0004c038 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   4c038:	defffb04 	addi	sp,sp,-20
   4c03c:	dfc00415 	stw	ra,16(sp)
   4c040:	df000315 	stw	fp,12(sp)
   4c044:	df000304 	addi	fp,sp,12
   4c048:	e13ffd15 	stw	r4,-12(fp)
   4c04c:	e17ffe15 	stw	r5,-8(fp)
   4c050:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4c054:	e13ffe17 	ldw	r4,-8(fp)
   4c058:	01400044 	movi	r5,1
   4c05c:	004bc900 	call	4bc90 <altera_avalon_fifo_read_status>
   4c060:	1000061e 	bne	r2,zero,4c07c <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   4c064:	e0bffd17 	ldw	r2,-12(fp)
   4c068:	10800104 	addi	r2,r2,4
   4c06c:	e0ffff17 	ldw	r3,-4(fp)
   4c070:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   4c074:	0005883a 	mov	r2,zero
   4c078:	00000106 	br	4c080 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   4c07c:	00bfff04 	movi	r2,-4
    }
}
   4c080:	e037883a 	mov	sp,fp
   4c084:	dfc00117 	ldw	ra,4(sp)
   4c088:	df000017 	ldw	fp,0(sp)
   4c08c:	dec00204 	addi	sp,sp,8
   4c090:	f800283a 	ret

0004c094 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   4c094:	defffe04 	addi	sp,sp,-8
   4c098:	df000115 	stw	fp,4(sp)
   4c09c:	df000104 	addi	fp,sp,4
   4c0a0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   4c0a4:	e0bfff17 	ldw	r2,-4(fp)
   4c0a8:	10800104 	addi	r2,r2,4
   4c0ac:	10800037 	ldwio	r2,0(r2)
}
   4c0b0:	e037883a 	mov	sp,fp
   4c0b4:	df000017 	ldw	fp,0(sp)
   4c0b8:	dec00104 	addi	sp,sp,4
   4c0bc:	f800283a 	ret

0004c0c0 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   4c0c0:	defffe04 	addi	sp,sp,-8
   4c0c4:	df000115 	stw	fp,4(sp)
   4c0c8:	df000104 	addi	fp,sp,4
   4c0cc:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   4c0d0:	e0bfff17 	ldw	r2,-4(fp)
   4c0d4:	10800037 	ldwio	r2,0(r2)
}
   4c0d8:	e037883a 	mov	sp,fp
   4c0dc:	df000017 	ldw	fp,0(sp)
   4c0e0:	dec00104 	addi	sp,sp,4
   4c0e4:	f800283a 	ret

0004c0e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4c0e8:	defffa04 	addi	sp,sp,-24
   4c0ec:	dfc00515 	stw	ra,20(sp)
   4c0f0:	df000415 	stw	fp,16(sp)
   4c0f4:	df000404 	addi	fp,sp,16
   4c0f8:	e13ffd15 	stw	r4,-12(fp)
   4c0fc:	e17ffe15 	stw	r5,-8(fp)
   4c100:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4c104:	e0bffd17 	ldw	r2,-12(fp)
   4c108:	10800017 	ldw	r2,0(r2)
   4c10c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4c110:	e0bffc17 	ldw	r2,-16(fp)
   4c114:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4c118:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4c11c:	10800217 	ldw	r2,8(r2)
   4c120:	1809883a 	mov	r4,r3
   4c124:	e17ffe17 	ldw	r5,-8(fp)
   4c128:	e1bfff17 	ldw	r6,-4(fp)
   4c12c:	100f883a 	mov	r7,r2
   4c130:	004c7100 	call	4c710 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4c134:	e037883a 	mov	sp,fp
   4c138:	dfc00117 	ldw	ra,4(sp)
   4c13c:	df000017 	ldw	fp,0(sp)
   4c140:	dec00204 	addi	sp,sp,8
   4c144:	f800283a 	ret

0004c148 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4c148:	defffa04 	addi	sp,sp,-24
   4c14c:	dfc00515 	stw	ra,20(sp)
   4c150:	df000415 	stw	fp,16(sp)
   4c154:	df000404 	addi	fp,sp,16
   4c158:	e13ffd15 	stw	r4,-12(fp)
   4c15c:	e17ffe15 	stw	r5,-8(fp)
   4c160:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4c164:	e0bffd17 	ldw	r2,-12(fp)
   4c168:	10800017 	ldw	r2,0(r2)
   4c16c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4c170:	e0bffc17 	ldw	r2,-16(fp)
   4c174:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4c178:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4c17c:	10800217 	ldw	r2,8(r2)
   4c180:	1809883a 	mov	r4,r3
   4c184:	e17ffe17 	ldw	r5,-8(fp)
   4c188:	e1bfff17 	ldw	r6,-4(fp)
   4c18c:	100f883a 	mov	r7,r2
   4c190:	004c9280 	call	4c928 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4c194:	e037883a 	mov	sp,fp
   4c198:	dfc00117 	ldw	ra,4(sp)
   4c19c:	df000017 	ldw	fp,0(sp)
   4c1a0:	dec00204 	addi	sp,sp,8
   4c1a4:	f800283a 	ret

0004c1a8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4c1a8:	defffc04 	addi	sp,sp,-16
   4c1ac:	dfc00315 	stw	ra,12(sp)
   4c1b0:	df000215 	stw	fp,8(sp)
   4c1b4:	df000204 	addi	fp,sp,8
   4c1b8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4c1bc:	e0bfff17 	ldw	r2,-4(fp)
   4c1c0:	10800017 	ldw	r2,0(r2)
   4c1c4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4c1c8:	e0bffe17 	ldw	r2,-8(fp)
   4c1cc:	10c00a04 	addi	r3,r2,40
   4c1d0:	e0bfff17 	ldw	r2,-4(fp)
   4c1d4:	10800217 	ldw	r2,8(r2)
   4c1d8:	1809883a 	mov	r4,r3
   4c1dc:	100b883a 	mov	r5,r2
   4c1e0:	004c5b40 	call	4c5b4 <altera_avalon_jtag_uart_close>
}
   4c1e4:	e037883a 	mov	sp,fp
   4c1e8:	dfc00117 	ldw	ra,4(sp)
   4c1ec:	df000017 	ldw	fp,0(sp)
   4c1f0:	dec00204 	addi	sp,sp,8
   4c1f4:	f800283a 	ret

0004c1f8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4c1f8:	defffa04 	addi	sp,sp,-24
   4c1fc:	dfc00515 	stw	ra,20(sp)
   4c200:	df000415 	stw	fp,16(sp)
   4c204:	df000404 	addi	fp,sp,16
   4c208:	e13ffd15 	stw	r4,-12(fp)
   4c20c:	e17ffe15 	stw	r5,-8(fp)
   4c210:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4c214:	e0bffd17 	ldw	r2,-12(fp)
   4c218:	10800017 	ldw	r2,0(r2)
   4c21c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4c220:	e0bffc17 	ldw	r2,-16(fp)
   4c224:	10800a04 	addi	r2,r2,40
   4c228:	1009883a 	mov	r4,r2
   4c22c:	e17ffe17 	ldw	r5,-8(fp)
   4c230:	e1bfff17 	ldw	r6,-4(fp)
   4c234:	004c61c0 	call	4c61c <altera_avalon_jtag_uart_ioctl>
}
   4c238:	e037883a 	mov	sp,fp
   4c23c:	dfc00117 	ldw	ra,4(sp)
   4c240:	df000017 	ldw	fp,0(sp)
   4c244:	dec00204 	addi	sp,sp,8
   4c248:	f800283a 	ret

0004c24c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4c24c:	defffa04 	addi	sp,sp,-24
   4c250:	dfc00515 	stw	ra,20(sp)
   4c254:	df000415 	stw	fp,16(sp)
   4c258:	df000404 	addi	fp,sp,16
   4c25c:	e13ffd15 	stw	r4,-12(fp)
   4c260:	e17ffe15 	stw	r5,-8(fp)
   4c264:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4c268:	e0bffd17 	ldw	r2,-12(fp)
   4c26c:	00c00044 	movi	r3,1
   4c270:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4c274:	e0bffd17 	ldw	r2,-12(fp)
   4c278:	10800017 	ldw	r2,0(r2)
   4c27c:	10800104 	addi	r2,r2,4
   4c280:	e0fffd17 	ldw	r3,-12(fp)
   4c284:	18c00817 	ldw	r3,32(r3)
   4c288:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4c28c:	e0fffe17 	ldw	r3,-8(fp)
   4c290:	e0bfff17 	ldw	r2,-4(fp)
   4c294:	d8000015 	stw	zero,0(sp)
   4c298:	1809883a 	mov	r4,r3
   4c29c:	100b883a 	mov	r5,r2
   4c2a0:	01800174 	movhi	r6,5
   4c2a4:	31b0c304 	addi	r6,r6,-15604
   4c2a8:	e1fffd17 	ldw	r7,-12(fp)
   4c2ac:	004d0d00 	call	4d0d0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4c2b0:	e0bffd17 	ldw	r2,-12(fp)
   4c2b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4c2b8:	e0bffd17 	ldw	r2,-12(fp)
   4c2bc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4c2c0:	00800174 	movhi	r2,5
   4c2c4:	10864204 	addi	r2,r2,6408
   4c2c8:	10800017 	ldw	r2,0(r2)
   4c2cc:	1809883a 	mov	r4,r3
   4c2d0:	100b883a 	mov	r5,r2
   4c2d4:	01800174 	movhi	r6,5
   4c2d8:	31b14404 	addi	r6,r6,-15088
   4c2dc:	e1fffd17 	ldw	r7,-12(fp)
   4c2e0:	004cc480 	call	4cc48 <alt_alarm_start>
   4c2e4:	1000040e 	bge	r2,zero,4c2f8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4c2e8:	e0bffd17 	ldw	r2,-12(fp)
   4c2ec:	00e00034 	movhi	r3,32768
   4c2f0:	18ffffc4 	addi	r3,r3,-1
   4c2f4:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4c2f8:	e037883a 	mov	sp,fp
   4c2fc:	dfc00117 	ldw	ra,4(sp)
   4c300:	df000017 	ldw	fp,0(sp)
   4c304:	dec00204 	addi	sp,sp,8
   4c308:	f800283a 	ret

0004c30c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4c30c:	defff804 	addi	sp,sp,-32
   4c310:	df000715 	stw	fp,28(sp)
   4c314:	df000704 	addi	fp,sp,28
   4c318:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4c31c:	e0bfff17 	ldw	r2,-4(fp)
   4c320:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4c324:	e0bffb17 	ldw	r2,-20(fp)
   4c328:	10800017 	ldw	r2,0(r2)
   4c32c:	e0bffc15 	stw	r2,-16(fp)
   4c330:	00000106 	br	4c338 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   4c334:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4c338:	e0bffc17 	ldw	r2,-16(fp)
   4c33c:	10800104 	addi	r2,r2,4
   4c340:	10800037 	ldwio	r2,0(r2)
   4c344:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4c348:	e0bffd17 	ldw	r2,-12(fp)
   4c34c:	1080c00c 	andi	r2,r2,768
   4c350:	10006a26 	beq	r2,zero,4c4fc <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4c354:	e0bffd17 	ldw	r2,-12(fp)
   4c358:	1080400c 	andi	r2,r2,256
   4c35c:	10003326 	beq	r2,zero,4c42c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4c360:	00800074 	movhi	r2,1
   4c364:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c368:	e0bffb17 	ldw	r2,-20(fp)
   4c36c:	10800a17 	ldw	r2,40(r2)
   4c370:	10800044 	addi	r2,r2,1
   4c374:	1081ffcc 	andi	r2,r2,2047
   4c378:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4c37c:	e0bffb17 	ldw	r2,-20(fp)
   4c380:	10c00b17 	ldw	r3,44(r2)
   4c384:	e0bffe17 	ldw	r2,-8(fp)
   4c388:	18801426 	beq	r3,r2,4c3dc <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4c38c:	e0bffc17 	ldw	r2,-16(fp)
   4c390:	10800037 	ldwio	r2,0(r2)
   4c394:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4c398:	e0bff917 	ldw	r2,-28(fp)
   4c39c:	10a0000c 	andi	r2,r2,32768
   4c3a0:	10001026 	beq	r2,zero,4c3e4 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4c3a4:	e0bffb17 	ldw	r2,-20(fp)
   4c3a8:	10800a17 	ldw	r2,40(r2)
   4c3ac:	e0fff917 	ldw	r3,-28(fp)
   4c3b0:	e13ffb17 	ldw	r4,-20(fp)
   4c3b4:	2085883a 	add	r2,r4,r2
   4c3b8:	10800e04 	addi	r2,r2,56
   4c3bc:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c3c0:	e0bffb17 	ldw	r2,-20(fp)
   4c3c4:	10800a17 	ldw	r2,40(r2)
   4c3c8:	10800044 	addi	r2,r2,1
   4c3cc:	10c1ffcc 	andi	r3,r2,2047
   4c3d0:	e0bffb17 	ldw	r2,-20(fp)
   4c3d4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4c3d8:	003fe306 	br	4c368 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   4c3dc:	0001883a 	nop
   4c3e0:	00000106 	br	4c3e8 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4c3e4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4c3e8:	e0bff917 	ldw	r2,-28(fp)
   4c3ec:	10bfffec 	andhi	r2,r2,65535
   4c3f0:	10000e26 	beq	r2,zero,4c42c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4c3f4:	e0bffb17 	ldw	r2,-20(fp)
   4c3f8:	10c00817 	ldw	r3,32(r2)
   4c3fc:	00bfff84 	movi	r2,-2
   4c400:	1886703a 	and	r3,r3,r2
   4c404:	e0bffb17 	ldw	r2,-20(fp)
   4c408:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4c40c:	e0bffc17 	ldw	r2,-16(fp)
   4c410:	10800104 	addi	r2,r2,4
   4c414:	e0fffb17 	ldw	r3,-20(fp)
   4c418:	18c00817 	ldw	r3,32(r3)
   4c41c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4c420:	e0bffc17 	ldw	r2,-16(fp)
   4c424:	10800104 	addi	r2,r2,4
   4c428:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4c42c:	e0bffd17 	ldw	r2,-12(fp)
   4c430:	1080800c 	andi	r2,r2,512
   4c434:	103fbf26 	beq	r2,zero,4c334 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4c438:	e0bffd17 	ldw	r2,-12(fp)
   4c43c:	1004d43a 	srli	r2,r2,16
   4c440:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4c444:	00001406 	br	4c498 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4c448:	e0bffc17 	ldw	r2,-16(fp)
   4c44c:	e0fffb17 	ldw	r3,-20(fp)
   4c450:	18c00d17 	ldw	r3,52(r3)
   4c454:	e13ffb17 	ldw	r4,-20(fp)
   4c458:	20c7883a 	add	r3,r4,r3
   4c45c:	18c20e04 	addi	r3,r3,2104
   4c460:	18c00003 	ldbu	r3,0(r3)
   4c464:	18c03fcc 	andi	r3,r3,255
   4c468:	18c0201c 	xori	r3,r3,128
   4c46c:	18ffe004 	addi	r3,r3,-128
   4c470:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c474:	e0bffb17 	ldw	r2,-20(fp)
   4c478:	10800d17 	ldw	r2,52(r2)
   4c47c:	10800044 	addi	r2,r2,1
   4c480:	10c1ffcc 	andi	r3,r2,2047
   4c484:	e0bffb17 	ldw	r2,-20(fp)
   4c488:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4c48c:	e0bffa17 	ldw	r2,-24(fp)
   4c490:	10bfffc4 	addi	r2,r2,-1
   4c494:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4c498:	e0bffa17 	ldw	r2,-24(fp)
   4c49c:	10000526 	beq	r2,zero,4c4b4 <altera_avalon_jtag_uart_irq+0x1a8>
   4c4a0:	e0bffb17 	ldw	r2,-20(fp)
   4c4a4:	10c00d17 	ldw	r3,52(r2)
   4c4a8:	e0bffb17 	ldw	r2,-20(fp)
   4c4ac:	10800c17 	ldw	r2,48(r2)
   4c4b0:	18bfe51e 	bne	r3,r2,4c448 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4c4b4:	e0bffa17 	ldw	r2,-24(fp)
   4c4b8:	103f9e26 	beq	r2,zero,4c334 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4c4bc:	e0bffb17 	ldw	r2,-20(fp)
   4c4c0:	10c00817 	ldw	r3,32(r2)
   4c4c4:	00bfff44 	movi	r2,-3
   4c4c8:	1886703a 	and	r3,r3,r2
   4c4cc:	e0bffb17 	ldw	r2,-20(fp)
   4c4d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4c4d4:	e0bffb17 	ldw	r2,-20(fp)
   4c4d8:	10800017 	ldw	r2,0(r2)
   4c4dc:	10800104 	addi	r2,r2,4
   4c4e0:	e0fffb17 	ldw	r3,-20(fp)
   4c4e4:	18c00817 	ldw	r3,32(r3)
   4c4e8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4c4ec:	e0bffc17 	ldw	r2,-16(fp)
   4c4f0:	10800104 	addi	r2,r2,4
   4c4f4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4c4f8:	003f8e06 	br	4c334 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4c4fc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4c500:	e037883a 	mov	sp,fp
   4c504:	df000017 	ldw	fp,0(sp)
   4c508:	dec00104 	addi	sp,sp,4
   4c50c:	f800283a 	ret

0004c510 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4c510:	defffc04 	addi	sp,sp,-16
   4c514:	df000315 	stw	fp,12(sp)
   4c518:	df000304 	addi	fp,sp,12
   4c51c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4c520:	e0bfff17 	ldw	r2,-4(fp)
   4c524:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4c528:	e0bffd17 	ldw	r2,-12(fp)
   4c52c:	10800017 	ldw	r2,0(r2)
   4c530:	10800104 	addi	r2,r2,4
   4c534:	10800037 	ldwio	r2,0(r2)
   4c538:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4c53c:	e0bffe17 	ldw	r2,-8(fp)
   4c540:	1081000c 	andi	r2,r2,1024
   4c544:	10000a26 	beq	r2,zero,4c570 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4c548:	e0bffd17 	ldw	r2,-12(fp)
   4c54c:	10800017 	ldw	r2,0(r2)
   4c550:	10800104 	addi	r2,r2,4
   4c554:	e0fffd17 	ldw	r3,-12(fp)
   4c558:	18c00817 	ldw	r3,32(r3)
   4c55c:	18c10014 	ori	r3,r3,1024
   4c560:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4c564:	e0bffd17 	ldw	r2,-12(fp)
   4c568:	10000915 	stw	zero,36(r2)
   4c56c:	00000a06 	br	4c598 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4c570:	e0bffd17 	ldw	r2,-12(fp)
   4c574:	10800917 	ldw	r2,36(r2)
   4c578:	00e00034 	movhi	r3,32768
   4c57c:	18ffff04 	addi	r3,r3,-4
   4c580:	18800536 	bltu	r3,r2,4c598 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   4c584:	e0bffd17 	ldw	r2,-12(fp)
   4c588:	10800917 	ldw	r2,36(r2)
   4c58c:	10c00044 	addi	r3,r2,1
   4c590:	e0bffd17 	ldw	r2,-12(fp)
   4c594:	10c00915 	stw	r3,36(r2)
   4c598:	00800174 	movhi	r2,5
   4c59c:	10864204 	addi	r2,r2,6408
   4c5a0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4c5a4:	e037883a 	mov	sp,fp
   4c5a8:	df000017 	ldw	fp,0(sp)
   4c5ac:	dec00104 	addi	sp,sp,4
   4c5b0:	f800283a 	ret

0004c5b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4c5b4:	defffd04 	addi	sp,sp,-12
   4c5b8:	df000215 	stw	fp,8(sp)
   4c5bc:	df000204 	addi	fp,sp,8
   4c5c0:	e13ffe15 	stw	r4,-8(fp)
   4c5c4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4c5c8:	00000506 	br	4c5e0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4c5cc:	e0bfff17 	ldw	r2,-4(fp)
   4c5d0:	1090000c 	andi	r2,r2,16384
   4c5d4:	10000226 	beq	r2,zero,4c5e0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4c5d8:	00bffd44 	movi	r2,-11
   4c5dc:	00000b06 	br	4c60c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4c5e0:	e0bffe17 	ldw	r2,-8(fp)
   4c5e4:	10c00d17 	ldw	r3,52(r2)
   4c5e8:	e0bffe17 	ldw	r2,-8(fp)
   4c5ec:	10800c17 	ldw	r2,48(r2)
   4c5f0:	18800526 	beq	r3,r2,4c608 <altera_avalon_jtag_uart_close+0x54>
   4c5f4:	e0bffe17 	ldw	r2,-8(fp)
   4c5f8:	10c00917 	ldw	r3,36(r2)
   4c5fc:	e0bffe17 	ldw	r2,-8(fp)
   4c600:	10800117 	ldw	r2,4(r2)
   4c604:	18bff136 	bltu	r3,r2,4c5cc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4c608:	0005883a 	mov	r2,zero
}
   4c60c:	e037883a 	mov	sp,fp
   4c610:	df000017 	ldw	fp,0(sp)
   4c614:	dec00104 	addi	sp,sp,4
   4c618:	f800283a 	ret

0004c61c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4c61c:	defffa04 	addi	sp,sp,-24
   4c620:	df000515 	stw	fp,20(sp)
   4c624:	df000504 	addi	fp,sp,20
   4c628:	e13ffd15 	stw	r4,-12(fp)
   4c62c:	e17ffe15 	stw	r5,-8(fp)
   4c630:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4c634:	00bff9c4 	movi	r2,-25
   4c638:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4c63c:	e0bffe17 	ldw	r2,-8(fp)
   4c640:	10da8060 	cmpeqi	r3,r2,27137
   4c644:	1800031e 	bne	r3,zero,4c654 <altera_avalon_jtag_uart_ioctl+0x38>
   4c648:	109a80a0 	cmpeqi	r2,r2,27138
   4c64c:	1000181e 	bne	r2,zero,4c6b0 <altera_avalon_jtag_uart_ioctl+0x94>
   4c650:	00002606 	br	4c6ec <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4c654:	e0bffd17 	ldw	r2,-12(fp)
   4c658:	10c00117 	ldw	r3,4(r2)
   4c65c:	00a00034 	movhi	r2,32768
   4c660:	10bfffc4 	addi	r2,r2,-1
   4c664:	18802226 	beq	r3,r2,4c6f0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   4c668:	e0bfff17 	ldw	r2,-4(fp)
   4c66c:	10800017 	ldw	r2,0(r2)
   4c670:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4c674:	e0bffc17 	ldw	r2,-16(fp)
   4c678:	10800090 	cmplti	r2,r2,2
   4c67c:	1000061e 	bne	r2,zero,4c698 <altera_avalon_jtag_uart_ioctl+0x7c>
   4c680:	e0fffc17 	ldw	r3,-16(fp)
   4c684:	00a00034 	movhi	r2,32768
   4c688:	10bfffc4 	addi	r2,r2,-1
   4c68c:	18800226 	beq	r3,r2,4c698 <altera_avalon_jtag_uart_ioctl+0x7c>
   4c690:	e0bffc17 	ldw	r2,-16(fp)
   4c694:	00000206 	br	4c6a0 <altera_avalon_jtag_uart_ioctl+0x84>
   4c698:	00a00034 	movhi	r2,32768
   4c69c:	10bfff84 	addi	r2,r2,-2
   4c6a0:	e0fffd17 	ldw	r3,-12(fp)
   4c6a4:	18800115 	stw	r2,4(r3)
      rc = 0;
   4c6a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4c6ac:	00001006 	br	4c6f0 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4c6b0:	e0bffd17 	ldw	r2,-12(fp)
   4c6b4:	10c00117 	ldw	r3,4(r2)
   4c6b8:	00a00034 	movhi	r2,32768
   4c6bc:	10bfffc4 	addi	r2,r2,-1
   4c6c0:	18800d26 	beq	r3,r2,4c6f8 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4c6c4:	e0bffd17 	ldw	r2,-12(fp)
   4c6c8:	10c00917 	ldw	r3,36(r2)
   4c6cc:	e0bffd17 	ldw	r2,-12(fp)
   4c6d0:	10800117 	ldw	r2,4(r2)
   4c6d4:	1885803a 	cmpltu	r2,r3,r2
   4c6d8:	10c03fcc 	andi	r3,r2,255
   4c6dc:	e0bfff17 	ldw	r2,-4(fp)
   4c6e0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4c6e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4c6e8:	00000306 	br	4c6f8 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   4c6ec:	00000306 	br	4c6fc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   4c6f0:	0001883a 	nop
   4c6f4:	00000106 	br	4c6fc <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   4c6f8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4c6fc:	e0bffb17 	ldw	r2,-20(fp)
}
   4c700:	e037883a 	mov	sp,fp
   4c704:	df000017 	ldw	fp,0(sp)
   4c708:	dec00104 	addi	sp,sp,4
   4c70c:	f800283a 	ret

0004c710 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4c710:	defff304 	addi	sp,sp,-52
   4c714:	dfc00c15 	stw	ra,48(sp)
   4c718:	df000b15 	stw	fp,44(sp)
   4c71c:	df000b04 	addi	fp,sp,44
   4c720:	e13ffc15 	stw	r4,-16(fp)
   4c724:	e17ffd15 	stw	r5,-12(fp)
   4c728:	e1bffe15 	stw	r6,-8(fp)
   4c72c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4c730:	e0bffd17 	ldw	r2,-12(fp)
   4c734:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4c738:	00004706 	br	4c858 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4c73c:	e0bffc17 	ldw	r2,-16(fp)
   4c740:	10800a17 	ldw	r2,40(r2)
   4c744:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4c748:	e0bffc17 	ldw	r2,-16(fp)
   4c74c:	10800b17 	ldw	r2,44(r2)
   4c750:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4c754:	e0fff717 	ldw	r3,-36(fp)
   4c758:	e0bff817 	ldw	r2,-32(fp)
   4c75c:	18800536 	bltu	r3,r2,4c774 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4c760:	e0fff717 	ldw	r3,-36(fp)
   4c764:	e0bff817 	ldw	r2,-32(fp)
   4c768:	1885c83a 	sub	r2,r3,r2
   4c76c:	e0bff615 	stw	r2,-40(fp)
   4c770:	00000406 	br	4c784 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4c774:	00c20004 	movi	r3,2048
   4c778:	e0bff817 	ldw	r2,-32(fp)
   4c77c:	1885c83a 	sub	r2,r3,r2
   4c780:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4c784:	e0bff617 	ldw	r2,-40(fp)
   4c788:	10001e26 	beq	r2,zero,4c804 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4c78c:	e0fffe17 	ldw	r3,-8(fp)
   4c790:	e0bff617 	ldw	r2,-40(fp)
   4c794:	1880022e 	bgeu	r3,r2,4c7a0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4c798:	e0bffe17 	ldw	r2,-8(fp)
   4c79c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4c7a0:	e0bff817 	ldw	r2,-32(fp)
   4c7a4:	10800e04 	addi	r2,r2,56
   4c7a8:	e0fffc17 	ldw	r3,-16(fp)
   4c7ac:	1885883a 	add	r2,r3,r2
   4c7b0:	e13ff517 	ldw	r4,-44(fp)
   4c7b4:	100b883a 	mov	r5,r2
   4c7b8:	e1bff617 	ldw	r6,-40(fp)
   4c7bc:	0046f240 	call	46f24 <memcpy>
      ptr   += n;
   4c7c0:	e0fff517 	ldw	r3,-44(fp)
   4c7c4:	e0bff617 	ldw	r2,-40(fp)
   4c7c8:	1885883a 	add	r2,r3,r2
   4c7cc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4c7d0:	e0fffe17 	ldw	r3,-8(fp)
   4c7d4:	e0bff617 	ldw	r2,-40(fp)
   4c7d8:	1885c83a 	sub	r2,r3,r2
   4c7dc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c7e0:	e0fff817 	ldw	r3,-32(fp)
   4c7e4:	e0bff617 	ldw	r2,-40(fp)
   4c7e8:	1885883a 	add	r2,r3,r2
   4c7ec:	10c1ffcc 	andi	r3,r2,2047
   4c7f0:	e0bffc17 	ldw	r2,-16(fp)
   4c7f4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4c7f8:	e0bffe17 	ldw	r2,-8(fp)
   4c7fc:	00bfcf16 	blt	zero,r2,4c73c <altera_avalon_jtag_uart_read+0x2c>
   4c800:	00000106 	br	4c808 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4c804:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4c808:	e0fff517 	ldw	r3,-44(fp)
   4c80c:	e0bffd17 	ldw	r2,-12(fp)
   4c810:	1880141e 	bne	r3,r2,4c864 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4c814:	e0bfff17 	ldw	r2,-4(fp)
   4c818:	1090000c 	andi	r2,r2,16384
   4c81c:	1000131e 	bne	r2,zero,4c86c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4c820:	0001883a 	nop
   4c824:	e0bffc17 	ldw	r2,-16(fp)
   4c828:	10c00a17 	ldw	r3,40(r2)
   4c82c:	e0bff717 	ldw	r2,-36(fp)
   4c830:	1880051e 	bne	r3,r2,4c848 <altera_avalon_jtag_uart_read+0x138>
   4c834:	e0bffc17 	ldw	r2,-16(fp)
   4c838:	10c00917 	ldw	r3,36(r2)
   4c83c:	e0bffc17 	ldw	r2,-16(fp)
   4c840:	10800117 	ldw	r2,4(r2)
   4c844:	18bff736 	bltu	r3,r2,4c824 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4c848:	e0bffc17 	ldw	r2,-16(fp)
   4c84c:	10c00a17 	ldw	r3,40(r2)
   4c850:	e0bff717 	ldw	r2,-36(fp)
   4c854:	18800726 	beq	r3,r2,4c874 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4c858:	e0bffe17 	ldw	r2,-8(fp)
   4c85c:	00bfb716 	blt	zero,r2,4c73c <altera_avalon_jtag_uart_read+0x2c>
   4c860:	00000506 	br	4c878 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4c864:	0001883a 	nop
   4c868:	00000306 	br	4c878 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4c86c:	0001883a 	nop
   4c870:	00000106 	br	4c878 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4c874:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4c878:	e0fff517 	ldw	r3,-44(fp)
   4c87c:	e0bffd17 	ldw	r2,-12(fp)
   4c880:	18801726 	beq	r3,r2,4c8e0 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c884:	0005303a 	rdctl	r2,status
   4c888:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c88c:	e0fffa17 	ldw	r3,-24(fp)
   4c890:	00bfff84 	movi	r2,-2
   4c894:	1884703a 	and	r2,r3,r2
   4c898:	1001703a 	wrctl	status,r2
  
  return context;
   4c89c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4c8a0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4c8a4:	e0bffc17 	ldw	r2,-16(fp)
   4c8a8:	10800817 	ldw	r2,32(r2)
   4c8ac:	10c00054 	ori	r3,r2,1
   4c8b0:	e0bffc17 	ldw	r2,-16(fp)
   4c8b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4c8b8:	e0bffc17 	ldw	r2,-16(fp)
   4c8bc:	10800017 	ldw	r2,0(r2)
   4c8c0:	10800104 	addi	r2,r2,4
   4c8c4:	e0fffc17 	ldw	r3,-16(fp)
   4c8c8:	18c00817 	ldw	r3,32(r3)
   4c8cc:	10c00035 	stwio	r3,0(r2)
   4c8d0:	e0bff917 	ldw	r2,-28(fp)
   4c8d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c8d8:	e0bffb17 	ldw	r2,-20(fp)
   4c8dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4c8e0:	e0fff517 	ldw	r3,-44(fp)
   4c8e4:	e0bffd17 	ldw	r2,-12(fp)
   4c8e8:	18800426 	beq	r3,r2,4c8fc <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   4c8ec:	e0fff517 	ldw	r3,-44(fp)
   4c8f0:	e0bffd17 	ldw	r2,-12(fp)
   4c8f4:	1885c83a 	sub	r2,r3,r2
   4c8f8:	00000606 	br	4c914 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   4c8fc:	e0bfff17 	ldw	r2,-4(fp)
   4c900:	1090000c 	andi	r2,r2,16384
   4c904:	10000226 	beq	r2,zero,4c910 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   4c908:	00bffd44 	movi	r2,-11
   4c90c:	00000106 	br	4c914 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   4c910:	00bffec4 	movi	r2,-5
}
   4c914:	e037883a 	mov	sp,fp
   4c918:	dfc00117 	ldw	ra,4(sp)
   4c91c:	df000017 	ldw	fp,0(sp)
   4c920:	dec00204 	addi	sp,sp,8
   4c924:	f800283a 	ret

0004c928 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4c928:	defff304 	addi	sp,sp,-52
   4c92c:	dfc00c15 	stw	ra,48(sp)
   4c930:	df000b15 	stw	fp,44(sp)
   4c934:	df000b04 	addi	fp,sp,44
   4c938:	e13ffc15 	stw	r4,-16(fp)
   4c93c:	e17ffd15 	stw	r5,-12(fp)
   4c940:	e1bffe15 	stw	r6,-8(fp)
   4c944:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4c948:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4c94c:	e0bffd17 	ldw	r2,-12(fp)
   4c950:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4c954:	00003706 	br	4ca34 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4c958:	e0bffc17 	ldw	r2,-16(fp)
   4c95c:	10800c17 	ldw	r2,48(r2)
   4c960:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   4c964:	e0bffc17 	ldw	r2,-16(fp)
   4c968:	10800d17 	ldw	r2,52(r2)
   4c96c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4c970:	e0fff817 	ldw	r3,-32(fp)
   4c974:	e0bff517 	ldw	r2,-44(fp)
   4c978:	1880062e 	bgeu	r3,r2,4c994 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4c97c:	e0fff517 	ldw	r3,-44(fp)
   4c980:	e0bff817 	ldw	r2,-32(fp)
   4c984:	1885c83a 	sub	r2,r3,r2
   4c988:	10bfffc4 	addi	r2,r2,-1
   4c98c:	e0bff615 	stw	r2,-40(fp)
   4c990:	00000b06 	br	4c9c0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4c994:	e0bff517 	ldw	r2,-44(fp)
   4c998:	10000526 	beq	r2,zero,4c9b0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4c99c:	00c20004 	movi	r3,2048
   4c9a0:	e0bff817 	ldw	r2,-32(fp)
   4c9a4:	1885c83a 	sub	r2,r3,r2
   4c9a8:	e0bff615 	stw	r2,-40(fp)
   4c9ac:	00000406 	br	4c9c0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4c9b0:	00c1ffc4 	movi	r3,2047
   4c9b4:	e0bff817 	ldw	r2,-32(fp)
   4c9b8:	1885c83a 	sub	r2,r3,r2
   4c9bc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4c9c0:	e0bff617 	ldw	r2,-40(fp)
   4c9c4:	10001e26 	beq	r2,zero,4ca40 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   4c9c8:	e0fffe17 	ldw	r3,-8(fp)
   4c9cc:	e0bff617 	ldw	r2,-40(fp)
   4c9d0:	1880022e 	bgeu	r3,r2,4c9dc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   4c9d4:	e0bffe17 	ldw	r2,-8(fp)
   4c9d8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4c9dc:	e0bff817 	ldw	r2,-32(fp)
   4c9e0:	10820e04 	addi	r2,r2,2104
   4c9e4:	e0fffc17 	ldw	r3,-16(fp)
   4c9e8:	1885883a 	add	r2,r3,r2
   4c9ec:	1009883a 	mov	r4,r2
   4c9f0:	e17ffd17 	ldw	r5,-12(fp)
   4c9f4:	e1bff617 	ldw	r6,-40(fp)
   4c9f8:	0046f240 	call	46f24 <memcpy>
      ptr   += n;
   4c9fc:	e0fffd17 	ldw	r3,-12(fp)
   4ca00:	e0bff617 	ldw	r2,-40(fp)
   4ca04:	1885883a 	add	r2,r3,r2
   4ca08:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4ca0c:	e0fffe17 	ldw	r3,-8(fp)
   4ca10:	e0bff617 	ldw	r2,-40(fp)
   4ca14:	1885c83a 	sub	r2,r3,r2
   4ca18:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ca1c:	e0fff817 	ldw	r3,-32(fp)
   4ca20:	e0bff617 	ldw	r2,-40(fp)
   4ca24:	1885883a 	add	r2,r3,r2
   4ca28:	10c1ffcc 	andi	r3,r2,2047
   4ca2c:	e0bffc17 	ldw	r2,-16(fp)
   4ca30:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4ca34:	e0bffe17 	ldw	r2,-8(fp)
   4ca38:	00bfc716 	blt	zero,r2,4c958 <altera_avalon_jtag_uart_write+0x30>
   4ca3c:	00000106 	br	4ca44 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4ca40:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ca44:	0005303a 	rdctl	r2,status
   4ca48:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ca4c:	e0fffa17 	ldw	r3,-24(fp)
   4ca50:	00bfff84 	movi	r2,-2
   4ca54:	1884703a 	and	r2,r3,r2
   4ca58:	1001703a 	wrctl	status,r2
  
  return context;
   4ca5c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4ca60:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4ca64:	e0bffc17 	ldw	r2,-16(fp)
   4ca68:	10800817 	ldw	r2,32(r2)
   4ca6c:	10c00094 	ori	r3,r2,2
   4ca70:	e0bffc17 	ldw	r2,-16(fp)
   4ca74:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4ca78:	e0bffc17 	ldw	r2,-16(fp)
   4ca7c:	10800017 	ldw	r2,0(r2)
   4ca80:	10800104 	addi	r2,r2,4
   4ca84:	e0fffc17 	ldw	r3,-16(fp)
   4ca88:	18c00817 	ldw	r3,32(r3)
   4ca8c:	10c00035 	stwio	r3,0(r2)
   4ca90:	e0bff917 	ldw	r2,-28(fp)
   4ca94:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ca98:	e0bffb17 	ldw	r2,-20(fp)
   4ca9c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4caa0:	e0bffe17 	ldw	r2,-8(fp)
   4caa4:	0080110e 	bge	zero,r2,4caec <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   4caa8:	e0bfff17 	ldw	r2,-4(fp)
   4caac:	1090000c 	andi	r2,r2,16384
   4cab0:	1000111e 	bne	r2,zero,4caf8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4cab4:	0001883a 	nop
   4cab8:	e0bffc17 	ldw	r2,-16(fp)
   4cabc:	10c00d17 	ldw	r3,52(r2)
   4cac0:	e0bff517 	ldw	r2,-44(fp)
   4cac4:	1880051e 	bne	r3,r2,4cadc <altera_avalon_jtag_uart_write+0x1b4>
   4cac8:	e0bffc17 	ldw	r2,-16(fp)
   4cacc:	10c00917 	ldw	r3,36(r2)
   4cad0:	e0bffc17 	ldw	r2,-16(fp)
   4cad4:	10800117 	ldw	r2,4(r2)
   4cad8:	18bff736 	bltu	r3,r2,4cab8 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4cadc:	e0bffc17 	ldw	r2,-16(fp)
   4cae0:	10c00d17 	ldw	r3,52(r2)
   4cae4:	e0bff517 	ldw	r2,-44(fp)
   4cae8:	18800526 	beq	r3,r2,4cb00 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4caec:	e0bffe17 	ldw	r2,-8(fp)
   4caf0:	00bfd016 	blt	zero,r2,4ca34 <altera_avalon_jtag_uart_write+0x10c>
   4caf4:	00000306 	br	4cb04 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   4caf8:	0001883a 	nop
   4cafc:	00000106 	br	4cb04 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   4cb00:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4cb04:	e0fffd17 	ldw	r3,-12(fp)
   4cb08:	e0bff717 	ldw	r2,-36(fp)
   4cb0c:	18800426 	beq	r3,r2,4cb20 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4cb10:	e0fffd17 	ldw	r3,-12(fp)
   4cb14:	e0bff717 	ldw	r2,-36(fp)
   4cb18:	1885c83a 	sub	r2,r3,r2
   4cb1c:	00000606 	br	4cb38 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4cb20:	e0bfff17 	ldw	r2,-4(fp)
   4cb24:	1090000c 	andi	r2,r2,16384
   4cb28:	10000226 	beq	r2,zero,4cb34 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4cb2c:	00bffd44 	movi	r2,-11
   4cb30:	00000106 	br	4cb38 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4cb34:	00bffec4 	movi	r2,-5
}
   4cb38:	e037883a 	mov	sp,fp
   4cb3c:	dfc00117 	ldw	ra,4(sp)
   4cb40:	df000017 	ldw	fp,0(sp)
   4cb44:	dec00204 	addi	sp,sp,8
   4cb48:	f800283a 	ret

0004cb4c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4cb4c:	defffa04 	addi	sp,sp,-24
   4cb50:	dfc00515 	stw	ra,20(sp)
   4cb54:	df000415 	stw	fp,16(sp)
   4cb58:	df000404 	addi	fp,sp,16
   4cb5c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4cb60:	0007883a 	mov	r3,zero
   4cb64:	e0bfff17 	ldw	r2,-4(fp)
   4cb68:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4cb6c:	e0bfff17 	ldw	r2,-4(fp)
   4cb70:	10800104 	addi	r2,r2,4
   4cb74:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4cb78:	0005303a 	rdctl	r2,status
   4cb7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4cb80:	e0fffd17 	ldw	r3,-12(fp)
   4cb84:	00bfff84 	movi	r2,-2
   4cb88:	1884703a 	and	r2,r3,r2
   4cb8c:	1001703a 	wrctl	status,r2
  
  return context;
   4cb90:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4cb94:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4cb98:	004d8200 	call	4d820 <alt_tick>
   4cb9c:	e0bffc17 	ldw	r2,-16(fp)
   4cba0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4cba4:	e0bffe17 	ldw	r2,-8(fp)
   4cba8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4cbac:	e037883a 	mov	sp,fp
   4cbb0:	dfc00117 	ldw	ra,4(sp)
   4cbb4:	df000017 	ldw	fp,0(sp)
   4cbb8:	dec00204 	addi	sp,sp,8
   4cbbc:	f800283a 	ret

0004cbc0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4cbc0:	defff804 	addi	sp,sp,-32
   4cbc4:	dfc00715 	stw	ra,28(sp)
   4cbc8:	df000615 	stw	fp,24(sp)
   4cbcc:	df000604 	addi	fp,sp,24
   4cbd0:	e13ffc15 	stw	r4,-16(fp)
   4cbd4:	e17ffd15 	stw	r5,-12(fp)
   4cbd8:	e1bffe15 	stw	r6,-8(fp)
   4cbdc:	e1ffff15 	stw	r7,-4(fp)
   4cbe0:	e0bfff17 	ldw	r2,-4(fp)
   4cbe4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4cbe8:	00800174 	movhi	r2,5
   4cbec:	10864204 	addi	r2,r2,6408
   4cbf0:	10800017 	ldw	r2,0(r2)
   4cbf4:	1000041e 	bne	r2,zero,4cc08 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   4cbf8:	00800174 	movhi	r2,5
   4cbfc:	10864204 	addi	r2,r2,6408
   4cc00:	e0fffb17 	ldw	r3,-20(fp)
   4cc04:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4cc08:	e0bffc17 	ldw	r2,-16(fp)
   4cc0c:	10800104 	addi	r2,r2,4
   4cc10:	00c001c4 	movi	r3,7
   4cc14:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4cc18:	d8000015 	stw	zero,0(sp)
   4cc1c:	e13ffd17 	ldw	r4,-12(fp)
   4cc20:	e17ffe17 	ldw	r5,-8(fp)
   4cc24:	01800174 	movhi	r6,5
   4cc28:	31b2d304 	addi	r6,r6,-13492
   4cc2c:	e1fffc17 	ldw	r7,-16(fp)
   4cc30:	004d0d00 	call	4d0d0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4cc34:	e037883a 	mov	sp,fp
   4cc38:	dfc00117 	ldw	ra,4(sp)
   4cc3c:	df000017 	ldw	fp,0(sp)
   4cc40:	dec00204 	addi	sp,sp,8
   4cc44:	f800283a 	ret

0004cc48 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4cc48:	defff504 	addi	sp,sp,-44
   4cc4c:	df000a15 	stw	fp,40(sp)
   4cc50:	df000a04 	addi	fp,sp,40
   4cc54:	e13ffc15 	stw	r4,-16(fp)
   4cc58:	e17ffd15 	stw	r5,-12(fp)
   4cc5c:	e1bffe15 	stw	r6,-8(fp)
   4cc60:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4cc64:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4cc68:	00800174 	movhi	r2,5
   4cc6c:	10864204 	addi	r2,r2,6408
   4cc70:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4cc74:	10003f26 	beq	r2,zero,4cd74 <alt_alarm_start+0x12c>
  {
    if (alarm)
   4cc78:	e0bffc17 	ldw	r2,-16(fp)
   4cc7c:	10003b26 	beq	r2,zero,4cd6c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   4cc80:	e0bffc17 	ldw	r2,-16(fp)
   4cc84:	e0fffe17 	ldw	r3,-8(fp)
   4cc88:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4cc8c:	e0bffc17 	ldw	r2,-16(fp)
   4cc90:	e0ffff17 	ldw	r3,-4(fp)
   4cc94:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4cc98:	0005303a 	rdctl	r2,status
   4cc9c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4cca0:	e0fff817 	ldw	r3,-32(fp)
   4cca4:	00bfff84 	movi	r2,-2
   4cca8:	1884703a 	and	r2,r3,r2
   4ccac:	1001703a 	wrctl	status,r2
  
  return context;
   4ccb0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4ccb4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4ccb8:	00800174 	movhi	r2,5
   4ccbc:	10864304 	addi	r2,r2,6412
   4ccc0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4ccc4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4ccc8:	e0fffd17 	ldw	r3,-12(fp)
   4cccc:	e0bff617 	ldw	r2,-40(fp)
   4ccd0:	1885883a 	add	r2,r3,r2
   4ccd4:	10c00044 	addi	r3,r2,1
   4ccd8:	e0bffc17 	ldw	r2,-16(fp)
   4ccdc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4cce0:	e0bffc17 	ldw	r2,-16(fp)
   4cce4:	10c00217 	ldw	r3,8(r2)
   4cce8:	e0bff617 	ldw	r2,-40(fp)
   4ccec:	1880042e 	bgeu	r3,r2,4cd00 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   4ccf0:	e0bffc17 	ldw	r2,-16(fp)
   4ccf4:	00c00044 	movi	r3,1
   4ccf8:	10c00405 	stb	r3,16(r2)
   4ccfc:	00000206 	br	4cd08 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   4cd00:	e0bffc17 	ldw	r2,-16(fp)
   4cd04:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4cd08:	e0bffc17 	ldw	r2,-16(fp)
   4cd0c:	00c00174 	movhi	r3,5
   4cd10:	18ff9504 	addi	r3,r3,-428
   4cd14:	e0fff915 	stw	r3,-28(fp)
   4cd18:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4cd1c:	e0bffa17 	ldw	r2,-24(fp)
   4cd20:	e0fff917 	ldw	r3,-28(fp)
   4cd24:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4cd28:	e0bff917 	ldw	r2,-28(fp)
   4cd2c:	10c00017 	ldw	r3,0(r2)
   4cd30:	e0bffa17 	ldw	r2,-24(fp)
   4cd34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4cd38:	e0bff917 	ldw	r2,-28(fp)
   4cd3c:	10800017 	ldw	r2,0(r2)
   4cd40:	e0fffa17 	ldw	r3,-24(fp)
   4cd44:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4cd48:	e0bff917 	ldw	r2,-28(fp)
   4cd4c:	e0fffa17 	ldw	r3,-24(fp)
   4cd50:	10c00015 	stw	r3,0(r2)
   4cd54:	e0bff717 	ldw	r2,-36(fp)
   4cd58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4cd5c:	e0bffb17 	ldw	r2,-20(fp)
   4cd60:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4cd64:	0005883a 	mov	r2,zero
   4cd68:	00000306 	br	4cd78 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   4cd6c:	00bffa84 	movi	r2,-22
   4cd70:	00000106 	br	4cd78 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   4cd74:	00bfde84 	movi	r2,-134
  }
}
   4cd78:	e037883a 	mov	sp,fp
   4cd7c:	df000017 	ldw	fp,0(sp)
   4cd80:	dec00104 	addi	sp,sp,4
   4cd84:	f800283a 	ret

0004cd88 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   4cd88:	defffa04 	addi	sp,sp,-24
   4cd8c:	dfc00515 	stw	ra,20(sp)
   4cd90:	df000415 	stw	fp,16(sp)
   4cd94:	df000404 	addi	fp,sp,16
   4cd98:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   4cd9c:	008000c4 	movi	r2,3
   4cda0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   4cda4:	e13ffd17 	ldw	r4,-12(fp)
   4cda8:	014003f4 	movhi	r5,15
   4cdac:	29509004 	addi	r5,r5,16960
   4cdb0:	00419f00 	call	419f0 <__mulsi3>
   4cdb4:	01017db4 	movhi	r4,1526
   4cdb8:	21384004 	addi	r4,r4,-7936
   4cdbc:	100b883a 	mov	r5,r2
   4cdc0:	004aac80 	call	4aac8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   4cdc4:	01200034 	movhi	r4,32768
   4cdc8:	213fffc4 	addi	r4,r4,-1
   4cdcc:	100b883a 	mov	r5,r2
   4cdd0:	004aac80 	call	4aac8 <__udivsi3>
   4cdd4:	e13fff17 	ldw	r4,-4(fp)
   4cdd8:	100b883a 	mov	r5,r2
   4cddc:	004aac80 	call	4aac8 <__udivsi3>
   4cde0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   4cde4:	e0bffe17 	ldw	r2,-8(fp)
   4cde8:	10002926 	beq	r2,zero,4ce90 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   4cdec:	e03ffc15 	stw	zero,-16(fp)
   4cdf0:	00001606 	br	4ce4c <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   4cdf4:	00a00034 	movhi	r2,32768
   4cdf8:	10bfffc4 	addi	r2,r2,-1
   4cdfc:	10bfffc4 	addi	r2,r2,-1
   4ce00:	103ffe1e 	bne	r2,zero,4cdfc <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   4ce04:	e13ffd17 	ldw	r4,-12(fp)
   4ce08:	014003f4 	movhi	r5,15
   4ce0c:	29509004 	addi	r5,r5,16960
   4ce10:	00419f00 	call	419f0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   4ce14:	01017db4 	movhi	r4,1526
   4ce18:	21384004 	addi	r4,r4,-7936
   4ce1c:	100b883a 	mov	r5,r2
   4ce20:	004aac80 	call	4aac8 <__udivsi3>
   4ce24:	01200034 	movhi	r4,32768
   4ce28:	213fffc4 	addi	r4,r4,-1
   4ce2c:	100b883a 	mov	r5,r2
   4ce30:	004aac80 	call	4aac8 <__udivsi3>
   4ce34:	e0ffff17 	ldw	r3,-4(fp)
   4ce38:	1885c83a 	sub	r2,r3,r2
   4ce3c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   4ce40:	e0bffc17 	ldw	r2,-16(fp)
   4ce44:	10800044 	addi	r2,r2,1
   4ce48:	e0bffc15 	stw	r2,-16(fp)
   4ce4c:	e0fffc17 	ldw	r3,-16(fp)
   4ce50:	e0bffe17 	ldw	r2,-8(fp)
   4ce54:	18bfe716 	blt	r3,r2,4cdf4 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4ce58:	e13ffd17 	ldw	r4,-12(fp)
   4ce5c:	014003f4 	movhi	r5,15
   4ce60:	29509004 	addi	r5,r5,16960
   4ce64:	00419f00 	call	419f0 <__mulsi3>
   4ce68:	01017db4 	movhi	r4,1526
   4ce6c:	21384004 	addi	r4,r4,-7936
   4ce70:	100b883a 	mov	r5,r2
   4ce74:	004aac80 	call	4aac8 <__udivsi3>
   4ce78:	1009883a 	mov	r4,r2
   4ce7c:	e17fff17 	ldw	r5,-4(fp)
   4ce80:	00419f00 	call	419f0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   4ce84:	10bfffc4 	addi	r2,r2,-1
   4ce88:	103ffe1e 	bne	r2,zero,4ce84 <alt_busy_sleep+0xfc>
   4ce8c:	00000d06 	br	4cec4 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4ce90:	e13ffd17 	ldw	r4,-12(fp)
   4ce94:	014003f4 	movhi	r5,15
   4ce98:	29509004 	addi	r5,r5,16960
   4ce9c:	00419f00 	call	419f0 <__mulsi3>
   4cea0:	01017db4 	movhi	r4,1526
   4cea4:	21384004 	addi	r4,r4,-7936
   4cea8:	100b883a 	mov	r5,r2
   4ceac:	004aac80 	call	4aac8 <__udivsi3>
   4ceb0:	1009883a 	mov	r4,r2
   4ceb4:	e17fff17 	ldw	r5,-4(fp)
   4ceb8:	00419f00 	call	419f0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   4cebc:	10bfffc4 	addi	r2,r2,-1
   4cec0:	00bffe16 	blt	zero,r2,4cebc <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   4cec4:	0005883a 	mov	r2,zero
}
   4cec8:	e037883a 	mov	sp,fp
   4cecc:	dfc00117 	ldw	ra,4(sp)
   4ced0:	df000017 	ldw	fp,0(sp)
   4ced4:	dec00204 	addi	sp,sp,8
   4ced8:	f800283a 	ret

0004cedc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4cedc:	deffff04 	addi	sp,sp,-4
   4cee0:	df000015 	stw	fp,0(sp)
   4cee4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4cee8:	e037883a 	mov	sp,fp
   4ceec:	df000017 	ldw	fp,0(sp)
   4cef0:	dec00104 	addi	sp,sp,4
   4cef4:	f800283a 	ret

0004cef8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4cef8:	defffe04 	addi	sp,sp,-8
   4cefc:	dfc00115 	stw	ra,4(sp)
   4cf00:	df000015 	stw	fp,0(sp)
   4cf04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4cf08:	00800174 	movhi	r2,5
   4cf0c:	10bf9204 	addi	r2,r2,-440
   4cf10:	10800017 	ldw	r2,0(r2)
   4cf14:	10000526 	beq	r2,zero,4cf2c <alt_get_errno+0x34>
   4cf18:	00800174 	movhi	r2,5
   4cf1c:	10bf9204 	addi	r2,r2,-440
   4cf20:	10800017 	ldw	r2,0(r2)
   4cf24:	103ee83a 	callr	r2
   4cf28:	00000206 	br	4cf34 <alt_get_errno+0x3c>
   4cf2c:	00800174 	movhi	r2,5
   4cf30:	10863804 	addi	r2,r2,6368
}
   4cf34:	e037883a 	mov	sp,fp
   4cf38:	dfc00117 	ldw	ra,4(sp)
   4cf3c:	df000017 	ldw	fp,0(sp)
   4cf40:	dec00204 	addi	sp,sp,8
   4cf44:	f800283a 	ret

0004cf48 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4cf48:	defffa04 	addi	sp,sp,-24
   4cf4c:	dfc00515 	stw	ra,20(sp)
   4cf50:	df000415 	stw	fp,16(sp)
   4cf54:	df000404 	addi	fp,sp,16
   4cf58:	e13ffe15 	stw	r4,-8(fp)
   4cf5c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4cf60:	e0bffe17 	ldw	r2,-8(fp)
   4cf64:	10000326 	beq	r2,zero,4cf74 <alt_dev_llist_insert+0x2c>
   4cf68:	e0bffe17 	ldw	r2,-8(fp)
   4cf6c:	10800217 	ldw	r2,8(r2)
   4cf70:	1000051e 	bne	r2,zero,4cf88 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   4cf74:	004cef80 	call	4cef8 <alt_get_errno>
   4cf78:	00c00584 	movi	r3,22
   4cf7c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   4cf80:	00bffa84 	movi	r2,-22
   4cf84:	00001306 	br	4cfd4 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4cf88:	e0bffe17 	ldw	r2,-8(fp)
   4cf8c:	e0ffff17 	ldw	r3,-4(fp)
   4cf90:	e0fffc15 	stw	r3,-16(fp)
   4cf94:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4cf98:	e0bffd17 	ldw	r2,-12(fp)
   4cf9c:	e0fffc17 	ldw	r3,-16(fp)
   4cfa0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4cfa4:	e0bffc17 	ldw	r2,-16(fp)
   4cfa8:	10c00017 	ldw	r3,0(r2)
   4cfac:	e0bffd17 	ldw	r2,-12(fp)
   4cfb0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4cfb4:	e0bffc17 	ldw	r2,-16(fp)
   4cfb8:	10800017 	ldw	r2,0(r2)
   4cfbc:	e0fffd17 	ldw	r3,-12(fp)
   4cfc0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4cfc4:	e0bffc17 	ldw	r2,-16(fp)
   4cfc8:	e0fffd17 	ldw	r3,-12(fp)
   4cfcc:	10c00015 	stw	r3,0(r2)

  return 0;  
   4cfd0:	0005883a 	mov	r2,zero
}
   4cfd4:	e037883a 	mov	sp,fp
   4cfd8:	dfc00117 	ldw	ra,4(sp)
   4cfdc:	df000017 	ldw	fp,0(sp)
   4cfe0:	dec00204 	addi	sp,sp,8
   4cfe4:	f800283a 	ret

0004cfe8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4cfe8:	defffd04 	addi	sp,sp,-12
   4cfec:	dfc00215 	stw	ra,8(sp)
   4cff0:	df000115 	stw	fp,4(sp)
   4cff4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4cff8:	00800174 	movhi	r2,5
   4cffc:	10b80604 	addi	r2,r2,-8168
   4d000:	e0bfff15 	stw	r2,-4(fp)
   4d004:	00000606 	br	4d020 <_do_ctors+0x38>
        (*ctor) (); 
   4d008:	e0bfff17 	ldw	r2,-4(fp)
   4d00c:	10800017 	ldw	r2,0(r2)
   4d010:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4d014:	e0bfff17 	ldw	r2,-4(fp)
   4d018:	10bfff04 	addi	r2,r2,-4
   4d01c:	e0bfff15 	stw	r2,-4(fp)
   4d020:	e0ffff17 	ldw	r3,-4(fp)
   4d024:	00800174 	movhi	r2,5
   4d028:	10b80704 	addi	r2,r2,-8164
   4d02c:	18bff62e 	bgeu	r3,r2,4d008 <_do_ctors+0x20>
        (*ctor) (); 
}
   4d030:	e037883a 	mov	sp,fp
   4d034:	dfc00117 	ldw	ra,4(sp)
   4d038:	df000017 	ldw	fp,0(sp)
   4d03c:	dec00204 	addi	sp,sp,8
   4d040:	f800283a 	ret

0004d044 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4d044:	defffd04 	addi	sp,sp,-12
   4d048:	dfc00215 	stw	ra,8(sp)
   4d04c:	df000115 	stw	fp,4(sp)
   4d050:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4d054:	00800174 	movhi	r2,5
   4d058:	10b80604 	addi	r2,r2,-8168
   4d05c:	e0bfff15 	stw	r2,-4(fp)
   4d060:	00000606 	br	4d07c <_do_dtors+0x38>
        (*dtor) (); 
   4d064:	e0bfff17 	ldw	r2,-4(fp)
   4d068:	10800017 	ldw	r2,0(r2)
   4d06c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4d070:	e0bfff17 	ldw	r2,-4(fp)
   4d074:	10bfff04 	addi	r2,r2,-4
   4d078:	e0bfff15 	stw	r2,-4(fp)
   4d07c:	e0ffff17 	ldw	r3,-4(fp)
   4d080:	00800174 	movhi	r2,5
   4d084:	10b80704 	addi	r2,r2,-8164
   4d088:	18bff62e 	bgeu	r3,r2,4d064 <_do_dtors+0x20>
        (*dtor) (); 
}
   4d08c:	e037883a 	mov	sp,fp
   4d090:	dfc00117 	ldw	ra,4(sp)
   4d094:	df000017 	ldw	fp,0(sp)
   4d098:	dec00204 	addi	sp,sp,8
   4d09c:	f800283a 	ret

0004d0a0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4d0a0:	defffe04 	addi	sp,sp,-8
   4d0a4:	dfc00115 	stw	ra,4(sp)
   4d0a8:	df000015 	stw	fp,0(sp)
   4d0ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4d0b0:	0009883a 	mov	r4,zero
   4d0b4:	01440004 	movi	r5,4096
   4d0b8:	004dbbc0 	call	4dbbc <alt_icache_flush>
#endif
}
   4d0bc:	e037883a 	mov	sp,fp
   4d0c0:	dfc00117 	ldw	ra,4(sp)
   4d0c4:	df000017 	ldw	fp,0(sp)
   4d0c8:	dec00204 	addi	sp,sp,8
   4d0cc:	f800283a 	ret

0004d0d0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4d0d0:	defff904 	addi	sp,sp,-28
   4d0d4:	dfc00615 	stw	ra,24(sp)
   4d0d8:	df000515 	stw	fp,20(sp)
   4d0dc:	df000504 	addi	fp,sp,20
   4d0e0:	e13ffc15 	stw	r4,-16(fp)
   4d0e4:	e17ffd15 	stw	r5,-12(fp)
   4d0e8:	e1bffe15 	stw	r6,-8(fp)
   4d0ec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4d0f0:	e0800217 	ldw	r2,8(fp)
   4d0f4:	d8800015 	stw	r2,0(sp)
   4d0f8:	e13ffc17 	ldw	r4,-16(fp)
   4d0fc:	e17ffd17 	ldw	r5,-12(fp)
   4d100:	e1bffe17 	ldw	r6,-8(fp)
   4d104:	e1ffff17 	ldw	r7,-4(fp)
   4d108:	004d2a80 	call	4d2a8 <alt_iic_isr_register>
}  
   4d10c:	e037883a 	mov	sp,fp
   4d110:	dfc00117 	ldw	ra,4(sp)
   4d114:	df000017 	ldw	fp,0(sp)
   4d118:	dec00204 	addi	sp,sp,8
   4d11c:	f800283a 	ret

0004d120 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4d120:	defff904 	addi	sp,sp,-28
   4d124:	df000615 	stw	fp,24(sp)
   4d128:	df000604 	addi	fp,sp,24
   4d12c:	e13ffe15 	stw	r4,-8(fp)
   4d130:	e17fff15 	stw	r5,-4(fp)
   4d134:	e0bfff17 	ldw	r2,-4(fp)
   4d138:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d13c:	0005303a 	rdctl	r2,status
   4d140:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d144:	e0fffb17 	ldw	r3,-20(fp)
   4d148:	00bfff84 	movi	r2,-2
   4d14c:	1884703a 	and	r2,r3,r2
   4d150:	1001703a 	wrctl	status,r2
  
  return context;
   4d154:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4d158:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4d15c:	e0bffa17 	ldw	r2,-24(fp)
   4d160:	00c00044 	movi	r3,1
   4d164:	1884983a 	sll	r2,r3,r2
   4d168:	1007883a 	mov	r3,r2
   4d16c:	00800174 	movhi	r2,5
   4d170:	10864104 	addi	r2,r2,6404
   4d174:	10800017 	ldw	r2,0(r2)
   4d178:	1886b03a 	or	r3,r3,r2
   4d17c:	00800174 	movhi	r2,5
   4d180:	10864104 	addi	r2,r2,6404
   4d184:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4d188:	00800174 	movhi	r2,5
   4d18c:	10864104 	addi	r2,r2,6404
   4d190:	10800017 	ldw	r2,0(r2)
   4d194:	100170fa 	wrctl	ienable,r2
   4d198:	e0bffc17 	ldw	r2,-16(fp)
   4d19c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d1a0:	e0bffd17 	ldw	r2,-12(fp)
   4d1a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4d1a8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4d1ac:	e037883a 	mov	sp,fp
   4d1b0:	df000017 	ldw	fp,0(sp)
   4d1b4:	dec00104 	addi	sp,sp,4
   4d1b8:	f800283a 	ret

0004d1bc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4d1bc:	defff904 	addi	sp,sp,-28
   4d1c0:	df000615 	stw	fp,24(sp)
   4d1c4:	df000604 	addi	fp,sp,24
   4d1c8:	e13ffe15 	stw	r4,-8(fp)
   4d1cc:	e17fff15 	stw	r5,-4(fp)
   4d1d0:	e0bfff17 	ldw	r2,-4(fp)
   4d1d4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d1d8:	0005303a 	rdctl	r2,status
   4d1dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d1e0:	e0fffb17 	ldw	r3,-20(fp)
   4d1e4:	00bfff84 	movi	r2,-2
   4d1e8:	1884703a 	and	r2,r3,r2
   4d1ec:	1001703a 	wrctl	status,r2
  
  return context;
   4d1f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4d1f4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4d1f8:	e0bffa17 	ldw	r2,-24(fp)
   4d1fc:	00c00044 	movi	r3,1
   4d200:	1884983a 	sll	r2,r3,r2
   4d204:	0084303a 	nor	r2,zero,r2
   4d208:	1007883a 	mov	r3,r2
   4d20c:	00800174 	movhi	r2,5
   4d210:	10864104 	addi	r2,r2,6404
   4d214:	10800017 	ldw	r2,0(r2)
   4d218:	1886703a 	and	r3,r3,r2
   4d21c:	00800174 	movhi	r2,5
   4d220:	10864104 	addi	r2,r2,6404
   4d224:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4d228:	00800174 	movhi	r2,5
   4d22c:	10864104 	addi	r2,r2,6404
   4d230:	10800017 	ldw	r2,0(r2)
   4d234:	100170fa 	wrctl	ienable,r2
   4d238:	e0bffc17 	ldw	r2,-16(fp)
   4d23c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d240:	e0bffd17 	ldw	r2,-12(fp)
   4d244:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4d248:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4d24c:	e037883a 	mov	sp,fp
   4d250:	df000017 	ldw	fp,0(sp)
   4d254:	dec00104 	addi	sp,sp,4
   4d258:	f800283a 	ret

0004d25c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4d25c:	defffc04 	addi	sp,sp,-16
   4d260:	df000315 	stw	fp,12(sp)
   4d264:	df000304 	addi	fp,sp,12
   4d268:	e13ffe15 	stw	r4,-8(fp)
   4d26c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4d270:	000530fa 	rdctl	r2,ienable
   4d274:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4d278:	e0bfff17 	ldw	r2,-4(fp)
   4d27c:	00c00044 	movi	r3,1
   4d280:	1884983a 	sll	r2,r3,r2
   4d284:	1007883a 	mov	r3,r2
   4d288:	e0bffd17 	ldw	r2,-12(fp)
   4d28c:	1884703a 	and	r2,r3,r2
   4d290:	1004c03a 	cmpne	r2,r2,zero
   4d294:	10803fcc 	andi	r2,r2,255
}
   4d298:	e037883a 	mov	sp,fp
   4d29c:	df000017 	ldw	fp,0(sp)
   4d2a0:	dec00104 	addi	sp,sp,4
   4d2a4:	f800283a 	ret

0004d2a8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4d2a8:	defff504 	addi	sp,sp,-44
   4d2ac:	dfc00a15 	stw	ra,40(sp)
   4d2b0:	df000915 	stw	fp,36(sp)
   4d2b4:	df000904 	addi	fp,sp,36
   4d2b8:	e13ffc15 	stw	r4,-16(fp)
   4d2bc:	e17ffd15 	stw	r5,-12(fp)
   4d2c0:	e1bffe15 	stw	r6,-8(fp)
   4d2c4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4d2c8:	00bffa84 	movi	r2,-22
   4d2cc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4d2d0:	e0bffd17 	ldw	r2,-12(fp)
   4d2d4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4d2d8:	e0bff817 	ldw	r2,-32(fp)
   4d2dc:	10800808 	cmpgei	r2,r2,32
   4d2e0:	1000271e 	bne	r2,zero,4d380 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d2e4:	0005303a 	rdctl	r2,status
   4d2e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d2ec:	e0fffa17 	ldw	r3,-24(fp)
   4d2f0:	00bfff84 	movi	r2,-2
   4d2f4:	1884703a 	and	r2,r3,r2
   4d2f8:	1001703a 	wrctl	status,r2
  
  return context;
   4d2fc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4d300:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   4d304:	00c00174 	movhi	r3,5
   4d308:	18c64e04 	addi	r3,r3,6456
   4d30c:	e0bff817 	ldw	r2,-32(fp)
   4d310:	100490fa 	slli	r2,r2,3
   4d314:	1885883a 	add	r2,r3,r2
   4d318:	e0fffe17 	ldw	r3,-8(fp)
   4d31c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4d320:	00c00174 	movhi	r3,5
   4d324:	18c64e04 	addi	r3,r3,6456
   4d328:	e0bff817 	ldw	r2,-32(fp)
   4d32c:	100490fa 	slli	r2,r2,3
   4d330:	1885883a 	add	r2,r3,r2
   4d334:	10800104 	addi	r2,r2,4
   4d338:	e0ffff17 	ldw	r3,-4(fp)
   4d33c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4d340:	e0bffe17 	ldw	r2,-8(fp)
   4d344:	10000526 	beq	r2,zero,4d35c <alt_iic_isr_register+0xb4>
   4d348:	e0bff817 	ldw	r2,-32(fp)
   4d34c:	e13ffc17 	ldw	r4,-16(fp)
   4d350:	100b883a 	mov	r5,r2
   4d354:	004d1200 	call	4d120 <alt_ic_irq_enable>
   4d358:	00000406 	br	4d36c <alt_iic_isr_register+0xc4>
   4d35c:	e0bff817 	ldw	r2,-32(fp)
   4d360:	e13ffc17 	ldw	r4,-16(fp)
   4d364:	100b883a 	mov	r5,r2
   4d368:	004d1bc0 	call	4d1bc <alt_ic_irq_disable>
   4d36c:	e0bff715 	stw	r2,-36(fp)
   4d370:	e0bff917 	ldw	r2,-28(fp)
   4d374:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d378:	e0bffb17 	ldw	r2,-20(fp)
   4d37c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4d380:	e0bff717 	ldw	r2,-36(fp)
}
   4d384:	e037883a 	mov	sp,fp
   4d388:	dfc00117 	ldw	ra,4(sp)
   4d38c:	df000017 	ldw	fp,0(sp)
   4d390:	dec00204 	addi	sp,sp,8
   4d394:	f800283a 	ret

0004d398 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4d398:	defff804 	addi	sp,sp,-32
   4d39c:	dfc00715 	stw	ra,28(sp)
   4d3a0:	df000615 	stw	fp,24(sp)
   4d3a4:	dc000515 	stw	r16,20(sp)
   4d3a8:	df000504 	addi	fp,sp,20
   4d3ac:	e13ffc15 	stw	r4,-16(fp)
   4d3b0:	e17ffd15 	stw	r5,-12(fp)
   4d3b4:	e1bffe15 	stw	r6,-8(fp)
   4d3b8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4d3bc:	e13ffd17 	ldw	r4,-12(fp)
   4d3c0:	e17ffe17 	ldw	r5,-8(fp)
   4d3c4:	e1bfff17 	ldw	r6,-4(fp)
   4d3c8:	004d6300 	call	4d630 <open>
   4d3cc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4d3d0:	e0bffb17 	ldw	r2,-20(fp)
   4d3d4:	10002216 	blt	r2,zero,4d460 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   4d3d8:	04000174 	movhi	r16,5
   4d3dc:	843b0b04 	addi	r16,r16,-5076
   4d3e0:	e0bffb17 	ldw	r2,-20(fp)
   4d3e4:	1009883a 	mov	r4,r2
   4d3e8:	01400304 	movi	r5,12
   4d3ec:	00419f00 	call	419f0 <__mulsi3>
   4d3f0:	8085883a 	add	r2,r16,r2
   4d3f4:	10c00017 	ldw	r3,0(r2)
   4d3f8:	e0bffc17 	ldw	r2,-16(fp)
   4d3fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4d400:	04000174 	movhi	r16,5
   4d404:	843b0b04 	addi	r16,r16,-5076
   4d408:	e0bffb17 	ldw	r2,-20(fp)
   4d40c:	1009883a 	mov	r4,r2
   4d410:	01400304 	movi	r5,12
   4d414:	00419f00 	call	419f0 <__mulsi3>
   4d418:	8085883a 	add	r2,r16,r2
   4d41c:	10800104 	addi	r2,r2,4
   4d420:	10c00017 	ldw	r3,0(r2)
   4d424:	e0bffc17 	ldw	r2,-16(fp)
   4d428:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4d42c:	04000174 	movhi	r16,5
   4d430:	843b0b04 	addi	r16,r16,-5076
   4d434:	e0bffb17 	ldw	r2,-20(fp)
   4d438:	1009883a 	mov	r4,r2
   4d43c:	01400304 	movi	r5,12
   4d440:	00419f00 	call	419f0 <__mulsi3>
   4d444:	8085883a 	add	r2,r16,r2
   4d448:	10800204 	addi	r2,r2,8
   4d44c:	10c00017 	ldw	r3,0(r2)
   4d450:	e0bffc17 	ldw	r2,-16(fp)
   4d454:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4d458:	e13ffb17 	ldw	r4,-20(fp)
   4d45c:	004b85c0 	call	4b85c <alt_release_fd>
  }
} 
   4d460:	e037883a 	mov	sp,fp
   4d464:	dfc00217 	ldw	ra,8(sp)
   4d468:	df000117 	ldw	fp,4(sp)
   4d46c:	dc000017 	ldw	r16,0(sp)
   4d470:	dec00304 	addi	sp,sp,12
   4d474:	f800283a 	ret

0004d478 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4d478:	defffb04 	addi	sp,sp,-20
   4d47c:	dfc00415 	stw	ra,16(sp)
   4d480:	df000315 	stw	fp,12(sp)
   4d484:	df000304 	addi	fp,sp,12
   4d488:	e13ffd15 	stw	r4,-12(fp)
   4d48c:	e17ffe15 	stw	r5,-8(fp)
   4d490:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4d494:	01000174 	movhi	r4,5
   4d498:	213b0e04 	addi	r4,r4,-5064
   4d49c:	e17ffd17 	ldw	r5,-12(fp)
   4d4a0:	01800044 	movi	r6,1
   4d4a4:	01c07fc4 	movi	r7,511
   4d4a8:	004d3980 	call	4d398 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4d4ac:	01000174 	movhi	r4,5
   4d4b0:	213b0b04 	addi	r4,r4,-5076
   4d4b4:	e17ffe17 	ldw	r5,-8(fp)
   4d4b8:	000d883a 	mov	r6,zero
   4d4bc:	01c07fc4 	movi	r7,511
   4d4c0:	004d3980 	call	4d398 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4d4c4:	01000174 	movhi	r4,5
   4d4c8:	213b1104 	addi	r4,r4,-5052
   4d4cc:	e17fff17 	ldw	r5,-4(fp)
   4d4d0:	01800044 	movi	r6,1
   4d4d4:	01c07fc4 	movi	r7,511
   4d4d8:	004d3980 	call	4d398 <alt_open_fd>
}  
   4d4dc:	e037883a 	mov	sp,fp
   4d4e0:	dfc00117 	ldw	ra,4(sp)
   4d4e4:	df000017 	ldw	fp,0(sp)
   4d4e8:	dec00204 	addi	sp,sp,8
   4d4ec:	f800283a 	ret

0004d4f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d4f0:	defffe04 	addi	sp,sp,-8
   4d4f4:	dfc00115 	stw	ra,4(sp)
   4d4f8:	df000015 	stw	fp,0(sp)
   4d4fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d500:	00800174 	movhi	r2,5
   4d504:	10bf9204 	addi	r2,r2,-440
   4d508:	10800017 	ldw	r2,0(r2)
   4d50c:	10000526 	beq	r2,zero,4d524 <alt_get_errno+0x34>
   4d510:	00800174 	movhi	r2,5
   4d514:	10bf9204 	addi	r2,r2,-440
   4d518:	10800017 	ldw	r2,0(r2)
   4d51c:	103ee83a 	callr	r2
   4d520:	00000206 	br	4d52c <alt_get_errno+0x3c>
   4d524:	00800174 	movhi	r2,5
   4d528:	10863804 	addi	r2,r2,6368
}
   4d52c:	e037883a 	mov	sp,fp
   4d530:	dfc00117 	ldw	ra,4(sp)
   4d534:	df000017 	ldw	fp,0(sp)
   4d538:	dec00204 	addi	sp,sp,8
   4d53c:	f800283a 	ret

0004d540 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4d540:	defffb04 	addi	sp,sp,-20
   4d544:	dfc00415 	stw	ra,16(sp)
   4d548:	df000315 	stw	fp,12(sp)
   4d54c:	dc000215 	stw	r16,8(sp)
   4d550:	df000204 	addi	fp,sp,8
   4d554:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4d558:	e0bfff17 	ldw	r2,-4(fp)
   4d55c:	10800217 	ldw	r2,8(r2)
   4d560:	10d00034 	orhi	r3,r2,16384
   4d564:	e0bfff17 	ldw	r2,-4(fp)
   4d568:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4d56c:	e03ffe15 	stw	zero,-8(fp)
   4d570:	00002206 	br	4d5fc <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4d574:	04000174 	movhi	r16,5
   4d578:	843b0b04 	addi	r16,r16,-5076
   4d57c:	e0bffe17 	ldw	r2,-8(fp)
   4d580:	1009883a 	mov	r4,r2
   4d584:	01400304 	movi	r5,12
   4d588:	00419f00 	call	419f0 <__mulsi3>
   4d58c:	8085883a 	add	r2,r16,r2
   4d590:	10c00017 	ldw	r3,0(r2)
   4d594:	e0bfff17 	ldw	r2,-4(fp)
   4d598:	10800017 	ldw	r2,0(r2)
   4d59c:	1880141e 	bne	r3,r2,4d5f0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4d5a0:	04000174 	movhi	r16,5
   4d5a4:	843b0b04 	addi	r16,r16,-5076
   4d5a8:	e0bffe17 	ldw	r2,-8(fp)
   4d5ac:	1009883a 	mov	r4,r2
   4d5b0:	01400304 	movi	r5,12
   4d5b4:	00419f00 	call	419f0 <__mulsi3>
   4d5b8:	8085883a 	add	r2,r16,r2
   4d5bc:	10800204 	addi	r2,r2,8
   4d5c0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4d5c4:	10000a0e 	bge	r2,zero,4d5f0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4d5c8:	e13ffe17 	ldw	r4,-8(fp)
   4d5cc:	01400304 	movi	r5,12
   4d5d0:	00419f00 	call	419f0 <__mulsi3>
   4d5d4:	00c00174 	movhi	r3,5
   4d5d8:	18fb0b04 	addi	r3,r3,-5076
   4d5dc:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4d5e0:	e0bfff17 	ldw	r2,-4(fp)
   4d5e4:	18800226 	beq	r3,r2,4d5f0 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4d5e8:	00bffcc4 	movi	r2,-13
   4d5ec:	00000a06 	br	4d618 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4d5f0:	e0bffe17 	ldw	r2,-8(fp)
   4d5f4:	10800044 	addi	r2,r2,1
   4d5f8:	e0bffe15 	stw	r2,-8(fp)
   4d5fc:	00800174 	movhi	r2,5
   4d600:	10bf9104 	addi	r2,r2,-444
   4d604:	10800017 	ldw	r2,0(r2)
   4d608:	1007883a 	mov	r3,r2
   4d60c:	e0bffe17 	ldw	r2,-8(fp)
   4d610:	18bfd82e 	bgeu	r3,r2,4d574 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4d614:	0005883a 	mov	r2,zero
}
   4d618:	e037883a 	mov	sp,fp
   4d61c:	dfc00217 	ldw	ra,8(sp)
   4d620:	df000117 	ldw	fp,4(sp)
   4d624:	dc000017 	ldw	r16,0(sp)
   4d628:	dec00304 	addi	sp,sp,12
   4d62c:	f800283a 	ret

0004d630 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4d630:	defff604 	addi	sp,sp,-40
   4d634:	dfc00915 	stw	ra,36(sp)
   4d638:	df000815 	stw	fp,32(sp)
   4d63c:	df000804 	addi	fp,sp,32
   4d640:	e13ffd15 	stw	r4,-12(fp)
   4d644:	e17ffe15 	stw	r5,-8(fp)
   4d648:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4d64c:	00bfffc4 	movi	r2,-1
   4d650:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4d654:	00bffb44 	movi	r2,-19
   4d658:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4d65c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4d660:	e13ffd17 	ldw	r4,-12(fp)
   4d664:	01400174 	movhi	r5,5
   4d668:	297f8f04 	addi	r5,r5,-452
   4d66c:	004d9440 	call	4d944 <alt_find_dev>
   4d670:	e0bff815 	stw	r2,-32(fp)
   4d674:	e0bff817 	ldw	r2,-32(fp)
   4d678:	1000051e 	bne	r2,zero,4d690 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4d67c:	e13ffd17 	ldw	r4,-12(fp)
   4d680:	004d9d40 	call	4d9d4 <alt_find_file>
   4d684:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4d688:	00800044 	movi	r2,1
   4d68c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4d690:	e0bff817 	ldw	r2,-32(fp)
   4d694:	10002a26 	beq	r2,zero,4d740 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4d698:	e13ff817 	ldw	r4,-32(fp)
   4d69c:	004dae80 	call	4dae8 <alt_get_fd>
   4d6a0:	e0bff915 	stw	r2,-28(fp)
   4d6a4:	e0bff917 	ldw	r2,-28(fp)
   4d6a8:	1000030e 	bge	r2,zero,4d6b8 <open+0x88>
    {
      status = index;
   4d6ac:	e0bff917 	ldw	r2,-28(fp)
   4d6b0:	e0bffa15 	stw	r2,-24(fp)
   4d6b4:	00002406 	br	4d748 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   4d6b8:	e13ff917 	ldw	r4,-28(fp)
   4d6bc:	01400304 	movi	r5,12
   4d6c0:	00419f00 	call	419f0 <__mulsi3>
   4d6c4:	00c00174 	movhi	r3,5
   4d6c8:	18fb0b04 	addi	r3,r3,-5076
   4d6cc:	10c5883a 	add	r2,r2,r3
   4d6d0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4d6d4:	e0fffe17 	ldw	r3,-8(fp)
   4d6d8:	00900034 	movhi	r2,16384
   4d6dc:	10bfffc4 	addi	r2,r2,-1
   4d6e0:	1886703a 	and	r3,r3,r2
   4d6e4:	e0bffc17 	ldw	r2,-16(fp)
   4d6e8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4d6ec:	e0bffb17 	ldw	r2,-20(fp)
   4d6f0:	1000051e 	bne	r2,zero,4d708 <open+0xd8>
   4d6f4:	e13ffc17 	ldw	r4,-16(fp)
   4d6f8:	004d5400 	call	4d540 <alt_file_locked>
   4d6fc:	e0bffa15 	stw	r2,-24(fp)
   4d700:	e0bffa17 	ldw	r2,-24(fp)
   4d704:	10001016 	blt	r2,zero,4d748 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4d708:	e0bff817 	ldw	r2,-32(fp)
   4d70c:	10800317 	ldw	r2,12(r2)
   4d710:	10000826 	beq	r2,zero,4d734 <open+0x104>
   4d714:	e0bff817 	ldw	r2,-32(fp)
   4d718:	10800317 	ldw	r2,12(r2)
   4d71c:	e13ffc17 	ldw	r4,-16(fp)
   4d720:	e17ffd17 	ldw	r5,-12(fp)
   4d724:	e1bffe17 	ldw	r6,-8(fp)
   4d728:	e1ffff17 	ldw	r7,-4(fp)
   4d72c:	103ee83a 	callr	r2
   4d730:	00000106 	br	4d738 <open+0x108>
   4d734:	0005883a 	mov	r2,zero
   4d738:	e0bffa15 	stw	r2,-24(fp)
   4d73c:	00000206 	br	4d748 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4d740:	00bffb44 	movi	r2,-19
   4d744:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4d748:	e0bffa17 	ldw	r2,-24(fp)
   4d74c:	1000080e 	bge	r2,zero,4d770 <open+0x140>
  {
    alt_release_fd (index);  
   4d750:	e13ff917 	ldw	r4,-28(fp)
   4d754:	004b85c0 	call	4b85c <alt_release_fd>
    ALT_ERRNO = -status;
   4d758:	004d4f00 	call	4d4f0 <alt_get_errno>
   4d75c:	e0fffa17 	ldw	r3,-24(fp)
   4d760:	00c7c83a 	sub	r3,zero,r3
   4d764:	10c00015 	stw	r3,0(r2)
    return -1;
   4d768:	00bfffc4 	movi	r2,-1
   4d76c:	00000106 	br	4d774 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   4d770:	e0bff917 	ldw	r2,-28(fp)
}
   4d774:	e037883a 	mov	sp,fp
   4d778:	dfc00117 	ldw	ra,4(sp)
   4d77c:	df000017 	ldw	fp,0(sp)
   4d780:	dec00204 	addi	sp,sp,8
   4d784:	f800283a 	ret

0004d788 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4d788:	defffa04 	addi	sp,sp,-24
   4d78c:	df000515 	stw	fp,20(sp)
   4d790:	df000504 	addi	fp,sp,20
   4d794:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d798:	0005303a 	rdctl	r2,status
   4d79c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d7a0:	e0fffc17 	ldw	r3,-16(fp)
   4d7a4:	00bfff84 	movi	r2,-2
   4d7a8:	1884703a 	and	r2,r3,r2
   4d7ac:	1001703a 	wrctl	status,r2
  
  return context;
   4d7b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4d7b4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4d7b8:	e0bfff17 	ldw	r2,-4(fp)
   4d7bc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4d7c0:	e0bffd17 	ldw	r2,-12(fp)
   4d7c4:	10800017 	ldw	r2,0(r2)
   4d7c8:	e0fffd17 	ldw	r3,-12(fp)
   4d7cc:	18c00117 	ldw	r3,4(r3)
   4d7d0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4d7d4:	e0bffd17 	ldw	r2,-12(fp)
   4d7d8:	10800117 	ldw	r2,4(r2)
   4d7dc:	e0fffd17 	ldw	r3,-12(fp)
   4d7e0:	18c00017 	ldw	r3,0(r3)
   4d7e4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4d7e8:	e0bffd17 	ldw	r2,-12(fp)
   4d7ec:	e0fffd17 	ldw	r3,-12(fp)
   4d7f0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4d7f4:	e0bffd17 	ldw	r2,-12(fp)
   4d7f8:	e0fffd17 	ldw	r3,-12(fp)
   4d7fc:	10c00015 	stw	r3,0(r2)
   4d800:	e0bffb17 	ldw	r2,-20(fp)
   4d804:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d808:	e0bffe17 	ldw	r2,-8(fp)
   4d80c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4d810:	e037883a 	mov	sp,fp
   4d814:	df000017 	ldw	fp,0(sp)
   4d818:	dec00104 	addi	sp,sp,4
   4d81c:	f800283a 	ret

0004d820 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4d820:	defffb04 	addi	sp,sp,-20
   4d824:	dfc00415 	stw	ra,16(sp)
   4d828:	df000315 	stw	fp,12(sp)
   4d82c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4d830:	d0a01217 	ldw	r2,-32696(gp)
   4d834:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4d838:	d0a6c017 	ldw	r2,-25856(gp)
   4d83c:	10800044 	addi	r2,r2,1
   4d840:	d0a6c015 	stw	r2,-25856(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4d844:	00002e06 	br	4d900 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4d848:	e0bffd17 	ldw	r2,-12(fp)
   4d84c:	10800017 	ldw	r2,0(r2)
   4d850:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4d854:	e0bffd17 	ldw	r2,-12(fp)
   4d858:	10800403 	ldbu	r2,16(r2)
   4d85c:	10803fcc 	andi	r2,r2,255
   4d860:	10000426 	beq	r2,zero,4d874 <alt_tick+0x54>
   4d864:	d0a6c017 	ldw	r2,-25856(gp)
   4d868:	1000021e 	bne	r2,zero,4d874 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4d86c:	e0bffd17 	ldw	r2,-12(fp)
   4d870:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4d874:	e0bffd17 	ldw	r2,-12(fp)
   4d878:	10800217 	ldw	r2,8(r2)
   4d87c:	d0e6c017 	ldw	r3,-25856(gp)
   4d880:	18801d36 	bltu	r3,r2,4d8f8 <alt_tick+0xd8>
   4d884:	e0bffd17 	ldw	r2,-12(fp)
   4d888:	10800403 	ldbu	r2,16(r2)
   4d88c:	10803fcc 	andi	r2,r2,255
   4d890:	1000191e 	bne	r2,zero,4d8f8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4d894:	e0bffd17 	ldw	r2,-12(fp)
   4d898:	10c00317 	ldw	r3,12(r2)
   4d89c:	e0bffd17 	ldw	r2,-12(fp)
   4d8a0:	10800517 	ldw	r2,20(r2)
   4d8a4:	1009883a 	mov	r4,r2
   4d8a8:	183ee83a 	callr	r3
   4d8ac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4d8b0:	e0bfff17 	ldw	r2,-4(fp)
   4d8b4:	1000031e 	bne	r2,zero,4d8c4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4d8b8:	e13ffd17 	ldw	r4,-12(fp)
   4d8bc:	004d7880 	call	4d788 <alt_alarm_stop>
   4d8c0:	00000d06 	br	4d8f8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4d8c4:	e0bffd17 	ldw	r2,-12(fp)
   4d8c8:	10c00217 	ldw	r3,8(r2)
   4d8cc:	e0bfff17 	ldw	r2,-4(fp)
   4d8d0:	1887883a 	add	r3,r3,r2
   4d8d4:	e0bffd17 	ldw	r2,-12(fp)
   4d8d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4d8dc:	e0bffd17 	ldw	r2,-12(fp)
   4d8e0:	10c00217 	ldw	r3,8(r2)
   4d8e4:	d0a6c017 	ldw	r2,-25856(gp)
   4d8e8:	1880032e 	bgeu	r3,r2,4d8f8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4d8ec:	e0bffd17 	ldw	r2,-12(fp)
   4d8f0:	00c00044 	movi	r3,1
   4d8f4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4d8f8:	e0bffe17 	ldw	r2,-8(fp)
   4d8fc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4d900:	e0fffd17 	ldw	r3,-12(fp)
   4d904:	d0a01204 	addi	r2,gp,-32696
   4d908:	18bfcf1e 	bne	r3,r2,4d848 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4d90c:	0001883a 	nop
}
   4d910:	e037883a 	mov	sp,fp
   4d914:	dfc00117 	ldw	ra,4(sp)
   4d918:	df000017 	ldw	fp,0(sp)
   4d91c:	dec00204 	addi	sp,sp,8
   4d920:	f800283a 	ret

0004d924 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   4d924:	deffff04 	addi	sp,sp,-4
   4d928:	df000015 	stw	fp,0(sp)
   4d92c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4d930:	000170fa 	wrctl	ienable,zero
}
   4d934:	e037883a 	mov	sp,fp
   4d938:	df000017 	ldw	fp,0(sp)
   4d93c:	dec00104 	addi	sp,sp,4
   4d940:	f800283a 	ret

0004d944 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4d944:	defffa04 	addi	sp,sp,-24
   4d948:	dfc00515 	stw	ra,20(sp)
   4d94c:	df000415 	stw	fp,16(sp)
   4d950:	df000404 	addi	fp,sp,16
   4d954:	e13ffe15 	stw	r4,-8(fp)
   4d958:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4d95c:	e0bfff17 	ldw	r2,-4(fp)
   4d960:	10800017 	ldw	r2,0(r2)
   4d964:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4d968:	e13ffe17 	ldw	r4,-8(fp)
   4d96c:	00423280 	call	42328 <strlen>
   4d970:	10800044 	addi	r2,r2,1
   4d974:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4d978:	00000d06 	br	4d9b0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4d97c:	e0bffc17 	ldw	r2,-16(fp)
   4d980:	10c00217 	ldw	r3,8(r2)
   4d984:	e0bffd17 	ldw	r2,-12(fp)
   4d988:	1809883a 	mov	r4,r3
   4d98c:	e17ffe17 	ldw	r5,-8(fp)
   4d990:	100d883a 	mov	r6,r2
   4d994:	004dc940 	call	4dc94 <memcmp>
   4d998:	1000021e 	bne	r2,zero,4d9a4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4d99c:	e0bffc17 	ldw	r2,-16(fp)
   4d9a0:	00000706 	br	4d9c0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4d9a4:	e0bffc17 	ldw	r2,-16(fp)
   4d9a8:	10800017 	ldw	r2,0(r2)
   4d9ac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4d9b0:	e0fffc17 	ldw	r3,-16(fp)
   4d9b4:	e0bfff17 	ldw	r2,-4(fp)
   4d9b8:	18bff01e 	bne	r3,r2,4d97c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4d9bc:	0005883a 	mov	r2,zero
}
   4d9c0:	e037883a 	mov	sp,fp
   4d9c4:	dfc00117 	ldw	ra,4(sp)
   4d9c8:	df000017 	ldw	fp,0(sp)
   4d9cc:	dec00204 	addi	sp,sp,8
   4d9d0:	f800283a 	ret

0004d9d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4d9d4:	defffb04 	addi	sp,sp,-20
   4d9d8:	dfc00415 	stw	ra,16(sp)
   4d9dc:	df000315 	stw	fp,12(sp)
   4d9e0:	df000304 	addi	fp,sp,12
   4d9e4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4d9e8:	00800174 	movhi	r2,5
   4d9ec:	10bf8d04 	addi	r2,r2,-460
   4d9f0:	10800017 	ldw	r2,0(r2)
   4d9f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4d9f8:	00003106 	br	4dac0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   4d9fc:	e0bffd17 	ldw	r2,-12(fp)
   4da00:	10800217 	ldw	r2,8(r2)
   4da04:	1009883a 	mov	r4,r2
   4da08:	00423280 	call	42328 <strlen>
   4da0c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4da10:	e0bffd17 	ldw	r2,-12(fp)
   4da14:	10c00217 	ldw	r3,8(r2)
   4da18:	e0bffe17 	ldw	r2,-8(fp)
   4da1c:	10bfffc4 	addi	r2,r2,-1
   4da20:	1885883a 	add	r2,r3,r2
   4da24:	10800003 	ldbu	r2,0(r2)
   4da28:	10803fcc 	andi	r2,r2,255
   4da2c:	1080201c 	xori	r2,r2,128
   4da30:	10bfe004 	addi	r2,r2,-128
   4da34:	10800bd8 	cmpnei	r2,r2,47
   4da38:	1000031e 	bne	r2,zero,4da48 <alt_find_file+0x74>
    {
      len -= 1;
   4da3c:	e0bffe17 	ldw	r2,-8(fp)
   4da40:	10bfffc4 	addi	r2,r2,-1
   4da44:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4da48:	e0bffe17 	ldw	r2,-8(fp)
   4da4c:	e0ffff17 	ldw	r3,-4(fp)
   4da50:	1885883a 	add	r2,r3,r2
   4da54:	10800003 	ldbu	r2,0(r2)
   4da58:	10803fcc 	andi	r2,r2,255
   4da5c:	1080201c 	xori	r2,r2,128
   4da60:	10bfe004 	addi	r2,r2,-128
   4da64:	10800be0 	cmpeqi	r2,r2,47
   4da68:	1000081e 	bne	r2,zero,4da8c <alt_find_file+0xb8>
   4da6c:	e0bffe17 	ldw	r2,-8(fp)
   4da70:	e0ffff17 	ldw	r3,-4(fp)
   4da74:	1885883a 	add	r2,r3,r2
   4da78:	10800003 	ldbu	r2,0(r2)
   4da7c:	10803fcc 	andi	r2,r2,255
   4da80:	1080201c 	xori	r2,r2,128
   4da84:	10bfe004 	addi	r2,r2,-128
   4da88:	10000a1e 	bne	r2,zero,4dab4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   4da8c:	e0bffd17 	ldw	r2,-12(fp)
   4da90:	10c00217 	ldw	r3,8(r2)
   4da94:	e0bffe17 	ldw	r2,-8(fp)
   4da98:	1809883a 	mov	r4,r3
   4da9c:	e17fff17 	ldw	r5,-4(fp)
   4daa0:	100d883a 	mov	r6,r2
   4daa4:	004dc940 	call	4dc94 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4daa8:	1000021e 	bne	r2,zero,4dab4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4daac:	e0bffd17 	ldw	r2,-12(fp)
   4dab0:	00000806 	br	4dad4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   4dab4:	e0bffd17 	ldw	r2,-12(fp)
   4dab8:	10800017 	ldw	r2,0(r2)
   4dabc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4dac0:	e0fffd17 	ldw	r3,-12(fp)
   4dac4:	00800174 	movhi	r2,5
   4dac8:	10bf8d04 	addi	r2,r2,-460
   4dacc:	18bfcb1e 	bne	r3,r2,4d9fc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4dad0:	0005883a 	mov	r2,zero
}
   4dad4:	e037883a 	mov	sp,fp
   4dad8:	dfc00117 	ldw	ra,4(sp)
   4dadc:	df000017 	ldw	fp,0(sp)
   4dae0:	dec00204 	addi	sp,sp,8
   4dae4:	f800283a 	ret

0004dae8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4dae8:	defffa04 	addi	sp,sp,-24
   4daec:	dfc00515 	stw	ra,20(sp)
   4daf0:	df000415 	stw	fp,16(sp)
   4daf4:	dc000315 	stw	r16,12(sp)
   4daf8:	df000304 	addi	fp,sp,12
   4dafc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4db00:	00bffa04 	movi	r2,-24
   4db04:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4db08:	e03ffd15 	stw	zero,-12(fp)
   4db0c:	00002106 	br	4db94 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   4db10:	04000174 	movhi	r16,5
   4db14:	843b0b04 	addi	r16,r16,-5076
   4db18:	e0bffd17 	ldw	r2,-12(fp)
   4db1c:	1009883a 	mov	r4,r2
   4db20:	01400304 	movi	r5,12
   4db24:	00419f00 	call	419f0 <__mulsi3>
   4db28:	8085883a 	add	r2,r16,r2
   4db2c:	10800017 	ldw	r2,0(r2)
   4db30:	1000151e 	bne	r2,zero,4db88 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   4db34:	04000174 	movhi	r16,5
   4db38:	843b0b04 	addi	r16,r16,-5076
   4db3c:	e0bffd17 	ldw	r2,-12(fp)
   4db40:	1009883a 	mov	r4,r2
   4db44:	01400304 	movi	r5,12
   4db48:	00419f00 	call	419f0 <__mulsi3>
   4db4c:	8085883a 	add	r2,r16,r2
   4db50:	e0ffff17 	ldw	r3,-4(fp)
   4db54:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4db58:	00800174 	movhi	r2,5
   4db5c:	10bf9104 	addi	r2,r2,-444
   4db60:	10c00017 	ldw	r3,0(r2)
   4db64:	e0bffd17 	ldw	r2,-12(fp)
   4db68:	1880040e 	bge	r3,r2,4db7c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   4db6c:	00800174 	movhi	r2,5
   4db70:	10bf9104 	addi	r2,r2,-444
   4db74:	e0fffd17 	ldw	r3,-12(fp)
   4db78:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   4db7c:	e0bffd17 	ldw	r2,-12(fp)
   4db80:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   4db84:	00000606 	br	4dba0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4db88:	e0bffd17 	ldw	r2,-12(fp)
   4db8c:	10800044 	addi	r2,r2,1
   4db90:	e0bffd15 	stw	r2,-12(fp)
   4db94:	e0bffd17 	ldw	r2,-12(fp)
   4db98:	10800810 	cmplti	r2,r2,32
   4db9c:	103fdc1e 	bne	r2,zero,4db10 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4dba0:	e0bffe17 	ldw	r2,-8(fp)
}
   4dba4:	e037883a 	mov	sp,fp
   4dba8:	dfc00217 	ldw	ra,8(sp)
   4dbac:	df000117 	ldw	fp,4(sp)
   4dbb0:	dc000017 	ldw	r16,0(sp)
   4dbb4:	dec00304 	addi	sp,sp,12
   4dbb8:	f800283a 	ret

0004dbbc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4dbbc:	defffb04 	addi	sp,sp,-20
   4dbc0:	df000415 	stw	fp,16(sp)
   4dbc4:	df000404 	addi	fp,sp,16
   4dbc8:	e13ffe15 	stw	r4,-8(fp)
   4dbcc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4dbd0:	e0bfff17 	ldw	r2,-4(fp)
   4dbd4:	10840070 	cmpltui	r2,r2,4097
   4dbd8:	1000021e 	bne	r2,zero,4dbe4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4dbdc:	00840004 	movi	r2,4096
   4dbe0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4dbe4:	e0fffe17 	ldw	r3,-8(fp)
   4dbe8:	e0bfff17 	ldw	r2,-4(fp)
   4dbec:	1885883a 	add	r2,r3,r2
   4dbf0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4dbf4:	e0bffe17 	ldw	r2,-8(fp)
   4dbf8:	e0bffc15 	stw	r2,-16(fp)
   4dbfc:	00000506 	br	4dc14 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4dc00:	e0bffc17 	ldw	r2,-16(fp)
   4dc04:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4dc08:	e0bffc17 	ldw	r2,-16(fp)
   4dc0c:	10800804 	addi	r2,r2,32
   4dc10:	e0bffc15 	stw	r2,-16(fp)
   4dc14:	e0fffc17 	ldw	r3,-16(fp)
   4dc18:	e0bffd17 	ldw	r2,-12(fp)
   4dc1c:	18bff836 	bltu	r3,r2,4dc00 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4dc20:	e0bffe17 	ldw	r2,-8(fp)
   4dc24:	108007cc 	andi	r2,r2,31
   4dc28:	10000226 	beq	r2,zero,4dc34 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4dc2c:	e0bffc17 	ldw	r2,-16(fp)
   4dc30:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4dc34:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4dc38:	e037883a 	mov	sp,fp
   4dc3c:	df000017 	ldw	fp,0(sp)
   4dc40:	dec00104 	addi	sp,sp,4
   4dc44:	f800283a 	ret

0004dc48 <atexit>:
   4dc48:	200b883a 	mov	r5,r4
   4dc4c:	000d883a 	mov	r6,zero
   4dc50:	0009883a 	mov	r4,zero
   4dc54:	000f883a 	mov	r7,zero
   4dc58:	004dd101 	jmpi	4dd10 <__register_exitproc>

0004dc5c <exit>:
   4dc5c:	defffe04 	addi	sp,sp,-8
   4dc60:	000b883a 	mov	r5,zero
   4dc64:	dc000015 	stw	r16,0(sp)
   4dc68:	dfc00115 	stw	ra,4(sp)
   4dc6c:	2021883a 	mov	r16,r4
   4dc70:	004de400 	call	4de40 <__call_exitprocs>
   4dc74:	00800174 	movhi	r2,5
   4dc78:	10bf8a04 	addi	r2,r2,-472
   4dc7c:	11000017 	ldw	r4,0(r2)
   4dc80:	20800f17 	ldw	r2,60(r4)
   4dc84:	10000126 	beq	r2,zero,4dc8c <exit+0x30>
   4dc88:	103ee83a 	callr	r2
   4dc8c:	8009883a 	mov	r4,r16
   4dc90:	004dfe00 	call	4dfe0 <_exit>

0004dc94 <memcmp>:
   4dc94:	01c000c4 	movi	r7,3
   4dc98:	3980192e 	bgeu	r7,r6,4dd00 <memcmp+0x6c>
   4dc9c:	2904b03a 	or	r2,r5,r4
   4dca0:	11c4703a 	and	r2,r2,r7
   4dca4:	10000f26 	beq	r2,zero,4dce4 <memcmp+0x50>
   4dca8:	20c00003 	ldbu	r3,0(r4)
   4dcac:	28800003 	ldbu	r2,0(r5)
   4dcb0:	1880151e 	bne	r3,r2,4dd08 <memcmp+0x74>
   4dcb4:	31bfff84 	addi	r6,r6,-2
   4dcb8:	01ffffc4 	movi	r7,-1
   4dcbc:	00000406 	br	4dcd0 <memcmp+0x3c>
   4dcc0:	20c00003 	ldbu	r3,0(r4)
   4dcc4:	28800003 	ldbu	r2,0(r5)
   4dcc8:	31bfffc4 	addi	r6,r6,-1
   4dccc:	18800e1e 	bne	r3,r2,4dd08 <memcmp+0x74>
   4dcd0:	21000044 	addi	r4,r4,1
   4dcd4:	29400044 	addi	r5,r5,1
   4dcd8:	31fff91e 	bne	r6,r7,4dcc0 <memcmp+0x2c>
   4dcdc:	0005883a 	mov	r2,zero
   4dce0:	f800283a 	ret
   4dce4:	20c00017 	ldw	r3,0(r4)
   4dce8:	28800017 	ldw	r2,0(r5)
   4dcec:	1880041e 	bne	r3,r2,4dd00 <memcmp+0x6c>
   4dcf0:	31bfff04 	addi	r6,r6,-4
   4dcf4:	21000104 	addi	r4,r4,4
   4dcf8:	29400104 	addi	r5,r5,4
   4dcfc:	39bff936 	bltu	r7,r6,4dce4 <memcmp+0x50>
   4dd00:	303fe91e 	bne	r6,zero,4dca8 <memcmp+0x14>
   4dd04:	003ff506 	br	4dcdc <memcmp+0x48>
   4dd08:	1885c83a 	sub	r2,r3,r2
   4dd0c:	f800283a 	ret

0004dd10 <__register_exitproc>:
   4dd10:	defffa04 	addi	sp,sp,-24
   4dd14:	00800174 	movhi	r2,5
   4dd18:	10bf8a04 	addi	r2,r2,-472
   4dd1c:	dc000315 	stw	r16,12(sp)
   4dd20:	14000017 	ldw	r16,0(r2)
   4dd24:	dc400415 	stw	r17,16(sp)
   4dd28:	dfc00515 	stw	ra,20(sp)
   4dd2c:	80805217 	ldw	r2,328(r16)
   4dd30:	2023883a 	mov	r17,r4
   4dd34:	10003e26 	beq	r2,zero,4de30 <__register_exitproc+0x120>
   4dd38:	10c00117 	ldw	r3,4(r2)
   4dd3c:	020007c4 	movi	r8,31
   4dd40:	40c0180e 	bge	r8,r3,4dda4 <__register_exitproc+0x94>
   4dd44:	00800134 	movhi	r2,4
   4dd48:	10868604 	addi	r2,r2,6680
   4dd4c:	1000061e 	bne	r2,zero,4dd68 <__register_exitproc+0x58>
   4dd50:	00bfffc4 	movi	r2,-1
   4dd54:	dfc00517 	ldw	ra,20(sp)
   4dd58:	dc400417 	ldw	r17,16(sp)
   4dd5c:	dc000317 	ldw	r16,12(sp)
   4dd60:	dec00604 	addi	sp,sp,24
   4dd64:	f800283a 	ret
   4dd68:	01006404 	movi	r4,400
   4dd6c:	d9400015 	stw	r5,0(sp)
   4dd70:	d9800115 	stw	r6,4(sp)
   4dd74:	d9c00215 	stw	r7,8(sp)
   4dd78:	0041a180 	call	41a18 <malloc>
   4dd7c:	d9400017 	ldw	r5,0(sp)
   4dd80:	d9800117 	ldw	r6,4(sp)
   4dd84:	d9c00217 	ldw	r7,8(sp)
   4dd88:	103ff126 	beq	r2,zero,4dd50 <__register_exitproc+0x40>
   4dd8c:	80c05217 	ldw	r3,328(r16)
   4dd90:	10000115 	stw	zero,4(r2)
   4dd94:	10c00015 	stw	r3,0(r2)
   4dd98:	80805215 	stw	r2,328(r16)
   4dd9c:	10006215 	stw	zero,392(r2)
   4dda0:	10006315 	stw	zero,396(r2)
   4dda4:	10c00117 	ldw	r3,4(r2)
   4dda8:	88000d1e 	bne	r17,zero,4dde0 <__register_exitproc+0xd0>
   4ddac:	19000084 	addi	r4,r3,2
   4ddb0:	2109883a 	add	r4,r4,r4
   4ddb4:	18c00044 	addi	r3,r3,1
   4ddb8:	2109883a 	add	r4,r4,r4
   4ddbc:	1109883a 	add	r4,r2,r4
   4ddc0:	10c00115 	stw	r3,4(r2)
   4ddc4:	0005883a 	mov	r2,zero
   4ddc8:	21400015 	stw	r5,0(r4)
   4ddcc:	dfc00517 	ldw	ra,20(sp)
   4ddd0:	dc400417 	ldw	r17,16(sp)
   4ddd4:	dc000317 	ldw	r16,12(sp)
   4ddd8:	dec00604 	addi	sp,sp,24
   4dddc:	f800283a 	ret
   4dde0:	02400044 	movi	r9,1
   4dde4:	12806217 	ldw	r10,392(r2)
   4dde8:	48d2983a 	sll	r9,r9,r3
   4ddec:	19000804 	addi	r4,r3,32
   4ddf0:	18d1883a 	add	r8,r3,r3
   4ddf4:	2109883a 	add	r4,r4,r4
   4ddf8:	4211883a 	add	r8,r8,r8
   4ddfc:	2109883a 	add	r4,r4,r4
   4de00:	1109883a 	add	r4,r2,r4
   4de04:	1211883a 	add	r8,r2,r8
   4de08:	5254b03a 	or	r10,r10,r9
   4de0c:	21c02215 	stw	r7,136(r4)
   4de10:	41802215 	stw	r6,136(r8)
   4de14:	12806215 	stw	r10,392(r2)
   4de18:	01000084 	movi	r4,2
   4de1c:	893fe31e 	bne	r17,r4,4ddac <__register_exitproc+0x9c>
   4de20:	11006317 	ldw	r4,396(r2)
   4de24:	2252b03a 	or	r9,r4,r9
   4de28:	12406315 	stw	r9,396(r2)
   4de2c:	003fdf06 	br	4ddac <__register_exitproc+0x9c>
   4de30:	00800174 	movhi	r2,5
   4de34:	10868e04 	addi	r2,r2,6712
   4de38:	80805215 	stw	r2,328(r16)
   4de3c:	003fbe06 	br	4dd38 <__register_exitproc+0x28>

0004de40 <__call_exitprocs>:
   4de40:	00800174 	movhi	r2,5
   4de44:	10bf8a04 	addi	r2,r2,-472
   4de48:	10800017 	ldw	r2,0(r2)
   4de4c:	defff304 	addi	sp,sp,-52
   4de50:	df000b15 	stw	fp,44(sp)
   4de54:	d8800015 	stw	r2,0(sp)
   4de58:	10805204 	addi	r2,r2,328
   4de5c:	dd400815 	stw	r21,32(sp)
   4de60:	dfc00c15 	stw	ra,48(sp)
   4de64:	ddc00a15 	stw	r23,40(sp)
   4de68:	dd800915 	stw	r22,36(sp)
   4de6c:	dd000715 	stw	r20,28(sp)
   4de70:	dcc00615 	stw	r19,24(sp)
   4de74:	dc800515 	stw	r18,20(sp)
   4de78:	dc400415 	stw	r17,16(sp)
   4de7c:	dc000315 	stw	r16,12(sp)
   4de80:	d9000115 	stw	r4,4(sp)
   4de84:	2839883a 	mov	fp,r5
   4de88:	d8800215 	stw	r2,8(sp)
   4de8c:	057fffc4 	movi	r21,-1
   4de90:	d8800017 	ldw	r2,0(sp)
   4de94:	ddc00217 	ldw	r23,8(sp)
   4de98:	14805217 	ldw	r18,328(r2)
   4de9c:	90001726 	beq	r18,zero,4defc <__call_exitprocs+0xbc>
   4dea0:	94400117 	ldw	r17,4(r18)
   4dea4:	8c3fffc4 	addi	r16,r17,-1
   4dea8:	80001116 	blt	r16,zero,4def0 <__call_exitprocs+0xb0>
   4deac:	8c400044 	addi	r17,r17,1
   4deb0:	8427883a 	add	r19,r16,r16
   4deb4:	8c63883a 	add	r17,r17,r17
   4deb8:	95802204 	addi	r22,r18,136
   4debc:	9ce7883a 	add	r19,r19,r19
   4dec0:	8c63883a 	add	r17,r17,r17
   4dec4:	b4e7883a 	add	r19,r22,r19
   4dec8:	9463883a 	add	r17,r18,r17
   4decc:	e0001726 	beq	fp,zero,4df2c <__call_exitprocs+0xec>
   4ded0:	8c87c83a 	sub	r3,r17,r18
   4ded4:	b0c7883a 	add	r3,r22,r3
   4ded8:	18c01e17 	ldw	r3,120(r3)
   4dedc:	1f001326 	beq	r3,fp,4df2c <__call_exitprocs+0xec>
   4dee0:	843fffc4 	addi	r16,r16,-1
   4dee4:	9cffff04 	addi	r19,r19,-4
   4dee8:	8c7fff04 	addi	r17,r17,-4
   4deec:	857ff71e 	bne	r16,r21,4decc <__call_exitprocs+0x8c>
   4def0:	00800134 	movhi	r2,4
   4def4:	10868b04 	addi	r2,r2,6700
   4def8:	10002a1e 	bne	r2,zero,4dfa4 <__call_exitprocs+0x164>
   4defc:	dfc00c17 	ldw	ra,48(sp)
   4df00:	df000b17 	ldw	fp,44(sp)
   4df04:	ddc00a17 	ldw	r23,40(sp)
   4df08:	dd800917 	ldw	r22,36(sp)
   4df0c:	dd400817 	ldw	r21,32(sp)
   4df10:	dd000717 	ldw	r20,28(sp)
   4df14:	dcc00617 	ldw	r19,24(sp)
   4df18:	dc800517 	ldw	r18,20(sp)
   4df1c:	dc400417 	ldw	r17,16(sp)
   4df20:	dc000317 	ldw	r16,12(sp)
   4df24:	dec00d04 	addi	sp,sp,52
   4df28:	f800283a 	ret
   4df2c:	91000117 	ldw	r4,4(r18)
   4df30:	88c00017 	ldw	r3,0(r17)
   4df34:	213fffc4 	addi	r4,r4,-1
   4df38:	24001526 	beq	r4,r16,4df90 <__call_exitprocs+0x150>
   4df3c:	88000015 	stw	zero,0(r17)
   4df40:	183fe726 	beq	r3,zero,4dee0 <__call_exitprocs+0xa0>
   4df44:	00800044 	movi	r2,1
   4df48:	1408983a 	sll	r4,r2,r16
   4df4c:	91406217 	ldw	r5,392(r18)
   4df50:	95000117 	ldw	r20,4(r18)
   4df54:	214a703a 	and	r5,r4,r5
   4df58:	28000b26 	beq	r5,zero,4df88 <__call_exitprocs+0x148>
   4df5c:	91406317 	ldw	r5,396(r18)
   4df60:	2148703a 	and	r4,r4,r5
   4df64:	20000c1e 	bne	r4,zero,4df98 <__call_exitprocs+0x158>
   4df68:	99400017 	ldw	r5,0(r19)
   4df6c:	d9000117 	ldw	r4,4(sp)
   4df70:	183ee83a 	callr	r3
   4df74:	90c00117 	ldw	r3,4(r18)
   4df78:	1d3fc51e 	bne	r3,r20,4de90 <__call_exitprocs+0x50>
   4df7c:	b8c00017 	ldw	r3,0(r23)
   4df80:	1cbfd726 	beq	r3,r18,4dee0 <__call_exitprocs+0xa0>
   4df84:	003fc206 	br	4de90 <__call_exitprocs+0x50>
   4df88:	183ee83a 	callr	r3
   4df8c:	003ff906 	br	4df74 <__call_exitprocs+0x134>
   4df90:	94000115 	stw	r16,4(r18)
   4df94:	003fea06 	br	4df40 <__call_exitprocs+0x100>
   4df98:	99000017 	ldw	r4,0(r19)
   4df9c:	183ee83a 	callr	r3
   4dfa0:	003ff406 	br	4df74 <__call_exitprocs+0x134>
   4dfa4:	90c00117 	ldw	r3,4(r18)
   4dfa8:	1800071e 	bne	r3,zero,4dfc8 <__call_exitprocs+0x188>
   4dfac:	90c00017 	ldw	r3,0(r18)
   4dfb0:	18000926 	beq	r3,zero,4dfd8 <__call_exitprocs+0x198>
   4dfb4:	9009883a 	mov	r4,r18
   4dfb8:	b8c00015 	stw	r3,0(r23)
   4dfbc:	0041a2c0 	call	41a2c <free>
   4dfc0:	bc800017 	ldw	r18,0(r23)
   4dfc4:	003fb506 	br	4de9c <__call_exitprocs+0x5c>
   4dfc8:	90c00017 	ldw	r3,0(r18)
   4dfcc:	902f883a 	mov	r23,r18
   4dfd0:	1825883a 	mov	r18,r3
   4dfd4:	003fb106 	br	4de9c <__call_exitprocs+0x5c>
   4dfd8:	0007883a 	mov	r3,zero
   4dfdc:	003ffb06 	br	4dfcc <__call_exitprocs+0x18c>

0004dfe0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4dfe0:	defffc04 	addi	sp,sp,-16
   4dfe4:	df000315 	stw	fp,12(sp)
   4dfe8:	df000304 	addi	fp,sp,12
   4dfec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4dff0:	0001883a 	nop
   4dff4:	e0bfff17 	ldw	r2,-4(fp)
   4dff8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   4dffc:	e0bffd17 	ldw	r2,-12(fp)
   4e000:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4e004:	e0bffe17 	ldw	r2,-8(fp)
   4e008:	10000226 	beq	r2,zero,4e014 <_exit+0x34>
    ALT_SIM_FAIL();
   4e00c:	002af070 	cmpltui	zero,zero,43969
   4e010:	00000106 	br	4e018 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   4e014:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4e018:	003fff06 	br	4e018 <_exit+0x38>
