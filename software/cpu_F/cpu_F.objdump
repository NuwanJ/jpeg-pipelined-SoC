
cpu_F.elf:     file format elf32-littlenios2
cpu_F.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000a01b8

Program Header:
    LOAD off    0x00001000 vaddr 0x000a0000 paddr 0x000a0000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x000a0020 paddr 0x000a0020 align 2**12
         filesz 0x0000f03c memsz 0x0000f03c flags r-x
    LOAD off    0x0001005c vaddr 0x000af05c paddr 0x000b0b24 align 2**12
         filesz 0x00001ac8 memsz 0x00001ac8 flags rw-
    LOAD off    0x000125ec vaddr 0x000b25ec paddr 0x000b25ec align 2**12
         filesz 0x00000000 memsz 0x000002fc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  000a0000  000a0000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  000a0020  000a0020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ea9c  000a01b8  000a01b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000408  000aec54  000aec54  0000fc54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ac8  000af05c  000b0b24  0001005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002fc  000b25ec  000b25ec  000125ec  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00011b24  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000ff8  00000000  00000000  00011b48  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002c4c8  00000000  00000000  00012b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ae6e  00000000  00000000  0003f008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000c680  00000000  00000000  00049e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000023b4  00000000  00000000  000564f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000380b  00000000  00000000  000588ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001298e  00000000  00000000  0005c0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  0006ea48  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0006ea98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00073307  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  0007330a  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0007330f  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00073310  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00073311  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00073315  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00073319  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000006  00000000  00000000  0007331d  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000006  00000000  00000000  00073323  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000006  00000000  00000000  00073329  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000006  00000000  00000000  0007332f  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001d  00000000  00000000  00073335  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     001b94d0  00000000  00000000  00073352  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
000a0000 l    d  .entry	00000000 .entry
000a0020 l    d  .exceptions	00000000 .exceptions
000a01b8 l    d  .text	00000000 .text
000aec54 l    d  .rodata	00000000 .rodata
000af05c l    d  .rwdata	00000000 .rwdata
000b25ec l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu_F_bsp//obj/HAL/src/crt0.o
000a01f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
000a0094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 IOMap.c
00000000 l    df *ABS*	00000000 utility.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000a15a0 l     F .text	00000008 __fp_lock
000a15a8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000af05c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
000a3254 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
000a3694 l     F .text	00000034 __sprint_r
000aed82 l     O .rodata	00000010 blanks.3515
000aed92 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
000a5aa4 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
000aedc4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000aef0c l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000aa2ec l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000ab02c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
000ab798 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000ab8b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000ab91c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000aba1c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000abb10 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000abbfc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
000abdd8 l     F .text	00000050 alt_get_errno
000abe28 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
000ac070 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000b0acc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
000ac2e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000ac3e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000ac528 l     F .text	00000038 alt_dev_reg
000afa18 l     O .rwdata	00001060 jtag_F
000b0a78 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000acd44 l     F .text	00000204 altera_avalon_jtag_uart_irq
000acf48 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000ad584 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
000b0b0c l     O .rwdata	00000004 hcinfo.2311
000b0b00 l     O .rwdata	00000004 hcinfo.2324
000b0af4 l     O .rwdata	00000004 hcinfo.2333
000b0ae8 l     O .rwdata	00000004 hcinfo.2346
000b0adc l     O .rwdata	00000004 hcinfo.2359
000b0ad0 l     O .rwdata	00000004 hcinfo.2385
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000adf58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000ae6f4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 
000a0f34 g     F .text	00000030 readStatus_DE
000a8cc4 g     F .text	00000074 _mprec_log10
000a8db4 g     F .text	00000084 __any_on
000a7878 g     F .text	00000064 _isatty_r
000aedf4 g     O .rodata	00000028 __mprec_tinytens
000abd20 g     F .text	00000078 alt_main
000ab754 g     F .text	00000044 __ashldi3
000a31bc g     F .text	00000084 _puts_r
000b25ec g     O .bss	00000004 t
000b2658 g     O .bss	00000100 alt_irq
000a79b8 g     F .text	0000006c _lseek_r
000ac8b0 g     F .text	00000058 altera_avalon_fifo_write_almostfull
000b0b24 g       *ABS*	00000000 __flash_rwdata_start
000a0b08 g     F .text	0000004c write_AE
000a72fc g     F .text	00000098 __sflags
000aab8c g     F .text	0000005c __eqdf2
000b28e8 g       *ABS*	00000000 __alt_heap_start
000a2fd4 g     F .text	0000003c printf
000a359c g     F .text	0000005c __sseek
000a1644 g     F .text	0000010c __sinit
000a5568 g     F .text	0000013c __swbuf_r
000a78dc g     F .text	0000009c _setlocale_r
000a0ea4 g     F .text	00000044 read_DE
000a15bc g     F .text	00000078 __sfmoreglue
000abdb8 g     F .text	00000020 __malloc_unlock
000ad680 g     F .text	0000016c alt_hostfs_open
000a0228 g     F .text	00000228 processLoop
000b2620 g     O .bss	00000004 altera_avalon_timer_ts_freq
000a7c5c g     F .text	0000018c memmove
000ac630 g     F .text	00000098 altera_avalon_fifo_init
000a1634 g     F .text	00000010 _cleanup
000ac960 g     F .text	00000058 altera_avalon_fifo_write_fifo
000a7de8 g     F .text	000000a8 _Balloc
000a0df0 g     F .text	0000004c write_CD
000a0c7c g     F .text	00000038 init_BC
000aac44 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
000a0000 g     F .entry	0000001c __reset
000ac334 g     F .text	00000084 times
000acaf8 g     F .text	00000028 altera_avalon_fifo_read_backpressure
000a0020 g       *ABS*	00000000 __flash_exceptions_start
000a236c g     F .text	00000068 _fstat_r
000b25f4 g     O .bss	00000004 errno
000b2614 g     O .bss	00000004 alt_argv
000b8aa0 g       *ABS*	00000000 _gp
000ac3b8 g     F .text	00000030 usleep
000ac7fc g     F .text	0000005c altera_avalon_fifo_clear_event
000a07a4 g     F .text	00000038 init_AB_1
000a0dac g     F .text	00000044 read_CD
000af898 g     O .rwdata	00000180 alt_fd_list
000a06e8 g     F .text	00000044 read_AB_0
000ad9c8 g     F .text	000000b8 alt_hostfs_seek
000ae100 g     F .text	00000090 alt_find_dev
000a7b1c g     F .text	00000140 memcpy
000a368c g     F .text	00000008 _times_r
000a15b0 g     F .text	0000000c _cleanup_r
000aad68 g     F .text	000000d4 __floatsidf
000a0d44 g     F .text	00000030 readStatus_BC
000ae2a4 g     F .text	00000084 alt_fs_reg
000ae7d4 g     F .text	00000078 alt_io_redirect
000aad0c g     F .text	0000005c __ltdf2
000a0a8c g     F .text	00000038 init_AE
000aec54 g       *ABS*	00000000 __DTOR_END__
000a3240 g     F .text	00000014 puts
000a8c20 g     F .text	000000a4 __ratio
000ad148 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000a2fa8 g     F .text	0000002c _printf_r
000ab14c g     F .text	00000008 __udivsi3
000aba6c g     F .text	000000a4 isatty
000aee44 g     O .rodata	000000c8 __mprec_tens
000a0534 g     F .text	0000006c READ_B
000a7978 g     F .text	0000000c __locale_charset
000aea08 g     F .text	0000008c alt_icache_flush
000a0c4c g     F .text	00000030 readStatus_AF
000b2600 g     O .bss	00000004 __malloc_top_pad
000b0ab0 g     O .rwdata	00000004 __mb_cur_max
000a7984 g     F .text	0000000c _localeconv_r
000a8218 g     F .text	0000003c __i2b
000a7394 g     F .text	000004e4 __sfvwrite_r
000a345c g     F .text	00000064 _sbrk_r
000a072c g     F .text	00000048 write_AB_0
000ad858 g     F .text	000000b8 alt_hostfs_read
000a0e6c g     F .text	00000038 init_DE
000a8e38 g     F .text	0000006c _read_r
000af864 g     O .rwdata	0000000c __lc_ctype
000b0ac4 g     O .rwdata	00000004 alt_max_fd
000ab53c g     F .text	00000104 __unpack_d
000a1238 g     F .text	0000013c _fclose_r
000a1570 g     F .text	00000030 fflush
000b25fc g     O .bss	00000004 __malloc_max_sbrked_mem
000aa640 g     F .text	00000054 __adddf3
000a8994 g     F .text	00000148 __b2d
000a9cc4 g     F .text	00000628 __umoddi3
000a09cc g     F .text	00000044 read_AD
000abc4c g     F .text	000000d4 lseek
000a0b84 g     F .text	00000038 init_AF
000b0aa0 g     O .rwdata	00000004 _global_impure_ptr
000a8ea4 g     F .text	000005fc _realloc_r
000b28e8 g       *ABS*	00000000 __bss_end
000ae604 g     F .text	000000f0 alt_iic_isr_register
000ae8e4 g     F .text	00000104 alt_tick
000a9674 g     F .text	00000650 __udivdi3
000aee1c g     O .rodata	00000028 __mprec_bigtens
000a7ffc g     F .text	00000104 __s2b
000a0820 g     F .text	0000004c write_AB_1
000a0bbc g     F .text	00000044 read_AF
000aaf10 g     F .text	0000011c __floatunsidf
000a8734 g     F .text	00000058 __mcmp
000a185c g     F .text	00000018 __fp_lock_all
000ae5b8 g     F .text	0000004c alt_ic_irq_enabled
000a05e0 g     F .text	0000001c FIFO_INIT
000ae84c g     F .text	00000098 alt_alarm_stop
000b2624 g     O .bss	00000004 alt_irq_active
000a0a10 g     F .text	0000004c write_AD
000ad7ec g     F .text	0000006c alt_hostfs_close
000a00ec g     F .exceptions	000000cc alt_irq_handler
000af870 g     O .rwdata	00000028 alt_dev_null
000adf3c g     F .text	0000001c alt_dcache_flush_all
000a8100 g     F .text	00000068 __hi0bits
000aae3c g     F .text	000000d4 __fixdfsi
000ac858 g     F .text	00000058 altera_avalon_fifo_write_ienable
000b0b24 g       *ABS*	00000000 __ram_rwdata_end
000ac76c g     F .text	0000002c altera_avalon_fifo_read_almostempty
000a0e3c g     F .text	00000030 readStatus_CD
000b0abc g     O .rwdata	00000008 alt_dev_list
000a1a24 g     F .text	00000044 _fputc_r
000ac438 g     F .text	000000f0 write
000a3010 g     F .text	000000bc _putc_r
000a0fe0 g     F .text	0000004c write_EF
000af05c g       *ABS*	00000000 __ram_rodata_end
000ab96c g     F .text	000000b0 fstat
000a1a00 g     F .text	00000024 fprintf
000ab710 g     F .text	00000044 __lshrdi3
000a0ac4 g     F .text	00000044 read_AE
000a84ac g     F .text	0000012c __pow5mult
000b260c g     O .bss	00000004 __nlocale_changed
000ab154 g     F .text	00000008 __umodsi3
000b28e8 g       *ABS*	00000000 end
000a0f64 g     F .text	00000038 init_EF
000a086c g     F .text	00000030 readStatus_AB_1
000a2348 g     F .text	00000024 fseek
000acc84 g     F .text	000000c0 altera_avalon_jtag_uart_init
000ac798 g     F .text	0000003c altera_avalon_fifo_read_event
000aec54 g       *ABS*	00000000 __CTOR_LIST__
00600000 g       *ABS*	00000000 __alt_stack_pointer
000ad5f8 g     F .text	00000088 alt_avalon_timer_sc_init
000ab26c g     F .text	000000ac __clzsi2
000ad360 g     F .text	00000224 altera_avalon_jtag_uart_write
000b25f0 g     O .bss	00000004 input_fifo_wrclk_irq_event
000a184c g     F .text	00000004 __sfp_lock_acquire
000aca24 g     F .text	0000004c altera_avalon_fifo_read_fifo
000a7a24 g     F .text	000000f8 memchr
000a36c8 g     F .text	00001e7c ___vfprintf_internal_r
000a1c04 g     F .text	000002d0 _free_r
000a58a0 g     F .text	000001a0 __call_exitprocs
000b2608 g     O .bss	00000004 __mlocale_changed
000b0aa8 g     O .rwdata	00000004 __malloc_sbrk_base
000a01b8 g     F .text	0000003c _start
000b2628 g     O .bss	00000004 _alt_tick_rate
000a85d8 g     F .text	0000015c __lshift
000b262c g     O .bss	00000004 _alt_nticks
000ac0c0 g     F .text	000000f4 read
000ac594 g     F .text	0000009c alt_sys_init
000a2f3c g     F .text	0000006c _open_r
000aeb24 g     F .text	00000130 __register_exitproc
000a8254 g     F .text	00000258 __multiply
000acfec g     F .text	00000068 altera_avalon_jtag_uart_close
000a118c g     F .text	00000028 __mulsi3
000af05c g       *ABS*	00000000 __ram_rwdata_start
000aec54 g       *ABS*	00000000 __ram_rodata_start
000b2630 g     O .bss	00000028 __malloc_current_mallinfo
000a8adc g     F .text	00000144 __d2b
000a0450 g     F .text	0000006c INIT_B
000a102c g     F .text	00000030 readStatus_EF
000acb20 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000ae328 g     F .text	000000d4 alt_get_fd
000adde8 g     F .text	00000154 alt_busy_sleep
000ab640 g     F .text	000000d0 __fpcmp_parts_d
000a5a40 g     F .text	00000064 _close_r
000aeaa8 g     F .text	0000007c memcmp
000acbe0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000b28e8 g       *ABS*	00000000 __alt_stack_base
000acc30 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000a05fc g     F .text	000000b4 print_status
000a572c g     F .text	00000174 __swsetup_r
000ac6c8 g     F .text	0000003c altera_avalon_fifo_read_status
000aa9d8 g     F .text	000001b4 __divdf3
000a1750 g     F .text	000000fc __sfp
000a8d38 g     F .text	0000007c __copybits
000af45c g     O .rwdata	00000408 __malloc_av_
000a1858 g     F .text	00000004 __sinit_lock_release
000aa6f4 g     F .text	000002e4 __muldf3
000a34c0 g     F .text	00000054 __sread
000a07dc g     F .text	00000044 read_AB_1
000acacc g     F .text	0000002c altera_avalon_fifo_read_other_info
000ae190 g     F .text	00000114 alt_find_file
000adfa8 g     F .text	000000a0 alt_dev_llist_insert
000abd98 g     F .text	00000020 __malloc_lock
000a19d8 g     F .text	00000028 _fprintf_r
000ac234 g     F .text	000000b0 sbrk
000a1388 g     F .text	000001e8 _fflush_r
000a95a8 g     F .text	000000cc _calloc_r
000a19bc g     F .text	0000001c fopen
000b25ec g       *ABS*	00000000 __bss_start
000a2e60 g     F .text	000000dc memset
000a01f4 g     F .text	00000034 main
000b2618 g     O .bss	00000004 alt_envp
000b25f8 g     O .bss	00000004 __malloc_max_total_mem
000acb80 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000ac7d4 g     F .text	00000028 altera_avalon_fifo_read_level
000a56a4 g     F .text	0000001c __swbuf
000a0ee8 g     F .text	0000004c write_DE
000a0f9c g     F .text	00000044 read_EF
000a35f8 g     F .text	00000008 __sclose
00600000 g       *ABS*	00000000 __alt_heap_limit
000a1374 g     F .text	00000014 fclose
000a089c g     F .text	00000038 init_AB_2
000a06b0 g     F .text	00000038 init_AB_0
000b2758 g     O .bss	00000190 _atexit0
000a1130 g     F .text	0000005c ledBlink
000a5ce0 g     F .text	0000161c _dtoa_r
000a26dc g     F .text	00000784 _malloc_r
000b0ac8 g     O .rwdata	00000004 alt_errno
000a0b54 g     F .text	00000030 readStatus_AE
000a23d4 g     F .text	000000a8 _fwalk
000a30cc g     F .text	000000f0 putc
000ab0a0 g     F .text	00000050 __divsi3
000aef18 g     O .rodata	00000014 __thenan_df
000a1ac8 g     F .text	0000013c _malloc_trim_r
000aec54 g       *ABS*	00000000 __CTOR_END__
000a9504 g     F .text	000000a4 strcmp
000a0994 g     F .text	00000038 init_AD
000aec54 g       *ABS*	00000000 __flash_rodata_start
000a0c00 g     F .text	0000004c write_AF
000aec54 g       *ABS*	00000000 __DTOR_LIST__
000a105c g     F .text	0000003c delay
000aabe8 g     F .text	0000005c __nedf2
00000000 g       *ABS*	00000000 __alt_mem_SDRAM_controller
000ac560 g     F .text	00000034 alt_irq_init
000a0918 g     F .text	0000004c write_AB_2
000ac1b4 g     F .text	00000080 alt_release_fd
000aef2c g     O .rodata	00000100 __clz_tab
000b2604 g     O .bss	00000004 _PathLocale
000a0774 g     F .text	00000030 readStatus_AB_0
000aea94 g     F .text	00000014 atexit
000a56c0 g     F .text	0000006c _write_r
000a7990 g     F .text	0000001c setlocale
000a0cb4 g     F .text	00000044 read_BC
000b0aa4 g     O .rwdata	00000004 _impure_ptr
000b2610 g     O .bss	00000004 alt_argc
000b261c g     O .bss	00000004 altera_avalon_timer_ts_base
000ae0a4 g     F .text	0000005c _do_dtors
000a1ed4 g     F .text	00000474 _fseek_r
000a05c0 g     F .text	00000020 READ_FIFO
000a3270 g     F .text	000001ec __srefill_r
000a0020 g       .exceptions	00000000 alt_irq_entry
000a8934 g     F .text	00000060 __ulp
000a94a0 g     F .text	00000038 __isinfd
000a1874 g     F .text	00000018 __fp_unlock_all
000a1a68 g     F .text	00000060 fputc
000b0ab4 g     O .rwdata	00000008 alt_fs_list
000ad910 g     F .text	000000b8 alt_hostfs_write
000a1098 g     F .text	00000098 ledUpdate
000a0020 g       *ABS*	00000000 __ram_exceptions_start
000a79ac g     F .text	0000000c localeconv
000aca70 g     F .text	0000005c altera_avalon_fifo_write_other_info
000ae42c g     F .text	00000050 alt_ic_isr_register
000a0a5c g     F .text	00000030 readStatus_AD
000b0b24 g       *ABS*	00000000 _edata
000b28e8 g       *ABS*	00000000 _end
000a01b8 g       *ABS*	00000000 __ram_exceptions_end
000ad054 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000a08d4 g     F .text	00000044 read_AB_2
000ae518 g     F .text	000000a0 alt_ic_irq_disable
000a3514 g     F .text	00000088 __swrite
000b0aac g     O .rwdata	00000004 __malloc_trim_threshold
000ae9e8 g     F .text	00000020 altera_nios2_qsys_irq_init
000a1200 g     F .text	00000038 exit
000a247c g     F .text	000000b8 _fwalk_reent
000a878c g     F .text	000001a8 __mdiff
000ab0f0 g     F .text	0000005c __modsi3
000ac704 g     F .text	0000003c altera_avalon_fifo_read_ienable
00600000 g       *ABS*	00000000 __alt_data_end
000a0020 g     F .exceptions	00000000 alt_exception
000a1850 g     F .text	00000004 __sfp_lock_release
000a04bc g     F .text	00000078 WRITE_B
000a188c g     F .text	00000130 _fopen_r
000a94d8 g     F .text	0000002c __isnand
000ab8e0 g     F .text	0000003c _exit
000adca8 g     F .text	00000140 alt_alarm_start
000ab15c g     F .text	00000110 __muldi3
000ac740 g     F .text	0000002c altera_avalon_fifo_read_almostfull
000a2534 g     F .text	000001a8 __smakebuf_r
000a3600 g     F .text	0000008c strlen
000abf18 g     F .text	00000158 open
000ac9b8 g     F .text	0000006c altera_avalon_read_fifo
000aaca8 g     F .text	00000064 __gedf2
000a11b4 g     F .text	0000004c clock
000a0d74 g     F .text	00000038 init_CD
000ae3fc g     F .text	00000030 alt_icache_flush_all
000a05a0 g     F .text	00000020 WRITE_FIFO
000b0b18 g     O .rwdata	00000004 alt_priority_mask
000ae47c g     F .text	0000009c alt_ic_irq_enable
000a5544 g     F .text	00000024 __vfprintf_internal
000a0964 g     F .text	00000030 readStatus_AB_2
000a0cf8 g     F .text	0000004c write_BC
000aa694 g     F .text	00000060 __subdf3
000a8168 g     F .text	000000b0 __lo0bits
000ac908 g     F .text	00000058 altera_avalon_fifo_write_almostempty
000b0b1c g     O .rwdata	00000008 alt_alarm_list
000ae048 g     F .text	0000005c _do_ctors
000ab7e8 g     F .text	000000cc close
000abb7c g     F .text	00000080 alt_load
000ab318 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
000a1854 g     F .text	00000004 __sinit_lock_acquire
000a7eb8 g     F .text	00000144 __multadd
000a7e90 g     F .text	00000028 _Bfree
000ada80 g     F .text	00000228 alt_hostfs_fstat



Disassembly of section .entry:

000a0000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   a0000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   a0004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   a0008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   a000c:	00bffd16 	blt	zero,r2,a0004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   a0010:	004002b4 	movhi	at,10
    ori r1, r1, %lo(_start)
   a0014:	08406e14 	ori	at,at,440
    jmp r1
   a0018:	0800683a 	jmp	at
   a001c:	00000000 	call	0 <__alt_mem_SDRAM_controller>

Disassembly of section .exceptions:

000a0020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   a0020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   a0024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   a0028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   a002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   a0030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   a0034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   a0038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   a003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   a0040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   a0044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   a0048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   a004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   a0050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   a0054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   a0058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   a005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   a0060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   a0064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   a0068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   a006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   a0070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   a0074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   a0078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   a007c:	10000326 	beq	r2,zero,a008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   a0080:	20000226 	beq	r4,zero,a008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   a0084:	00a00ec0 	call	a00ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   a0088:	00000306 	br	a0098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   a008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   a0090:	e8bfff17 	ldw	r2,-4(ea)

000a0094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   a0094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   a0098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   a009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   a00a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   a00a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   a00a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   a00ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   a00b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   a00b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   a00b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   a00bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   a00c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   a00c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   a00c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   a00cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   a00d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   a00d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   a00d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   a00dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   a00e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   a00e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   a00e8:	ef80083a 	eret

000a00ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   a00ec:	defff904 	addi	sp,sp,-28
   a00f0:	dfc00615 	stw	ra,24(sp)
   a00f4:	df000515 	stw	fp,20(sp)
   a00f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   a00fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   a0100:	0005313a 	rdctl	r2,ipending
   a0104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   a0108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   a010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   a0110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   a0114:	00800044 	movi	r2,1
   a0118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   a011c:	e0fffb17 	ldw	r3,-20(fp)
   a0120:	e0bffc17 	ldw	r2,-16(fp)
   a0124:	1884703a 	and	r2,r3,r2
   a0128:	10001726 	beq	r2,zero,a0188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   a012c:	00c002f4 	movhi	r3,11
   a0130:	18c99604 	addi	r3,r3,9816
   a0134:	e0bffd17 	ldw	r2,-12(fp)
   a0138:	100490fa 	slli	r2,r2,3
   a013c:	1885883a 	add	r2,r3,r2
   a0140:	10c00017 	ldw	r3,0(r2)
   a0144:	010002f4 	movhi	r4,11
   a0148:	21099604 	addi	r4,r4,9816
   a014c:	e0bffd17 	ldw	r2,-12(fp)
   a0150:	100490fa 	slli	r2,r2,3
   a0154:	2085883a 	add	r2,r4,r2
   a0158:	10800104 	addi	r2,r2,4
   a015c:	10800017 	ldw	r2,0(r2)
   a0160:	1009883a 	mov	r4,r2
   a0164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   a0168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   a016c:	0005313a 	rdctl	r2,ipending
   a0170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   a0174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   a0178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   a017c:	e0bffb17 	ldw	r2,-20(fp)
   a0180:	103fe31e 	bne	r2,zero,a0110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   a0184:	00000706 	br	a01a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   a0188:	e0bffc17 	ldw	r2,-16(fp)
   a018c:	1085883a 	add	r2,r2,r2
   a0190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   a0194:	e0bffd17 	ldw	r2,-12(fp)
   a0198:	10800044 	addi	r2,r2,1
   a019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   a01a0:	003fde06 	br	a011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   a01a4:	e037883a 	mov	sp,fp
   a01a8:	dfc00117 	ldw	ra,4(sp)
   a01ac:	df000017 	ldw	fp,0(sp)
   a01b0:	dec00204 	addi	sp,sp,8
   a01b4:	f800283a 	ret

Disassembly of section .text:

000a01b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   a01b8:	06c01834 	movhi	sp,96
    ori sp, sp, %lo(__alt_stack_pointer)
   a01bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   a01c0:	068002f4 	movhi	gp,11
    ori gp, gp, %lo(_gp)
   a01c4:	d6a2a814 	ori	gp,gp,35488
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   a01c8:	008002f4 	movhi	r2,11
    ori r2, r2, %lo(__bss_start)
   a01cc:	10897b14 	ori	r2,r2,9708

    movhi r3, %hi(__bss_end)
   a01d0:	00c002f4 	movhi	r3,11
    ori r3, r3, %lo(__bss_end)
   a01d4:	18ca3a14 	ori	r3,r3,10472

    beq r2, r3, 1f
   a01d8:	10c00326 	beq	r2,r3,a01e8 <_start+0x30>

0:
    stw zero, (r2)
   a01dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   a01e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   a01e4:	10fffd36 	bltu	r2,r3,a01dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   a01e8:	00abb7c0 	call	abb7c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   a01ec:	00abd200 	call	abd20 <alt_main>

000a01f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   a01f0:	003fff06 	br	a01f0 <alt_after_alt_main>

000a01f4 <main>:
// RECV2 -> read_EF


void processLoop();

int main(void){
   a01f4:	defffe04 	addi	sp,sp,-8
   a01f8:	dfc00115 	stw	ra,4(sp)
   a01fc:	df000015 	stw	fp,0(sp)
   a0200:	d839883a 	mov	fp,sp

	printf("Hardware JSoC_F begins\n\n");
   a0204:	010002f4 	movhi	r4,11
   a0208:	213b1504 	addi	r4,r4,-5036
   a020c:	00a32400 	call	a3240 <puts>

	init_AF();
   a0210:	00a0b840 	call	a0b84 <init_AF>
	init_EF();
   a0214:	00a0f640 	call	a0f64 <init_EF>

	ledBlink(6);
   a0218:	01000184 	movi	r4,6
   a021c:	00a11300 	call	a1130 <ledBlink>

	while(1){
		processLoop();
   a0220:	00a02280 	call	a0228 <processLoop>
	}
   a0224:	003ffe06 	br	a0220 <main+0x2c>

000a0228 <processLoop>:
	return 0;
}


void processLoop(){
   a0228:	deffee04 	addi	sp,sp,-72
   a022c:	dfc01115 	stw	ra,68(sp)
   a0230:	df001015 	stw	fp,64(sp)
   a0234:	dc000f15 	stw	r16,60(sp)
   a0238:	df000f04 	addi	fp,sp,60
	FILE *fptr;
	uint8_t out;
	int8_t filename[50];

	while(1){
		out = 0;
   a023c:	e03ff105 	stb	zero,-60(fp)
		filename[out] = (int8_t)read_AF();
   a0240:	e43ff103 	ldbu	r16,-60(fp)
   a0244:	00a0bbc0 	call	a0bbc <read_AF>
   a0248:	1007883a 	mov	r3,r2
   a024c:	e0bff304 	addi	r2,fp,-52
   a0250:	1405883a 	add	r2,r2,r16
   a0254:	10c00005 	stb	r3,0(r2)
		ledBlink(6);
   a0258:	01000184 	movi	r4,6
   a025c:	00a11300 	call	a1130 <ledBlink>

		if (filename[out]=='\0'){
   a0260:	e0bff103 	ldbu	r2,-60(fp)
   a0264:	e0fff304 	addi	r3,fp,-52
   a0268:	1885883a 	add	r2,r3,r2
   a026c:	10800003 	ldbu	r2,0(r2)
   a0270:	10803fcc 	andi	r2,r2,255
   a0274:	1080201c 	xori	r2,r2,128
   a0278:	10bfe004 	addi	r2,r2,-128
   a027c:	10000c1e 	bne	r2,zero,a02b0 <processLoop+0x88>
			exit(0);
   a0280:	0009883a 	mov	r4,zero
   a0284:	00a12000 	call	a1200 <exit>
		}

		while(filename[out]!='\0'){
			out++;
   a0288:	e0bff103 	ldbu	r2,-60(fp)
   a028c:	10800044 	addi	r2,r2,1
   a0290:	e0bff105 	stb	r2,-60(fp)
			filename[out] = (int8_t)read_AF();
   a0294:	e43ff103 	ldbu	r16,-60(fp)
   a0298:	00a0bbc0 	call	a0bbc <read_AF>
   a029c:	1007883a 	mov	r3,r2
   a02a0:	e0bff304 	addi	r2,fp,-52
   a02a4:	1405883a 	add	r2,r2,r16
   a02a8:	10c00005 	stb	r3,0(r2)
   a02ac:	00000106 	br	a02b4 <processLoop+0x8c>

		if (filename[out]=='\0'){
			exit(0);
		}

		while(filename[out]!='\0'){
   a02b0:	0001883a 	nop
   a02b4:	e0bff103 	ldbu	r2,-60(fp)
   a02b8:	e0fff304 	addi	r3,fp,-52
   a02bc:	1885883a 	add	r2,r3,r2
   a02c0:	10800003 	ldbu	r2,0(r2)
   a02c4:	10803fcc 	andi	r2,r2,255
   a02c8:	1080201c 	xori	r2,r2,128
   a02cc:	10bfe004 	addi	r2,r2,-128
   a02d0:	103fed1e 	bne	r2,zero,a0288 <processLoop+0x60>
			out++;
			filename[out] = (int8_t)read_AF();
		}

		filename[out++] = '.';
   a02d4:	e0bff103 	ldbu	r2,-60(fp)
   a02d8:	e0fff304 	addi	r3,fp,-52
   a02dc:	1885883a 	add	r2,r3,r2
   a02e0:	00c00b84 	movi	r3,46
   a02e4:	10c00005 	stb	r3,0(r2)
   a02e8:	e0bff103 	ldbu	r2,-60(fp)
   a02ec:	10800044 	addi	r2,r2,1
   a02f0:	e0bff105 	stb	r2,-60(fp)
		filename[out++] = 'j';
   a02f4:	e0bff103 	ldbu	r2,-60(fp)
   a02f8:	e0fff304 	addi	r3,fp,-52
   a02fc:	1885883a 	add	r2,r3,r2
   a0300:	00c01a84 	movi	r3,106
   a0304:	10c00005 	stb	r3,0(r2)
   a0308:	e0bff103 	ldbu	r2,-60(fp)
   a030c:	10800044 	addi	r2,r2,1
   a0310:	e0bff105 	stb	r2,-60(fp)
		filename[out++] = 'p';
   a0314:	e0bff103 	ldbu	r2,-60(fp)
   a0318:	e0fff304 	addi	r3,fp,-52
   a031c:	1885883a 	add	r2,r3,r2
   a0320:	00c01c04 	movi	r3,112
   a0324:	10c00005 	stb	r3,0(r2)
   a0328:	e0bff103 	ldbu	r2,-60(fp)
   a032c:	10800044 	addi	r2,r2,1
   a0330:	e0bff105 	stb	r2,-60(fp)
		filename[out++] = 'g';
   a0334:	e0bff103 	ldbu	r2,-60(fp)
   a0338:	e0fff304 	addi	r3,fp,-52
   a033c:	1885883a 	add	r2,r3,r2
   a0340:	00c019c4 	movi	r3,103
   a0344:	10c00005 	stb	r3,0(r2)
   a0348:	e0bff103 	ldbu	r2,-60(fp)
   a034c:	10800044 	addi	r2,r2,1
   a0350:	e0bff105 	stb	r2,-60(fp)
		filename[out]   = '\0';
   a0354:	e0bff103 	ldbu	r2,-60(fp)
   a0358:	e0fff304 	addi	r3,fp,-52
   a035c:	1885883a 	add	r2,r3,r2
   a0360:	10000005 	stb	zero,0(r2)

		ledBlink(6);
   a0364:	01000184 	movi	r4,6
   a0368:	00a11300 	call	a1130 <ledBlink>

		//fptr = fopen(filename, "wb");	*Nuwan*
		fptr = fopen("/mnt/host/files/result.jpg", "wb");
   a036c:	010002f4 	movhi	r4,11
   a0370:	213b1b04 	addi	r4,r4,-5012
   a0374:	014002f4 	movhi	r5,11
   a0378:	297b2204 	addi	r5,r5,-4984
   a037c:	00a19bc0 	call	a19bc <fopen>
   a0380:	e0bff215 	stw	r2,-56(fp)

		//
		fprintf(stderr,"\nOutput file: %s\n",filename); //Output file added by haris
   a0384:	008002f4 	movhi	r2,11
   a0388:	1082a904 	addi	r2,r2,2724
   a038c:	10800017 	ldw	r2,0(r2)
   a0390:	10c00317 	ldw	r3,12(r2)
   a0394:	e0bff304 	addi	r2,fp,-52
   a0398:	1809883a 	mov	r4,r3
   a039c:	014002f4 	movhi	r5,11
   a03a0:	297b2304 	addi	r5,r5,-4980
   a03a4:	100d883a 	mov	r6,r2
   a03a8:	00a1a000 	call	a1a00 <fprintf>
   a03ac:	00000106 	br	a03b4 <processLoop+0x18c>
				if(out == 0xD9){
					break;
				}
			}

		}
   a03b0:	0001883a 	nop
		fprintf(stderr,"\nOutput file: %s\n",filename); //Output file added by haris


		while(1){

			out = (uint8_t)read_EF();
   a03b4:	00a0f9c0 	call	a0f9c <read_EF>
   a03b8:	e0bff105 	stb	r2,-60(fp)
			fputc(out, fptr);
   a03bc:	e0bff103 	ldbu	r2,-60(fp)
   a03c0:	1009883a 	mov	r4,r2
   a03c4:	e17ff217 	ldw	r5,-56(fp)
   a03c8:	00a1a680 	call	a1a68 <fputc>
			//printf("%d ",out);

			if (out == 0xFF){
   a03cc:	e0bff103 	ldbu	r2,-60(fp)
   a03d0:	10803fd8 	cmpnei	r2,r2,255
   a03d4:	103ff61e 	bne	r2,zero,a03b0 <processLoop+0x188>
				out = (uint8_t)read_EF();
   a03d8:	00a0f9c0 	call	a0f9c <read_EF>
   a03dc:	e0bff105 	stb	r2,-60(fp)
				fputc(out, fptr);
   a03e0:	e0bff103 	ldbu	r2,-60(fp)
   a03e4:	1009883a 	mov	r4,r2
   a03e8:	e17ff217 	ldw	r5,-56(fp)
   a03ec:	00a1a680 	call	a1a68 <fputc>
				//printf("%d ",out);

				//printf("\nWriting: %d\n",out);

				if(out == 0xD9){
   a03f0:	e0bff103 	ldbu	r2,-60(fp)
   a03f4:	10803658 	cmpnei	r2,r2,217
   a03f8:	103fed1e 	bne	r2,zero,a03b0 <processLoop+0x188>
					break;
   a03fc:	0001883a 	nop
				}
			}

		}

		fclose(fptr);
   a0400:	e13ff217 	ldw	r4,-56(fp)
   a0404:	00a13740 	call	a1374 <fclose>
		printf("\n Done ! %d\n", clock());
   a0408:	00a11b40 	call	a11b4 <clock>
   a040c:	010002f4 	movhi	r4,11
   a0410:	213b2804 	addi	r4,r4,-4960
   a0414:	100b883a 	mov	r5,r2
   a0418:	00a2fd40 	call	a2fd4 <printf>
		ledBlink(7);ledBlink(7);ledBlink(7);
   a041c:	010001c4 	movi	r4,7
   a0420:	00a11300 	call	a1130 <ledBlink>
   a0424:	010001c4 	movi	r4,7
   a0428:	00a11300 	call	a1130 <ledBlink>
   a042c:	010001c4 	movi	r4,7
   a0430:	00a11300 	call	a1130 <ledBlink>

		break;
   a0434:	0001883a 	nop
	}
}
   a0438:	e037883a 	mov	sp,fp
   a043c:	dfc00217 	ldw	ra,8(sp)
   a0440:	df000117 	ldw	fp,4(sp)
   a0444:	dc000017 	ldw	r16,0(sp)
   a0448:	dec00304 	addi	sp,sp,12
   a044c:	f800283a 	ret

000a0450 <INIT_B>:
#include <stdlib.h>

//#include "sys/alt_timestamp.h"
#include "FIFO.h"

void INIT_B(uint32_t csrAddr, uint8_t id, uint8_t size){
   a0450:	defffa04 	addi	sp,sp,-24
   a0454:	dfc00515 	stw	ra,20(sp)
   a0458:	df000415 	stw	fp,16(sp)
   a045c:	df000404 	addi	fp,sp,16
   a0460:	e13ffd15 	stw	r4,-12(fp)
   a0464:	2807883a 	mov	r3,r5
   a0468:	3005883a 	mov	r2,r6
   a046c:	e0fffe05 	stb	r3,-8(fp)
   a0470:	e0bfff05 	stb	r2,-4(fp)

	//int resp = altera_avalon_fifo_init(csrAddr, 0, ALMOST_EMPTY, ALMOST_FULL);
	int resp = altera_avalon_fifo_init(csrAddr, 0, 2, size-5);
   a0474:	e0bfff03 	ldbu	r2,-4(fp)
   a0478:	10bffec4 	addi	r2,r2,-5
   a047c:	e13ffd17 	ldw	r4,-12(fp)
   a0480:	000b883a 	mov	r5,zero
   a0484:	01800084 	movi	r6,2
   a0488:	100f883a 	mov	r7,r2
   a048c:	00ac6300 	call	ac630 <altera_avalon_fifo_init>
   a0490:	e0bffc15 	stw	r2,-16(fp)

	printf("FIFO %d Init\n", id);
   a0494:	e0bffe03 	ldbu	r2,-8(fp)
   a0498:	010002f4 	movhi	r4,11
   a049c:	213b2c04 	addi	r4,r4,-4944
   a04a0:	100b883a 	mov	r5,r2
   a04a4:	00a2fd40 	call	a2fd4 <printf>
	else if(resp == ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR)  printf("ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR\n\n");
	else if(resp == ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR)  printf("ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR\n\n");
	else printf("Unknown\n\n");
*/
	//print_status(csrAddr);
}
   a04a8:	e037883a 	mov	sp,fp
   a04ac:	dfc00117 	ldw	ra,4(sp)
   a04b0:	df000017 	ldw	fp,0(sp)
   a04b4:	dec00204 	addi	sp,sp,8
   a04b8:	f800283a 	ret

000a04bc <WRITE_B>:

void WRITE_B(int *buffer, uint32_t writeAddr, uint32_t csrAddr, uint8_t size, uint8_t id){
   a04bc:	defff804 	addi	sp,sp,-32
   a04c0:	dfc00715 	stw	ra,28(sp)
   a04c4:	df000615 	stw	fp,24(sp)
   a04c8:	df000604 	addi	fp,sp,24
   a04cc:	e13ffb15 	stw	r4,-20(fp)
   a04d0:	e17ffc15 	stw	r5,-16(fp)
   a04d4:	e1bffd15 	stw	r6,-12(fp)
   a04d8:	3805883a 	mov	r2,r7
   a04dc:	e0c00217 	ldw	r3,8(fp)
   a04e0:	e0bffe05 	stb	r2,-8(fp)
   a04e4:	e0ffff05 	stb	r3,-4(fp)

	while(altera_avalon_fifo_read_level(csrAddr)>=size){
   a04e8:	0001883a 	nop
   a04ec:	00000106 	br	a04f4 <WRITE_B+0x38>
		continue;
   a04f0:	0001883a 	nop
	//print_status(csrAddr);
}

void WRITE_B(int *buffer, uint32_t writeAddr, uint32_t csrAddr, uint8_t size, uint8_t id){

	while(altera_avalon_fifo_read_level(csrAddr)>=size){
   a04f4:	e13ffd17 	ldw	r4,-12(fp)
   a04f8:	00ac7d40 	call	ac7d4 <altera_avalon_fifo_read_level>
   a04fc:	e0fffe03 	ldbu	r3,-8(fp)
   a0500:	10fffb0e 	bge	r2,r3,a04f0 <WRITE_B+0x34>
		continue;
	}
	int resp = altera_avalon_fifo_write_fifo(writeAddr, csrAddr , *buffer);
   a0504:	e0bffb17 	ldw	r2,-20(fp)
   a0508:	10800017 	ldw	r2,0(r2)
   a050c:	e13ffc17 	ldw	r4,-16(fp)
   a0510:	e17ffd17 	ldw	r5,-12(fp)
   a0514:	100d883a 	mov	r6,r2
   a0518:	00ac9600 	call	ac960 <altera_avalon_fifo_write_fifo>
   a051c:	e0bffa15 	stw	r2,-24(fp)
	else if(resp== ALTERA_AVALON_FIFO_FULL) printf("resp: ALTERA_AVALON_FIFO_FULL\n");
	int level = altera_avalon_fifo_read_level(csrAddr);
	printf("%d > write %d to FIFO, resp=%d level=%d\n\n", id, (int)*buffer, resp, level);
	#endif

}
   a0520:	e037883a 	mov	sp,fp
   a0524:	dfc00117 	ldw	ra,4(sp)
   a0528:	df000017 	ldw	fp,0(sp)
   a052c:	dec00204 	addi	sp,sp,8
   a0530:	f800283a 	ret

000a0534 <READ_B>:

void READ_B(int *buffer, uint32_t readAddr, uint32_t csrAddr, uint8_t id){
   a0534:	defff904 	addi	sp,sp,-28
   a0538:	dfc00615 	stw	ra,24(sp)
   a053c:	df000515 	stw	fp,20(sp)
   a0540:	df000504 	addi	fp,sp,20
   a0544:	e13ffc15 	stw	r4,-16(fp)
   a0548:	e17ffd15 	stw	r5,-12(fp)
   a054c:	e1bffe15 	stw	r6,-8(fp)
   a0550:	3805883a 	mov	r2,r7
   a0554:	e0bfff05 	stb	r2,-4(fp)

	while(altera_avalon_fifo_read_level(csrAddr)==0){
   a0558:	0001883a 	nop
   a055c:	00000106 	br	a0564 <READ_B+0x30>
		continue;
   a0560:	0001883a 	nop

}

void READ_B(int *buffer, uint32_t readAddr, uint32_t csrAddr, uint8_t id){

	while(altera_avalon_fifo_read_level(csrAddr)==0){
   a0564:	e13ffe17 	ldw	r4,-8(fp)
   a0568:	00ac7d40 	call	ac7d4 <altera_avalon_fifo_read_level>
   a056c:	103ffc26 	beq	r2,zero,a0560 <READ_B+0x2c>
		continue;
	}

	int resp = altera_avalon_fifo_read_fifo(readAddr, csrAddr);
   a0570:	e13ffd17 	ldw	r4,-12(fp)
   a0574:	e17ffe17 	ldw	r5,-8(fp)
   a0578:	00aca240 	call	aca24 <altera_avalon_fifo_read_fifo>
   a057c:	e0bffb15 	stw	r2,-20(fp)
	*buffer = resp;
   a0580:	e0bffc17 	ldw	r2,-16(fp)
   a0584:	e0fffb17 	ldw	r3,-20(fp)
   a0588:	10c00015 	stw	r3,0(r2)
	else if(resp== ALTERA_AVALON_FIFO_FULL) printf("ALTERA_AVALON_FIFO_FULL\n\n");
	int level = altera_avalon_fifo_read_level(csrAddr);
	printf("reading from FIFO, resp=%d level=%d\n", resp, level);
	#endif

}
   a058c:	e037883a 	mov	sp,fp
   a0590:	dfc00117 	ldw	ra,4(sp)
   a0594:	df000017 	ldw	fp,0(sp)
   a0598:	dec00204 	addi	sp,sp,8
   a059c:	f800283a 	ret

000a05a0 <WRITE_FIFO>:



//------------------------------------------------------------------------------

void WRITE_FIFO(int *buffer){
   a05a0:	defffe04 	addi	sp,sp,-8
   a05a4:	df000115 	stw	fp,4(sp)
   a05a8:	df000104 	addi	fp,sp,4
   a05ac:	e13fff15 	stw	r4,-4(fp)
#endif

//printf("%lu \n",(unsigned long)((sw_timeB - sw_timeA)));
//t= t+(sw_timeB - sw_timeA);
*/
}
   a05b0:	e037883a 	mov	sp,fp
   a05b4:	df000017 	ldw	fp,0(sp)
   a05b8:	dec00104 	addi	sp,sp,4
   a05bc:	f800283a 	ret

000a05c0 <READ_FIFO>:

void READ_FIFO(int *buffer){
   a05c0:	defffe04 	addi	sp,sp,-8
   a05c4:	df000115 	stw	fp,4(sp)
   a05c8:	df000104 	addi	fp,sp,4
   a05cc:	e13fff15 	stw	r4,-4(fp)
#endif

//printf("%lu \n",(unsigned long)((sw_timeB - sw_timeA)));
//t= t+(sw_timeB - sw_timeA);
*/
}
   a05d0:	e037883a 	mov	sp,fp
   a05d4:	df000017 	ldw	fp,0(sp)
   a05d8:	dec00104 	addi	sp,sp,4
   a05dc:	f800283a 	ret

000a05e0 <FIFO_INIT>:

//Initialization
void FIFO_INIT(){
   a05e0:	deffff04 	addi	sp,sp,-4
   a05e4:	df000015 	stw	fp,0(sp)
   a05e8:	d839883a 	mov	fp,sp
	else if(resp == ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR)  printf("ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR\n\n");
	else printf("Unknown\n\n");

	print_status(INPUT_FIFO_IN_CSR_BASE);
	*/
}
   a05ec:	e037883a 	mov	sp,fp
   a05f0:	df000017 	ldw	fp,0(sp)
   a05f4:	dec00104 	addi	sp,sp,4
   a05f8:	f800283a 	ret

000a05fc <print_status>:


volatile int input_fifo_wrclk_irq_event;

void print_status(alt_u32 control_base_address){
   a05fc:	defffd04 	addi	sp,sp,-12
   a0600:	dfc00215 	stw	ra,8(sp)
   a0604:	df000115 	stw	fp,4(sp)
   a0608:	df000104 	addi	fp,sp,4
   a060c:	e13fff15 	stw	r4,-4(fp)
	printf("--------------------------------------\n");
   a0610:	010002f4 	movhi	r4,11
   a0614:	213b3004 	addi	r4,r4,-4928
   a0618:	00a32400 	call	a3240 <puts>
	printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   a061c:	e13fff17 	ldw	r4,-4(fp)
   a0620:	00ac7d40 	call	ac7d4 <altera_avalon_fifo_read_level>
   a0624:	010002f4 	movhi	r4,11
   a0628:	213b3a04 	addi	r4,r4,-4888
   a062c:	100b883a 	mov	r5,r2
   a0630:	00a2fd40 	call	a2fd4 <printf>
	printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address, ALTERA_AVALON_FIFO_STATUS_ALL) );
   a0634:	e13fff17 	ldw	r4,-4(fp)
   a0638:	01400fc4 	movi	r5,63
   a063c:	00ac6c80 	call	ac6c8 <altera_avalon_fifo_read_status>
   a0640:	010002f4 	movhi	r4,11
   a0644:	213b3d04 	addi	r4,r4,-4876
   a0648:	100b883a 	mov	r5,r2
   a064c:	00a2fd40 	call	a2fd4 <printf>
	printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address, ALTERA_AVALON_FIFO_EVENT_ALL) );
   a0650:	e13fff17 	ldw	r4,-4(fp)
   a0654:	01400fc4 	movi	r5,63
   a0658:	00ac7980 	call	ac798 <altera_avalon_fifo_read_event>
   a065c:	010002f4 	movhi	r4,11
   a0660:	213b4104 	addi	r4,r4,-4860
   a0664:	100b883a 	mov	r5,r2
   a0668:	00a2fd40 	call	a2fd4 <printf>
	//printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address, ALTERA_AVALON_FIFO_IENABLE_ALL) );
	printf("ALMOSTEMPTY = %u\n", altera_avalon_fifo_read_almostempty(control_base_address) );
   a066c:	e13fff17 	ldw	r4,-4(fp)
   a0670:	00ac76c0 	call	ac76c <altera_avalon_fifo_read_almostempty>
   a0674:	010002f4 	movhi	r4,11
   a0678:	213b4404 	addi	r4,r4,-4848
   a067c:	100b883a 	mov	r5,r2
   a0680:	00a2fd40 	call	a2fd4 <printf>
	printf("ALMOSTFULL = %u\n\n", 	altera_avalon_fifo_read_almostfull(control_base_address));
   a0684:	e13fff17 	ldw	r4,-4(fp)
   a0688:	00ac7400 	call	ac740 <altera_avalon_fifo_read_almostfull>
   a068c:	010002f4 	movhi	r4,11
   a0690:	213b4904 	addi	r4,r4,-4828
   a0694:	100b883a 	mov	r5,r2
   a0698:	00a2fd40 	call	a2fd4 <printf>
}
   a069c:	e037883a 	mov	sp,fp
   a06a0:	dfc00117 	ldw	ra,4(sp)
   a06a4:	df000017 	ldw	fp,0(sp)
   a06a8:	dec00204 	addi	sp,sp,8
   a06ac:	f800283a 	ret

000a06b0 <init_AB_0>:
#include "FIFO.h"



// FIFO_AB_0 -------------------------------------------------------------------
void init_AB_0(){
   a06b0:	defffe04 	addi	sp,sp,-8
   a06b4:	dfc00115 	stw	ra,4(sp)
   a06b8:	df000015 	stw	fp,0(sp)
   a06bc:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AB_0_CSR, FIFO_AB_0_ID, FIFO_AB_0_SIZE);
   a06c0:	01020074 	movhi	r4,2049
   a06c4:	21042804 	addi	r4,r4,4256
   a06c8:	000b883a 	mov	r5,zero
   a06cc:	01801f44 	movi	r6,125
   a06d0:	00a04500 	call	a0450 <INIT_B>
}
   a06d4:	e037883a 	mov	sp,fp
   a06d8:	dfc00117 	ldw	ra,4(sp)
   a06dc:	df000017 	ldw	fp,0(sp)
   a06e0:	dec00204 	addi	sp,sp,8
   a06e4:	f800283a 	ret

000a06e8 <read_AB_0>:
int read_AB_0(){
   a06e8:	defffd04 	addi	sp,sp,-12
   a06ec:	dfc00215 	stw	ra,8(sp)
   a06f0:	df000115 	stw	fp,4(sp)
   a06f4:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AB_0_READ, FIFO_AB_0_CSR, FIFO_AB_0_ID);
   a06f8:	e13fff04 	addi	r4,fp,-4
   a06fc:	01420074 	movhi	r5,2049
   a0700:	29445604 	addi	r5,r5,4440
   a0704:	01820074 	movhi	r6,2049
   a0708:	31842804 	addi	r6,r6,4256
   a070c:	000f883a 	mov	r7,zero
   a0710:	00a05340 	call	a0534 <READ_B>
   return val;
   a0714:	e0bfff17 	ldw	r2,-4(fp)
}
   a0718:	e037883a 	mov	sp,fp
   a071c:	dfc00117 	ldw	ra,4(sp)
   a0720:	df000017 	ldw	fp,0(sp)
   a0724:	dec00204 	addi	sp,sp,8
   a0728:	f800283a 	ret

000a072c <write_AB_0>:
void write_AB_0(int *buffer){
   a072c:	defffc04 	addi	sp,sp,-16
   a0730:	dfc00315 	stw	ra,12(sp)
   a0734:	df000215 	stw	fp,8(sp)
   a0738:	df000204 	addi	fp,sp,8
   a073c:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AB_0_WRITE, FIFO_AB_0_CSR, FIFO_AB_0_SIZE, FIFO_AB_0_ID);
   a0740:	d8000015 	stw	zero,0(sp)
   a0744:	e13fff17 	ldw	r4,-4(fp)
   a0748:	01420074 	movhi	r5,2049
   a074c:	29445904 	addi	r5,r5,4452
   a0750:	01820074 	movhi	r6,2049
   a0754:	31842804 	addi	r6,r6,4256
   a0758:	01c01f44 	movi	r7,125
   a075c:	00a04bc0 	call	a04bc <WRITE_B>
}
   a0760:	e037883a 	mov	sp,fp
   a0764:	dfc00117 	ldw	ra,4(sp)
   a0768:	df000017 	ldw	fp,0(sp)
   a076c:	dec00204 	addi	sp,sp,8
   a0770:	f800283a 	ret

000a0774 <readStatus_AB_0>:
void readStatus_AB_0(){
   a0774:	defffe04 	addi	sp,sp,-8
   a0778:	dfc00115 	stw	ra,4(sp)
   a077c:	df000015 	stw	fp,0(sp)
   a0780:	d839883a 	mov	fp,sp
   print_status(FIFO_AB_0_CSR);
   a0784:	01020074 	movhi	r4,2049
   a0788:	21042804 	addi	r4,r4,4256
   a078c:	00a05fc0 	call	a05fc <print_status>
}
   a0790:	e037883a 	mov	sp,fp
   a0794:	dfc00117 	ldw	ra,4(sp)
   a0798:	df000017 	ldw	fp,0(sp)
   a079c:	dec00204 	addi	sp,sp,8
   a07a0:	f800283a 	ret

000a07a4 <init_AB_1>:

// FIFO_AB_1 -------------------------------------------------------------------
void init_AB_1(){
   a07a4:	defffe04 	addi	sp,sp,-8
   a07a8:	dfc00115 	stw	ra,4(sp)
   a07ac:	df000015 	stw	fp,0(sp)
   a07b0:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AB_1_CSR, FIFO_AB_1_ID, FIFO_AB_1_SIZE);
   a07b4:	01020074 	movhi	r4,2049
   a07b8:	21042004 	addi	r4,r4,4224
   a07bc:	01400044 	movi	r5,1
   a07c0:	01801f44 	movi	r6,125
   a07c4:	00a04500 	call	a0450 <INIT_B>
}
   a07c8:	e037883a 	mov	sp,fp
   a07cc:	dfc00117 	ldw	ra,4(sp)
   a07d0:	df000017 	ldw	fp,0(sp)
   a07d4:	dec00204 	addi	sp,sp,8
   a07d8:	f800283a 	ret

000a07dc <read_AB_1>:
int read_AB_1(){
   a07dc:	defffd04 	addi	sp,sp,-12
   a07e0:	dfc00215 	stw	ra,8(sp)
   a07e4:	df000115 	stw	fp,4(sp)
   a07e8:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AB_1_READ, FIFO_AB_1_CSR, FIFO_AB_1_ID);
   a07ec:	e13fff04 	addi	r4,fp,-4
   a07f0:	01420074 	movhi	r5,2049
   a07f4:	29445504 	addi	r5,r5,4436
   a07f8:	01820074 	movhi	r6,2049
   a07fc:	31842004 	addi	r6,r6,4224
   a0800:	01c00044 	movi	r7,1
   a0804:	00a05340 	call	a0534 <READ_B>
   return val;
   a0808:	e0bfff17 	ldw	r2,-4(fp)
}
   a080c:	e037883a 	mov	sp,fp
   a0810:	dfc00117 	ldw	ra,4(sp)
   a0814:	df000017 	ldw	fp,0(sp)
   a0818:	dec00204 	addi	sp,sp,8
   a081c:	f800283a 	ret

000a0820 <write_AB_1>:
void write_AB_1(int *buffer){
   a0820:	defffc04 	addi	sp,sp,-16
   a0824:	dfc00315 	stw	ra,12(sp)
   a0828:	df000215 	stw	fp,8(sp)
   a082c:	df000204 	addi	fp,sp,8
   a0830:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AB_1_WRITE, FIFO_AB_1_CSR, FIFO_AB_1_SIZE, FIFO_AB_1_ID);
   a0834:	00800044 	movi	r2,1
   a0838:	d8800015 	stw	r2,0(sp)
   a083c:	e13fff17 	ldw	r4,-4(fp)
   a0840:	01420074 	movhi	r5,2049
   a0844:	29445804 	addi	r5,r5,4448
   a0848:	01820074 	movhi	r6,2049
   a084c:	31842004 	addi	r6,r6,4224
   a0850:	01c01f44 	movi	r7,125
   a0854:	00a04bc0 	call	a04bc <WRITE_B>
}
   a0858:	e037883a 	mov	sp,fp
   a085c:	dfc00117 	ldw	ra,4(sp)
   a0860:	df000017 	ldw	fp,0(sp)
   a0864:	dec00204 	addi	sp,sp,8
   a0868:	f800283a 	ret

000a086c <readStatus_AB_1>:
void readStatus_AB_1(){
   a086c:	defffe04 	addi	sp,sp,-8
   a0870:	dfc00115 	stw	ra,4(sp)
   a0874:	df000015 	stw	fp,0(sp)
   a0878:	d839883a 	mov	fp,sp
   print_status(FIFO_AB_1_CSR);
   a087c:	01020074 	movhi	r4,2049
   a0880:	21042004 	addi	r4,r4,4224
   a0884:	00a05fc0 	call	a05fc <print_status>
}
   a0888:	e037883a 	mov	sp,fp
   a088c:	dfc00117 	ldw	ra,4(sp)
   a0890:	df000017 	ldw	fp,0(sp)
   a0894:	dec00204 	addi	sp,sp,8
   a0898:	f800283a 	ret

000a089c <init_AB_2>:

// FIFO_AB_2 -------------------------------------------------------------------
void init_AB_2(){
   a089c:	defffe04 	addi	sp,sp,-8
   a08a0:	dfc00115 	stw	ra,4(sp)
   a08a4:	df000015 	stw	fp,0(sp)
   a08a8:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AB_2_CSR, FIFO_AB_2_ID, FIFO_AB_2_SIZE);
   a08ac:	01020074 	movhi	r4,2049
   a08b0:	21041804 	addi	r4,r4,4192
   a08b4:	01400084 	movi	r5,2
   a08b8:	01801f44 	movi	r6,125
   a08bc:	00a04500 	call	a0450 <INIT_B>
}
   a08c0:	e037883a 	mov	sp,fp
   a08c4:	dfc00117 	ldw	ra,4(sp)
   a08c8:	df000017 	ldw	fp,0(sp)
   a08cc:	dec00204 	addi	sp,sp,8
   a08d0:	f800283a 	ret

000a08d4 <read_AB_2>:
int read_AB_2(){
   a08d4:	defffd04 	addi	sp,sp,-12
   a08d8:	dfc00215 	stw	ra,8(sp)
   a08dc:	df000115 	stw	fp,4(sp)
   a08e0:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AB_2_READ, FIFO_AB_2_CSR, FIFO_AB_2_ID);
   a08e4:	e13fff04 	addi	r4,fp,-4
   a08e8:	01420074 	movhi	r5,2049
   a08ec:	29445404 	addi	r5,r5,4432
   a08f0:	01820074 	movhi	r6,2049
   a08f4:	31841804 	addi	r6,r6,4192
   a08f8:	01c00084 	movi	r7,2
   a08fc:	00a05340 	call	a0534 <READ_B>
   return val;
   a0900:	e0bfff17 	ldw	r2,-4(fp)
}
   a0904:	e037883a 	mov	sp,fp
   a0908:	dfc00117 	ldw	ra,4(sp)
   a090c:	df000017 	ldw	fp,0(sp)
   a0910:	dec00204 	addi	sp,sp,8
   a0914:	f800283a 	ret

000a0918 <write_AB_2>:
void write_AB_2(int *buffer){
   a0918:	defffc04 	addi	sp,sp,-16
   a091c:	dfc00315 	stw	ra,12(sp)
   a0920:	df000215 	stw	fp,8(sp)
   a0924:	df000204 	addi	fp,sp,8
   a0928:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AB_2_WRITE, FIFO_AB_2_CSR, FIFO_AB_2_SIZE, FIFO_AB_2_ID);
   a092c:	00800084 	movi	r2,2
   a0930:	d8800015 	stw	r2,0(sp)
   a0934:	e13fff17 	ldw	r4,-4(fp)
   a0938:	01420074 	movhi	r5,2049
   a093c:	29445704 	addi	r5,r5,4444
   a0940:	01820074 	movhi	r6,2049
   a0944:	31841804 	addi	r6,r6,4192
   a0948:	01c01f44 	movi	r7,125
   a094c:	00a04bc0 	call	a04bc <WRITE_B>
}
   a0950:	e037883a 	mov	sp,fp
   a0954:	dfc00117 	ldw	ra,4(sp)
   a0958:	df000017 	ldw	fp,0(sp)
   a095c:	dec00204 	addi	sp,sp,8
   a0960:	f800283a 	ret

000a0964 <readStatus_AB_2>:
void readStatus_AB_2(){
   a0964:	defffe04 	addi	sp,sp,-8
   a0968:	dfc00115 	stw	ra,4(sp)
   a096c:	df000015 	stw	fp,0(sp)
   a0970:	d839883a 	mov	fp,sp
   print_status(FIFO_AB_2_CSR);
   a0974:	01020074 	movhi	r4,2049
   a0978:	21041804 	addi	r4,r4,4192
   a097c:	00a05fc0 	call	a05fc <print_status>
}
   a0980:	e037883a 	mov	sp,fp
   a0984:	dfc00117 	ldw	ra,4(sp)
   a0988:	df000017 	ldw	fp,0(sp)
   a098c:	dec00204 	addi	sp,sp,8
   a0990:	f800283a 	ret

000a0994 <init_AD>:

// FIFO_AD -------------------------------------------------------------------
void init_AD(){
   a0994:	defffe04 	addi	sp,sp,-8
   a0998:	dfc00115 	stw	ra,4(sp)
   a099c:	df000015 	stw	fp,0(sp)
   a09a0:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AD_CSR, FIFO_AD_ID, FIFO_AD_SIZE);
   a09a4:	01020074 	movhi	r4,2049
   a09a8:	21041004 	addi	r4,r4,4160
   a09ac:	014000c4 	movi	r5,3
   a09b0:	01800744 	movi	r6,29
   a09b4:	00a04500 	call	a0450 <INIT_B>
}
   a09b8:	e037883a 	mov	sp,fp
   a09bc:	dfc00117 	ldw	ra,4(sp)
   a09c0:	df000017 	ldw	fp,0(sp)
   a09c4:	dec00204 	addi	sp,sp,8
   a09c8:	f800283a 	ret

000a09cc <read_AD>:
int read_AD(){
   a09cc:	defffd04 	addi	sp,sp,-12
   a09d0:	dfc00215 	stw	ra,8(sp)
   a09d4:	df000115 	stw	fp,4(sp)
   a09d8:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AD_READ, FIFO_AD_CSR, FIFO_AD_ID);
   a09dc:	e13fff04 	addi	r4,fp,-4
   a09e0:	01420074 	movhi	r5,2049
   a09e4:	29445204 	addi	r5,r5,4424
   a09e8:	01820074 	movhi	r6,2049
   a09ec:	31841004 	addi	r6,r6,4160
   a09f0:	01c000c4 	movi	r7,3
   a09f4:	00a05340 	call	a0534 <READ_B>
   return val;
   a09f8:	e0bfff17 	ldw	r2,-4(fp)
}
   a09fc:	e037883a 	mov	sp,fp
   a0a00:	dfc00117 	ldw	ra,4(sp)
   a0a04:	df000017 	ldw	fp,0(sp)
   a0a08:	dec00204 	addi	sp,sp,8
   a0a0c:	f800283a 	ret

000a0a10 <write_AD>:
void write_AD(int *buffer){
   a0a10:	defffc04 	addi	sp,sp,-16
   a0a14:	dfc00315 	stw	ra,12(sp)
   a0a18:	df000215 	stw	fp,8(sp)
   a0a1c:	df000204 	addi	fp,sp,8
   a0a20:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AD_WRITE, FIFO_AD_CSR, FIFO_AD_SIZE, FIFO_AD_ID);
   a0a24:	008000c4 	movi	r2,3
   a0a28:	d8800015 	stw	r2,0(sp)
   a0a2c:	e13fff17 	ldw	r4,-4(fp)
   a0a30:	01420074 	movhi	r5,2049
   a0a34:	29445304 	addi	r5,r5,4428
   a0a38:	01820074 	movhi	r6,2049
   a0a3c:	31841004 	addi	r6,r6,4160
   a0a40:	01c00744 	movi	r7,29
   a0a44:	00a04bc0 	call	a04bc <WRITE_B>
}
   a0a48:	e037883a 	mov	sp,fp
   a0a4c:	dfc00117 	ldw	ra,4(sp)
   a0a50:	df000017 	ldw	fp,0(sp)
   a0a54:	dec00204 	addi	sp,sp,8
   a0a58:	f800283a 	ret

000a0a5c <readStatus_AD>:
void readStatus_AD(){
   a0a5c:	defffe04 	addi	sp,sp,-8
   a0a60:	dfc00115 	stw	ra,4(sp)
   a0a64:	df000015 	stw	fp,0(sp)
   a0a68:	d839883a 	mov	fp,sp
   print_status(FIFO_AD_CSR);
   a0a6c:	01020074 	movhi	r4,2049
   a0a70:	21041004 	addi	r4,r4,4160
   a0a74:	00a05fc0 	call	a05fc <print_status>
}
   a0a78:	e037883a 	mov	sp,fp
   a0a7c:	dfc00117 	ldw	ra,4(sp)
   a0a80:	df000017 	ldw	fp,0(sp)
   a0a84:	dec00204 	addi	sp,sp,8
   a0a88:	f800283a 	ret

000a0a8c <init_AE>:


// FIFO_AE -------------------------------------------------------------------
void init_AE(){
   a0a8c:	defffe04 	addi	sp,sp,-8
   a0a90:	dfc00115 	stw	ra,4(sp)
   a0a94:	df000015 	stw	fp,0(sp)
   a0a98:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AE_CSR, FIFO_AE_ID, FIFO_AE_SIZE);
   a0a9c:	01020074 	movhi	r4,2049
   a0aa0:	21040804 	addi	r4,r4,4128
   a0aa4:	01400104 	movi	r5,4
   a0aa8:	01800744 	movi	r6,29
   a0aac:	00a04500 	call	a0450 <INIT_B>
}
   a0ab0:	e037883a 	mov	sp,fp
   a0ab4:	dfc00117 	ldw	ra,4(sp)
   a0ab8:	df000017 	ldw	fp,0(sp)
   a0abc:	dec00204 	addi	sp,sp,8
   a0ac0:	f800283a 	ret

000a0ac4 <read_AE>:
int read_AE(){
   a0ac4:	defffd04 	addi	sp,sp,-12
   a0ac8:	dfc00215 	stw	ra,8(sp)
   a0acc:	df000115 	stw	fp,4(sp)
   a0ad0:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AE_READ, FIFO_AE_CSR, FIFO_AE_ID);
   a0ad4:	e13fff04 	addi	r4,fp,-4
   a0ad8:	01420074 	movhi	r5,2049
   a0adc:	29445004 	addi	r5,r5,4416
   a0ae0:	01820074 	movhi	r6,2049
   a0ae4:	31840804 	addi	r6,r6,4128
   a0ae8:	01c00104 	movi	r7,4
   a0aec:	00a05340 	call	a0534 <READ_B>
   return val;
   a0af0:	e0bfff17 	ldw	r2,-4(fp)
}
   a0af4:	e037883a 	mov	sp,fp
   a0af8:	dfc00117 	ldw	ra,4(sp)
   a0afc:	df000017 	ldw	fp,0(sp)
   a0b00:	dec00204 	addi	sp,sp,8
   a0b04:	f800283a 	ret

000a0b08 <write_AE>:
void write_AE(int *buffer){
   a0b08:	defffc04 	addi	sp,sp,-16
   a0b0c:	dfc00315 	stw	ra,12(sp)
   a0b10:	df000215 	stw	fp,8(sp)
   a0b14:	df000204 	addi	fp,sp,8
   a0b18:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AE_WRITE, FIFO_AE_CSR, FIFO_AE_SIZE, FIFO_AE_ID);
   a0b1c:	00800104 	movi	r2,4
   a0b20:	d8800015 	stw	r2,0(sp)
   a0b24:	e13fff17 	ldw	r4,-4(fp)
   a0b28:	01420074 	movhi	r5,2049
   a0b2c:	29445104 	addi	r5,r5,4420
   a0b30:	01820074 	movhi	r6,2049
   a0b34:	31840804 	addi	r6,r6,4128
   a0b38:	01c00744 	movi	r7,29
   a0b3c:	00a04bc0 	call	a04bc <WRITE_B>
}
   a0b40:	e037883a 	mov	sp,fp
   a0b44:	dfc00117 	ldw	ra,4(sp)
   a0b48:	df000017 	ldw	fp,0(sp)
   a0b4c:	dec00204 	addi	sp,sp,8
   a0b50:	f800283a 	ret

000a0b54 <readStatus_AE>:
void readStatus_AE(){
   a0b54:	defffe04 	addi	sp,sp,-8
   a0b58:	dfc00115 	stw	ra,4(sp)
   a0b5c:	df000015 	stw	fp,0(sp)
   a0b60:	d839883a 	mov	fp,sp
   print_status(FIFO_AE_CSR);
   a0b64:	01020074 	movhi	r4,2049
   a0b68:	21040804 	addi	r4,r4,4128
   a0b6c:	00a05fc0 	call	a05fc <print_status>
}
   a0b70:	e037883a 	mov	sp,fp
   a0b74:	dfc00117 	ldw	ra,4(sp)
   a0b78:	df000017 	ldw	fp,0(sp)
   a0b7c:	dec00204 	addi	sp,sp,8
   a0b80:	f800283a 	ret

000a0b84 <init_AF>:

// FIFO_AF -------------------------------------------------------------------
void init_AF(){
   a0b84:	defffe04 	addi	sp,sp,-8
   a0b88:	dfc00115 	stw	ra,4(sp)
   a0b8c:	df000015 	stw	fp,0(sp)
   a0b90:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AF_CSR, FIFO_AF_ID, FIFO_AF_SIZE);
   a0b94:	01020074 	movhi	r4,2049
   a0b98:	21040004 	addi	r4,r4,4096
   a0b9c:	01400144 	movi	r5,5
   a0ba0:	01800744 	movi	r6,29
   a0ba4:	00a04500 	call	a0450 <INIT_B>
}
   a0ba8:	e037883a 	mov	sp,fp
   a0bac:	dfc00117 	ldw	ra,4(sp)
   a0bb0:	df000017 	ldw	fp,0(sp)
   a0bb4:	dec00204 	addi	sp,sp,8
   a0bb8:	f800283a 	ret

000a0bbc <read_AF>:
int read_AF(){
   a0bbc:	defffd04 	addi	sp,sp,-12
   a0bc0:	dfc00215 	stw	ra,8(sp)
   a0bc4:	df000115 	stw	fp,4(sp)
   a0bc8:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AF_READ, FIFO_AF_CSR, FIFO_AF_ID);
   a0bcc:	e13fff04 	addi	r4,fp,-4
   a0bd0:	01420074 	movhi	r5,2049
   a0bd4:	29444e04 	addi	r5,r5,4408
   a0bd8:	01820074 	movhi	r6,2049
   a0bdc:	31840004 	addi	r6,r6,4096
   a0be0:	01c00144 	movi	r7,5
   a0be4:	00a05340 	call	a0534 <READ_B>
   return val;
   a0be8:	e0bfff17 	ldw	r2,-4(fp)
}
   a0bec:	e037883a 	mov	sp,fp
   a0bf0:	dfc00117 	ldw	ra,4(sp)
   a0bf4:	df000017 	ldw	fp,0(sp)
   a0bf8:	dec00204 	addi	sp,sp,8
   a0bfc:	f800283a 	ret

000a0c00 <write_AF>:
void write_AF(int *buffer){
   a0c00:	defffc04 	addi	sp,sp,-16
   a0c04:	dfc00315 	stw	ra,12(sp)
   a0c08:	df000215 	stw	fp,8(sp)
   a0c0c:	df000204 	addi	fp,sp,8
   a0c10:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AF_WRITE, FIFO_AF_CSR, FIFO_AF_SIZE, FIFO_AF_ID);
   a0c14:	00800144 	movi	r2,5
   a0c18:	d8800015 	stw	r2,0(sp)
   a0c1c:	e13fff17 	ldw	r4,-4(fp)
   a0c20:	01420074 	movhi	r5,2049
   a0c24:	29444f04 	addi	r5,r5,4412
   a0c28:	01820074 	movhi	r6,2049
   a0c2c:	31840004 	addi	r6,r6,4096
   a0c30:	01c00744 	movi	r7,29
   a0c34:	00a04bc0 	call	a04bc <WRITE_B>
}
   a0c38:	e037883a 	mov	sp,fp
   a0c3c:	dfc00117 	ldw	ra,4(sp)
   a0c40:	df000017 	ldw	fp,0(sp)
   a0c44:	dec00204 	addi	sp,sp,8
   a0c48:	f800283a 	ret

000a0c4c <readStatus_AF>:
void readStatus_AF(){
   a0c4c:	defffe04 	addi	sp,sp,-8
   a0c50:	dfc00115 	stw	ra,4(sp)
   a0c54:	df000015 	stw	fp,0(sp)
   a0c58:	d839883a 	mov	fp,sp
   print_status(FIFO_AF_CSR);
   a0c5c:	01020074 	movhi	r4,2049
   a0c60:	21040004 	addi	r4,r4,4096
   a0c64:	00a05fc0 	call	a05fc <print_status>
}
   a0c68:	e037883a 	mov	sp,fp
   a0c6c:	dfc00117 	ldw	ra,4(sp)
   a0c70:	df000017 	ldw	fp,0(sp)
   a0c74:	dec00204 	addi	sp,sp,8
   a0c78:	f800283a 	ret

000a0c7c <init_BC>:

// FIFO_BC -------------------------------------------------------------------
void init_BC(){
   a0c7c:	defffe04 	addi	sp,sp,-8
   a0c80:	dfc00115 	stw	ra,4(sp)
   a0c84:	df000015 	stw	fp,0(sp)
   a0c88:	d839883a 	mov	fp,sp
   INIT_B(FIFO_BC_CSR, FIFO_BC_ID, FIFO_BC_SIZE);
   a0c8c:	01020074 	movhi	r4,2049
   a0c90:	21040004 	addi	r4,r4,4096
   a0c94:	01400184 	movi	r5,6
   a0c98:	01803f44 	movi	r6,253
   a0c9c:	00a04500 	call	a0450 <INIT_B>
}
   a0ca0:	e037883a 	mov	sp,fp
   a0ca4:	dfc00117 	ldw	ra,4(sp)
   a0ca8:	df000017 	ldw	fp,0(sp)
   a0cac:	dec00204 	addi	sp,sp,8
   a0cb0:	f800283a 	ret

000a0cb4 <read_BC>:
int read_BC(){
   a0cb4:	defffd04 	addi	sp,sp,-12
   a0cb8:	dfc00215 	stw	ra,8(sp)
   a0cbc:	df000115 	stw	fp,4(sp)
   a0cc0:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_BC_READ, FIFO_BC_CSR, FIFO_BC_ID);
   a0cc4:	e13fff04 	addi	r4,fp,-4
   a0cc8:	01420074 	movhi	r5,2049
   a0ccc:	29443604 	addi	r5,r5,4312
   a0cd0:	01820074 	movhi	r6,2049
   a0cd4:	31840004 	addi	r6,r6,4096
   a0cd8:	01c00184 	movi	r7,6
   a0cdc:	00a05340 	call	a0534 <READ_B>
   return val;
   a0ce0:	e0bfff17 	ldw	r2,-4(fp)
}
   a0ce4:	e037883a 	mov	sp,fp
   a0ce8:	dfc00117 	ldw	ra,4(sp)
   a0cec:	df000017 	ldw	fp,0(sp)
   a0cf0:	dec00204 	addi	sp,sp,8
   a0cf4:	f800283a 	ret

000a0cf8 <write_BC>:
void write_BC(int *buffer){
   a0cf8:	defffc04 	addi	sp,sp,-16
   a0cfc:	dfc00315 	stw	ra,12(sp)
   a0d00:	df000215 	stw	fp,8(sp)
   a0d04:	df000204 	addi	fp,sp,8
   a0d08:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_BC_WRITE, FIFO_BC_CSR, FIFO_BC_SIZE, FIFO_BC_ID);
   a0d0c:	00800184 	movi	r2,6
   a0d10:	d8800015 	stw	r2,0(sp)
   a0d14:	e13fff17 	ldw	r4,-4(fp)
   a0d18:	01420074 	movhi	r5,2049
   a0d1c:	29443704 	addi	r5,r5,4316
   a0d20:	01820074 	movhi	r6,2049
   a0d24:	31840004 	addi	r6,r6,4096
   a0d28:	01c03f44 	movi	r7,253
   a0d2c:	00a04bc0 	call	a04bc <WRITE_B>
}
   a0d30:	e037883a 	mov	sp,fp
   a0d34:	dfc00117 	ldw	ra,4(sp)
   a0d38:	df000017 	ldw	fp,0(sp)
   a0d3c:	dec00204 	addi	sp,sp,8
   a0d40:	f800283a 	ret

000a0d44 <readStatus_BC>:
void readStatus_BC(){
   a0d44:	defffe04 	addi	sp,sp,-8
   a0d48:	dfc00115 	stw	ra,4(sp)
   a0d4c:	df000015 	stw	fp,0(sp)
   a0d50:	d839883a 	mov	fp,sp
   print_status(FIFO_BC_CSR);
   a0d54:	01020074 	movhi	r4,2049
   a0d58:	21040004 	addi	r4,r4,4096
   a0d5c:	00a05fc0 	call	a05fc <print_status>
}
   a0d60:	e037883a 	mov	sp,fp
   a0d64:	dfc00117 	ldw	ra,4(sp)
   a0d68:	df000017 	ldw	fp,0(sp)
   a0d6c:	dec00204 	addi	sp,sp,8
   a0d70:	f800283a 	ret

000a0d74 <init_CD>:

// FIFO_CD -------------------------------------------------------------------
void init_CD(){
   a0d74:	defffe04 	addi	sp,sp,-8
   a0d78:	dfc00115 	stw	ra,4(sp)
   a0d7c:	df000015 	stw	fp,0(sp)
   a0d80:	d839883a 	mov	fp,sp
   INIT_B(FIFO_CD_CSR, FIFO_CD_ID, FIFO_CD_SIZE);
   a0d84:	01020074 	movhi	r4,2049
   a0d88:	21040804 	addi	r4,r4,4128
   a0d8c:	014001c4 	movi	r5,7
   a0d90:	01803f44 	movi	r6,253
   a0d94:	00a04500 	call	a0450 <INIT_B>
}
   a0d98:	e037883a 	mov	sp,fp
   a0d9c:	dfc00117 	ldw	ra,4(sp)
   a0da0:	df000017 	ldw	fp,0(sp)
   a0da4:	dec00204 	addi	sp,sp,8
   a0da8:	f800283a 	ret

000a0dac <read_CD>:
int read_CD(){
   a0dac:	defffd04 	addi	sp,sp,-12
   a0db0:	dfc00215 	stw	ra,8(sp)
   a0db4:	df000115 	stw	fp,4(sp)
   a0db8:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_CD_READ, FIFO_CD_CSR, FIFO_CD_ID);
   a0dbc:	e13fff04 	addi	r4,fp,-4
   a0dc0:	01420074 	movhi	r5,2049
   a0dc4:	29442604 	addi	r5,r5,4248
   a0dc8:	01820074 	movhi	r6,2049
   a0dcc:	31840804 	addi	r6,r6,4128
   a0dd0:	01c001c4 	movi	r7,7
   a0dd4:	00a05340 	call	a0534 <READ_B>
   return val;
   a0dd8:	e0bfff17 	ldw	r2,-4(fp)
}
   a0ddc:	e037883a 	mov	sp,fp
   a0de0:	dfc00117 	ldw	ra,4(sp)
   a0de4:	df000017 	ldw	fp,0(sp)
   a0de8:	dec00204 	addi	sp,sp,8
   a0dec:	f800283a 	ret

000a0df0 <write_CD>:
void write_CD(int *buffer){
   a0df0:	defffc04 	addi	sp,sp,-16
   a0df4:	dfc00315 	stw	ra,12(sp)
   a0df8:	df000215 	stw	fp,8(sp)
   a0dfc:	df000204 	addi	fp,sp,8
   a0e00:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_CD_WRITE, FIFO_CD_CSR, FIFO_CD_SIZE, FIFO_CD_ID);
   a0e04:	008001c4 	movi	r2,7
   a0e08:	d8800015 	stw	r2,0(sp)
   a0e0c:	e13fff17 	ldw	r4,-4(fp)
   a0e10:	01420074 	movhi	r5,2049
   a0e14:	29442704 	addi	r5,r5,4252
   a0e18:	01820074 	movhi	r6,2049
   a0e1c:	31840804 	addi	r6,r6,4128
   a0e20:	01c03f44 	movi	r7,253
   a0e24:	00a04bc0 	call	a04bc <WRITE_B>
}
   a0e28:	e037883a 	mov	sp,fp
   a0e2c:	dfc00117 	ldw	ra,4(sp)
   a0e30:	df000017 	ldw	fp,0(sp)
   a0e34:	dec00204 	addi	sp,sp,8
   a0e38:	f800283a 	ret

000a0e3c <readStatus_CD>:
void readStatus_CD(){
   a0e3c:	defffe04 	addi	sp,sp,-8
   a0e40:	dfc00115 	stw	ra,4(sp)
   a0e44:	df000015 	stw	fp,0(sp)
   a0e48:	d839883a 	mov	fp,sp
   print_status(FIFO_CD_CSR);
   a0e4c:	01020074 	movhi	r4,2049
   a0e50:	21040804 	addi	r4,r4,4128
   a0e54:	00a05fc0 	call	a05fc <print_status>
}
   a0e58:	e037883a 	mov	sp,fp
   a0e5c:	dfc00117 	ldw	ra,4(sp)
   a0e60:	df000017 	ldw	fp,0(sp)
   a0e64:	dec00204 	addi	sp,sp,8
   a0e68:	f800283a 	ret

000a0e6c <init_DE>:

// FIFO_DE -------------------------------------------------------------------
void init_DE(){
   a0e6c:	defffe04 	addi	sp,sp,-8
   a0e70:	dfc00115 	stw	ra,4(sp)
   a0e74:	df000015 	stw	fp,0(sp)
   a0e78:	d839883a 	mov	fp,sp
   INIT_B(FIFO_DE_CSR, FIFO_DE_ID, FIFO_DE_SIZE);
   a0e7c:	01020074 	movhi	r4,2049
   a0e80:	21040004 	addi	r4,r4,4096
   a0e84:	01400204 	movi	r5,8
   a0e88:	01803f44 	movi	r6,253
   a0e8c:	00a04500 	call	a0450 <INIT_B>
}
   a0e90:	e037883a 	mov	sp,fp
   a0e94:	dfc00117 	ldw	ra,4(sp)
   a0e98:	df000017 	ldw	fp,0(sp)
   a0e9c:	dec00204 	addi	sp,sp,8
   a0ea0:	f800283a 	ret

000a0ea4 <read_DE>:
int read_DE(){
   a0ea4:	defffd04 	addi	sp,sp,-12
   a0ea8:	dfc00215 	stw	ra,8(sp)
   a0eac:	df000115 	stw	fp,4(sp)
   a0eb0:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_DE_READ, FIFO_DE_CSR, FIFO_DE_ID);
   a0eb4:	e13fff04 	addi	r4,fp,-4
   a0eb8:	01420074 	movhi	r5,2049
   a0ebc:	29443004 	addi	r5,r5,4288
   a0ec0:	01820074 	movhi	r6,2049
   a0ec4:	31840004 	addi	r6,r6,4096
   a0ec8:	01c00204 	movi	r7,8
   a0ecc:	00a05340 	call	a0534 <READ_B>
   return val;
   a0ed0:	e0bfff17 	ldw	r2,-4(fp)
}
   a0ed4:	e037883a 	mov	sp,fp
   a0ed8:	dfc00117 	ldw	ra,4(sp)
   a0edc:	df000017 	ldw	fp,0(sp)
   a0ee0:	dec00204 	addi	sp,sp,8
   a0ee4:	f800283a 	ret

000a0ee8 <write_DE>:
void write_DE(int *buffer){
   a0ee8:	defffc04 	addi	sp,sp,-16
   a0eec:	dfc00315 	stw	ra,12(sp)
   a0ef0:	df000215 	stw	fp,8(sp)
   a0ef4:	df000204 	addi	fp,sp,8
   a0ef8:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_DE_WRITE, FIFO_DE_CSR, FIFO_DE_SIZE, FIFO_DE_ID);
   a0efc:	00800204 	movi	r2,8
   a0f00:	d8800015 	stw	r2,0(sp)
   a0f04:	e13fff17 	ldw	r4,-4(fp)
   a0f08:	01420074 	movhi	r5,2049
   a0f0c:	29443104 	addi	r5,r5,4292
   a0f10:	01820074 	movhi	r6,2049
   a0f14:	31840004 	addi	r6,r6,4096
   a0f18:	01c03f44 	movi	r7,253
   a0f1c:	00a04bc0 	call	a04bc <WRITE_B>
}
   a0f20:	e037883a 	mov	sp,fp
   a0f24:	dfc00117 	ldw	ra,4(sp)
   a0f28:	df000017 	ldw	fp,0(sp)
   a0f2c:	dec00204 	addi	sp,sp,8
   a0f30:	f800283a 	ret

000a0f34 <readStatus_DE>:
void readStatus_DE(){
   a0f34:	defffe04 	addi	sp,sp,-8
   a0f38:	dfc00115 	stw	ra,4(sp)
   a0f3c:	df000015 	stw	fp,0(sp)
   a0f40:	d839883a 	mov	fp,sp
   print_status(FIFO_DE_CSR);
   a0f44:	01020074 	movhi	r4,2049
   a0f48:	21040004 	addi	r4,r4,4096
   a0f4c:	00a05fc0 	call	a05fc <print_status>
}
   a0f50:	e037883a 	mov	sp,fp
   a0f54:	dfc00117 	ldw	ra,4(sp)
   a0f58:	df000017 	ldw	fp,0(sp)
   a0f5c:	dec00204 	addi	sp,sp,8
   a0f60:	f800283a 	ret

000a0f64 <init_EF>:

// FIFO_EF -------------------------------------------------------------------
void init_EF(){
   a0f64:	defffe04 	addi	sp,sp,-8
   a0f68:	dfc00115 	stw	ra,4(sp)
   a0f6c:	df000015 	stw	fp,0(sp)
   a0f70:	d839883a 	mov	fp,sp
   INIT_B(FIFO_EF_CSR, FIFO_EF_ID, FIFO_EF_SIZE);
   a0f74:	01020074 	movhi	r4,2049
   a0f78:	21041004 	addi	r4,r4,4160
   a0f7c:	01400244 	movi	r5,9
   a0f80:	01803f44 	movi	r6,253
   a0f84:	00a04500 	call	a0450 <INIT_B>
}
   a0f88:	e037883a 	mov	sp,fp
   a0f8c:	dfc00117 	ldw	ra,4(sp)
   a0f90:	df000017 	ldw	fp,0(sp)
   a0f94:	dec00204 	addi	sp,sp,8
   a0f98:	f800283a 	ret

000a0f9c <read_EF>:
int read_EF(){
   a0f9c:	defffd04 	addi	sp,sp,-12
   a0fa0:	dfc00215 	stw	ra,8(sp)
   a0fa4:	df000115 	stw	fp,4(sp)
   a0fa8:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_EF_READ, FIFO_EF_CSR, FIFO_EF_ID);
   a0fac:	e13fff04 	addi	r4,fp,-4
   a0fb0:	01420074 	movhi	r5,2049
   a0fb4:	29442e04 	addi	r5,r5,4280
   a0fb8:	01820074 	movhi	r6,2049
   a0fbc:	31841004 	addi	r6,r6,4160
   a0fc0:	01c00244 	movi	r7,9
   a0fc4:	00a05340 	call	a0534 <READ_B>
   return val;
   a0fc8:	e0bfff17 	ldw	r2,-4(fp)
}
   a0fcc:	e037883a 	mov	sp,fp
   a0fd0:	dfc00117 	ldw	ra,4(sp)
   a0fd4:	df000017 	ldw	fp,0(sp)
   a0fd8:	dec00204 	addi	sp,sp,8
   a0fdc:	f800283a 	ret

000a0fe0 <write_EF>:
void write_EF(int *buffer){
   a0fe0:	defffc04 	addi	sp,sp,-16
   a0fe4:	dfc00315 	stw	ra,12(sp)
   a0fe8:	df000215 	stw	fp,8(sp)
   a0fec:	df000204 	addi	fp,sp,8
   a0ff0:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_EF_WRITE, FIFO_EF_CSR, FIFO_EF_SIZE, FIFO_EF_ID);
   a0ff4:	00800244 	movi	r2,9
   a0ff8:	d8800015 	stw	r2,0(sp)
   a0ffc:	e13fff17 	ldw	r4,-4(fp)
   a1000:	01420074 	movhi	r5,2049
   a1004:	29442f04 	addi	r5,r5,4284
   a1008:	01820074 	movhi	r6,2049
   a100c:	31841004 	addi	r6,r6,4160
   a1010:	01c03f44 	movi	r7,253
   a1014:	00a04bc0 	call	a04bc <WRITE_B>
}
   a1018:	e037883a 	mov	sp,fp
   a101c:	dfc00117 	ldw	ra,4(sp)
   a1020:	df000017 	ldw	fp,0(sp)
   a1024:	dec00204 	addi	sp,sp,8
   a1028:	f800283a 	ret

000a102c <readStatus_EF>:
void readStatus_EF(){
   a102c:	defffe04 	addi	sp,sp,-8
   a1030:	dfc00115 	stw	ra,4(sp)
   a1034:	df000015 	stw	fp,0(sp)
   a1038:	d839883a 	mov	fp,sp
   print_status(FIFO_EF_CSR);
   a103c:	01020074 	movhi	r4,2049
   a1040:	21041004 	addi	r4,r4,4160
   a1044:	00a05fc0 	call	a05fc <print_status>
}
   a1048:	e037883a 	mov	sp,fp
   a104c:	dfc00117 	ldw	ra,4(sp)
   a1050:	df000017 	ldw	fp,0(sp)
   a1054:	dec00204 	addi	sp,sp,8
   a1058:	f800283a 	ret

000a105c <delay>:

#include "./utility.h"
#include "./IOMap.h"


void delay(int ms){
   a105c:	defffd04 	addi	sp,sp,-12
   a1060:	dfc00215 	stw	ra,8(sp)
   a1064:	df000115 	stw	fp,4(sp)
   a1068:	df000104 	addi	fp,sp,4
   a106c:	e13fff15 	stw	r4,-4(fp)
	usleep(ms*1000);
   a1070:	e13fff17 	ldw	r4,-4(fp)
   a1074:	0140fa04 	movi	r5,1000
   a1078:	00a118c0 	call	a118c <__mulsi3>
   a107c:	1009883a 	mov	r4,r2
   a1080:	00ac3b80 	call	ac3b8 <usleep>
}
   a1084:	e037883a 	mov	sp,fp
   a1088:	dfc00117 	ldw	ra,4(sp)
   a108c:	df000017 	ldw	fp,0(sp)
   a1090:	dec00204 	addi	sp,sp,8
   a1094:	f800283a 	ret

000a1098 <ledUpdate>:

void ledUpdate(uint8_t digit, uint8_t status){
   a1098:	defffc04 	addi	sp,sp,-16
   a109c:	df000315 	stw	fp,12(sp)
   a10a0:	df000304 	addi	fp,sp,12
   a10a4:	2007883a 	mov	r3,r4
   a10a8:	2805883a 	mov	r2,r5
   a10ac:	e0fffe05 	stb	r3,-8(fp)
   a10b0:	e0bfff05 	stb	r2,-4(fp)
	uint8_t value =  (uint8_t)IORD_32DIRECT(LED_BASE, OFFSET);
   a10b4:	00820074 	movhi	r2,2049
   a10b8:	10844004 	addi	r2,r2,4352
   a10bc:	10800037 	ldwio	r2,0(r2)
   a10c0:	e0bffd05 	stb	r2,-12(fp)

	if(status==1){
   a10c4:	e0bfff03 	ldbu	r2,-4(fp)
   a10c8:	10800058 	cmpnei	r2,r2,1
   a10cc:	1000081e 	bne	r2,zero,a10f0 <ledUpdate+0x58>
		value = value | (1<<digit);
   a10d0:	e0bffe03 	ldbu	r2,-8(fp)
   a10d4:	00c00044 	movi	r3,1
   a10d8:	1884983a 	sll	r2,r3,r2
   a10dc:	1007883a 	mov	r3,r2
   a10e0:	e0bffd03 	ldbu	r2,-12(fp)
   a10e4:	1884b03a 	or	r2,r3,r2
   a10e8:	e0bffd05 	stb	r2,-12(fp)
   a10ec:	00000806 	br	a1110 <ledUpdate+0x78>
	}else{
		value = value & (~(1<<digit));
   a10f0:	e0bffe03 	ldbu	r2,-8(fp)
   a10f4:	00c00044 	movi	r3,1
   a10f8:	1884983a 	sll	r2,r3,r2
   a10fc:	0084303a 	nor	r2,zero,r2
   a1100:	1007883a 	mov	r3,r2
   a1104:	e0bffd03 	ldbu	r2,-12(fp)
   a1108:	1884703a 	and	r2,r3,r2
   a110c:	e0bffd05 	stb	r2,-12(fp)
	}
	IOWR_8DIRECT(LED_BASE,OFFSET,value);
   a1110:	e0fffd03 	ldbu	r3,-12(fp)
   a1114:	00820074 	movhi	r2,2049
   a1118:	10844004 	addi	r2,r2,4352
   a111c:	10c00025 	stbio	r3,0(r2)
}
   a1120:	e037883a 	mov	sp,fp
   a1124:	df000017 	ldw	fp,0(sp)
   a1128:	dec00104 	addi	sp,sp,4
   a112c:	f800283a 	ret

000a1130 <ledBlink>:

void ledBlink(uint8_t id){
   a1130:	defffd04 	addi	sp,sp,-12
   a1134:	dfc00215 	stw	ra,8(sp)
   a1138:	df000115 	stw	fp,4(sp)
   a113c:	df000104 	addi	fp,sp,4
   a1140:	2005883a 	mov	r2,r4
   a1144:	e0bfff05 	stb	r2,-4(fp)
	ledUpdate(id,1);
   a1148:	e0bfff03 	ldbu	r2,-4(fp)
   a114c:	1009883a 	mov	r4,r2
   a1150:	01400044 	movi	r5,1
   a1154:	00a10980 	call	a1098 <ledUpdate>
	delay(200);
   a1158:	01003204 	movi	r4,200
   a115c:	00a105c0 	call	a105c <delay>
	ledUpdate(id,0);
   a1160:	e0bfff03 	ldbu	r2,-4(fp)
   a1164:	1009883a 	mov	r4,r2
   a1168:	000b883a 	mov	r5,zero
   a116c:	00a10980 	call	a1098 <ledUpdate>
	delay(50);
   a1170:	01000c84 	movi	r4,50
   a1174:	00a105c0 	call	a105c <delay>
}
   a1178:	e037883a 	mov	sp,fp
   a117c:	dfc00117 	ldw	ra,4(sp)
   a1180:	df000017 	ldw	fp,0(sp)
   a1184:	dec00204 	addi	sp,sp,8
   a1188:	f800283a 	ret

000a118c <__mulsi3>:
   a118c:	0005883a 	mov	r2,zero
   a1190:	20000726 	beq	r4,zero,a11b0 <__mulsi3+0x24>
   a1194:	20c0004c 	andi	r3,r4,1
   a1198:	2008d07a 	srli	r4,r4,1
   a119c:	18000126 	beq	r3,zero,a11a4 <__mulsi3+0x18>
   a11a0:	1145883a 	add	r2,r2,r5
   a11a4:	294b883a 	add	r5,r5,r5
   a11a8:	203ffa1e 	bne	r4,zero,a1194 <__mulsi3+0x8>
   a11ac:	f800283a 	ret
   a11b0:	f800283a 	ret

000a11b4 <clock>:
   a11b4:	008002f4 	movhi	r2,11
   a11b8:	1082a904 	addi	r2,r2,2724
   a11bc:	11000017 	ldw	r4,0(r2)
   a11c0:	defffb04 	addi	sp,sp,-20
   a11c4:	d80b883a 	mov	r5,sp
   a11c8:	dfc00415 	stw	ra,16(sp)
   a11cc:	00a368c0 	call	a368c <_times_r>
   a11d0:	00ffffc4 	movi	r3,-1
   a11d4:	10c00726 	beq	r2,r3,a11f4 <clock+0x40>
   a11d8:	d8c00117 	ldw	r3,4(sp)
   a11dc:	d8800017 	ldw	r2,0(sp)
   a11e0:	1885883a 	add	r2,r3,r2
   a11e4:	d8c00217 	ldw	r3,8(sp)
   a11e8:	10c5883a 	add	r2,r2,r3
   a11ec:	d8c00317 	ldw	r3,12(sp)
   a11f0:	10c5883a 	add	r2,r2,r3
   a11f4:	dfc00417 	ldw	ra,16(sp)
   a11f8:	dec00504 	addi	sp,sp,20
   a11fc:	f800283a 	ret

000a1200 <exit>:
   a1200:	defffe04 	addi	sp,sp,-8
   a1204:	000b883a 	mov	r5,zero
   a1208:	dc000015 	stw	r16,0(sp)
   a120c:	dfc00115 	stw	ra,4(sp)
   a1210:	2021883a 	mov	r16,r4
   a1214:	00a58a00 	call	a58a0 <__call_exitprocs>
   a1218:	008002f4 	movhi	r2,11
   a121c:	1082a804 	addi	r2,r2,2720
   a1220:	11000017 	ldw	r4,0(r2)
   a1224:	20800f17 	ldw	r2,60(r4)
   a1228:	10000126 	beq	r2,zero,a1230 <exit+0x30>
   a122c:	103ee83a 	callr	r2
   a1230:	8009883a 	mov	r4,r16
   a1234:	00ab8e00 	call	ab8e0 <_exit>

000a1238 <_fclose_r>:
   a1238:	defffc04 	addi	sp,sp,-16
   a123c:	dc400115 	stw	r17,4(sp)
   a1240:	dc000015 	stw	r16,0(sp)
   a1244:	dfc00315 	stw	ra,12(sp)
   a1248:	dc800215 	stw	r18,8(sp)
   a124c:	2821883a 	mov	r16,r5
   a1250:	2023883a 	mov	r17,r4
   a1254:	28003426 	beq	r5,zero,a1328 <_fclose_r+0xf0>
   a1258:	00a184c0 	call	a184c <__sfp_lock_acquire>
   a125c:	88000226 	beq	r17,zero,a1268 <_fclose_r+0x30>
   a1260:	88800e17 	ldw	r2,56(r17)
   a1264:	10003826 	beq	r2,zero,a1348 <_fclose_r+0x110>
   a1268:	8080030f 	ldh	r2,12(r16)
   a126c:	10002526 	beq	r2,zero,a1304 <_fclose_r+0xcc>
   a1270:	8809883a 	mov	r4,r17
   a1274:	800b883a 	mov	r5,r16
   a1278:	00a13880 	call	a1388 <_fflush_r>
   a127c:	1025883a 	mov	r18,r2
   a1280:	80800b17 	ldw	r2,44(r16)
   a1284:	10000426 	beq	r2,zero,a1298 <_fclose_r+0x60>
   a1288:	81400717 	ldw	r5,28(r16)
   a128c:	8809883a 	mov	r4,r17
   a1290:	103ee83a 	callr	r2
   a1294:	10003516 	blt	r2,zero,a136c <_fclose_r+0x134>
   a1298:	8080030b 	ldhu	r2,12(r16)
   a129c:	1080200c 	andi	r2,r2,128
   a12a0:	10bfffcc 	andi	r2,r2,65535
   a12a4:	10a0001c 	xori	r2,r2,32768
   a12a8:	10a00004 	addi	r2,r2,-32768
   a12ac:	10002b1e 	bne	r2,zero,a135c <_fclose_r+0x124>
   a12b0:	81400c17 	ldw	r5,48(r16)
   a12b4:	28000526 	beq	r5,zero,a12cc <_fclose_r+0x94>
   a12b8:	80801004 	addi	r2,r16,64
   a12bc:	28800226 	beq	r5,r2,a12c8 <_fclose_r+0x90>
   a12c0:	8809883a 	mov	r4,r17
   a12c4:	00a1c040 	call	a1c04 <_free_r>
   a12c8:	80000c15 	stw	zero,48(r16)
   a12cc:	81401117 	ldw	r5,68(r16)
   a12d0:	28000326 	beq	r5,zero,a12e0 <_fclose_r+0xa8>
   a12d4:	8809883a 	mov	r4,r17
   a12d8:	00a1c040 	call	a1c04 <_free_r>
   a12dc:	80001115 	stw	zero,68(r16)
   a12e0:	8000030d 	sth	zero,12(r16)
   a12e4:	00a18500 	call	a1850 <__sfp_lock_release>
   a12e8:	9005883a 	mov	r2,r18
   a12ec:	dfc00317 	ldw	ra,12(sp)
   a12f0:	dc800217 	ldw	r18,8(sp)
   a12f4:	dc400117 	ldw	r17,4(sp)
   a12f8:	dc000017 	ldw	r16,0(sp)
   a12fc:	dec00404 	addi	sp,sp,16
   a1300:	f800283a 	ret
   a1304:	00a18500 	call	a1850 <__sfp_lock_release>
   a1308:	0025883a 	mov	r18,zero
   a130c:	9005883a 	mov	r2,r18
   a1310:	dfc00317 	ldw	ra,12(sp)
   a1314:	dc800217 	ldw	r18,8(sp)
   a1318:	dc400117 	ldw	r17,4(sp)
   a131c:	dc000017 	ldw	r16,0(sp)
   a1320:	dec00404 	addi	sp,sp,16
   a1324:	f800283a 	ret
   a1328:	0025883a 	mov	r18,zero
   a132c:	9005883a 	mov	r2,r18
   a1330:	dfc00317 	ldw	ra,12(sp)
   a1334:	dc800217 	ldw	r18,8(sp)
   a1338:	dc400117 	ldw	r17,4(sp)
   a133c:	dc000017 	ldw	r16,0(sp)
   a1340:	dec00404 	addi	sp,sp,16
   a1344:	f800283a 	ret
   a1348:	8809883a 	mov	r4,r17
   a134c:	00a16440 	call	a1644 <__sinit>
   a1350:	8080030f 	ldh	r2,12(r16)
   a1354:	103fc61e 	bne	r2,zero,a1270 <_fclose_r+0x38>
   a1358:	003fea06 	br	a1304 <_fclose_r+0xcc>
   a135c:	81400417 	ldw	r5,16(r16)
   a1360:	8809883a 	mov	r4,r17
   a1364:	00a1c040 	call	a1c04 <_free_r>
   a1368:	003fd106 	br	a12b0 <_fclose_r+0x78>
   a136c:	04bfffc4 	movi	r18,-1
   a1370:	003fc906 	br	a1298 <_fclose_r+0x60>

000a1374 <fclose>:
   a1374:	008002f4 	movhi	r2,11
   a1378:	1082a904 	addi	r2,r2,2724
   a137c:	200b883a 	mov	r5,r4
   a1380:	11000017 	ldw	r4,0(r2)
   a1384:	00a12381 	jmpi	a1238 <_fclose_r>

000a1388 <_fflush_r>:
   a1388:	defffb04 	addi	sp,sp,-20
   a138c:	dcc00315 	stw	r19,12(sp)
   a1390:	dc400115 	stw	r17,4(sp)
   a1394:	dfc00415 	stw	ra,16(sp)
   a1398:	dc800215 	stw	r18,8(sp)
   a139c:	dc000015 	stw	r16,0(sp)
   a13a0:	2027883a 	mov	r19,r4
   a13a4:	2823883a 	mov	r17,r5
   a13a8:	20000226 	beq	r4,zero,a13b4 <_fflush_r+0x2c>
   a13ac:	20800e17 	ldw	r2,56(r4)
   a13b0:	10005726 	beq	r2,zero,a1510 <_fflush_r+0x188>
   a13b4:	8880030b 	ldhu	r2,12(r17)
   a13b8:	10c0020c 	andi	r3,r2,8
   a13bc:	18ffffcc 	andi	r3,r3,65535
   a13c0:	18e0001c 	xori	r3,r3,32768
   a13c4:	18e00004 	addi	r3,r3,-32768
   a13c8:	1800311e 	bne	r3,zero,a1490 <_fflush_r+0x108>
   a13cc:	89000117 	ldw	r4,4(r17)
   a13d0:	10c20014 	ori	r3,r2,2048
   a13d4:	88c0030d 	sth	r3,12(r17)
   a13d8:	180b883a 	mov	r5,r3
   a13dc:	0100520e 	bge	zero,r4,a1528 <_fflush_r+0x1a0>
   a13e0:	88c00a17 	ldw	r3,40(r17)
   a13e4:	18002226 	beq	r3,zero,a1470 <_fflush_r+0xe8>
   a13e8:	1084000c 	andi	r2,r2,4096
   a13ec:	10bfffcc 	andi	r2,r2,65535
   a13f0:	10a0001c 	xori	r2,r2,32768
   a13f4:	10a00004 	addi	r2,r2,-32768
   a13f8:	10004e26 	beq	r2,zero,a1534 <_fflush_r+0x1ac>
   a13fc:	8c001417 	ldw	r16,80(r17)
   a1400:	2940010c 	andi	r5,r5,4
   a1404:	297fffcc 	andi	r5,r5,65535
   a1408:	2960001c 	xori	r5,r5,32768
   a140c:	29600004 	addi	r5,r5,-32768
   a1410:	28000626 	beq	r5,zero,a142c <_fflush_r+0xa4>
   a1414:	89000117 	ldw	r4,4(r17)
   a1418:	88800c17 	ldw	r2,48(r17)
   a141c:	8121c83a 	sub	r16,r16,r4
   a1420:	10000226 	beq	r2,zero,a142c <_fflush_r+0xa4>
   a1424:	88800f17 	ldw	r2,60(r17)
   a1428:	80a1c83a 	sub	r16,r16,r2
   a142c:	89400717 	ldw	r5,28(r17)
   a1430:	9809883a 	mov	r4,r19
   a1434:	800d883a 	mov	r6,r16
   a1438:	000f883a 	mov	r7,zero
   a143c:	183ee83a 	callr	r3
   a1440:	8080281e 	bne	r16,r2,a14e4 <_fflush_r+0x15c>
   a1444:	8880030b 	ldhu	r2,12(r17)
   a1448:	88c00417 	ldw	r3,16(r17)
   a144c:	88000115 	stw	zero,4(r17)
   a1450:	113dffcc 	andi	r4,r2,63487
   a1454:	1084000c 	andi	r2,r2,4096
   a1458:	10bfffcc 	andi	r2,r2,65535
   a145c:	10a0001c 	xori	r2,r2,32768
   a1460:	8900030d 	sth	r4,12(r17)
   a1464:	88c00015 	stw	r3,0(r17)
   a1468:	10a00004 	addi	r2,r2,-32768
   a146c:	10002c1e 	bne	r2,zero,a1520 <_fflush_r+0x198>
   a1470:	0005883a 	mov	r2,zero
   a1474:	dfc00417 	ldw	ra,16(sp)
   a1478:	dcc00317 	ldw	r19,12(sp)
   a147c:	dc800217 	ldw	r18,8(sp)
   a1480:	dc400117 	ldw	r17,4(sp)
   a1484:	dc000017 	ldw	r16,0(sp)
   a1488:	dec00504 	addi	sp,sp,20
   a148c:	f800283a 	ret
   a1490:	8c800417 	ldw	r18,16(r17)
   a1494:	903ff626 	beq	r18,zero,a1470 <_fflush_r+0xe8>
   a1498:	8c000017 	ldw	r16,0(r17)
   a149c:	108000cc 	andi	r2,r2,3
   a14a0:	8c800015 	stw	r18,0(r17)
   a14a4:	84a1c83a 	sub	r16,r16,r18
   a14a8:	10001b1e 	bne	r2,zero,a1518 <_fflush_r+0x190>
   a14ac:	88800517 	ldw	r2,20(r17)
   a14b0:	88800215 	stw	r2,8(r17)
   a14b4:	04000316 	blt	zero,r16,a14c4 <_fflush_r+0x13c>
   a14b8:	003fed06 	br	a1470 <_fflush_r+0xe8>
   a14bc:	90a5883a 	add	r18,r18,r2
   a14c0:	043feb0e 	bge	zero,r16,a1470 <_fflush_r+0xe8>
   a14c4:	88800917 	ldw	r2,36(r17)
   a14c8:	89400717 	ldw	r5,28(r17)
   a14cc:	800f883a 	mov	r7,r16
   a14d0:	900d883a 	mov	r6,r18
   a14d4:	9809883a 	mov	r4,r19
   a14d8:	103ee83a 	callr	r2
   a14dc:	80a1c83a 	sub	r16,r16,r2
   a14e0:	00bff616 	blt	zero,r2,a14bc <_fflush_r+0x134>
   a14e4:	88c0030b 	ldhu	r3,12(r17)
   a14e8:	00bfffc4 	movi	r2,-1
   a14ec:	18c01014 	ori	r3,r3,64
   a14f0:	88c0030d 	sth	r3,12(r17)
   a14f4:	dfc00417 	ldw	ra,16(sp)
   a14f8:	dcc00317 	ldw	r19,12(sp)
   a14fc:	dc800217 	ldw	r18,8(sp)
   a1500:	dc400117 	ldw	r17,4(sp)
   a1504:	dc000017 	ldw	r16,0(sp)
   a1508:	dec00504 	addi	sp,sp,20
   a150c:	f800283a 	ret
   a1510:	00a16440 	call	a1644 <__sinit>
   a1514:	003fa706 	br	a13b4 <_fflush_r+0x2c>
   a1518:	0005883a 	mov	r2,zero
   a151c:	003fe406 	br	a14b0 <_fflush_r+0x128>
   a1520:	8c001415 	stw	r16,80(r17)
   a1524:	003fd206 	br	a1470 <_fflush_r+0xe8>
   a1528:	88c00f17 	ldw	r3,60(r17)
   a152c:	00ffac16 	blt	zero,r3,a13e0 <_fflush_r+0x58>
   a1530:	003fcf06 	br	a1470 <_fflush_r+0xe8>
   a1534:	89400717 	ldw	r5,28(r17)
   a1538:	9809883a 	mov	r4,r19
   a153c:	000d883a 	mov	r6,zero
   a1540:	01c00044 	movi	r7,1
   a1544:	183ee83a 	callr	r3
   a1548:	1021883a 	mov	r16,r2
   a154c:	00bfffc4 	movi	r2,-1
   a1550:	80800326 	beq	r16,r2,a1560 <_fflush_r+0x1d8>
   a1554:	8940030b 	ldhu	r5,12(r17)
   a1558:	88c00a17 	ldw	r3,40(r17)
   a155c:	003fa806 	br	a1400 <_fflush_r+0x78>
   a1560:	98c00017 	ldw	r3,0(r19)
   a1564:	00800744 	movi	r2,29
   a1568:	18bfde1e 	bne	r3,r2,a14e4 <_fflush_r+0x15c>
   a156c:	003fc006 	br	a1470 <_fflush_r+0xe8>

000a1570 <fflush>:
   a1570:	200b883a 	mov	r5,r4
   a1574:	20000426 	beq	r4,zero,a1588 <fflush+0x18>
   a1578:	008002f4 	movhi	r2,11
   a157c:	1082a904 	addi	r2,r2,2724
   a1580:	11000017 	ldw	r4,0(r2)
   a1584:	00a13881 	jmpi	a1388 <_fflush_r>
   a1588:	008002f4 	movhi	r2,11
   a158c:	1082a804 	addi	r2,r2,2720
   a1590:	11000017 	ldw	r4,0(r2)
   a1594:	014002b4 	movhi	r5,10
   a1598:	2944e204 	addi	r5,r5,5000
   a159c:	00a247c1 	jmpi	a247c <_fwalk_reent>

000a15a0 <__fp_lock>:
   a15a0:	0005883a 	mov	r2,zero
   a15a4:	f800283a 	ret

000a15a8 <__fp_unlock>:
   a15a8:	0005883a 	mov	r2,zero
   a15ac:	f800283a 	ret

000a15b0 <_cleanup_r>:
   a15b0:	014002b4 	movhi	r5,10
   a15b4:	2944dd04 	addi	r5,r5,4980
   a15b8:	00a23d41 	jmpi	a23d4 <_fwalk>

000a15bc <__sfmoreglue>:
   a15bc:	defffc04 	addi	sp,sp,-16
   a15c0:	dc800215 	stw	r18,8(sp)
   a15c4:	2825883a 	mov	r18,r5
   a15c8:	dc000015 	stw	r16,0(sp)
   a15cc:	01401704 	movi	r5,92
   a15d0:	2021883a 	mov	r16,r4
   a15d4:	9009883a 	mov	r4,r18
   a15d8:	dfc00315 	stw	ra,12(sp)
   a15dc:	dc400115 	stw	r17,4(sp)
   a15e0:	00a118c0 	call	a118c <__mulsi3>
   a15e4:	8009883a 	mov	r4,r16
   a15e8:	11400304 	addi	r5,r2,12
   a15ec:	1023883a 	mov	r17,r2
   a15f0:	00a26dc0 	call	a26dc <_malloc_r>
   a15f4:	1021883a 	mov	r16,r2
   a15f8:	10000726 	beq	r2,zero,a1618 <__sfmoreglue+0x5c>
   a15fc:	11000304 	addi	r4,r2,12
   a1600:	10000015 	stw	zero,0(r2)
   a1604:	14800115 	stw	r18,4(r2)
   a1608:	11000215 	stw	r4,8(r2)
   a160c:	000b883a 	mov	r5,zero
   a1610:	880d883a 	mov	r6,r17
   a1614:	00a2e600 	call	a2e60 <memset>
   a1618:	8005883a 	mov	r2,r16
   a161c:	dfc00317 	ldw	ra,12(sp)
   a1620:	dc800217 	ldw	r18,8(sp)
   a1624:	dc400117 	ldw	r17,4(sp)
   a1628:	dc000017 	ldw	r16,0(sp)
   a162c:	dec00404 	addi	sp,sp,16
   a1630:	f800283a 	ret

000a1634 <_cleanup>:
   a1634:	008002f4 	movhi	r2,11
   a1638:	1082a804 	addi	r2,r2,2720
   a163c:	11000017 	ldw	r4,0(r2)
   a1640:	00a15b01 	jmpi	a15b0 <_cleanup_r>

000a1644 <__sinit>:
   a1644:	20800e17 	ldw	r2,56(r4)
   a1648:	1000401e 	bne	r2,zero,a174c <__sinit+0x108>
   a164c:	21400117 	ldw	r5,4(r4)
   a1650:	018002b4 	movhi	r6,10
   a1654:	31856c04 	addi	r6,r6,5552
   a1658:	20c00217 	ldw	r3,8(r4)
   a165c:	21800f15 	stw	r6,60(r4)
   a1660:	2080bb04 	addi	r2,r4,748
   a1664:	02400044 	movi	r9,1
   a1668:	018000c4 	movi	r6,3
   a166c:	2180b915 	stw	r6,740(r4)
   a1670:	2080ba15 	stw	r2,744(r4)
   a1674:	22400e15 	stw	r9,56(r4)
   a1678:	20800317 	ldw	r2,12(r4)
   a167c:	2000b815 	stw	zero,736(r4)
   a1680:	020002b4 	movhi	r8,10
   a1684:	420d3004 	addi	r8,r8,13504
   a1688:	01c002b4 	movhi	r7,10
   a168c:	39cd4504 	addi	r7,r7,13588
   a1690:	018002b4 	movhi	r6,10
   a1694:	318d6704 	addi	r6,r6,13724
   a1698:	010002b4 	movhi	r4,10
   a169c:	210d7e04 	addi	r4,r4,13816
   a16a0:	02800104 	movi	r10,4
   a16a4:	28000015 	stw	zero,0(r5)
   a16a8:	28000115 	stw	zero,4(r5)
   a16ac:	28000215 	stw	zero,8(r5)
   a16b0:	2a80030d 	sth	r10,12(r5)
   a16b4:	2800038d 	sth	zero,14(r5)
   a16b8:	28000415 	stw	zero,16(r5)
   a16bc:	28000515 	stw	zero,20(r5)
   a16c0:	28000615 	stw	zero,24(r5)
   a16c4:	29400715 	stw	r5,28(r5)
   a16c8:	2a000815 	stw	r8,32(r5)
   a16cc:	29c00915 	stw	r7,36(r5)
   a16d0:	29800a15 	stw	r6,40(r5)
   a16d4:	29000b15 	stw	r4,44(r5)
   a16d8:	01400284 	movi	r5,10
   a16dc:	18000015 	stw	zero,0(r3)
   a16e0:	18000115 	stw	zero,4(r3)
   a16e4:	18000215 	stw	zero,8(r3)
   a16e8:	1940030d 	sth	r5,12(r3)
   a16ec:	1a40038d 	sth	r9,14(r3)
   a16f0:	18000415 	stw	zero,16(r3)
   a16f4:	18000515 	stw	zero,20(r3)
   a16f8:	18000615 	stw	zero,24(r3)
   a16fc:	18c00715 	stw	r3,28(r3)
   a1700:	1a000815 	stw	r8,32(r3)
   a1704:	19c00915 	stw	r7,36(r3)
   a1708:	19800a15 	stw	r6,40(r3)
   a170c:	19000b15 	stw	r4,44(r3)
   a1710:	00c00484 	movi	r3,18
   a1714:	10c0030d 	sth	r3,12(r2)
   a1718:	00c00084 	movi	r3,2
   a171c:	10000015 	stw	zero,0(r2)
   a1720:	10000115 	stw	zero,4(r2)
   a1724:	10000215 	stw	zero,8(r2)
   a1728:	10c0038d 	sth	r3,14(r2)
   a172c:	10000415 	stw	zero,16(r2)
   a1730:	10000515 	stw	zero,20(r2)
   a1734:	10000615 	stw	zero,24(r2)
   a1738:	10800715 	stw	r2,28(r2)
   a173c:	12000815 	stw	r8,32(r2)
   a1740:	11c00915 	stw	r7,36(r2)
   a1744:	11800a15 	stw	r6,40(r2)
   a1748:	11000b15 	stw	r4,44(r2)
   a174c:	f800283a 	ret

000a1750 <__sfp>:
   a1750:	defffc04 	addi	sp,sp,-16
   a1754:	008002f4 	movhi	r2,11
   a1758:	1082a804 	addi	r2,r2,2720
   a175c:	dc400115 	stw	r17,4(sp)
   a1760:	14400017 	ldw	r17,0(r2)
   a1764:	dc800215 	stw	r18,8(sp)
   a1768:	dfc00315 	stw	ra,12(sp)
   a176c:	88800e17 	ldw	r2,56(r17)
   a1770:	dc000015 	stw	r16,0(sp)
   a1774:	2025883a 	mov	r18,r4
   a1778:	10002826 	beq	r2,zero,a181c <__sfp+0xcc>
   a177c:	8c40b804 	addi	r17,r17,736
   a1780:	043fffc4 	movi	r16,-1
   a1784:	89400117 	ldw	r5,4(r17)
   a1788:	88800217 	ldw	r2,8(r17)
   a178c:	297fffc4 	addi	r5,r5,-1
   a1790:	28000a16 	blt	r5,zero,a17bc <__sfp+0x6c>
   a1794:	10c0030f 	ldh	r3,12(r2)
   a1798:	18000c26 	beq	r3,zero,a17cc <__sfp+0x7c>
   a179c:	10c01a04 	addi	r3,r2,104
   a17a0:	00000206 	br	a17ac <__sfp+0x5c>
   a17a4:	19bfe90f 	ldh	r6,-92(r3)
   a17a8:	30000826 	beq	r6,zero,a17cc <__sfp+0x7c>
   a17ac:	297fffc4 	addi	r5,r5,-1
   a17b0:	18bffd04 	addi	r2,r3,-12
   a17b4:	18c01704 	addi	r3,r3,92
   a17b8:	2c3ffa1e 	bne	r5,r16,a17a4 <__sfp+0x54>
   a17bc:	88800017 	ldw	r2,0(r17)
   a17c0:	10001926 	beq	r2,zero,a1828 <__sfp+0xd8>
   a17c4:	1023883a 	mov	r17,r2
   a17c8:	003fee06 	br	a1784 <__sfp+0x34>
   a17cc:	00ffffc4 	movi	r3,-1
   a17d0:	10c0038d 	sth	r3,14(r2)
   a17d4:	00c00044 	movi	r3,1
   a17d8:	10c0030d 	sth	r3,12(r2)
   a17dc:	10000015 	stw	zero,0(r2)
   a17e0:	10000215 	stw	zero,8(r2)
   a17e4:	10000115 	stw	zero,4(r2)
   a17e8:	10000415 	stw	zero,16(r2)
   a17ec:	10000515 	stw	zero,20(r2)
   a17f0:	10000615 	stw	zero,24(r2)
   a17f4:	10000c15 	stw	zero,48(r2)
   a17f8:	10000d15 	stw	zero,52(r2)
   a17fc:	10001115 	stw	zero,68(r2)
   a1800:	10001215 	stw	zero,72(r2)
   a1804:	dfc00317 	ldw	ra,12(sp)
   a1808:	dc800217 	ldw	r18,8(sp)
   a180c:	dc400117 	ldw	r17,4(sp)
   a1810:	dc000017 	ldw	r16,0(sp)
   a1814:	dec00404 	addi	sp,sp,16
   a1818:	f800283a 	ret
   a181c:	8809883a 	mov	r4,r17
   a1820:	00a16440 	call	a1644 <__sinit>
   a1824:	003fd506 	br	a177c <__sfp+0x2c>
   a1828:	9009883a 	mov	r4,r18
   a182c:	01400104 	movi	r5,4
   a1830:	00a15bc0 	call	a15bc <__sfmoreglue>
   a1834:	88800015 	stw	r2,0(r17)
   a1838:	103fe21e 	bne	r2,zero,a17c4 <__sfp+0x74>
   a183c:	00800304 	movi	r2,12
   a1840:	90800015 	stw	r2,0(r18)
   a1844:	0005883a 	mov	r2,zero
   a1848:	003fee06 	br	a1804 <__sfp+0xb4>

000a184c <__sfp_lock_acquire>:
   a184c:	f800283a 	ret

000a1850 <__sfp_lock_release>:
   a1850:	f800283a 	ret

000a1854 <__sinit_lock_acquire>:
   a1854:	f800283a 	ret

000a1858 <__sinit_lock_release>:
   a1858:	f800283a 	ret

000a185c <__fp_lock_all>:
   a185c:	008002f4 	movhi	r2,11
   a1860:	1082a904 	addi	r2,r2,2724
   a1864:	11000017 	ldw	r4,0(r2)
   a1868:	014002b4 	movhi	r5,10
   a186c:	29456804 	addi	r5,r5,5536
   a1870:	00a23d41 	jmpi	a23d4 <_fwalk>

000a1874 <__fp_unlock_all>:
   a1874:	008002f4 	movhi	r2,11
   a1878:	1082a904 	addi	r2,r2,2724
   a187c:	11000017 	ldw	r4,0(r2)
   a1880:	014002b4 	movhi	r5,10
   a1884:	29456a04 	addi	r5,r5,5544
   a1888:	00a23d41 	jmpi	a23d4 <_fwalk>

000a188c <_fopen_r>:
   a188c:	defffa04 	addi	sp,sp,-24
   a1890:	dcc00415 	stw	r19,16(sp)
   a1894:	2827883a 	mov	r19,r5
   a1898:	300b883a 	mov	r5,r6
   a189c:	d80d883a 	mov	r6,sp
   a18a0:	dc800315 	stw	r18,12(sp)
   a18a4:	dc400215 	stw	r17,8(sp)
   a18a8:	dfc00515 	stw	ra,20(sp)
   a18ac:	dc000115 	stw	r16,4(sp)
   a18b0:	2025883a 	mov	r18,r4
   a18b4:	00a72fc0 	call	a72fc <__sflags>
   a18b8:	1023883a 	mov	r17,r2
   a18bc:	10002926 	beq	r2,zero,a1964 <_fopen_r+0xd8>
   a18c0:	9009883a 	mov	r4,r18
   a18c4:	00a17500 	call	a1750 <__sfp>
   a18c8:	1021883a 	mov	r16,r2
   a18cc:	10002526 	beq	r2,zero,a1964 <_fopen_r+0xd8>
   a18d0:	d9800017 	ldw	r6,0(sp)
   a18d4:	9009883a 	mov	r4,r18
   a18d8:	980b883a 	mov	r5,r19
   a18dc:	01c06d84 	movi	r7,438
   a18e0:	00a2f3c0 	call	a2f3c <_open_r>
   a18e4:	10001c16 	blt	r2,zero,a1958 <_fopen_r+0xcc>
   a18e8:	8080038d 	sth	r2,14(r16)
   a18ec:	008002b4 	movhi	r2,10
   a18f0:	108d3004 	addi	r2,r2,13504
   a18f4:	80800815 	stw	r2,32(r16)
   a18f8:	008002b4 	movhi	r2,10
   a18fc:	108d4504 	addi	r2,r2,13588
   a1900:	80800915 	stw	r2,36(r16)
   a1904:	008002b4 	movhi	r2,10
   a1908:	108d6704 	addi	r2,r2,13724
   a190c:	88c0400c 	andi	r3,r17,256
   a1910:	80800a15 	stw	r2,40(r16)
   a1914:	008002b4 	movhi	r2,10
   a1918:	108d7e04 	addi	r2,r2,13816
   a191c:	80800b15 	stw	r2,44(r16)
   a1920:	18bfffcc 	andi	r2,r3,65535
   a1924:	10a0001c 	xori	r2,r2,32768
   a1928:	8440030d 	sth	r17,12(r16)
   a192c:	84000715 	stw	r16,28(r16)
   a1930:	10a00004 	addi	r2,r2,-32768
   a1934:	1000141e 	bne	r2,zero,a1988 <_fopen_r+0xfc>
   a1938:	8005883a 	mov	r2,r16
   a193c:	dfc00517 	ldw	ra,20(sp)
   a1940:	dcc00417 	ldw	r19,16(sp)
   a1944:	dc800317 	ldw	r18,12(sp)
   a1948:	dc400217 	ldw	r17,8(sp)
   a194c:	dc000117 	ldw	r16,4(sp)
   a1950:	dec00604 	addi	sp,sp,24
   a1954:	f800283a 	ret
   a1958:	00a184c0 	call	a184c <__sfp_lock_acquire>
   a195c:	8000030d 	sth	zero,12(r16)
   a1960:	00a18500 	call	a1850 <__sfp_lock_release>
   a1964:	0021883a 	mov	r16,zero
   a1968:	8005883a 	mov	r2,r16
   a196c:	dfc00517 	ldw	ra,20(sp)
   a1970:	dcc00417 	ldw	r19,16(sp)
   a1974:	dc800317 	ldw	r18,12(sp)
   a1978:	dc400217 	ldw	r17,8(sp)
   a197c:	dc000117 	ldw	r16,4(sp)
   a1980:	dec00604 	addi	sp,sp,24
   a1984:	f800283a 	ret
   a1988:	9009883a 	mov	r4,r18
   a198c:	800b883a 	mov	r5,r16
   a1990:	000d883a 	mov	r6,zero
   a1994:	01c00084 	movi	r7,2
   a1998:	00a1ed40 	call	a1ed4 <_fseek_r>
   a199c:	8005883a 	mov	r2,r16
   a19a0:	dfc00517 	ldw	ra,20(sp)
   a19a4:	dcc00417 	ldw	r19,16(sp)
   a19a8:	dc800317 	ldw	r18,12(sp)
   a19ac:	dc400217 	ldw	r17,8(sp)
   a19b0:	dc000117 	ldw	r16,4(sp)
   a19b4:	dec00604 	addi	sp,sp,24
   a19b8:	f800283a 	ret

000a19bc <fopen>:
   a19bc:	00c002f4 	movhi	r3,11
   a19c0:	18c2a904 	addi	r3,r3,2724
   a19c4:	2005883a 	mov	r2,r4
   a19c8:	19000017 	ldw	r4,0(r3)
   a19cc:	280d883a 	mov	r6,r5
   a19d0:	100b883a 	mov	r5,r2
   a19d4:	00a188c1 	jmpi	a188c <_fopen_r>

000a19d8 <_fprintf_r>:
   a19d8:	defffe04 	addi	sp,sp,-8
   a19dc:	2809883a 	mov	r4,r5
   a19e0:	dfc00015 	stw	ra,0(sp)
   a19e4:	d9c00115 	stw	r7,4(sp)
   a19e8:	300b883a 	mov	r5,r6
   a19ec:	d9800104 	addi	r6,sp,4
   a19f0:	00a55440 	call	a5544 <__vfprintf_internal>
   a19f4:	dfc00017 	ldw	ra,0(sp)
   a19f8:	dec00204 	addi	sp,sp,8
   a19fc:	f800283a 	ret

000a1a00 <fprintf>:
   a1a00:	defffd04 	addi	sp,sp,-12
   a1a04:	dfc00015 	stw	ra,0(sp)
   a1a08:	d9800115 	stw	r6,4(sp)
   a1a0c:	d9c00215 	stw	r7,8(sp)
   a1a10:	d9800104 	addi	r6,sp,4
   a1a14:	00a55440 	call	a5544 <__vfprintf_internal>
   a1a18:	dfc00017 	ldw	ra,0(sp)
   a1a1c:	dec00304 	addi	sp,sp,12
   a1a20:	f800283a 	ret

000a1a24 <_fputc_r>:
   a1a24:	defffc04 	addi	sp,sp,-16
   a1a28:	dc000215 	stw	r16,8(sp)
   a1a2c:	dfc00315 	stw	ra,12(sp)
   a1a30:	2021883a 	mov	r16,r4
   a1a34:	20000726 	beq	r4,zero,a1a54 <_fputc_r+0x30>
   a1a38:	20800e17 	ldw	r2,56(r4)
   a1a3c:	1000051e 	bne	r2,zero,a1a54 <_fputc_r+0x30>
   a1a40:	d9400015 	stw	r5,0(sp)
   a1a44:	d9800115 	stw	r6,4(sp)
   a1a48:	00a16440 	call	a1644 <__sinit>
   a1a4c:	d9800117 	ldw	r6,4(sp)
   a1a50:	d9400017 	ldw	r5,0(sp)
   a1a54:	8009883a 	mov	r4,r16
   a1a58:	dfc00317 	ldw	ra,12(sp)
   a1a5c:	dc000217 	ldw	r16,8(sp)
   a1a60:	dec00404 	addi	sp,sp,16
   a1a64:	00a30101 	jmpi	a3010 <_putc_r>

000a1a68 <fputc>:
   a1a68:	defffc04 	addi	sp,sp,-16
   a1a6c:	dc000115 	stw	r16,4(sp)
   a1a70:	040002f4 	movhi	r16,11
   a1a74:	8402a904 	addi	r16,r16,2724
   a1a78:	80800017 	ldw	r2,0(r16)
   a1a7c:	dc400215 	stw	r17,8(sp)
   a1a80:	dfc00315 	stw	ra,12(sp)
   a1a84:	2023883a 	mov	r17,r4
   a1a88:	280d883a 	mov	r6,r5
   a1a8c:	10000726 	beq	r2,zero,a1aac <fputc+0x44>
   a1a90:	10c00e17 	ldw	r3,56(r2)
   a1a94:	1800051e 	bne	r3,zero,a1aac <fputc+0x44>
   a1a98:	1009883a 	mov	r4,r2
   a1a9c:	d9400015 	stw	r5,0(sp)
   a1aa0:	00a16440 	call	a1644 <__sinit>
   a1aa4:	80800017 	ldw	r2,0(r16)
   a1aa8:	d9800017 	ldw	r6,0(sp)
   a1aac:	1009883a 	mov	r4,r2
   a1ab0:	880b883a 	mov	r5,r17
   a1ab4:	dfc00317 	ldw	ra,12(sp)
   a1ab8:	dc400217 	ldw	r17,8(sp)
   a1abc:	dc000117 	ldw	r16,4(sp)
   a1ac0:	dec00404 	addi	sp,sp,16
   a1ac4:	00a30101 	jmpi	a3010 <_putc_r>

000a1ac8 <_malloc_trim_r>:
   a1ac8:	defffb04 	addi	sp,sp,-20
   a1acc:	dcc00315 	stw	r19,12(sp)
   a1ad0:	dc800215 	stw	r18,8(sp)
   a1ad4:	dc400115 	stw	r17,4(sp)
   a1ad8:	dc000015 	stw	r16,0(sp)
   a1adc:	2827883a 	mov	r19,r5
   a1ae0:	dfc00415 	stw	ra,16(sp)
   a1ae4:	044002f4 	movhi	r17,11
   a1ae8:	8c7d1704 	addi	r17,r17,-2980
   a1aec:	2021883a 	mov	r16,r4
   a1af0:	00abd980 	call	abd98 <__malloc_lock>
   a1af4:	88800217 	ldw	r2,8(r17)
   a1af8:	14800117 	ldw	r18,4(r2)
   a1afc:	00bfff04 	movi	r2,-4
   a1b00:	90a4703a 	and	r18,r18,r2
   a1b04:	9083fbc4 	addi	r2,r18,4079
   a1b08:	14e7c83a 	sub	r19,r2,r19
   a1b0c:	9826d33a 	srli	r19,r19,12
   a1b10:	0083ffc4 	movi	r2,4095
   a1b14:	9cffffc4 	addi	r19,r19,-1
   a1b18:	9826933a 	slli	r19,r19,12
   a1b1c:	14c0060e 	bge	r2,r19,a1b38 <_malloc_trim_r+0x70>
   a1b20:	8009883a 	mov	r4,r16
   a1b24:	000b883a 	mov	r5,zero
   a1b28:	00a345c0 	call	a345c <_sbrk_r>
   a1b2c:	88c00217 	ldw	r3,8(r17)
   a1b30:	1c87883a 	add	r3,r3,r18
   a1b34:	10c00a26 	beq	r2,r3,a1b60 <_malloc_trim_r+0x98>
   a1b38:	8009883a 	mov	r4,r16
   a1b3c:	00abdb80 	call	abdb8 <__malloc_unlock>
   a1b40:	0005883a 	mov	r2,zero
   a1b44:	dfc00417 	ldw	ra,16(sp)
   a1b48:	dcc00317 	ldw	r19,12(sp)
   a1b4c:	dc800217 	ldw	r18,8(sp)
   a1b50:	dc400117 	ldw	r17,4(sp)
   a1b54:	dc000017 	ldw	r16,0(sp)
   a1b58:	dec00504 	addi	sp,sp,20
   a1b5c:	f800283a 	ret
   a1b60:	8009883a 	mov	r4,r16
   a1b64:	04cbc83a 	sub	r5,zero,r19
   a1b68:	00a345c0 	call	a345c <_sbrk_r>
   a1b6c:	00ffffc4 	movi	r3,-1
   a1b70:	10c01326 	beq	r2,r3,a1bc0 <_malloc_trim_r+0xf8>
   a1b74:	008002f4 	movhi	r2,11
   a1b78:	10898c04 	addi	r2,r2,9776
   a1b7c:	11000017 	ldw	r4,0(r2)
   a1b80:	88c00217 	ldw	r3,8(r17)
   a1b84:	94e5c83a 	sub	r18,r18,r19
   a1b88:	94800054 	ori	r18,r18,1
   a1b8c:	24e7c83a 	sub	r19,r4,r19
   a1b90:	1c800115 	stw	r18,4(r3)
   a1b94:	8009883a 	mov	r4,r16
   a1b98:	14c00015 	stw	r19,0(r2)
   a1b9c:	00abdb80 	call	abdb8 <__malloc_unlock>
   a1ba0:	00800044 	movi	r2,1
   a1ba4:	dfc00417 	ldw	ra,16(sp)
   a1ba8:	dcc00317 	ldw	r19,12(sp)
   a1bac:	dc800217 	ldw	r18,8(sp)
   a1bb0:	dc400117 	ldw	r17,4(sp)
   a1bb4:	dc000017 	ldw	r16,0(sp)
   a1bb8:	dec00504 	addi	sp,sp,20
   a1bbc:	f800283a 	ret
   a1bc0:	8009883a 	mov	r4,r16
   a1bc4:	000b883a 	mov	r5,zero
   a1bc8:	00a345c0 	call	a345c <_sbrk_r>
   a1bcc:	88c00217 	ldw	r3,8(r17)
   a1bd0:	014003c4 	movi	r5,15
   a1bd4:	10c9c83a 	sub	r4,r2,r3
   a1bd8:	293fd70e 	bge	r5,r4,a1b38 <_malloc_trim_r+0x70>
   a1bdc:	014002f4 	movhi	r5,11
   a1be0:	2942aa04 	addi	r5,r5,2728
   a1be4:	29400017 	ldw	r5,0(r5)
   a1be8:	21000054 	ori	r4,r4,1
   a1bec:	19000115 	stw	r4,4(r3)
   a1bf0:	1145c83a 	sub	r2,r2,r5
   a1bf4:	014002f4 	movhi	r5,11
   a1bf8:	29498c04 	addi	r5,r5,9776
   a1bfc:	28800015 	stw	r2,0(r5)
   a1c00:	003fcd06 	br	a1b38 <_malloc_trim_r+0x70>

000a1c04 <_free_r>:
   a1c04:	defffd04 	addi	sp,sp,-12
   a1c08:	dc400115 	stw	r17,4(sp)
   a1c0c:	dc000015 	stw	r16,0(sp)
   a1c10:	dfc00215 	stw	ra,8(sp)
   a1c14:	2821883a 	mov	r16,r5
   a1c18:	2023883a 	mov	r17,r4
   a1c1c:	28004b26 	beq	r5,zero,a1d4c <_free_r+0x148>
   a1c20:	00abd980 	call	abd98 <__malloc_lock>
   a1c24:	823fff17 	ldw	r8,-4(r16)
   a1c28:	00bfff84 	movi	r2,-2
   a1c2c:	81bffe04 	addi	r6,r16,-8
   a1c30:	4084703a 	and	r2,r8,r2
   a1c34:	3087883a 	add	r3,r6,r2
   a1c38:	014002f4 	movhi	r5,11
   a1c3c:	297d1704 	addi	r5,r5,-2980
   a1c40:	1a400117 	ldw	r9,4(r3)
   a1c44:	29000217 	ldw	r4,8(r5)
   a1c48:	01ffff04 	movi	r7,-4
   a1c4c:	49ce703a 	and	r7,r9,r7
   a1c50:	20c06526 	beq	r4,r3,a1de8 <_free_r+0x1e4>
   a1c54:	19c00115 	stw	r7,4(r3)
   a1c58:	4200004c 	andi	r8,r8,1
   a1c5c:	40003026 	beq	r8,zero,a1d20 <_free_r+0x11c>
   a1c60:	0009883a 	mov	r4,zero
   a1c64:	19d1883a 	add	r8,r3,r7
   a1c68:	42000117 	ldw	r8,4(r8)
   a1c6c:	4200004c 	andi	r8,r8,1
   a1c70:	4000061e 	bne	r8,zero,a1c8c <_free_r+0x88>
   a1c74:	11c5883a 	add	r2,r2,r7
   a1c78:	19c00217 	ldw	r7,8(r3)
   a1c7c:	20004e26 	beq	r4,zero,a1db8 <_free_r+0x1b4>
   a1c80:	18c00317 	ldw	r3,12(r3)
   a1c84:	38c00315 	stw	r3,12(r7)
   a1c88:	19c00215 	stw	r7,8(r3)
   a1c8c:	11c00054 	ori	r7,r2,1
   a1c90:	3087883a 	add	r3,r6,r2
   a1c94:	31c00115 	stw	r7,4(r6)
   a1c98:	18800015 	stw	r2,0(r3)
   a1c9c:	20001a1e 	bne	r4,zero,a1d08 <_free_r+0x104>
   a1ca0:	00c07fc4 	movi	r3,511
   a1ca4:	18802e2e 	bgeu	r3,r2,a1d60 <_free_r+0x15c>
   a1ca8:	1006d27a 	srli	r3,r2,9
   a1cac:	01000104 	movi	r4,4
   a1cb0:	20c06636 	bltu	r4,r3,a1e4c <_free_r+0x248>
   a1cb4:	1008d1ba 	srli	r4,r2,6
   a1cb8:	21000e04 	addi	r4,r4,56
   a1cbc:	210f883a 	add	r7,r4,r4
   a1cc0:	39cf883a 	add	r7,r7,r7
   a1cc4:	39cf883a 	add	r7,r7,r7
   a1cc8:	29cf883a 	add	r7,r5,r7
   a1ccc:	38c00217 	ldw	r3,8(r7)
   a1cd0:	014002f4 	movhi	r5,11
   a1cd4:	297d1704 	addi	r5,r5,-2980
   a1cd8:	19c06126 	beq	r3,r7,a1e60 <_free_r+0x25c>
   a1cdc:	013fff04 	movi	r4,-4
   a1ce0:	19400117 	ldw	r5,4(r3)
   a1ce4:	290a703a 	and	r5,r5,r4
   a1ce8:	1140022e 	bgeu	r2,r5,a1cf4 <_free_r+0xf0>
   a1cec:	18c00217 	ldw	r3,8(r3)
   a1cf0:	38fffb1e 	bne	r7,r3,a1ce0 <_free_r+0xdc>
   a1cf4:	18800317 	ldw	r2,12(r3)
   a1cf8:	30800315 	stw	r2,12(r6)
   a1cfc:	30c00215 	stw	r3,8(r6)
   a1d00:	11800215 	stw	r6,8(r2)
   a1d04:	19800315 	stw	r6,12(r3)
   a1d08:	8809883a 	mov	r4,r17
   a1d0c:	dfc00217 	ldw	ra,8(sp)
   a1d10:	dc400117 	ldw	r17,4(sp)
   a1d14:	dc000017 	ldw	r16,0(sp)
   a1d18:	dec00304 	addi	sp,sp,12
   a1d1c:	00abdb81 	jmpi	abdb8 <__malloc_unlock>
   a1d20:	813ffe17 	ldw	r4,-8(r16)
   a1d24:	2a400204 	addi	r9,r5,8
   a1d28:	310dc83a 	sub	r6,r6,r4
   a1d2c:	32000217 	ldw	r8,8(r6)
   a1d30:	1105883a 	add	r2,r2,r4
   a1d34:	42404326 	beq	r8,r9,a1e44 <_free_r+0x240>
   a1d38:	32400317 	ldw	r9,12(r6)
   a1d3c:	0009883a 	mov	r4,zero
   a1d40:	42400315 	stw	r9,12(r8)
   a1d44:	4a000215 	stw	r8,8(r9)
   a1d48:	003fc606 	br	a1c64 <_free_r+0x60>
   a1d4c:	dfc00217 	ldw	ra,8(sp)
   a1d50:	dc400117 	ldw	r17,4(sp)
   a1d54:	dc000017 	ldw	r16,0(sp)
   a1d58:	dec00304 	addi	sp,sp,12
   a1d5c:	f800283a 	ret
   a1d60:	1004d0fa 	srli	r2,r2,3
   a1d64:	02000044 	movi	r8,1
   a1d68:	29c00117 	ldw	r7,4(r5)
   a1d6c:	1087883a 	add	r3,r2,r2
   a1d70:	18c7883a 	add	r3,r3,r3
   a1d74:	1005d0ba 	srai	r2,r2,2
   a1d78:	18c7883a 	add	r3,r3,r3
   a1d7c:	28c7883a 	add	r3,r5,r3
   a1d80:	19000217 	ldw	r4,8(r3)
   a1d84:	4084983a 	sll	r2,r8,r2
   a1d88:	30c00315 	stw	r3,12(r6)
   a1d8c:	31000215 	stw	r4,8(r6)
   a1d90:	11c4b03a 	or	r2,r2,r7
   a1d94:	21800315 	stw	r6,12(r4)
   a1d98:	8809883a 	mov	r4,r17
   a1d9c:	28800115 	stw	r2,4(r5)
   a1da0:	19800215 	stw	r6,8(r3)
   a1da4:	dfc00217 	ldw	ra,8(sp)
   a1da8:	dc400117 	ldw	r17,4(sp)
   a1dac:	dc000017 	ldw	r16,0(sp)
   a1db0:	dec00304 	addi	sp,sp,12
   a1db4:	00abdb81 	jmpi	abdb8 <__malloc_unlock>
   a1db8:	020002f4 	movhi	r8,11
   a1dbc:	423d1904 	addi	r8,r8,-2972
   a1dc0:	3a3faf1e 	bne	r7,r8,a1c80 <_free_r+0x7c>
   a1dc4:	29800515 	stw	r6,20(r5)
   a1dc8:	29800415 	stw	r6,16(r5)
   a1dcc:	11000054 	ori	r4,r2,1
   a1dd0:	3087883a 	add	r3,r6,r2
   a1dd4:	31c00315 	stw	r7,12(r6)
   a1dd8:	31c00215 	stw	r7,8(r6)
   a1ddc:	31000115 	stw	r4,4(r6)
   a1de0:	18800015 	stw	r2,0(r3)
   a1de4:	003fc806 	br	a1d08 <_free_r+0x104>
   a1de8:	4200004c 	andi	r8,r8,1
   a1dec:	3885883a 	add	r2,r7,r2
   a1df0:	4000071e 	bne	r8,zero,a1e10 <_free_r+0x20c>
   a1df4:	81fffe17 	ldw	r7,-8(r16)
   a1df8:	31cdc83a 	sub	r6,r6,r7
   a1dfc:	30c00317 	ldw	r3,12(r6)
   a1e00:	31000217 	ldw	r4,8(r6)
   a1e04:	11c5883a 	add	r2,r2,r7
   a1e08:	20c00315 	stw	r3,12(r4)
   a1e0c:	19000215 	stw	r4,8(r3)
   a1e10:	00c002f4 	movhi	r3,11
   a1e14:	18c2ab04 	addi	r3,r3,2732
   a1e18:	18c00017 	ldw	r3,0(r3)
   a1e1c:	11000054 	ori	r4,r2,1
   a1e20:	31000115 	stw	r4,4(r6)
   a1e24:	29800215 	stw	r6,8(r5)
   a1e28:	10ffb736 	bltu	r2,r3,a1d08 <_free_r+0x104>
   a1e2c:	008002f4 	movhi	r2,11
   a1e30:	10898004 	addi	r2,r2,9728
   a1e34:	11400017 	ldw	r5,0(r2)
   a1e38:	8809883a 	mov	r4,r17
   a1e3c:	00a1ac80 	call	a1ac8 <_malloc_trim_r>
   a1e40:	003fb106 	br	a1d08 <_free_r+0x104>
   a1e44:	01000044 	movi	r4,1
   a1e48:	003f8606 	br	a1c64 <_free_r+0x60>
   a1e4c:	01000504 	movi	r4,20
   a1e50:	20c00b36 	bltu	r4,r3,a1e80 <_free_r+0x27c>
   a1e54:	190016c4 	addi	r4,r3,91
   a1e58:	210f883a 	add	r7,r4,r4
   a1e5c:	003f9806 	br	a1cc0 <_free_r+0xbc>
   a1e60:	2009d0ba 	srai	r4,r4,2
   a1e64:	00800044 	movi	r2,1
   a1e68:	29c00117 	ldw	r7,4(r5)
   a1e6c:	1108983a 	sll	r4,r2,r4
   a1e70:	1805883a 	mov	r2,r3
   a1e74:	21c8b03a 	or	r4,r4,r7
   a1e78:	29000115 	stw	r4,4(r5)
   a1e7c:	003f9e06 	br	a1cf8 <_free_r+0xf4>
   a1e80:	01001504 	movi	r4,84
   a1e84:	20c00436 	bltu	r4,r3,a1e98 <_free_r+0x294>
   a1e88:	1008d33a 	srli	r4,r2,12
   a1e8c:	21001b84 	addi	r4,r4,110
   a1e90:	210f883a 	add	r7,r4,r4
   a1e94:	003f8a06 	br	a1cc0 <_free_r+0xbc>
   a1e98:	01005504 	movi	r4,340
   a1e9c:	20c00436 	bltu	r4,r3,a1eb0 <_free_r+0x2ac>
   a1ea0:	1008d3fa 	srli	r4,r2,15
   a1ea4:	21001dc4 	addi	r4,r4,119
   a1ea8:	210f883a 	add	r7,r4,r4
   a1eac:	003f8406 	br	a1cc0 <_free_r+0xbc>
   a1eb0:	01015504 	movi	r4,1364
   a1eb4:	20c00436 	bltu	r4,r3,a1ec8 <_free_r+0x2c4>
   a1eb8:	1008d4ba 	srli	r4,r2,18
   a1ebc:	21001f04 	addi	r4,r4,124
   a1ec0:	210f883a 	add	r7,r4,r4
   a1ec4:	003f7e06 	br	a1cc0 <_free_r+0xbc>
   a1ec8:	01c03f04 	movi	r7,252
   a1ecc:	01001f84 	movi	r4,126
   a1ed0:	003f7b06 	br	a1cc0 <_free_r+0xbc>

000a1ed4 <_fseek_r>:
   a1ed4:	deffe804 	addi	sp,sp,-96
   a1ed8:	dd001315 	stw	r20,76(sp)
   a1edc:	dc801115 	stw	r18,68(sp)
   a1ee0:	dc401015 	stw	r17,64(sp)
   a1ee4:	dc000f15 	stw	r16,60(sp)
   a1ee8:	dfc01715 	stw	ra,92(sp)
   a1eec:	ddc01615 	stw	r23,88(sp)
   a1ef0:	dd801515 	stw	r22,84(sp)
   a1ef4:	dd401415 	stw	r21,80(sp)
   a1ef8:	dcc01215 	stw	r19,72(sp)
   a1efc:	2023883a 	mov	r17,r4
   a1f00:	2821883a 	mov	r16,r5
   a1f04:	3029883a 	mov	r20,r6
   a1f08:	3825883a 	mov	r18,r7
   a1f0c:	20000226 	beq	r4,zero,a1f18 <_fseek_r+0x44>
   a1f10:	20800e17 	ldw	r2,56(r4)
   a1f14:	10006226 	beq	r2,zero,a20a0 <_fseek_r+0x1cc>
   a1f18:	80c0030b 	ldhu	r3,12(r16)
   a1f1c:	00804204 	movi	r2,264
   a1f20:	18c0420c 	andi	r3,r3,264
   a1f24:	18806326 	beq	r3,r2,a20b4 <_fseek_r+0x1e0>
   a1f28:	84c00a17 	ldw	r19,40(r16)
   a1f2c:	98010226 	beq	r19,zero,a2338 <_fseek_r+0x464>
   a1f30:	00800044 	movi	r2,1
   a1f34:	90803d26 	beq	r18,r2,a202c <_fseek_r+0x158>
   a1f38:	00800084 	movi	r2,2
   a1f3c:	90800126 	beq	r18,r2,a1f44 <_fseek_r+0x70>
   a1f40:	90002c1e 	bne	r18,zero,a1ff4 <_fseek_r+0x120>
   a1f44:	80800417 	ldw	r2,16(r16)
   a1f48:	002d883a 	mov	r22,zero
   a1f4c:	002b883a 	mov	r21,zero
   a1f50:	1000e526 	beq	r2,zero,a22e8 <_fseek_r+0x414>
   a1f54:	80c0030b 	ldhu	r3,12(r16)
   a1f58:	1882068c 	andi	r2,r3,2074
   a1f5c:	1809883a 	mov	r4,r3
   a1f60:	10000a1e 	bne	r2,zero,a1f8c <_fseek_r+0xb8>
   a1f64:	1881000c 	andi	r2,r3,1024
   a1f68:	10bfffcc 	andi	r2,r2,65535
   a1f6c:	10a0001c 	xori	r2,r2,32768
   a1f70:	10a00004 	addi	r2,r2,-32768
   a1f74:	1000631e 	bne	r2,zero,a2104 <_fseek_r+0x230>
   a1f78:	008002b4 	movhi	r2,10
   a1f7c:	108d6704 	addi	r2,r2,13724
   a1f80:	98805026 	beq	r19,r2,a20c4 <_fseek_r+0x1f0>
   a1f84:	18c20014 	ori	r3,r3,2048
   a1f88:	80c0030d 	sth	r3,12(r16)
   a1f8c:	8809883a 	mov	r4,r17
   a1f90:	800b883a 	mov	r5,r16
   a1f94:	00a13880 	call	a1388 <_fflush_r>
   a1f98:	1000181e 	bne	r2,zero,a1ffc <_fseek_r+0x128>
   a1f9c:	81400717 	ldw	r5,28(r16)
   a1fa0:	8809883a 	mov	r4,r17
   a1fa4:	a00d883a 	mov	r6,r20
   a1fa8:	900f883a 	mov	r7,r18
   a1fac:	983ee83a 	callr	r19
   a1fb0:	00ffffc4 	movi	r3,-1
   a1fb4:	10c01126 	beq	r2,r3,a1ffc <_fseek_r+0x128>
   a1fb8:	81400c17 	ldw	r5,48(r16)
   a1fbc:	28000526 	beq	r5,zero,a1fd4 <_fseek_r+0x100>
   a1fc0:	80801004 	addi	r2,r16,64
   a1fc4:	28800226 	beq	r5,r2,a1fd0 <_fseek_r+0xfc>
   a1fc8:	8809883a 	mov	r4,r17
   a1fcc:	00a1c040 	call	a1c04 <_free_r>
   a1fd0:	80000c15 	stw	zero,48(r16)
   a1fd4:	8080030b 	ldhu	r2,12(r16)
   a1fd8:	80c00417 	ldw	r3,16(r16)
   a1fdc:	80000115 	stw	zero,4(r16)
   a1fe0:	10bdf7cc 	andi	r2,r2,63455
   a1fe4:	8080030d 	sth	r2,12(r16)
   a1fe8:	80c00015 	stw	r3,0(r16)
   a1fec:	0005883a 	mov	r2,zero
   a1ff0:	00000306 	br	a2000 <_fseek_r+0x12c>
   a1ff4:	00800584 	movi	r2,22
   a1ff8:	88800015 	stw	r2,0(r17)
   a1ffc:	00bfffc4 	movi	r2,-1
   a2000:	dfc01717 	ldw	ra,92(sp)
   a2004:	ddc01617 	ldw	r23,88(sp)
   a2008:	dd801517 	ldw	r22,84(sp)
   a200c:	dd401417 	ldw	r21,80(sp)
   a2010:	dd001317 	ldw	r20,76(sp)
   a2014:	dcc01217 	ldw	r19,72(sp)
   a2018:	dc801117 	ldw	r18,68(sp)
   a201c:	dc401017 	ldw	r17,64(sp)
   a2020:	dc000f17 	ldw	r16,60(sp)
   a2024:	dec01804 	addi	sp,sp,96
   a2028:	f800283a 	ret
   a202c:	8809883a 	mov	r4,r17
   a2030:	800b883a 	mov	r5,r16
   a2034:	00a13880 	call	a1388 <_fflush_r>
   a2038:	8080030b 	ldhu	r2,12(r16)
   a203c:	10c4000c 	andi	r3,r2,4096
   a2040:	18ffffcc 	andi	r3,r3,65535
   a2044:	18e0001c 	xori	r3,r3,32768
   a2048:	18e00004 	addi	r3,r3,-32768
   a204c:	18007d26 	beq	r3,zero,a2244 <_fseek_r+0x370>
   a2050:	85401417 	ldw	r21,80(r16)
   a2054:	10c0010c 	andi	r3,r2,4
   a2058:	18ffffcc 	andi	r3,r3,65535
   a205c:	18e0001c 	xori	r3,r3,32768
   a2060:	18e00004 	addi	r3,r3,-32768
   a2064:	18005f1e 	bne	r3,zero,a21e4 <_fseek_r+0x310>
   a2068:	1080020c 	andi	r2,r2,8
   a206c:	10bfffcc 	andi	r2,r2,65535
   a2070:	10a0001c 	xori	r2,r2,32768
   a2074:	10a00004 	addi	r2,r2,-32768
   a2078:	10007026 	beq	r2,zero,a223c <_fseek_r+0x368>
   a207c:	80c00017 	ldw	r3,0(r16)
   a2080:	80800417 	ldw	r2,16(r16)
   a2084:	18000226 	beq	r3,zero,a2090 <_fseek_r+0x1bc>
   a2088:	1887c83a 	sub	r3,r3,r2
   a208c:	a8eb883a 	add	r21,r21,r3
   a2090:	a569883a 	add	r20,r20,r21
   a2094:	05800044 	movi	r22,1
   a2098:	0025883a 	mov	r18,zero
   a209c:	003fac06 	br	a1f50 <_fseek_r+0x7c>
   a20a0:	00a16440 	call	a1644 <__sinit>
   a20a4:	80c0030b 	ldhu	r3,12(r16)
   a20a8:	00804204 	movi	r2,264
   a20ac:	18c0420c 	andi	r3,r3,264
   a20b0:	18bf9d1e 	bne	r3,r2,a1f28 <_fseek_r+0x54>
   a20b4:	8809883a 	mov	r4,r17
   a20b8:	800b883a 	mov	r5,r16
   a20bc:	00a13880 	call	a1388 <_fflush_r>
   a20c0:	003f9906 	br	a1f28 <_fseek_r+0x54>
   a20c4:	8140038f 	ldh	r5,14(r16)
   a20c8:	283fae16 	blt	r5,zero,a1f84 <_fseek_r+0xb0>
   a20cc:	8809883a 	mov	r4,r17
   a20d0:	d80d883a 	mov	r6,sp
   a20d4:	00a236c0 	call	a236c <_fstat_r>
   a20d8:	1000741e 	bne	r2,zero,a22ac <_fseek_r+0x3d8>
   a20dc:	d8c00117 	ldw	r3,4(sp)
   a20e0:	00a00014 	movui	r2,32768
   a20e4:	18fc000c 	andi	r3,r3,61440
   a20e8:	1880701e 	bne	r3,r2,a22ac <_fseek_r+0x3d8>
   a20ec:	8100030b 	ldhu	r4,12(r16)
   a20f0:	00810004 	movi	r2,1024
   a20f4:	80801315 	stw	r2,76(r16)
   a20f8:	2084b03a 	or	r2,r4,r2
   a20fc:	1009883a 	mov	r4,r2
   a2100:	8080030d 	sth	r2,12(r16)
   a2104:	90003f1e 	bne	r18,zero,a2204 <_fseek_r+0x330>
   a2108:	a02f883a 	mov	r23,r20
   a210c:	b000461e 	bne	r22,zero,a2228 <_fseek_r+0x354>
   a2110:	2084000c 	andi	r2,r4,4096
   a2114:	10bfffcc 	andi	r2,r2,65535
   a2118:	10a0001c 	xori	r2,r2,32768
   a211c:	10a00004 	addi	r2,r2,-32768
   a2120:	10007526 	beq	r2,zero,a22f8 <_fseek_r+0x424>
   a2124:	80801417 	ldw	r2,80(r16)
   a2128:	80c00117 	ldw	r3,4(r16)
   a212c:	81400c17 	ldw	r5,48(r16)
   a2130:	10ebc83a 	sub	r21,r2,r3
   a2134:	28007926 	beq	r5,zero,a231c <_fseek_r+0x448>
   a2138:	81c00f17 	ldw	r7,60(r16)
   a213c:	a9ebc83a 	sub	r21,r21,r7
   a2140:	80800e17 	ldw	r2,56(r16)
   a2144:	81800417 	ldw	r6,16(r16)
   a2148:	a8eb883a 	add	r21,r21,r3
   a214c:	1185c83a 	sub	r2,r2,r6
   a2150:	a8abc83a 	sub	r21,r21,r2
   a2154:	3885883a 	add	r2,r7,r2
   a2158:	2208000c 	andi	r8,r4,8192
   a215c:	423fffcc 	andi	r8,r8,65535
   a2160:	4220001c 	xori	r8,r8,32768
   a2164:	42200004 	addi	r8,r8,-32768
   a2168:	4000031e 	bne	r8,zero,a2178 <_fseek_r+0x2a4>
   a216c:	bd400216 	blt	r23,r21,a2178 <_fseek_r+0x2a4>
   a2170:	a887883a 	add	r3,r21,r2
   a2174:	b8c03d36 	bltu	r23,r3,a226c <_fseek_r+0x398>
   a2178:	85401317 	ldw	r21,76(r16)
   a217c:	81400717 	ldw	r5,28(r16)
   a2180:	8809883a 	mov	r4,r17
   a2184:	056bc83a 	sub	r21,zero,r21
   a2188:	bd6a703a 	and	r21,r23,r21
   a218c:	a80d883a 	mov	r6,r21
   a2190:	000f883a 	mov	r7,zero
   a2194:	983ee83a 	callr	r19
   a2198:	00ffffc4 	movi	r3,-1
   a219c:	10ff7b26 	beq	r2,r3,a1f8c <_fseek_r+0xb8>
   a21a0:	80800417 	ldw	r2,16(r16)
   a21a4:	81400c17 	ldw	r5,48(r16)
   a21a8:	80000115 	stw	zero,4(r16)
   a21ac:	80800015 	stw	r2,0(r16)
   a21b0:	28000526 	beq	r5,zero,a21c8 <_fseek_r+0x2f4>
   a21b4:	80801004 	addi	r2,r16,64
   a21b8:	28800226 	beq	r5,r2,a21c4 <_fseek_r+0x2f0>
   a21bc:	8809883a 	mov	r4,r17
   a21c0:	00a1c040 	call	a1c04 <_free_r>
   a21c4:	80000c15 	stw	zero,48(r16)
   a21c8:	8080030b 	ldhu	r2,12(r16)
   a21cc:	bd6fc83a 	sub	r23,r23,r21
   a21d0:	10bff7cc 	andi	r2,r2,65503
   a21d4:	8080030d 	sth	r2,12(r16)
   a21d8:	b800361e 	bne	r23,zero,a22b4 <_fseek_r+0x3e0>
   a21dc:	0005883a 	mov	r2,zero
   a21e0:	003f8706 	br	a2000 <_fseek_r+0x12c>
   a21e4:	80c00117 	ldw	r3,4(r16)
   a21e8:	80800c17 	ldw	r2,48(r16)
   a21ec:	a8ebc83a 	sub	r21,r21,r3
   a21f0:	10001226 	beq	r2,zero,a223c <_fseek_r+0x368>
   a21f4:	80c00f17 	ldw	r3,60(r16)
   a21f8:	80800417 	ldw	r2,16(r16)
   a21fc:	a8ebc83a 	sub	r21,r21,r3
   a2200:	003fa306 	br	a2090 <_fseek_r+0x1bc>
   a2204:	8140038f 	ldh	r5,14(r16)
   a2208:	8809883a 	mov	r4,r17
   a220c:	d80d883a 	mov	r6,sp
   a2210:	00a236c0 	call	a236c <_fstat_r>
   a2214:	103f5d1e 	bne	r2,zero,a1f8c <_fseek_r+0xb8>
   a2218:	ddc00417 	ldw	r23,16(sp)
   a221c:	8100030b 	ldhu	r4,12(r16)
   a2220:	a5ef883a 	add	r23,r20,r23
   a2224:	b03fba26 	beq	r22,zero,a2110 <_fseek_r+0x23c>
   a2228:	81400c17 	ldw	r5,48(r16)
   a222c:	80c00117 	ldw	r3,4(r16)
   a2230:	28003a26 	beq	r5,zero,a231c <_fseek_r+0x448>
   a2234:	81c00f17 	ldw	r7,60(r16)
   a2238:	003fc106 	br	a2140 <_fseek_r+0x26c>
   a223c:	80800417 	ldw	r2,16(r16)
   a2240:	003f9306 	br	a2090 <_fseek_r+0x1bc>
   a2244:	81400717 	ldw	r5,28(r16)
   a2248:	8809883a 	mov	r4,r17
   a224c:	000d883a 	mov	r6,zero
   a2250:	900f883a 	mov	r7,r18
   a2254:	983ee83a 	callr	r19
   a2258:	102b883a 	mov	r21,r2
   a225c:	00bfffc4 	movi	r2,-1
   a2260:	a8bf6626 	beq	r21,r2,a1ffc <_fseek_r+0x128>
   a2264:	8080030b 	ldhu	r2,12(r16)
   a2268:	003f7a06 	br	a2054 <_fseek_r+0x180>
   a226c:	bd6bc83a 	sub	r21,r23,r21
   a2270:	354d883a 	add	r6,r6,r21
   a2274:	1545c83a 	sub	r2,r2,r21
   a2278:	81800015 	stw	r6,0(r16)
   a227c:	80800115 	stw	r2,4(r16)
   a2280:	28000626 	beq	r5,zero,a229c <_fseek_r+0x3c8>
   a2284:	80801004 	addi	r2,r16,64
   a2288:	28800326 	beq	r5,r2,a2298 <_fseek_r+0x3c4>
   a228c:	8809883a 	mov	r4,r17
   a2290:	00a1c040 	call	a1c04 <_free_r>
   a2294:	8100030b 	ldhu	r4,12(r16)
   a2298:	80000c15 	stw	zero,48(r16)
   a229c:	213ff7cc 	andi	r4,r4,65503
   a22a0:	8100030d 	sth	r4,12(r16)
   a22a4:	0005883a 	mov	r2,zero
   a22a8:	003f5506 	br	a2000 <_fseek_r+0x12c>
   a22ac:	80c0030b 	ldhu	r3,12(r16)
   a22b0:	003f3406 	br	a1f84 <_fseek_r+0xb0>
   a22b4:	8809883a 	mov	r4,r17
   a22b8:	800b883a 	mov	r5,r16
   a22bc:	00a32700 	call	a3270 <__srefill_r>
   a22c0:	103f321e 	bne	r2,zero,a1f8c <_fseek_r+0xb8>
   a22c4:	80800117 	ldw	r2,4(r16)
   a22c8:	15ff3036 	bltu	r2,r23,a1f8c <_fseek_r+0xb8>
   a22cc:	80c00017 	ldw	r3,0(r16)
   a22d0:	15c5c83a 	sub	r2,r2,r23
   a22d4:	80800115 	stw	r2,4(r16)
   a22d8:	1def883a 	add	r23,r3,r23
   a22dc:	85c00015 	stw	r23,0(r16)
   a22e0:	0005883a 	mov	r2,zero
   a22e4:	003f4606 	br	a2000 <_fseek_r+0x12c>
   a22e8:	8809883a 	mov	r4,r17
   a22ec:	800b883a 	mov	r5,r16
   a22f0:	00a25340 	call	a2534 <__smakebuf_r>
   a22f4:	003f1706 	br	a1f54 <_fseek_r+0x80>
   a22f8:	81400717 	ldw	r5,28(r16)
   a22fc:	8809883a 	mov	r4,r17
   a2300:	000d883a 	mov	r6,zero
   a2304:	01c00044 	movi	r7,1
   a2308:	983ee83a 	callr	r19
   a230c:	00ffffc4 	movi	r3,-1
   a2310:	10ff1e26 	beq	r2,r3,a1f8c <_fseek_r+0xb8>
   a2314:	8100030b 	ldhu	r4,12(r16)
   a2318:	003f8306 	br	a2128 <_fseek_r+0x254>
   a231c:	80800017 	ldw	r2,0(r16)
   a2320:	81800417 	ldw	r6,16(r16)
   a2324:	000b883a 	mov	r5,zero
   a2328:	1185c83a 	sub	r2,r2,r6
   a232c:	a8abc83a 	sub	r21,r21,r2
   a2330:	1885883a 	add	r2,r3,r2
   a2334:	003f8806 	br	a2158 <_fseek_r+0x284>
   a2338:	00800744 	movi	r2,29
   a233c:	88800015 	stw	r2,0(r17)
   a2340:	00bfffc4 	movi	r2,-1
   a2344:	003f2e06 	br	a2000 <_fseek_r+0x12c>

000a2348 <fseek>:
   a2348:	008002f4 	movhi	r2,11
   a234c:	1082a904 	addi	r2,r2,2724
   a2350:	2007883a 	mov	r3,r4
   a2354:	11000017 	ldw	r4,0(r2)
   a2358:	2805883a 	mov	r2,r5
   a235c:	300f883a 	mov	r7,r6
   a2360:	180b883a 	mov	r5,r3
   a2364:	100d883a 	mov	r6,r2
   a2368:	00a1ed41 	jmpi	a1ed4 <_fseek_r>

000a236c <_fstat_r>:
   a236c:	defffd04 	addi	sp,sp,-12
   a2370:	dc400115 	stw	r17,4(sp)
   a2374:	dc000015 	stw	r16,0(sp)
   a2378:	2023883a 	mov	r17,r4
   a237c:	040002f4 	movhi	r16,11
   a2380:	84097d04 	addi	r16,r16,9716
   a2384:	2809883a 	mov	r4,r5
   a2388:	300b883a 	mov	r5,r6
   a238c:	dfc00215 	stw	ra,8(sp)
   a2390:	80000015 	stw	zero,0(r16)
   a2394:	00ab96c0 	call	ab96c <fstat>
   a2398:	00ffffc4 	movi	r3,-1
   a239c:	10c00526 	beq	r2,r3,a23b4 <_fstat_r+0x48>
   a23a0:	dfc00217 	ldw	ra,8(sp)
   a23a4:	dc400117 	ldw	r17,4(sp)
   a23a8:	dc000017 	ldw	r16,0(sp)
   a23ac:	dec00304 	addi	sp,sp,12
   a23b0:	f800283a 	ret
   a23b4:	80c00017 	ldw	r3,0(r16)
   a23b8:	183ff926 	beq	r3,zero,a23a0 <_fstat_r+0x34>
   a23bc:	88c00015 	stw	r3,0(r17)
   a23c0:	dfc00217 	ldw	ra,8(sp)
   a23c4:	dc400117 	ldw	r17,4(sp)
   a23c8:	dc000017 	ldw	r16,0(sp)
   a23cc:	dec00304 	addi	sp,sp,12
   a23d0:	f800283a 	ret

000a23d4 <_fwalk>:
   a23d4:	defff904 	addi	sp,sp,-28
   a23d8:	dcc00315 	stw	r19,12(sp)
   a23dc:	24c0b804 	addi	r19,r4,736
   a23e0:	dd400515 	stw	r21,20(sp)
   a23e4:	dd000415 	stw	r20,16(sp)
   a23e8:	dfc00615 	stw	ra,24(sp)
   a23ec:	dc800215 	stw	r18,8(sp)
   a23f0:	dc400115 	stw	r17,4(sp)
   a23f4:	dc000015 	stw	r16,0(sp)
   a23f8:	282b883a 	mov	r21,r5
   a23fc:	0029883a 	mov	r20,zero
   a2400:	00a184c0 	call	a184c <__sfp_lock_acquire>
   a2404:	98001226 	beq	r19,zero,a2450 <_fwalk+0x7c>
   a2408:	04bfffc4 	movi	r18,-1
   a240c:	9c400117 	ldw	r17,4(r19)
   a2410:	9c000217 	ldw	r16,8(r19)
   a2414:	8c7fffc4 	addi	r17,r17,-1
   a2418:	88000b16 	blt	r17,zero,a2448 <_fwalk+0x74>
   a241c:	84000304 	addi	r16,r16,12
   a2420:	80c0000f 	ldh	r3,0(r16)
   a2424:	8c7fffc4 	addi	r17,r17,-1
   a2428:	813ffd04 	addi	r4,r16,-12
   a242c:	18000426 	beq	r3,zero,a2440 <_fwalk+0x6c>
   a2430:	80c0008f 	ldh	r3,2(r16)
   a2434:	1c800226 	beq	r3,r18,a2440 <_fwalk+0x6c>
   a2438:	a83ee83a 	callr	r21
   a243c:	a0a8b03a 	or	r20,r20,r2
   a2440:	84001704 	addi	r16,r16,92
   a2444:	8cbff61e 	bne	r17,r18,a2420 <_fwalk+0x4c>
   a2448:	9cc00017 	ldw	r19,0(r19)
   a244c:	983fef1e 	bne	r19,zero,a240c <_fwalk+0x38>
   a2450:	00a18500 	call	a1850 <__sfp_lock_release>
   a2454:	a005883a 	mov	r2,r20
   a2458:	dfc00617 	ldw	ra,24(sp)
   a245c:	dd400517 	ldw	r21,20(sp)
   a2460:	dd000417 	ldw	r20,16(sp)
   a2464:	dcc00317 	ldw	r19,12(sp)
   a2468:	dc800217 	ldw	r18,8(sp)
   a246c:	dc400117 	ldw	r17,4(sp)
   a2470:	dc000017 	ldw	r16,0(sp)
   a2474:	dec00704 	addi	sp,sp,28
   a2478:	f800283a 	ret

000a247c <_fwalk_reent>:
   a247c:	defff804 	addi	sp,sp,-32
   a2480:	dcc00315 	stw	r19,12(sp)
   a2484:	24c0b804 	addi	r19,r4,736
   a2488:	dd800615 	stw	r22,24(sp)
   a248c:	dd400515 	stw	r21,20(sp)
   a2490:	dd000415 	stw	r20,16(sp)
   a2494:	dfc00715 	stw	ra,28(sp)
   a2498:	dc800215 	stw	r18,8(sp)
   a249c:	dc400115 	stw	r17,4(sp)
   a24a0:	dc000015 	stw	r16,0(sp)
   a24a4:	2029883a 	mov	r20,r4
   a24a8:	282b883a 	mov	r21,r5
   a24ac:	002d883a 	mov	r22,zero
   a24b0:	00a184c0 	call	a184c <__sfp_lock_acquire>
   a24b4:	98001326 	beq	r19,zero,a2504 <_fwalk_reent+0x88>
   a24b8:	04bfffc4 	movi	r18,-1
   a24bc:	9c400117 	ldw	r17,4(r19)
   a24c0:	9c000217 	ldw	r16,8(r19)
   a24c4:	8c7fffc4 	addi	r17,r17,-1
   a24c8:	88000c16 	blt	r17,zero,a24fc <_fwalk_reent+0x80>
   a24cc:	84000304 	addi	r16,r16,12
   a24d0:	80c0000f 	ldh	r3,0(r16)
   a24d4:	8c7fffc4 	addi	r17,r17,-1
   a24d8:	817ffd04 	addi	r5,r16,-12
   a24dc:	18000526 	beq	r3,zero,a24f4 <_fwalk_reent+0x78>
   a24e0:	80c0008f 	ldh	r3,2(r16)
   a24e4:	a009883a 	mov	r4,r20
   a24e8:	1c800226 	beq	r3,r18,a24f4 <_fwalk_reent+0x78>
   a24ec:	a83ee83a 	callr	r21
   a24f0:	b0acb03a 	or	r22,r22,r2
   a24f4:	84001704 	addi	r16,r16,92
   a24f8:	8cbff51e 	bne	r17,r18,a24d0 <_fwalk_reent+0x54>
   a24fc:	9cc00017 	ldw	r19,0(r19)
   a2500:	983fee1e 	bne	r19,zero,a24bc <_fwalk_reent+0x40>
   a2504:	00a18500 	call	a1850 <__sfp_lock_release>
   a2508:	b005883a 	mov	r2,r22
   a250c:	dfc00717 	ldw	ra,28(sp)
   a2510:	dd800617 	ldw	r22,24(sp)
   a2514:	dd400517 	ldw	r21,20(sp)
   a2518:	dd000417 	ldw	r20,16(sp)
   a251c:	dcc00317 	ldw	r19,12(sp)
   a2520:	dc800217 	ldw	r18,8(sp)
   a2524:	dc400117 	ldw	r17,4(sp)
   a2528:	dc000017 	ldw	r16,0(sp)
   a252c:	dec00804 	addi	sp,sp,32
   a2530:	f800283a 	ret

000a2534 <__smakebuf_r>:
   a2534:	2880030b 	ldhu	r2,12(r5)
   a2538:	deffed04 	addi	sp,sp,-76
   a253c:	dc401015 	stw	r17,64(sp)
   a2540:	10c0008c 	andi	r3,r2,2
   a2544:	18ffffcc 	andi	r3,r3,65535
   a2548:	18e0001c 	xori	r3,r3,32768
   a254c:	dc000f15 	stw	r16,60(sp)
   a2550:	dfc01215 	stw	ra,72(sp)
   a2554:	dc801115 	stw	r18,68(sp)
   a2558:	18e00004 	addi	r3,r3,-32768
   a255c:	2821883a 	mov	r16,r5
   a2560:	2023883a 	mov	r17,r4
   a2564:	1800381e 	bne	r3,zero,a2648 <__smakebuf_r+0x114>
   a2568:	2940038f 	ldh	r5,14(r5)
   a256c:	28002d16 	blt	r5,zero,a2624 <__smakebuf_r+0xf0>
   a2570:	d80d883a 	mov	r6,sp
   a2574:	00a236c0 	call	a236c <_fstat_r>
   a2578:	10002916 	blt	r2,zero,a2620 <__smakebuf_r+0xec>
   a257c:	d8800117 	ldw	r2,4(sp)
   a2580:	00e00014 	movui	r3,32768
   a2584:	10bc000c 	andi	r2,r2,61440
   a2588:	10c03c26 	beq	r2,r3,a267c <__smakebuf_r+0x148>
   a258c:	80c0030b 	ldhu	r3,12(r16)
   a2590:	18c20014 	ori	r3,r3,2048
   a2594:	80c0030d 	sth	r3,12(r16)
   a2598:	00c80004 	movi	r3,8192
   a259c:	10c00c1e 	bne	r2,r3,a25d0 <__smakebuf_r+0x9c>
   a25a0:	8140038f 	ldh	r5,14(r16)
   a25a4:	8809883a 	mov	r4,r17
   a25a8:	00a78780 	call	a7878 <_isatty_r>
   a25ac:	10000826 	beq	r2,zero,a25d0 <__smakebuf_r+0x9c>
   a25b0:	80c0030b 	ldhu	r3,12(r16)
   a25b4:	808010c4 	addi	r2,r16,67
   a25b8:	80800015 	stw	r2,0(r16)
   a25bc:	18c00054 	ori	r3,r3,1
   a25c0:	80800415 	stw	r2,16(r16)
   a25c4:	00800044 	movi	r2,1
   a25c8:	80c0030d 	sth	r3,12(r16)
   a25cc:	80800515 	stw	r2,20(r16)
   a25d0:	04810004 	movi	r18,1024
   a25d4:	8809883a 	mov	r4,r17
   a25d8:	900b883a 	mov	r5,r18
   a25dc:	00a26dc0 	call	a26dc <_malloc_r>
   a25e0:	10003026 	beq	r2,zero,a26a4 <__smakebuf_r+0x170>
   a25e4:	80c0030b 	ldhu	r3,12(r16)
   a25e8:	010002b4 	movhi	r4,10
   a25ec:	21056c04 	addi	r4,r4,5552
   a25f0:	89000f15 	stw	r4,60(r17)
   a25f4:	18c02014 	ori	r3,r3,128
   a25f8:	80c0030d 	sth	r3,12(r16)
   a25fc:	80800015 	stw	r2,0(r16)
   a2600:	80800415 	stw	r2,16(r16)
   a2604:	84800515 	stw	r18,20(r16)
   a2608:	dfc01217 	ldw	ra,72(sp)
   a260c:	dc801117 	ldw	r18,68(sp)
   a2610:	dc401017 	ldw	r17,64(sp)
   a2614:	dc000f17 	ldw	r16,60(sp)
   a2618:	dec01304 	addi	sp,sp,76
   a261c:	f800283a 	ret
   a2620:	8080030b 	ldhu	r2,12(r16)
   a2624:	10c0200c 	andi	r3,r2,128
   a2628:	18ffffcc 	andi	r3,r3,65535
   a262c:	18e0001c 	xori	r3,r3,32768
   a2630:	18e00004 	addi	r3,r3,-32768
   a2634:	18000f1e 	bne	r3,zero,a2674 <__smakebuf_r+0x140>
   a2638:	04810004 	movi	r18,1024
   a263c:	10820014 	ori	r2,r2,2048
   a2640:	8080030d 	sth	r2,12(r16)
   a2644:	003fe306 	br	a25d4 <__smakebuf_r+0xa0>
   a2648:	288010c4 	addi	r2,r5,67
   a264c:	28800015 	stw	r2,0(r5)
   a2650:	28800415 	stw	r2,16(r5)
   a2654:	00800044 	movi	r2,1
   a2658:	28800515 	stw	r2,20(r5)
   a265c:	dfc01217 	ldw	ra,72(sp)
   a2660:	dc801117 	ldw	r18,68(sp)
   a2664:	dc401017 	ldw	r17,64(sp)
   a2668:	dc000f17 	ldw	r16,60(sp)
   a266c:	dec01304 	addi	sp,sp,76
   a2670:	f800283a 	ret
   a2674:	04801004 	movi	r18,64
   a2678:	003ff006 	br	a263c <__smakebuf_r+0x108>
   a267c:	81000a17 	ldw	r4,40(r16)
   a2680:	00c002b4 	movhi	r3,10
   a2684:	18cd6704 	addi	r3,r3,13724
   a2688:	20ffc01e 	bne	r4,r3,a258c <__smakebuf_r+0x58>
   a268c:	8080030b 	ldhu	r2,12(r16)
   a2690:	00c10004 	movi	r3,1024
   a2694:	80c01315 	stw	r3,76(r16)
   a2698:	10c4b03a 	or	r2,r2,r3
   a269c:	8080030d 	sth	r2,12(r16)
   a26a0:	003fcb06 	br	a25d0 <__smakebuf_r+0x9c>
   a26a4:	8080030b 	ldhu	r2,12(r16)
   a26a8:	10c0800c 	andi	r3,r2,512
   a26ac:	18ffffcc 	andi	r3,r3,65535
   a26b0:	18e0001c 	xori	r3,r3,32768
   a26b4:	18e00004 	addi	r3,r3,-32768
   a26b8:	183fd31e 	bne	r3,zero,a2608 <__smakebuf_r+0xd4>
   a26bc:	10800094 	ori	r2,r2,2
   a26c0:	80c010c4 	addi	r3,r16,67
   a26c4:	8080030d 	sth	r2,12(r16)
   a26c8:	00800044 	movi	r2,1
   a26cc:	80c00015 	stw	r3,0(r16)
   a26d0:	80c00415 	stw	r3,16(r16)
   a26d4:	80800515 	stw	r2,20(r16)
   a26d8:	003fcb06 	br	a2608 <__smakebuf_r+0xd4>

000a26dc <_malloc_r>:
   a26dc:	defff604 	addi	sp,sp,-40
   a26e0:	dc800215 	stw	r18,8(sp)
   a26e4:	dfc00915 	stw	ra,36(sp)
   a26e8:	df000815 	stw	fp,32(sp)
   a26ec:	ddc00715 	stw	r23,28(sp)
   a26f0:	dd800615 	stw	r22,24(sp)
   a26f4:	dd400515 	stw	r21,20(sp)
   a26f8:	dd000415 	stw	r20,16(sp)
   a26fc:	dcc00315 	stw	r19,12(sp)
   a2700:	dc400115 	stw	r17,4(sp)
   a2704:	dc000015 	stw	r16,0(sp)
   a2708:	288002c4 	addi	r2,r5,11
   a270c:	00c00584 	movi	r3,22
   a2710:	2025883a 	mov	r18,r4
   a2714:	18802b2e 	bgeu	r3,r2,a27c4 <_malloc_r+0xe8>
   a2718:	047ffe04 	movi	r17,-8
   a271c:	1462703a 	and	r17,r2,r17
   a2720:	88002a16 	blt	r17,zero,a27cc <_malloc_r+0xf0>
   a2724:	89402936 	bltu	r17,r5,a27cc <_malloc_r+0xf0>
   a2728:	9009883a 	mov	r4,r18
   a272c:	00abd980 	call	abd98 <__malloc_lock>
   a2730:	00807dc4 	movi	r2,503
   a2734:	14402936 	bltu	r2,r17,a27dc <_malloc_r+0x100>
   a2738:	8808d0fa 	srli	r4,r17,3
   a273c:	04c002f4 	movhi	r19,11
   a2740:	9cfd1704 	addi	r19,r19,-2980
   a2744:	2105883a 	add	r2,r4,r4
   a2748:	1085883a 	add	r2,r2,r2
   a274c:	1085883a 	add	r2,r2,r2
   a2750:	9885883a 	add	r2,r19,r2
   a2754:	14000317 	ldw	r16,12(r2)
   a2758:	80815526 	beq	r16,r2,a2cb0 <_malloc_r+0x5d4>
   a275c:	81000117 	ldw	r4,4(r16)
   a2760:	00bfff04 	movi	r2,-4
   a2764:	80c00317 	ldw	r3,12(r16)
   a2768:	2084703a 	and	r2,r4,r2
   a276c:	8085883a 	add	r2,r16,r2
   a2770:	11800117 	ldw	r6,4(r2)
   a2774:	81400217 	ldw	r5,8(r16)
   a2778:	9009883a 	mov	r4,r18
   a277c:	31800054 	ori	r6,r6,1
   a2780:	11800115 	stw	r6,4(r2)
   a2784:	28c00315 	stw	r3,12(r5)
   a2788:	19400215 	stw	r5,8(r3)
   a278c:	00abdb80 	call	abdb8 <__malloc_unlock>
   a2790:	80800204 	addi	r2,r16,8
   a2794:	dfc00917 	ldw	ra,36(sp)
   a2798:	df000817 	ldw	fp,32(sp)
   a279c:	ddc00717 	ldw	r23,28(sp)
   a27a0:	dd800617 	ldw	r22,24(sp)
   a27a4:	dd400517 	ldw	r21,20(sp)
   a27a8:	dd000417 	ldw	r20,16(sp)
   a27ac:	dcc00317 	ldw	r19,12(sp)
   a27b0:	dc800217 	ldw	r18,8(sp)
   a27b4:	dc400117 	ldw	r17,4(sp)
   a27b8:	dc000017 	ldw	r16,0(sp)
   a27bc:	dec00a04 	addi	sp,sp,40
   a27c0:	f800283a 	ret
   a27c4:	04400404 	movi	r17,16
   a27c8:	897fd72e 	bgeu	r17,r5,a2728 <_malloc_r+0x4c>
   a27cc:	00800304 	movi	r2,12
   a27d0:	90800015 	stw	r2,0(r18)
   a27d4:	0005883a 	mov	r2,zero
   a27d8:	003fee06 	br	a2794 <_malloc_r+0xb8>
   a27dc:	8808d27a 	srli	r4,r17,9
   a27e0:	20007126 	beq	r4,zero,a29a8 <_malloc_r+0x2cc>
   a27e4:	00800104 	movi	r2,4
   a27e8:	1100eb36 	bltu	r2,r4,a2b98 <_malloc_r+0x4bc>
   a27ec:	8808d1ba 	srli	r4,r17,6
   a27f0:	21000e04 	addi	r4,r4,56
   a27f4:	210b883a 	add	r5,r4,r4
   a27f8:	294b883a 	add	r5,r5,r5
   a27fc:	294b883a 	add	r5,r5,r5
   a2800:	04c002f4 	movhi	r19,11
   a2804:	9cfd1704 	addi	r19,r19,-2980
   a2808:	994b883a 	add	r5,r19,r5
   a280c:	2c000317 	ldw	r16,12(r5)
   a2810:	2c000e26 	beq	r5,r16,a284c <_malloc_r+0x170>
   a2814:	80c00117 	ldw	r3,4(r16)
   a2818:	01ffff04 	movi	r7,-4
   a281c:	018003c4 	movi	r6,15
   a2820:	19c6703a 	and	r3,r3,r7
   a2824:	1c45c83a 	sub	r2,r3,r17
   a2828:	30800716 	blt	r6,r2,a2848 <_malloc_r+0x16c>
   a282c:	1000610e 	bge	r2,zero,a29b4 <_malloc_r+0x2d8>
   a2830:	84000317 	ldw	r16,12(r16)
   a2834:	2c000526 	beq	r5,r16,a284c <_malloc_r+0x170>
   a2838:	80c00117 	ldw	r3,4(r16)
   a283c:	19c6703a 	and	r3,r3,r7
   a2840:	1c45c83a 	sub	r2,r3,r17
   a2844:	30bff90e 	bge	r6,r2,a282c <_malloc_r+0x150>
   a2848:	213fffc4 	addi	r4,r4,-1
   a284c:	21000044 	addi	r4,r4,1
   a2850:	9c000417 	ldw	r16,16(r19)
   a2854:	00c002f4 	movhi	r3,11
   a2858:	18fd1704 	addi	r3,r3,-2980
   a285c:	1a400204 	addi	r9,r3,8
   a2860:	8240ff26 	beq	r16,r9,a2c60 <_malloc_r+0x584>
   a2864:	81400117 	ldw	r5,4(r16)
   a2868:	00bfff04 	movi	r2,-4
   a286c:	018003c4 	movi	r6,15
   a2870:	2884703a 	and	r2,r5,r2
   a2874:	144bc83a 	sub	r5,r2,r17
   a2878:	3140ea16 	blt	r6,r5,a2c24 <_malloc_r+0x548>
   a287c:	1a400515 	stw	r9,20(r3)
   a2880:	1a400415 	stw	r9,16(r3)
   a2884:	2800570e 	bge	r5,zero,a29e4 <_malloc_r+0x308>
   a2888:	01407fc4 	movi	r5,511
   a288c:	2880ca36 	bltu	r5,r2,a2bb8 <_malloc_r+0x4dc>
   a2890:	1004d0fa 	srli	r2,r2,3
   a2894:	02000044 	movi	r8,1
   a2898:	19c00117 	ldw	r7,4(r3)
   a289c:	108b883a 	add	r5,r2,r2
   a28a0:	294b883a 	add	r5,r5,r5
   a28a4:	1005d0ba 	srai	r2,r2,2
   a28a8:	294b883a 	add	r5,r5,r5
   a28ac:	28cb883a 	add	r5,r5,r3
   a28b0:	29800217 	ldw	r6,8(r5)
   a28b4:	4084983a 	sll	r2,r8,r2
   a28b8:	81400315 	stw	r5,12(r16)
   a28bc:	81800215 	stw	r6,8(r16)
   a28c0:	11c4b03a 	or	r2,r2,r7
   a28c4:	18800115 	stw	r2,4(r3)
   a28c8:	2c000215 	stw	r16,8(r5)
   a28cc:	34000315 	stw	r16,12(r6)
   a28d0:	200bd0ba 	srai	r5,r4,2
   a28d4:	00c00044 	movi	r3,1
   a28d8:	194a983a 	sll	r5,r3,r5
   a28dc:	11404936 	bltu	r2,r5,a2a04 <_malloc_r+0x328>
   a28e0:	1146703a 	and	r3,r2,r5
   a28e4:	18000a1e 	bne	r3,zero,a2910 <_malloc_r+0x234>
   a28e8:	00ffff04 	movi	r3,-4
   a28ec:	294b883a 	add	r5,r5,r5
   a28f0:	20c8703a 	and	r4,r4,r3
   a28f4:	1146703a 	and	r3,r2,r5
   a28f8:	21000104 	addi	r4,r4,4
   a28fc:	1800041e 	bne	r3,zero,a2910 <_malloc_r+0x234>
   a2900:	294b883a 	add	r5,r5,r5
   a2904:	1146703a 	and	r3,r2,r5
   a2908:	21000104 	addi	r4,r4,4
   a290c:	183ffc26 	beq	r3,zero,a2900 <_malloc_r+0x224>
   a2910:	023fff04 	movi	r8,-4
   a2914:	01c003c4 	movi	r7,15
   a2918:	2105883a 	add	r2,r4,r4
   a291c:	1085883a 	add	r2,r2,r2
   a2920:	1085883a 	add	r2,r2,r2
   a2924:	9899883a 	add	r12,r19,r2
   a2928:	62800304 	addi	r10,r12,12
   a292c:	2017883a 	mov	r11,r4
   a2930:	54000017 	ldw	r16,0(r10)
   a2934:	51bffd04 	addi	r6,r10,-12
   a2938:	8180041e 	bne	r16,r6,a294c <_malloc_r+0x270>
   a293c:	0000ca06 	br	a2c68 <_malloc_r+0x58c>
   a2940:	10001c0e 	bge	r2,zero,a29b4 <_malloc_r+0x2d8>
   a2944:	84000317 	ldw	r16,12(r16)
   a2948:	8180c726 	beq	r16,r6,a2c68 <_malloc_r+0x58c>
   a294c:	80c00117 	ldw	r3,4(r16)
   a2950:	1a06703a 	and	r3,r3,r8
   a2954:	1c45c83a 	sub	r2,r3,r17
   a2958:	38bff90e 	bge	r7,r2,a2940 <_malloc_r+0x264>
   a295c:	81000317 	ldw	r4,12(r16)
   a2960:	81400217 	ldw	r5,8(r16)
   a2964:	8447883a 	add	r3,r16,r17
   a2968:	8c400054 	ori	r17,r17,1
   a296c:	29000315 	stw	r4,12(r5)
   a2970:	21400215 	stw	r5,8(r4)
   a2974:	84400115 	stw	r17,4(r16)
   a2978:	1889883a 	add	r4,r3,r2
   a297c:	11400054 	ori	r5,r2,1
   a2980:	98c00515 	stw	r3,20(r19)
   a2984:	98c00415 	stw	r3,16(r19)
   a2988:	20800015 	stw	r2,0(r4)
   a298c:	1a400315 	stw	r9,12(r3)
   a2990:	1a400215 	stw	r9,8(r3)
   a2994:	19400115 	stw	r5,4(r3)
   a2998:	9009883a 	mov	r4,r18
   a299c:	00abdb80 	call	abdb8 <__malloc_unlock>
   a29a0:	80800204 	addi	r2,r16,8
   a29a4:	003f7b06 	br	a2794 <_malloc_r+0xb8>
   a29a8:	8808d0fa 	srli	r4,r17,3
   a29ac:	210b883a 	add	r5,r4,r4
   a29b0:	003f9106 	br	a27f8 <_malloc_r+0x11c>
   a29b4:	80c7883a 	add	r3,r16,r3
   a29b8:	19400117 	ldw	r5,4(r3)
   a29bc:	80800317 	ldw	r2,12(r16)
   a29c0:	81000217 	ldw	r4,8(r16)
   a29c4:	29400054 	ori	r5,r5,1
   a29c8:	19400115 	stw	r5,4(r3)
   a29cc:	20800315 	stw	r2,12(r4)
   a29d0:	11000215 	stw	r4,8(r2)
   a29d4:	9009883a 	mov	r4,r18
   a29d8:	00abdb80 	call	abdb8 <__malloc_unlock>
   a29dc:	80800204 	addi	r2,r16,8
   a29e0:	003f6c06 	br	a2794 <_malloc_r+0xb8>
   a29e4:	8085883a 	add	r2,r16,r2
   a29e8:	10c00117 	ldw	r3,4(r2)
   a29ec:	9009883a 	mov	r4,r18
   a29f0:	18c00054 	ori	r3,r3,1
   a29f4:	10c00115 	stw	r3,4(r2)
   a29f8:	00abdb80 	call	abdb8 <__malloc_unlock>
   a29fc:	80800204 	addi	r2,r16,8
   a2a00:	003f6406 	br	a2794 <_malloc_r+0xb8>
   a2a04:	9c000217 	ldw	r16,8(r19)
   a2a08:	00bfff04 	movi	r2,-4
   a2a0c:	85400117 	ldw	r21,4(r16)
   a2a10:	a8aa703a 	and	r21,r21,r2
   a2a14:	ac400336 	bltu	r21,r17,a2a24 <_malloc_r+0x348>
   a2a18:	ac45c83a 	sub	r2,r21,r17
   a2a1c:	00c003c4 	movi	r3,15
   a2a20:	18805316 	blt	r3,r2,a2b70 <_malloc_r+0x494>
   a2a24:	d5e6d817 	ldw	r23,-25760(gp)
   a2a28:	d0e00217 	ldw	r3,-32760(gp)
   a2a2c:	00bfffc4 	movi	r2,-1
   a2a30:	8579883a 	add	fp,r16,r21
   a2a34:	8def883a 	add	r23,r17,r23
   a2a38:	1880d226 	beq	r3,r2,a2d84 <_malloc_r+0x6a8>
   a2a3c:	bdc403c4 	addi	r23,r23,4111
   a2a40:	00bc0004 	movi	r2,-4096
   a2a44:	b8ae703a 	and	r23,r23,r2
   a2a48:	9009883a 	mov	r4,r18
   a2a4c:	b80b883a 	mov	r5,r23
   a2a50:	00a345c0 	call	a345c <_sbrk_r>
   a2a54:	1029883a 	mov	r20,r2
   a2a58:	00bfffc4 	movi	r2,-1
   a2a5c:	a080d126 	beq	r20,r2,a2da4 <_malloc_r+0x6c8>
   a2a60:	a7009f36 	bltu	r20,fp,a2ce0 <_malloc_r+0x604>
   a2a64:	058002f4 	movhi	r22,11
   a2a68:	b5898c04 	addi	r22,r22,9776
   a2a6c:	b0800017 	ldw	r2,0(r22)
   a2a70:	b885883a 	add	r2,r23,r2
   a2a74:	b0800015 	stw	r2,0(r22)
   a2a78:	e500cf26 	beq	fp,r20,a2db8 <_malloc_r+0x6dc>
   a2a7c:	d1200217 	ldw	r4,-32760(gp)
   a2a80:	00ffffc4 	movi	r3,-1
   a2a84:	20c0e026 	beq	r4,r3,a2e08 <_malloc_r+0x72c>
   a2a88:	a739c83a 	sub	fp,r20,fp
   a2a8c:	1705883a 	add	r2,r2,fp
   a2a90:	b0800015 	stw	r2,0(r22)
   a2a94:	a08001cc 	andi	r2,r20,7
   a2a98:	1000a526 	beq	r2,zero,a2d30 <_malloc_r+0x654>
   a2a9c:	a0a9c83a 	sub	r20,r20,r2
   a2aa0:	00c40204 	movi	r3,4104
   a2aa4:	a5000204 	addi	r20,r20,8
   a2aa8:	1885c83a 	sub	r2,r3,r2
   a2aac:	a5c7883a 	add	r3,r20,r23
   a2ab0:	18c3ffcc 	andi	r3,r3,4095
   a2ab4:	10efc83a 	sub	r23,r2,r3
   a2ab8:	9009883a 	mov	r4,r18
   a2abc:	b80b883a 	mov	r5,r23
   a2ac0:	00a345c0 	call	a345c <_sbrk_r>
   a2ac4:	00ffffc4 	movi	r3,-1
   a2ac8:	10c0cc26 	beq	r2,r3,a2dfc <_malloc_r+0x720>
   a2acc:	1505c83a 	sub	r2,r2,r20
   a2ad0:	b887883a 	add	r3,r23,r2
   a2ad4:	18c00054 	ori	r3,r3,1
   a2ad8:	b0800017 	ldw	r2,0(r22)
   a2adc:	9d000215 	stw	r20,8(r19)
   a2ae0:	a0c00115 	stw	r3,4(r20)
   a2ae4:	b885883a 	add	r2,r23,r2
   a2ae8:	b0800015 	stw	r2,0(r22)
   a2aec:	84c00e26 	beq	r16,r19,a2b28 <_malloc_r+0x44c>
   a2af0:	00c003c4 	movi	r3,15
   a2af4:	1d40902e 	bgeu	r3,r21,a2d38 <_malloc_r+0x65c>
   a2af8:	ad7ffd04 	addi	r21,r21,-12
   a2afc:	013ffe04 	movi	r4,-8
   a2b00:	a908703a 	and	r4,r21,r4
   a2b04:	810b883a 	add	r5,r16,r4
   a2b08:	01800144 	movi	r6,5
   a2b0c:	29800115 	stw	r6,4(r5)
   a2b10:	29800215 	stw	r6,8(r5)
   a2b14:	81400117 	ldw	r5,4(r16)
   a2b18:	2940004c 	andi	r5,r5,1
   a2b1c:	214ab03a 	or	r5,r4,r5
   a2b20:	81400115 	stw	r5,4(r16)
   a2b24:	1900ae36 	bltu	r3,r4,a2de0 <_malloc_r+0x704>
   a2b28:	d0e6d717 	ldw	r3,-25764(gp)
   a2b2c:	1880012e 	bgeu	r3,r2,a2b34 <_malloc_r+0x458>
   a2b30:	d0a6d715 	stw	r2,-25764(gp)
   a2b34:	d0e6d617 	ldw	r3,-25768(gp)
   a2b38:	9c000217 	ldw	r16,8(r19)
   a2b3c:	1880012e 	bgeu	r3,r2,a2b44 <_malloc_r+0x468>
   a2b40:	d0a6d615 	stw	r2,-25768(gp)
   a2b44:	80c00117 	ldw	r3,4(r16)
   a2b48:	00bfff04 	movi	r2,-4
   a2b4c:	1886703a 	and	r3,r3,r2
   a2b50:	1c45c83a 	sub	r2,r3,r17
   a2b54:	1c400236 	bltu	r3,r17,a2b60 <_malloc_r+0x484>
   a2b58:	00c003c4 	movi	r3,15
   a2b5c:	18800416 	blt	r3,r2,a2b70 <_malloc_r+0x494>
   a2b60:	9009883a 	mov	r4,r18
   a2b64:	00abdb80 	call	abdb8 <__malloc_unlock>
   a2b68:	0005883a 	mov	r2,zero
   a2b6c:	003f0906 	br	a2794 <_malloc_r+0xb8>
   a2b70:	88c00054 	ori	r3,r17,1
   a2b74:	10800054 	ori	r2,r2,1
   a2b78:	80c00115 	stw	r3,4(r16)
   a2b7c:	8463883a 	add	r17,r16,r17
   a2b80:	88800115 	stw	r2,4(r17)
   a2b84:	9009883a 	mov	r4,r18
   a2b88:	9c400215 	stw	r17,8(r19)
   a2b8c:	00abdb80 	call	abdb8 <__malloc_unlock>
   a2b90:	80800204 	addi	r2,r16,8
   a2b94:	003eff06 	br	a2794 <_malloc_r+0xb8>
   a2b98:	00800504 	movi	r2,20
   a2b9c:	1100492e 	bgeu	r2,r4,a2cc4 <_malloc_r+0x5e8>
   a2ba0:	00801504 	movi	r2,84
   a2ba4:	11005c36 	bltu	r2,r4,a2d18 <_malloc_r+0x63c>
   a2ba8:	8808d33a 	srli	r4,r17,12
   a2bac:	21001b84 	addi	r4,r4,110
   a2bb0:	210b883a 	add	r5,r4,r4
   a2bb4:	003f1006 	br	a27f8 <_malloc_r+0x11c>
   a2bb8:	1006d27a 	srli	r3,r2,9
   a2bbc:	01400104 	movi	r5,4
   a2bc0:	28c0432e 	bgeu	r5,r3,a2cd0 <_malloc_r+0x5f4>
   a2bc4:	01400504 	movi	r5,20
   a2bc8:	28c07036 	bltu	r5,r3,a2d8c <_malloc_r+0x6b0>
   a2bcc:	194016c4 	addi	r5,r3,91
   a2bd0:	294d883a 	add	r6,r5,r5
   a2bd4:	318d883a 	add	r6,r6,r6
   a2bd8:	318d883a 	add	r6,r6,r6
   a2bdc:	998d883a 	add	r6,r19,r6
   a2be0:	30c00217 	ldw	r3,8(r6)
   a2be4:	01c002f4 	movhi	r7,11
   a2be8:	39fd1704 	addi	r7,r7,-2980
   a2bec:	19805726 	beq	r3,r6,a2d4c <_malloc_r+0x670>
   a2bf0:	01ffff04 	movi	r7,-4
   a2bf4:	19400117 	ldw	r5,4(r3)
   a2bf8:	29ca703a 	and	r5,r5,r7
   a2bfc:	1140022e 	bgeu	r2,r5,a2c08 <_malloc_r+0x52c>
   a2c00:	18c00217 	ldw	r3,8(r3)
   a2c04:	30fffb1e 	bne	r6,r3,a2bf4 <_malloc_r+0x518>
   a2c08:	19400317 	ldw	r5,12(r3)
   a2c0c:	98800117 	ldw	r2,4(r19)
   a2c10:	81400315 	stw	r5,12(r16)
   a2c14:	80c00215 	stw	r3,8(r16)
   a2c18:	2c000215 	stw	r16,8(r5)
   a2c1c:	1c000315 	stw	r16,12(r3)
   a2c20:	003f2b06 	br	a28d0 <_malloc_r+0x1f4>
   a2c24:	8445883a 	add	r2,r16,r17
   a2c28:	8c400054 	ori	r17,r17,1
   a2c2c:	18800515 	stw	r2,20(r3)
   a2c30:	18800415 	stw	r2,16(r3)
   a2c34:	29000054 	ori	r4,r5,1
   a2c38:	1147883a 	add	r3,r2,r5
   a2c3c:	84400115 	stw	r17,4(r16)
   a2c40:	11000115 	stw	r4,4(r2)
   a2c44:	12400315 	stw	r9,12(r2)
   a2c48:	12400215 	stw	r9,8(r2)
   a2c4c:	19400015 	stw	r5,0(r3)
   a2c50:	9009883a 	mov	r4,r18
   a2c54:	00abdb80 	call	abdb8 <__malloc_unlock>
   a2c58:	80800204 	addi	r2,r16,8
   a2c5c:	003ecd06 	br	a2794 <_malloc_r+0xb8>
   a2c60:	18800117 	ldw	r2,4(r3)
   a2c64:	003f1a06 	br	a28d0 <_malloc_r+0x1f4>
   a2c68:	5ac00044 	addi	r11,r11,1
   a2c6c:	588000cc 	andi	r2,r11,3
   a2c70:	52800204 	addi	r10,r10,8
   a2c74:	103f2e1e 	bne	r2,zero,a2930 <_malloc_r+0x254>
   a2c78:	20c000cc 	andi	r3,r4,3
   a2c7c:	60bffe04 	addi	r2,r12,-8
   a2c80:	18006f26 	beq	r3,zero,a2e40 <_malloc_r+0x764>
   a2c84:	63000017 	ldw	r12,0(r12)
   a2c88:	213fffc4 	addi	r4,r4,-1
   a2c8c:	60bffa26 	beq	r12,r2,a2c78 <_malloc_r+0x59c>
   a2c90:	98800117 	ldw	r2,4(r19)
   a2c94:	294b883a 	add	r5,r5,r5
   a2c98:	117f5a36 	bltu	r2,r5,a2a04 <_malloc_r+0x328>
   a2c9c:	283f5926 	beq	r5,zero,a2a04 <_malloc_r+0x328>
   a2ca0:	1146703a 	and	r3,r2,r5
   a2ca4:	18001626 	beq	r3,zero,a2d00 <_malloc_r+0x624>
   a2ca8:	5809883a 	mov	r4,r11
   a2cac:	003f1a06 	br	a2918 <_malloc_r+0x23c>
   a2cb0:	80800204 	addi	r2,r16,8
   a2cb4:	84000517 	ldw	r16,20(r16)
   a2cb8:	143ea81e 	bne	r2,r16,a275c <_malloc_r+0x80>
   a2cbc:	21000084 	addi	r4,r4,2
   a2cc0:	003ee306 	br	a2850 <_malloc_r+0x174>
   a2cc4:	210016c4 	addi	r4,r4,91
   a2cc8:	210b883a 	add	r5,r4,r4
   a2ccc:	003eca06 	br	a27f8 <_malloc_r+0x11c>
   a2cd0:	100ad1ba 	srli	r5,r2,6
   a2cd4:	29400e04 	addi	r5,r5,56
   a2cd8:	294d883a 	add	r6,r5,r5
   a2cdc:	003fbd06 	br	a2bd4 <_malloc_r+0x4f8>
   a2ce0:	84ff6026 	beq	r16,r19,a2a64 <_malloc_r+0x388>
   a2ce4:	008002f4 	movhi	r2,11
   a2ce8:	10bd1704 	addi	r2,r2,-2980
   a2cec:	14000217 	ldw	r16,8(r2)
   a2cf0:	00bfff04 	movi	r2,-4
   a2cf4:	80c00117 	ldw	r3,4(r16)
   a2cf8:	1886703a 	and	r3,r3,r2
   a2cfc:	003f9406 	br	a2b50 <_malloc_r+0x474>
   a2d00:	294b883a 	add	r5,r5,r5
   a2d04:	1146703a 	and	r3,r2,r5
   a2d08:	5ac00104 	addi	r11,r11,4
   a2d0c:	183ffc26 	beq	r3,zero,a2d00 <_malloc_r+0x624>
   a2d10:	5809883a 	mov	r4,r11
   a2d14:	003f0006 	br	a2918 <_malloc_r+0x23c>
   a2d18:	00805504 	movi	r2,340
   a2d1c:	11001336 	bltu	r2,r4,a2d6c <_malloc_r+0x690>
   a2d20:	8808d3fa 	srli	r4,r17,15
   a2d24:	21001dc4 	addi	r4,r4,119
   a2d28:	210b883a 	add	r5,r4,r4
   a2d2c:	003eb206 	br	a27f8 <_malloc_r+0x11c>
   a2d30:	00840004 	movi	r2,4096
   a2d34:	003f5d06 	br	a2aac <_malloc_r+0x3d0>
   a2d38:	00800044 	movi	r2,1
   a2d3c:	a0800115 	stw	r2,4(r20)
   a2d40:	a021883a 	mov	r16,r20
   a2d44:	0007883a 	mov	r3,zero
   a2d48:	003f8106 	br	a2b50 <_malloc_r+0x474>
   a2d4c:	280bd0ba 	srai	r5,r5,2
   a2d50:	01800044 	movi	r6,1
   a2d54:	38800117 	ldw	r2,4(r7)
   a2d58:	314c983a 	sll	r6,r6,r5
   a2d5c:	180b883a 	mov	r5,r3
   a2d60:	3084b03a 	or	r2,r6,r2
   a2d64:	38800115 	stw	r2,4(r7)
   a2d68:	003fa906 	br	a2c10 <_malloc_r+0x534>
   a2d6c:	00815504 	movi	r2,1364
   a2d70:	11001836 	bltu	r2,r4,a2dd4 <_malloc_r+0x6f8>
   a2d74:	8808d4ba 	srli	r4,r17,18
   a2d78:	21001f04 	addi	r4,r4,124
   a2d7c:	210b883a 	add	r5,r4,r4
   a2d80:	003e9d06 	br	a27f8 <_malloc_r+0x11c>
   a2d84:	bdc00404 	addi	r23,r23,16
   a2d88:	003f2f06 	br	a2a48 <_malloc_r+0x36c>
   a2d8c:	01401504 	movi	r5,84
   a2d90:	28c01f36 	bltu	r5,r3,a2e10 <_malloc_r+0x734>
   a2d94:	100ad33a 	srli	r5,r2,12
   a2d98:	29401b84 	addi	r5,r5,110
   a2d9c:	294d883a 	add	r6,r5,r5
   a2da0:	003f8c06 	br	a2bd4 <_malloc_r+0x4f8>
   a2da4:	9c000217 	ldw	r16,8(r19)
   a2da8:	00bfff04 	movi	r2,-4
   a2dac:	80c00117 	ldw	r3,4(r16)
   a2db0:	1886703a 	and	r3,r3,r2
   a2db4:	003f6606 	br	a2b50 <_malloc_r+0x474>
   a2db8:	e0c3ffcc 	andi	r3,fp,4095
   a2dbc:	183f2f1e 	bne	r3,zero,a2a7c <_malloc_r+0x3a0>
   a2dc0:	98c00217 	ldw	r3,8(r19)
   a2dc4:	bd49883a 	add	r4,r23,r21
   a2dc8:	21000054 	ori	r4,r4,1
   a2dcc:	19000115 	stw	r4,4(r3)
   a2dd0:	003f5506 	br	a2b28 <_malloc_r+0x44c>
   a2dd4:	01403f04 	movi	r5,252
   a2dd8:	01001f84 	movi	r4,126
   a2ddc:	003e8606 	br	a27f8 <_malloc_r+0x11c>
   a2de0:	9009883a 	mov	r4,r18
   a2de4:	81400204 	addi	r5,r16,8
   a2de8:	00a1c040 	call	a1c04 <_free_r>
   a2dec:	008002f4 	movhi	r2,11
   a2df0:	10898c04 	addi	r2,r2,9776
   a2df4:	10800017 	ldw	r2,0(r2)
   a2df8:	003f4b06 	br	a2b28 <_malloc_r+0x44c>
   a2dfc:	00c00044 	movi	r3,1
   a2e00:	002f883a 	mov	r23,zero
   a2e04:	003f3406 	br	a2ad8 <_malloc_r+0x3fc>
   a2e08:	d5200215 	stw	r20,-32760(gp)
   a2e0c:	003f2106 	br	a2a94 <_malloc_r+0x3b8>
   a2e10:	01405504 	movi	r5,340
   a2e14:	28c00436 	bltu	r5,r3,a2e28 <_malloc_r+0x74c>
   a2e18:	100ad3fa 	srli	r5,r2,15
   a2e1c:	29401dc4 	addi	r5,r5,119
   a2e20:	294d883a 	add	r6,r5,r5
   a2e24:	003f6b06 	br	a2bd4 <_malloc_r+0x4f8>
   a2e28:	01415504 	movi	r5,1364
   a2e2c:	28c00936 	bltu	r5,r3,a2e54 <_malloc_r+0x778>
   a2e30:	100ad4ba 	srli	r5,r2,18
   a2e34:	29401f04 	addi	r5,r5,124
   a2e38:	294d883a 	add	r6,r5,r5
   a2e3c:	003f6506 	br	a2bd4 <_malloc_r+0x4f8>
   a2e40:	98800117 	ldw	r2,4(r19)
   a2e44:	0146303a 	nor	r3,zero,r5
   a2e48:	1884703a 	and	r2,r3,r2
   a2e4c:	98800115 	stw	r2,4(r19)
   a2e50:	003f9006 	br	a2c94 <_malloc_r+0x5b8>
   a2e54:	01803f04 	movi	r6,252
   a2e58:	01401f84 	movi	r5,126
   a2e5c:	003f5d06 	br	a2bd4 <_malloc_r+0x4f8>

000a2e60 <memset>:
   a2e60:	00c000c4 	movi	r3,3
   a2e64:	2005883a 	mov	r2,r4
   a2e68:	29403fcc 	andi	r5,r5,255
   a2e6c:	19802d2e 	bgeu	r3,r6,a2f24 <memset+0xc4>
   a2e70:	20c6703a 	and	r3,r4,r3
   a2e74:	18002e1e 	bne	r3,zero,a2f30 <memset+0xd0>
   a2e78:	2806923a 	slli	r3,r5,8
   a2e7c:	010003c4 	movi	r4,15
   a2e80:	3011883a 	mov	r8,r6
   a2e84:	1946b03a 	or	r3,r3,r5
   a2e88:	180e943a 	slli	r7,r3,16
   a2e8c:	38ceb03a 	or	r7,r7,r3
   a2e90:	1007883a 	mov	r3,r2
   a2e94:	21800f2e 	bgeu	r4,r6,a2ed4 <memset+0x74>
   a2e98:	19c00015 	stw	r7,0(r3)
   a2e9c:	19c00115 	stw	r7,4(r3)
   a2ea0:	19c00215 	stw	r7,8(r3)
   a2ea4:	19c00315 	stw	r7,12(r3)
   a2ea8:	423ffc04 	addi	r8,r8,-16
   a2eac:	18c00404 	addi	r3,r3,16
   a2eb0:	223ff936 	bltu	r4,r8,a2e98 <memset+0x38>
   a2eb4:	30fffc04 	addi	r3,r6,-16
   a2eb8:	1806d13a 	srli	r3,r3,4
   a2ebc:	318003cc 	andi	r6,r6,15
   a2ec0:	010000c4 	movi	r4,3
   a2ec4:	18c00044 	addi	r3,r3,1
   a2ec8:	1806913a 	slli	r3,r3,4
   a2ecc:	10c7883a 	add	r3,r2,r3
   a2ed0:	21800e2e 	bgeu	r4,r6,a2f0c <memset+0xac>
   a2ed4:	1813883a 	mov	r9,r3
   a2ed8:	3011883a 	mov	r8,r6
   a2edc:	010000c4 	movi	r4,3
   a2ee0:	49c00015 	stw	r7,0(r9)
   a2ee4:	423fff04 	addi	r8,r8,-4
   a2ee8:	4a400104 	addi	r9,r9,4
   a2eec:	223ffc36 	bltu	r4,r8,a2ee0 <memset+0x80>
   a2ef0:	313fff04 	addi	r4,r6,-4
   a2ef4:	2008d0ba 	srli	r4,r4,2
   a2ef8:	318000cc 	andi	r6,r6,3
   a2efc:	21000044 	addi	r4,r4,1
   a2f00:	2109883a 	add	r4,r4,r4
   a2f04:	2109883a 	add	r4,r4,r4
   a2f08:	1907883a 	add	r3,r3,r4
   a2f0c:	30000a26 	beq	r6,zero,a2f38 <memset+0xd8>
   a2f10:	198d883a 	add	r6,r3,r6
   a2f14:	19400005 	stb	r5,0(r3)
   a2f18:	18c00044 	addi	r3,r3,1
   a2f1c:	19bffd1e 	bne	r3,r6,a2f14 <memset+0xb4>
   a2f20:	f800283a 	ret
   a2f24:	2007883a 	mov	r3,r4
   a2f28:	303ff91e 	bne	r6,zero,a2f10 <memset+0xb0>
   a2f2c:	00000206 	br	a2f38 <memset+0xd8>
   a2f30:	2007883a 	mov	r3,r4
   a2f34:	003ff606 	br	a2f10 <memset+0xb0>
   a2f38:	f800283a 	ret

000a2f3c <_open_r>:
   a2f3c:	defffd04 	addi	sp,sp,-12
   a2f40:	dc400115 	stw	r17,4(sp)
   a2f44:	dc000015 	stw	r16,0(sp)
   a2f48:	2023883a 	mov	r17,r4
   a2f4c:	040002f4 	movhi	r16,11
   a2f50:	84097d04 	addi	r16,r16,9716
   a2f54:	2809883a 	mov	r4,r5
   a2f58:	300b883a 	mov	r5,r6
   a2f5c:	380d883a 	mov	r6,r7
   a2f60:	dfc00215 	stw	ra,8(sp)
   a2f64:	80000015 	stw	zero,0(r16)
   a2f68:	00abf180 	call	abf18 <open>
   a2f6c:	00ffffc4 	movi	r3,-1
   a2f70:	10c00526 	beq	r2,r3,a2f88 <_open_r+0x4c>
   a2f74:	dfc00217 	ldw	ra,8(sp)
   a2f78:	dc400117 	ldw	r17,4(sp)
   a2f7c:	dc000017 	ldw	r16,0(sp)
   a2f80:	dec00304 	addi	sp,sp,12
   a2f84:	f800283a 	ret
   a2f88:	80c00017 	ldw	r3,0(r16)
   a2f8c:	183ff926 	beq	r3,zero,a2f74 <_open_r+0x38>
   a2f90:	88c00015 	stw	r3,0(r17)
   a2f94:	dfc00217 	ldw	ra,8(sp)
   a2f98:	dc400117 	ldw	r17,4(sp)
   a2f9c:	dc000017 	ldw	r16,0(sp)
   a2fa0:	dec00304 	addi	sp,sp,12
   a2fa4:	f800283a 	ret

000a2fa8 <_printf_r>:
   a2fa8:	defffd04 	addi	sp,sp,-12
   a2fac:	dfc00015 	stw	ra,0(sp)
   a2fb0:	d9800115 	stw	r6,4(sp)
   a2fb4:	d9c00215 	stw	r7,8(sp)
   a2fb8:	280d883a 	mov	r6,r5
   a2fbc:	21400217 	ldw	r5,8(r4)
   a2fc0:	d9c00104 	addi	r7,sp,4
   a2fc4:	00a36c80 	call	a36c8 <___vfprintf_internal_r>
   a2fc8:	dfc00017 	ldw	ra,0(sp)
   a2fcc:	dec00304 	addi	sp,sp,12
   a2fd0:	f800283a 	ret

000a2fd4 <printf>:
   a2fd4:	defffc04 	addi	sp,sp,-16
   a2fd8:	dfc00015 	stw	ra,0(sp)
   a2fdc:	d9400115 	stw	r5,4(sp)
   a2fe0:	d9800215 	stw	r6,8(sp)
   a2fe4:	d9c00315 	stw	r7,12(sp)
   a2fe8:	008002f4 	movhi	r2,11
   a2fec:	1082a904 	addi	r2,r2,2724
   a2ff0:	10800017 	ldw	r2,0(r2)
   a2ff4:	200b883a 	mov	r5,r4
   a2ff8:	d9800104 	addi	r6,sp,4
   a2ffc:	11000217 	ldw	r4,8(r2)
   a3000:	00a55440 	call	a5544 <__vfprintf_internal>
   a3004:	dfc00017 	ldw	ra,0(sp)
   a3008:	dec00404 	addi	sp,sp,16
   a300c:	f800283a 	ret

000a3010 <_putc_r>:
   a3010:	defffc04 	addi	sp,sp,-16
   a3014:	dc000215 	stw	r16,8(sp)
   a3018:	dfc00315 	stw	ra,12(sp)
   a301c:	2021883a 	mov	r16,r4
   a3020:	20000226 	beq	r4,zero,a302c <_putc_r+0x1c>
   a3024:	20800e17 	ldw	r2,56(r4)
   a3028:	10001d26 	beq	r2,zero,a30a0 <_putc_r+0x90>
   a302c:	30800217 	ldw	r2,8(r6)
   a3030:	10bfffc4 	addi	r2,r2,-1
   a3034:	30800215 	stw	r2,8(r6)
   a3038:	10000a16 	blt	r2,zero,a3064 <_putc_r+0x54>
   a303c:	30800017 	ldw	r2,0(r6)
   a3040:	11400005 	stb	r5,0(r2)
   a3044:	30800017 	ldw	r2,0(r6)
   a3048:	10c00044 	addi	r3,r2,1
   a304c:	10800003 	ldbu	r2,0(r2)
   a3050:	30c00015 	stw	r3,0(r6)
   a3054:	dfc00317 	ldw	ra,12(sp)
   a3058:	dc000217 	ldw	r16,8(sp)
   a305c:	dec00404 	addi	sp,sp,16
   a3060:	f800283a 	ret
   a3064:	30c00617 	ldw	r3,24(r6)
   a3068:	10c01316 	blt	r2,r3,a30b8 <_putc_r+0xa8>
   a306c:	30800017 	ldw	r2,0(r6)
   a3070:	01000284 	movi	r4,10
   a3074:	11400005 	stb	r5,0(r2)
   a3078:	30c00017 	ldw	r3,0(r6)
   a307c:	19400003 	ldbu	r5,0(r3)
   a3080:	29000d26 	beq	r5,r4,a30b8 <_putc_r+0xa8>
   a3084:	18c00044 	addi	r3,r3,1
   a3088:	2805883a 	mov	r2,r5
   a308c:	30c00015 	stw	r3,0(r6)
   a3090:	dfc00317 	ldw	ra,12(sp)
   a3094:	dc000217 	ldw	r16,8(sp)
   a3098:	dec00404 	addi	sp,sp,16
   a309c:	f800283a 	ret
   a30a0:	d9400015 	stw	r5,0(sp)
   a30a4:	d9800115 	stw	r6,4(sp)
   a30a8:	00a16440 	call	a1644 <__sinit>
   a30ac:	d9800117 	ldw	r6,4(sp)
   a30b0:	d9400017 	ldw	r5,0(sp)
   a30b4:	003fdd06 	br	a302c <_putc_r+0x1c>
   a30b8:	8009883a 	mov	r4,r16
   a30bc:	dfc00317 	ldw	ra,12(sp)
   a30c0:	dc000217 	ldw	r16,8(sp)
   a30c4:	dec00404 	addi	sp,sp,16
   a30c8:	00a55681 	jmpi	a5568 <__swbuf_r>

000a30cc <putc>:
   a30cc:	defffc04 	addi	sp,sp,-16
   a30d0:	dc400115 	stw	r17,4(sp)
   a30d4:	044002f4 	movhi	r17,11
   a30d8:	8c42a904 	addi	r17,r17,2724
   a30dc:	88800017 	ldw	r2,0(r17)
   a30e0:	dc800215 	stw	r18,8(sp)
   a30e4:	dc000015 	stw	r16,0(sp)
   a30e8:	dfc00315 	stw	ra,12(sp)
   a30ec:	2025883a 	mov	r18,r4
   a30f0:	2821883a 	mov	r16,r5
   a30f4:	10000226 	beq	r2,zero,a3100 <putc+0x34>
   a30f8:	10c00e17 	ldw	r3,56(r2)
   a30fc:	18002126 	beq	r3,zero,a3184 <putc+0xb8>
   a3100:	80800217 	ldw	r2,8(r16)
   a3104:	10bfffc4 	addi	r2,r2,-1
   a3108:	80800215 	stw	r2,8(r16)
   a310c:	10000c16 	blt	r2,zero,a3140 <putc+0x74>
   a3110:	80800017 	ldw	r2,0(r16)
   a3114:	14800005 	stb	r18,0(r2)
   a3118:	80800017 	ldw	r2,0(r16)
   a311c:	10c00044 	addi	r3,r2,1
   a3120:	10800003 	ldbu	r2,0(r2)
   a3124:	80c00015 	stw	r3,0(r16)
   a3128:	dfc00317 	ldw	ra,12(sp)
   a312c:	dc800217 	ldw	r18,8(sp)
   a3130:	dc400117 	ldw	r17,4(sp)
   a3134:	dc000017 	ldw	r16,0(sp)
   a3138:	dec00404 	addi	sp,sp,16
   a313c:	f800283a 	ret
   a3140:	80c00617 	ldw	r3,24(r16)
   a3144:	10c01216 	blt	r2,r3,a3190 <putc+0xc4>
   a3148:	80800017 	ldw	r2,0(r16)
   a314c:	01000284 	movi	r4,10
   a3150:	14800005 	stb	r18,0(r2)
   a3154:	80c00017 	ldw	r3,0(r16)
   a3158:	19400003 	ldbu	r5,0(r3)
   a315c:	29001526 	beq	r5,r4,a31b4 <putc+0xe8>
   a3160:	18c00044 	addi	r3,r3,1
   a3164:	2805883a 	mov	r2,r5
   a3168:	80c00015 	stw	r3,0(r16)
   a316c:	dfc00317 	ldw	ra,12(sp)
   a3170:	dc800217 	ldw	r18,8(sp)
   a3174:	dc400117 	ldw	r17,4(sp)
   a3178:	dc000017 	ldw	r16,0(sp)
   a317c:	dec00404 	addi	sp,sp,16
   a3180:	f800283a 	ret
   a3184:	1009883a 	mov	r4,r2
   a3188:	00a16440 	call	a1644 <__sinit>
   a318c:	003fdc06 	br	a3100 <putc+0x34>
   a3190:	89000017 	ldw	r4,0(r17)
   a3194:	900b883a 	mov	r5,r18
   a3198:	800d883a 	mov	r6,r16
   a319c:	dfc00317 	ldw	ra,12(sp)
   a31a0:	dc800217 	ldw	r18,8(sp)
   a31a4:	dc400117 	ldw	r17,4(sp)
   a31a8:	dc000017 	ldw	r16,0(sp)
   a31ac:	dec00404 	addi	sp,sp,16
   a31b0:	00a55681 	jmpi	a5568 <__swbuf_r>
   a31b4:	89000017 	ldw	r4,0(r17)
   a31b8:	003ff706 	br	a3198 <putc+0xcc>

000a31bc <_puts_r>:
   a31bc:	defff604 	addi	sp,sp,-40
   a31c0:	dc400815 	stw	r17,32(sp)
   a31c4:	2023883a 	mov	r17,r4
   a31c8:	2809883a 	mov	r4,r5
   a31cc:	dc000715 	stw	r16,28(sp)
   a31d0:	dfc00915 	stw	ra,36(sp)
   a31d4:	2821883a 	mov	r16,r5
   a31d8:	00a36000 	call	a3600 <strlen>
   a31dc:	10c00044 	addi	r3,r2,1
   a31e0:	d8800115 	stw	r2,4(sp)
   a31e4:	89400217 	ldw	r5,8(r17)
   a31e8:	008002f4 	movhi	r2,11
   a31ec:	10bb4f04 	addi	r2,r2,-4804
   a31f0:	d8800215 	stw	r2,8(sp)
   a31f4:	00800044 	movi	r2,1
   a31f8:	d8800315 	stw	r2,12(sp)
   a31fc:	8809883a 	mov	r4,r17
   a3200:	00800084 	movi	r2,2
   a3204:	d9800404 	addi	r6,sp,16
   a3208:	dc000015 	stw	r16,0(sp)
   a320c:	d8c00615 	stw	r3,24(sp)
   a3210:	dec00415 	stw	sp,16(sp)
   a3214:	d8800515 	stw	r2,20(sp)
   a3218:	00a73940 	call	a7394 <__sfvwrite_r>
   a321c:	1000061e 	bne	r2,zero,a3238 <_puts_r+0x7c>
   a3220:	00800284 	movi	r2,10
   a3224:	dfc00917 	ldw	ra,36(sp)
   a3228:	dc400817 	ldw	r17,32(sp)
   a322c:	dc000717 	ldw	r16,28(sp)
   a3230:	dec00a04 	addi	sp,sp,40
   a3234:	f800283a 	ret
   a3238:	00bfffc4 	movi	r2,-1
   a323c:	003ff906 	br	a3224 <_puts_r+0x68>

000a3240 <puts>:
   a3240:	008002f4 	movhi	r2,11
   a3244:	1082a904 	addi	r2,r2,2724
   a3248:	200b883a 	mov	r5,r4
   a324c:	11000017 	ldw	r4,0(r2)
   a3250:	00a31bc1 	jmpi	a31bc <_puts_r>

000a3254 <lflush>:
   a3254:	20c0030b 	ldhu	r3,12(r4)
   a3258:	00800244 	movi	r2,9
   a325c:	18c0024c 	andi	r3,r3,9
   a3260:	18800226 	beq	r3,r2,a326c <lflush+0x18>
   a3264:	0005883a 	mov	r2,zero
   a3268:	f800283a 	ret
   a326c:	00a15701 	jmpi	a1570 <fflush>

000a3270 <__srefill_r>:
   a3270:	defffd04 	addi	sp,sp,-12
   a3274:	dc400115 	stw	r17,4(sp)
   a3278:	dc000015 	stw	r16,0(sp)
   a327c:	dfc00215 	stw	ra,8(sp)
   a3280:	2023883a 	mov	r17,r4
   a3284:	2821883a 	mov	r16,r5
   a3288:	20000226 	beq	r4,zero,a3294 <__srefill_r+0x24>
   a328c:	20800e17 	ldw	r2,56(r4)
   a3290:	10004426 	beq	r2,zero,a33a4 <__srefill_r+0x134>
   a3294:	8080030b 	ldhu	r2,12(r16)
   a3298:	80000115 	stw	zero,4(r16)
   a329c:	10c0080c 	andi	r3,r2,32
   a32a0:	18ffffcc 	andi	r3,r3,65535
   a32a4:	18e0001c 	xori	r3,r3,32768
   a32a8:	18e00004 	addi	r3,r3,-32768
   a32ac:	1800371e 	bne	r3,zero,a338c <__srefill_r+0x11c>
   a32b0:	10c0010c 	andi	r3,r2,4
   a32b4:	18ffffcc 	andi	r3,r3,65535
   a32b8:	18e0001c 	xori	r3,r3,32768
   a32bc:	18e00004 	addi	r3,r3,-32768
   a32c0:	18002226 	beq	r3,zero,a334c <__srefill_r+0xdc>
   a32c4:	81400c17 	ldw	r5,48(r16)
   a32c8:	28000826 	beq	r5,zero,a32ec <__srefill_r+0x7c>
   a32cc:	80801004 	addi	r2,r16,64
   a32d0:	28800226 	beq	r5,r2,a32dc <__srefill_r+0x6c>
   a32d4:	8809883a 	mov	r4,r17
   a32d8:	00a1c040 	call	a1c04 <_free_r>
   a32dc:	80800f17 	ldw	r2,60(r16)
   a32e0:	80000c15 	stw	zero,48(r16)
   a32e4:	80800115 	stw	r2,4(r16)
   a32e8:	1000401e 	bne	r2,zero,a33ec <__srefill_r+0x17c>
   a32ec:	80800417 	ldw	r2,16(r16)
   a32f0:	10005026 	beq	r2,zero,a3434 <__srefill_r+0x1c4>
   a32f4:	8080030b 	ldhu	r2,12(r16)
   a32f8:	108000cc 	andi	r2,r2,3
   a32fc:	10002b1e 	bne	r2,zero,a33ac <__srefill_r+0x13c>
   a3300:	81800417 	ldw	r6,16(r16)
   a3304:	80800817 	ldw	r2,32(r16)
   a3308:	81400717 	ldw	r5,28(r16)
   a330c:	81c00517 	ldw	r7,20(r16)
   a3310:	8809883a 	mov	r4,r17
   a3314:	81800015 	stw	r6,0(r16)
   a3318:	103ee83a 	callr	r2
   a331c:	8100030b 	ldhu	r4,12(r16)
   a3320:	00f7ffc4 	movi	r3,-8193
   a3324:	80800115 	stw	r2,4(r16)
   a3328:	20c6703a 	and	r3,r4,r3
   a332c:	80c0030d 	sth	r3,12(r16)
   a3330:	0080130e 	bge	zero,r2,a3380 <__srefill_r+0x110>
   a3334:	0005883a 	mov	r2,zero
   a3338:	dfc00217 	ldw	ra,8(sp)
   a333c:	dc400117 	ldw	r17,4(sp)
   a3340:	dc000017 	ldw	r16,0(sp)
   a3344:	dec00304 	addi	sp,sp,12
   a3348:	f800283a 	ret
   a334c:	10c0040c 	andi	r3,r2,16
   a3350:	18ffffcc 	andi	r3,r3,65535
   a3354:	18e0001c 	xori	r3,r3,32768
   a3358:	18e00004 	addi	r3,r3,-32768
   a335c:	18003926 	beq	r3,zero,a3444 <__srefill_r+0x1d4>
   a3360:	10c0020c 	andi	r3,r2,8
   a3364:	18ffffcc 	andi	r3,r3,65535
   a3368:	18e0001c 	xori	r3,r3,32768
   a336c:	18e00004 	addi	r3,r3,-32768
   a3370:	1800261e 	bne	r3,zero,a340c <__srefill_r+0x19c>
   a3374:	10800114 	ori	r2,r2,4
   a3378:	8080030d 	sth	r2,12(r16)
   a337c:	003fdb06 	br	a32ec <__srefill_r+0x7c>
   a3380:	1000111e 	bne	r2,zero,a33c8 <__srefill_r+0x158>
   a3384:	18c00814 	ori	r3,r3,32
   a3388:	80c0030d 	sth	r3,12(r16)
   a338c:	00bfffc4 	movi	r2,-1
   a3390:	dfc00217 	ldw	ra,8(sp)
   a3394:	dc400117 	ldw	r17,4(sp)
   a3398:	dc000017 	ldw	r16,0(sp)
   a339c:	dec00304 	addi	sp,sp,12
   a33a0:	f800283a 	ret
   a33a4:	00a16440 	call	a1644 <__sinit>
   a33a8:	003fba06 	br	a3294 <__srefill_r+0x24>
   a33ac:	008002f4 	movhi	r2,11
   a33b0:	1082a804 	addi	r2,r2,2720
   a33b4:	11000017 	ldw	r4,0(r2)
   a33b8:	014002b4 	movhi	r5,10
   a33bc:	294c9504 	addi	r5,r5,12884
   a33c0:	00a23d40 	call	a23d4 <_fwalk>
   a33c4:	003fce06 	br	a3300 <__srefill_r+0x90>
   a33c8:	18c01014 	ori	r3,r3,64
   a33cc:	00bfffc4 	movi	r2,-1
   a33d0:	80000115 	stw	zero,4(r16)
   a33d4:	80c0030d 	sth	r3,12(r16)
   a33d8:	dfc00217 	ldw	ra,8(sp)
   a33dc:	dc400117 	ldw	r17,4(sp)
   a33e0:	dc000017 	ldw	r16,0(sp)
   a33e4:	dec00304 	addi	sp,sp,12
   a33e8:	f800283a 	ret
   a33ec:	80c00e17 	ldw	r3,56(r16)
   a33f0:	0005883a 	mov	r2,zero
   a33f4:	80c00015 	stw	r3,0(r16)
   a33f8:	dfc00217 	ldw	ra,8(sp)
   a33fc:	dc400117 	ldw	r17,4(sp)
   a3400:	dc000017 	ldw	r16,0(sp)
   a3404:	dec00304 	addi	sp,sp,12
   a3408:	f800283a 	ret
   a340c:	8809883a 	mov	r4,r17
   a3410:	800b883a 	mov	r5,r16
   a3414:	00a13880 	call	a1388 <_fflush_r>
   a3418:	103fdc1e 	bne	r2,zero,a338c <__srefill_r+0x11c>
   a341c:	8080030b 	ldhu	r2,12(r16)
   a3420:	00fffdc4 	movi	r3,-9
   a3424:	80000215 	stw	zero,8(r16)
   a3428:	1884703a 	and	r2,r3,r2
   a342c:	80000615 	stw	zero,24(r16)
   a3430:	003fd006 	br	a3374 <__srefill_r+0x104>
   a3434:	8809883a 	mov	r4,r17
   a3438:	800b883a 	mov	r5,r16
   a343c:	00a25340 	call	a2534 <__smakebuf_r>
   a3440:	003fac06 	br	a32f4 <__srefill_r+0x84>
   a3444:	00c00244 	movi	r3,9
   a3448:	10801014 	ori	r2,r2,64
   a344c:	88c00015 	stw	r3,0(r17)
   a3450:	8080030d 	sth	r2,12(r16)
   a3454:	00bfffc4 	movi	r2,-1
   a3458:	003fb706 	br	a3338 <__srefill_r+0xc8>

000a345c <_sbrk_r>:
   a345c:	defffd04 	addi	sp,sp,-12
   a3460:	dc400115 	stw	r17,4(sp)
   a3464:	dc000015 	stw	r16,0(sp)
   a3468:	2023883a 	mov	r17,r4
   a346c:	040002f4 	movhi	r16,11
   a3470:	84097d04 	addi	r16,r16,9716
   a3474:	2809883a 	mov	r4,r5
   a3478:	dfc00215 	stw	ra,8(sp)
   a347c:	80000015 	stw	zero,0(r16)
   a3480:	00ac2340 	call	ac234 <sbrk>
   a3484:	00ffffc4 	movi	r3,-1
   a3488:	10c00526 	beq	r2,r3,a34a0 <_sbrk_r+0x44>
   a348c:	dfc00217 	ldw	ra,8(sp)
   a3490:	dc400117 	ldw	r17,4(sp)
   a3494:	dc000017 	ldw	r16,0(sp)
   a3498:	dec00304 	addi	sp,sp,12
   a349c:	f800283a 	ret
   a34a0:	80c00017 	ldw	r3,0(r16)
   a34a4:	183ff926 	beq	r3,zero,a348c <_sbrk_r+0x30>
   a34a8:	88c00015 	stw	r3,0(r17)
   a34ac:	dfc00217 	ldw	ra,8(sp)
   a34b0:	dc400117 	ldw	r17,4(sp)
   a34b4:	dc000017 	ldw	r16,0(sp)
   a34b8:	dec00304 	addi	sp,sp,12
   a34bc:	f800283a 	ret

000a34c0 <__sread>:
   a34c0:	defffe04 	addi	sp,sp,-8
   a34c4:	dc000015 	stw	r16,0(sp)
   a34c8:	2821883a 	mov	r16,r5
   a34cc:	2940038f 	ldh	r5,14(r5)
   a34d0:	dfc00115 	stw	ra,4(sp)
   a34d4:	00a8e380 	call	a8e38 <_read_r>
   a34d8:	10000716 	blt	r2,zero,a34f8 <__sread+0x38>
   a34dc:	80c01417 	ldw	r3,80(r16)
   a34e0:	1887883a 	add	r3,r3,r2
   a34e4:	80c01415 	stw	r3,80(r16)
   a34e8:	dfc00117 	ldw	ra,4(sp)
   a34ec:	dc000017 	ldw	r16,0(sp)
   a34f0:	dec00204 	addi	sp,sp,8
   a34f4:	f800283a 	ret
   a34f8:	80c0030b 	ldhu	r3,12(r16)
   a34fc:	18fbffcc 	andi	r3,r3,61439
   a3500:	80c0030d 	sth	r3,12(r16)
   a3504:	dfc00117 	ldw	ra,4(sp)
   a3508:	dc000017 	ldw	r16,0(sp)
   a350c:	dec00204 	addi	sp,sp,8
   a3510:	f800283a 	ret

000a3514 <__swrite>:
   a3514:	2880030b 	ldhu	r2,12(r5)
   a3518:	defffb04 	addi	sp,sp,-20
   a351c:	dcc00315 	stw	r19,12(sp)
   a3520:	10c0400c 	andi	r3,r2,256
   a3524:	18ffffcc 	andi	r3,r3,65535
   a3528:	18e0001c 	xori	r3,r3,32768
   a352c:	dc800215 	stw	r18,8(sp)
   a3530:	dc400115 	stw	r17,4(sp)
   a3534:	dc000015 	stw	r16,0(sp)
   a3538:	dfc00415 	stw	ra,16(sp)
   a353c:	18e00004 	addi	r3,r3,-32768
   a3540:	2821883a 	mov	r16,r5
   a3544:	2027883a 	mov	r19,r4
   a3548:	3025883a 	mov	r18,r6
   a354c:	3823883a 	mov	r17,r7
   a3550:	18000526 	beq	r3,zero,a3568 <__swrite+0x54>
   a3554:	2940038f 	ldh	r5,14(r5)
   a3558:	000d883a 	mov	r6,zero
   a355c:	01c00084 	movi	r7,2
   a3560:	00a79b80 	call	a79b8 <_lseek_r>
   a3564:	8080030b 	ldhu	r2,12(r16)
   a3568:	8140038f 	ldh	r5,14(r16)
   a356c:	10bbffcc 	andi	r2,r2,61439
   a3570:	9809883a 	mov	r4,r19
   a3574:	900d883a 	mov	r6,r18
   a3578:	880f883a 	mov	r7,r17
   a357c:	8080030d 	sth	r2,12(r16)
   a3580:	dfc00417 	ldw	ra,16(sp)
   a3584:	dcc00317 	ldw	r19,12(sp)
   a3588:	dc800217 	ldw	r18,8(sp)
   a358c:	dc400117 	ldw	r17,4(sp)
   a3590:	dc000017 	ldw	r16,0(sp)
   a3594:	dec00504 	addi	sp,sp,20
   a3598:	00a56c01 	jmpi	a56c0 <_write_r>

000a359c <__sseek>:
   a359c:	defffe04 	addi	sp,sp,-8
   a35a0:	dc000015 	stw	r16,0(sp)
   a35a4:	2821883a 	mov	r16,r5
   a35a8:	2940038f 	ldh	r5,14(r5)
   a35ac:	dfc00115 	stw	ra,4(sp)
   a35b0:	00a79b80 	call	a79b8 <_lseek_r>
   a35b4:	00ffffc4 	movi	r3,-1
   a35b8:	10c00826 	beq	r2,r3,a35dc <__sseek+0x40>
   a35bc:	80c0030b 	ldhu	r3,12(r16)
   a35c0:	80801415 	stw	r2,80(r16)
   a35c4:	18c40014 	ori	r3,r3,4096
   a35c8:	80c0030d 	sth	r3,12(r16)
   a35cc:	dfc00117 	ldw	ra,4(sp)
   a35d0:	dc000017 	ldw	r16,0(sp)
   a35d4:	dec00204 	addi	sp,sp,8
   a35d8:	f800283a 	ret
   a35dc:	80c0030b 	ldhu	r3,12(r16)
   a35e0:	18fbffcc 	andi	r3,r3,61439
   a35e4:	80c0030d 	sth	r3,12(r16)
   a35e8:	dfc00117 	ldw	ra,4(sp)
   a35ec:	dc000017 	ldw	r16,0(sp)
   a35f0:	dec00204 	addi	sp,sp,8
   a35f4:	f800283a 	ret

000a35f8 <__sclose>:
   a35f8:	2940038f 	ldh	r5,14(r5)
   a35fc:	00a5a401 	jmpi	a5a40 <_close_r>

000a3600 <strlen>:
   a3600:	208000cc 	andi	r2,r4,3
   a3604:	10001f1e 	bne	r2,zero,a3684 <strlen+0x84>
   a3608:	20800017 	ldw	r2,0(r4)
   a360c:	01ffbff4 	movhi	r7,65279
   a3610:	39ffbfc4 	addi	r7,r7,-257
   a3614:	01a02074 	movhi	r6,32897
   a3618:	31a02004 	addi	r6,r6,-32640
   a361c:	11c7883a 	add	r3,r2,r7
   a3620:	0084303a 	nor	r2,zero,r2
   a3624:	1886703a 	and	r3,r3,r2
   a3628:	1986703a 	and	r3,r3,r6
   a362c:	2005883a 	mov	r2,r4
   a3630:	1800101e 	bne	r3,zero,a3674 <strlen+0x74>
   a3634:	10800104 	addi	r2,r2,4
   a3638:	10c00017 	ldw	r3,0(r2)
   a363c:	19cb883a 	add	r5,r3,r7
   a3640:	00c6303a 	nor	r3,zero,r3
   a3644:	28c6703a 	and	r3,r5,r3
   a3648:	1986703a 	and	r3,r3,r6
   a364c:	1800091e 	bne	r3,zero,a3674 <strlen+0x74>
   a3650:	10800104 	addi	r2,r2,4
   a3654:	10c00017 	ldw	r3,0(r2)
   a3658:	19cb883a 	add	r5,r3,r7
   a365c:	00c6303a 	nor	r3,zero,r3
   a3660:	28c6703a 	and	r3,r5,r3
   a3664:	1986703a 	and	r3,r3,r6
   a3668:	183ff226 	beq	r3,zero,a3634 <strlen+0x34>
   a366c:	00000106 	br	a3674 <strlen+0x74>
   a3670:	10800044 	addi	r2,r2,1
   a3674:	10c00007 	ldb	r3,0(r2)
   a3678:	183ffd1e 	bne	r3,zero,a3670 <strlen+0x70>
   a367c:	1105c83a 	sub	r2,r2,r4
   a3680:	f800283a 	ret
   a3684:	2005883a 	mov	r2,r4
   a3688:	003ffa06 	br	a3674 <strlen+0x74>

000a368c <_times_r>:
   a368c:	2809883a 	mov	r4,r5
   a3690:	00ac3341 	jmpi	ac334 <times>

000a3694 <__sprint_r>:
   a3694:	30800217 	ldw	r2,8(r6)
   a3698:	defffe04 	addi	sp,sp,-8
   a369c:	dc000015 	stw	r16,0(sp)
   a36a0:	dfc00115 	stw	ra,4(sp)
   a36a4:	3021883a 	mov	r16,r6
   a36a8:	10000226 	beq	r2,zero,a36b4 <__sprint_r+0x20>
   a36ac:	00a73940 	call	a7394 <__sfvwrite_r>
   a36b0:	80000215 	stw	zero,8(r16)
   a36b4:	80000115 	stw	zero,4(r16)
   a36b8:	dfc00117 	ldw	ra,4(sp)
   a36bc:	dc000017 	ldw	r16,0(sp)
   a36c0:	dec00204 	addi	sp,sp,8
   a36c4:	f800283a 	ret

000a36c8 <___vfprintf_internal_r>:
   a36c8:	defeb904 	addi	sp,sp,-1308
   a36cc:	dc013d15 	stw	r16,1268(sp)
   a36d0:	d9013015 	stw	r4,1216(sp)
   a36d4:	dfc14615 	stw	ra,1304(sp)
   a36d8:	df014515 	stw	fp,1300(sp)
   a36dc:	ddc14415 	stw	r23,1296(sp)
   a36e0:	dd814315 	stw	r22,1292(sp)
   a36e4:	dd414215 	stw	r21,1288(sp)
   a36e8:	dd014115 	stw	r20,1284(sp)
   a36ec:	dcc14015 	stw	r19,1280(sp)
   a36f0:	dc813f15 	stw	r18,1276(sp)
   a36f4:	dc413e15 	stw	r17,1272(sp)
   a36f8:	d9412915 	stw	r5,1188(sp)
   a36fc:	3021883a 	mov	r16,r6
   a3700:	d9c12d15 	stw	r7,1204(sp)
   a3704:	00a79840 	call	a7984 <_localeconv_r>
   a3708:	10800017 	ldw	r2,0(r2)
   a370c:	d9013017 	ldw	r4,1216(sp)
   a3710:	d8013315 	stw	zero,1228(sp)
   a3714:	d8813715 	stw	r2,1244(sp)
   a3718:	d8013415 	stw	zero,1232(sp)
   a371c:	20000226 	beq	r4,zero,a3728 <___vfprintf_internal_r+0x60>
   a3720:	20800e17 	ldw	r2,56(r4)
   a3724:	10014b26 	beq	r2,zero,a3c54 <___vfprintf_internal_r+0x58c>
   a3728:	d8c12917 	ldw	r3,1188(sp)
   a372c:	1880030b 	ldhu	r2,12(r3)
   a3730:	10c0020c 	andi	r3,r2,8
   a3734:	18ffffcc 	andi	r3,r3,65535
   a3738:	18e0001c 	xori	r3,r3,32768
   a373c:	18e00004 	addi	r3,r3,-32768
   a3740:	1800ed26 	beq	r3,zero,a3af8 <___vfprintf_internal_r+0x430>
   a3744:	d9012917 	ldw	r4,1188(sp)
   a3748:	20c00417 	ldw	r3,16(r4)
   a374c:	1800ea26 	beq	r3,zero,a3af8 <___vfprintf_internal_r+0x430>
   a3750:	1100068c 	andi	r4,r2,26
   a3754:	00c00284 	movi	r3,10
   a3758:	20c0f026 	beq	r4,r3,a3b1c <___vfprintf_internal_r+0x454>
   a375c:	d9010dc4 	addi	r4,sp,1079
   a3760:	d8810e04 	addi	r2,sp,1080
   a3764:	dc413017 	ldw	r17,1216(sp)
   a3768:	d8c00404 	addi	r3,sp,16
   a376c:	d9012615 	stw	r4,1176(sp)
   a3770:	1109c83a 	sub	r4,r2,r4
   a3774:	d8812715 	stw	r2,1180(sp)
   a3778:	d8c11b15 	stw	r3,1132(sp)
   a377c:	d8011d15 	stw	zero,1140(sp)
   a3780:	d8011c15 	stw	zero,1136(sp)
   a3784:	802b883a 	mov	r21,r16
   a3788:	d8013215 	stw	zero,1224(sp)
   a378c:	d8013615 	stw	zero,1240(sp)
   a3790:	d8013515 	stw	zero,1236(sp)
   a3794:	d8012c15 	stw	zero,1200(sp)
   a3798:	1813883a 	mov	r9,r3
   a379c:	d9013915 	stw	r4,1252(sp)
   a37a0:	a8800007 	ldb	r2,0(r21)
   a37a4:	1002f326 	beq	r2,zero,a4374 <___vfprintf_internal_r+0xcac>
   a37a8:	00c00944 	movi	r3,37
   a37ac:	a825883a 	mov	r18,r21
   a37b0:	10c0021e 	bne	r2,r3,a37bc <___vfprintf_internal_r+0xf4>
   a37b4:	00001406 	br	a3808 <___vfprintf_internal_r+0x140>
   a37b8:	10c00326 	beq	r2,r3,a37c8 <___vfprintf_internal_r+0x100>
   a37bc:	94800044 	addi	r18,r18,1
   a37c0:	90800007 	ldb	r2,0(r18)
   a37c4:	103ffc1e 	bne	r2,zero,a37b8 <___vfprintf_internal_r+0xf0>
   a37c8:	9561c83a 	sub	r16,r18,r21
   a37cc:	80000e26 	beq	r16,zero,a3808 <___vfprintf_internal_r+0x140>
   a37d0:	da011d17 	ldw	r8,1140(sp)
   a37d4:	d8c11c17 	ldw	r3,1136(sp)
   a37d8:	4d400015 	stw	r21,0(r9)
   a37dc:	4c000115 	stw	r16,4(r9)
   a37e0:	4411883a 	add	r8,r8,r16
   a37e4:	18c00044 	addi	r3,r3,1
   a37e8:	da011d15 	stw	r8,1140(sp)
   a37ec:	d8c11c15 	stw	r3,1136(sp)
   a37f0:	008001c4 	movi	r2,7
   a37f4:	10c11016 	blt	r2,r3,a3c38 <___vfprintf_internal_r+0x570>
   a37f8:	4a400204 	addi	r9,r9,8
   a37fc:	d8812c17 	ldw	r2,1200(sp)
   a3800:	1405883a 	add	r2,r2,r16
   a3804:	d8812c15 	stw	r2,1200(sp)
   a3808:	90800007 	ldb	r2,0(r18)
   a380c:	1000ee26 	beq	r2,zero,a3bc8 <___vfprintf_internal_r+0x500>
   a3810:	95400044 	addi	r21,r18,1
   a3814:	94800047 	ldb	r18,1(r18)
   a3818:	073fffc4 	movi	fp,-1
   a381c:	e007883a 	mov	r3,fp
   a3820:	d8012585 	stb	zero,1174(sp)
   a3824:	d8012e15 	stw	zero,1208(sp)
   a3828:	0021883a 	mov	r16,zero
   a382c:	05001604 	movi	r20,88
   a3830:	04c00244 	movi	r19,9
   a3834:	4839883a 	mov	fp,r9
   a3838:	ad400044 	addi	r21,r21,1
   a383c:	90bff804 	addi	r2,r18,-32
   a3840:	a080462e 	bgeu	r20,r2,a395c <___vfprintf_internal_r+0x294>
   a3844:	e013883a 	mov	r9,fp
   a3848:	9000df26 	beq	r18,zero,a3bc8 <___vfprintf_internal_r+0x500>
   a384c:	00c00044 	movi	r3,1
   a3850:	d8c12815 	stw	r3,1184(sp)
   a3854:	dc810405 	stb	r18,1040(sp)
   a3858:	d8012585 	stb	zero,1174(sp)
   a385c:	d8c12b15 	stw	r3,1196(sp)
   a3860:	dcc10404 	addi	r19,sp,1040
   a3864:	d8013115 	stw	zero,1220(sp)
   a3868:	80c0008c 	andi	r3,r16,2
   a386c:	d8c12a15 	stw	r3,1192(sp)
   a3870:	18000326 	beq	r3,zero,a3880 <___vfprintf_internal_r+0x1b8>
   a3874:	d8c12817 	ldw	r3,1184(sp)
   a3878:	18c00084 	addi	r3,r3,2
   a387c:	d8c12815 	stw	r3,1184(sp)
   a3880:	80c0210c 	andi	r3,r16,132
   a3884:	d8c12f15 	stw	r3,1212(sp)
   a3888:	1802251e 	bne	r3,zero,a4120 <___vfprintf_internal_r+0xa58>
   a388c:	d9012e17 	ldw	r4,1208(sp)
   a3890:	d8c12817 	ldw	r3,1184(sp)
   a3894:	20edc83a 	sub	r22,r4,r3
   a3898:	0582210e 	bge	zero,r22,a4120 <___vfprintf_internal_r+0xa58>
   a389c:	02800404 	movi	r10,16
   a38a0:	da011d17 	ldw	r8,1140(sp)
   a38a4:	d8c11c17 	ldw	r3,1136(sp)
   a38a8:	05c002f4 	movhi	r23,11
   a38ac:	bdfb6084 	addi	r23,r23,-4734
   a38b0:	5580200e 	bge	r10,r22,a3934 <___vfprintf_internal_r+0x26c>
   a38b4:	dc813815 	stw	r18,1248(sp)
   a38b8:	5039883a 	mov	fp,r10
   a38bc:	b825883a 	mov	r18,r23
   a38c0:	050001c4 	movi	r20,7
   a38c4:	b02f883a 	mov	r23,r22
   a38c8:	802d883a 	mov	r22,r16
   a38cc:	dc012917 	ldw	r16,1188(sp)
   a38d0:	00000306 	br	a38e0 <___vfprintf_internal_r+0x218>
   a38d4:	bdfffc04 	addi	r23,r23,-16
   a38d8:	4a400204 	addi	r9,r9,8
   a38dc:	e5c0110e 	bge	fp,r23,a3924 <___vfprintf_internal_r+0x25c>
   a38e0:	4c800015 	stw	r18,0(r9)
   a38e4:	4f000115 	stw	fp,4(r9)
   a38e8:	42000404 	addi	r8,r8,16
   a38ec:	18c00044 	addi	r3,r3,1
   a38f0:	da011d15 	stw	r8,1140(sp)
   a38f4:	d8c11c15 	stw	r3,1136(sp)
   a38f8:	a0fff60e 	bge	r20,r3,a38d4 <___vfprintf_internal_r+0x20c>
   a38fc:	8809883a 	mov	r4,r17
   a3900:	800b883a 	mov	r5,r16
   a3904:	d9811b04 	addi	r6,sp,1132
   a3908:	00a36940 	call	a3694 <__sprint_r>
   a390c:	1000b41e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a3910:	bdfffc04 	addi	r23,r23,-16
   a3914:	da011d17 	ldw	r8,1140(sp)
   a3918:	d8c11c17 	ldw	r3,1136(sp)
   a391c:	da400404 	addi	r9,sp,16
   a3920:	e5ffef16 	blt	fp,r23,a38e0 <___vfprintf_internal_r+0x218>
   a3924:	b021883a 	mov	r16,r22
   a3928:	b82d883a 	mov	r22,r23
   a392c:	902f883a 	mov	r23,r18
   a3930:	dc813817 	ldw	r18,1248(sp)
   a3934:	4dc00015 	stw	r23,0(r9)
   a3938:	4d800115 	stw	r22,4(r9)
   a393c:	4591883a 	add	r8,r8,r22
   a3940:	18c00044 	addi	r3,r3,1
   a3944:	da011d15 	stw	r8,1140(sp)
   a3948:	d8c11c15 	stw	r3,1136(sp)
   a394c:	008001c4 	movi	r2,7
   a3950:	10c3fe16 	blt	r2,r3,a494c <___vfprintf_internal_r+0x1284>
   a3954:	4a400204 	addi	r9,r9,8
   a3958:	0001f306 	br	a4128 <___vfprintf_internal_r+0xa60>
   a395c:	1085883a 	add	r2,r2,r2
   a3960:	1085883a 	add	r2,r2,r2
   a3964:	010002b4 	movhi	r4,10
   a3968:	210e5e04 	addi	r4,r4,14712
   a396c:	1105883a 	add	r2,r2,r4
   a3970:	10800017 	ldw	r2,0(r2)
   a3974:	1000683a 	jmp	r2
   a3978:	000a4054 	movui	zero,10497
   a397c:	000a3844 	movi	zero,10465
   a3980:	000a3844 	movi	zero,10465
   a3984:	000a406c 	andhi	zero,zero,10497
   a3988:	000a3844 	movi	zero,10465
   a398c:	000a3844 	movi	zero,10465
   a3990:	000a3844 	movi	zero,10465
   a3994:	000a3844 	movi	zero,10465
   a3998:	000a3844 	movi	zero,10465
   a399c:	000a3844 	movi	zero,10465
   a39a0:	000a3f24 	muli	zero,zero,10492
   a39a4:	000a40b8 	rdprs	zero,zero,10498
   a39a8:	000a3844 	movi	zero,10465
   a39ac:	000a3aec 	andhi	zero,zero,10475
   a39b0:	000a3e8c 	andi	zero,zero,10490
   a39b4:	000a3844 	movi	zero,10465
   a39b8:	000a4078 	rdprs	zero,zero,10497
   a39bc:	000a4084 	movi	zero,10498
   a39c0:	000a4084 	movi	zero,10498
   a39c4:	000a4084 	movi	zero,10498
   a39c8:	000a4084 	movi	zero,10498
   a39cc:	000a4084 	movi	zero,10498
   a39d0:	000a4084 	movi	zero,10498
   a39d4:	000a4084 	movi	zero,10498
   a39d8:	000a4084 	movi	zero,10498
   a39dc:	000a4084 	movi	zero,10498
   a39e0:	000a3844 	movi	zero,10465
   a39e4:	000a3844 	movi	zero,10465
   a39e8:	000a3844 	movi	zero,10465
   a39ec:	000a3844 	movi	zero,10465
   a39f0:	000a3844 	movi	zero,10465
   a39f4:	000a3844 	movi	zero,10465
   a39f8:	000a3844 	movi	zero,10465
   a39fc:	000a3844 	movi	zero,10465
   a3a00:	000a3844 	movi	zero,10465
   a3a04:	000a3844 	movi	zero,10465
   a3a08:	000a3c5c 	xori	zero,zero,10481
   a3a0c:	000a3d1c 	xori	zero,zero,10484
   a3a10:	000a3844 	movi	zero,10465
   a3a14:	000a3d1c 	xori	zero,zero,10484
   a3a18:	000a3844 	movi	zero,10465
   a3a1c:	000a3844 	movi	zero,10465
   a3a20:	000a3844 	movi	zero,10465
   a3a24:	000a3844 	movi	zero,10465
   a3a28:	000a3db0 	cmpltui	zero,zero,10486
   a3a2c:	000a3844 	movi	zero,10465
   a3a30:	000a3844 	movi	zero,10465
   a3a34:	000a3dbc 	xorhi	zero,zero,10486
   a3a38:	000a3844 	movi	zero,10465
   a3a3c:	000a3844 	movi	zero,10465
   a3a40:	000a3844 	movi	zero,10465
   a3a44:	000a3844 	movi	zero,10465
   a3a48:	000a3844 	movi	zero,10465
   a3a4c:	000a3df4 	movhi	zero,10487
   a3a50:	000a3844 	movi	zero,10465
   a3a54:	000a3844 	movi	zero,10465
   a3a58:	000a3e30 	cmpltui	zero,zero,10488
   a3a5c:	000a3844 	movi	zero,10465
   a3a60:	000a3844 	movi	zero,10465
   a3a64:	000a3844 	movi	zero,10465
   a3a68:	000a3844 	movi	zero,10465
   a3a6c:	000a3844 	movi	zero,10465
   a3a70:	000a3844 	movi	zero,10465
   a3a74:	000a3844 	movi	zero,10465
   a3a78:	000a3844 	movi	zero,10465
   a3a7c:	000a3844 	movi	zero,10465
   a3a80:	000a3844 	movi	zero,10465
   a3a84:	000a40c8 	cmpgei	zero,zero,10499
   a3a88:	000a40fc 	xorhi	zero,zero,10499
   a3a8c:	000a3d1c 	xori	zero,zero,10484
   a3a90:	000a3d1c 	xori	zero,zero,10484
   a3a94:	000a3d1c 	xori	zero,zero,10484
   a3a98:	000a4048 	cmpgei	zero,zero,10497
   a3a9c:	000a40fc 	xorhi	zero,zero,10499
   a3aa0:	000a3844 	movi	zero,10465
   a3aa4:	000a3844 	movi	zero,10465
   a3aa8:	000a3ed4 	movui	zero,10491
   a3aac:	000a3844 	movi	zero,10465
   a3ab0:	000a3eec 	andhi	zero,zero,10491
   a3ab4:	000a4108 	cmpgei	zero,zero,10500
   a3ab8:	000a3f4c 	andi	zero,zero,10493
   a3abc:	000a3f9c 	xori	zero,zero,10494
   a3ac0:	000a3844 	movi	zero,10465
   a3ac4:	000a3fa8 	cmpgeui	zero,zero,10494
   a3ac8:	000a3844 	movi	zero,10465
   a3acc:	000a4114 	movui	zero,10500
   a3ad0:	000a3844 	movi	zero,10465
   a3ad4:	000a3844 	movi	zero,10465
   a3ad8:	000a400c 	andi	zero,zero,10496
   a3adc:	d9012e17 	ldw	r4,1208(sp)
   a3ae0:	d8812d15 	stw	r2,1204(sp)
   a3ae4:	0109c83a 	sub	r4,zero,r4
   a3ae8:	d9012e15 	stw	r4,1208(sp)
   a3aec:	84000114 	ori	r16,r16,4
   a3af0:	ac800007 	ldb	r18,0(r21)
   a3af4:	003f5006 	br	a3838 <___vfprintf_internal_r+0x170>
   a3af8:	d9013017 	ldw	r4,1216(sp)
   a3afc:	d9412917 	ldw	r5,1188(sp)
   a3b00:	00a572c0 	call	a572c <__swsetup_r>
   a3b04:	10003d1e 	bne	r2,zero,a3bfc <___vfprintf_internal_r+0x534>
   a3b08:	d8c12917 	ldw	r3,1188(sp)
   a3b0c:	1880030b 	ldhu	r2,12(r3)
   a3b10:	00c00284 	movi	r3,10
   a3b14:	1100068c 	andi	r4,r2,26
   a3b18:	20ff101e 	bne	r4,r3,a375c <___vfprintf_internal_r+0x94>
   a3b1c:	d9012917 	ldw	r4,1188(sp)
   a3b20:	20c0038b 	ldhu	r3,14(r4)
   a3b24:	193fffcc 	andi	r4,r3,65535
   a3b28:	2120001c 	xori	r4,r4,32768
   a3b2c:	21200004 	addi	r4,r4,-32768
   a3b30:	203f0a16 	blt	r4,zero,a375c <___vfprintf_internal_r+0x94>
   a3b34:	d9012917 	ldw	r4,1188(sp)
   a3b38:	d9c12d17 	ldw	r7,1204(sp)
   a3b3c:	10bfff4c 	andi	r2,r2,65533
   a3b40:	22800717 	ldw	r10,28(r4)
   a3b44:	22400917 	ldw	r9,36(r4)
   a3b48:	d9013017 	ldw	r4,1216(sp)
   a3b4c:	02010004 	movi	r8,1024
   a3b50:	d881070d 	sth	r2,1052(sp)
   a3b54:	d9410404 	addi	r5,sp,1040
   a3b58:	d8800404 	addi	r2,sp,16
   a3b5c:	800d883a 	mov	r6,r16
   a3b60:	d8c1078d 	sth	r3,1054(sp)
   a3b64:	da810b15 	stw	r10,1068(sp)
   a3b68:	da410d15 	stw	r9,1076(sp)
   a3b6c:	d8810415 	stw	r2,1040(sp)
   a3b70:	d8810815 	stw	r2,1056(sp)
   a3b74:	da010615 	stw	r8,1048(sp)
   a3b78:	da010915 	stw	r8,1060(sp)
   a3b7c:	d8010a15 	stw	zero,1064(sp)
   a3b80:	00a36c80 	call	a36c8 <___vfprintf_internal_r>
   a3b84:	d8812c15 	stw	r2,1200(sp)
   a3b88:	10000416 	blt	r2,zero,a3b9c <___vfprintf_internal_r+0x4d4>
   a3b8c:	d9013017 	ldw	r4,1216(sp)
   a3b90:	d9410404 	addi	r5,sp,1040
   a3b94:	00a13880 	call	a1388 <_fflush_r>
   a3b98:	1006501e 	bne	r2,zero,a54dc <___vfprintf_internal_r+0x1e14>
   a3b9c:	d881070b 	ldhu	r2,1052(sp)
   a3ba0:	1080100c 	andi	r2,r2,64
   a3ba4:	10bfffcc 	andi	r2,r2,65535
   a3ba8:	10a0001c 	xori	r2,r2,32768
   a3bac:	10a00004 	addi	r2,r2,-32768
   a3bb0:	10001426 	beq	r2,zero,a3c04 <___vfprintf_internal_r+0x53c>
   a3bb4:	d8c12917 	ldw	r3,1188(sp)
   a3bb8:	1880030b 	ldhu	r2,12(r3)
   a3bbc:	10801014 	ori	r2,r2,64
   a3bc0:	1880030d 	sth	r2,12(r3)
   a3bc4:	00000f06 	br	a3c04 <___vfprintf_internal_r+0x53c>
   a3bc8:	d8811d17 	ldw	r2,1140(sp)
   a3bcc:	10000426 	beq	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a3bd0:	d9013017 	ldw	r4,1216(sp)
   a3bd4:	d9412917 	ldw	r5,1188(sp)
   a3bd8:	d9811b04 	addi	r6,sp,1132
   a3bdc:	00a36940 	call	a3694 <__sprint_r>
   a3be0:	d8c12917 	ldw	r3,1188(sp)
   a3be4:	1880030b 	ldhu	r2,12(r3)
   a3be8:	1080100c 	andi	r2,r2,64
   a3bec:	10bfffcc 	andi	r2,r2,65535
   a3bf0:	10a0001c 	xori	r2,r2,32768
   a3bf4:	10a00004 	addi	r2,r2,-32768
   a3bf8:	10000226 	beq	r2,zero,a3c04 <___vfprintf_internal_r+0x53c>
   a3bfc:	00bfffc4 	movi	r2,-1
   a3c00:	d8812c15 	stw	r2,1200(sp)
   a3c04:	d8812c17 	ldw	r2,1200(sp)
   a3c08:	dfc14617 	ldw	ra,1304(sp)
   a3c0c:	df014517 	ldw	fp,1300(sp)
   a3c10:	ddc14417 	ldw	r23,1296(sp)
   a3c14:	dd814317 	ldw	r22,1292(sp)
   a3c18:	dd414217 	ldw	r21,1288(sp)
   a3c1c:	dd014117 	ldw	r20,1284(sp)
   a3c20:	dcc14017 	ldw	r19,1280(sp)
   a3c24:	dc813f17 	ldw	r18,1276(sp)
   a3c28:	dc413e17 	ldw	r17,1272(sp)
   a3c2c:	dc013d17 	ldw	r16,1268(sp)
   a3c30:	dec14704 	addi	sp,sp,1308
   a3c34:	f800283a 	ret
   a3c38:	d9412917 	ldw	r5,1188(sp)
   a3c3c:	8809883a 	mov	r4,r17
   a3c40:	d9811b04 	addi	r6,sp,1132
   a3c44:	00a36940 	call	a3694 <__sprint_r>
   a3c48:	103fe51e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a3c4c:	da400404 	addi	r9,sp,16
   a3c50:	003eea06 	br	a37fc <___vfprintf_internal_r+0x134>
   a3c54:	00a16440 	call	a1644 <__sinit>
   a3c58:	003eb306 	br	a3728 <___vfprintf_internal_r+0x60>
   a3c5c:	e013883a 	mov	r9,fp
   a3c60:	84000414 	ori	r16,r16,16
   a3c64:	1839883a 	mov	fp,r3
   a3c68:	8080080c 	andi	r2,r16,32
   a3c6c:	10034426 	beq	r2,zero,a4980 <___vfprintf_internal_r+0x12b8>
   a3c70:	d8c12d17 	ldw	r3,1204(sp)
   a3c74:	18800117 	ldw	r2,4(r3)
   a3c78:	1dc00017 	ldw	r23,0(r3)
   a3c7c:	18c00204 	addi	r3,r3,8
   a3c80:	d8c12d15 	stw	r3,1204(sp)
   a3c84:	102d883a 	mov	r22,r2
   a3c88:	1003020e 	bge	r2,zero,a4894 <___vfprintf_internal_r+0x11cc>
   a3c8c:	05efc83a 	sub	r23,zero,r23
   a3c90:	b804c03a 	cmpne	r2,r23,zero
   a3c94:	05adc83a 	sub	r22,zero,r22
   a3c98:	b0adc83a 	sub	r22,r22,r2
   a3c9c:	00800b44 	movi	r2,45
   a3ca0:	d8812585 	stb	r2,1174(sp)
   a3ca4:	00c00044 	movi	r3,1
   a3ca8:	bd84b03a 	or	r2,r23,r22
   a3cac:	e0000216 	blt	fp,zero,a3cb8 <___vfprintf_internal_r+0x5f0>
   a3cb0:	013fdfc4 	movi	r4,-129
   a3cb4:	8120703a 	and	r16,r16,r4
   a3cb8:	1001cc1e 	bne	r2,zero,a43ec <___vfprintf_internal_r+0xd24>
   a3cbc:	e001cb1e 	bne	fp,zero,a43ec <___vfprintf_internal_r+0xd24>
   a3cc0:	18c03fcc 	andi	r3,r3,255
   a3cc4:	1802ca1e 	bne	r3,zero,a47f0 <___vfprintf_internal_r+0x1128>
   a3cc8:	8080004c 	andi	r2,r16,1
   a3ccc:	1002c826 	beq	r2,zero,a47f0 <___vfprintf_internal_r+0x1128>
   a3cd0:	d8c13917 	ldw	r3,1252(sp)
   a3cd4:	00800c04 	movi	r2,48
   a3cd8:	d8810dc5 	stb	r2,1079(sp)
   a3cdc:	d8c12b15 	stw	r3,1196(sp)
   a3ce0:	dcc10dc4 	addi	r19,sp,1079
   a3ce4:	d8812b17 	ldw	r2,1196(sp)
   a3ce8:	d8812815 	stw	r2,1184(sp)
   a3cec:	1700010e 	bge	r2,fp,a3cf4 <___vfprintf_internal_r+0x62c>
   a3cf0:	df012815 	stw	fp,1184(sp)
   a3cf4:	d8812583 	ldbu	r2,1174(sp)
   a3cf8:	df013115 	stw	fp,1220(sp)
   a3cfc:	10803fcc 	andi	r2,r2,255
   a3d00:	1080201c 	xori	r2,r2,128
   a3d04:	10bfe004 	addi	r2,r2,-128
   a3d08:	103ed726 	beq	r2,zero,a3868 <___vfprintf_internal_r+0x1a0>
   a3d0c:	d8c12817 	ldw	r3,1184(sp)
   a3d10:	18c00044 	addi	r3,r3,1
   a3d14:	d8c12815 	stw	r3,1184(sp)
   a3d18:	003ed306 	br	a3868 <___vfprintf_internal_r+0x1a0>
   a3d1c:	8080020c 	andi	r2,r16,8
   a3d20:	e013883a 	mov	r9,fp
   a3d24:	1839883a 	mov	fp,r3
   a3d28:	1003a626 	beq	r2,zero,a4bc4 <___vfprintf_internal_r+0x14fc>
   a3d2c:	d9012d17 	ldw	r4,1204(sp)
   a3d30:	25800017 	ldw	r22,0(r4)
   a3d34:	25000117 	ldw	r20,4(r4)
   a3d38:	21000204 	addi	r4,r4,8
   a3d3c:	d9012d15 	stw	r4,1204(sp)
   a3d40:	dd813315 	stw	r22,1228(sp)
   a3d44:	dd013415 	stw	r20,1232(sp)
   a3d48:	b009883a 	mov	r4,r22
   a3d4c:	a00b883a 	mov	r5,r20
   a3d50:	da413c15 	stw	r9,1264(sp)
   a3d54:	00a94a00 	call	a94a0 <__isinfd>
   a3d58:	da413c17 	ldw	r9,1264(sp)
   a3d5c:	b009883a 	mov	r4,r22
   a3d60:	a00b883a 	mov	r5,r20
   a3d64:	10041d26 	beq	r2,zero,a4ddc <___vfprintf_internal_r+0x1714>
   a3d68:	000d883a 	mov	r6,zero
   a3d6c:	000f883a 	mov	r7,zero
   a3d70:	00aad0c0 	call	aad0c <__ltdf2>
   a3d74:	da413c17 	ldw	r9,1264(sp)
   a3d78:	1004da16 	blt	r2,zero,a50e4 <___vfprintf_internal_r+0x1a1c>
   a3d7c:	d8812583 	ldbu	r2,1174(sp)
   a3d80:	00c011c4 	movi	r3,71
   a3d84:	1c83d116 	blt	r3,r18,a4ccc <___vfprintf_internal_r+0x1604>
   a3d88:	04c002f4 	movhi	r19,11
   a3d8c:	9cfb5004 	addi	r19,r19,-4800
   a3d90:	00c000c4 	movi	r3,3
   a3d94:	d8c12815 	stw	r3,1184(sp)
   a3d98:	00ffdfc4 	movi	r3,-129
   a3d9c:	80e0703a 	and	r16,r16,r3
   a3da0:	d8c12817 	ldw	r3,1184(sp)
   a3da4:	d8013115 	stw	zero,1220(sp)
   a3da8:	d8c12b15 	stw	r3,1196(sp)
   a3dac:	003fd306 	br	a3cfc <___vfprintf_internal_r+0x634>
   a3db0:	84000214 	ori	r16,r16,8
   a3db4:	ac800007 	ldb	r18,0(r21)
   a3db8:	003e9f06 	br	a3838 <___vfprintf_internal_r+0x170>
   a3dbc:	e013883a 	mov	r9,fp
   a3dc0:	84000414 	ori	r16,r16,16
   a3dc4:	1839883a 	mov	fp,r3
   a3dc8:	8080080c 	andi	r2,r16,32
   a3dcc:	10031d26 	beq	r2,zero,a4a44 <___vfprintf_internal_r+0x137c>
   a3dd0:	d8812d17 	ldw	r2,1204(sp)
   a3dd4:	0007883a 	mov	r3,zero
   a3dd8:	15c00017 	ldw	r23,0(r2)
   a3ddc:	15800117 	ldw	r22,4(r2)
   a3de0:	10800204 	addi	r2,r2,8
   a3de4:	d8812d15 	stw	r2,1204(sp)
   a3de8:	d8012585 	stb	zero,1174(sp)
   a3dec:	bd84b03a 	or	r2,r23,r22
   a3df0:	003fae06 	br	a3cac <___vfprintf_internal_r+0x5e4>
   a3df4:	e013883a 	mov	r9,fp
   a3df8:	84000414 	ori	r16,r16,16
   a3dfc:	1839883a 	mov	fp,r3
   a3e00:	8080080c 	andi	r2,r16,32
   a3e04:	1002e726 	beq	r2,zero,a49a4 <___vfprintf_internal_r+0x12dc>
   a3e08:	d8c12d17 	ldw	r3,1204(sp)
   a3e0c:	d9012d17 	ldw	r4,1204(sp)
   a3e10:	1dc00017 	ldw	r23,0(r3)
   a3e14:	1d800117 	ldw	r22,4(r3)
   a3e18:	21000204 	addi	r4,r4,8
   a3e1c:	00c00044 	movi	r3,1
   a3e20:	d9012d15 	stw	r4,1204(sp)
   a3e24:	bd84b03a 	or	r2,r23,r22
   a3e28:	d8012585 	stb	zero,1174(sp)
   a3e2c:	003f9f06 	br	a3cac <___vfprintf_internal_r+0x5e4>
   a3e30:	e013883a 	mov	r9,fp
   a3e34:	1839883a 	mov	fp,r3
   a3e38:	00c002f4 	movhi	r3,11
   a3e3c:	18fb5404 	addi	r3,r3,-4784
   a3e40:	d8c13615 	stw	r3,1240(sp)
   a3e44:	8080080c 	andi	r2,r16,32
   a3e48:	10007726 	beq	r2,zero,a4028 <___vfprintf_internal_r+0x960>
   a3e4c:	d9012d17 	ldw	r4,1204(sp)
   a3e50:	25c00017 	ldw	r23,0(r4)
   a3e54:	25800117 	ldw	r22,4(r4)
   a3e58:	21000204 	addi	r4,r4,8
   a3e5c:	d9012d15 	stw	r4,1204(sp)
   a3e60:	8080004c 	andi	r2,r16,1
   a3e64:	1002c226 	beq	r2,zero,a4970 <___vfprintf_internal_r+0x12a8>
   a3e68:	bd84b03a 	or	r2,r23,r22
   a3e6c:	10035d26 	beq	r2,zero,a4be4 <___vfprintf_internal_r+0x151c>
   a3e70:	00c00c04 	movi	r3,48
   a3e74:	d8c12505 	stb	r3,1172(sp)
   a3e78:	dc812545 	stb	r18,1173(sp)
   a3e7c:	84000094 	ori	r16,r16,2
   a3e80:	00c00084 	movi	r3,2
   a3e84:	d8012585 	stb	zero,1174(sp)
   a3e88:	003f8806 	br	a3cac <___vfprintf_internal_r+0x5e4>
   a3e8c:	ac800007 	ldb	r18,0(r21)
   a3e90:	00c00a84 	movi	r3,42
   a3e94:	adc00044 	addi	r23,r21,1
   a3e98:	90c57526 	beq	r18,r3,a5470 <___vfprintf_internal_r+0x1da8>
   a3e9c:	95bff404 	addi	r22,r18,-48
   a3ea0:	0009883a 	mov	r4,zero
   a3ea4:	9d84ff36 	bltu	r19,r22,a52a4 <___vfprintf_internal_r+0x1bdc>
   a3ea8:	01400284 	movi	r5,10
   a3eac:	00a118c0 	call	a118c <__mulsi3>
   a3eb0:	bc800007 	ldb	r18,0(r23)
   a3eb4:	b089883a 	add	r4,r22,r2
   a3eb8:	bdc00044 	addi	r23,r23,1
   a3ebc:	95bff404 	addi	r22,r18,-48
   a3ec0:	9dbff92e 	bgeu	r19,r22,a3ea8 <___vfprintf_internal_r+0x7e0>
   a3ec4:	2007883a 	mov	r3,r4
   a3ec8:	20044316 	blt	r4,zero,a4fd8 <___vfprintf_internal_r+0x1910>
   a3ecc:	b82b883a 	mov	r21,r23
   a3ed0:	003e5a06 	br	a383c <___vfprintf_internal_r+0x174>
   a3ed4:	ac800007 	ldb	r18,0(r21)
   a3ed8:	01001b04 	movi	r4,108
   a3edc:	a805883a 	mov	r2,r21
   a3ee0:	91045526 	beq	r18,r4,a5038 <___vfprintf_internal_r+0x1970>
   a3ee4:	84000414 	ori	r16,r16,16
   a3ee8:	003e5306 	br	a3838 <___vfprintf_internal_r+0x170>
   a3eec:	8080080c 	andi	r2,r16,32
   a3ef0:	e013883a 	mov	r9,fp
   a3ef4:	10034026 	beq	r2,zero,a4bf8 <___vfprintf_internal_r+0x1530>
   a3ef8:	d9012d17 	ldw	r4,1204(sp)
   a3efc:	20800017 	ldw	r2,0(r4)
   a3f00:	d9012c17 	ldw	r4,1200(sp)
   a3f04:	2007d7fa 	srai	r3,r4,31
   a3f08:	d9012d17 	ldw	r4,1204(sp)
   a3f0c:	10c00115 	stw	r3,4(r2)
   a3f10:	21000104 	addi	r4,r4,4
   a3f14:	d9012d15 	stw	r4,1204(sp)
   a3f18:	d9012c17 	ldw	r4,1200(sp)
   a3f1c:	11000015 	stw	r4,0(r2)
   a3f20:	003e1f06 	br	a37a0 <___vfprintf_internal_r+0xd8>
   a3f24:	d9012d17 	ldw	r4,1204(sp)
   a3f28:	21000017 	ldw	r4,0(r4)
   a3f2c:	d9012e15 	stw	r4,1208(sp)
   a3f30:	d9012d17 	ldw	r4,1204(sp)
   a3f34:	20800104 	addi	r2,r4,4
   a3f38:	d9012e17 	ldw	r4,1208(sp)
   a3f3c:	203ee716 	blt	r4,zero,a3adc <___vfprintf_internal_r+0x414>
   a3f40:	d8812d15 	stw	r2,1204(sp)
   a3f44:	ac800007 	ldb	r18,0(r21)
   a3f48:	003e3b06 	br	a3838 <___vfprintf_internal_r+0x170>
   a3f4c:	e013883a 	mov	r9,fp
   a3f50:	1839883a 	mov	fp,r3
   a3f54:	d8c12d17 	ldw	r3,1204(sp)
   a3f58:	00800c04 	movi	r2,48
   a3f5c:	010002f4 	movhi	r4,11
   a3f60:	213b5904 	addi	r4,r4,-4764
   a3f64:	1dc00017 	ldw	r23,0(r3)
   a3f68:	18c00104 	addi	r3,r3,4
   a3f6c:	d8812505 	stb	r2,1172(sp)
   a3f70:	00801e04 	movi	r2,120
   a3f74:	d8812545 	stb	r2,1173(sp)
   a3f78:	d8c12d15 	stw	r3,1204(sp)
   a3f7c:	002d883a 	mov	r22,zero
   a3f80:	84000094 	ori	r16,r16,2
   a3f84:	d9013615 	stw	r4,1240(sp)
   a3f88:	00c00084 	movi	r3,2
   a3f8c:	04801e04 	movi	r18,120
   a3f90:	b805883a 	mov	r2,r23
   a3f94:	d8012585 	stb	zero,1174(sp)
   a3f98:	003f4406 	br	a3cac <___vfprintf_internal_r+0x5e4>
   a3f9c:	84000814 	ori	r16,r16,32
   a3fa0:	ac800007 	ldb	r18,0(r21)
   a3fa4:	003e2406 	br	a3838 <___vfprintf_internal_r+0x170>
   a3fa8:	d8812d17 	ldw	r2,1204(sp)
   a3fac:	d8012585 	stb	zero,1174(sp)
   a3fb0:	e013883a 	mov	r9,fp
   a3fb4:	14c00017 	ldw	r19,0(r2)
   a3fb8:	1839883a 	mov	fp,r3
   a3fbc:	15c00104 	addi	r23,r2,4
   a3fc0:	98045526 	beq	r19,zero,a5118 <___vfprintf_internal_r+0x1a50>
   a3fc4:	9809883a 	mov	r4,r19
   a3fc8:	18043116 	blt	r3,zero,a5090 <___vfprintf_internal_r+0x19c8>
   a3fcc:	000b883a 	mov	r5,zero
   a3fd0:	180d883a 	mov	r6,r3
   a3fd4:	da413c15 	stw	r9,1264(sp)
   a3fd8:	00a7a240 	call	a7a24 <memchr>
   a3fdc:	da413c17 	ldw	r9,1264(sp)
   a3fe0:	10047a26 	beq	r2,zero,a51cc <___vfprintf_internal_r+0x1b04>
   a3fe4:	14c5c83a 	sub	r2,r2,r19
   a3fe8:	d8812b15 	stw	r2,1196(sp)
   a3fec:	e083d40e 	bge	fp,r2,a4f40 <___vfprintf_internal_r+0x1878>
   a3ff0:	df012815 	stw	fp,1184(sp)
   a3ff4:	e004e416 	blt	fp,zero,a5388 <___vfprintf_internal_r+0x1cc0>
   a3ff8:	d8812583 	ldbu	r2,1174(sp)
   a3ffc:	df012b15 	stw	fp,1196(sp)
   a4000:	ddc12d15 	stw	r23,1204(sp)
   a4004:	d8013115 	stw	zero,1220(sp)
   a4008:	003f3c06 	br	a3cfc <___vfprintf_internal_r+0x634>
   a400c:	008002f4 	movhi	r2,11
   a4010:	10bb5904 	addi	r2,r2,-4764
   a4014:	d8813615 	stw	r2,1240(sp)
   a4018:	8080080c 	andi	r2,r16,32
   a401c:	e013883a 	mov	r9,fp
   a4020:	1839883a 	mov	fp,r3
   a4024:	103f891e 	bne	r2,zero,a3e4c <___vfprintf_internal_r+0x784>
   a4028:	8080040c 	andi	r2,r16,16
   a402c:	1002c326 	beq	r2,zero,a4b3c <___vfprintf_internal_r+0x1474>
   a4030:	d8812d17 	ldw	r2,1204(sp)
   a4034:	002d883a 	mov	r22,zero
   a4038:	15c00017 	ldw	r23,0(r2)
   a403c:	10800104 	addi	r2,r2,4
   a4040:	d8812d15 	stw	r2,1204(sp)
   a4044:	003f8606 	br	a3e60 <___vfprintf_internal_r+0x798>
   a4048:	84001014 	ori	r16,r16,64
   a404c:	ac800007 	ldb	r18,0(r21)
   a4050:	003df906 	br	a3838 <___vfprintf_internal_r+0x170>
   a4054:	d8812587 	ldb	r2,1174(sp)
   a4058:	1002e51e 	bne	r2,zero,a4bf0 <___vfprintf_internal_r+0x1528>
   a405c:	00800804 	movi	r2,32
   a4060:	d8812585 	stb	r2,1174(sp)
   a4064:	ac800007 	ldb	r18,0(r21)
   a4068:	003df306 	br	a3838 <___vfprintf_internal_r+0x170>
   a406c:	84000054 	ori	r16,r16,1
   a4070:	ac800007 	ldb	r18,0(r21)
   a4074:	003df006 	br	a3838 <___vfprintf_internal_r+0x170>
   a4078:	84002014 	ori	r16,r16,128
   a407c:	ac800007 	ldb	r18,0(r21)
   a4080:	003ded06 	br	a3838 <___vfprintf_internal_r+0x170>
   a4084:	0009883a 	mov	r4,zero
   a4088:	95bff404 	addi	r22,r18,-48
   a408c:	182f883a 	mov	r23,r3
   a4090:	01400284 	movi	r5,10
   a4094:	00a118c0 	call	a118c <__mulsi3>
   a4098:	ac800007 	ldb	r18,0(r21)
   a409c:	1589883a 	add	r4,r2,r22
   a40a0:	ad400044 	addi	r21,r21,1
   a40a4:	95bff404 	addi	r22,r18,-48
   a40a8:	9dbff92e 	bgeu	r19,r22,a4090 <___vfprintf_internal_r+0x9c8>
   a40ac:	b807883a 	mov	r3,r23
   a40b0:	d9012e15 	stw	r4,1208(sp)
   a40b4:	003de106 	br	a383c <___vfprintf_internal_r+0x174>
   a40b8:	00800ac4 	movi	r2,43
   a40bc:	d8812585 	stb	r2,1174(sp)
   a40c0:	ac800007 	ldb	r18,0(r21)
   a40c4:	003ddc06 	br	a3838 <___vfprintf_internal_r+0x170>
   a40c8:	d8c12d17 	ldw	r3,1204(sp)
   a40cc:	d9012d17 	ldw	r4,1204(sp)
   a40d0:	e013883a 	mov	r9,fp
   a40d4:	18800017 	ldw	r2,0(r3)
   a40d8:	21000104 	addi	r4,r4,4
   a40dc:	00c00044 	movi	r3,1
   a40e0:	d8c12815 	stw	r3,1184(sp)
   a40e4:	d8012585 	stb	zero,1174(sp)
   a40e8:	d8810405 	stb	r2,1040(sp)
   a40ec:	d9012d15 	stw	r4,1204(sp)
   a40f0:	d8c12b15 	stw	r3,1196(sp)
   a40f4:	dcc10404 	addi	r19,sp,1040
   a40f8:	003dda06 	br	a3864 <___vfprintf_internal_r+0x19c>
   a40fc:	e013883a 	mov	r9,fp
   a4100:	1839883a 	mov	fp,r3
   a4104:	003ed806 	br	a3c68 <___vfprintf_internal_r+0x5a0>
   a4108:	e013883a 	mov	r9,fp
   a410c:	1839883a 	mov	fp,r3
   a4110:	003f2d06 	br	a3dc8 <___vfprintf_internal_r+0x700>
   a4114:	e013883a 	mov	r9,fp
   a4118:	1839883a 	mov	fp,r3
   a411c:	003f3806 	br	a3e00 <___vfprintf_internal_r+0x738>
   a4120:	da011d17 	ldw	r8,1140(sp)
   a4124:	d8c11c17 	ldw	r3,1136(sp)
   a4128:	d8812587 	ldb	r2,1174(sp)
   a412c:	10000b26 	beq	r2,zero,a415c <___vfprintf_internal_r+0xa94>
   a4130:	d8812584 	addi	r2,sp,1174
   a4134:	48800015 	stw	r2,0(r9)
   a4138:	00800044 	movi	r2,1
   a413c:	48800115 	stw	r2,4(r9)
   a4140:	4091883a 	add	r8,r8,r2
   a4144:	1887883a 	add	r3,r3,r2
   a4148:	da011d15 	stw	r8,1140(sp)
   a414c:	d8c11c15 	stw	r3,1136(sp)
   a4150:	008001c4 	movi	r2,7
   a4154:	10c18e16 	blt	r2,r3,a4790 <___vfprintf_internal_r+0x10c8>
   a4158:	4a400204 	addi	r9,r9,8
   a415c:	d9012a17 	ldw	r4,1192(sp)
   a4160:	20000b26 	beq	r4,zero,a4190 <___vfprintf_internal_r+0xac8>
   a4164:	d8812504 	addi	r2,sp,1172
   a4168:	48800015 	stw	r2,0(r9)
   a416c:	00800084 	movi	r2,2
   a4170:	48800115 	stw	r2,4(r9)
   a4174:	4091883a 	add	r8,r8,r2
   a4178:	18c00044 	addi	r3,r3,1
   a417c:	da011d15 	stw	r8,1140(sp)
   a4180:	d8c11c15 	stw	r3,1136(sp)
   a4184:	008001c4 	movi	r2,7
   a4188:	10c17816 	blt	r2,r3,a476c <___vfprintf_internal_r+0x10a4>
   a418c:	4a400204 	addi	r9,r9,8
   a4190:	d9012f17 	ldw	r4,1212(sp)
   a4194:	00802004 	movi	r2,128
   a4198:	2080fc26 	beq	r4,r2,a458c <___vfprintf_internal_r+0xec4>
   a419c:	d8813117 	ldw	r2,1220(sp)
   a41a0:	d9012b17 	ldw	r4,1196(sp)
   a41a4:	112fc83a 	sub	r23,r2,r4
   a41a8:	05c02a0e 	bge	zero,r23,a4254 <___vfprintf_internal_r+0xb8c>
   a41ac:	07000404 	movi	fp,16
   a41b0:	050002f4 	movhi	r20,11
   a41b4:	a53b6484 	addi	r20,r20,-4718
   a41b8:	e5c01d0e 	bge	fp,r23,a4230 <___vfprintf_internal_r+0xb68>
   a41bc:	dc812a15 	stw	r18,1192(sp)
   a41c0:	058001c4 	movi	r22,7
   a41c4:	a025883a 	mov	r18,r20
   a41c8:	8029883a 	mov	r20,r16
   a41cc:	dc012917 	ldw	r16,1188(sp)
   a41d0:	00000306 	br	a41e0 <___vfprintf_internal_r+0xb18>
   a41d4:	bdfffc04 	addi	r23,r23,-16
   a41d8:	4a400204 	addi	r9,r9,8
   a41dc:	e5c0110e 	bge	fp,r23,a4224 <___vfprintf_internal_r+0xb5c>
   a41e0:	4c800015 	stw	r18,0(r9)
   a41e4:	4f000115 	stw	fp,4(r9)
   a41e8:	42000404 	addi	r8,r8,16
   a41ec:	18c00044 	addi	r3,r3,1
   a41f0:	da011d15 	stw	r8,1140(sp)
   a41f4:	d8c11c15 	stw	r3,1136(sp)
   a41f8:	b0fff60e 	bge	r22,r3,a41d4 <___vfprintf_internal_r+0xb0c>
   a41fc:	8809883a 	mov	r4,r17
   a4200:	800b883a 	mov	r5,r16
   a4204:	d9811b04 	addi	r6,sp,1132
   a4208:	00a36940 	call	a3694 <__sprint_r>
   a420c:	103e741e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a4210:	bdfffc04 	addi	r23,r23,-16
   a4214:	da011d17 	ldw	r8,1140(sp)
   a4218:	d8c11c17 	ldw	r3,1136(sp)
   a421c:	da400404 	addi	r9,sp,16
   a4220:	e5ffef16 	blt	fp,r23,a41e0 <___vfprintf_internal_r+0xb18>
   a4224:	a021883a 	mov	r16,r20
   a4228:	9029883a 	mov	r20,r18
   a422c:	dc812a17 	ldw	r18,1192(sp)
   a4230:	4d000015 	stw	r20,0(r9)
   a4234:	4dc00115 	stw	r23,4(r9)
   a4238:	45d1883a 	add	r8,r8,r23
   a423c:	18c00044 	addi	r3,r3,1
   a4240:	da011d15 	stw	r8,1140(sp)
   a4244:	d8c11c15 	stw	r3,1136(sp)
   a4248:	008001c4 	movi	r2,7
   a424c:	10c13e16 	blt	r2,r3,a4748 <___vfprintf_internal_r+0x1080>
   a4250:	4a400204 	addi	r9,r9,8
   a4254:	8080400c 	andi	r2,r16,256
   a4258:	1000831e 	bne	r2,zero,a4468 <___vfprintf_internal_r+0xda0>
   a425c:	d8812b17 	ldw	r2,1196(sp)
   a4260:	4cc00015 	stw	r19,0(r9)
   a4264:	48800115 	stw	r2,4(r9)
   a4268:	4091883a 	add	r8,r8,r2
   a426c:	18c00044 	addi	r3,r3,1
   a4270:	da011d15 	stw	r8,1140(sp)
   a4274:	d8c11c15 	stw	r3,1136(sp)
   a4278:	008001c4 	movi	r2,7
   a427c:	10c05316 	blt	r2,r3,a43cc <___vfprintf_internal_r+0xd04>
   a4280:	4a400204 	addi	r9,r9,8
   a4284:	8400010c 	andi	r16,r16,4
   a4288:	80002e26 	beq	r16,zero,a4344 <___vfprintf_internal_r+0xc7c>
   a428c:	d8812e17 	ldw	r2,1208(sp)
   a4290:	d8c12817 	ldw	r3,1184(sp)
   a4294:	10e1c83a 	sub	r16,r2,r3
   a4298:	04002a0e 	bge	zero,r16,a4344 <___vfprintf_internal_r+0xc7c>
   a429c:	04800404 	movi	r18,16
   a42a0:	d8c11c17 	ldw	r3,1136(sp)
   a42a4:	05c002f4 	movhi	r23,11
   a42a8:	bdfb6084 	addi	r23,r23,-4734
   a42ac:	9400170e 	bge	r18,r16,a430c <___vfprintf_internal_r+0xc44>
   a42b0:	04c001c4 	movi	r19,7
   a42b4:	dd012917 	ldw	r20,1188(sp)
   a42b8:	00000306 	br	a42c8 <___vfprintf_internal_r+0xc00>
   a42bc:	843ffc04 	addi	r16,r16,-16
   a42c0:	4a400204 	addi	r9,r9,8
   a42c4:	9400110e 	bge	r18,r16,a430c <___vfprintf_internal_r+0xc44>
   a42c8:	4dc00015 	stw	r23,0(r9)
   a42cc:	4c800115 	stw	r18,4(r9)
   a42d0:	42000404 	addi	r8,r8,16
   a42d4:	18c00044 	addi	r3,r3,1
   a42d8:	da011d15 	stw	r8,1140(sp)
   a42dc:	d8c11c15 	stw	r3,1136(sp)
   a42e0:	98fff60e 	bge	r19,r3,a42bc <___vfprintf_internal_r+0xbf4>
   a42e4:	8809883a 	mov	r4,r17
   a42e8:	a00b883a 	mov	r5,r20
   a42ec:	d9811b04 	addi	r6,sp,1132
   a42f0:	00a36940 	call	a3694 <__sprint_r>
   a42f4:	103e3a1e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a42f8:	843ffc04 	addi	r16,r16,-16
   a42fc:	da011d17 	ldw	r8,1140(sp)
   a4300:	d8c11c17 	ldw	r3,1136(sp)
   a4304:	da400404 	addi	r9,sp,16
   a4308:	943fef16 	blt	r18,r16,a42c8 <___vfprintf_internal_r+0xc00>
   a430c:	4dc00015 	stw	r23,0(r9)
   a4310:	4c000115 	stw	r16,4(r9)
   a4314:	8211883a 	add	r8,r16,r8
   a4318:	18c00044 	addi	r3,r3,1
   a431c:	da011d15 	stw	r8,1140(sp)
   a4320:	d8c11c15 	stw	r3,1136(sp)
   a4324:	008001c4 	movi	r2,7
   a4328:	10c0060e 	bge	r2,r3,a4344 <___vfprintf_internal_r+0xc7c>
   a432c:	d9412917 	ldw	r5,1188(sp)
   a4330:	8809883a 	mov	r4,r17
   a4334:	d9811b04 	addi	r6,sp,1132
   a4338:	00a36940 	call	a3694 <__sprint_r>
   a433c:	103e281e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a4340:	da011d17 	ldw	r8,1140(sp)
   a4344:	dd012817 	ldw	r20,1184(sp)
   a4348:	d9012e17 	ldw	r4,1208(sp)
   a434c:	a100010e 	bge	r20,r4,a4354 <___vfprintf_internal_r+0xc8c>
   a4350:	2029883a 	mov	r20,r4
   a4354:	d8812c17 	ldw	r2,1200(sp)
   a4358:	1505883a 	add	r2,r2,r20
   a435c:	d8812c15 	stw	r2,1200(sp)
   a4360:	4000b91e 	bne	r8,zero,a4648 <___vfprintf_internal_r+0xf80>
   a4364:	d8011c15 	stw	zero,1136(sp)
   a4368:	a8800007 	ldb	r2,0(r21)
   a436c:	da400404 	addi	r9,sp,16
   a4370:	103d0d1e 	bne	r2,zero,a37a8 <___vfprintf_internal_r+0xe0>
   a4374:	a825883a 	mov	r18,r21
   a4378:	003d2306 	br	a3808 <___vfprintf_internal_r+0x140>
   a437c:	d9412917 	ldw	r5,1188(sp)
   a4380:	8809883a 	mov	r4,r17
   a4384:	d9811b04 	addi	r6,sp,1132
   a4388:	00a36940 	call	a3694 <__sprint_r>
   a438c:	103e141e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a4390:	da011d17 	ldw	r8,1140(sp)
   a4394:	da400404 	addi	r9,sp,16
   a4398:	8080004c 	andi	r2,r16,1
   a439c:	103fb926 	beq	r2,zero,a4284 <___vfprintf_internal_r+0xbbc>
   a43a0:	d8c11c17 	ldw	r3,1136(sp)
   a43a4:	d9013717 	ldw	r4,1244(sp)
   a43a8:	00800044 	movi	r2,1
   a43ac:	48800115 	stw	r2,4(r9)
   a43b0:	49000015 	stw	r4,0(r9)
   a43b4:	4091883a 	add	r8,r8,r2
   a43b8:	1887883a 	add	r3,r3,r2
   a43bc:	da011d15 	stw	r8,1140(sp)
   a43c0:	d8c11c15 	stw	r3,1136(sp)
   a43c4:	008001c4 	movi	r2,7
   a43c8:	10ffad0e 	bge	r2,r3,a4280 <___vfprintf_internal_r+0xbb8>
   a43cc:	d9412917 	ldw	r5,1188(sp)
   a43d0:	8809883a 	mov	r4,r17
   a43d4:	d9811b04 	addi	r6,sp,1132
   a43d8:	00a36940 	call	a3694 <__sprint_r>
   a43dc:	103e001e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a43e0:	da400404 	addi	r9,sp,16
   a43e4:	da011d17 	ldw	r8,1140(sp)
   a43e8:	003fa606 	br	a4284 <___vfprintf_internal_r+0xbbc>
   a43ec:	18803fcc 	andi	r2,r3,255
   a43f0:	00c00044 	movi	r3,1
   a43f4:	10c10126 	beq	r2,r3,a47fc <___vfprintf_internal_r+0x1134>
   a43f8:	00c00084 	movi	r3,2
   a43fc:	10c0ed26 	beq	r2,r3,a47b4 <___vfprintf_internal_r+0x10ec>
   a4400:	d8c10dc4 	addi	r3,sp,1079
   a4404:	b808d0fa 	srli	r4,r23,3
   a4408:	b00a977a 	slli	r5,r22,29
   a440c:	b02cd0fa 	srli	r22,r22,3
   a4410:	bdc001cc 	andi	r23,r23,7
   a4414:	b8800c04 	addi	r2,r23,48
   a4418:	292eb03a 	or	r23,r5,r4
   a441c:	18800005 	stb	r2,0(r3)
   a4420:	bd88b03a 	or	r4,r23,r22
   a4424:	1827883a 	mov	r19,r3
   a4428:	18ffffc4 	addi	r3,r3,-1
   a442c:	203ff51e 	bne	r4,zero,a4404 <___vfprintf_internal_r+0xd3c>
   a4430:	8100004c 	andi	r4,r16,1
   a4434:	980b883a 	mov	r5,r19
   a4438:	20000726 	beq	r4,zero,a4458 <___vfprintf_internal_r+0xd90>
   a443c:	10803fcc 	andi	r2,r2,255
   a4440:	1080201c 	xori	r2,r2,128
   a4444:	10bfe004 	addi	r2,r2,-128
   a4448:	01000c04 	movi	r4,48
   a444c:	11000226 	beq	r2,r4,a4458 <___vfprintf_internal_r+0xd90>
   a4450:	1827883a 	mov	r19,r3
   a4454:	293fffc5 	stb	r4,-1(r5)
   a4458:	d8812717 	ldw	r2,1180(sp)
   a445c:	14c5c83a 	sub	r2,r2,r19
   a4460:	d8812b15 	stw	r2,1196(sp)
   a4464:	003e1f06 	br	a3ce4 <___vfprintf_internal_r+0x61c>
   a4468:	00801944 	movi	r2,101
   a446c:	14807c0e 	bge	r2,r18,a4660 <___vfprintf_internal_r+0xf98>
   a4470:	d9013317 	ldw	r4,1228(sp)
   a4474:	d9413417 	ldw	r5,1232(sp)
   a4478:	000d883a 	mov	r6,zero
   a447c:	000f883a 	mov	r7,zero
   a4480:	d8c13b15 	stw	r3,1260(sp)
   a4484:	da013a15 	stw	r8,1256(sp)
   a4488:	da413c15 	stw	r9,1264(sp)
   a448c:	00aab8c0 	call	aab8c <__eqdf2>
   a4490:	d8c13b17 	ldw	r3,1260(sp)
   a4494:	da013a17 	ldw	r8,1256(sp)
   a4498:	da413c17 	ldw	r9,1264(sp)
   a449c:	1001001e 	bne	r2,zero,a48a0 <___vfprintf_internal_r+0x11d8>
   a44a0:	008002f4 	movhi	r2,11
   a44a4:	10bb6004 	addi	r2,r2,-4736
   a44a8:	48800015 	stw	r2,0(r9)
   a44ac:	00800044 	movi	r2,1
   a44b0:	48800115 	stw	r2,4(r9)
   a44b4:	4091883a 	add	r8,r8,r2
   a44b8:	1887883a 	add	r3,r3,r2
   a44bc:	da011d15 	stw	r8,1140(sp)
   a44c0:	d8c11c15 	stw	r3,1136(sp)
   a44c4:	008001c4 	movi	r2,7
   a44c8:	10c20316 	blt	r2,r3,a4cd8 <___vfprintf_internal_r+0x1610>
   a44cc:	4a400204 	addi	r9,r9,8
   a44d0:	d8812417 	ldw	r2,1168(sp)
   a44d4:	d8c13217 	ldw	r3,1224(sp)
   a44d8:	10c00216 	blt	r2,r3,a44e4 <___vfprintf_internal_r+0xe1c>
   a44dc:	8080004c 	andi	r2,r16,1
   a44e0:	103f6826 	beq	r2,zero,a4284 <___vfprintf_internal_r+0xbbc>
   a44e4:	d8c11c17 	ldw	r3,1136(sp)
   a44e8:	d9013717 	ldw	r4,1244(sp)
   a44ec:	00800044 	movi	r2,1
   a44f0:	48800115 	stw	r2,4(r9)
   a44f4:	49000015 	stw	r4,0(r9)
   a44f8:	4091883a 	add	r8,r8,r2
   a44fc:	1887883a 	add	r3,r3,r2
   a4500:	da011d15 	stw	r8,1140(sp)
   a4504:	d8c11c15 	stw	r3,1136(sp)
   a4508:	008001c4 	movi	r2,7
   a450c:	10c2ce16 	blt	r2,r3,a5048 <___vfprintf_internal_r+0x1980>
   a4510:	4a400204 	addi	r9,r9,8
   a4514:	d8813217 	ldw	r2,1224(sp)
   a4518:	14bfffc4 	addi	r18,r2,-1
   a451c:	04bf590e 	bge	zero,r18,a4284 <___vfprintf_internal_r+0xbbc>
   a4520:	04c00404 	movi	r19,16
   a4524:	d8c11c17 	ldw	r3,1136(sp)
   a4528:	050002f4 	movhi	r20,11
   a452c:	a53b6484 	addi	r20,r20,-4718
   a4530:	9c818a0e 	bge	r19,r18,a4b5c <___vfprintf_internal_r+0x1494>
   a4534:	058001c4 	movi	r22,7
   a4538:	ddc12917 	ldw	r23,1188(sp)
   a453c:	00000306 	br	a454c <___vfprintf_internal_r+0xe84>
   a4540:	4a400204 	addi	r9,r9,8
   a4544:	94bffc04 	addi	r18,r18,-16
   a4548:	9c81840e 	bge	r19,r18,a4b5c <___vfprintf_internal_r+0x1494>
   a454c:	4d000015 	stw	r20,0(r9)
   a4550:	4cc00115 	stw	r19,4(r9)
   a4554:	42000404 	addi	r8,r8,16
   a4558:	18c00044 	addi	r3,r3,1
   a455c:	da011d15 	stw	r8,1140(sp)
   a4560:	d8c11c15 	stw	r3,1136(sp)
   a4564:	b0fff60e 	bge	r22,r3,a4540 <___vfprintf_internal_r+0xe78>
   a4568:	8809883a 	mov	r4,r17
   a456c:	b80b883a 	mov	r5,r23
   a4570:	d9811b04 	addi	r6,sp,1132
   a4574:	00a36940 	call	a3694 <__sprint_r>
   a4578:	103d991e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a457c:	da011d17 	ldw	r8,1140(sp)
   a4580:	d8c11c17 	ldw	r3,1136(sp)
   a4584:	da400404 	addi	r9,sp,16
   a4588:	003fee06 	br	a4544 <___vfprintf_internal_r+0xe7c>
   a458c:	d8812e17 	ldw	r2,1208(sp)
   a4590:	d9012817 	ldw	r4,1184(sp)
   a4594:	112fc83a 	sub	r23,r2,r4
   a4598:	05ff000e 	bge	zero,r23,a419c <___vfprintf_internal_r+0xad4>
   a459c:	07000404 	movi	fp,16
   a45a0:	050002f4 	movhi	r20,11
   a45a4:	a53b6484 	addi	r20,r20,-4718
   a45a8:	e5c01d0e 	bge	fp,r23,a4620 <___vfprintf_internal_r+0xf58>
   a45ac:	dc812a15 	stw	r18,1192(sp)
   a45b0:	058001c4 	movi	r22,7
   a45b4:	a025883a 	mov	r18,r20
   a45b8:	8029883a 	mov	r20,r16
   a45bc:	dc012917 	ldw	r16,1188(sp)
   a45c0:	00000306 	br	a45d0 <___vfprintf_internal_r+0xf08>
   a45c4:	bdfffc04 	addi	r23,r23,-16
   a45c8:	4a400204 	addi	r9,r9,8
   a45cc:	e5c0110e 	bge	fp,r23,a4614 <___vfprintf_internal_r+0xf4c>
   a45d0:	4c800015 	stw	r18,0(r9)
   a45d4:	4f000115 	stw	fp,4(r9)
   a45d8:	42000404 	addi	r8,r8,16
   a45dc:	18c00044 	addi	r3,r3,1
   a45e0:	da011d15 	stw	r8,1140(sp)
   a45e4:	d8c11c15 	stw	r3,1136(sp)
   a45e8:	b0fff60e 	bge	r22,r3,a45c4 <___vfprintf_internal_r+0xefc>
   a45ec:	8809883a 	mov	r4,r17
   a45f0:	800b883a 	mov	r5,r16
   a45f4:	d9811b04 	addi	r6,sp,1132
   a45f8:	00a36940 	call	a3694 <__sprint_r>
   a45fc:	103d781e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a4600:	bdfffc04 	addi	r23,r23,-16
   a4604:	da011d17 	ldw	r8,1140(sp)
   a4608:	d8c11c17 	ldw	r3,1136(sp)
   a460c:	da400404 	addi	r9,sp,16
   a4610:	e5ffef16 	blt	fp,r23,a45d0 <___vfprintf_internal_r+0xf08>
   a4614:	a021883a 	mov	r16,r20
   a4618:	9029883a 	mov	r20,r18
   a461c:	dc812a17 	ldw	r18,1192(sp)
   a4620:	4d000015 	stw	r20,0(r9)
   a4624:	4dc00115 	stw	r23,4(r9)
   a4628:	45d1883a 	add	r8,r8,r23
   a462c:	18c00044 	addi	r3,r3,1
   a4630:	da011d15 	stw	r8,1140(sp)
   a4634:	d8c11c15 	stw	r3,1136(sp)
   a4638:	008001c4 	movi	r2,7
   a463c:	10c13616 	blt	r2,r3,a4b18 <___vfprintf_internal_r+0x1450>
   a4640:	4a400204 	addi	r9,r9,8
   a4644:	003ed506 	br	a419c <___vfprintf_internal_r+0xad4>
   a4648:	d9412917 	ldw	r5,1188(sp)
   a464c:	8809883a 	mov	r4,r17
   a4650:	d9811b04 	addi	r6,sp,1132
   a4654:	00a36940 	call	a3694 <__sprint_r>
   a4658:	103f4226 	beq	r2,zero,a4364 <___vfprintf_internal_r+0xc9c>
   a465c:	003d6006 	br	a3be0 <___vfprintf_internal_r+0x518>
   a4660:	d9013217 	ldw	r4,1224(sp)
   a4664:	00800044 	movi	r2,1
   a4668:	4cc00015 	stw	r19,0(r9)
   a466c:	1101000e 	bge	r2,r4,a4a70 <___vfprintf_internal_r+0x13a8>
   a4670:	00800044 	movi	r2,1
   a4674:	48800115 	stw	r2,4(r9)
   a4678:	4091883a 	add	r8,r8,r2
   a467c:	1887883a 	add	r3,r3,r2
   a4680:	da011d15 	stw	r8,1140(sp)
   a4684:	d8c11c15 	stw	r3,1136(sp)
   a4688:	008001c4 	movi	r2,7
   a468c:	10c10c16 	blt	r2,r3,a4ac0 <___vfprintf_internal_r+0x13f8>
   a4690:	4a400204 	addi	r9,r9,8
   a4694:	d8813717 	ldw	r2,1244(sp)
   a4698:	48800015 	stw	r2,0(r9)
   a469c:	00800044 	movi	r2,1
   a46a0:	48800115 	stw	r2,4(r9)
   a46a4:	4091883a 	add	r8,r8,r2
   a46a8:	1887883a 	add	r3,r3,r2
   a46ac:	da011d15 	stw	r8,1140(sp)
   a46b0:	d8c11c15 	stw	r3,1136(sp)
   a46b4:	008001c4 	movi	r2,7
   a46b8:	10c10a16 	blt	r2,r3,a4ae4 <___vfprintf_internal_r+0x141c>
   a46bc:	4c800204 	addi	r18,r9,8
   a46c0:	d9013317 	ldw	r4,1228(sp)
   a46c4:	d9413417 	ldw	r5,1232(sp)
   a46c8:	000d883a 	mov	r6,zero
   a46cc:	000f883a 	mov	r7,zero
   a46d0:	d8c13b15 	stw	r3,1260(sp)
   a46d4:	da013a15 	stw	r8,1256(sp)
   a46d8:	00aabe80 	call	aabe8 <__nedf2>
   a46dc:	d8c13b17 	ldw	r3,1260(sp)
   a46e0:	da013a17 	ldw	r8,1256(sp)
   a46e4:	1000ba26 	beq	r2,zero,a49d0 <___vfprintf_internal_r+0x1308>
   a46e8:	d9013217 	ldw	r4,1224(sp)
   a46ec:	9cc00044 	addi	r19,r19,1
   a46f0:	94c00015 	stw	r19,0(r18)
   a46f4:	20bfffc4 	addi	r2,r4,-1
   a46f8:	90800115 	stw	r2,4(r18)
   a46fc:	4091883a 	add	r8,r8,r2
   a4700:	18c00044 	addi	r3,r3,1
   a4704:	da011d15 	stw	r8,1140(sp)
   a4708:	d8c11c15 	stw	r3,1136(sp)
   a470c:	008001c4 	movi	r2,7
   a4710:	10c0e216 	blt	r2,r3,a4a9c <___vfprintf_internal_r+0x13d4>
   a4714:	94800204 	addi	r18,r18,8
   a4718:	d9013517 	ldw	r4,1236(sp)
   a471c:	d8811fc4 	addi	r2,sp,1151
   a4720:	90800015 	stw	r2,0(r18)
   a4724:	91000115 	stw	r4,4(r18)
   a4728:	4111883a 	add	r8,r8,r4
   a472c:	18c00044 	addi	r3,r3,1
   a4730:	da011d15 	stw	r8,1140(sp)
   a4734:	d8c11c15 	stw	r3,1136(sp)
   a4738:	008001c4 	movi	r2,7
   a473c:	10ff2316 	blt	r2,r3,a43cc <___vfprintf_internal_r+0xd04>
   a4740:	92400204 	addi	r9,r18,8
   a4744:	003ecf06 	br	a4284 <___vfprintf_internal_r+0xbbc>
   a4748:	d9412917 	ldw	r5,1188(sp)
   a474c:	8809883a 	mov	r4,r17
   a4750:	d9811b04 	addi	r6,sp,1132
   a4754:	00a36940 	call	a3694 <__sprint_r>
   a4758:	103d211e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a475c:	da011d17 	ldw	r8,1140(sp)
   a4760:	d8c11c17 	ldw	r3,1136(sp)
   a4764:	da400404 	addi	r9,sp,16
   a4768:	003eba06 	br	a4254 <___vfprintf_internal_r+0xb8c>
   a476c:	d9412917 	ldw	r5,1188(sp)
   a4770:	8809883a 	mov	r4,r17
   a4774:	d9811b04 	addi	r6,sp,1132
   a4778:	00a36940 	call	a3694 <__sprint_r>
   a477c:	103d181e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a4780:	da011d17 	ldw	r8,1140(sp)
   a4784:	d8c11c17 	ldw	r3,1136(sp)
   a4788:	da400404 	addi	r9,sp,16
   a478c:	003e8006 	br	a4190 <___vfprintf_internal_r+0xac8>
   a4790:	d9412917 	ldw	r5,1188(sp)
   a4794:	8809883a 	mov	r4,r17
   a4798:	d9811b04 	addi	r6,sp,1132
   a479c:	00a36940 	call	a3694 <__sprint_r>
   a47a0:	103d0f1e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a47a4:	da011d17 	ldw	r8,1140(sp)
   a47a8:	d8c11c17 	ldw	r3,1136(sp)
   a47ac:	da400404 	addi	r9,sp,16
   a47b0:	003e6a06 	br	a415c <___vfprintf_internal_r+0xa94>
   a47b4:	d9413617 	ldw	r5,1240(sp)
   a47b8:	d8810dc4 	addi	r2,sp,1079
   a47bc:	b8c003cc 	andi	r3,r23,15
   a47c0:	b008973a 	slli	r4,r22,28
   a47c4:	28c7883a 	add	r3,r5,r3
   a47c8:	b82ed13a 	srli	r23,r23,4
   a47cc:	18c00003 	ldbu	r3,0(r3)
   a47d0:	b02cd13a 	srli	r22,r22,4
   a47d4:	25eeb03a 	or	r23,r4,r23
   a47d8:	10c00005 	stb	r3,0(r2)
   a47dc:	bd86b03a 	or	r3,r23,r22
   a47e0:	1027883a 	mov	r19,r2
   a47e4:	10bfffc4 	addi	r2,r2,-1
   a47e8:	183ff41e 	bne	r3,zero,a47bc <___vfprintf_internal_r+0x10f4>
   a47ec:	003f1a06 	br	a4458 <___vfprintf_internal_r+0xd90>
   a47f0:	d8012b15 	stw	zero,1196(sp)
   a47f4:	dcc10e04 	addi	r19,sp,1080
   a47f8:	003d3a06 	br	a3ce4 <___vfprintf_internal_r+0x61c>
   a47fc:	b0025426 	beq	r22,zero,a5150 <___vfprintf_internal_r+0x1a88>
   a4800:	b807883a 	mov	r3,r23
   a4804:	d8810dc4 	addi	r2,sp,1079
   a4808:	882f883a 	mov	r23,r17
   a480c:	04c00244 	movi	r19,9
   a4810:	8023883a 	mov	r17,r16
   a4814:	da412815 	stw	r9,1184(sp)
   a4818:	1821883a 	mov	r16,r3
   a481c:	8009883a 	mov	r4,r16
   a4820:	b00b883a 	mov	r5,r22
   a4824:	01800284 	movi	r6,10
   a4828:	000f883a 	mov	r7,zero
   a482c:	1029883a 	mov	r20,r2
   a4830:	00a9cc40 	call	a9cc4 <__umoddi3>
   a4834:	10800c04 	addi	r2,r2,48
   a4838:	8009883a 	mov	r4,r16
   a483c:	b00b883a 	mov	r5,r22
   a4840:	a0800005 	stb	r2,0(r20)
   a4844:	01800284 	movi	r6,10
   a4848:	000f883a 	mov	r7,zero
   a484c:	00a96740 	call	a9674 <__udivdi3>
   a4850:	1021883a 	mov	r16,r2
   a4854:	182d883a 	mov	r22,r3
   a4858:	a0bfffc4 	addi	r2,r20,-1
   a485c:	183fef1e 	bne	r3,zero,a481c <___vfprintf_internal_r+0x1154>
   a4860:	9c3fee36 	bltu	r19,r16,a481c <___vfprintf_internal_r+0x1154>
   a4864:	da412817 	ldw	r9,1184(sp)
   a4868:	8005883a 	mov	r2,r16
   a486c:	8821883a 	mov	r16,r17
   a4870:	b823883a 	mov	r17,r23
   a4874:	102f883a 	mov	r23,r2
   a4878:	d8812717 	ldw	r2,1180(sp)
   a487c:	a4ffffc4 	addi	r19,r20,-1
   a4880:	bdc00c04 	addi	r23,r23,48
   a4884:	14c5c83a 	sub	r2,r2,r19
   a4888:	a5ffffc5 	stb	r23,-1(r20)
   a488c:	d8812b15 	stw	r2,1196(sp)
   a4890:	003d1406 	br	a3ce4 <___vfprintf_internal_r+0x61c>
   a4894:	00c00044 	movi	r3,1
   a4898:	bd84b03a 	or	r2,r23,r22
   a489c:	003d0306 	br	a3cac <___vfprintf_internal_r+0x5e4>
   a48a0:	dc812417 	ldw	r18,1168(sp)
   a48a4:	0481140e 	bge	zero,r18,a4cf8 <___vfprintf_internal_r+0x1630>
   a48a8:	d9013217 	ldw	r4,1224(sp)
   a48ac:	4cc00015 	stw	r19,0(r9)
   a48b0:	9100ec16 	blt	r18,r4,a4c64 <___vfprintf_internal_r+0x159c>
   a48b4:	49000115 	stw	r4,4(r9)
   a48b8:	4111883a 	add	r8,r8,r4
   a48bc:	18c00044 	addi	r3,r3,1
   a48c0:	da011d15 	stw	r8,1140(sp)
   a48c4:	d8c11c15 	stw	r3,1136(sp)
   a48c8:	008001c4 	movi	r2,7
   a48cc:	10c23616 	blt	r2,r3,a51a8 <___vfprintf_internal_r+0x1ae0>
   a48d0:	4a400204 	addi	r9,r9,8
   a48d4:	d8813217 	ldw	r2,1224(sp)
   a48d8:	90a5c83a 	sub	r18,r18,r2
   a48dc:	04beae0e 	bge	zero,r18,a4398 <___vfprintf_internal_r+0xcd0>
   a48e0:	04c00404 	movi	r19,16
   a48e4:	d8c11c17 	ldw	r3,1136(sp)
   a48e8:	050002f4 	movhi	r20,11
   a48ec:	a53b6484 	addi	r20,r20,-4718
   a48f0:	9c81dd0e 	bge	r19,r18,a5068 <___vfprintf_internal_r+0x19a0>
   a48f4:	058001c4 	movi	r22,7
   a48f8:	ddc12917 	ldw	r23,1188(sp)
   a48fc:	00000306 	br	a490c <___vfprintf_internal_r+0x1244>
   a4900:	4a400204 	addi	r9,r9,8
   a4904:	94bffc04 	addi	r18,r18,-16
   a4908:	9c81d70e 	bge	r19,r18,a5068 <___vfprintf_internal_r+0x19a0>
   a490c:	4d000015 	stw	r20,0(r9)
   a4910:	4cc00115 	stw	r19,4(r9)
   a4914:	42000404 	addi	r8,r8,16
   a4918:	18c00044 	addi	r3,r3,1
   a491c:	da011d15 	stw	r8,1140(sp)
   a4920:	d8c11c15 	stw	r3,1136(sp)
   a4924:	b0fff60e 	bge	r22,r3,a4900 <___vfprintf_internal_r+0x1238>
   a4928:	8809883a 	mov	r4,r17
   a492c:	b80b883a 	mov	r5,r23
   a4930:	d9811b04 	addi	r6,sp,1132
   a4934:	00a36940 	call	a3694 <__sprint_r>
   a4938:	103ca91e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a493c:	da011d17 	ldw	r8,1140(sp)
   a4940:	d8c11c17 	ldw	r3,1136(sp)
   a4944:	da400404 	addi	r9,sp,16
   a4948:	003fee06 	br	a4904 <___vfprintf_internal_r+0x123c>
   a494c:	d9412917 	ldw	r5,1188(sp)
   a4950:	8809883a 	mov	r4,r17
   a4954:	d9811b04 	addi	r6,sp,1132
   a4958:	00a36940 	call	a3694 <__sprint_r>
   a495c:	103ca01e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a4960:	da011d17 	ldw	r8,1140(sp)
   a4964:	d8c11c17 	ldw	r3,1136(sp)
   a4968:	da400404 	addi	r9,sp,16
   a496c:	003dee06 	br	a4128 <___vfprintf_internal_r+0xa60>
   a4970:	00c00084 	movi	r3,2
   a4974:	bd84b03a 	or	r2,r23,r22
   a4978:	d8012585 	stb	zero,1174(sp)
   a497c:	003ccb06 	br	a3cac <___vfprintf_internal_r+0x5e4>
   a4980:	8080040c 	andi	r2,r16,16
   a4984:	1000ae26 	beq	r2,zero,a4c40 <___vfprintf_internal_r+0x1578>
   a4988:	d9012d17 	ldw	r4,1204(sp)
   a498c:	25c00017 	ldw	r23,0(r4)
   a4990:	21000104 	addi	r4,r4,4
   a4994:	d9012d15 	stw	r4,1204(sp)
   a4998:	b82dd7fa 	srai	r22,r23,31
   a499c:	b005883a 	mov	r2,r22
   a49a0:	003cb906 	br	a3c88 <___vfprintf_internal_r+0x5c0>
   a49a4:	8080040c 	andi	r2,r16,16
   a49a8:	10007026 	beq	r2,zero,a4b6c <___vfprintf_internal_r+0x14a4>
   a49ac:	d8812d17 	ldw	r2,1204(sp)
   a49b0:	002d883a 	mov	r22,zero
   a49b4:	00c00044 	movi	r3,1
   a49b8:	15c00017 	ldw	r23,0(r2)
   a49bc:	10800104 	addi	r2,r2,4
   a49c0:	d8812d15 	stw	r2,1204(sp)
   a49c4:	d8012585 	stb	zero,1174(sp)
   a49c8:	b805883a 	mov	r2,r23
   a49cc:	003cb706 	br	a3cac <___vfprintf_internal_r+0x5e4>
   a49d0:	d8813217 	ldw	r2,1224(sp)
   a49d4:	14ffffc4 	addi	r19,r2,-1
   a49d8:	04ff4f0e 	bge	zero,r19,a4718 <___vfprintf_internal_r+0x1050>
   a49dc:	05800404 	movi	r22,16
   a49e0:	050002f4 	movhi	r20,11
   a49e4:	a53b6484 	addi	r20,r20,-4718
   a49e8:	b4c0470e 	bge	r22,r19,a4b08 <___vfprintf_internal_r+0x1440>
   a49ec:	05c001c4 	movi	r23,7
   a49f0:	df012917 	ldw	fp,1188(sp)
   a49f4:	00000306 	br	a4a04 <___vfprintf_internal_r+0x133c>
   a49f8:	94800204 	addi	r18,r18,8
   a49fc:	9cfffc04 	addi	r19,r19,-16
   a4a00:	b4c0410e 	bge	r22,r19,a4b08 <___vfprintf_internal_r+0x1440>
   a4a04:	95000015 	stw	r20,0(r18)
   a4a08:	95800115 	stw	r22,4(r18)
   a4a0c:	42000404 	addi	r8,r8,16
   a4a10:	18c00044 	addi	r3,r3,1
   a4a14:	da011d15 	stw	r8,1140(sp)
   a4a18:	d8c11c15 	stw	r3,1136(sp)
   a4a1c:	b8fff60e 	bge	r23,r3,a49f8 <___vfprintf_internal_r+0x1330>
   a4a20:	8809883a 	mov	r4,r17
   a4a24:	e00b883a 	mov	r5,fp
   a4a28:	d9811b04 	addi	r6,sp,1132
   a4a2c:	00a36940 	call	a3694 <__sprint_r>
   a4a30:	103c6b1e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a4a34:	da011d17 	ldw	r8,1140(sp)
   a4a38:	d8c11c17 	ldw	r3,1136(sp)
   a4a3c:	dc800404 	addi	r18,sp,16
   a4a40:	003fee06 	br	a49fc <___vfprintf_internal_r+0x1334>
   a4a44:	8080040c 	andi	r2,r16,16
   a4a48:	10005326 	beq	r2,zero,a4b98 <___vfprintf_internal_r+0x14d0>
   a4a4c:	d8c12d17 	ldw	r3,1204(sp)
   a4a50:	002d883a 	mov	r22,zero
   a4a54:	1dc00017 	ldw	r23,0(r3)
   a4a58:	18c00104 	addi	r3,r3,4
   a4a5c:	d8c12d15 	stw	r3,1204(sp)
   a4a60:	b805883a 	mov	r2,r23
   a4a64:	0007883a 	mov	r3,zero
   a4a68:	d8012585 	stb	zero,1174(sp)
   a4a6c:	003c8f06 	br	a3cac <___vfprintf_internal_r+0x5e4>
   a4a70:	8088703a 	and	r4,r16,r2
   a4a74:	203efe1e 	bne	r4,zero,a4670 <___vfprintf_internal_r+0xfa8>
   a4a78:	48800115 	stw	r2,4(r9)
   a4a7c:	42000044 	addi	r8,r8,1
   a4a80:	18c00044 	addi	r3,r3,1
   a4a84:	da011d15 	stw	r8,1140(sp)
   a4a88:	d8c11c15 	stw	r3,1136(sp)
   a4a8c:	008001c4 	movi	r2,7
   a4a90:	10c00216 	blt	r2,r3,a4a9c <___vfprintf_internal_r+0x13d4>
   a4a94:	4c800204 	addi	r18,r9,8
   a4a98:	003f1f06 	br	a4718 <___vfprintf_internal_r+0x1050>
   a4a9c:	d9412917 	ldw	r5,1188(sp)
   a4aa0:	8809883a 	mov	r4,r17
   a4aa4:	d9811b04 	addi	r6,sp,1132
   a4aa8:	00a36940 	call	a3694 <__sprint_r>
   a4aac:	103c4c1e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a4ab0:	dc800404 	addi	r18,sp,16
   a4ab4:	da011d17 	ldw	r8,1140(sp)
   a4ab8:	d8c11c17 	ldw	r3,1136(sp)
   a4abc:	003f1606 	br	a4718 <___vfprintf_internal_r+0x1050>
   a4ac0:	d9412917 	ldw	r5,1188(sp)
   a4ac4:	8809883a 	mov	r4,r17
   a4ac8:	d9811b04 	addi	r6,sp,1132
   a4acc:	00a36940 	call	a3694 <__sprint_r>
   a4ad0:	103c431e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a4ad4:	da011d17 	ldw	r8,1140(sp)
   a4ad8:	d8c11c17 	ldw	r3,1136(sp)
   a4adc:	da400404 	addi	r9,sp,16
   a4ae0:	003eec06 	br	a4694 <___vfprintf_internal_r+0xfcc>
   a4ae4:	d9412917 	ldw	r5,1188(sp)
   a4ae8:	8809883a 	mov	r4,r17
   a4aec:	d9811b04 	addi	r6,sp,1132
   a4af0:	00a36940 	call	a3694 <__sprint_r>
   a4af4:	103c3a1e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a4af8:	da011d17 	ldw	r8,1140(sp)
   a4afc:	d8c11c17 	ldw	r3,1136(sp)
   a4b00:	dc800404 	addi	r18,sp,16
   a4b04:	003eee06 	br	a46c0 <___vfprintf_internal_r+0xff8>
   a4b08:	95000015 	stw	r20,0(r18)
   a4b0c:	94c00115 	stw	r19,4(r18)
   a4b10:	44d1883a 	add	r8,r8,r19
   a4b14:	003efa06 	br	a4700 <___vfprintf_internal_r+0x1038>
   a4b18:	d9412917 	ldw	r5,1188(sp)
   a4b1c:	8809883a 	mov	r4,r17
   a4b20:	d9811b04 	addi	r6,sp,1132
   a4b24:	00a36940 	call	a3694 <__sprint_r>
   a4b28:	103c2d1e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a4b2c:	da011d17 	ldw	r8,1140(sp)
   a4b30:	d8c11c17 	ldw	r3,1136(sp)
   a4b34:	da400404 	addi	r9,sp,16
   a4b38:	003d9806 	br	a419c <___vfprintf_internal_r+0xad4>
   a4b3c:	8080100c 	andi	r2,r16,64
   a4b40:	10011626 	beq	r2,zero,a4f9c <___vfprintf_internal_r+0x18d4>
   a4b44:	d8c12d17 	ldw	r3,1204(sp)
   a4b48:	002d883a 	mov	r22,zero
   a4b4c:	1dc0000b 	ldhu	r23,0(r3)
   a4b50:	18c00104 	addi	r3,r3,4
   a4b54:	d8c12d15 	stw	r3,1204(sp)
   a4b58:	003cc106 	br	a3e60 <___vfprintf_internal_r+0x798>
   a4b5c:	4d000015 	stw	r20,0(r9)
   a4b60:	4c800115 	stw	r18,4(r9)
   a4b64:	4491883a 	add	r8,r8,r18
   a4b68:	003dc006 	br	a426c <___vfprintf_internal_r+0xba4>
   a4b6c:	8080100c 	andi	r2,r16,64
   a4b70:	10010126 	beq	r2,zero,a4f78 <___vfprintf_internal_r+0x18b0>
   a4b74:	d8c12d17 	ldw	r3,1204(sp)
   a4b78:	002d883a 	mov	r22,zero
   a4b7c:	1dc0000b 	ldhu	r23,0(r3)
   a4b80:	18c00104 	addi	r3,r3,4
   a4b84:	d8c12d15 	stw	r3,1204(sp)
   a4b88:	b805883a 	mov	r2,r23
   a4b8c:	00c00044 	movi	r3,1
   a4b90:	d8012585 	stb	zero,1174(sp)
   a4b94:	003c4506 	br	a3cac <___vfprintf_internal_r+0x5e4>
   a4b98:	8080100c 	andi	r2,r16,64
   a4b9c:	10010526 	beq	r2,zero,a4fb4 <___vfprintf_internal_r+0x18ec>
   a4ba0:	d9012d17 	ldw	r4,1204(sp)
   a4ba4:	002d883a 	mov	r22,zero
   a4ba8:	0007883a 	mov	r3,zero
   a4bac:	25c0000b 	ldhu	r23,0(r4)
   a4bb0:	21000104 	addi	r4,r4,4
   a4bb4:	d9012d15 	stw	r4,1204(sp)
   a4bb8:	b805883a 	mov	r2,r23
   a4bbc:	d8012585 	stb	zero,1174(sp)
   a4bc0:	003c3a06 	br	a3cac <___vfprintf_internal_r+0x5e4>
   a4bc4:	d8812d17 	ldw	r2,1204(sp)
   a4bc8:	15800017 	ldw	r22,0(r2)
   a4bcc:	15000117 	ldw	r20,4(r2)
   a4bd0:	10800204 	addi	r2,r2,8
   a4bd4:	d8812d15 	stw	r2,1204(sp)
   a4bd8:	dd813315 	stw	r22,1228(sp)
   a4bdc:	dd013415 	stw	r20,1232(sp)
   a4be0:	003c5906 	br	a3d48 <___vfprintf_internal_r+0x680>
   a4be4:	00c00084 	movi	r3,2
   a4be8:	d8012585 	stb	zero,1174(sp)
   a4bec:	003c2f06 	br	a3cac <___vfprintf_internal_r+0x5e4>
   a4bf0:	ac800007 	ldb	r18,0(r21)
   a4bf4:	003b1006 	br	a3838 <___vfprintf_internal_r+0x170>
   a4bf8:	8080040c 	andi	r2,r16,16
   a4bfc:	1000091e 	bne	r2,zero,a4c24 <___vfprintf_internal_r+0x155c>
   a4c00:	8400100c 	andi	r16,r16,64
   a4c04:	80000726 	beq	r16,zero,a4c24 <___vfprintf_internal_r+0x155c>
   a4c08:	d8c12d17 	ldw	r3,1204(sp)
   a4c0c:	d9012c17 	ldw	r4,1200(sp)
   a4c10:	18800017 	ldw	r2,0(r3)
   a4c14:	18c00104 	addi	r3,r3,4
   a4c18:	d8c12d15 	stw	r3,1204(sp)
   a4c1c:	1100000d 	sth	r4,0(r2)
   a4c20:	003adf06 	br	a37a0 <___vfprintf_internal_r+0xd8>
   a4c24:	d8c12d17 	ldw	r3,1204(sp)
   a4c28:	d9012c17 	ldw	r4,1200(sp)
   a4c2c:	18800017 	ldw	r2,0(r3)
   a4c30:	18c00104 	addi	r3,r3,4
   a4c34:	d8c12d15 	stw	r3,1204(sp)
   a4c38:	11000015 	stw	r4,0(r2)
   a4c3c:	003ad806 	br	a37a0 <___vfprintf_internal_r+0xd8>
   a4c40:	8080100c 	andi	r2,r16,64
   a4c44:	1000c526 	beq	r2,zero,a4f5c <___vfprintf_internal_r+0x1894>
   a4c48:	d8812d17 	ldw	r2,1204(sp)
   a4c4c:	15c0000f 	ldh	r23,0(r2)
   a4c50:	10800104 	addi	r2,r2,4
   a4c54:	d8812d15 	stw	r2,1204(sp)
   a4c58:	b82dd7fa 	srai	r22,r23,31
   a4c5c:	b005883a 	mov	r2,r22
   a4c60:	003c0906 	br	a3c88 <___vfprintf_internal_r+0x5c0>
   a4c64:	4c800115 	stw	r18,4(r9)
   a4c68:	9211883a 	add	r8,r18,r8
   a4c6c:	18c00044 	addi	r3,r3,1
   a4c70:	da011d15 	stw	r8,1140(sp)
   a4c74:	d8c11c15 	stw	r3,1136(sp)
   a4c78:	008001c4 	movi	r2,7
   a4c7c:	10c14016 	blt	r2,r3,a5180 <___vfprintf_internal_r+0x1ab8>
   a4c80:	4a400204 	addi	r9,r9,8
   a4c84:	d8813717 	ldw	r2,1244(sp)
   a4c88:	9ca7883a 	add	r19,r19,r18
   a4c8c:	48800015 	stw	r2,0(r9)
   a4c90:	00800044 	movi	r2,1
   a4c94:	48800115 	stw	r2,4(r9)
   a4c98:	4091883a 	add	r8,r8,r2
   a4c9c:	1887883a 	add	r3,r3,r2
   a4ca0:	da011d15 	stw	r8,1140(sp)
   a4ca4:	d8c11c15 	stw	r3,1136(sp)
   a4ca8:	008001c4 	movi	r2,7
   a4cac:	10c12c16 	blt	r2,r3,a5160 <___vfprintf_internal_r+0x1a98>
   a4cb0:	4a400204 	addi	r9,r9,8
   a4cb4:	d9013217 	ldw	r4,1224(sp)
   a4cb8:	da011d17 	ldw	r8,1140(sp)
   a4cbc:	d8c11c17 	ldw	r3,1136(sp)
   a4cc0:	24a5c83a 	sub	r18,r4,r18
   a4cc4:	4cc00015 	stw	r19,0(r9)
   a4cc8:	003fa506 	br	a4b60 <___vfprintf_internal_r+0x1498>
   a4ccc:	04c002f4 	movhi	r19,11
   a4cd0:	9cfb5104 	addi	r19,r19,-4796
   a4cd4:	003c2e06 	br	a3d90 <___vfprintf_internal_r+0x6c8>
   a4cd8:	d9412917 	ldw	r5,1188(sp)
   a4cdc:	8809883a 	mov	r4,r17
   a4ce0:	d9811b04 	addi	r6,sp,1132
   a4ce4:	00a36940 	call	a3694 <__sprint_r>
   a4ce8:	103bbd1e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a4cec:	da011d17 	ldw	r8,1140(sp)
   a4cf0:	da400404 	addi	r9,sp,16
   a4cf4:	003df606 	br	a44d0 <___vfprintf_internal_r+0xe08>
   a4cf8:	008002f4 	movhi	r2,11
   a4cfc:	10bb6004 	addi	r2,r2,-4736
   a4d00:	48800015 	stw	r2,0(r9)
   a4d04:	00800044 	movi	r2,1
   a4d08:	48800115 	stw	r2,4(r9)
   a4d0c:	4091883a 	add	r8,r8,r2
   a4d10:	1887883a 	add	r3,r3,r2
   a4d14:	da011d15 	stw	r8,1140(sp)
   a4d18:	d8c11c15 	stw	r3,1136(sp)
   a4d1c:	008001c4 	movi	r2,7
   a4d20:	10c0bc16 	blt	r2,r3,a5014 <___vfprintf_internal_r+0x194c>
   a4d24:	4a400204 	addi	r9,r9,8
   a4d28:	9000041e 	bne	r18,zero,a4d3c <___vfprintf_internal_r+0x1674>
   a4d2c:	d8c13217 	ldw	r3,1224(sp)
   a4d30:	1800021e 	bne	r3,zero,a4d3c <___vfprintf_internal_r+0x1674>
   a4d34:	8080004c 	andi	r2,r16,1
   a4d38:	103d5226 	beq	r2,zero,a4284 <___vfprintf_internal_r+0xbbc>
   a4d3c:	d8c11c17 	ldw	r3,1136(sp)
   a4d40:	d9013717 	ldw	r4,1244(sp)
   a4d44:	00800044 	movi	r2,1
   a4d48:	48800115 	stw	r2,4(r9)
   a4d4c:	49000015 	stw	r4,0(r9)
   a4d50:	4091883a 	add	r8,r8,r2
   a4d54:	1887883a 	add	r3,r3,r2
   a4d58:	da011d15 	stw	r8,1140(sp)
   a4d5c:	d8c11c15 	stw	r3,1136(sp)
   a4d60:	008001c4 	movi	r2,7
   a4d64:	10c14516 	blt	r2,r3,a527c <___vfprintf_internal_r+0x1bb4>
   a4d68:	4a400204 	addi	r9,r9,8
   a4d6c:	04a5c83a 	sub	r18,zero,r18
   a4d70:	0480d70e 	bge	zero,r18,a50d0 <___vfprintf_internal_r+0x1a08>
   a4d74:	05800404 	movi	r22,16
   a4d78:	050002f4 	movhi	r20,11
   a4d7c:	a53b6484 	addi	r20,r20,-4718
   a4d80:	b480db0e 	bge	r22,r18,a50f0 <___vfprintf_internal_r+0x1a28>
   a4d84:	05c001c4 	movi	r23,7
   a4d88:	df012917 	ldw	fp,1188(sp)
   a4d8c:	00000306 	br	a4d9c <___vfprintf_internal_r+0x16d4>
   a4d90:	4a400204 	addi	r9,r9,8
   a4d94:	94bffc04 	addi	r18,r18,-16
   a4d98:	b480d50e 	bge	r22,r18,a50f0 <___vfprintf_internal_r+0x1a28>
   a4d9c:	4d000015 	stw	r20,0(r9)
   a4da0:	4d800115 	stw	r22,4(r9)
   a4da4:	42000404 	addi	r8,r8,16
   a4da8:	18c00044 	addi	r3,r3,1
   a4dac:	da011d15 	stw	r8,1140(sp)
   a4db0:	d8c11c15 	stw	r3,1136(sp)
   a4db4:	b8fff60e 	bge	r23,r3,a4d90 <___vfprintf_internal_r+0x16c8>
   a4db8:	8809883a 	mov	r4,r17
   a4dbc:	e00b883a 	mov	r5,fp
   a4dc0:	d9811b04 	addi	r6,sp,1132
   a4dc4:	00a36940 	call	a3694 <__sprint_r>
   a4dc8:	103b851e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a4dcc:	da011d17 	ldw	r8,1140(sp)
   a4dd0:	d8c11c17 	ldw	r3,1136(sp)
   a4dd4:	da400404 	addi	r9,sp,16
   a4dd8:	003fee06 	br	a4d94 <___vfprintf_internal_r+0x16cc>
   a4ddc:	da413c15 	stw	r9,1264(sp)
   a4de0:	00a94d80 	call	a94d8 <__isnand>
   a4de4:	da413c17 	ldw	r9,1264(sp)
   a4de8:	10007e1e 	bne	r2,zero,a4fe4 <___vfprintf_internal_r+0x191c>
   a4dec:	00bfffc4 	movi	r2,-1
   a4df0:	e0816a26 	beq	fp,r2,a539c <___vfprintf_internal_r+0x1cd4>
   a4df4:	008019c4 	movi	r2,103
   a4df8:	90816526 	beq	r18,r2,a5390 <___vfprintf_internal_r+0x1cc8>
   a4dfc:	008011c4 	movi	r2,71
   a4e00:	90816326 	beq	r18,r2,a5390 <___vfprintf_internal_r+0x1cc8>
   a4e04:	80c04014 	ori	r3,r16,256
   a4e08:	d8c12a15 	stw	r3,1192(sp)
   a4e0c:	a0016516 	blt	r20,zero,a53a4 <___vfprintf_internal_r+0x1cdc>
   a4e10:	d8012f05 	stb	zero,1212(sp)
   a4e14:	00801984 	movi	r2,102
   a4e18:	9080f226 	beq	r18,r2,a51e4 <___vfprintf_internal_r+0x1b1c>
   a4e1c:	00801184 	movi	r2,70
   a4e20:	9080f026 	beq	r18,r2,a51e4 <___vfprintf_internal_r+0x1b1c>
   a4e24:	00801944 	movi	r2,101
   a4e28:	90818d26 	beq	r18,r2,a5460 <___vfprintf_internal_r+0x1d98>
   a4e2c:	00801144 	movi	r2,69
   a4e30:	90818b26 	beq	r18,r2,a5460 <___vfprintf_internal_r+0x1d98>
   a4e34:	e02f883a 	mov	r23,fp
   a4e38:	d8812404 	addi	r2,sp,1168
   a4e3c:	d8800115 	stw	r2,4(sp)
   a4e40:	d8812304 	addi	r2,sp,1164
   a4e44:	d8800215 	stw	r2,8(sp)
   a4e48:	d8812204 	addi	r2,sp,1160
   a4e4c:	ddc00015 	stw	r23,0(sp)
   a4e50:	d8800315 	stw	r2,12(sp)
   a4e54:	8809883a 	mov	r4,r17
   a4e58:	b00b883a 	mov	r5,r22
   a4e5c:	a00d883a 	mov	r6,r20
   a4e60:	01c00084 	movi	r7,2
   a4e64:	da413c15 	stw	r9,1264(sp)
   a4e68:	00a5ce00 	call	a5ce0 <_dtoa_r>
   a4e6c:	1027883a 	mov	r19,r2
   a4e70:	008019c4 	movi	r2,103
   a4e74:	da413c17 	ldw	r9,1264(sp)
   a4e78:	9081951e 	bne	r18,r2,a54d0 <___vfprintf_internal_r+0x1e08>
   a4e7c:	8080004c 	andi	r2,r16,1
   a4e80:	10017926 	beq	r2,zero,a5468 <___vfprintf_internal_r+0x1da0>
   a4e84:	00801184 	movi	r2,70
   a4e88:	9dc7883a 	add	r3,r19,r23
   a4e8c:	9080e626 	beq	r18,r2,a5228 <___vfprintf_internal_r+0x1b60>
   a4e90:	b009883a 	mov	r4,r22
   a4e94:	a00b883a 	mov	r5,r20
   a4e98:	000d883a 	mov	r6,zero
   a4e9c:	000f883a 	mov	r7,zero
   a4ea0:	d8c13b15 	stw	r3,1260(sp)
   a4ea4:	da413c15 	stw	r9,1264(sp)
   a4ea8:	00aab8c0 	call	aab8c <__eqdf2>
   a4eac:	d8c13b17 	ldw	r3,1260(sp)
   a4eb0:	da413c17 	ldw	r9,1264(sp)
   a4eb4:	10000726 	beq	r2,zero,a4ed4 <___vfprintf_internal_r+0x180c>
   a4eb8:	d8812217 	ldw	r2,1160(sp)
   a4ebc:	10c18a2e 	bgeu	r2,r3,a54e8 <___vfprintf_internal_r+0x1e20>
   a4ec0:	01000c04 	movi	r4,48
   a4ec4:	11000005 	stb	r4,0(r2)
   a4ec8:	10800044 	addi	r2,r2,1
   a4ecc:	d8812215 	stw	r2,1160(sp)
   a4ed0:	10fffc1e 	bne	r2,r3,a4ec4 <___vfprintf_internal_r+0x17fc>
   a4ed4:	1cc7c83a 	sub	r3,r3,r19
   a4ed8:	d8c13215 	stw	r3,1224(sp)
   a4edc:	008019c4 	movi	r2,103
   a4ee0:	9080fa26 	beq	r18,r2,a52cc <___vfprintf_internal_r+0x1c04>
   a4ee4:	008011c4 	movi	r2,71
   a4ee8:	9080f826 	beq	r18,r2,a52cc <___vfprintf_internal_r+0x1c04>
   a4eec:	00801984 	movi	r2,102
   a4ef0:	90818e1e 	bne	r18,r2,a552c <___vfprintf_internal_r+0x1e64>
   a4ef4:	d8812417 	ldw	r2,1168(sp)
   a4ef8:	d8812b15 	stw	r2,1196(sp)
   a4efc:	00817c0e 	bge	zero,r2,a54f0 <___vfprintf_internal_r+0x1e28>
   a4f00:	e000021e 	bne	fp,zero,a4f0c <___vfprintf_internal_r+0x1844>
   a4f04:	8400004c 	andi	r16,r16,1
   a4f08:	80000426 	beq	r16,zero,a4f1c <___vfprintf_internal_r+0x1854>
   a4f0c:	d8812b17 	ldw	r2,1196(sp)
   a4f10:	e2000044 	addi	r8,fp,1
   a4f14:	1205883a 	add	r2,r2,r8
   a4f18:	d8812b15 	stw	r2,1196(sp)
   a4f1c:	d8812815 	stw	r2,1184(sp)
   a4f20:	10010b16 	blt	r2,zero,a5350 <___vfprintf_internal_r+0x1c88>
   a4f24:	ddc12f07 	ldb	r23,1212(sp)
   a4f28:	b800e426 	beq	r23,zero,a52bc <___vfprintf_internal_r+0x1bf4>
   a4f2c:	00800b44 	movi	r2,45
   a4f30:	d8812585 	stb	r2,1174(sp)
   a4f34:	dc012a17 	ldw	r16,1192(sp)
   a4f38:	d8013115 	stw	zero,1220(sp)
   a4f3c:	003b7306 	br	a3d0c <___vfprintf_internal_r+0x644>
   a4f40:	d8812b17 	ldw	r2,1196(sp)
   a4f44:	d8812815 	stw	r2,1184(sp)
   a4f48:	10005716 	blt	r2,zero,a50a8 <___vfprintf_internal_r+0x19e0>
   a4f4c:	d8812583 	ldbu	r2,1174(sp)
   a4f50:	ddc12d15 	stw	r23,1204(sp)
   a4f54:	d8013115 	stw	zero,1220(sp)
   a4f58:	003b6806 	br	a3cfc <___vfprintf_internal_r+0x634>
   a4f5c:	d8c12d17 	ldw	r3,1204(sp)
   a4f60:	1dc00017 	ldw	r23,0(r3)
   a4f64:	18c00104 	addi	r3,r3,4
   a4f68:	d8c12d15 	stw	r3,1204(sp)
   a4f6c:	b82dd7fa 	srai	r22,r23,31
   a4f70:	b005883a 	mov	r2,r22
   a4f74:	003b4406 	br	a3c88 <___vfprintf_internal_r+0x5c0>
   a4f78:	d9012d17 	ldw	r4,1204(sp)
   a4f7c:	002d883a 	mov	r22,zero
   a4f80:	00c00044 	movi	r3,1
   a4f84:	25c00017 	ldw	r23,0(r4)
   a4f88:	21000104 	addi	r4,r4,4
   a4f8c:	d9012d15 	stw	r4,1204(sp)
   a4f90:	b805883a 	mov	r2,r23
   a4f94:	d8012585 	stb	zero,1174(sp)
   a4f98:	003b4406 	br	a3cac <___vfprintf_internal_r+0x5e4>
   a4f9c:	d9012d17 	ldw	r4,1204(sp)
   a4fa0:	002d883a 	mov	r22,zero
   a4fa4:	25c00017 	ldw	r23,0(r4)
   a4fa8:	21000104 	addi	r4,r4,4
   a4fac:	d9012d15 	stw	r4,1204(sp)
   a4fb0:	003bab06 	br	a3e60 <___vfprintf_internal_r+0x798>
   a4fb4:	d8812d17 	ldw	r2,1204(sp)
   a4fb8:	002d883a 	mov	r22,zero
   a4fbc:	0007883a 	mov	r3,zero
   a4fc0:	15c00017 	ldw	r23,0(r2)
   a4fc4:	10800104 	addi	r2,r2,4
   a4fc8:	d8812d15 	stw	r2,1204(sp)
   a4fcc:	d8012585 	stb	zero,1174(sp)
   a4fd0:	b805883a 	mov	r2,r23
   a4fd4:	003b3506 	br	a3cac <___vfprintf_internal_r+0x5e4>
   a4fd8:	00ffffc4 	movi	r3,-1
   a4fdc:	b82b883a 	mov	r21,r23
   a4fe0:	003a1606 	br	a383c <___vfprintf_internal_r+0x174>
   a4fe4:	008011c4 	movi	r2,71
   a4fe8:	1480b116 	blt	r2,r18,a52b0 <___vfprintf_internal_r+0x1be8>
   a4fec:	04c002f4 	movhi	r19,11
   a4ff0:	9cfb5204 	addi	r19,r19,-4792
   a4ff4:	00c000c4 	movi	r3,3
   a4ff8:	00bfdfc4 	movi	r2,-129
   a4ffc:	80a0703a 	and	r16,r16,r2
   a5000:	d8c12815 	stw	r3,1184(sp)
   a5004:	d8812583 	ldbu	r2,1174(sp)
   a5008:	d8c12b15 	stw	r3,1196(sp)
   a500c:	d8013115 	stw	zero,1220(sp)
   a5010:	003b3a06 	br	a3cfc <___vfprintf_internal_r+0x634>
   a5014:	d9412917 	ldw	r5,1188(sp)
   a5018:	8809883a 	mov	r4,r17
   a501c:	d9811b04 	addi	r6,sp,1132
   a5020:	00a36940 	call	a3694 <__sprint_r>
   a5024:	103aee1e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a5028:	dc812417 	ldw	r18,1168(sp)
   a502c:	da011d17 	ldw	r8,1140(sp)
   a5030:	da400404 	addi	r9,sp,16
   a5034:	003f3c06 	br	a4d28 <___vfprintf_internal_r+0x1660>
   a5038:	ad400044 	addi	r21,r21,1
   a503c:	84000814 	ori	r16,r16,32
   a5040:	14800047 	ldb	r18,1(r2)
   a5044:	0039fc06 	br	a3838 <___vfprintf_internal_r+0x170>
   a5048:	d9412917 	ldw	r5,1188(sp)
   a504c:	8809883a 	mov	r4,r17
   a5050:	d9811b04 	addi	r6,sp,1132
   a5054:	00a36940 	call	a3694 <__sprint_r>
   a5058:	103ae11e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a505c:	da011d17 	ldw	r8,1140(sp)
   a5060:	da400404 	addi	r9,sp,16
   a5064:	003d2b06 	br	a4514 <___vfprintf_internal_r+0xe4c>
   a5068:	4d000015 	stw	r20,0(r9)
   a506c:	4c800115 	stw	r18,4(r9)
   a5070:	4491883a 	add	r8,r8,r18
   a5074:	18c00044 	addi	r3,r3,1
   a5078:	da011d15 	stw	r8,1140(sp)
   a507c:	d8c11c15 	stw	r3,1136(sp)
   a5080:	008001c4 	movi	r2,7
   a5084:	10fcbd16 	blt	r2,r3,a437c <___vfprintf_internal_r+0xcb4>
   a5088:	4a400204 	addi	r9,r9,8
   a508c:	003cc206 	br	a4398 <___vfprintf_internal_r+0xcd0>
   a5090:	da413c15 	stw	r9,1264(sp)
   a5094:	00a36000 	call	a3600 <strlen>
   a5098:	d8812b15 	stw	r2,1196(sp)
   a509c:	d8812815 	stw	r2,1184(sp)
   a50a0:	da413c17 	ldw	r9,1264(sp)
   a50a4:	103fa90e 	bge	r2,zero,a4f4c <___vfprintf_internal_r+0x1884>
   a50a8:	d8012815 	stw	zero,1184(sp)
   a50ac:	003fa706 	br	a4f4c <___vfprintf_internal_r+0x1884>
   a50b0:	d9412917 	ldw	r5,1188(sp)
   a50b4:	8809883a 	mov	r4,r17
   a50b8:	d9811b04 	addi	r6,sp,1132
   a50bc:	00a36940 	call	a3694 <__sprint_r>
   a50c0:	103ac71e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a50c4:	da011d17 	ldw	r8,1140(sp)
   a50c8:	d8c11c17 	ldw	r3,1136(sp)
   a50cc:	da400404 	addi	r9,sp,16
   a50d0:	d8813217 	ldw	r2,1224(sp)
   a50d4:	4cc00015 	stw	r19,0(r9)
   a50d8:	48800115 	stw	r2,4(r9)
   a50dc:	4091883a 	add	r8,r8,r2
   a50e0:	003c6206 	br	a426c <___vfprintf_internal_r+0xba4>
   a50e4:	00800b44 	movi	r2,45
   a50e8:	d8812585 	stb	r2,1174(sp)
   a50ec:	003b2406 	br	a3d80 <___vfprintf_internal_r+0x6b8>
   a50f0:	4d000015 	stw	r20,0(r9)
   a50f4:	4c800115 	stw	r18,4(r9)
   a50f8:	4491883a 	add	r8,r8,r18
   a50fc:	18c00044 	addi	r3,r3,1
   a5100:	da011d15 	stw	r8,1140(sp)
   a5104:	d8c11c15 	stw	r3,1136(sp)
   a5108:	008001c4 	movi	r2,7
   a510c:	10ffe816 	blt	r2,r3,a50b0 <___vfprintf_internal_r+0x19e8>
   a5110:	4a400204 	addi	r9,r9,8
   a5114:	003fee06 	br	a50d0 <___vfprintf_internal_r+0x1a08>
   a5118:	d8c12b15 	stw	r3,1196(sp)
   a511c:	00800184 	movi	r2,6
   a5120:	10c0062e 	bgeu	r2,r3,a513c <___vfprintf_internal_r+0x1a74>
   a5124:	d8812b15 	stw	r2,1196(sp)
   a5128:	d8812815 	stw	r2,1184(sp)
   a512c:	ddc12d15 	stw	r23,1204(sp)
   a5130:	04c002f4 	movhi	r19,11
   a5134:	9cfb5e04 	addi	r19,r19,-4744
   a5138:	0039ca06 	br	a3864 <___vfprintf_internal_r+0x19c>
   a513c:	d8812b17 	ldw	r2,1196(sp)
   a5140:	d8812815 	stw	r2,1184(sp)
   a5144:	103ff90e 	bge	r2,zero,a512c <___vfprintf_internal_r+0x1a64>
   a5148:	d8012815 	stw	zero,1184(sp)
   a514c:	003ff706 	br	a512c <___vfprintf_internal_r+0x1a64>
   a5150:	00800244 	movi	r2,9
   a5154:	15fdaa36 	bltu	r2,r23,a4800 <___vfprintf_internal_r+0x1138>
   a5158:	dd010e04 	addi	r20,sp,1080
   a515c:	003dc606 	br	a4878 <___vfprintf_internal_r+0x11b0>
   a5160:	d9412917 	ldw	r5,1188(sp)
   a5164:	8809883a 	mov	r4,r17
   a5168:	d9811b04 	addi	r6,sp,1132
   a516c:	00a36940 	call	a3694 <__sprint_r>
   a5170:	103a9b1e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a5174:	dc812417 	ldw	r18,1168(sp)
   a5178:	da400404 	addi	r9,sp,16
   a517c:	003ecd06 	br	a4cb4 <___vfprintf_internal_r+0x15ec>
   a5180:	d9412917 	ldw	r5,1188(sp)
   a5184:	8809883a 	mov	r4,r17
   a5188:	d9811b04 	addi	r6,sp,1132
   a518c:	00a36940 	call	a3694 <__sprint_r>
   a5190:	103a931e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a5194:	dc812417 	ldw	r18,1168(sp)
   a5198:	da011d17 	ldw	r8,1140(sp)
   a519c:	d8c11c17 	ldw	r3,1136(sp)
   a51a0:	da400404 	addi	r9,sp,16
   a51a4:	003eb706 	br	a4c84 <___vfprintf_internal_r+0x15bc>
   a51a8:	d9412917 	ldw	r5,1188(sp)
   a51ac:	8809883a 	mov	r4,r17
   a51b0:	d9811b04 	addi	r6,sp,1132
   a51b4:	00a36940 	call	a3694 <__sprint_r>
   a51b8:	103a891e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a51bc:	dc812417 	ldw	r18,1168(sp)
   a51c0:	da011d17 	ldw	r8,1140(sp)
   a51c4:	da400404 	addi	r9,sp,16
   a51c8:	003dc206 	br	a48d4 <___vfprintf_internal_r+0x120c>
   a51cc:	df012815 	stw	fp,1184(sp)
   a51d0:	d8812583 	ldbu	r2,1174(sp)
   a51d4:	df012b15 	stw	fp,1196(sp)
   a51d8:	ddc12d15 	stw	r23,1204(sp)
   a51dc:	d8013115 	stw	zero,1220(sp)
   a51e0:	003ac606 	br	a3cfc <___vfprintf_internal_r+0x634>
   a51e4:	d8812404 	addi	r2,sp,1168
   a51e8:	d8800115 	stw	r2,4(sp)
   a51ec:	d8812304 	addi	r2,sp,1164
   a51f0:	d8800215 	stw	r2,8(sp)
   a51f4:	d8812204 	addi	r2,sp,1160
   a51f8:	df000015 	stw	fp,0(sp)
   a51fc:	d8800315 	stw	r2,12(sp)
   a5200:	8809883a 	mov	r4,r17
   a5204:	b00b883a 	mov	r5,r22
   a5208:	a00d883a 	mov	r6,r20
   a520c:	01c000c4 	movi	r7,3
   a5210:	da413c15 	stw	r9,1264(sp)
   a5214:	00a5ce00 	call	a5ce0 <_dtoa_r>
   a5218:	da413c17 	ldw	r9,1264(sp)
   a521c:	1027883a 	mov	r19,r2
   a5220:	1707883a 	add	r3,r2,fp
   a5224:	e02f883a 	mov	r23,fp
   a5228:	99000007 	ldb	r4,0(r19)
   a522c:	00800c04 	movi	r2,48
   a5230:	20800326 	beq	r4,r2,a5240 <___vfprintf_internal_r+0x1b78>
   a5234:	da812417 	ldw	r10,1168(sp)
   a5238:	1a87883a 	add	r3,r3,r10
   a523c:	003f1406 	br	a4e90 <___vfprintf_internal_r+0x17c8>
   a5240:	b009883a 	mov	r4,r22
   a5244:	a00b883a 	mov	r5,r20
   a5248:	000d883a 	mov	r6,zero
   a524c:	000f883a 	mov	r7,zero
   a5250:	d8c13b15 	stw	r3,1260(sp)
   a5254:	da413c15 	stw	r9,1264(sp)
   a5258:	00aabe80 	call	aabe8 <__nedf2>
   a525c:	d8c13b17 	ldw	r3,1260(sp)
   a5260:	da413c17 	ldw	r9,1264(sp)
   a5264:	103ff326 	beq	r2,zero,a5234 <___vfprintf_internal_r+0x1b6c>
   a5268:	00800044 	movi	r2,1
   a526c:	15d5c83a 	sub	r10,r2,r23
   a5270:	da812415 	stw	r10,1168(sp)
   a5274:	1a87883a 	add	r3,r3,r10
   a5278:	003f0506 	br	a4e90 <___vfprintf_internal_r+0x17c8>
   a527c:	d9412917 	ldw	r5,1188(sp)
   a5280:	8809883a 	mov	r4,r17
   a5284:	d9811b04 	addi	r6,sp,1132
   a5288:	00a36940 	call	a3694 <__sprint_r>
   a528c:	103a541e 	bne	r2,zero,a3be0 <___vfprintf_internal_r+0x518>
   a5290:	dc812417 	ldw	r18,1168(sp)
   a5294:	da011d17 	ldw	r8,1140(sp)
   a5298:	d8c11c17 	ldw	r3,1136(sp)
   a529c:	da400404 	addi	r9,sp,16
   a52a0:	003eb206 	br	a4d6c <___vfprintf_internal_r+0x16a4>
   a52a4:	b82b883a 	mov	r21,r23
   a52a8:	0007883a 	mov	r3,zero
   a52ac:	00396306 	br	a383c <___vfprintf_internal_r+0x174>
   a52b0:	04c002f4 	movhi	r19,11
   a52b4:	9cfb5304 	addi	r19,r19,-4788
   a52b8:	003f4e06 	br	a4ff4 <___vfprintf_internal_r+0x192c>
   a52bc:	d8812583 	ldbu	r2,1174(sp)
   a52c0:	dc012a17 	ldw	r16,1192(sp)
   a52c4:	d8013115 	stw	zero,1220(sp)
   a52c8:	003a8c06 	br	a3cfc <___vfprintf_internal_r+0x634>
   a52cc:	d8812417 	ldw	r2,1168(sp)
   a52d0:	d8812b15 	stw	r2,1196(sp)
   a52d4:	1029883a 	mov	r20,r2
   a52d8:	00bfff44 	movi	r2,-3
   a52dc:	a0800116 	blt	r20,r2,a52e4 <___vfprintf_internal_r+0x1c1c>
   a52e0:	e5001d0e 	bge	fp,r20,a5358 <___vfprintf_internal_r+0x1c90>
   a52e4:	94bfff84 	addi	r18,r18,-2
   a52e8:	a53fffc4 	addi	r20,r20,-1
   a52ec:	dd012415 	stw	r20,1168(sp)
   a52f0:	dc811fc5 	stb	r18,1151(sp)
   a52f4:	a0007216 	blt	r20,zero,a54c0 <___vfprintf_internal_r+0x1df8>
   a52f8:	00800ac4 	movi	r2,43
   a52fc:	d8812005 	stb	r2,1152(sp)
   a5300:	00800244 	movi	r2,9
   a5304:	15003516 	blt	r2,r20,a53dc <___vfprintf_internal_r+0x1d14>
   a5308:	00800c04 	movi	r2,48
   a530c:	a5000c04 	addi	r20,r20,48
   a5310:	d8812045 	stb	r2,1153(sp)
   a5314:	dd012085 	stb	r20,1154(sp)
   a5318:	d8c120c4 	addi	r3,sp,1155
   a531c:	d8811fc4 	addi	r2,sp,1151
   a5320:	1885c83a 	sub	r2,r3,r2
   a5324:	d8c13217 	ldw	r3,1224(sp)
   a5328:	d8813515 	stw	r2,1236(sp)
   a532c:	1885883a 	add	r2,r3,r2
   a5330:	d8812b15 	stw	r2,1196(sp)
   a5334:	00800044 	movi	r2,1
   a5338:	10c0580e 	bge	r2,r3,a549c <___vfprintf_internal_r+0x1dd4>
   a533c:	d8812b17 	ldw	r2,1196(sp)
   a5340:	10800044 	addi	r2,r2,1
   a5344:	d8812b15 	stw	r2,1196(sp)
   a5348:	d8812815 	stw	r2,1184(sp)
   a534c:	103ef50e 	bge	r2,zero,a4f24 <___vfprintf_internal_r+0x185c>
   a5350:	d8012815 	stw	zero,1184(sp)
   a5354:	003ef306 	br	a4f24 <___vfprintf_internal_r+0x185c>
   a5358:	d8812b17 	ldw	r2,1196(sp)
   a535c:	d8c13217 	ldw	r3,1224(sp)
   a5360:	10c01416 	blt	r2,r3,a53b4 <___vfprintf_internal_r+0x1cec>
   a5364:	8400004c 	andi	r16,r16,1
   a5368:	80000326 	beq	r16,zero,a5378 <___vfprintf_internal_r+0x1cb0>
   a536c:	d8812b17 	ldw	r2,1196(sp)
   a5370:	10800044 	addi	r2,r2,1
   a5374:	d8812b15 	stw	r2,1196(sp)
   a5378:	d8812815 	stw	r2,1184(sp)
   a537c:	10001416 	blt	r2,zero,a53d0 <___vfprintf_internal_r+0x1d08>
   a5380:	048019c4 	movi	r18,103
   a5384:	003ee706 	br	a4f24 <___vfprintf_internal_r+0x185c>
   a5388:	d8012815 	stw	zero,1184(sp)
   a538c:	003b1a06 	br	a3ff8 <___vfprintf_internal_r+0x930>
   a5390:	e03e9c1e 	bne	fp,zero,a4e04 <___vfprintf_internal_r+0x173c>
   a5394:	07000044 	movi	fp,1
   a5398:	003e9a06 	br	a4e04 <___vfprintf_internal_r+0x173c>
   a539c:	07000184 	movi	fp,6
   a53a0:	003e9806 	br	a4e04 <___vfprintf_internal_r+0x173c>
   a53a4:	00c00b44 	movi	r3,45
   a53a8:	a520003c 	xorhi	r20,r20,32768
   a53ac:	d8c12f05 	stb	r3,1212(sp)
   a53b0:	003e9806 	br	a4e14 <___vfprintf_internal_r+0x174c>
   a53b4:	05003f0e 	bge	zero,r20,a54b4 <___vfprintf_internal_r+0x1dec>
   a53b8:	05000044 	movi	r20,1
   a53bc:	d8c13217 	ldw	r3,1224(sp)
   a53c0:	a0e9883a 	add	r20,r20,r3
   a53c4:	dd012b15 	stw	r20,1196(sp)
   a53c8:	dd012815 	stw	r20,1184(sp)
   a53cc:	a03fec0e 	bge	r20,zero,a5380 <___vfprintf_internal_r+0x1cb8>
   a53d0:	d8012815 	stw	zero,1184(sp)
   a53d4:	048019c4 	movi	r18,103
   a53d8:	003ed206 	br	a4f24 <___vfprintf_internal_r+0x185c>
   a53dc:	d8c11f84 	addi	r3,sp,1150
   a53e0:	102f883a 	mov	r23,r2
   a53e4:	4839883a 	mov	fp,r9
   a53e8:	a009883a 	mov	r4,r20
   a53ec:	01400284 	movi	r5,10
   a53f0:	182d883a 	mov	r22,r3
   a53f4:	00ab0f00 	call	ab0f0 <__modsi3>
   a53f8:	10800c04 	addi	r2,r2,48
   a53fc:	a009883a 	mov	r4,r20
   a5400:	b0800005 	stb	r2,0(r22)
   a5404:	01400284 	movi	r5,10
   a5408:	00ab0a00 	call	ab0a0 <__divsi3>
   a540c:	1029883a 	mov	r20,r2
   a5410:	b0ffffc4 	addi	r3,r22,-1
   a5414:	b8bff416 	blt	r23,r2,a53e8 <___vfprintf_internal_r+0x1d20>
   a5418:	11400c04 	addi	r5,r2,48
   a541c:	b17fffc5 	stb	r5,-1(r22)
   a5420:	d8811fc4 	addi	r2,sp,1151
   a5424:	e013883a 	mov	r9,fp
   a5428:	18803e2e 	bgeu	r3,r2,a5524 <___vfprintf_internal_r+0x1e5c>
   a542c:	b007883a 	mov	r3,r22
   a5430:	d9012044 	addi	r4,sp,1153
   a5434:	00000206 	br	a5440 <___vfprintf_internal_r+0x1d78>
   a5438:	19400003 	ldbu	r5,0(r3)
   a543c:	18c00044 	addi	r3,r3,1
   a5440:	21400005 	stb	r5,0(r4)
   a5444:	21000044 	addi	r4,r4,1
   a5448:	10fffb1e 	bne	r2,r3,a5438 <___vfprintf_internal_r+0x1d70>
   a544c:	d8c12004 	addi	r3,sp,1152
   a5450:	1d87c83a 	sub	r3,r3,r22
   a5454:	d9012044 	addi	r4,sp,1153
   a5458:	20c7883a 	add	r3,r4,r3
   a545c:	003fb006 	br	a5320 <___vfprintf_internal_r+0x1c58>
   a5460:	e5c00044 	addi	r23,fp,1
   a5464:	003e7406 	br	a4e38 <___vfprintf_internal_r+0x1770>
   a5468:	d8c12217 	ldw	r3,1160(sp)
   a546c:	003e9906 	br	a4ed4 <___vfprintf_internal_r+0x180c>
   a5470:	d9012d17 	ldw	r4,1204(sp)
   a5474:	ac800043 	ldbu	r18,1(r21)
   a5478:	b82b883a 	mov	r21,r23
   a547c:	20c00017 	ldw	r3,0(r4)
   a5480:	20800104 	addi	r2,r4,4
   a5484:	d8812d15 	stw	r2,1204(sp)
   a5488:	18002116 	blt	r3,zero,a5510 <___vfprintf_internal_r+0x1e48>
   a548c:	94803fcc 	andi	r18,r18,255
   a5490:	9480201c 	xori	r18,r18,128
   a5494:	94bfe004 	addi	r18,r18,-128
   a5498:	0038e706 	br	a3838 <___vfprintf_internal_r+0x170>
   a549c:	80a0703a 	and	r16,r16,r2
   a54a0:	803fa61e 	bne	r16,zero,a533c <___vfprintf_internal_r+0x1c74>
   a54a4:	d8812b17 	ldw	r2,1196(sp)
   a54a8:	d8812815 	stw	r2,1184(sp)
   a54ac:	103e9d0e 	bge	r2,zero,a4f24 <___vfprintf_internal_r+0x185c>
   a54b0:	003fa706 	br	a5350 <___vfprintf_internal_r+0x1c88>
   a54b4:	00800084 	movi	r2,2
   a54b8:	1529c83a 	sub	r20,r2,r20
   a54bc:	003fbf06 	br	a53bc <___vfprintf_internal_r+0x1cf4>
   a54c0:	00800b44 	movi	r2,45
   a54c4:	0529c83a 	sub	r20,zero,r20
   a54c8:	d8812005 	stb	r2,1152(sp)
   a54cc:	003f8c06 	br	a5300 <___vfprintf_internal_r+0x1c38>
   a54d0:	008011c4 	movi	r2,71
   a54d4:	90be6926 	beq	r18,r2,a4e7c <___vfprintf_internal_r+0x17b4>
   a54d8:	003e6a06 	br	a4e84 <___vfprintf_internal_r+0x17bc>
   a54dc:	00bfffc4 	movi	r2,-1
   a54e0:	d8812c15 	stw	r2,1200(sp)
   a54e4:	0039ad06 	br	a3b9c <___vfprintf_internal_r+0x4d4>
   a54e8:	1007883a 	mov	r3,r2
   a54ec:	003e7906 	br	a4ed4 <___vfprintf_internal_r+0x180c>
   a54f0:	e000021e 	bne	fp,zero,a54fc <___vfprintf_internal_r+0x1e34>
   a54f4:	8400004c 	andi	r16,r16,1
   a54f8:	80000e26 	beq	r16,zero,a5534 <___vfprintf_internal_r+0x1e6c>
   a54fc:	e7000084 	addi	fp,fp,2
   a5500:	df012b15 	stw	fp,1196(sp)
   a5504:	df012815 	stw	fp,1184(sp)
   a5508:	e03e860e 	bge	fp,zero,a4f24 <___vfprintf_internal_r+0x185c>
   a550c:	003f9006 	br	a5350 <___vfprintf_internal_r+0x1c88>
   a5510:	94803fcc 	andi	r18,r18,255
   a5514:	9480201c 	xori	r18,r18,128
   a5518:	00ffffc4 	movi	r3,-1
   a551c:	94bfe004 	addi	r18,r18,-128
   a5520:	0038c506 	br	a3838 <___vfprintf_internal_r+0x170>
   a5524:	d8c12044 	addi	r3,sp,1153
   a5528:	003f7d06 	br	a5320 <___vfprintf_internal_r+0x1c58>
   a552c:	dd012417 	ldw	r20,1168(sp)
   a5530:	003f6d06 	br	a52e8 <___vfprintf_internal_r+0x1c20>
   a5534:	00c00044 	movi	r3,1
   a5538:	d8c12815 	stw	r3,1184(sp)
   a553c:	d8c12b15 	stw	r3,1196(sp)
   a5540:	003e7806 	br	a4f24 <___vfprintf_internal_r+0x185c>

000a5544 <__vfprintf_internal>:
   a5544:	008002f4 	movhi	r2,11
   a5548:	1082a904 	addi	r2,r2,2724
   a554c:	2007883a 	mov	r3,r4
   a5550:	11000017 	ldw	r4,0(r2)
   a5554:	2805883a 	mov	r2,r5
   a5558:	300f883a 	mov	r7,r6
   a555c:	180b883a 	mov	r5,r3
   a5560:	100d883a 	mov	r6,r2
   a5564:	00a36c81 	jmpi	a36c8 <___vfprintf_internal_r>

000a5568 <__swbuf_r>:
   a5568:	defffc04 	addi	sp,sp,-16
   a556c:	dc800215 	stw	r18,8(sp)
   a5570:	dc400115 	stw	r17,4(sp)
   a5574:	dc000015 	stw	r16,0(sp)
   a5578:	dfc00315 	stw	ra,12(sp)
   a557c:	2023883a 	mov	r17,r4
   a5580:	2825883a 	mov	r18,r5
   a5584:	3021883a 	mov	r16,r6
   a5588:	20000226 	beq	r4,zero,a5594 <__swbuf_r+0x2c>
   a558c:	20800e17 	ldw	r2,56(r4)
   a5590:	10003b26 	beq	r2,zero,a5680 <__swbuf_r+0x118>
   a5594:	8080030b 	ldhu	r2,12(r16)
   a5598:	80c00617 	ldw	r3,24(r16)
   a559c:	1080020c 	andi	r2,r2,8
   a55a0:	10bfffcc 	andi	r2,r2,65535
   a55a4:	10a0001c 	xori	r2,r2,32768
   a55a8:	80c00215 	stw	r3,8(r16)
   a55ac:	10a00004 	addi	r2,r2,-32768
   a55b0:	10002226 	beq	r2,zero,a563c <__swbuf_r+0xd4>
   a55b4:	80800417 	ldw	r2,16(r16)
   a55b8:	10002026 	beq	r2,zero,a563c <__swbuf_r+0xd4>
   a55bc:	80c00017 	ldw	r3,0(r16)
   a55c0:	81000517 	ldw	r4,20(r16)
   a55c4:	94803fcc 	andi	r18,r18,255
   a55c8:	1885c83a 	sub	r2,r3,r2
   a55cc:	1100250e 	bge	r2,r4,a5664 <__swbuf_r+0xfc>
   a55d0:	10800044 	addi	r2,r2,1
   a55d4:	81400217 	ldw	r5,8(r16)
   a55d8:	19000044 	addi	r4,r3,1
   a55dc:	297fffc4 	addi	r5,r5,-1
   a55e0:	81400215 	stw	r5,8(r16)
   a55e4:	1c800005 	stb	r18,0(r3)
   a55e8:	80c00517 	ldw	r3,20(r16)
   a55ec:	81000015 	stw	r4,0(r16)
   a55f0:	18800c26 	beq	r3,r2,a5624 <__swbuf_r+0xbc>
   a55f4:	8080030b 	ldhu	r2,12(r16)
   a55f8:	1080004c 	andi	r2,r2,1
   a55fc:	10000226 	beq	r2,zero,a5608 <__swbuf_r+0xa0>
   a5600:	00800284 	movi	r2,10
   a5604:	90800726 	beq	r18,r2,a5624 <__swbuf_r+0xbc>
   a5608:	9005883a 	mov	r2,r18
   a560c:	dfc00317 	ldw	ra,12(sp)
   a5610:	dc800217 	ldw	r18,8(sp)
   a5614:	dc400117 	ldw	r17,4(sp)
   a5618:	dc000017 	ldw	r16,0(sp)
   a561c:	dec00404 	addi	sp,sp,16
   a5620:	f800283a 	ret
   a5624:	8809883a 	mov	r4,r17
   a5628:	800b883a 	mov	r5,r16
   a562c:	00a13880 	call	a1388 <_fflush_r>
   a5630:	103ff526 	beq	r2,zero,a5608 <__swbuf_r+0xa0>
   a5634:	04bfffc4 	movi	r18,-1
   a5638:	003ff306 	br	a5608 <__swbuf_r+0xa0>
   a563c:	8809883a 	mov	r4,r17
   a5640:	800b883a 	mov	r5,r16
   a5644:	00a572c0 	call	a572c <__swsetup_r>
   a5648:	10000f1e 	bne	r2,zero,a5688 <__swbuf_r+0x120>
   a564c:	80800417 	ldw	r2,16(r16)
   a5650:	80c00017 	ldw	r3,0(r16)
   a5654:	81000517 	ldw	r4,20(r16)
   a5658:	94803fcc 	andi	r18,r18,255
   a565c:	1885c83a 	sub	r2,r3,r2
   a5660:	113fdb16 	blt	r2,r4,a55d0 <__swbuf_r+0x68>
   a5664:	8809883a 	mov	r4,r17
   a5668:	800b883a 	mov	r5,r16
   a566c:	00a13880 	call	a1388 <_fflush_r>
   a5670:	103ff01e 	bne	r2,zero,a5634 <__swbuf_r+0xcc>
   a5674:	80c00017 	ldw	r3,0(r16)
   a5678:	00800044 	movi	r2,1
   a567c:	003fd506 	br	a55d4 <__swbuf_r+0x6c>
   a5680:	00a16440 	call	a1644 <__sinit>
   a5684:	003fc306 	br	a5594 <__swbuf_r+0x2c>
   a5688:	8080030b 	ldhu	r2,12(r16)
   a568c:	04bfffc4 	movi	r18,-1
   a5690:	10801014 	ori	r2,r2,64
   a5694:	8080030d 	sth	r2,12(r16)
   a5698:	00800244 	movi	r2,9
   a569c:	88800015 	stw	r2,0(r17)
   a56a0:	003fd906 	br	a5608 <__swbuf_r+0xa0>

000a56a4 <__swbuf>:
   a56a4:	00c002f4 	movhi	r3,11
   a56a8:	18c2a904 	addi	r3,r3,2724
   a56ac:	2005883a 	mov	r2,r4
   a56b0:	19000017 	ldw	r4,0(r3)
   a56b4:	280d883a 	mov	r6,r5
   a56b8:	100b883a 	mov	r5,r2
   a56bc:	00a55681 	jmpi	a5568 <__swbuf_r>

000a56c0 <_write_r>:
   a56c0:	defffd04 	addi	sp,sp,-12
   a56c4:	dc400115 	stw	r17,4(sp)
   a56c8:	dc000015 	stw	r16,0(sp)
   a56cc:	2023883a 	mov	r17,r4
   a56d0:	040002f4 	movhi	r16,11
   a56d4:	84097d04 	addi	r16,r16,9716
   a56d8:	2809883a 	mov	r4,r5
   a56dc:	300b883a 	mov	r5,r6
   a56e0:	380d883a 	mov	r6,r7
   a56e4:	dfc00215 	stw	ra,8(sp)
   a56e8:	80000015 	stw	zero,0(r16)
   a56ec:	00ac4380 	call	ac438 <write>
   a56f0:	00ffffc4 	movi	r3,-1
   a56f4:	10c00526 	beq	r2,r3,a570c <_write_r+0x4c>
   a56f8:	dfc00217 	ldw	ra,8(sp)
   a56fc:	dc400117 	ldw	r17,4(sp)
   a5700:	dc000017 	ldw	r16,0(sp)
   a5704:	dec00304 	addi	sp,sp,12
   a5708:	f800283a 	ret
   a570c:	80c00017 	ldw	r3,0(r16)
   a5710:	183ff926 	beq	r3,zero,a56f8 <_write_r+0x38>
   a5714:	88c00015 	stw	r3,0(r17)
   a5718:	dfc00217 	ldw	ra,8(sp)
   a571c:	dc400117 	ldw	r17,4(sp)
   a5720:	dc000017 	ldw	r16,0(sp)
   a5724:	dec00304 	addi	sp,sp,12
   a5728:	f800283a 	ret

000a572c <__swsetup_r>:
   a572c:	008002f4 	movhi	r2,11
   a5730:	1082a904 	addi	r2,r2,2724
   a5734:	10800017 	ldw	r2,0(r2)
   a5738:	defffd04 	addi	sp,sp,-12
   a573c:	dc400115 	stw	r17,4(sp)
   a5740:	dc000015 	stw	r16,0(sp)
   a5744:	dfc00215 	stw	ra,8(sp)
   a5748:	2023883a 	mov	r17,r4
   a574c:	2821883a 	mov	r16,r5
   a5750:	10000226 	beq	r2,zero,a575c <__swsetup_r+0x30>
   a5754:	10c00e17 	ldw	r3,56(r2)
   a5758:	18003d26 	beq	r3,zero,a5850 <__swsetup_r+0x124>
   a575c:	8080030b 	ldhu	r2,12(r16)
   a5760:	10c0020c 	andi	r3,r2,8
   a5764:	18ffffcc 	andi	r3,r3,65535
   a5768:	18e0001c 	xori	r3,r3,32768
   a576c:	18e00004 	addi	r3,r3,-32768
   a5770:	18001226 	beq	r3,zero,a57bc <__swsetup_r+0x90>
   a5774:	80c00417 	ldw	r3,16(r16)
   a5778:	18001f26 	beq	r3,zero,a57f8 <__swsetup_r+0xcc>
   a577c:	1100004c 	andi	r4,r2,1
   a5780:	2000261e 	bne	r4,zero,a581c <__swsetup_r+0xf0>
   a5784:	1080008c 	andi	r2,r2,2
   a5788:	10bfffcc 	andi	r2,r2,65535
   a578c:	10a0001c 	xori	r2,r2,32768
   a5790:	10a00004 	addi	r2,r2,-32768
   a5794:	1000311e 	bne	r2,zero,a585c <__swsetup_r+0x130>
   a5798:	80800517 	ldw	r2,20(r16)
   a579c:	80800215 	stw	r2,8(r16)
   a57a0:	18002326 	beq	r3,zero,a5830 <__swsetup_r+0x104>
   a57a4:	0005883a 	mov	r2,zero
   a57a8:	dfc00217 	ldw	ra,8(sp)
   a57ac:	dc400117 	ldw	r17,4(sp)
   a57b0:	dc000017 	ldw	r16,0(sp)
   a57b4:	dec00304 	addi	sp,sp,12
   a57b8:	f800283a 	ret
   a57bc:	10c0040c 	andi	r3,r2,16
   a57c0:	18ffffcc 	andi	r3,r3,65535
   a57c4:	18e0001c 	xori	r3,r3,32768
   a57c8:	18e00004 	addi	r3,r3,-32768
   a57cc:	18001e26 	beq	r3,zero,a5848 <__swsetup_r+0x11c>
   a57d0:	10c0010c 	andi	r3,r2,4
   a57d4:	18ffffcc 	andi	r3,r3,65535
   a57d8:	18e0001c 	xori	r3,r3,32768
   a57dc:	18e00004 	addi	r3,r3,-32768
   a57e0:	1800211e 	bne	r3,zero,a5868 <__swsetup_r+0x13c>
   a57e4:	80c00417 	ldw	r3,16(r16)
   a57e8:	11400214 	ori	r5,r2,8
   a57ec:	8140030d 	sth	r5,12(r16)
   a57f0:	2805883a 	mov	r2,r5
   a57f4:	183fe11e 	bne	r3,zero,a577c <__swsetup_r+0x50>
   a57f8:	1140a00c 	andi	r5,r2,640
   a57fc:	01008004 	movi	r4,512
   a5800:	293fde26 	beq	r5,r4,a577c <__swsetup_r+0x50>
   a5804:	8809883a 	mov	r4,r17
   a5808:	800b883a 	mov	r5,r16
   a580c:	00a25340 	call	a2534 <__smakebuf_r>
   a5810:	8080030b 	ldhu	r2,12(r16)
   a5814:	80c00417 	ldw	r3,16(r16)
   a5818:	003fd806 	br	a577c <__swsetup_r+0x50>
   a581c:	80800517 	ldw	r2,20(r16)
   a5820:	80000215 	stw	zero,8(r16)
   a5824:	0085c83a 	sub	r2,zero,r2
   a5828:	80800615 	stw	r2,24(r16)
   a582c:	183fdd1e 	bne	r3,zero,a57a4 <__swsetup_r+0x78>
   a5830:	8080030b 	ldhu	r2,12(r16)
   a5834:	1080200c 	andi	r2,r2,128
   a5838:	10bfffcc 	andi	r2,r2,65535
   a583c:	10a0001c 	xori	r2,r2,32768
   a5840:	10a00004 	addi	r2,r2,-32768
   a5844:	103fd826 	beq	r2,zero,a57a8 <__swsetup_r+0x7c>
   a5848:	00bfffc4 	movi	r2,-1
   a584c:	003fd606 	br	a57a8 <__swsetup_r+0x7c>
   a5850:	1009883a 	mov	r4,r2
   a5854:	00a16440 	call	a1644 <__sinit>
   a5858:	003fc006 	br	a575c <__swsetup_r+0x30>
   a585c:	0005883a 	mov	r2,zero
   a5860:	80800215 	stw	r2,8(r16)
   a5864:	003fce06 	br	a57a0 <__swsetup_r+0x74>
   a5868:	81400c17 	ldw	r5,48(r16)
   a586c:	28000626 	beq	r5,zero,a5888 <__swsetup_r+0x15c>
   a5870:	80c01004 	addi	r3,r16,64
   a5874:	28c00326 	beq	r5,r3,a5884 <__swsetup_r+0x158>
   a5878:	8809883a 	mov	r4,r17
   a587c:	00a1c040 	call	a1c04 <_free_r>
   a5880:	8080030b 	ldhu	r2,12(r16)
   a5884:	80000c15 	stw	zero,48(r16)
   a5888:	80c00417 	ldw	r3,16(r16)
   a588c:	013ff6c4 	movi	r4,-37
   a5890:	2084703a 	and	r2,r4,r2
   a5894:	80000115 	stw	zero,4(r16)
   a5898:	80c00015 	stw	r3,0(r16)
   a589c:	003fd206 	br	a57e8 <__swsetup_r+0xbc>

000a58a0 <__call_exitprocs>:
   a58a0:	008002f4 	movhi	r2,11
   a58a4:	1082a804 	addi	r2,r2,2720
   a58a8:	10800017 	ldw	r2,0(r2)
   a58ac:	defff304 	addi	sp,sp,-52
   a58b0:	df000b15 	stw	fp,44(sp)
   a58b4:	d8800015 	stw	r2,0(sp)
   a58b8:	10805204 	addi	r2,r2,328
   a58bc:	dd400815 	stw	r21,32(sp)
   a58c0:	dfc00c15 	stw	ra,48(sp)
   a58c4:	ddc00a15 	stw	r23,40(sp)
   a58c8:	dd800915 	stw	r22,36(sp)
   a58cc:	dd000715 	stw	r20,28(sp)
   a58d0:	dcc00615 	stw	r19,24(sp)
   a58d4:	dc800515 	stw	r18,20(sp)
   a58d8:	dc400415 	stw	r17,16(sp)
   a58dc:	dc000315 	stw	r16,12(sp)
   a58e0:	d9000115 	stw	r4,4(sp)
   a58e4:	2839883a 	mov	fp,r5
   a58e8:	d8800215 	stw	r2,8(sp)
   a58ec:	057fffc4 	movi	r21,-1
   a58f0:	d8800017 	ldw	r2,0(sp)
   a58f4:	ddc00217 	ldw	r23,8(sp)
   a58f8:	14805217 	ldw	r18,328(r2)
   a58fc:	90001726 	beq	r18,zero,a595c <__call_exitprocs+0xbc>
   a5900:	94400117 	ldw	r17,4(r18)
   a5904:	8c3fffc4 	addi	r16,r17,-1
   a5908:	80001116 	blt	r16,zero,a5950 <__call_exitprocs+0xb0>
   a590c:	8c400044 	addi	r17,r17,1
   a5910:	8427883a 	add	r19,r16,r16
   a5914:	8c63883a 	add	r17,r17,r17
   a5918:	95802204 	addi	r22,r18,136
   a591c:	9ce7883a 	add	r19,r19,r19
   a5920:	8c63883a 	add	r17,r17,r17
   a5924:	b4e7883a 	add	r19,r22,r19
   a5928:	9463883a 	add	r17,r18,r17
   a592c:	e0001726 	beq	fp,zero,a598c <__call_exitprocs+0xec>
   a5930:	8c87c83a 	sub	r3,r17,r18
   a5934:	b0c7883a 	add	r3,r22,r3
   a5938:	18c01e17 	ldw	r3,120(r3)
   a593c:	1f001326 	beq	r3,fp,a598c <__call_exitprocs+0xec>
   a5940:	843fffc4 	addi	r16,r16,-1
   a5944:	9cffff04 	addi	r19,r19,-4
   a5948:	8c7fff04 	addi	r17,r17,-4
   a594c:	857ff71e 	bne	r16,r21,a592c <__call_exitprocs+0x8c>
   a5950:	00800034 	movhi	r2,0
   a5954:	10800004 	addi	r2,r2,0
   a5958:	10002a1e 	bne	r2,zero,a5a04 <__call_exitprocs+0x164>
   a595c:	dfc00c17 	ldw	ra,48(sp)
   a5960:	df000b17 	ldw	fp,44(sp)
   a5964:	ddc00a17 	ldw	r23,40(sp)
   a5968:	dd800917 	ldw	r22,36(sp)
   a596c:	dd400817 	ldw	r21,32(sp)
   a5970:	dd000717 	ldw	r20,28(sp)
   a5974:	dcc00617 	ldw	r19,24(sp)
   a5978:	dc800517 	ldw	r18,20(sp)
   a597c:	dc400417 	ldw	r17,16(sp)
   a5980:	dc000317 	ldw	r16,12(sp)
   a5984:	dec00d04 	addi	sp,sp,52
   a5988:	f800283a 	ret
   a598c:	91000117 	ldw	r4,4(r18)
   a5990:	88c00017 	ldw	r3,0(r17)
   a5994:	213fffc4 	addi	r4,r4,-1
   a5998:	24001526 	beq	r4,r16,a59f0 <__call_exitprocs+0x150>
   a599c:	88000015 	stw	zero,0(r17)
   a59a0:	183fe726 	beq	r3,zero,a5940 <__call_exitprocs+0xa0>
   a59a4:	00800044 	movi	r2,1
   a59a8:	1408983a 	sll	r4,r2,r16
   a59ac:	91406217 	ldw	r5,392(r18)
   a59b0:	95000117 	ldw	r20,4(r18)
   a59b4:	214a703a 	and	r5,r4,r5
   a59b8:	28000b26 	beq	r5,zero,a59e8 <__call_exitprocs+0x148>
   a59bc:	91406317 	ldw	r5,396(r18)
   a59c0:	2148703a 	and	r4,r4,r5
   a59c4:	20000c1e 	bne	r4,zero,a59f8 <__call_exitprocs+0x158>
   a59c8:	99400017 	ldw	r5,0(r19)
   a59cc:	d9000117 	ldw	r4,4(sp)
   a59d0:	183ee83a 	callr	r3
   a59d4:	90c00117 	ldw	r3,4(r18)
   a59d8:	1d3fc51e 	bne	r3,r20,a58f0 <__call_exitprocs+0x50>
   a59dc:	b8c00017 	ldw	r3,0(r23)
   a59e0:	1cbfd726 	beq	r3,r18,a5940 <__call_exitprocs+0xa0>
   a59e4:	003fc206 	br	a58f0 <__call_exitprocs+0x50>
   a59e8:	183ee83a 	callr	r3
   a59ec:	003ff906 	br	a59d4 <__call_exitprocs+0x134>
   a59f0:	94000115 	stw	r16,4(r18)
   a59f4:	003fea06 	br	a59a0 <__call_exitprocs+0x100>
   a59f8:	99000017 	ldw	r4,0(r19)
   a59fc:	183ee83a 	callr	r3
   a5a00:	003ff406 	br	a59d4 <__call_exitprocs+0x134>
   a5a04:	90c00117 	ldw	r3,4(r18)
   a5a08:	1800071e 	bne	r3,zero,a5a28 <__call_exitprocs+0x188>
   a5a0c:	90c00017 	ldw	r3,0(r18)
   a5a10:	18000926 	beq	r3,zero,a5a38 <__call_exitprocs+0x198>
   a5a14:	9009883a 	mov	r4,r18
   a5a18:	b8c00015 	stw	r3,0(r23)
   a5a1c:	00000000 	call	0 <__alt_mem_SDRAM_controller>
   a5a20:	bc800017 	ldw	r18,0(r23)
   a5a24:	003fb506 	br	a58fc <__call_exitprocs+0x5c>
   a5a28:	90c00017 	ldw	r3,0(r18)
   a5a2c:	902f883a 	mov	r23,r18
   a5a30:	1825883a 	mov	r18,r3
   a5a34:	003fb106 	br	a58fc <__call_exitprocs+0x5c>
   a5a38:	0007883a 	mov	r3,zero
   a5a3c:	003ffb06 	br	a5a2c <__call_exitprocs+0x18c>

000a5a40 <_close_r>:
   a5a40:	defffd04 	addi	sp,sp,-12
   a5a44:	dc400115 	stw	r17,4(sp)
   a5a48:	dc000015 	stw	r16,0(sp)
   a5a4c:	2023883a 	mov	r17,r4
   a5a50:	040002f4 	movhi	r16,11
   a5a54:	84097d04 	addi	r16,r16,9716
   a5a58:	2809883a 	mov	r4,r5
   a5a5c:	dfc00215 	stw	ra,8(sp)
   a5a60:	80000015 	stw	zero,0(r16)
   a5a64:	00ab7e80 	call	ab7e8 <close>
   a5a68:	00ffffc4 	movi	r3,-1
   a5a6c:	10c00526 	beq	r2,r3,a5a84 <_close_r+0x44>
   a5a70:	dfc00217 	ldw	ra,8(sp)
   a5a74:	dc400117 	ldw	r17,4(sp)
   a5a78:	dc000017 	ldw	r16,0(sp)
   a5a7c:	dec00304 	addi	sp,sp,12
   a5a80:	f800283a 	ret
   a5a84:	80c00017 	ldw	r3,0(r16)
   a5a88:	183ff926 	beq	r3,zero,a5a70 <_close_r+0x30>
   a5a8c:	88c00015 	stw	r3,0(r17)
   a5a90:	dfc00217 	ldw	ra,8(sp)
   a5a94:	dc400117 	ldw	r17,4(sp)
   a5a98:	dc000017 	ldw	r16,0(sp)
   a5a9c:	dec00304 	addi	sp,sp,12
   a5aa0:	f800283a 	ret

000a5aa4 <quorem>:
   a5aa4:	defff204 	addi	sp,sp,-56
   a5aa8:	dd000815 	stw	r20,32(sp)
   a5aac:	20800417 	ldw	r2,16(r4)
   a5ab0:	2d000417 	ldw	r20,16(r5)
   a5ab4:	dcc00715 	stw	r19,28(sp)
   a5ab8:	dfc00d15 	stw	ra,52(sp)
   a5abc:	df000c15 	stw	fp,48(sp)
   a5ac0:	ddc00b15 	stw	r23,44(sp)
   a5ac4:	dd800a15 	stw	r22,40(sp)
   a5ac8:	dd400915 	stw	r21,36(sp)
   a5acc:	dc800615 	stw	r18,24(sp)
   a5ad0:	dc400515 	stw	r17,20(sp)
   a5ad4:	dc000415 	stw	r16,16(sp)
   a5ad8:	d9400015 	stw	r5,0(sp)
   a5adc:	2027883a 	mov	r19,r4
   a5ae0:	15007d16 	blt	r2,r20,a5cd8 <quorem+0x234>
   a5ae4:	a0800104 	addi	r2,r20,4
   a5ae8:	1085883a 	add	r2,r2,r2
   a5aec:	1085883a 	add	r2,r2,r2
   a5af0:	28ad883a 	add	r22,r5,r2
   a5af4:	2085883a 	add	r2,r4,r2
   a5af8:	10800017 	ldw	r2,0(r2)
   a5afc:	b1400017 	ldw	r5,0(r22)
   a5b00:	a53fffc4 	addi	r20,r20,-1
   a5b04:	1009883a 	mov	r4,r2
   a5b08:	29400044 	addi	r5,r5,1
   a5b0c:	d8800115 	stw	r2,4(sp)
   a5b10:	00ab14c0 	call	ab14c <__udivsi3>
   a5b14:	1025883a 	mov	r18,r2
   a5b18:	d8800017 	ldw	r2,0(sp)
   a5b1c:	9f000504 	addi	fp,r19,20
   a5b20:	14000504 	addi	r16,r2,20
   a5b24:	90003626 	beq	r18,zero,a5c00 <quorem+0x15c>
   a5b28:	802b883a 	mov	r21,r16
   a5b2c:	e023883a 	mov	r17,fp
   a5b30:	0007883a 	mov	r3,zero
   a5b34:	002f883a 	mov	r23,zero
   a5b38:	a9800017 	ldw	r6,0(r21)
   a5b3c:	900b883a 	mov	r5,r18
   a5b40:	d8c00315 	stw	r3,12(sp)
   a5b44:	313fffcc 	andi	r4,r6,65535
   a5b48:	d9800215 	stw	r6,8(sp)
   a5b4c:	00a118c0 	call	a118c <__mulsi3>
   a5b50:	d9800217 	ldw	r6,8(sp)
   a5b54:	d8c00317 	ldw	r3,12(sp)
   a5b58:	900b883a 	mov	r5,r18
   a5b5c:	3008d43a 	srli	r4,r6,16
   a5b60:	1887883a 	add	r3,r3,r2
   a5b64:	d8c00315 	stw	r3,12(sp)
   a5b68:	00a118c0 	call	a118c <__mulsi3>
   a5b6c:	89400017 	ldw	r5,0(r17)
   a5b70:	d8c00317 	ldw	r3,12(sp)
   a5b74:	ad400104 	addi	r21,r21,4
   a5b78:	293fffcc 	andi	r4,r5,65535
   a5b7c:	1810d43a 	srli	r8,r3,16
   a5b80:	25c9883a 	add	r4,r4,r23
   a5b84:	18ffffcc 	andi	r3,r3,65535
   a5b88:	20c9c83a 	sub	r4,r4,r3
   a5b8c:	280cd43a 	srli	r6,r5,16
   a5b90:	4085883a 	add	r2,r8,r2
   a5b94:	2007d43a 	srai	r3,r4,16
   a5b98:	117fffcc 	andi	r5,r2,65535
   a5b9c:	314bc83a 	sub	r5,r6,r5
   a5ba0:	28cb883a 	add	r5,r5,r3
   a5ba4:	8940008d 	sth	r5,2(r17)
   a5ba8:	8900000d 	sth	r4,0(r17)
   a5bac:	1006d43a 	srli	r3,r2,16
   a5bb0:	282fd43a 	srai	r23,r5,16
   a5bb4:	8c400104 	addi	r17,r17,4
   a5bb8:	b57fdf2e 	bgeu	r22,r21,a5b38 <quorem+0x94>
   a5bbc:	d8c00117 	ldw	r3,4(sp)
   a5bc0:	18000f1e 	bne	r3,zero,a5c00 <quorem+0x15c>
   a5bc4:	a0800144 	addi	r2,r20,5
   a5bc8:	1085883a 	add	r2,r2,r2
   a5bcc:	1085883a 	add	r2,r2,r2
   a5bd0:	9887883a 	add	r3,r19,r2
   a5bd4:	18bfff04 	addi	r2,r3,-4
   a5bd8:	e080082e 	bgeu	fp,r2,a5bfc <quorem+0x158>
   a5bdc:	18ffff17 	ldw	r3,-4(r3)
   a5be0:	18000326 	beq	r3,zero,a5bf0 <quorem+0x14c>
   a5be4:	00000506 	br	a5bfc <quorem+0x158>
   a5be8:	10c00017 	ldw	r3,0(r2)
   a5bec:	1800031e 	bne	r3,zero,a5bfc <quorem+0x158>
   a5bf0:	10bfff04 	addi	r2,r2,-4
   a5bf4:	a53fffc4 	addi	r20,r20,-1
   a5bf8:	e0bffb36 	bltu	fp,r2,a5be8 <quorem+0x144>
   a5bfc:	9d000415 	stw	r20,16(r19)
   a5c00:	d9400017 	ldw	r5,0(sp)
   a5c04:	9809883a 	mov	r4,r19
   a5c08:	00a87340 	call	a8734 <__mcmp>
   a5c0c:	10002516 	blt	r2,zero,a5ca4 <quorem+0x200>
   a5c10:	94800044 	addi	r18,r18,1
   a5c14:	e007883a 	mov	r3,fp
   a5c18:	000d883a 	mov	r6,zero
   a5c1c:	18800017 	ldw	r2,0(r3)
   a5c20:	82000017 	ldw	r8,0(r16)
   a5c24:	84000104 	addi	r16,r16,4
   a5c28:	11ffffcc 	andi	r7,r2,65535
   a5c2c:	413fffcc 	andi	r4,r8,65535
   a5c30:	398d883a 	add	r6,r7,r6
   a5c34:	310fc83a 	sub	r7,r6,r4
   a5c38:	4010d43a 	srli	r8,r8,16
   a5c3c:	100cd43a 	srli	r6,r2,16
   a5c40:	3809d43a 	srai	r4,r7,16
   a5c44:	19c0000d 	sth	r7,0(r3)
   a5c48:	320dc83a 	sub	r6,r6,r8
   a5c4c:	310d883a 	add	r6,r6,r4
   a5c50:	1980008d 	sth	r6,2(r3)
   a5c54:	300dd43a 	srai	r6,r6,16
   a5c58:	18c00104 	addi	r3,r3,4
   a5c5c:	b43fef2e 	bgeu	r22,r16,a5c1c <quorem+0x178>
   a5c60:	a0800144 	addi	r2,r20,5
   a5c64:	1085883a 	add	r2,r2,r2
   a5c68:	1085883a 	add	r2,r2,r2
   a5c6c:	9885883a 	add	r2,r19,r2
   a5c70:	10c00017 	ldw	r3,0(r2)
   a5c74:	18000b1e 	bne	r3,zero,a5ca4 <quorem+0x200>
   a5c78:	10ffff04 	addi	r3,r2,-4
   a5c7c:	e0c0082e 	bgeu	fp,r3,a5ca0 <quorem+0x1fc>
   a5c80:	10bfff17 	ldw	r2,-4(r2)
   a5c84:	10000326 	beq	r2,zero,a5c94 <quorem+0x1f0>
   a5c88:	00000506 	br	a5ca0 <quorem+0x1fc>
   a5c8c:	18800017 	ldw	r2,0(r3)
   a5c90:	1000031e 	bne	r2,zero,a5ca0 <quorem+0x1fc>
   a5c94:	18ffff04 	addi	r3,r3,-4
   a5c98:	a53fffc4 	addi	r20,r20,-1
   a5c9c:	e0fffb36 	bltu	fp,r3,a5c8c <quorem+0x1e8>
   a5ca0:	9d000415 	stw	r20,16(r19)
   a5ca4:	9005883a 	mov	r2,r18
   a5ca8:	dfc00d17 	ldw	ra,52(sp)
   a5cac:	df000c17 	ldw	fp,48(sp)
   a5cb0:	ddc00b17 	ldw	r23,44(sp)
   a5cb4:	dd800a17 	ldw	r22,40(sp)
   a5cb8:	dd400917 	ldw	r21,36(sp)
   a5cbc:	dd000817 	ldw	r20,32(sp)
   a5cc0:	dcc00717 	ldw	r19,28(sp)
   a5cc4:	dc800617 	ldw	r18,24(sp)
   a5cc8:	dc400517 	ldw	r17,20(sp)
   a5ccc:	dc000417 	ldw	r16,16(sp)
   a5cd0:	dec00e04 	addi	sp,sp,56
   a5cd4:	f800283a 	ret
   a5cd8:	0005883a 	mov	r2,zero
   a5cdc:	003ff206 	br	a5ca8 <quorem+0x204>

000a5ce0 <_dtoa_r>:
   a5ce0:	20801017 	ldw	r2,64(r4)
   a5ce4:	deffdf04 	addi	sp,sp,-132
   a5ce8:	dcc01a15 	stw	r19,104(sp)
   a5cec:	dc801915 	stw	r18,100(sp)
   a5cf0:	dc401815 	stw	r17,96(sp)
   a5cf4:	dc001715 	stw	r16,92(sp)
   a5cf8:	dfc02015 	stw	ra,128(sp)
   a5cfc:	df001f15 	stw	fp,124(sp)
   a5d00:	ddc01e15 	stw	r23,120(sp)
   a5d04:	dd801d15 	stw	r22,116(sp)
   a5d08:	dd401c15 	stw	r21,112(sp)
   a5d0c:	dd001b15 	stw	r20,108(sp)
   a5d10:	d9400315 	stw	r5,12(sp)
   a5d14:	d9c00415 	stw	r7,16(sp)
   a5d18:	2021883a 	mov	r16,r4
   a5d1c:	3025883a 	mov	r18,r6
   a5d20:	dcc02317 	ldw	r19,140(sp)
   a5d24:	3023883a 	mov	r17,r6
   a5d28:	10000826 	beq	r2,zero,a5d4c <_dtoa_r+0x6c>
   a5d2c:	20c01117 	ldw	r3,68(r4)
   a5d30:	01800044 	movi	r6,1
   a5d34:	100b883a 	mov	r5,r2
   a5d38:	30cc983a 	sll	r6,r6,r3
   a5d3c:	10c00115 	stw	r3,4(r2)
   a5d40:	11800215 	stw	r6,8(r2)
   a5d44:	00a7e900 	call	a7e90 <_Bfree>
   a5d48:	80001015 	stw	zero,64(r16)
   a5d4c:	90002f16 	blt	r18,zero,a5e0c <_dtoa_r+0x12c>
   a5d50:	98000015 	stw	zero,0(r19)
   a5d54:	90dffc2c 	andhi	r3,r18,32752
   a5d58:	009ffc34 	movhi	r2,32752
   a5d5c:	18801c26 	beq	r3,r2,a5dd0 <_dtoa_r+0xf0>
   a5d60:	d9000317 	ldw	r4,12(sp)
   a5d64:	880b883a 	mov	r5,r17
   a5d68:	000d883a 	mov	r6,zero
   a5d6c:	000f883a 	mov	r7,zero
   a5d70:	00aab8c0 	call	aab8c <__eqdf2>
   a5d74:	10002c1e 	bne	r2,zero,a5e28 <_dtoa_r+0x148>
   a5d78:	d9002217 	ldw	r4,136(sp)
   a5d7c:	d9c02417 	ldw	r7,144(sp)
   a5d80:	00800044 	movi	r2,1
   a5d84:	20800015 	stw	r2,0(r4)
   a5d88:	38019426 	beq	r7,zero,a63dc <_dtoa_r+0x6fc>
   a5d8c:	008002f4 	movhi	r2,11
   a5d90:	10bb6044 	addi	r2,r2,-4735
   a5d94:	38800015 	stw	r2,0(r7)
   a5d98:	15ffffc4 	addi	r23,r2,-1
   a5d9c:	b805883a 	mov	r2,r23
   a5da0:	dfc02017 	ldw	ra,128(sp)
   a5da4:	df001f17 	ldw	fp,124(sp)
   a5da8:	ddc01e17 	ldw	r23,120(sp)
   a5dac:	dd801d17 	ldw	r22,116(sp)
   a5db0:	dd401c17 	ldw	r21,112(sp)
   a5db4:	dd001b17 	ldw	r20,108(sp)
   a5db8:	dcc01a17 	ldw	r19,104(sp)
   a5dbc:	dc801917 	ldw	r18,100(sp)
   a5dc0:	dc401817 	ldw	r17,96(sp)
   a5dc4:	dc001717 	ldw	r16,92(sp)
   a5dc8:	dec02104 	addi	sp,sp,132
   a5dcc:	f800283a 	ret
   a5dd0:	d8c02217 	ldw	r3,136(sp)
   a5dd4:	d9000317 	ldw	r4,12(sp)
   a5dd8:	0089c3c4 	movi	r2,9999
   a5ddc:	18800015 	stw	r2,0(r3)
   a5de0:	20016c26 	beq	r4,zero,a6394 <_dtoa_r+0x6b4>
   a5de4:	05c002f4 	movhi	r23,11
   a5de8:	bdfb6c04 	addi	r23,r23,-4688
   a5dec:	d9c02417 	ldw	r7,144(sp)
   a5df0:	383fea26 	beq	r7,zero,a5d9c <_dtoa_r+0xbc>
   a5df4:	b88000c7 	ldb	r2,3(r23)
   a5df8:	10016d1e 	bne	r2,zero,a63b0 <_dtoa_r+0x6d0>
   a5dfc:	b88000c4 	addi	r2,r23,3
   a5e00:	d8c02417 	ldw	r3,144(sp)
   a5e04:	18800015 	stw	r2,0(r3)
   a5e08:	003fe406 	br	a5d9c <_dtoa_r+0xbc>
   a5e0c:	04600034 	movhi	r17,32768
   a5e10:	8c7fffc4 	addi	r17,r17,-1
   a5e14:	9462703a 	and	r17,r18,r17
   a5e18:	00800044 	movi	r2,1
   a5e1c:	98800015 	stw	r2,0(r19)
   a5e20:	8825883a 	mov	r18,r17
   a5e24:	003fcb06 	br	a5d54 <_dtoa_r+0x74>
   a5e28:	d9400317 	ldw	r5,12(sp)
   a5e2c:	9028d53a 	srli	r20,r18,20
   a5e30:	d8800204 	addi	r2,sp,8
   a5e34:	d8800015 	stw	r2,0(sp)
   a5e38:	8009883a 	mov	r4,r16
   a5e3c:	880d883a 	mov	r6,r17
   a5e40:	d9c00104 	addi	r7,sp,4
   a5e44:	00a8adc0 	call	a8adc <__d2b>
   a5e48:	a501ffcc 	andi	r20,r20,2047
   a5e4c:	1039883a 	mov	fp,r2
   a5e50:	a001591e 	bne	r20,zero,a63b8 <_dtoa_r+0x6d8>
   a5e54:	dd400217 	ldw	r21,8(sp)
   a5e58:	dd000117 	ldw	r20,4(sp)
   a5e5c:	00befbc4 	movi	r2,-1041
   a5e60:	ad29883a 	add	r20,r21,r20
   a5e64:	a082d216 	blt	r20,r2,a69b0 <_dtoa_r+0xcd0>
   a5e68:	d8c00317 	ldw	r3,12(sp)
   a5e6c:	013f0384 	movi	r4,-1010
   a5e70:	2509c83a 	sub	r4,r4,r20
   a5e74:	a0810484 	addi	r2,r20,1042
   a5e78:	9124983a 	sll	r18,r18,r4
   a5e7c:	1884d83a 	srl	r2,r3,r2
   a5e80:	9088b03a 	or	r4,r18,r2
   a5e84:	00aaf100 	call	aaf10 <__floatunsidf>
   a5e88:	1009883a 	mov	r4,r2
   a5e8c:	017f8434 	movhi	r5,65040
   a5e90:	00800044 	movi	r2,1
   a5e94:	194b883a 	add	r5,r3,r5
   a5e98:	a53fffc4 	addi	r20,r20,-1
   a5e9c:	d8800f15 	stw	r2,60(sp)
   a5ea0:	000d883a 	mov	r6,zero
   a5ea4:	01cffe34 	movhi	r7,16376
   a5ea8:	00aa6940 	call	aa694 <__subdf3>
   a5eac:	1009883a 	mov	r4,r2
   a5eb0:	180b883a 	mov	r5,r3
   a5eb4:	0198dbf4 	movhi	r6,25455
   a5eb8:	3190d844 	addi	r6,r6,17249
   a5ebc:	01cff4f4 	movhi	r7,16339
   a5ec0:	39e1e9c4 	addi	r7,r7,-30809
   a5ec4:	00aa6f40 	call	aa6f4 <__muldf3>
   a5ec8:	180b883a 	mov	r5,r3
   a5ecc:	01a2d874 	movhi	r6,35681
   a5ed0:	31b22cc4 	addi	r6,r6,-14157
   a5ed4:	01cff1f4 	movhi	r7,16327
   a5ed8:	39e28a04 	addi	r7,r7,-30168
   a5edc:	1009883a 	mov	r4,r2
   a5ee0:	00aa6400 	call	aa640 <__adddf3>
   a5ee4:	a009883a 	mov	r4,r20
   a5ee8:	1027883a 	mov	r19,r2
   a5eec:	1825883a 	mov	r18,r3
   a5ef0:	00aad680 	call	aad68 <__floatsidf>
   a5ef4:	1009883a 	mov	r4,r2
   a5ef8:	180b883a 	mov	r5,r3
   a5efc:	019427f4 	movhi	r6,20639
   a5f00:	319e7ec4 	addi	r6,r6,31227
   a5f04:	01cff4f4 	movhi	r7,16339
   a5f08:	39d104c4 	addi	r7,r7,17427
   a5f0c:	00aa6f40 	call	aa6f4 <__muldf3>
   a5f10:	9809883a 	mov	r4,r19
   a5f14:	900b883a 	mov	r5,r18
   a5f18:	100d883a 	mov	r6,r2
   a5f1c:	180f883a 	mov	r7,r3
   a5f20:	00aa6400 	call	aa640 <__adddf3>
   a5f24:	1009883a 	mov	r4,r2
   a5f28:	180b883a 	mov	r5,r3
   a5f2c:	1027883a 	mov	r19,r2
   a5f30:	1825883a 	mov	r18,r3
   a5f34:	00aae3c0 	call	aae3c <__fixdfsi>
   a5f38:	9809883a 	mov	r4,r19
   a5f3c:	900b883a 	mov	r5,r18
   a5f40:	000d883a 	mov	r6,zero
   a5f44:	000f883a 	mov	r7,zero
   a5f48:	d8800615 	stw	r2,24(sp)
   a5f4c:	00aad0c0 	call	aad0c <__ltdf2>
   a5f50:	10027e16 	blt	r2,zero,a694c <_dtoa_r+0xc6c>
   a5f54:	d8c00617 	ldw	r3,24(sp)
   a5f58:	00800584 	movi	r2,22
   a5f5c:	10c26c36 	bltu	r2,r3,a6910 <_dtoa_r+0xc30>
   a5f60:	180490fa 	slli	r2,r3,3
   a5f64:	00c002f4 	movhi	r3,11
   a5f68:	18fb9104 	addi	r3,r3,-4540
   a5f6c:	d9800317 	ldw	r6,12(sp)
   a5f70:	1885883a 	add	r2,r3,r2
   a5f74:	11000017 	ldw	r4,0(r2)
   a5f78:	11400117 	ldw	r5,4(r2)
   a5f7c:	880f883a 	mov	r7,r17
   a5f80:	00aac440 	call	aac44 <__gtdf2>
   a5f84:	00828f0e 	bge	zero,r2,a69c4 <_dtoa_r+0xce4>
   a5f88:	d8800617 	ldw	r2,24(sp)
   a5f8c:	d8000d15 	stw	zero,52(sp)
   a5f90:	10bfffc4 	addi	r2,r2,-1
   a5f94:	d8800615 	stw	r2,24(sp)
   a5f98:	ad29c83a 	sub	r20,r21,r20
   a5f9c:	a53fffc4 	addi	r20,r20,-1
   a5fa0:	a0026616 	blt	r20,zero,a693c <_dtoa_r+0xc5c>
   a5fa4:	dd000715 	stw	r20,28(sp)
   a5fa8:	d8000815 	stw	zero,32(sp)
   a5fac:	d8800617 	ldw	r2,24(sp)
   a5fb0:	10025a16 	blt	r2,zero,a691c <_dtoa_r+0xc3c>
   a5fb4:	d8c00717 	ldw	r3,28(sp)
   a5fb8:	d8800b15 	stw	r2,44(sp)
   a5fbc:	d8000a15 	stw	zero,40(sp)
   a5fc0:	1887883a 	add	r3,r3,r2
   a5fc4:	d8c00715 	stw	r3,28(sp)
   a5fc8:	d9c00417 	ldw	r7,16(sp)
   a5fcc:	00800244 	movi	r2,9
   a5fd0:	11c10536 	bltu	r2,r7,a63e8 <_dtoa_r+0x708>
   a5fd4:	00800144 	movi	r2,5
   a5fd8:	11c4c60e 	bge	r2,r7,a72f4 <_dtoa_r+0x1614>
   a5fdc:	39ffff04 	addi	r7,r7,-4
   a5fe0:	d9c00415 	stw	r7,16(sp)
   a5fe4:	0027883a 	mov	r19,zero
   a5fe8:	d9c00417 	ldw	r7,16(sp)
   a5fec:	008000c4 	movi	r2,3
   a5ff0:	3883a226 	beq	r7,r2,a6e7c <_dtoa_r+0x119c>
   a5ff4:	11c2bc16 	blt	r2,r7,a6ae8 <_dtoa_r+0xe08>
   a5ff8:	00800084 	movi	r2,2
   a5ffc:	3880fb1e 	bne	r7,r2,a63ec <_dtoa_r+0x70c>
   a6000:	d8000c15 	stw	zero,48(sp)
   a6004:	d9002117 	ldw	r4,132(sp)
   a6008:	0103ae0e 	bge	zero,r4,a6ec4 <_dtoa_r+0x11e4>
   a600c:	2025883a 	mov	r18,r4
   a6010:	d9000e15 	stw	r4,56(sp)
   a6014:	d9000915 	stw	r4,36(sp)
   a6018:	80001115 	stw	zero,68(r16)
   a601c:	008005c4 	movi	r2,23
   a6020:	1484b22e 	bgeu	r2,r18,a72ec <_dtoa_r+0x160c>
   a6024:	00c00044 	movi	r3,1
   a6028:	00800104 	movi	r2,4
   a602c:	1085883a 	add	r2,r2,r2
   a6030:	11000504 	addi	r4,r2,20
   a6034:	180b883a 	mov	r5,r3
   a6038:	18c00044 	addi	r3,r3,1
   a603c:	913ffb2e 	bgeu	r18,r4,a602c <_dtoa_r+0x34c>
   a6040:	81401115 	stw	r5,68(r16)
   a6044:	8009883a 	mov	r4,r16
   a6048:	00a7de80 	call	a7de8 <_Balloc>
   a604c:	102f883a 	mov	r23,r2
   a6050:	80801015 	stw	r2,64(r16)
   a6054:	00800384 	movi	r2,14
   a6058:	1480f036 	bltu	r2,r18,a641c <_dtoa_r+0x73c>
   a605c:	9800ef26 	beq	r19,zero,a641c <_dtoa_r+0x73c>
   a6060:	d8800617 	ldw	r2,24(sp)
   a6064:	00839c0e 	bge	zero,r2,a6ed8 <_dtoa_r+0x11f8>
   a6068:	d8c00617 	ldw	r3,24(sp)
   a606c:	108003cc 	andi	r2,r2,15
   a6070:	100490fa 	slli	r2,r2,3
   a6074:	182bd13a 	srai	r21,r3,4
   a6078:	00c002f4 	movhi	r3,11
   a607c:	18fb9104 	addi	r3,r3,-4540
   a6080:	1885883a 	add	r2,r3,r2
   a6084:	a8c0040c 	andi	r3,r21,16
   a6088:	12800017 	ldw	r10,0(r2)
   a608c:	15800117 	ldw	r22,4(r2)
   a6090:	18038726 	beq	r3,zero,a6eb0 <_dtoa_r+0x11d0>
   a6094:	008002f4 	movhi	r2,11
   a6098:	10bb8704 	addi	r2,r2,-4580
   a609c:	11800817 	ldw	r6,32(r2)
   a60a0:	11c00917 	ldw	r7,36(r2)
   a60a4:	d9000317 	ldw	r4,12(sp)
   a60a8:	880b883a 	mov	r5,r17
   a60ac:	da801515 	stw	r10,84(sp)
   a60b0:	00aa9d80 	call	aa9d8 <__divdf3>
   a60b4:	da801517 	ldw	r10,84(sp)
   a60b8:	d8801015 	stw	r2,64(sp)
   a60bc:	1829883a 	mov	r20,r3
   a60c0:	ad4003cc 	andi	r21,r21,15
   a60c4:	048000c4 	movi	r18,3
   a60c8:	a8001126 	beq	r21,zero,a6110 <_dtoa_r+0x430>
   a60cc:	04c002f4 	movhi	r19,11
   a60d0:	9cfb8704 	addi	r19,r19,-4580
   a60d4:	5005883a 	mov	r2,r10
   a60d8:	b007883a 	mov	r3,r22
   a60dc:	a980004c 	andi	r6,r21,1
   a60e0:	1009883a 	mov	r4,r2
   a60e4:	a82bd07a 	srai	r21,r21,1
   a60e8:	180b883a 	mov	r5,r3
   a60ec:	30000426 	beq	r6,zero,a6100 <_dtoa_r+0x420>
   a60f0:	99800017 	ldw	r6,0(r19)
   a60f4:	99c00117 	ldw	r7,4(r19)
   a60f8:	94800044 	addi	r18,r18,1
   a60fc:	00aa6f40 	call	aa6f4 <__muldf3>
   a6100:	9cc00204 	addi	r19,r19,8
   a6104:	a83ff51e 	bne	r21,zero,a60dc <_dtoa_r+0x3fc>
   a6108:	1015883a 	mov	r10,r2
   a610c:	182d883a 	mov	r22,r3
   a6110:	d9001017 	ldw	r4,64(sp)
   a6114:	a00b883a 	mov	r5,r20
   a6118:	500d883a 	mov	r6,r10
   a611c:	b00f883a 	mov	r7,r22
   a6120:	00aa9d80 	call	aa9d8 <__divdf3>
   a6124:	1027883a 	mov	r19,r2
   a6128:	1829883a 	mov	r20,r3
   a612c:	d8c00d17 	ldw	r3,52(sp)
   a6130:	18000626 	beq	r3,zero,a614c <_dtoa_r+0x46c>
   a6134:	9809883a 	mov	r4,r19
   a6138:	a00b883a 	mov	r5,r20
   a613c:	000d883a 	mov	r6,zero
   a6140:	01cffc34 	movhi	r7,16368
   a6144:	00aad0c0 	call	aad0c <__ltdf2>
   a6148:	10040e16 	blt	r2,zero,a7184 <_dtoa_r+0x14a4>
   a614c:	9009883a 	mov	r4,r18
   a6150:	00aad680 	call	aad68 <__floatsidf>
   a6154:	1009883a 	mov	r4,r2
   a6158:	180b883a 	mov	r5,r3
   a615c:	980d883a 	mov	r6,r19
   a6160:	a00f883a 	mov	r7,r20
   a6164:	00aa6f40 	call	aa6f4 <__muldf3>
   a6168:	1009883a 	mov	r4,r2
   a616c:	180b883a 	mov	r5,r3
   a6170:	000d883a 	mov	r6,zero
   a6174:	01d00734 	movhi	r7,16412
   a6178:	00aa6400 	call	aa640 <__adddf3>
   a617c:	057f3034 	movhi	r21,64704
   a6180:	1d6b883a 	add	r21,r3,r21
   a6184:	d8c00917 	ldw	r3,36(sp)
   a6188:	1025883a 	mov	r18,r2
   a618c:	18031f26 	beq	r3,zero,a6e0c <_dtoa_r+0x112c>
   a6190:	d8800617 	ldw	r2,24(sp)
   a6194:	dac00917 	ldw	r11,36(sp)
   a6198:	d8801315 	stw	r2,76(sp)
   a619c:	d8c00c17 	ldw	r3,48(sp)
   a61a0:	18039026 	beq	r3,zero,a6fe4 <_dtoa_r+0x1304>
   a61a4:	58bfffc4 	addi	r2,r11,-1
   a61a8:	100490fa 	slli	r2,r2,3
   a61ac:	00c002f4 	movhi	r3,11
   a61b0:	18fb9104 	addi	r3,r3,-4540
   a61b4:	0009883a 	mov	r4,zero
   a61b8:	1885883a 	add	r2,r3,r2
   a61bc:	11800017 	ldw	r6,0(r2)
   a61c0:	11c00117 	ldw	r7,4(r2)
   a61c4:	014ff834 	movhi	r5,16352
   a61c8:	dac01615 	stw	r11,88(sp)
   a61cc:	00aa9d80 	call	aa9d8 <__divdf3>
   a61d0:	900d883a 	mov	r6,r18
   a61d4:	a80f883a 	mov	r7,r21
   a61d8:	1009883a 	mov	r4,r2
   a61dc:	180b883a 	mov	r5,r3
   a61e0:	00aa6940 	call	aa694 <__subdf3>
   a61e4:	a00b883a 	mov	r5,r20
   a61e8:	9809883a 	mov	r4,r19
   a61ec:	182b883a 	mov	r21,r3
   a61f0:	d8801015 	stw	r2,64(sp)
   a61f4:	00aae3c0 	call	aae3c <__fixdfsi>
   a61f8:	1009883a 	mov	r4,r2
   a61fc:	d8801515 	stw	r2,84(sp)
   a6200:	00aad680 	call	aad68 <__floatsidf>
   a6204:	9809883a 	mov	r4,r19
   a6208:	a00b883a 	mov	r5,r20
   a620c:	100d883a 	mov	r6,r2
   a6210:	180f883a 	mov	r7,r3
   a6214:	00aa6940 	call	aa694 <__subdf3>
   a6218:	da401517 	ldw	r9,84(sp)
   a621c:	d9001017 	ldw	r4,64(sp)
   a6220:	a80b883a 	mov	r5,r21
   a6224:	4d000c04 	addi	r20,r9,48
   a6228:	bd000005 	stb	r20,0(r23)
   a622c:	100d883a 	mov	r6,r2
   a6230:	180f883a 	mov	r7,r3
   a6234:	bd800044 	addi	r22,r23,1
   a6238:	1025883a 	mov	r18,r2
   a623c:	1827883a 	mov	r19,r3
   a6240:	00aac440 	call	aac44 <__gtdf2>
   a6244:	00842216 	blt	zero,r2,a72d0 <_dtoa_r+0x15f0>
   a6248:	0009883a 	mov	r4,zero
   a624c:	014ffc34 	movhi	r5,16368
   a6250:	900d883a 	mov	r6,r18
   a6254:	980f883a 	mov	r7,r19
   a6258:	00aa6940 	call	aa694 <__subdf3>
   a625c:	d9001017 	ldw	r4,64(sp)
   a6260:	a80b883a 	mov	r5,r21
   a6264:	100d883a 	mov	r6,r2
   a6268:	180f883a 	mov	r7,r3
   a626c:	00aac440 	call	aac44 <__gtdf2>
   a6270:	dac01617 	ldw	r11,88(sp)
   a6274:	00841316 	blt	zero,r2,a72c4 <_dtoa_r+0x15e4>
   a6278:	00800044 	movi	r2,1
   a627c:	12c0670e 	bge	r2,r11,a641c <_dtoa_r+0x73c>
   a6280:	bad7883a 	add	r11,r23,r11
   a6284:	df001115 	stw	fp,68(sp)
   a6288:	dc401215 	stw	r17,72(sp)
   a628c:	5839883a 	mov	fp,r11
   a6290:	dc401017 	ldw	r17,64(sp)
   a6294:	00000806 	br	a62b8 <_dtoa_r+0x5d8>
   a6298:	00aa6940 	call	aa694 <__subdf3>
   a629c:	1009883a 	mov	r4,r2
   a62a0:	180b883a 	mov	r5,r3
   a62a4:	880d883a 	mov	r6,r17
   a62a8:	a80f883a 	mov	r7,r21
   a62ac:	00aad0c0 	call	aad0c <__ltdf2>
   a62b0:	1003ee16 	blt	r2,zero,a726c <_dtoa_r+0x158c>
   a62b4:	b703f126 	beq	r22,fp,a727c <_dtoa_r+0x159c>
   a62b8:	8809883a 	mov	r4,r17
   a62bc:	a80b883a 	mov	r5,r21
   a62c0:	000d883a 	mov	r6,zero
   a62c4:	01d00934 	movhi	r7,16420
   a62c8:	00aa6f40 	call	aa6f4 <__muldf3>
   a62cc:	000d883a 	mov	r6,zero
   a62d0:	01d00934 	movhi	r7,16420
   a62d4:	9009883a 	mov	r4,r18
   a62d8:	980b883a 	mov	r5,r19
   a62dc:	1023883a 	mov	r17,r2
   a62e0:	182b883a 	mov	r21,r3
   a62e4:	00aa6f40 	call	aa6f4 <__muldf3>
   a62e8:	180b883a 	mov	r5,r3
   a62ec:	1009883a 	mov	r4,r2
   a62f0:	1825883a 	mov	r18,r3
   a62f4:	1027883a 	mov	r19,r2
   a62f8:	00aae3c0 	call	aae3c <__fixdfsi>
   a62fc:	1009883a 	mov	r4,r2
   a6300:	1029883a 	mov	r20,r2
   a6304:	00aad680 	call	aad68 <__floatsidf>
   a6308:	9809883a 	mov	r4,r19
   a630c:	900b883a 	mov	r5,r18
   a6310:	100d883a 	mov	r6,r2
   a6314:	180f883a 	mov	r7,r3
   a6318:	00aa6940 	call	aa694 <__subdf3>
   a631c:	a5000c04 	addi	r20,r20,48
   a6320:	b5000005 	stb	r20,0(r22)
   a6324:	1009883a 	mov	r4,r2
   a6328:	180b883a 	mov	r5,r3
   a632c:	880d883a 	mov	r6,r17
   a6330:	a80f883a 	mov	r7,r21
   a6334:	1025883a 	mov	r18,r2
   a6338:	1827883a 	mov	r19,r3
   a633c:	00aad0c0 	call	aad0c <__ltdf2>
   a6340:	b5800044 	addi	r22,r22,1
   a6344:	0009883a 	mov	r4,zero
   a6348:	014ffc34 	movhi	r5,16368
   a634c:	900d883a 	mov	r6,r18
   a6350:	980f883a 	mov	r7,r19
   a6354:	103fd00e 	bge	r2,zero,a6298 <_dtoa_r+0x5b8>
   a6358:	d9001317 	ldw	r4,76(sp)
   a635c:	df001117 	ldw	fp,68(sp)
   a6360:	d9000615 	stw	r4,24(sp)
   a6364:	8009883a 	mov	r4,r16
   a6368:	e00b883a 	mov	r5,fp
   a636c:	00a7e900 	call	a7e90 <_Bfree>
   a6370:	d9c00617 	ldw	r7,24(sp)
   a6374:	d8c02217 	ldw	r3,136(sp)
   a6378:	d9002417 	ldw	r4,144(sp)
   a637c:	b0000005 	stb	zero,0(r22)
   a6380:	38800044 	addi	r2,r7,1
   a6384:	18800015 	stw	r2,0(r3)
   a6388:	203e8426 	beq	r4,zero,a5d9c <_dtoa_r+0xbc>
   a638c:	25800015 	stw	r22,0(r4)
   a6390:	003e8206 	br	a5d9c <_dtoa_r+0xbc>
   a6394:	00800434 	movhi	r2,16
   a6398:	10bfffc4 	addi	r2,r2,-1
   a639c:	90a4703a 	and	r18,r18,r2
   a63a0:	903e901e 	bne	r18,zero,a5de4 <_dtoa_r+0x104>
   a63a4:	05c002f4 	movhi	r23,11
   a63a8:	bdfb6904 	addi	r23,r23,-4700
   a63ac:	003e8f06 	br	a5dec <_dtoa_r+0x10c>
   a63b0:	b8800204 	addi	r2,r23,8
   a63b4:	003e9206 	br	a5e00 <_dtoa_r+0x120>
   a63b8:	01400434 	movhi	r5,16
   a63bc:	297fffc4 	addi	r5,r5,-1
   a63c0:	894a703a 	and	r5,r17,r5
   a63c4:	d9000317 	ldw	r4,12(sp)
   a63c8:	294ffc34 	orhi	r5,r5,16368
   a63cc:	a53f0044 	addi	r20,r20,-1023
   a63d0:	dd400217 	ldw	r21,8(sp)
   a63d4:	d8000f15 	stw	zero,60(sp)
   a63d8:	003eb106 	br	a5ea0 <_dtoa_r+0x1c0>
   a63dc:	05c002f4 	movhi	r23,11
   a63e0:	bdfb6004 	addi	r23,r23,-4736
   a63e4:	003e6d06 	br	a5d9c <_dtoa_r+0xbc>
   a63e8:	d8000415 	stw	zero,16(sp)
   a63ec:	80001115 	stw	zero,68(r16)
   a63f0:	8009883a 	mov	r4,r16
   a63f4:	000b883a 	mov	r5,zero
   a63f8:	00a7de80 	call	a7de8 <_Balloc>
   a63fc:	01ffffc4 	movi	r7,-1
   a6400:	102f883a 	mov	r23,r2
   a6404:	80801015 	stw	r2,64(r16)
   a6408:	00800044 	movi	r2,1
   a640c:	d9c00915 	stw	r7,36(sp)
   a6410:	d8002115 	stw	zero,132(sp)
   a6414:	d9c00e15 	stw	r7,56(sp)
   a6418:	d8800c15 	stw	r2,48(sp)
   a641c:	d8800117 	ldw	r2,4(sp)
   a6420:	10008b16 	blt	r2,zero,a6650 <_dtoa_r+0x970>
   a6424:	d9000617 	ldw	r4,24(sp)
   a6428:	00c00384 	movi	r3,14
   a642c:	19008816 	blt	r3,r4,a6650 <_dtoa_r+0x970>
   a6430:	200490fa 	slli	r2,r4,3
   a6434:	d9c02117 	ldw	r7,132(sp)
   a6438:	00c002f4 	movhi	r3,11
   a643c:	18fb9104 	addi	r3,r3,-4540
   a6440:	1885883a 	add	r2,r3,r2
   a6444:	14800017 	ldw	r18,0(r2)
   a6448:	14c00117 	ldw	r19,4(r2)
   a644c:	3801c916 	blt	r7,zero,a6b74 <_dtoa_r+0xe94>
   a6450:	d9000317 	ldw	r4,12(sp)
   a6454:	900d883a 	mov	r6,r18
   a6458:	980f883a 	mov	r7,r19
   a645c:	880b883a 	mov	r5,r17
   a6460:	00aa9d80 	call	aa9d8 <__divdf3>
   a6464:	180b883a 	mov	r5,r3
   a6468:	1009883a 	mov	r4,r2
   a646c:	00aae3c0 	call	aae3c <__fixdfsi>
   a6470:	1009883a 	mov	r4,r2
   a6474:	102b883a 	mov	r21,r2
   a6478:	00aad680 	call	aad68 <__floatsidf>
   a647c:	1009883a 	mov	r4,r2
   a6480:	180b883a 	mov	r5,r3
   a6484:	900d883a 	mov	r6,r18
   a6488:	980f883a 	mov	r7,r19
   a648c:	00aa6f40 	call	aa6f4 <__muldf3>
   a6490:	d9000317 	ldw	r4,12(sp)
   a6494:	880b883a 	mov	r5,r17
   a6498:	100d883a 	mov	r6,r2
   a649c:	180f883a 	mov	r7,r3
   a64a0:	00aa6940 	call	aa694 <__subdf3>
   a64a4:	d9c00917 	ldw	r7,36(sp)
   a64a8:	1009883a 	mov	r4,r2
   a64ac:	a8800c04 	addi	r2,r21,48
   a64b0:	b8800005 	stb	r2,0(r23)
   a64b4:	01800044 	movi	r6,1
   a64b8:	180b883a 	mov	r5,r3
   a64bc:	2005883a 	mov	r2,r4
   a64c0:	bd800044 	addi	r22,r23,1
   a64c4:	39803726 	beq	r7,r6,a65a4 <_dtoa_r+0x8c4>
   a64c8:	000d883a 	mov	r6,zero
   a64cc:	01d00934 	movhi	r7,16420
   a64d0:	00aa6f40 	call	aa6f4 <__muldf3>
   a64d4:	1009883a 	mov	r4,r2
   a64d8:	180b883a 	mov	r5,r3
   a64dc:	000d883a 	mov	r6,zero
   a64e0:	000f883a 	mov	r7,zero
   a64e4:	1029883a 	mov	r20,r2
   a64e8:	1823883a 	mov	r17,r3
   a64ec:	00aab8c0 	call	aab8c <__eqdf2>
   a64f0:	103f9c26 	beq	r2,zero,a6364 <_dtoa_r+0x684>
   a64f4:	dd400917 	ldw	r21,36(sp)
   a64f8:	dc000415 	stw	r16,16(sp)
   a64fc:	00000906 	br	a6524 <_dtoa_r+0x844>
   a6500:	00aa6f40 	call	aa6f4 <__muldf3>
   a6504:	1009883a 	mov	r4,r2
   a6508:	180b883a 	mov	r5,r3
   a650c:	000d883a 	mov	r6,zero
   a6510:	000f883a 	mov	r7,zero
   a6514:	1029883a 	mov	r20,r2
   a6518:	1823883a 	mov	r17,r3
   a651c:	00aab8c0 	call	aab8c <__eqdf2>
   a6520:	10022926 	beq	r2,zero,a6dc8 <_dtoa_r+0x10e8>
   a6524:	900d883a 	mov	r6,r18
   a6528:	980f883a 	mov	r7,r19
   a652c:	a009883a 	mov	r4,r20
   a6530:	880b883a 	mov	r5,r17
   a6534:	00aa9d80 	call	aa9d8 <__divdf3>
   a6538:	180b883a 	mov	r5,r3
   a653c:	1009883a 	mov	r4,r2
   a6540:	00aae3c0 	call	aae3c <__fixdfsi>
   a6544:	1009883a 	mov	r4,r2
   a6548:	1021883a 	mov	r16,r2
   a654c:	00aad680 	call	aad68 <__floatsidf>
   a6550:	1009883a 	mov	r4,r2
   a6554:	180b883a 	mov	r5,r3
   a6558:	900d883a 	mov	r6,r18
   a655c:	980f883a 	mov	r7,r19
   a6560:	00aa6f40 	call	aa6f4 <__muldf3>
   a6564:	a009883a 	mov	r4,r20
   a6568:	880b883a 	mov	r5,r17
   a656c:	100d883a 	mov	r6,r2
   a6570:	180f883a 	mov	r7,r3
   a6574:	00aa6940 	call	aa694 <__subdf3>
   a6578:	82400c04 	addi	r9,r16,48
   a657c:	b2400005 	stb	r9,0(r22)
   a6580:	b5800044 	addi	r22,r22,1
   a6584:	b5d3c83a 	sub	r9,r22,r23
   a6588:	000d883a 	mov	r6,zero
   a658c:	01d00934 	movhi	r7,16420
   a6590:	1009883a 	mov	r4,r2
   a6594:	180b883a 	mov	r5,r3
   a6598:	aa7fd91e 	bne	r21,r9,a6500 <_dtoa_r+0x820>
   a659c:	802b883a 	mov	r21,r16
   a65a0:	dc000417 	ldw	r16,16(sp)
   a65a4:	1009883a 	mov	r4,r2
   a65a8:	180b883a 	mov	r5,r3
   a65ac:	100d883a 	mov	r6,r2
   a65b0:	180f883a 	mov	r7,r3
   a65b4:	00aa6400 	call	aa640 <__adddf3>
   a65b8:	9009883a 	mov	r4,r18
   a65bc:	980b883a 	mov	r5,r19
   a65c0:	100d883a 	mov	r6,r2
   a65c4:	180f883a 	mov	r7,r3
   a65c8:	1023883a 	mov	r17,r2
   a65cc:	1829883a 	mov	r20,r3
   a65d0:	00aad0c0 	call	aad0c <__ltdf2>
   a65d4:	10000816 	blt	r2,zero,a65f8 <_dtoa_r+0x918>
   a65d8:	9009883a 	mov	r4,r18
   a65dc:	980b883a 	mov	r5,r19
   a65e0:	880d883a 	mov	r6,r17
   a65e4:	a00f883a 	mov	r7,r20
   a65e8:	00aab8c0 	call	aab8c <__eqdf2>
   a65ec:	103f5d1e 	bne	r2,zero,a6364 <_dtoa_r+0x684>
   a65f0:	ad40004c 	andi	r21,r21,1
   a65f4:	a83f5b26 	beq	r21,zero,a6364 <_dtoa_r+0x684>
   a65f8:	b53fffc3 	ldbu	r20,-1(r22)
   a65fc:	b0ffff84 	addi	r3,r22,-2
   a6600:	01400e44 	movi	r5,57
   a6604:	00000306 	br	a6614 <_dtoa_r+0x934>
   a6608:	1d000003 	ldbu	r20,0(r3)
   a660c:	102d883a 	mov	r22,r2
   a6610:	18ffffc4 	addi	r3,r3,-1
   a6614:	a1003fcc 	andi	r4,r20,255
   a6618:	2100201c 	xori	r4,r4,128
   a661c:	213fe004 	addi	r4,r4,-128
   a6620:	b0bfffc4 	addi	r2,r22,-1
   a6624:	2142ca1e 	bne	r4,r5,a7150 <_dtoa_r+0x1470>
   a6628:	b8bff71e 	bne	r23,r2,a6608 <_dtoa_r+0x928>
   a662c:	d8800617 	ldw	r2,24(sp)
   a6630:	05000c44 	movi	r20,49
   a6634:	10800044 	addi	r2,r2,1
   a6638:	d8800615 	stw	r2,24(sp)
   a663c:	00800c04 	movi	r2,48
   a6640:	b8800005 	stb	r2,0(r23)
   a6644:	b805883a 	mov	r2,r23
   a6648:	15000005 	stb	r20,0(r2)
   a664c:	003f4506 	br	a6364 <_dtoa_r+0x684>
   a6650:	d9c00c17 	ldw	r7,48(sp)
   a6654:	3800c926 	beq	r7,zero,a697c <_dtoa_r+0xc9c>
   a6658:	d9c00417 	ldw	r7,16(sp)
   a665c:	00c00044 	movi	r3,1
   a6660:	19c16c0e 	bge	r3,r7,a6c14 <_dtoa_r+0xf34>
   a6664:	d9000917 	ldw	r4,36(sp)
   a6668:	d9c00a17 	ldw	r7,40(sp)
   a666c:	24ffffc4 	addi	r19,r4,-1
   a6670:	3cc20716 	blt	r7,r19,a6e90 <_dtoa_r+0x11b0>
   a6674:	3ce7c83a 	sub	r19,r7,r19
   a6678:	d9c00917 	ldw	r7,36(sp)
   a667c:	3802ae16 	blt	r7,zero,a7138 <_dtoa_r+0x1458>
   a6680:	dc800817 	ldw	r18,32(sp)
   a6684:	d8800917 	ldw	r2,36(sp)
   a6688:	d8c00817 	ldw	r3,32(sp)
   a668c:	d9c00717 	ldw	r7,28(sp)
   a6690:	8009883a 	mov	r4,r16
   a6694:	1887883a 	add	r3,r3,r2
   a6698:	388f883a 	add	r7,r7,r2
   a669c:	01400044 	movi	r5,1
   a66a0:	d8c00815 	stw	r3,32(sp)
   a66a4:	d9c00715 	stw	r7,28(sp)
   a66a8:	00a82180 	call	a8218 <__i2b>
   a66ac:	102b883a 	mov	r21,r2
   a66b0:	90000a26 	beq	r18,zero,a66dc <_dtoa_r+0x9fc>
   a66b4:	d8800717 	ldw	r2,28(sp)
   a66b8:	0080080e 	bge	zero,r2,a66dc <_dtoa_r+0x9fc>
   a66bc:	90812b16 	blt	r18,r2,a6b6c <_dtoa_r+0xe8c>
   a66c0:	d8c00817 	ldw	r3,32(sp)
   a66c4:	d9000717 	ldw	r4,28(sp)
   a66c8:	90a5c83a 	sub	r18,r18,r2
   a66cc:	1887c83a 	sub	r3,r3,r2
   a66d0:	2089c83a 	sub	r4,r4,r2
   a66d4:	d8c00815 	stw	r3,32(sp)
   a66d8:	d9000715 	stw	r4,28(sp)
   a66dc:	d9c00a17 	ldw	r7,40(sp)
   a66e0:	01c0140e 	bge	zero,r7,a6734 <_dtoa_r+0xa54>
   a66e4:	d8800c17 	ldw	r2,48(sp)
   a66e8:	1001de26 	beq	r2,zero,a6e64 <_dtoa_r+0x1184>
   a66ec:	04c00e0e 	bge	zero,r19,a6728 <_dtoa_r+0xa48>
   a66f0:	a80b883a 	mov	r5,r21
   a66f4:	8009883a 	mov	r4,r16
   a66f8:	980d883a 	mov	r6,r19
   a66fc:	00a84ac0 	call	a84ac <__pow5mult>
   a6700:	e00d883a 	mov	r6,fp
   a6704:	8009883a 	mov	r4,r16
   a6708:	100b883a 	mov	r5,r2
   a670c:	102b883a 	mov	r21,r2
   a6710:	00a82540 	call	a8254 <__multiply>
   a6714:	1029883a 	mov	r20,r2
   a6718:	e00b883a 	mov	r5,fp
   a671c:	8009883a 	mov	r4,r16
   a6720:	00a7e900 	call	a7e90 <_Bfree>
   a6724:	a039883a 	mov	fp,r20
   a6728:	d8c00a17 	ldw	r3,40(sp)
   a672c:	1ccdc83a 	sub	r6,r3,r19
   a6730:	3001291e 	bne	r6,zero,a6bd8 <_dtoa_r+0xef8>
   a6734:	8009883a 	mov	r4,r16
   a6738:	01400044 	movi	r5,1
   a673c:	00a82180 	call	a8218 <__i2b>
   a6740:	d9000b17 	ldw	r4,44(sp)
   a6744:	1029883a 	mov	r20,r2
   a6748:	0100050e 	bge	zero,r4,a6760 <_dtoa_r+0xa80>
   a674c:	d9800b17 	ldw	r6,44(sp)
   a6750:	8009883a 	mov	r4,r16
   a6754:	100b883a 	mov	r5,r2
   a6758:	00a84ac0 	call	a84ac <__pow5mult>
   a675c:	1029883a 	mov	r20,r2
   a6760:	d9c00417 	ldw	r7,16(sp)
   a6764:	00800044 	movi	r2,1
   a6768:	11c0f00e 	bge	r2,r7,a6b2c <_dtoa_r+0xe4c>
   a676c:	0023883a 	mov	r17,zero
   a6770:	d8800b17 	ldw	r2,44(sp)
   a6774:	1001741e 	bne	r2,zero,a6d48 <_dtoa_r+0x1068>
   a6778:	00800044 	movi	r2,1
   a677c:	d8c00717 	ldw	r3,28(sp)
   a6780:	10c5883a 	add	r2,r2,r3
   a6784:	108007cc 	andi	r2,r2,31
   a6788:	10008026 	beq	r2,zero,a698c <_dtoa_r+0xcac>
   a678c:	01000804 	movi	r4,32
   a6790:	2089c83a 	sub	r4,r4,r2
   a6794:	00c00104 	movi	r3,4
   a6798:	1902d00e 	bge	r3,r4,a72dc <_dtoa_r+0x15fc>
   a679c:	d9000817 	ldw	r4,32(sp)
   a67a0:	d9c00717 	ldw	r7,28(sp)
   a67a4:	00c00704 	movi	r3,28
   a67a8:	1885c83a 	sub	r2,r3,r2
   a67ac:	2089883a 	add	r4,r4,r2
   a67b0:	388f883a 	add	r7,r7,r2
   a67b4:	d9000815 	stw	r4,32(sp)
   a67b8:	90a5883a 	add	r18,r18,r2
   a67bc:	d9c00715 	stw	r7,28(sp)
   a67c0:	d9c00817 	ldw	r7,32(sp)
   a67c4:	01c0050e 	bge	zero,r7,a67dc <_dtoa_r+0xafc>
   a67c8:	e00b883a 	mov	r5,fp
   a67cc:	8009883a 	mov	r4,r16
   a67d0:	380d883a 	mov	r6,r7
   a67d4:	00a85d80 	call	a85d8 <__lshift>
   a67d8:	1039883a 	mov	fp,r2
   a67dc:	d8800717 	ldw	r2,28(sp)
   a67e0:	0080050e 	bge	zero,r2,a67f8 <_dtoa_r+0xb18>
   a67e4:	a00b883a 	mov	r5,r20
   a67e8:	8009883a 	mov	r4,r16
   a67ec:	100d883a 	mov	r6,r2
   a67f0:	00a85d80 	call	a85d8 <__lshift>
   a67f4:	1029883a 	mov	r20,r2
   a67f8:	d8c00d17 	ldw	r3,52(sp)
   a67fc:	1801401e 	bne	r3,zero,a6d00 <_dtoa_r+0x1020>
   a6800:	d8800917 	ldw	r2,36(sp)
   a6804:	00815a0e 	bge	zero,r2,a6d70 <_dtoa_r+0x1090>
   a6808:	d8c00c17 	ldw	r3,48(sp)
   a680c:	18006f1e 	bne	r3,zero,a69cc <_dtoa_r+0xcec>
   a6810:	b823883a 	mov	r17,r23
   a6814:	dc800917 	ldw	r18,36(sp)
   a6818:	00000206 	br	a6824 <_dtoa_r+0xb44>
   a681c:	00a7eb80 	call	a7eb8 <__multadd>
   a6820:	1039883a 	mov	fp,r2
   a6824:	e009883a 	mov	r4,fp
   a6828:	a00b883a 	mov	r5,r20
   a682c:	00a5aa40 	call	a5aa4 <quorem>
   a6830:	10800c04 	addi	r2,r2,48
   a6834:	88800005 	stb	r2,0(r17)
   a6838:	8c400044 	addi	r17,r17,1
   a683c:	8dc7c83a 	sub	r3,r17,r23
   a6840:	8009883a 	mov	r4,r16
   a6844:	e00b883a 	mov	r5,fp
   a6848:	01800284 	movi	r6,10
   a684c:	000f883a 	mov	r7,zero
   a6850:	1cbff216 	blt	r3,r18,a681c <_dtoa_r+0xb3c>
   a6854:	dd800917 	ldw	r22,36(sp)
   a6858:	1007883a 	mov	r3,r2
   a685c:	05823a0e 	bge	zero,r22,a7148 <_dtoa_r+0x1468>
   a6860:	bdad883a 	add	r22,r23,r22
   a6864:	0023883a 	mov	r17,zero
   a6868:	e00b883a 	mov	r5,fp
   a686c:	01800044 	movi	r6,1
   a6870:	8009883a 	mov	r4,r16
   a6874:	d8c01515 	stw	r3,84(sp)
   a6878:	00a85d80 	call	a85d8 <__lshift>
   a687c:	1009883a 	mov	r4,r2
   a6880:	a00b883a 	mov	r5,r20
   a6884:	1039883a 	mov	fp,r2
   a6888:	00a87340 	call	a8734 <__mcmp>
   a688c:	d8c01517 	ldw	r3,84(sp)
   a6890:	0080d60e 	bge	zero,r2,a6bec <_dtoa_r+0xf0c>
   a6894:	b13fffc3 	ldbu	r4,-1(r22)
   a6898:	b0ffff84 	addi	r3,r22,-2
   a689c:	01800e44 	movi	r6,57
   a68a0:	00000306 	br	a68b0 <_dtoa_r+0xbd0>
   a68a4:	19000003 	ldbu	r4,0(r3)
   a68a8:	102d883a 	mov	r22,r2
   a68ac:	18ffffc4 	addi	r3,r3,-1
   a68b0:	21403fcc 	andi	r5,r4,255
   a68b4:	2940201c 	xori	r5,r5,128
   a68b8:	297fe004 	addi	r5,r5,-128
   a68bc:	b0bfffc4 	addi	r2,r22,-1
   a68c0:	2981a71e 	bne	r5,r6,a6f60 <_dtoa_r+0x1280>
   a68c4:	b8bff71e 	bne	r23,r2,a68a4 <_dtoa_r+0xbc4>
   a68c8:	d8800617 	ldw	r2,24(sp)
   a68cc:	10800044 	addi	r2,r2,1
   a68d0:	d8800615 	stw	r2,24(sp)
   a68d4:	00800c44 	movi	r2,49
   a68d8:	b8800005 	stb	r2,0(r23)
   a68dc:	8009883a 	mov	r4,r16
   a68e0:	a00b883a 	mov	r5,r20
   a68e4:	00a7e900 	call	a7e90 <_Bfree>
   a68e8:	a83e9e26 	beq	r21,zero,a6364 <_dtoa_r+0x684>
   a68ec:	88000426 	beq	r17,zero,a6900 <_dtoa_r+0xc20>
   a68f0:	8d400326 	beq	r17,r21,a6900 <_dtoa_r+0xc20>
   a68f4:	8009883a 	mov	r4,r16
   a68f8:	880b883a 	mov	r5,r17
   a68fc:	00a7e900 	call	a7e90 <_Bfree>
   a6900:	8009883a 	mov	r4,r16
   a6904:	a80b883a 	mov	r5,r21
   a6908:	00a7e900 	call	a7e90 <_Bfree>
   a690c:	003e9506 	br	a6364 <_dtoa_r+0x684>
   a6910:	00c00044 	movi	r3,1
   a6914:	d8c00d15 	stw	r3,52(sp)
   a6918:	003d9f06 	br	a5f98 <_dtoa_r+0x2b8>
   a691c:	d9000817 	ldw	r4,32(sp)
   a6920:	d8800617 	ldw	r2,24(sp)
   a6924:	d8000b15 	stw	zero,44(sp)
   a6928:	2089c83a 	sub	r4,r4,r2
   a692c:	0087c83a 	sub	r3,zero,r2
   a6930:	d9000815 	stw	r4,32(sp)
   a6934:	d8c00a15 	stw	r3,40(sp)
   a6938:	003da306 	br	a5fc8 <_dtoa_r+0x2e8>
   a693c:	0529c83a 	sub	r20,zero,r20
   a6940:	dd000815 	stw	r20,32(sp)
   a6944:	d8000715 	stw	zero,28(sp)
   a6948:	003d9806 	br	a5fac <_dtoa_r+0x2cc>
   a694c:	d9000617 	ldw	r4,24(sp)
   a6950:	00aad680 	call	aad68 <__floatsidf>
   a6954:	1009883a 	mov	r4,r2
   a6958:	180b883a 	mov	r5,r3
   a695c:	980d883a 	mov	r6,r19
   a6960:	900f883a 	mov	r7,r18
   a6964:	00aabe80 	call	aabe8 <__nedf2>
   a6968:	103d7a26 	beq	r2,zero,a5f54 <_dtoa_r+0x274>
   a696c:	d8800617 	ldw	r2,24(sp)
   a6970:	10bfffc4 	addi	r2,r2,-1
   a6974:	d8800615 	stw	r2,24(sp)
   a6978:	003d7606 	br	a5f54 <_dtoa_r+0x274>
   a697c:	dcc00a17 	ldw	r19,40(sp)
   a6980:	dc800817 	ldw	r18,32(sp)
   a6984:	002b883a 	mov	r21,zero
   a6988:	003f4906 	br	a66b0 <_dtoa_r+0x9d0>
   a698c:	00800704 	movi	r2,28
   a6990:	d8c00817 	ldw	r3,32(sp)
   a6994:	d9000717 	ldw	r4,28(sp)
   a6998:	90a5883a 	add	r18,r18,r2
   a699c:	1887883a 	add	r3,r3,r2
   a69a0:	2089883a 	add	r4,r4,r2
   a69a4:	d8c00815 	stw	r3,32(sp)
   a69a8:	d9000715 	stw	r4,28(sp)
   a69ac:	003f8406 	br	a67c0 <_dtoa_r+0xae0>
   a69b0:	d9c00317 	ldw	r7,12(sp)
   a69b4:	013efb84 	movi	r4,-1042
   a69b8:	2509c83a 	sub	r4,r4,r20
   a69bc:	3908983a 	sll	r4,r7,r4
   a69c0:	003d3006 	br	a5e84 <_dtoa_r+0x1a4>
   a69c4:	d8000d15 	stw	zero,52(sp)
   a69c8:	003d7306 	br	a5f98 <_dtoa_r+0x2b8>
   a69cc:	0480050e 	bge	zero,r18,a69e4 <_dtoa_r+0xd04>
   a69d0:	a80b883a 	mov	r5,r21
   a69d4:	8009883a 	mov	r4,r16
   a69d8:	900d883a 	mov	r6,r18
   a69dc:	00a85d80 	call	a85d8 <__lshift>
   a69e0:	102b883a 	mov	r21,r2
   a69e4:	8801611e 	bne	r17,zero,a6f6c <_dtoa_r+0x128c>
   a69e8:	a827883a 	mov	r19,r21
   a69ec:	d8c00317 	ldw	r3,12(sp)
   a69f0:	d9000917 	ldw	r4,36(sp)
   a69f4:	b8bfffc4 	addi	r2,r23,-1
   a69f8:	18c0004c 	andi	r3,r3,1
   a69fc:	1105883a 	add	r2,r2,r4
   a6a00:	b825883a 	mov	r18,r23
   a6a04:	d8800515 	stw	r2,20(sp)
   a6a08:	a823883a 	mov	r17,r21
   a6a0c:	d8c00315 	stw	r3,12(sp)
   a6a10:	ddc00715 	stw	r23,28(sp)
   a6a14:	e009883a 	mov	r4,fp
   a6a18:	a00b883a 	mov	r5,r20
   a6a1c:	00a5aa40 	call	a5aa4 <quorem>
   a6a20:	e009883a 	mov	r4,fp
   a6a24:	880b883a 	mov	r5,r17
   a6a28:	102d883a 	mov	r22,r2
   a6a2c:	00a87340 	call	a8734 <__mcmp>
   a6a30:	980d883a 	mov	r6,r19
   a6a34:	8009883a 	mov	r4,r16
   a6a38:	a00b883a 	mov	r5,r20
   a6a3c:	102b883a 	mov	r21,r2
   a6a40:	00a878c0 	call	a878c <__mdiff>
   a6a44:	100d883a 	mov	r6,r2
   a6a48:	10800317 	ldw	r2,12(r2)
   a6a4c:	b5c00c04 	addi	r23,r22,48
   a6a50:	10008c26 	beq	r2,zero,a6c84 <_dtoa_r+0xfa4>
   a6a54:	8009883a 	mov	r4,r16
   a6a58:	300b883a 	mov	r5,r6
   a6a5c:	00a7e900 	call	a7e90 <_Bfree>
   a6a60:	00800044 	movi	r2,1
   a6a64:	a8007116 	blt	r21,zero,a6c2c <_dtoa_r+0xf4c>
   a6a68:	a800041e 	bne	r21,zero,a6a7c <_dtoa_r+0xd9c>
   a6a6c:	d9c00417 	ldw	r7,16(sp)
   a6a70:	3800021e 	bne	r7,zero,a6a7c <_dtoa_r+0xd9c>
   a6a74:	d8c00317 	ldw	r3,12(sp)
   a6a78:	18006c26 	beq	r3,zero,a6c2c <_dtoa_r+0xf4c>
   a6a7c:	00814c16 	blt	zero,r2,a6fb0 <_dtoa_r+0x12d0>
   a6a80:	d8c00517 	ldw	r3,20(sp)
   a6a84:	95400044 	addi	r21,r18,1
   a6a88:	95c00005 	stb	r23,0(r18)
   a6a8c:	a82d883a 	mov	r22,r21
   a6a90:	90c14d26 	beq	r18,r3,a6fc8 <_dtoa_r+0x12e8>
   a6a94:	e00b883a 	mov	r5,fp
   a6a98:	8009883a 	mov	r4,r16
   a6a9c:	01800284 	movi	r6,10
   a6aa0:	000f883a 	mov	r7,zero
   a6aa4:	00a7eb80 	call	a7eb8 <__multadd>
   a6aa8:	1039883a 	mov	fp,r2
   a6aac:	8cc08b26 	beq	r17,r19,a6cdc <_dtoa_r+0xffc>
   a6ab0:	880b883a 	mov	r5,r17
   a6ab4:	01800284 	movi	r6,10
   a6ab8:	000f883a 	mov	r7,zero
   a6abc:	8009883a 	mov	r4,r16
   a6ac0:	00a7eb80 	call	a7eb8 <__multadd>
   a6ac4:	980b883a 	mov	r5,r19
   a6ac8:	8009883a 	mov	r4,r16
   a6acc:	01800284 	movi	r6,10
   a6ad0:	000f883a 	mov	r7,zero
   a6ad4:	1023883a 	mov	r17,r2
   a6ad8:	00a7eb80 	call	a7eb8 <__multadd>
   a6adc:	1027883a 	mov	r19,r2
   a6ae0:	a825883a 	mov	r18,r21
   a6ae4:	003fcb06 	br	a6a14 <_dtoa_r+0xd34>
   a6ae8:	d9c00417 	ldw	r7,16(sp)
   a6aec:	00800104 	movi	r2,4
   a6af0:	3880e426 	beq	r7,r2,a6e84 <_dtoa_r+0x11a4>
   a6af4:	00800144 	movi	r2,5
   a6af8:	38be3c1e 	bne	r7,r2,a63ec <_dtoa_r+0x70c>
   a6afc:	00c00044 	movi	r3,1
   a6b00:	d8c00c15 	stw	r3,48(sp)
   a6b04:	d9c02117 	ldw	r7,132(sp)
   a6b08:	d8800617 	ldw	r2,24(sp)
   a6b0c:	388f883a 	add	r7,r7,r2
   a6b10:	3c800044 	addi	r18,r7,1
   a6b14:	d9c00e15 	stw	r7,56(sp)
   a6b18:	dc800915 	stw	r18,36(sp)
   a6b1c:	04bd3e16 	blt	zero,r18,a6018 <_dtoa_r+0x338>
   a6b20:	80001115 	stw	zero,68(r16)
   a6b24:	000b883a 	mov	r5,zero
   a6b28:	003d4606 	br	a6044 <_dtoa_r+0x364>
   a6b2c:	d8c00317 	ldw	r3,12(sp)
   a6b30:	183f0e1e 	bne	r3,zero,a676c <_dtoa_r+0xa8c>
   a6b34:	00c00434 	movhi	r3,16
   a6b38:	18ffffc4 	addi	r3,r3,-1
   a6b3c:	88c6703a 	and	r3,r17,r3
   a6b40:	183f0a1e 	bne	r3,zero,a676c <_dtoa_r+0xa8c>
   a6b44:	8c5ffc2c 	andhi	r17,r17,32752
   a6b48:	883f0826 	beq	r17,zero,a676c <_dtoa_r+0xa8c>
   a6b4c:	d9000817 	ldw	r4,32(sp)
   a6b50:	d9c00717 	ldw	r7,28(sp)
   a6b54:	1023883a 	mov	r17,r2
   a6b58:	2089883a 	add	r4,r4,r2
   a6b5c:	388f883a 	add	r7,r7,r2
   a6b60:	d9000815 	stw	r4,32(sp)
   a6b64:	d9c00715 	stw	r7,28(sp)
   a6b68:	003f0106 	br	a6770 <_dtoa_r+0xa90>
   a6b6c:	9005883a 	mov	r2,r18
   a6b70:	003ed306 	br	a66c0 <_dtoa_r+0x9e0>
   a6b74:	d8800917 	ldw	r2,36(sp)
   a6b78:	00be3516 	blt	zero,r2,a6450 <_dtoa_r+0x770>
   a6b7c:	1000b61e 	bne	r2,zero,a6e58 <_dtoa_r+0x1178>
   a6b80:	9009883a 	mov	r4,r18
   a6b84:	980b883a 	mov	r5,r19
   a6b88:	000d883a 	mov	r6,zero
   a6b8c:	01d00534 	movhi	r7,16404
   a6b90:	00aa6f40 	call	aa6f4 <__muldf3>
   a6b94:	d9800317 	ldw	r6,12(sp)
   a6b98:	1009883a 	mov	r4,r2
   a6b9c:	180b883a 	mov	r5,r3
   a6ba0:	880f883a 	mov	r7,r17
   a6ba4:	00aaca80 	call	aaca8 <__gedf2>
   a6ba8:	0029883a 	mov	r20,zero
   a6bac:	002b883a 	mov	r21,zero
   a6bb0:	10007e16 	blt	r2,zero,a6dac <_dtoa_r+0x10cc>
   a6bb4:	d8802117 	ldw	r2,132(sp)
   a6bb8:	b82d883a 	mov	r22,r23
   a6bbc:	0084303a 	nor	r2,zero,r2
   a6bc0:	d8800615 	stw	r2,24(sp)
   a6bc4:	8009883a 	mov	r4,r16
   a6bc8:	a00b883a 	mov	r5,r20
   a6bcc:	00a7e900 	call	a7e90 <_Bfree>
   a6bd0:	a83f4b1e 	bne	r21,zero,a6900 <_dtoa_r+0xc20>
   a6bd4:	003de306 	br	a6364 <_dtoa_r+0x684>
   a6bd8:	e00b883a 	mov	r5,fp
   a6bdc:	8009883a 	mov	r4,r16
   a6be0:	00a84ac0 	call	a84ac <__pow5mult>
   a6be4:	1039883a 	mov	fp,r2
   a6be8:	003ed206 	br	a6734 <_dtoa_r+0xa54>
   a6bec:	1000021e 	bne	r2,zero,a6bf8 <_dtoa_r+0xf18>
   a6bf0:	18c0004c 	andi	r3,r3,1
   a6bf4:	183f271e 	bne	r3,zero,a6894 <_dtoa_r+0xbb4>
   a6bf8:	01000c04 	movi	r4,48
   a6bfc:	00000106 	br	a6c04 <_dtoa_r+0xf24>
   a6c00:	102d883a 	mov	r22,r2
   a6c04:	b0bfffc4 	addi	r2,r22,-1
   a6c08:	10c00007 	ldb	r3,0(r2)
   a6c0c:	193ffc26 	beq	r3,r4,a6c00 <_dtoa_r+0xf20>
   a6c10:	003f3206 	br	a68dc <_dtoa_r+0xbfc>
   a6c14:	d8c00f17 	ldw	r3,60(sp)
   a6c18:	18015026 	beq	r3,zero,a715c <_dtoa_r+0x147c>
   a6c1c:	10810cc4 	addi	r2,r2,1075
   a6c20:	dcc00a17 	ldw	r19,40(sp)
   a6c24:	dc800817 	ldw	r18,32(sp)
   a6c28:	003e9706 	br	a6688 <_dtoa_r+0x9a8>
   a6c2c:	b807883a 	mov	r3,r23
   a6c30:	182b883a 	mov	r21,r3
   a6c34:	ddc00717 	ldw	r23,28(sp)
   a6c38:	00800e0e 	bge	zero,r2,a6c74 <_dtoa_r+0xf94>
   a6c3c:	e00b883a 	mov	r5,fp
   a6c40:	01800044 	movi	r6,1
   a6c44:	8009883a 	mov	r4,r16
   a6c48:	d8c01515 	stw	r3,84(sp)
   a6c4c:	00a85d80 	call	a85d8 <__lshift>
   a6c50:	1009883a 	mov	r4,r2
   a6c54:	a00b883a 	mov	r5,r20
   a6c58:	1039883a 	mov	fp,r2
   a6c5c:	00a87340 	call	a8734 <__mcmp>
   a6c60:	d8c01517 	ldw	r3,84(sp)
   a6c64:	0081880e 	bge	zero,r2,a7288 <_dtoa_r+0x15a8>
   a6c68:	00800e44 	movi	r2,57
   a6c6c:	b0c00c44 	addi	r3,r22,49
   a6c70:	a8816326 	beq	r21,r2,a7200 <_dtoa_r+0x1520>
   a6c74:	90c00005 	stb	r3,0(r18)
   a6c78:	95800044 	addi	r22,r18,1
   a6c7c:	982b883a 	mov	r21,r19
   a6c80:	003f1606 	br	a68dc <_dtoa_r+0xbfc>
   a6c84:	300b883a 	mov	r5,r6
   a6c88:	e009883a 	mov	r4,fp
   a6c8c:	d9801515 	stw	r6,84(sp)
   a6c90:	00a87340 	call	a8734 <__mcmp>
   a6c94:	d9801517 	ldw	r6,84(sp)
   a6c98:	8009883a 	mov	r4,r16
   a6c9c:	d8801515 	stw	r2,84(sp)
   a6ca0:	300b883a 	mov	r5,r6
   a6ca4:	00a7e900 	call	a7e90 <_Bfree>
   a6ca8:	d8801517 	ldw	r2,84(sp)
   a6cac:	103f6d1e 	bne	r2,zero,a6a64 <_dtoa_r+0xd84>
   a6cb0:	d9c00417 	ldw	r7,16(sp)
   a6cb4:	383f6b1e 	bne	r7,zero,a6a64 <_dtoa_r+0xd84>
   a6cb8:	d8c00317 	ldw	r3,12(sp)
   a6cbc:	183f691e 	bne	r3,zero,a6a64 <_dtoa_r+0xd84>
   a6cc0:	b807883a 	mov	r3,r23
   a6cc4:	00800e44 	movi	r2,57
   a6cc8:	ddc00717 	ldw	r23,28(sp)
   a6ccc:	18814c26 	beq	r3,r2,a7200 <_dtoa_r+0x1520>
   a6cd0:	057fe80e 	bge	zero,r21,a6c74 <_dtoa_r+0xf94>
   a6cd4:	b0c00c44 	addi	r3,r22,49
   a6cd8:	003fe606 	br	a6c74 <_dtoa_r+0xf94>
   a6cdc:	880b883a 	mov	r5,r17
   a6ce0:	8009883a 	mov	r4,r16
   a6ce4:	01800284 	movi	r6,10
   a6ce8:	000f883a 	mov	r7,zero
   a6cec:	00a7eb80 	call	a7eb8 <__multadd>
   a6cf0:	1023883a 	mov	r17,r2
   a6cf4:	1027883a 	mov	r19,r2
   a6cf8:	a825883a 	mov	r18,r21
   a6cfc:	003f4506 	br	a6a14 <_dtoa_r+0xd34>
   a6d00:	e009883a 	mov	r4,fp
   a6d04:	a00b883a 	mov	r5,r20
   a6d08:	00a87340 	call	a8734 <__mcmp>
   a6d0c:	103ebc0e 	bge	r2,zero,a6800 <_dtoa_r+0xb20>
   a6d10:	e00b883a 	mov	r5,fp
   a6d14:	8009883a 	mov	r4,r16
   a6d18:	01800284 	movi	r6,10
   a6d1c:	000f883a 	mov	r7,zero
   a6d20:	00a7eb80 	call	a7eb8 <__multadd>
   a6d24:	1039883a 	mov	fp,r2
   a6d28:	d8800617 	ldw	r2,24(sp)
   a6d2c:	d8c00c17 	ldw	r3,48(sp)
   a6d30:	10bfffc4 	addi	r2,r2,-1
   a6d34:	d8800615 	stw	r2,24(sp)
   a6d38:	1801571e 	bne	r3,zero,a7298 <_dtoa_r+0x15b8>
   a6d3c:	d9c00e17 	ldw	r7,56(sp)
   a6d40:	d9c00915 	stw	r7,36(sp)
   a6d44:	003eae06 	br	a6800 <_dtoa_r+0xb20>
   a6d48:	a0800417 	ldw	r2,16(r20)
   a6d4c:	10800104 	addi	r2,r2,4
   a6d50:	1085883a 	add	r2,r2,r2
   a6d54:	1085883a 	add	r2,r2,r2
   a6d58:	a085883a 	add	r2,r20,r2
   a6d5c:	11000017 	ldw	r4,0(r2)
   a6d60:	00a81000 	call	a8100 <__hi0bits>
   a6d64:	00c00804 	movi	r3,32
   a6d68:	1885c83a 	sub	r2,r3,r2
   a6d6c:	003e8306 	br	a677c <_dtoa_r+0xa9c>
   a6d70:	d9c00417 	ldw	r7,16(sp)
   a6d74:	00800084 	movi	r2,2
   a6d78:	11fea30e 	bge	r2,r7,a6808 <_dtoa_r+0xb28>
   a6d7c:	d8800917 	ldw	r2,36(sp)
   a6d80:	103f8c1e 	bne	r2,zero,a6bb4 <_dtoa_r+0xed4>
   a6d84:	a00b883a 	mov	r5,r20
   a6d88:	8009883a 	mov	r4,r16
   a6d8c:	01800144 	movi	r6,5
   a6d90:	000f883a 	mov	r7,zero
   a6d94:	00a7eb80 	call	a7eb8 <__multadd>
   a6d98:	e009883a 	mov	r4,fp
   a6d9c:	100b883a 	mov	r5,r2
   a6da0:	1029883a 	mov	r20,r2
   a6da4:	00a87340 	call	a8734 <__mcmp>
   a6da8:	00bf820e 	bge	zero,r2,a6bb4 <_dtoa_r+0xed4>
   a6dac:	00800c44 	movi	r2,49
   a6db0:	b8800005 	stb	r2,0(r23)
   a6db4:	d8800617 	ldw	r2,24(sp)
   a6db8:	bd800044 	addi	r22,r23,1
   a6dbc:	10800044 	addi	r2,r2,1
   a6dc0:	d8800615 	stw	r2,24(sp)
   a6dc4:	003f7f06 	br	a6bc4 <_dtoa_r+0xee4>
   a6dc8:	dc000417 	ldw	r16,16(sp)
   a6dcc:	003d6506 	br	a6364 <_dtoa_r+0x684>
   a6dd0:	9009883a 	mov	r4,r18
   a6dd4:	00aad680 	call	aad68 <__floatsidf>
   a6dd8:	1009883a 	mov	r4,r2
   a6ddc:	180b883a 	mov	r5,r3
   a6de0:	980d883a 	mov	r6,r19
   a6de4:	a00f883a 	mov	r7,r20
   a6de8:	00aa6f40 	call	aa6f4 <__muldf3>
   a6dec:	1009883a 	mov	r4,r2
   a6df0:	180b883a 	mov	r5,r3
   a6df4:	000d883a 	mov	r6,zero
   a6df8:	01d00734 	movhi	r7,16412
   a6dfc:	00aa6400 	call	aa640 <__adddf3>
   a6e00:	057f3034 	movhi	r21,64704
   a6e04:	1025883a 	mov	r18,r2
   a6e08:	1d6b883a 	add	r21,r3,r21
   a6e0c:	9809883a 	mov	r4,r19
   a6e10:	a00b883a 	mov	r5,r20
   a6e14:	000d883a 	mov	r6,zero
   a6e18:	01d00534 	movhi	r7,16404
   a6e1c:	00aa6940 	call	aa694 <__subdf3>
   a6e20:	1009883a 	mov	r4,r2
   a6e24:	180b883a 	mov	r5,r3
   a6e28:	900d883a 	mov	r6,r18
   a6e2c:	a80f883a 	mov	r7,r21
   a6e30:	1027883a 	mov	r19,r2
   a6e34:	1829883a 	mov	r20,r3
   a6e38:	00aac440 	call	aac44 <__gtdf2>
   a6e3c:	00806616 	blt	zero,r2,a6fd8 <_dtoa_r+0x12f8>
   a6e40:	a9e0003c 	xorhi	r7,r21,32768
   a6e44:	9809883a 	mov	r4,r19
   a6e48:	a00b883a 	mov	r5,r20
   a6e4c:	900d883a 	mov	r6,r18
   a6e50:	00aad0c0 	call	aad0c <__ltdf2>
   a6e54:	103d710e 	bge	r2,zero,a641c <_dtoa_r+0x73c>
   a6e58:	0029883a 	mov	r20,zero
   a6e5c:	002b883a 	mov	r21,zero
   a6e60:	003f5406 	br	a6bb4 <_dtoa_r+0xed4>
   a6e64:	d9800a17 	ldw	r6,40(sp)
   a6e68:	e00b883a 	mov	r5,fp
   a6e6c:	8009883a 	mov	r4,r16
   a6e70:	00a84ac0 	call	a84ac <__pow5mult>
   a6e74:	1039883a 	mov	fp,r2
   a6e78:	003e2e06 	br	a6734 <_dtoa_r+0xa54>
   a6e7c:	d8000c15 	stw	zero,48(sp)
   a6e80:	003f2006 	br	a6b04 <_dtoa_r+0xe24>
   a6e84:	00800044 	movi	r2,1
   a6e88:	d8800c15 	stw	r2,48(sp)
   a6e8c:	003c5d06 	br	a6004 <_dtoa_r+0x324>
   a6e90:	d8c00a17 	ldw	r3,40(sp)
   a6e94:	d9000b17 	ldw	r4,44(sp)
   a6e98:	dcc00a15 	stw	r19,40(sp)
   a6e9c:	98c5c83a 	sub	r2,r19,r3
   a6ea0:	2089883a 	add	r4,r4,r2
   a6ea4:	d9000b15 	stw	r4,44(sp)
   a6ea8:	0027883a 	mov	r19,zero
   a6eac:	003df206 	br	a6678 <_dtoa_r+0x998>
   a6eb0:	d9000317 	ldw	r4,12(sp)
   a6eb4:	8829883a 	mov	r20,r17
   a6eb8:	04800084 	movi	r18,2
   a6ebc:	d9001015 	stw	r4,64(sp)
   a6ec0:	003c8106 	br	a60c8 <_dtoa_r+0x3e8>
   a6ec4:	04800044 	movi	r18,1
   a6ec8:	dc800e15 	stw	r18,56(sp)
   a6ecc:	dc800915 	stw	r18,36(sp)
   a6ed0:	dc802115 	stw	r18,132(sp)
   a6ed4:	003f1206 	br	a6b20 <_dtoa_r+0xe40>
   a6ed8:	d8800617 	ldw	r2,24(sp)
   a6edc:	00abc83a 	sub	r21,zero,r2
   a6ee0:	a800a426 	beq	r21,zero,a7174 <_dtoa_r+0x1494>
   a6ee4:	a88003cc 	andi	r2,r21,15
   a6ee8:	100490fa 	slli	r2,r2,3
   a6eec:	00c002f4 	movhi	r3,11
   a6ef0:	18fb9104 	addi	r3,r3,-4540
   a6ef4:	d9000317 	ldw	r4,12(sp)
   a6ef8:	1885883a 	add	r2,r3,r2
   a6efc:	11800017 	ldw	r6,0(r2)
   a6f00:	11c00117 	ldw	r7,4(r2)
   a6f04:	a82bd13a 	srai	r21,r21,4
   a6f08:	880b883a 	mov	r5,r17
   a6f0c:	00aa6f40 	call	aa6f4 <__muldf3>
   a6f10:	1027883a 	mov	r19,r2
   a6f14:	1829883a 	mov	r20,r3
   a6f18:	a800e826 	beq	r21,zero,a72bc <_dtoa_r+0x15dc>
   a6f1c:	058002f4 	movhi	r22,11
   a6f20:	b5bb8704 	addi	r22,r22,-4580
   a6f24:	04800084 	movi	r18,2
   a6f28:	a980004c 	andi	r6,r21,1
   a6f2c:	1009883a 	mov	r4,r2
   a6f30:	a82bd07a 	srai	r21,r21,1
   a6f34:	180b883a 	mov	r5,r3
   a6f38:	30000426 	beq	r6,zero,a6f4c <_dtoa_r+0x126c>
   a6f3c:	b1800017 	ldw	r6,0(r22)
   a6f40:	b1c00117 	ldw	r7,4(r22)
   a6f44:	94800044 	addi	r18,r18,1
   a6f48:	00aa6f40 	call	aa6f4 <__muldf3>
   a6f4c:	b5800204 	addi	r22,r22,8
   a6f50:	a83ff51e 	bne	r21,zero,a6f28 <_dtoa_r+0x1248>
   a6f54:	1027883a 	mov	r19,r2
   a6f58:	1829883a 	mov	r20,r3
   a6f5c:	003c7306 	br	a612c <_dtoa_r+0x44c>
   a6f60:	21000044 	addi	r4,r4,1
   a6f64:	11000005 	stb	r4,0(r2)
   a6f68:	003e5c06 	br	a68dc <_dtoa_r+0xbfc>
   a6f6c:	a9400117 	ldw	r5,4(r21)
   a6f70:	8009883a 	mov	r4,r16
   a6f74:	00a7de80 	call	a7de8 <_Balloc>
   a6f78:	a9800417 	ldw	r6,16(r21)
   a6f7c:	11000304 	addi	r4,r2,12
   a6f80:	a9400304 	addi	r5,r21,12
   a6f84:	31800084 	addi	r6,r6,2
   a6f88:	318d883a 	add	r6,r6,r6
   a6f8c:	318d883a 	add	r6,r6,r6
   a6f90:	1023883a 	mov	r17,r2
   a6f94:	00a7b1c0 	call	a7b1c <memcpy>
   a6f98:	8009883a 	mov	r4,r16
   a6f9c:	880b883a 	mov	r5,r17
   a6fa0:	01800044 	movi	r6,1
   a6fa4:	00a85d80 	call	a85d8 <__lshift>
   a6fa8:	1027883a 	mov	r19,r2
   a6fac:	003e8f06 	br	a69ec <_dtoa_r+0xd0c>
   a6fb0:	b807883a 	mov	r3,r23
   a6fb4:	00800e44 	movi	r2,57
   a6fb8:	ddc00717 	ldw	r23,28(sp)
   a6fbc:	18809026 	beq	r3,r2,a7200 <_dtoa_r+0x1520>
   a6fc0:	18c00044 	addi	r3,r3,1
   a6fc4:	003f2b06 	br	a6c74 <_dtoa_r+0xf94>
   a6fc8:	b807883a 	mov	r3,r23
   a6fcc:	982b883a 	mov	r21,r19
   a6fd0:	ddc00717 	ldw	r23,28(sp)
   a6fd4:	003e2406 	br	a6868 <_dtoa_r+0xb88>
   a6fd8:	0029883a 	mov	r20,zero
   a6fdc:	002b883a 	mov	r21,zero
   a6fe0:	003f7206 	br	a6dac <_dtoa_r+0x10cc>
   a6fe4:	593fffc4 	addi	r4,r11,-1
   a6fe8:	200490fa 	slli	r2,r4,3
   a6fec:	00c002f4 	movhi	r3,11
   a6ff0:	18fb9104 	addi	r3,r3,-4540
   a6ff4:	d9001015 	stw	r4,64(sp)
   a6ff8:	1885883a 	add	r2,r3,r2
   a6ffc:	11000017 	ldw	r4,0(r2)
   a7000:	11400117 	ldw	r5,4(r2)
   a7004:	900d883a 	mov	r6,r18
   a7008:	a80f883a 	mov	r7,r21
   a700c:	dac01615 	stw	r11,88(sp)
   a7010:	00aa6f40 	call	aa6f4 <__muldf3>
   a7014:	a00b883a 	mov	r5,r20
   a7018:	9809883a 	mov	r4,r19
   a701c:	d8c01215 	stw	r3,72(sp)
   a7020:	d8801115 	stw	r2,68(sp)
   a7024:	00aae3c0 	call	aae3c <__fixdfsi>
   a7028:	1009883a 	mov	r4,r2
   a702c:	1025883a 	mov	r18,r2
   a7030:	00aad680 	call	aad68 <__floatsidf>
   a7034:	9809883a 	mov	r4,r19
   a7038:	a00b883a 	mov	r5,r20
   a703c:	100d883a 	mov	r6,r2
   a7040:	180f883a 	mov	r7,r3
   a7044:	94800c04 	addi	r18,r18,48
   a7048:	00aa6940 	call	aa694 <__subdf3>
   a704c:	bc800005 	stb	r18,0(r23)
   a7050:	dac01617 	ldw	r11,88(sp)
   a7054:	102b883a 	mov	r21,r2
   a7058:	00800044 	movi	r2,1
   a705c:	bd800044 	addi	r22,r23,1
   a7060:	1815883a 	mov	r10,r3
   a7064:	58802226 	beq	r11,r2,a70f0 <_dtoa_r+0x1410>
   a7068:	bad7883a 	add	r11,r23,r11
   a706c:	dc001415 	stw	r16,80(sp)
   a7070:	a805883a 	mov	r2,r21
   a7074:	b027883a 	mov	r19,r22
   a7078:	5821883a 	mov	r16,r11
   a707c:	882b883a 	mov	r21,r17
   a7080:	000d883a 	mov	r6,zero
   a7084:	01d00934 	movhi	r7,16420
   a7088:	1009883a 	mov	r4,r2
   a708c:	180b883a 	mov	r5,r3
   a7090:	00aa6f40 	call	aa6f4 <__muldf3>
   a7094:	180b883a 	mov	r5,r3
   a7098:	1009883a 	mov	r4,r2
   a709c:	1829883a 	mov	r20,r3
   a70a0:	1023883a 	mov	r17,r2
   a70a4:	00aae3c0 	call	aae3c <__fixdfsi>
   a70a8:	1009883a 	mov	r4,r2
   a70ac:	1025883a 	mov	r18,r2
   a70b0:	00aad680 	call	aad68 <__floatsidf>
   a70b4:	8809883a 	mov	r4,r17
   a70b8:	a00b883a 	mov	r5,r20
   a70bc:	100d883a 	mov	r6,r2
   a70c0:	180f883a 	mov	r7,r3
   a70c4:	94800c04 	addi	r18,r18,48
   a70c8:	00aa6940 	call	aa694 <__subdf3>
   a70cc:	9cc00044 	addi	r19,r19,1
   a70d0:	9cbfffc5 	stb	r18,-1(r19)
   a70d4:	9c3fea1e 	bne	r19,r16,a7080 <_dtoa_r+0x13a0>
   a70d8:	1815883a 	mov	r10,r3
   a70dc:	d8c01017 	ldw	r3,64(sp)
   a70e0:	dc001417 	ldw	r16,80(sp)
   a70e4:	a823883a 	mov	r17,r21
   a70e8:	b0ed883a 	add	r22,r22,r3
   a70ec:	102b883a 	mov	r21,r2
   a70f0:	d9001117 	ldw	r4,68(sp)
   a70f4:	d9401217 	ldw	r5,72(sp)
   a70f8:	000d883a 	mov	r6,zero
   a70fc:	01cff834 	movhi	r7,16352
   a7100:	da801515 	stw	r10,84(sp)
   a7104:	00aa6400 	call	aa640 <__adddf3>
   a7108:	da801517 	ldw	r10,84(sp)
   a710c:	1009883a 	mov	r4,r2
   a7110:	180b883a 	mov	r5,r3
   a7114:	500f883a 	mov	r7,r10
   a7118:	a80d883a 	mov	r6,r21
   a711c:	00aad0c0 	call	aad0c <__ltdf2>
   a7120:	da801517 	ldw	r10,84(sp)
   a7124:	10003b0e 	bge	r2,zero,a7214 <_dtoa_r+0x1534>
   a7128:	d9c01317 	ldw	r7,76(sp)
   a712c:	b53fffc3 	ldbu	r20,-1(r22)
   a7130:	d9c00615 	stw	r7,24(sp)
   a7134:	003d3106 	br	a65fc <_dtoa_r+0x91c>
   a7138:	d8800817 	ldw	r2,32(sp)
   a713c:	11e5c83a 	sub	r18,r2,r7
   a7140:	0005883a 	mov	r2,zero
   a7144:	003d5006 	br	a6688 <_dtoa_r+0x9a8>
   a7148:	05800044 	movi	r22,1
   a714c:	003dc406 	br	a6860 <_dtoa_r+0xb80>
   a7150:	a5000044 	addi	r20,r20,1
   a7154:	15000005 	stb	r20,0(r2)
   a7158:	003c8206 	br	a6364 <_dtoa_r+0x684>
   a715c:	d8800217 	ldw	r2,8(sp)
   a7160:	00c00d84 	movi	r3,54
   a7164:	dcc00a17 	ldw	r19,40(sp)
   a7168:	1885c83a 	sub	r2,r3,r2
   a716c:	dc800817 	ldw	r18,32(sp)
   a7170:	003d4506 	br	a6688 <_dtoa_r+0x9a8>
   a7174:	dcc00317 	ldw	r19,12(sp)
   a7178:	8829883a 	mov	r20,r17
   a717c:	04800084 	movi	r18,2
   a7180:	003bea06 	br	a612c <_dtoa_r+0x44c>
   a7184:	d9000917 	ldw	r4,36(sp)
   a7188:	203f1126 	beq	r4,zero,a6dd0 <_dtoa_r+0x10f0>
   a718c:	d9c00e17 	ldw	r7,56(sp)
   a7190:	01fca20e 	bge	zero,r7,a641c <_dtoa_r+0x73c>
   a7194:	a00b883a 	mov	r5,r20
   a7198:	9809883a 	mov	r4,r19
   a719c:	000d883a 	mov	r6,zero
   a71a0:	01d00934 	movhi	r7,16420
   a71a4:	00aa6f40 	call	aa6f4 <__muldf3>
   a71a8:	91000044 	addi	r4,r18,1
   a71ac:	1027883a 	mov	r19,r2
   a71b0:	1829883a 	mov	r20,r3
   a71b4:	00aad680 	call	aad68 <__floatsidf>
   a71b8:	9809883a 	mov	r4,r19
   a71bc:	a00b883a 	mov	r5,r20
   a71c0:	100d883a 	mov	r6,r2
   a71c4:	180f883a 	mov	r7,r3
   a71c8:	00aa6f40 	call	aa6f4 <__muldf3>
   a71cc:	1009883a 	mov	r4,r2
   a71d0:	180b883a 	mov	r5,r3
   a71d4:	000d883a 	mov	r6,zero
   a71d8:	01d00734 	movhi	r7,16412
   a71dc:	00aa6400 	call	aa640 <__adddf3>
   a71e0:	1025883a 	mov	r18,r2
   a71e4:	d8800617 	ldw	r2,24(sp)
   a71e8:	057f3034 	movhi	r21,64704
   a71ec:	1d6b883a 	add	r21,r3,r21
   a71f0:	10bfffc4 	addi	r2,r2,-1
   a71f4:	d8801315 	stw	r2,76(sp)
   a71f8:	dac00e17 	ldw	r11,56(sp)
   a71fc:	003be706 	br	a619c <_dtoa_r+0x4bc>
   a7200:	01000e44 	movi	r4,57
   a7204:	91000005 	stb	r4,0(r18)
   a7208:	95800044 	addi	r22,r18,1
   a720c:	982b883a 	mov	r21,r19
   a7210:	003da106 	br	a6898 <_dtoa_r+0xbb8>
   a7214:	d9801117 	ldw	r6,68(sp)
   a7218:	d9c01217 	ldw	r7,72(sp)
   a721c:	0009883a 	mov	r4,zero
   a7220:	014ff834 	movhi	r5,16352
   a7224:	da801515 	stw	r10,84(sp)
   a7228:	00aa6940 	call	aa694 <__subdf3>
   a722c:	da801517 	ldw	r10,84(sp)
   a7230:	1009883a 	mov	r4,r2
   a7234:	180b883a 	mov	r5,r3
   a7238:	a80d883a 	mov	r6,r21
   a723c:	500f883a 	mov	r7,r10
   a7240:	00aac440 	call	aac44 <__gtdf2>
   a7244:	00bc750e 	bge	zero,r2,a641c <_dtoa_r+0x73c>
   a7248:	01000c04 	movi	r4,48
   a724c:	00000106 	br	a7254 <_dtoa_r+0x1574>
   a7250:	102d883a 	mov	r22,r2
   a7254:	b0bfffc4 	addi	r2,r22,-1
   a7258:	10c00007 	ldb	r3,0(r2)
   a725c:	193ffc26 	beq	r3,r4,a7250 <_dtoa_r+0x1570>
   a7260:	d8801317 	ldw	r2,76(sp)
   a7264:	d8800615 	stw	r2,24(sp)
   a7268:	003c3e06 	br	a6364 <_dtoa_r+0x684>
   a726c:	d9001317 	ldw	r4,76(sp)
   a7270:	df001117 	ldw	fp,68(sp)
   a7274:	d9000615 	stw	r4,24(sp)
   a7278:	003ce006 	br	a65fc <_dtoa_r+0x91c>
   a727c:	df001117 	ldw	fp,68(sp)
   a7280:	dc401217 	ldw	r17,72(sp)
   a7284:	003c6506 	br	a641c <_dtoa_r+0x73c>
   a7288:	103e7a1e 	bne	r2,zero,a6c74 <_dtoa_r+0xf94>
   a728c:	1880004c 	andi	r2,r3,1
   a7290:	103e7826 	beq	r2,zero,a6c74 <_dtoa_r+0xf94>
   a7294:	003e7406 	br	a6c68 <_dtoa_r+0xf88>
   a7298:	8009883a 	mov	r4,r16
   a729c:	a80b883a 	mov	r5,r21
   a72a0:	01800284 	movi	r6,10
   a72a4:	000f883a 	mov	r7,zero
   a72a8:	00a7eb80 	call	a7eb8 <__multadd>
   a72ac:	d9000e17 	ldw	r4,56(sp)
   a72b0:	102b883a 	mov	r21,r2
   a72b4:	d9000915 	stw	r4,36(sp)
   a72b8:	003d5106 	br	a6800 <_dtoa_r+0xb20>
   a72bc:	04800084 	movi	r18,2
   a72c0:	003b9a06 	br	a612c <_dtoa_r+0x44c>
   a72c4:	d8c01317 	ldw	r3,76(sp)
   a72c8:	d8c00615 	stw	r3,24(sp)
   a72cc:	003ccb06 	br	a65fc <_dtoa_r+0x91c>
   a72d0:	d8c01317 	ldw	r3,76(sp)
   a72d4:	d8c00615 	stw	r3,24(sp)
   a72d8:	003c2206 	br	a6364 <_dtoa_r+0x684>
   a72dc:	20fd3826 	beq	r4,r3,a67c0 <_dtoa_r+0xae0>
   a72e0:	00c00f04 	movi	r3,60
   a72e4:	1885c83a 	sub	r2,r3,r2
   a72e8:	003da906 	br	a6990 <_dtoa_r+0xcb0>
   a72ec:	000b883a 	mov	r5,zero
   a72f0:	003b5406 	br	a6044 <_dtoa_r+0x364>
   a72f4:	04c00044 	movi	r19,1
   a72f8:	003b3b06 	br	a5fe8 <_dtoa_r+0x308>

000a72fc <__sflags>:
   a72fc:	28800007 	ldb	r2,0(r5)
   a7300:	00c01c84 	movi	r3,114
   a7304:	10c01826 	beq	r2,r3,a7368 <__sflags+0x6c>
   a7308:	00c01dc4 	movi	r3,119
   a730c:	10c01226 	beq	r2,r3,a7358 <__sflags+0x5c>
   a7310:	00c01844 	movi	r3,97
   a7314:	10c00426 	beq	r2,r3,a7328 <__sflags+0x2c>
   a7318:	00800584 	movi	r2,22
   a731c:	20800015 	stw	r2,0(r4)
   a7320:	0005883a 	mov	r2,zero
   a7324:	f800283a 	ret
   a7328:	01c08204 	movi	r7,520
   a732c:	01000044 	movi	r4,1
   a7330:	00804204 	movi	r2,264
   a7334:	28c00047 	ldb	r3,1(r5)
   a7338:	18000426 	beq	r3,zero,a734c <__sflags+0x50>
   a733c:	02000ac4 	movi	r8,43
   a7340:	1a000d26 	beq	r3,r8,a7378 <__sflags+0x7c>
   a7344:	28c00087 	ldb	r3,2(r5)
   a7348:	1a000b26 	beq	r3,r8,a7378 <__sflags+0x7c>
   a734c:	21c8b03a 	or	r4,r4,r7
   a7350:	31000015 	stw	r4,0(r6)
   a7354:	f800283a 	ret
   a7358:	01c18004 	movi	r7,1536
   a735c:	01000044 	movi	r4,1
   a7360:	00800204 	movi	r2,8
   a7364:	003ff306 	br	a7334 <__sflags+0x38>
   a7368:	000f883a 	mov	r7,zero
   a736c:	0009883a 	mov	r4,zero
   a7370:	00800104 	movi	r2,4
   a7374:	003fef06 	br	a7334 <__sflags+0x38>
   a7378:	00fff8c4 	movi	r3,-29
   a737c:	01000084 	movi	r4,2
   a7380:	10c4703a 	and	r2,r2,r3
   a7384:	21c8b03a 	or	r4,r4,r7
   a7388:	10800414 	ori	r2,r2,16
   a738c:	31000015 	stw	r4,0(r6)
   a7390:	f800283a 	ret

000a7394 <__sfvwrite_r>:
   a7394:	30800217 	ldw	r2,8(r6)
   a7398:	defff504 	addi	sp,sp,-44
   a739c:	dd400615 	stw	r21,24(sp)
   a73a0:	dd000515 	stw	r20,20(sp)
   a73a4:	dc000115 	stw	r16,4(sp)
   a73a8:	dfc00a15 	stw	ra,40(sp)
   a73ac:	df000915 	stw	fp,36(sp)
   a73b0:	ddc00815 	stw	r23,32(sp)
   a73b4:	dd800715 	stw	r22,28(sp)
   a73b8:	dcc00415 	stw	r19,16(sp)
   a73bc:	dc800315 	stw	r18,12(sp)
   a73c0:	dc400215 	stw	r17,8(sp)
   a73c4:	3029883a 	mov	r20,r6
   a73c8:	202b883a 	mov	r21,r4
   a73cc:	2821883a 	mov	r16,r5
   a73d0:	10002126 	beq	r2,zero,a7458 <__sfvwrite_r+0xc4>
   a73d4:	2880030b 	ldhu	r2,12(r5)
   a73d8:	10c0020c 	andi	r3,r2,8
   a73dc:	18ffffcc 	andi	r3,r3,65535
   a73e0:	18e0001c 	xori	r3,r3,32768
   a73e4:	18e00004 	addi	r3,r3,-32768
   a73e8:	18002826 	beq	r3,zero,a748c <__sfvwrite_r+0xf8>
   a73ec:	28c00417 	ldw	r3,16(r5)
   a73f0:	18002626 	beq	r3,zero,a748c <__sfvwrite_r+0xf8>
   a73f4:	10c0008c 	andi	r3,r2,2
   a73f8:	18ffffcc 	andi	r3,r3,65535
   a73fc:	18e0001c 	xori	r3,r3,32768
   a7400:	18e00004 	addi	r3,r3,-32768
   a7404:	a4400017 	ldw	r17,0(r20)
   a7408:	18002b26 	beq	r3,zero,a74b8 <__sfvwrite_r+0x124>
   a740c:	0027883a 	mov	r19,zero
   a7410:	0025883a 	mov	r18,zero
   a7414:	05810004 	movi	r22,1024
   a7418:	980d883a 	mov	r6,r19
   a741c:	a809883a 	mov	r4,r21
   a7420:	90004f26 	beq	r18,zero,a7560 <__sfvwrite_r+0x1cc>
   a7424:	900f883a 	mov	r7,r18
   a7428:	81400717 	ldw	r5,28(r16)
   a742c:	b480012e 	bgeu	r22,r18,a7434 <__sfvwrite_r+0xa0>
   a7430:	01c10004 	movi	r7,1024
   a7434:	80800917 	ldw	r2,36(r16)
   a7438:	103ee83a 	callr	r2
   a743c:	0080540e 	bge	zero,r2,a7590 <__sfvwrite_r+0x1fc>
   a7440:	a0c00217 	ldw	r3,8(r20)
   a7444:	98a7883a 	add	r19,r19,r2
   a7448:	90a5c83a 	sub	r18,r18,r2
   a744c:	1885c83a 	sub	r2,r3,r2
   a7450:	a0800215 	stw	r2,8(r20)
   a7454:	103ff01e 	bne	r2,zero,a7418 <__sfvwrite_r+0x84>
   a7458:	0005883a 	mov	r2,zero
   a745c:	dfc00a17 	ldw	ra,40(sp)
   a7460:	df000917 	ldw	fp,36(sp)
   a7464:	ddc00817 	ldw	r23,32(sp)
   a7468:	dd800717 	ldw	r22,28(sp)
   a746c:	dd400617 	ldw	r21,24(sp)
   a7470:	dd000517 	ldw	r20,20(sp)
   a7474:	dcc00417 	ldw	r19,16(sp)
   a7478:	dc800317 	ldw	r18,12(sp)
   a747c:	dc400217 	ldw	r17,8(sp)
   a7480:	dc000117 	ldw	r16,4(sp)
   a7484:	dec00b04 	addi	sp,sp,44
   a7488:	f800283a 	ret
   a748c:	a809883a 	mov	r4,r21
   a7490:	800b883a 	mov	r5,r16
   a7494:	00a572c0 	call	a572c <__swsetup_r>
   a7498:	1000f01e 	bne	r2,zero,a785c <__sfvwrite_r+0x4c8>
   a749c:	8080030b 	ldhu	r2,12(r16)
   a74a0:	a4400017 	ldw	r17,0(r20)
   a74a4:	10c0008c 	andi	r3,r2,2
   a74a8:	18ffffcc 	andi	r3,r3,65535
   a74ac:	18e0001c 	xori	r3,r3,32768
   a74b0:	18e00004 	addi	r3,r3,-32768
   a74b4:	183fd51e 	bne	r3,zero,a740c <__sfvwrite_r+0x78>
   a74b8:	10c0004c 	andi	r3,r2,1
   a74bc:	002d883a 	mov	r22,zero
   a74c0:	1800381e 	bne	r3,zero,a75a4 <__sfvwrite_r+0x210>
   a74c4:	0025883a 	mov	r18,zero
   a74c8:	90002126 	beq	r18,zero,a7550 <__sfvwrite_r+0x1bc>
   a74cc:	10c0800c 	andi	r3,r2,512
   a74d0:	18ffffcc 	andi	r3,r3,65535
   a74d4:	18e0001c 	xori	r3,r3,32768
   a74d8:	18e00004 	addi	r3,r3,-32768
   a74dc:	84c00217 	ldw	r19,8(r16)
   a74e0:	18006b26 	beq	r3,zero,a7690 <__sfvwrite_r+0x2fc>
   a74e4:	980f883a 	mov	r7,r19
   a74e8:	94c08636 	bltu	r18,r19,a7704 <__sfvwrite_r+0x370>
   a74ec:	10c1200c 	andi	r3,r2,1152
   a74f0:	18009f1e 	bne	r3,zero,a7770 <__sfvwrite_r+0x3dc>
   a74f4:	81000017 	ldw	r4,0(r16)
   a74f8:	982f883a 	mov	r23,r19
   a74fc:	9039883a 	mov	fp,r18
   a7500:	9027883a 	mov	r19,r18
   a7504:	380d883a 	mov	r6,r7
   a7508:	b00b883a 	mov	r5,r22
   a750c:	d9c00015 	stw	r7,0(sp)
   a7510:	00a7c5c0 	call	a7c5c <memmove>
   a7514:	d9c00017 	ldw	r7,0(sp)
   a7518:	81000217 	ldw	r4,8(r16)
   a751c:	80800017 	ldw	r2,0(r16)
   a7520:	25efc83a 	sub	r23,r4,r23
   a7524:	11cf883a 	add	r7,r2,r7
   a7528:	85c00215 	stw	r23,8(r16)
   a752c:	81c00015 	stw	r7,0(r16)
   a7530:	a0800217 	ldw	r2,8(r20)
   a7534:	b72d883a 	add	r22,r22,fp
   a7538:	9725c83a 	sub	r18,r18,fp
   a753c:	14e7c83a 	sub	r19,r2,r19
   a7540:	a4c00215 	stw	r19,8(r20)
   a7544:	983fc426 	beq	r19,zero,a7458 <__sfvwrite_r+0xc4>
   a7548:	8080030b 	ldhu	r2,12(r16)
   a754c:	903fdf1e 	bne	r18,zero,a74cc <__sfvwrite_r+0x138>
   a7550:	8d800017 	ldw	r22,0(r17)
   a7554:	8c800117 	ldw	r18,4(r17)
   a7558:	8c400204 	addi	r17,r17,8
   a755c:	003fda06 	br	a74c8 <__sfvwrite_r+0x134>
   a7560:	8cc00017 	ldw	r19,0(r17)
   a7564:	8c800117 	ldw	r18,4(r17)
   a7568:	8c400204 	addi	r17,r17,8
   a756c:	003faa06 	br	a7418 <__sfvwrite_r+0x84>
   a7570:	00a8ea40 	call	a8ea4 <_realloc_r>
   a7574:	102f883a 	mov	r23,r2
   a7578:	10009f1e 	bne	r2,zero,a77f8 <__sfvwrite_r+0x464>
   a757c:	81400417 	ldw	r5,16(r16)
   a7580:	a809883a 	mov	r4,r21
   a7584:	00a1c040 	call	a1c04 <_free_r>
   a7588:	00800304 	movi	r2,12
   a758c:	a8800015 	stw	r2,0(r21)
   a7590:	80c0030b 	ldhu	r3,12(r16)
   a7594:	00bfffc4 	movi	r2,-1
   a7598:	18c01014 	ori	r3,r3,64
   a759c:	80c0030d 	sth	r3,12(r16)
   a75a0:	003fae06 	br	a745c <__sfvwrite_r+0xc8>
   a75a4:	0007883a 	mov	r3,zero
   a75a8:	0039883a 	mov	fp,zero
   a75ac:	0025883a 	mov	r18,zero
   a75b0:	90001e26 	beq	r18,zero,a762c <__sfvwrite_r+0x298>
   a75b4:	18006526 	beq	r3,zero,a774c <__sfvwrite_r+0x3b8>
   a75b8:	b02f883a 	mov	r23,r22
   a75bc:	9580012e 	bgeu	r18,r22,a75c4 <__sfvwrite_r+0x230>
   a75c0:	902f883a 	mov	r23,r18
   a75c4:	81000017 	ldw	r4,0(r16)
   a75c8:	80800417 	ldw	r2,16(r16)
   a75cc:	84c00217 	ldw	r19,8(r16)
   a75d0:	81c00517 	ldw	r7,20(r16)
   a75d4:	1100022e 	bgeu	r2,r4,a75e0 <__sfvwrite_r+0x24c>
   a75d8:	99e7883a 	add	r19,r19,r7
   a75dc:	9dc01816 	blt	r19,r23,a7640 <__sfvwrite_r+0x2ac>
   a75e0:	b9c03b16 	blt	r23,r7,a76d0 <__sfvwrite_r+0x33c>
   a75e4:	80800917 	ldw	r2,36(r16)
   a75e8:	81400717 	ldw	r5,28(r16)
   a75ec:	a809883a 	mov	r4,r21
   a75f0:	d8c00015 	stw	r3,0(sp)
   a75f4:	e00d883a 	mov	r6,fp
   a75f8:	103ee83a 	callr	r2
   a75fc:	1027883a 	mov	r19,r2
   a7600:	d8c00017 	ldw	r3,0(sp)
   a7604:	00bfe20e 	bge	zero,r2,a7590 <__sfvwrite_r+0x1fc>
   a7608:	b4edc83a 	sub	r22,r22,r19
   a760c:	b0001a26 	beq	r22,zero,a7678 <__sfvwrite_r+0x2e4>
   a7610:	a0800217 	ldw	r2,8(r20)
   a7614:	e4f9883a 	add	fp,fp,r19
   a7618:	94e5c83a 	sub	r18,r18,r19
   a761c:	14e7c83a 	sub	r19,r2,r19
   a7620:	a4c00215 	stw	r19,8(r20)
   a7624:	983f8c26 	beq	r19,zero,a7458 <__sfvwrite_r+0xc4>
   a7628:	903fe21e 	bne	r18,zero,a75b4 <__sfvwrite_r+0x220>
   a762c:	8f000017 	ldw	fp,0(r17)
   a7630:	8c800117 	ldw	r18,4(r17)
   a7634:	0007883a 	mov	r3,zero
   a7638:	8c400204 	addi	r17,r17,8
   a763c:	003fdc06 	br	a75b0 <__sfvwrite_r+0x21c>
   a7640:	e00b883a 	mov	r5,fp
   a7644:	980d883a 	mov	r6,r19
   a7648:	d8c00015 	stw	r3,0(sp)
   a764c:	00a7c5c0 	call	a7c5c <memmove>
   a7650:	80800017 	ldw	r2,0(r16)
   a7654:	a809883a 	mov	r4,r21
   a7658:	800b883a 	mov	r5,r16
   a765c:	14c5883a 	add	r2,r2,r19
   a7660:	80800015 	stw	r2,0(r16)
   a7664:	00a13880 	call	a1388 <_fflush_r>
   a7668:	d8c00017 	ldw	r3,0(sp)
   a766c:	103fc81e 	bne	r2,zero,a7590 <__sfvwrite_r+0x1fc>
   a7670:	b4edc83a 	sub	r22,r22,r19
   a7674:	b03fe61e 	bne	r22,zero,a7610 <__sfvwrite_r+0x27c>
   a7678:	a809883a 	mov	r4,r21
   a767c:	800b883a 	mov	r5,r16
   a7680:	00a13880 	call	a1388 <_fflush_r>
   a7684:	103fc21e 	bne	r2,zero,a7590 <__sfvwrite_r+0x1fc>
   a7688:	0007883a 	mov	r3,zero
   a768c:	003fe006 	br	a7610 <__sfvwrite_r+0x27c>
   a7690:	81000017 	ldw	r4,0(r16)
   a7694:	80800417 	ldw	r2,16(r16)
   a7698:	1100022e 	bgeu	r2,r4,a76a4 <__sfvwrite_r+0x310>
   a769c:	9839883a 	mov	fp,r19
   a76a0:	9c806036 	bltu	r19,r18,a7824 <__sfvwrite_r+0x490>
   a76a4:	81c00517 	ldw	r7,20(r16)
   a76a8:	91c01c36 	bltu	r18,r7,a771c <__sfvwrite_r+0x388>
   a76ac:	80800917 	ldw	r2,36(r16)
   a76b0:	81400717 	ldw	r5,28(r16)
   a76b4:	a809883a 	mov	r4,r21
   a76b8:	b00d883a 	mov	r6,r22
   a76bc:	103ee83a 	callr	r2
   a76c0:	1027883a 	mov	r19,r2
   a76c4:	00bfb20e 	bge	zero,r2,a7590 <__sfvwrite_r+0x1fc>
   a76c8:	1039883a 	mov	fp,r2
   a76cc:	003f9806 	br	a7530 <__sfvwrite_r+0x19c>
   a76d0:	b80d883a 	mov	r6,r23
   a76d4:	e00b883a 	mov	r5,fp
   a76d8:	d8c00015 	stw	r3,0(sp)
   a76dc:	00a7c5c0 	call	a7c5c <memmove>
   a76e0:	80800217 	ldw	r2,8(r16)
   a76e4:	81000017 	ldw	r4,0(r16)
   a76e8:	b827883a 	mov	r19,r23
   a76ec:	15c5c83a 	sub	r2,r2,r23
   a76f0:	25ef883a 	add	r23,r4,r23
   a76f4:	80800215 	stw	r2,8(r16)
   a76f8:	85c00015 	stw	r23,0(r16)
   a76fc:	d8c00017 	ldw	r3,0(sp)
   a7700:	003fc106 	br	a7608 <__sfvwrite_r+0x274>
   a7704:	81000017 	ldw	r4,0(r16)
   a7708:	902f883a 	mov	r23,r18
   a770c:	9039883a 	mov	fp,r18
   a7710:	9027883a 	mov	r19,r18
   a7714:	900f883a 	mov	r7,r18
   a7718:	003f7a06 	br	a7504 <__sfvwrite_r+0x170>
   a771c:	b00b883a 	mov	r5,r22
   a7720:	900d883a 	mov	r6,r18
   a7724:	00a7c5c0 	call	a7c5c <memmove>
   a7728:	80c00217 	ldw	r3,8(r16)
   a772c:	80800017 	ldw	r2,0(r16)
   a7730:	9027883a 	mov	r19,r18
   a7734:	1c87c83a 	sub	r3,r3,r18
   a7738:	1485883a 	add	r2,r2,r18
   a773c:	80c00215 	stw	r3,8(r16)
   a7740:	80800015 	stw	r2,0(r16)
   a7744:	9039883a 	mov	fp,r18
   a7748:	003f7906 	br	a7530 <__sfvwrite_r+0x19c>
   a774c:	e009883a 	mov	r4,fp
   a7750:	01400284 	movi	r5,10
   a7754:	900d883a 	mov	r6,r18
   a7758:	00a7a240 	call	a7a24 <memchr>
   a775c:	10003c26 	beq	r2,zero,a7850 <__sfvwrite_r+0x4bc>
   a7760:	15800044 	addi	r22,r2,1
   a7764:	b72dc83a 	sub	r22,r22,fp
   a7768:	00c00044 	movi	r3,1
   a776c:	003f9206 	br	a75b8 <__sfvwrite_r+0x224>
   a7770:	81000517 	ldw	r4,20(r16)
   a7774:	81400417 	ldw	r5,16(r16)
   a7778:	80c00017 	ldw	r3,0(r16)
   a777c:	210d883a 	add	r6,r4,r4
   a7780:	3109883a 	add	r4,r6,r4
   a7784:	2026d7fa 	srli	r19,r4,31
   a7788:	1979c83a 	sub	fp,r3,r5
   a778c:	e1800044 	addi	r6,fp,1
   a7790:	9909883a 	add	r4,r19,r4
   a7794:	2027d07a 	srai	r19,r4,1
   a7798:	3489883a 	add	r4,r6,r18
   a779c:	980d883a 	mov	r6,r19
   a77a0:	9900022e 	bgeu	r19,r4,a77ac <__sfvwrite_r+0x418>
   a77a4:	2027883a 	mov	r19,r4
   a77a8:	200d883a 	mov	r6,r4
   a77ac:	1081000c 	andi	r2,r2,1024
   a77b0:	10bfffcc 	andi	r2,r2,65535
   a77b4:	10a0001c 	xori	r2,r2,32768
   a77b8:	10a00004 	addi	r2,r2,-32768
   a77bc:	a809883a 	mov	r4,r21
   a77c0:	103f6b26 	beq	r2,zero,a7570 <__sfvwrite_r+0x1dc>
   a77c4:	300b883a 	mov	r5,r6
   a77c8:	00a26dc0 	call	a26dc <_malloc_r>
   a77cc:	102f883a 	mov	r23,r2
   a77d0:	103f6d26 	beq	r2,zero,a7588 <__sfvwrite_r+0x1f4>
   a77d4:	81400417 	ldw	r5,16(r16)
   a77d8:	1009883a 	mov	r4,r2
   a77dc:	e00d883a 	mov	r6,fp
   a77e0:	00a7b1c0 	call	a7b1c <memcpy>
   a77e4:	8080030b 	ldhu	r2,12(r16)
   a77e8:	00fedfc4 	movi	r3,-1153
   a77ec:	10c4703a 	and	r2,r2,r3
   a77f0:	10802014 	ori	r2,r2,128
   a77f4:	8080030d 	sth	r2,12(r16)
   a77f8:	bf09883a 	add	r4,r23,fp
   a77fc:	9f07c83a 	sub	r3,r19,fp
   a7800:	85c00415 	stw	r23,16(r16)
   a7804:	84c00515 	stw	r19,20(r16)
   a7808:	81000015 	stw	r4,0(r16)
   a780c:	902f883a 	mov	r23,r18
   a7810:	80c00215 	stw	r3,8(r16)
   a7814:	9039883a 	mov	fp,r18
   a7818:	9027883a 	mov	r19,r18
   a781c:	900f883a 	mov	r7,r18
   a7820:	003f3806 	br	a7504 <__sfvwrite_r+0x170>
   a7824:	b00b883a 	mov	r5,r22
   a7828:	980d883a 	mov	r6,r19
   a782c:	00a7c5c0 	call	a7c5c <memmove>
   a7830:	80800017 	ldw	r2,0(r16)
   a7834:	a809883a 	mov	r4,r21
   a7838:	800b883a 	mov	r5,r16
   a783c:	14c5883a 	add	r2,r2,r19
   a7840:	80800015 	stw	r2,0(r16)
   a7844:	00a13880 	call	a1388 <_fflush_r>
   a7848:	103f3926 	beq	r2,zero,a7530 <__sfvwrite_r+0x19c>
   a784c:	003f5006 	br	a7590 <__sfvwrite_r+0x1fc>
   a7850:	95800044 	addi	r22,r18,1
   a7854:	00c00044 	movi	r3,1
   a7858:	003f5706 	br	a75b8 <__sfvwrite_r+0x224>
   a785c:	80c0030b 	ldhu	r3,12(r16)
   a7860:	00bfffc4 	movi	r2,-1
   a7864:	18c01014 	ori	r3,r3,64
   a7868:	80c0030d 	sth	r3,12(r16)
   a786c:	00c00244 	movi	r3,9
   a7870:	a8c00015 	stw	r3,0(r21)
   a7874:	003ef906 	br	a745c <__sfvwrite_r+0xc8>

000a7878 <_isatty_r>:
   a7878:	defffd04 	addi	sp,sp,-12
   a787c:	dc400115 	stw	r17,4(sp)
   a7880:	dc000015 	stw	r16,0(sp)
   a7884:	2023883a 	mov	r17,r4
   a7888:	040002f4 	movhi	r16,11
   a788c:	84097d04 	addi	r16,r16,9716
   a7890:	2809883a 	mov	r4,r5
   a7894:	dfc00215 	stw	ra,8(sp)
   a7898:	80000015 	stw	zero,0(r16)
   a789c:	00aba6c0 	call	aba6c <isatty>
   a78a0:	00ffffc4 	movi	r3,-1
   a78a4:	10c00526 	beq	r2,r3,a78bc <_isatty_r+0x44>
   a78a8:	dfc00217 	ldw	ra,8(sp)
   a78ac:	dc400117 	ldw	r17,4(sp)
   a78b0:	dc000017 	ldw	r16,0(sp)
   a78b4:	dec00304 	addi	sp,sp,12
   a78b8:	f800283a 	ret
   a78bc:	80c00017 	ldw	r3,0(r16)
   a78c0:	183ff926 	beq	r3,zero,a78a8 <_isatty_r+0x30>
   a78c4:	88c00015 	stw	r3,0(r17)
   a78c8:	dfc00217 	ldw	ra,8(sp)
   a78cc:	dc400117 	ldw	r17,4(sp)
   a78d0:	dc000017 	ldw	r16,0(sp)
   a78d4:	dec00304 	addi	sp,sp,12
   a78d8:	f800283a 	ret

000a78dc <_setlocale_r>:
   a78dc:	defffc04 	addi	sp,sp,-16
   a78e0:	dc800215 	stw	r18,8(sp)
   a78e4:	dc400115 	stw	r17,4(sp)
   a78e8:	dc000015 	stw	r16,0(sp)
   a78ec:	dfc00315 	stw	ra,12(sp)
   a78f0:	3021883a 	mov	r16,r6
   a78f4:	2023883a 	mov	r17,r4
   a78f8:	2825883a 	mov	r18,r5
   a78fc:	30001626 	beq	r6,zero,a7958 <_setlocale_r+0x7c>
   a7900:	3009883a 	mov	r4,r6
   a7904:	014002f4 	movhi	r5,11
   a7908:	297b4e04 	addi	r5,r5,-4808
   a790c:	00a95040 	call	a9504 <strcmp>
   a7910:	10000a1e 	bne	r2,zero,a793c <_setlocale_r+0x60>
   a7914:	8c800c15 	stw	r18,48(r17)
   a7918:	8c000d15 	stw	r16,52(r17)
   a791c:	008002f4 	movhi	r2,11
   a7920:	10bb4e04 	addi	r2,r2,-4808
   a7924:	dfc00317 	ldw	ra,12(sp)
   a7928:	dc800217 	ldw	r18,8(sp)
   a792c:	dc400117 	ldw	r17,4(sp)
   a7930:	dc000017 	ldw	r16,0(sp)
   a7934:	dec00404 	addi	sp,sp,16
   a7938:	f800283a 	ret
   a793c:	8009883a 	mov	r4,r16
   a7940:	014002f4 	movhi	r5,11
   a7944:	297b5804 	addi	r5,r5,-4768
   a7948:	00a95040 	call	a9504 <strcmp>
   a794c:	103ff126 	beq	r2,zero,a7914 <_setlocale_r+0x38>
   a7950:	0005883a 	mov	r2,zero
   a7954:	003ff306 	br	a7924 <_setlocale_r+0x48>
   a7958:	008002f4 	movhi	r2,11
   a795c:	10bb4e04 	addi	r2,r2,-4808
   a7960:	dfc00317 	ldw	ra,12(sp)
   a7964:	dc800217 	ldw	r18,8(sp)
   a7968:	dc400117 	ldw	r17,4(sp)
   a796c:	dc000017 	ldw	r16,0(sp)
   a7970:	dec00404 	addi	sp,sp,16
   a7974:	f800283a 	ret

000a7978 <__locale_charset>:
   a7978:	008002f4 	movhi	r2,11
   a797c:	10bb6d04 	addi	r2,r2,-4684
   a7980:	f800283a 	ret

000a7984 <_localeconv_r>:
   a7984:	008002f4 	movhi	r2,11
   a7988:	10bb7104 	addi	r2,r2,-4668
   a798c:	f800283a 	ret

000a7990 <setlocale>:
   a7990:	00c002f4 	movhi	r3,11
   a7994:	18c2a904 	addi	r3,r3,2724
   a7998:	2005883a 	mov	r2,r4
   a799c:	19000017 	ldw	r4,0(r3)
   a79a0:	280d883a 	mov	r6,r5
   a79a4:	100b883a 	mov	r5,r2
   a79a8:	00a78dc1 	jmpi	a78dc <_setlocale_r>

000a79ac <localeconv>:
   a79ac:	008002f4 	movhi	r2,11
   a79b0:	10bb7104 	addi	r2,r2,-4668
   a79b4:	f800283a 	ret

000a79b8 <_lseek_r>:
   a79b8:	defffd04 	addi	sp,sp,-12
   a79bc:	dc400115 	stw	r17,4(sp)
   a79c0:	dc000015 	stw	r16,0(sp)
   a79c4:	2023883a 	mov	r17,r4
   a79c8:	040002f4 	movhi	r16,11
   a79cc:	84097d04 	addi	r16,r16,9716
   a79d0:	2809883a 	mov	r4,r5
   a79d4:	300b883a 	mov	r5,r6
   a79d8:	380d883a 	mov	r6,r7
   a79dc:	dfc00215 	stw	ra,8(sp)
   a79e0:	80000015 	stw	zero,0(r16)
   a79e4:	00abc4c0 	call	abc4c <lseek>
   a79e8:	00ffffc4 	movi	r3,-1
   a79ec:	10c00526 	beq	r2,r3,a7a04 <_lseek_r+0x4c>
   a79f0:	dfc00217 	ldw	ra,8(sp)
   a79f4:	dc400117 	ldw	r17,4(sp)
   a79f8:	dc000017 	ldw	r16,0(sp)
   a79fc:	dec00304 	addi	sp,sp,12
   a7a00:	f800283a 	ret
   a7a04:	80c00017 	ldw	r3,0(r16)
   a7a08:	183ff926 	beq	r3,zero,a79f0 <_lseek_r+0x38>
   a7a0c:	88c00015 	stw	r3,0(r17)
   a7a10:	dfc00217 	ldw	ra,8(sp)
   a7a14:	dc400117 	ldw	r17,4(sp)
   a7a18:	dc000017 	ldw	r16,0(sp)
   a7a1c:	dec00304 	addi	sp,sp,12
   a7a20:	f800283a 	ret

000a7a24 <memchr>:
   a7a24:	008000c4 	movi	r2,3
   a7a28:	29403fcc 	andi	r5,r5,255
   a7a2c:	1180282e 	bgeu	r2,r6,a7ad0 <memchr+0xac>
   a7a30:	2086703a 	and	r3,r4,r2
   a7a34:	1800351e 	bne	r3,zero,a7b0c <memchr+0xe8>
   a7a38:	2816923a 	slli	r11,r5,8
   a7a3c:	2093883a 	add	r9,r4,r2
   a7a40:	22000084 	addi	r8,r4,2
   a7a44:	5957883a 	add	r11,r11,r5
   a7a48:	5816923a 	slli	r11,r11,8
   a7a4c:	20c00044 	addi	r3,r4,1
   a7a50:	037fbff4 	movhi	r13,65279
   a7a54:	6b7fbfc4 	addi	r13,r13,-257
   a7a58:	5957883a 	add	r11,r11,r5
   a7a5c:	5816923a 	slli	r11,r11,8
   a7a60:	03202074 	movhi	r12,32897
   a7a64:	63202004 	addi	r12,r12,-32640
   a7a68:	101d883a 	mov	r14,r2
   a7a6c:	5957883a 	add	r11,r11,r5
   a7a70:	21c00017 	ldw	r7,0(r4)
   a7a74:	31bfff04 	addi	r6,r6,-4
   a7a78:	1805883a 	mov	r2,r3
   a7a7c:	3acef03a 	xor	r7,r7,r11
   a7a80:	3b55883a 	add	r10,r7,r13
   a7a84:	01ce303a 	nor	r7,zero,r7
   a7a88:	51ce703a 	and	r7,r10,r7
   a7a8c:	3b0e703a 	and	r7,r7,r12
   a7a90:	38000a26 	beq	r7,zero,a7abc <memchr+0x98>
   a7a94:	21c00003 	ldbu	r7,0(r4)
   a7a98:	39401e26 	beq	r7,r5,a7b14 <memchr+0xf0>
   a7a9c:	19c00003 	ldbu	r7,0(r3)
   a7aa0:	39401926 	beq	r7,r5,a7b08 <memchr+0xe4>
   a7aa4:	41c00003 	ldbu	r7,0(r8)
   a7aa8:	4005883a 	mov	r2,r8
   a7aac:	39401626 	beq	r7,r5,a7b08 <memchr+0xe4>
   a7ab0:	49c00003 	ldbu	r7,0(r9)
   a7ab4:	4805883a 	mov	r2,r9
   a7ab8:	39401326 	beq	r7,r5,a7b08 <memchr+0xe4>
   a7abc:	21000104 	addi	r4,r4,4
   a7ac0:	4a400104 	addi	r9,r9,4
   a7ac4:	42000104 	addi	r8,r8,4
   a7ac8:	18c00104 	addi	r3,r3,4
   a7acc:	71bfe836 	bltu	r14,r6,a7a70 <memchr+0x4c>
   a7ad0:	2005883a 	mov	r2,r4
   a7ad4:	30000a26 	beq	r6,zero,a7b00 <memchr+0xdc>
   a7ad8:	10c00003 	ldbu	r3,0(r2)
   a7adc:	19400a26 	beq	r3,r5,a7b08 <memchr+0xe4>
   a7ae0:	10c00044 	addi	r3,r2,1
   a7ae4:	118d883a 	add	r6,r2,r6
   a7ae8:	00000306 	br	a7af8 <memchr+0xd4>
   a7aec:	11000003 	ldbu	r4,0(r2)
   a7af0:	18c00044 	addi	r3,r3,1
   a7af4:	21400426 	beq	r4,r5,a7b08 <memchr+0xe4>
   a7af8:	1805883a 	mov	r2,r3
   a7afc:	19bffb1e 	bne	r3,r6,a7aec <memchr+0xc8>
   a7b00:	0005883a 	mov	r2,zero
   a7b04:	f800283a 	ret
   a7b08:	f800283a 	ret
   a7b0c:	2005883a 	mov	r2,r4
   a7b10:	003ff106 	br	a7ad8 <memchr+0xb4>
   a7b14:	2005883a 	mov	r2,r4
   a7b18:	f800283a 	ret

000a7b1c <memcpy>:
   a7b1c:	defffb04 	addi	sp,sp,-20
   a7b20:	dc000015 	stw	r16,0(sp)
   a7b24:	dfc00415 	stw	ra,16(sp)
   a7b28:	dcc00315 	stw	r19,12(sp)
   a7b2c:	dc800215 	stw	r18,8(sp)
   a7b30:	dc400115 	stw	r17,4(sp)
   a7b34:	00c003c4 	movi	r3,15
   a7b38:	2021883a 	mov	r16,r4
   a7b3c:	3005883a 	mov	r2,r6
   a7b40:	1980032e 	bgeu	r3,r6,a7b50 <memcpy+0x34>
   a7b44:	2906b03a 	or	r3,r5,r4
   a7b48:	18c000cc 	andi	r3,r3,3
   a7b4c:	18001026 	beq	r3,zero,a7b90 <memcpy+0x74>
   a7b50:	8007883a 	mov	r3,r16
   a7b54:	288f883a 	add	r7,r5,r2
   a7b58:	10000526 	beq	r2,zero,a7b70 <memcpy+0x54>
   a7b5c:	29800003 	ldbu	r6,0(r5)
   a7b60:	18c00044 	addi	r3,r3,1
   a7b64:	29400044 	addi	r5,r5,1
   a7b68:	19bfffc5 	stb	r6,-1(r3)
   a7b6c:	29fffb1e 	bne	r5,r7,a7b5c <memcpy+0x40>
   a7b70:	8005883a 	mov	r2,r16
   a7b74:	dfc00417 	ldw	ra,16(sp)
   a7b78:	dcc00317 	ldw	r19,12(sp)
   a7b7c:	dc800217 	ldw	r18,8(sp)
   a7b80:	dc400117 	ldw	r17,4(sp)
   a7b84:	dc000017 	ldw	r16,0(sp)
   a7b88:	dec00504 	addi	sp,sp,20
   a7b8c:	f800283a 	ret
   a7b90:	32bffc04 	addi	r10,r6,-16
   a7b94:	5014d13a 	srli	r10,r10,4
   a7b98:	20800404 	addi	r2,r4,16
   a7b9c:	2007883a 	mov	r3,r4
   a7ba0:	5008913a 	slli	r4,r10,4
   a7ba4:	280f883a 	mov	r7,r5
   a7ba8:	1105883a 	add	r2,r2,r4
   a7bac:	3a000017 	ldw	r8,0(r7)
   a7bb0:	18c00404 	addi	r3,r3,16
   a7bb4:	39c00404 	addi	r7,r7,16
   a7bb8:	1a3ffc15 	stw	r8,-16(r3)
   a7bbc:	3a3ffd17 	ldw	r8,-12(r7)
   a7bc0:	1a3ffd15 	stw	r8,-12(r3)
   a7bc4:	3a3ffe17 	ldw	r8,-8(r7)
   a7bc8:	1a3ffe15 	stw	r8,-8(r3)
   a7bcc:	3a3fff17 	ldw	r8,-4(r7)
   a7bd0:	1a3fff15 	stw	r8,-4(r3)
   a7bd4:	18bff51e 	bne	r3,r2,a7bac <memcpy+0x90>
   a7bd8:	52800044 	addi	r10,r10,1
   a7bdc:	5014913a 	slli	r10,r10,4
   a7be0:	308003cc 	andi	r2,r6,15
   a7be4:	010000c4 	movi	r4,3
   a7be8:	8287883a 	add	r3,r16,r10
   a7bec:	2a95883a 	add	r10,r5,r10
   a7bf0:	2080182e 	bgeu	r4,r2,a7c54 <memcpy+0x138>
   a7bf4:	147fff04 	addi	r17,r2,-4
   a7bf8:	8808d0ba 	srli	r4,r17,2
   a7bfc:	1a400104 	addi	r9,r3,4
   a7c00:	180d883a 	mov	r6,r3
   a7c04:	2105883a 	add	r2,r4,r4
   a7c08:	1085883a 	add	r2,r2,r2
   a7c0c:	4893883a 	add	r9,r9,r2
   a7c10:	500f883a 	mov	r7,r10
   a7c14:	3a000017 	ldw	r8,0(r7)
   a7c18:	31800104 	addi	r6,r6,4
   a7c1c:	39c00104 	addi	r7,r7,4
   a7c20:	323fff15 	stw	r8,-4(r6)
   a7c24:	327ffb1e 	bne	r6,r9,a7c14 <memcpy+0xf8>
   a7c28:	20800044 	addi	r2,r4,1
   a7c2c:	1085883a 	add	r2,r2,r2
   a7c30:	1085883a 	add	r2,r2,r2
   a7c34:	017fff04 	movi	r5,-4
   a7c38:	18a5883a 	add	r18,r3,r2
   a7c3c:	50a7883a 	add	r19,r10,r2
   a7c40:	00a118c0 	call	a118c <__mulsi3>
   a7c44:	1445883a 	add	r2,r2,r17
   a7c48:	980b883a 	mov	r5,r19
   a7c4c:	9007883a 	mov	r3,r18
   a7c50:	003fc006 	br	a7b54 <memcpy+0x38>
   a7c54:	500b883a 	mov	r5,r10
   a7c58:	003fbe06 	br	a7b54 <memcpy+0x38>

000a7c5c <memmove>:
   a7c5c:	defffb04 	addi	sp,sp,-20
   a7c60:	dc000015 	stw	r16,0(sp)
   a7c64:	dfc00415 	stw	ra,16(sp)
   a7c68:	dcc00315 	stw	r19,12(sp)
   a7c6c:	dc800215 	stw	r18,8(sp)
   a7c70:	dc400115 	stw	r17,4(sp)
   a7c74:	2021883a 	mov	r16,r4
   a7c78:	300f883a 	mov	r7,r6
   a7c7c:	2900122e 	bgeu	r5,r4,a7cc8 <memmove+0x6c>
   a7c80:	2987883a 	add	r3,r5,r6
   a7c84:	20c0102e 	bgeu	r4,r3,a7cc8 <memmove+0x6c>
   a7c88:	218b883a 	add	r5,r4,r6
   a7c8c:	1989c83a 	sub	r4,r3,r6
   a7c90:	30000526 	beq	r6,zero,a7ca8 <memmove+0x4c>
   a7c94:	18ffffc4 	addi	r3,r3,-1
   a7c98:	18800003 	ldbu	r2,0(r3)
   a7c9c:	297fffc4 	addi	r5,r5,-1
   a7ca0:	28800005 	stb	r2,0(r5)
   a7ca4:	193ffb1e 	bne	r3,r4,a7c94 <memmove+0x38>
   a7ca8:	8005883a 	mov	r2,r16
   a7cac:	dfc00417 	ldw	ra,16(sp)
   a7cb0:	dcc00317 	ldw	r19,12(sp)
   a7cb4:	dc800217 	ldw	r18,8(sp)
   a7cb8:	dc400117 	ldw	r17,4(sp)
   a7cbc:	dc000017 	ldw	r16,0(sp)
   a7cc0:	dec00504 	addi	sp,sp,20
   a7cc4:	f800283a 	ret
   a7cc8:	008003c4 	movi	r2,15
   a7ccc:	1180422e 	bgeu	r2,r6,a7dd8 <memmove+0x17c>
   a7cd0:	2c04b03a 	or	r2,r5,r16
   a7cd4:	108000cc 	andi	r2,r2,3
   a7cd8:	10003f1e 	bne	r2,zero,a7dd8 <memmove+0x17c>
   a7cdc:	32bffc04 	addi	r10,r6,-16
   a7ce0:	5014d13a 	srli	r10,r10,4
   a7ce4:	81000404 	addi	r4,r16,16
   a7ce8:	8007883a 	mov	r3,r16
   a7cec:	5004913a 	slli	r2,r10,4
   a7cf0:	280f883a 	mov	r7,r5
   a7cf4:	2089883a 	add	r4,r4,r2
   a7cf8:	38800017 	ldw	r2,0(r7)
   a7cfc:	18c00404 	addi	r3,r3,16
   a7d00:	39c00404 	addi	r7,r7,16
   a7d04:	18bffc15 	stw	r2,-16(r3)
   a7d08:	38bffd17 	ldw	r2,-12(r7)
   a7d0c:	18bffd15 	stw	r2,-12(r3)
   a7d10:	38bffe17 	ldw	r2,-8(r7)
   a7d14:	18bffe15 	stw	r2,-8(r3)
   a7d18:	38bfff17 	ldw	r2,-4(r7)
   a7d1c:	18bfff15 	stw	r2,-4(r3)
   a7d20:	193ff51e 	bne	r3,r4,a7cf8 <memmove+0x9c>
   a7d24:	52800044 	addi	r10,r10,1
   a7d28:	5014913a 	slli	r10,r10,4
   a7d2c:	31c003cc 	andi	r7,r6,15
   a7d30:	008000c4 	movi	r2,3
   a7d34:	8287883a 	add	r3,r16,r10
   a7d38:	2a95883a 	add	r10,r5,r10
   a7d3c:	11c0282e 	bgeu	r2,r7,a7de0 <memmove+0x184>
   a7d40:	3c7fff04 	addi	r17,r7,-4
   a7d44:	8808d0ba 	srli	r4,r17,2
   a7d48:	1a400104 	addi	r9,r3,4
   a7d4c:	180d883a 	mov	r6,r3
   a7d50:	2105883a 	add	r2,r4,r4
   a7d54:	1085883a 	add	r2,r2,r2
   a7d58:	4893883a 	add	r9,r9,r2
   a7d5c:	5005883a 	mov	r2,r10
   a7d60:	12000017 	ldw	r8,0(r2)
   a7d64:	31800104 	addi	r6,r6,4
   a7d68:	10800104 	addi	r2,r2,4
   a7d6c:	323fff15 	stw	r8,-4(r6)
   a7d70:	327ffb1e 	bne	r6,r9,a7d60 <memmove+0x104>
   a7d74:	20800044 	addi	r2,r4,1
   a7d78:	1085883a 	add	r2,r2,r2
   a7d7c:	1085883a 	add	r2,r2,r2
   a7d80:	017fff04 	movi	r5,-4
   a7d84:	18a5883a 	add	r18,r3,r2
   a7d88:	50a7883a 	add	r19,r10,r2
   a7d8c:	00a118c0 	call	a118c <__mulsi3>
   a7d90:	144f883a 	add	r7,r2,r17
   a7d94:	980b883a 	mov	r5,r19
   a7d98:	9007883a 	mov	r3,r18
   a7d9c:	383fc226 	beq	r7,zero,a7ca8 <memmove+0x4c>
   a7da0:	19cf883a 	add	r7,r3,r7
   a7da4:	29800003 	ldbu	r6,0(r5)
   a7da8:	18c00044 	addi	r3,r3,1
   a7dac:	29400044 	addi	r5,r5,1
   a7db0:	19bfffc5 	stb	r6,-1(r3)
   a7db4:	19fffb1e 	bne	r3,r7,a7da4 <memmove+0x148>
   a7db8:	8005883a 	mov	r2,r16
   a7dbc:	dfc00417 	ldw	ra,16(sp)
   a7dc0:	dcc00317 	ldw	r19,12(sp)
   a7dc4:	dc800217 	ldw	r18,8(sp)
   a7dc8:	dc400117 	ldw	r17,4(sp)
   a7dcc:	dc000017 	ldw	r16,0(sp)
   a7dd0:	dec00504 	addi	sp,sp,20
   a7dd4:	f800283a 	ret
   a7dd8:	8007883a 	mov	r3,r16
   a7ddc:	003fef06 	br	a7d9c <memmove+0x140>
   a7de0:	500b883a 	mov	r5,r10
   a7de4:	003fed06 	br	a7d9c <memmove+0x140>

000a7de8 <_Balloc>:
   a7de8:	20801317 	ldw	r2,76(r4)
   a7dec:	defffc04 	addi	sp,sp,-16
   a7df0:	dc400115 	stw	r17,4(sp)
   a7df4:	dc000015 	stw	r16,0(sp)
   a7df8:	dfc00315 	stw	ra,12(sp)
   a7dfc:	dc800215 	stw	r18,8(sp)
   a7e00:	2023883a 	mov	r17,r4
   a7e04:	2821883a 	mov	r16,r5
   a7e08:	10000f26 	beq	r2,zero,a7e48 <_Balloc+0x60>
   a7e0c:	8407883a 	add	r3,r16,r16
   a7e10:	18c7883a 	add	r3,r3,r3
   a7e14:	10c7883a 	add	r3,r2,r3
   a7e18:	18800017 	ldw	r2,0(r3)
   a7e1c:	10001126 	beq	r2,zero,a7e64 <_Balloc+0x7c>
   a7e20:	11000017 	ldw	r4,0(r2)
   a7e24:	19000015 	stw	r4,0(r3)
   a7e28:	10000415 	stw	zero,16(r2)
   a7e2c:	10000315 	stw	zero,12(r2)
   a7e30:	dfc00317 	ldw	ra,12(sp)
   a7e34:	dc800217 	ldw	r18,8(sp)
   a7e38:	dc400117 	ldw	r17,4(sp)
   a7e3c:	dc000017 	ldw	r16,0(sp)
   a7e40:	dec00404 	addi	sp,sp,16
   a7e44:	f800283a 	ret
   a7e48:	01400104 	movi	r5,4
   a7e4c:	01800404 	movi	r6,16
   a7e50:	00a95a80 	call	a95a8 <_calloc_r>
   a7e54:	88801315 	stw	r2,76(r17)
   a7e58:	103fec1e 	bne	r2,zero,a7e0c <_Balloc+0x24>
   a7e5c:	0005883a 	mov	r2,zero
   a7e60:	003ff306 	br	a7e30 <_Balloc+0x48>
   a7e64:	01400044 	movi	r5,1
   a7e68:	2c24983a 	sll	r18,r5,r16
   a7e6c:	8809883a 	mov	r4,r17
   a7e70:	91800144 	addi	r6,r18,5
   a7e74:	318d883a 	add	r6,r6,r6
   a7e78:	318d883a 	add	r6,r6,r6
   a7e7c:	00a95a80 	call	a95a8 <_calloc_r>
   a7e80:	103ff626 	beq	r2,zero,a7e5c <_Balloc+0x74>
   a7e84:	14000115 	stw	r16,4(r2)
   a7e88:	14800215 	stw	r18,8(r2)
   a7e8c:	003fe606 	br	a7e28 <_Balloc+0x40>

000a7e90 <_Bfree>:
   a7e90:	28000826 	beq	r5,zero,a7eb4 <_Bfree+0x24>
   a7e94:	28c00117 	ldw	r3,4(r5)
   a7e98:	20801317 	ldw	r2,76(r4)
   a7e9c:	18c7883a 	add	r3,r3,r3
   a7ea0:	18c7883a 	add	r3,r3,r3
   a7ea4:	10c5883a 	add	r2,r2,r3
   a7ea8:	10c00017 	ldw	r3,0(r2)
   a7eac:	28c00015 	stw	r3,0(r5)
   a7eb0:	11400015 	stw	r5,0(r2)
   a7eb4:	f800283a 	ret

000a7eb8 <__multadd>:
   a7eb8:	defff604 	addi	sp,sp,-40
   a7ebc:	dd400515 	stw	r21,20(sp)
   a7ec0:	2d400417 	ldw	r21,16(r5)
   a7ec4:	df000815 	stw	fp,32(sp)
   a7ec8:	ddc00715 	stw	r23,28(sp)
   a7ecc:	dd800615 	stw	r22,24(sp)
   a7ed0:	dd000415 	stw	r20,16(sp)
   a7ed4:	dc400115 	stw	r17,4(sp)
   a7ed8:	dc000015 	stw	r16,0(sp)
   a7edc:	dfc00915 	stw	ra,36(sp)
   a7ee0:	dcc00315 	stw	r19,12(sp)
   a7ee4:	dc800215 	stw	r18,8(sp)
   a7ee8:	282d883a 	mov	r22,r5
   a7eec:	202f883a 	mov	r23,r4
   a7ef0:	3029883a 	mov	r20,r6
   a7ef4:	3839883a 	mov	fp,r7
   a7ef8:	2c000504 	addi	r16,r5,20
   a7efc:	0023883a 	mov	r17,zero
   a7f00:	84c00017 	ldw	r19,0(r16)
   a7f04:	a00b883a 	mov	r5,r20
   a7f08:	8c400044 	addi	r17,r17,1
   a7f0c:	993fffcc 	andi	r4,r19,65535
   a7f10:	00a118c0 	call	a118c <__mulsi3>
   a7f14:	1725883a 	add	r18,r2,fp
   a7f18:	9808d43a 	srli	r4,r19,16
   a7f1c:	9026d43a 	srli	r19,r18,16
   a7f20:	a00b883a 	mov	r5,r20
   a7f24:	00a118c0 	call	a118c <__mulsi3>
   a7f28:	988f883a 	add	r7,r19,r2
   a7f2c:	3804943a 	slli	r2,r7,16
   a7f30:	94bfffcc 	andi	r18,r18,65535
   a7f34:	3838d43a 	srli	fp,r7,16
   a7f38:	14a5883a 	add	r18,r2,r18
   a7f3c:	84800015 	stw	r18,0(r16)
   a7f40:	84000104 	addi	r16,r16,4
   a7f44:	8d7fee16 	blt	r17,r21,a7f00 <__multadd+0x48>
   a7f48:	e0000926 	beq	fp,zero,a7f70 <__multadd+0xb8>
   a7f4c:	b0800217 	ldw	r2,8(r22)
   a7f50:	a880140e 	bge	r21,r2,a7fa4 <__multadd+0xec>
   a7f54:	a8800144 	addi	r2,r21,5
   a7f58:	1085883a 	add	r2,r2,r2
   a7f5c:	1085883a 	add	r2,r2,r2
   a7f60:	b085883a 	add	r2,r22,r2
   a7f64:	ad400044 	addi	r21,r21,1
   a7f68:	17000015 	stw	fp,0(r2)
   a7f6c:	b5400415 	stw	r21,16(r22)
   a7f70:	b005883a 	mov	r2,r22
   a7f74:	dfc00917 	ldw	ra,36(sp)
   a7f78:	df000817 	ldw	fp,32(sp)
   a7f7c:	ddc00717 	ldw	r23,28(sp)
   a7f80:	dd800617 	ldw	r22,24(sp)
   a7f84:	dd400517 	ldw	r21,20(sp)
   a7f88:	dd000417 	ldw	r20,16(sp)
   a7f8c:	dcc00317 	ldw	r19,12(sp)
   a7f90:	dc800217 	ldw	r18,8(sp)
   a7f94:	dc400117 	ldw	r17,4(sp)
   a7f98:	dc000017 	ldw	r16,0(sp)
   a7f9c:	dec00a04 	addi	sp,sp,40
   a7fa0:	f800283a 	ret
   a7fa4:	b1400117 	ldw	r5,4(r22)
   a7fa8:	b809883a 	mov	r4,r23
   a7fac:	29400044 	addi	r5,r5,1
   a7fb0:	00a7de80 	call	a7de8 <_Balloc>
   a7fb4:	b1800417 	ldw	r6,16(r22)
   a7fb8:	b1400304 	addi	r5,r22,12
   a7fbc:	11000304 	addi	r4,r2,12
   a7fc0:	31800084 	addi	r6,r6,2
   a7fc4:	318d883a 	add	r6,r6,r6
   a7fc8:	318d883a 	add	r6,r6,r6
   a7fcc:	1021883a 	mov	r16,r2
   a7fd0:	00a7b1c0 	call	a7b1c <memcpy>
   a7fd4:	b0c00117 	ldw	r3,4(r22)
   a7fd8:	b8801317 	ldw	r2,76(r23)
   a7fdc:	18c7883a 	add	r3,r3,r3
   a7fe0:	18c7883a 	add	r3,r3,r3
   a7fe4:	10c5883a 	add	r2,r2,r3
   a7fe8:	10c00017 	ldw	r3,0(r2)
   a7fec:	b0c00015 	stw	r3,0(r22)
   a7ff0:	15800015 	stw	r22,0(r2)
   a7ff4:	802d883a 	mov	r22,r16
   a7ff8:	003fd606 	br	a7f54 <__multadd+0x9c>

000a7ffc <__s2b>:
   a7ffc:	defff904 	addi	sp,sp,-28
   a8000:	dd000415 	stw	r20,16(sp)
   a8004:	dc400115 	stw	r17,4(sp)
   a8008:	2829883a 	mov	r20,r5
   a800c:	2023883a 	mov	r17,r4
   a8010:	01400244 	movi	r5,9
   a8014:	39000204 	addi	r4,r7,8
   a8018:	dcc00315 	stw	r19,12(sp)
   a801c:	dc800215 	stw	r18,8(sp)
   a8020:	dfc00615 	stw	ra,24(sp)
   a8024:	dd400515 	stw	r21,20(sp)
   a8028:	dc000015 	stw	r16,0(sp)
   a802c:	3825883a 	mov	r18,r7
   a8030:	3027883a 	mov	r19,r6
   a8034:	00ab0a00 	call	ab0a0 <__divsi3>
   a8038:	00c00044 	movi	r3,1
   a803c:	000b883a 	mov	r5,zero
   a8040:	1880030e 	bge	r3,r2,a8050 <__s2b+0x54>
   a8044:	18c7883a 	add	r3,r3,r3
   a8048:	29400044 	addi	r5,r5,1
   a804c:	18bffd16 	blt	r3,r2,a8044 <__s2b+0x48>
   a8050:	8809883a 	mov	r4,r17
   a8054:	00a7de80 	call	a7de8 <_Balloc>
   a8058:	d8c00717 	ldw	r3,28(sp)
   a805c:	10c00515 	stw	r3,20(r2)
   a8060:	00c00044 	movi	r3,1
   a8064:	10c00415 	stw	r3,16(r2)
   a8068:	00c00244 	movi	r3,9
   a806c:	1cc0210e 	bge	r3,r19,a80f4 <__s2b+0xf8>
   a8070:	a0eb883a 	add	r21,r20,r3
   a8074:	a821883a 	mov	r16,r21
   a8078:	a4e9883a 	add	r20,r20,r19
   a807c:	81c00007 	ldb	r7,0(r16)
   a8080:	8809883a 	mov	r4,r17
   a8084:	84000044 	addi	r16,r16,1
   a8088:	100b883a 	mov	r5,r2
   a808c:	01800284 	movi	r6,10
   a8090:	39fff404 	addi	r7,r7,-48
   a8094:	00a7eb80 	call	a7eb8 <__multadd>
   a8098:	853ff81e 	bne	r16,r20,a807c <__s2b+0x80>
   a809c:	ace1883a 	add	r16,r21,r19
   a80a0:	843ffe04 	addi	r16,r16,-8
   a80a4:	9c800a0e 	bge	r19,r18,a80d0 <__s2b+0xd4>
   a80a8:	94e5c83a 	sub	r18,r18,r19
   a80ac:	84a5883a 	add	r18,r16,r18
   a80b0:	81c00007 	ldb	r7,0(r16)
   a80b4:	8809883a 	mov	r4,r17
   a80b8:	84000044 	addi	r16,r16,1
   a80bc:	100b883a 	mov	r5,r2
   a80c0:	01800284 	movi	r6,10
   a80c4:	39fff404 	addi	r7,r7,-48
   a80c8:	00a7eb80 	call	a7eb8 <__multadd>
   a80cc:	84bff81e 	bne	r16,r18,a80b0 <__s2b+0xb4>
   a80d0:	dfc00617 	ldw	ra,24(sp)
   a80d4:	dd400517 	ldw	r21,20(sp)
   a80d8:	dd000417 	ldw	r20,16(sp)
   a80dc:	dcc00317 	ldw	r19,12(sp)
   a80e0:	dc800217 	ldw	r18,8(sp)
   a80e4:	dc400117 	ldw	r17,4(sp)
   a80e8:	dc000017 	ldw	r16,0(sp)
   a80ec:	dec00704 	addi	sp,sp,28
   a80f0:	f800283a 	ret
   a80f4:	a4000284 	addi	r16,r20,10
   a80f8:	1827883a 	mov	r19,r3
   a80fc:	003fe906 	br	a80a4 <__s2b+0xa8>

000a8100 <__hi0bits>:
   a8100:	20bfffec 	andhi	r2,r4,65535
   a8104:	1000141e 	bne	r2,zero,a8158 <__hi0bits+0x58>
   a8108:	2008943a 	slli	r4,r4,16
   a810c:	00800404 	movi	r2,16
   a8110:	20ffc02c 	andhi	r3,r4,65280
   a8114:	1800021e 	bne	r3,zero,a8120 <__hi0bits+0x20>
   a8118:	2008923a 	slli	r4,r4,8
   a811c:	10800204 	addi	r2,r2,8
   a8120:	20fc002c 	andhi	r3,r4,61440
   a8124:	1800021e 	bne	r3,zero,a8130 <__hi0bits+0x30>
   a8128:	2008913a 	slli	r4,r4,4
   a812c:	10800104 	addi	r2,r2,4
   a8130:	20f0002c 	andhi	r3,r4,49152
   a8134:	1800031e 	bne	r3,zero,a8144 <__hi0bits+0x44>
   a8138:	2109883a 	add	r4,r4,r4
   a813c:	10800084 	addi	r2,r2,2
   a8140:	2109883a 	add	r4,r4,r4
   a8144:	20000316 	blt	r4,zero,a8154 <__hi0bits+0x54>
   a8148:	2110002c 	andhi	r4,r4,16384
   a814c:	2000041e 	bne	r4,zero,a8160 <__hi0bits+0x60>
   a8150:	00800804 	movi	r2,32
   a8154:	f800283a 	ret
   a8158:	0005883a 	mov	r2,zero
   a815c:	003fec06 	br	a8110 <__hi0bits+0x10>
   a8160:	10800044 	addi	r2,r2,1
   a8164:	f800283a 	ret

000a8168 <__lo0bits>:
   a8168:	20c00017 	ldw	r3,0(r4)
   a816c:	188001cc 	andi	r2,r3,7
   a8170:	10000826 	beq	r2,zero,a8194 <__lo0bits+0x2c>
   a8174:	1880004c 	andi	r2,r3,1
   a8178:	1000211e 	bne	r2,zero,a8200 <__lo0bits+0x98>
   a817c:	1880008c 	andi	r2,r3,2
   a8180:	1000211e 	bne	r2,zero,a8208 <__lo0bits+0xa0>
   a8184:	1806d0ba 	srli	r3,r3,2
   a8188:	00800084 	movi	r2,2
   a818c:	20c00015 	stw	r3,0(r4)
   a8190:	f800283a 	ret
   a8194:	18bfffcc 	andi	r2,r3,65535
   a8198:	10001326 	beq	r2,zero,a81e8 <__lo0bits+0x80>
   a819c:	0005883a 	mov	r2,zero
   a81a0:	19403fcc 	andi	r5,r3,255
   a81a4:	2800021e 	bne	r5,zero,a81b0 <__lo0bits+0x48>
   a81a8:	1806d23a 	srli	r3,r3,8
   a81ac:	10800204 	addi	r2,r2,8
   a81b0:	194003cc 	andi	r5,r3,15
   a81b4:	2800021e 	bne	r5,zero,a81c0 <__lo0bits+0x58>
   a81b8:	1806d13a 	srli	r3,r3,4
   a81bc:	10800104 	addi	r2,r2,4
   a81c0:	194000cc 	andi	r5,r3,3
   a81c4:	2800021e 	bne	r5,zero,a81d0 <__lo0bits+0x68>
   a81c8:	1806d0ba 	srli	r3,r3,2
   a81cc:	10800084 	addi	r2,r2,2
   a81d0:	1940004c 	andi	r5,r3,1
   a81d4:	2800081e 	bne	r5,zero,a81f8 <__lo0bits+0x90>
   a81d8:	1806d07a 	srli	r3,r3,1
   a81dc:	1800051e 	bne	r3,zero,a81f4 <__lo0bits+0x8c>
   a81e0:	00800804 	movi	r2,32
   a81e4:	f800283a 	ret
   a81e8:	1806d43a 	srli	r3,r3,16
   a81ec:	00800404 	movi	r2,16
   a81f0:	003feb06 	br	a81a0 <__lo0bits+0x38>
   a81f4:	10800044 	addi	r2,r2,1
   a81f8:	20c00015 	stw	r3,0(r4)
   a81fc:	f800283a 	ret
   a8200:	0005883a 	mov	r2,zero
   a8204:	f800283a 	ret
   a8208:	1806d07a 	srli	r3,r3,1
   a820c:	00800044 	movi	r2,1
   a8210:	20c00015 	stw	r3,0(r4)
   a8214:	f800283a 	ret

000a8218 <__i2b>:
   a8218:	defffd04 	addi	sp,sp,-12
   a821c:	dc000015 	stw	r16,0(sp)
   a8220:	04000044 	movi	r16,1
   a8224:	dc400115 	stw	r17,4(sp)
   a8228:	2823883a 	mov	r17,r5
   a822c:	800b883a 	mov	r5,r16
   a8230:	dfc00215 	stw	ra,8(sp)
   a8234:	00a7de80 	call	a7de8 <_Balloc>
   a8238:	14400515 	stw	r17,20(r2)
   a823c:	14000415 	stw	r16,16(r2)
   a8240:	dfc00217 	ldw	ra,8(sp)
   a8244:	dc400117 	ldw	r17,4(sp)
   a8248:	dc000017 	ldw	r16,0(sp)
   a824c:	dec00304 	addi	sp,sp,12
   a8250:	f800283a 	ret

000a8254 <__multiply>:
   a8254:	defff004 	addi	sp,sp,-64
   a8258:	dc800815 	stw	r18,32(sp)
   a825c:	dc400715 	stw	r17,28(sp)
   a8260:	34800417 	ldw	r18,16(r6)
   a8264:	2c400417 	ldw	r17,16(r5)
   a8268:	ddc00d15 	stw	r23,52(sp)
   a826c:	dc000615 	stw	r16,24(sp)
   a8270:	dfc00f15 	stw	ra,60(sp)
   a8274:	df000e15 	stw	fp,56(sp)
   a8278:	dd800c15 	stw	r22,48(sp)
   a827c:	dd400b15 	stw	r21,44(sp)
   a8280:	dd000a15 	stw	r20,40(sp)
   a8284:	dcc00915 	stw	r19,36(sp)
   a8288:	2821883a 	mov	r16,r5
   a828c:	302f883a 	mov	r23,r6
   a8290:	8c80050e 	bge	r17,r18,a82a8 <__multiply+0x54>
   a8294:	8807883a 	mov	r3,r17
   a8298:	3021883a 	mov	r16,r6
   a829c:	9023883a 	mov	r17,r18
   a82a0:	282f883a 	mov	r23,r5
   a82a4:	1825883a 	mov	r18,r3
   a82a8:	80800217 	ldw	r2,8(r16)
   a82ac:	8c87883a 	add	r3,r17,r18
   a82b0:	d8c00115 	stw	r3,4(sp)
   a82b4:	81400117 	ldw	r5,4(r16)
   a82b8:	10c0010e 	bge	r2,r3,a82c0 <__multiply+0x6c>
   a82bc:	29400044 	addi	r5,r5,1
   a82c0:	00a7de80 	call	a7de8 <_Balloc>
   a82c4:	d8c00117 	ldw	r3,4(sp)
   a82c8:	d8800515 	stw	r2,20(sp)
   a82cc:	14c00504 	addi	r19,r2,20
   a82d0:	1d400144 	addi	r21,r3,5
   a82d4:	ad6b883a 	add	r21,r21,r21
   a82d8:	ad6b883a 	add	r21,r21,r21
   a82dc:	156b883a 	add	r21,r2,r21
   a82e0:	dd400215 	stw	r21,8(sp)
   a82e4:	9805883a 	mov	r2,r19
   a82e8:	9d40042e 	bgeu	r19,r21,a82fc <__multiply+0xa8>
   a82ec:	d8c00217 	ldw	r3,8(sp)
   a82f0:	10000015 	stw	zero,0(r2)
   a82f4:	10800104 	addi	r2,r2,4
   a82f8:	10fffc36 	bltu	r2,r3,a82ec <__multiply+0x98>
   a82fc:	94800144 	addi	r18,r18,5
   a8300:	94a5883a 	add	r18,r18,r18
   a8304:	94ad883a 	add	r22,r18,r18
   a8308:	8c400144 	addi	r17,r17,5
   a830c:	8c63883a 	add	r17,r17,r17
   a8310:	bdad883a 	add	r22,r23,r22
   a8314:	80c00504 	addi	r3,r16,20
   a8318:	8c63883a 	add	r17,r17,r17
   a831c:	bc800504 	addi	r18,r23,20
   a8320:	dd800315 	stw	r22,12(sp)
   a8324:	d8c00415 	stw	r3,16(sp)
   a8328:	dcc00015 	stw	r19,0(sp)
   a832c:	8463883a 	add	r17,r16,r17
   a8330:	9580412e 	bgeu	r18,r22,a8438 <__multiply+0x1e4>
   a8334:	90800017 	ldw	r2,0(r18)
   a8338:	173fffcc 	andi	fp,r2,65535
   a833c:	e0001a26 	beq	fp,zero,a83a8 <__multiply+0x154>
   a8340:	dd000017 	ldw	r20,0(sp)
   a8344:	dd800417 	ldw	r22,16(sp)
   a8348:	002b883a 	mov	r21,zero
   a834c:	b4c00017 	ldw	r19,0(r22)
   a8350:	a4000017 	ldw	r16,0(r20)
   a8354:	e00b883a 	mov	r5,fp
   a8358:	993fffcc 	andi	r4,r19,65535
   a835c:	00a118c0 	call	a118c <__mulsi3>
   a8360:	9808d43a 	srli	r4,r19,16
   a8364:	817fffcc 	andi	r5,r16,65535
   a8368:	1145883a 	add	r2,r2,r5
   a836c:	e00b883a 	mov	r5,fp
   a8370:	1567883a 	add	r19,r2,r21
   a8374:	8020d43a 	srli	r16,r16,16
   a8378:	00a118c0 	call	a118c <__mulsi3>
   a837c:	9808d43a 	srli	r4,r19,16
   a8380:	1405883a 	add	r2,r2,r16
   a8384:	a4c0000d 	sth	r19,0(r20)
   a8388:	110f883a 	add	r7,r2,r4
   a838c:	a1c0008d 	sth	r7,2(r20)
   a8390:	b5800104 	addi	r22,r22,4
   a8394:	382ad43a 	srli	r21,r7,16
   a8398:	a5000104 	addi	r20,r20,4
   a839c:	b47feb36 	bltu	r22,r17,a834c <__multiply+0xf8>
   a83a0:	a5400015 	stw	r21,0(r20)
   a83a4:	90800017 	ldw	r2,0(r18)
   a83a8:	1038d43a 	srli	fp,r2,16
   a83ac:	e0001c26 	beq	fp,zero,a8420 <__multiply+0x1cc>
   a83b0:	d8c00017 	ldw	r3,0(sp)
   a83b4:	dd000417 	ldw	r20,16(sp)
   a83b8:	002b883a 	mov	r21,zero
   a83bc:	1d800017 	ldw	r22,0(r3)
   a83c0:	182f883a 	mov	r23,r3
   a83c4:	b021883a 	mov	r16,r22
   a83c8:	a4c00017 	ldw	r19,0(r20)
   a83cc:	8020d43a 	srli	r16,r16,16
   a83d0:	e00b883a 	mov	r5,fp
   a83d4:	993fffcc 	andi	r4,r19,65535
   a83d8:	00a118c0 	call	a118c <__mulsi3>
   a83dc:	1405883a 	add	r2,r2,r16
   a83e0:	9808d43a 	srli	r4,r19,16
   a83e4:	156b883a 	add	r21,r2,r21
   a83e8:	bdc00104 	addi	r23,r23,4
   a83ec:	bdbfff0d 	sth	r22,-4(r23)
   a83f0:	bd7fff8d 	sth	r21,-2(r23)
   a83f4:	bc000017 	ldw	r16,0(r23)
   a83f8:	e00b883a 	mov	r5,fp
   a83fc:	00a118c0 	call	a118c <__mulsi3>
   a8400:	a80ed43a 	srli	r7,r21,16
   a8404:	813fffcc 	andi	r4,r16,65535
   a8408:	2085883a 	add	r2,r4,r2
   a840c:	11ed883a 	add	r22,r2,r7
   a8410:	a5000104 	addi	r20,r20,4
   a8414:	b02ad43a 	srli	r21,r22,16
   a8418:	a47feb36 	bltu	r20,r17,a83c8 <__multiply+0x174>
   a841c:	bd800015 	stw	r22,0(r23)
   a8420:	d8c00017 	ldw	r3,0(sp)
   a8424:	94800104 	addi	r18,r18,4
   a8428:	18c00104 	addi	r3,r3,4
   a842c:	d8c00015 	stw	r3,0(sp)
   a8430:	d8c00317 	ldw	r3,12(sp)
   a8434:	90ffbf36 	bltu	r18,r3,a8334 <__multiply+0xe0>
   a8438:	d8c00117 	ldw	r3,4(sp)
   a843c:	00c00c0e 	bge	zero,r3,a8470 <__multiply+0x21c>
   a8440:	d8c00217 	ldw	r3,8(sp)
   a8444:	18bfff17 	ldw	r2,-4(r3)
   a8448:	1d7fff04 	addi	r21,r3,-4
   a844c:	10000326 	beq	r2,zero,a845c <__multiply+0x208>
   a8450:	00000706 	br	a8470 <__multiply+0x21c>
   a8454:	a8800017 	ldw	r2,0(r21)
   a8458:	1000051e 	bne	r2,zero,a8470 <__multiply+0x21c>
   a845c:	d8c00117 	ldw	r3,4(sp)
   a8460:	ad7fff04 	addi	r21,r21,-4
   a8464:	18ffffc4 	addi	r3,r3,-1
   a8468:	d8c00115 	stw	r3,4(sp)
   a846c:	183ff91e 	bne	r3,zero,a8454 <__multiply+0x200>
   a8470:	d8800517 	ldw	r2,20(sp)
   a8474:	d8c00117 	ldw	r3,4(sp)
   a8478:	10c00415 	stw	r3,16(r2)
   a847c:	dfc00f17 	ldw	ra,60(sp)
   a8480:	df000e17 	ldw	fp,56(sp)
   a8484:	ddc00d17 	ldw	r23,52(sp)
   a8488:	dd800c17 	ldw	r22,48(sp)
   a848c:	dd400b17 	ldw	r21,44(sp)
   a8490:	dd000a17 	ldw	r20,40(sp)
   a8494:	dcc00917 	ldw	r19,36(sp)
   a8498:	dc800817 	ldw	r18,32(sp)
   a849c:	dc400717 	ldw	r17,28(sp)
   a84a0:	dc000617 	ldw	r16,24(sp)
   a84a4:	dec01004 	addi	sp,sp,64
   a84a8:	f800283a 	ret

000a84ac <__pow5mult>:
   a84ac:	defffb04 	addi	sp,sp,-20
   a84b0:	dcc00315 	stw	r19,12(sp)
   a84b4:	dc800215 	stw	r18,8(sp)
   a84b8:	dc000015 	stw	r16,0(sp)
   a84bc:	dfc00415 	stw	ra,16(sp)
   a84c0:	dc400115 	stw	r17,4(sp)
   a84c4:	308000cc 	andi	r2,r6,3
   a84c8:	3021883a 	mov	r16,r6
   a84cc:	2027883a 	mov	r19,r4
   a84d0:	2825883a 	mov	r18,r5
   a84d4:	10002e1e 	bne	r2,zero,a8590 <__pow5mult+0xe4>
   a84d8:	8021d0ba 	srai	r16,r16,2
   a84dc:	80001a26 	beq	r16,zero,a8548 <__pow5mult+0x9c>
   a84e0:	9c401217 	ldw	r17,72(r19)
   a84e4:	8800061e 	bne	r17,zero,a8500 <__pow5mult+0x54>
   a84e8:	00003406 	br	a85bc <__pow5mult+0x110>
   a84ec:	8021d07a 	srai	r16,r16,1
   a84f0:	80001526 	beq	r16,zero,a8548 <__pow5mult+0x9c>
   a84f4:	88c00017 	ldw	r3,0(r17)
   a84f8:	18001b26 	beq	r3,zero,a8568 <__pow5mult+0xbc>
   a84fc:	1823883a 	mov	r17,r3
   a8500:	80c0004c 	andi	r3,r16,1
   a8504:	183ff926 	beq	r3,zero,a84ec <__pow5mult+0x40>
   a8508:	900b883a 	mov	r5,r18
   a850c:	880d883a 	mov	r6,r17
   a8510:	9809883a 	mov	r4,r19
   a8514:	00a82540 	call	a8254 <__multiply>
   a8518:	90001b26 	beq	r18,zero,a8588 <__pow5mult+0xdc>
   a851c:	91000117 	ldw	r4,4(r18)
   a8520:	98c01317 	ldw	r3,76(r19)
   a8524:	8021d07a 	srai	r16,r16,1
   a8528:	2109883a 	add	r4,r4,r4
   a852c:	2109883a 	add	r4,r4,r4
   a8530:	1907883a 	add	r3,r3,r4
   a8534:	19000017 	ldw	r4,0(r3)
   a8538:	91000015 	stw	r4,0(r18)
   a853c:	1c800015 	stw	r18,0(r3)
   a8540:	1025883a 	mov	r18,r2
   a8544:	803feb1e 	bne	r16,zero,a84f4 <__pow5mult+0x48>
   a8548:	9005883a 	mov	r2,r18
   a854c:	dfc00417 	ldw	ra,16(sp)
   a8550:	dcc00317 	ldw	r19,12(sp)
   a8554:	dc800217 	ldw	r18,8(sp)
   a8558:	dc400117 	ldw	r17,4(sp)
   a855c:	dc000017 	ldw	r16,0(sp)
   a8560:	dec00504 	addi	sp,sp,20
   a8564:	f800283a 	ret
   a8568:	880b883a 	mov	r5,r17
   a856c:	880d883a 	mov	r6,r17
   a8570:	9809883a 	mov	r4,r19
   a8574:	00a82540 	call	a8254 <__multiply>
   a8578:	88800015 	stw	r2,0(r17)
   a857c:	10000015 	stw	zero,0(r2)
   a8580:	1023883a 	mov	r17,r2
   a8584:	003fde06 	br	a8500 <__pow5mult+0x54>
   a8588:	1025883a 	mov	r18,r2
   a858c:	003fd706 	br	a84ec <__pow5mult+0x40>
   a8590:	10bfffc4 	addi	r2,r2,-1
   a8594:	1085883a 	add	r2,r2,r2
   a8598:	00c002f4 	movhi	r3,11
   a859c:	18fbc304 	addi	r3,r3,-4340
   a85a0:	1085883a 	add	r2,r2,r2
   a85a4:	1885883a 	add	r2,r3,r2
   a85a8:	11800017 	ldw	r6,0(r2)
   a85ac:	000f883a 	mov	r7,zero
   a85b0:	00a7eb80 	call	a7eb8 <__multadd>
   a85b4:	1025883a 	mov	r18,r2
   a85b8:	003fc706 	br	a84d8 <__pow5mult+0x2c>
   a85bc:	9809883a 	mov	r4,r19
   a85c0:	01409c44 	movi	r5,625
   a85c4:	00a82180 	call	a8218 <__i2b>
   a85c8:	98801215 	stw	r2,72(r19)
   a85cc:	1023883a 	mov	r17,r2
   a85d0:	10000015 	stw	zero,0(r2)
   a85d4:	003fca06 	br	a8500 <__pow5mult+0x54>

000a85d8 <__lshift>:
   a85d8:	defff904 	addi	sp,sp,-28
   a85dc:	dd400515 	stw	r21,20(sp)
   a85e0:	dc400115 	stw	r17,4(sp)
   a85e4:	2d400417 	ldw	r21,16(r5)
   a85e8:	3023d17a 	srai	r17,r6,5
   a85ec:	28800217 	ldw	r2,8(r5)
   a85f0:	dd000415 	stw	r20,16(sp)
   a85f4:	8d6b883a 	add	r21,r17,r21
   a85f8:	dcc00315 	stw	r19,12(sp)
   a85fc:	dc800215 	stw	r18,8(sp)
   a8600:	dc000015 	stw	r16,0(sp)
   a8604:	dfc00615 	stw	ra,24(sp)
   a8608:	ac000044 	addi	r16,r21,1
   a860c:	2825883a 	mov	r18,r5
   a8610:	3029883a 	mov	r20,r6
   a8614:	2027883a 	mov	r19,r4
   a8618:	29400117 	ldw	r5,4(r5)
   a861c:	1400030e 	bge	r2,r16,a862c <__lshift+0x54>
   a8620:	1085883a 	add	r2,r2,r2
   a8624:	29400044 	addi	r5,r5,1
   a8628:	143ffd16 	blt	r2,r16,a8620 <__lshift+0x48>
   a862c:	9809883a 	mov	r4,r19
   a8630:	00a7de80 	call	a7de8 <_Balloc>
   a8634:	10c00504 	addi	r3,r2,20
   a8638:	0440090e 	bge	zero,r17,a8660 <__lshift+0x88>
   a863c:	000f883a 	mov	r7,zero
   a8640:	18000015 	stw	zero,0(r3)
   a8644:	39c00044 	addi	r7,r7,1
   a8648:	18c00104 	addi	r3,r3,4
   a864c:	3c7ffc1e 	bne	r7,r17,a8640 <__lshift+0x68>
   a8650:	38c00144 	addi	r3,r7,5
   a8654:	18c7883a 	add	r3,r3,r3
   a8658:	18c7883a 	add	r3,r3,r3
   a865c:	10c7883a 	add	r3,r2,r3
   a8660:	92000417 	ldw	r8,16(r18)
   a8664:	a18007cc 	andi	r6,r20,31
   a8668:	91c00504 	addi	r7,r18,20
   a866c:	42000144 	addi	r8,r8,5
   a8670:	4211883a 	add	r8,r8,r8
   a8674:	4211883a 	add	r8,r8,r8
   a8678:	9211883a 	add	r8,r18,r8
   a867c:	30002226 	beq	r6,zero,a8708 <__lshift+0x130>
   a8680:	02800804 	movi	r10,32
   a8684:	5195c83a 	sub	r10,r10,r6
   a8688:	000b883a 	mov	r5,zero
   a868c:	3a400017 	ldw	r9,0(r7)
   a8690:	18c00104 	addi	r3,r3,4
   a8694:	39c00104 	addi	r7,r7,4
   a8698:	4992983a 	sll	r9,r9,r6
   a869c:	2a4ab03a 	or	r5,r5,r9
   a86a0:	197fff15 	stw	r5,-4(r3)
   a86a4:	397fff17 	ldw	r5,-4(r7)
   a86a8:	2a8ad83a 	srl	r5,r5,r10
   a86ac:	3a3ff736 	bltu	r7,r8,a868c <__lshift+0xb4>
   a86b0:	19400015 	stw	r5,0(r3)
   a86b4:	28000126 	beq	r5,zero,a86bc <__lshift+0xe4>
   a86b8:	ac000084 	addi	r16,r21,2
   a86bc:	91000117 	ldw	r4,4(r18)
   a86c0:	98c01317 	ldw	r3,76(r19)
   a86c4:	843fffc4 	addi	r16,r16,-1
   a86c8:	2109883a 	add	r4,r4,r4
   a86cc:	2109883a 	add	r4,r4,r4
   a86d0:	1907883a 	add	r3,r3,r4
   a86d4:	19000017 	ldw	r4,0(r3)
   a86d8:	14000415 	stw	r16,16(r2)
   a86dc:	91000015 	stw	r4,0(r18)
   a86e0:	1c800015 	stw	r18,0(r3)
   a86e4:	dfc00617 	ldw	ra,24(sp)
   a86e8:	dd400517 	ldw	r21,20(sp)
   a86ec:	dd000417 	ldw	r20,16(sp)
   a86f0:	dcc00317 	ldw	r19,12(sp)
   a86f4:	dc800217 	ldw	r18,8(sp)
   a86f8:	dc400117 	ldw	r17,4(sp)
   a86fc:	dc000017 	ldw	r16,0(sp)
   a8700:	dec00704 	addi	sp,sp,28
   a8704:	f800283a 	ret
   a8708:	39400017 	ldw	r5,0(r7)
   a870c:	18c00104 	addi	r3,r3,4
   a8710:	39c00104 	addi	r7,r7,4
   a8714:	197fff15 	stw	r5,-4(r3)
   a8718:	3a3fe82e 	bgeu	r7,r8,a86bc <__lshift+0xe4>
   a871c:	39400017 	ldw	r5,0(r7)
   a8720:	18c00104 	addi	r3,r3,4
   a8724:	39c00104 	addi	r7,r7,4
   a8728:	197fff15 	stw	r5,-4(r3)
   a872c:	3a3ff636 	bltu	r7,r8,a8708 <__lshift+0x130>
   a8730:	003fe206 	br	a86bc <__lshift+0xe4>

000a8734 <__mcmp>:
   a8734:	20800417 	ldw	r2,16(r4)
   a8738:	28c00417 	ldw	r3,16(r5)
   a873c:	10c5c83a 	sub	r2,r2,r3
   a8740:	10000f1e 	bne	r2,zero,a8780 <__mcmp+0x4c>
   a8744:	18c00144 	addi	r3,r3,5
   a8748:	18c7883a 	add	r3,r3,r3
   a874c:	18c7883a 	add	r3,r3,r3
   a8750:	21c00504 	addi	r7,r4,20
   a8754:	28cb883a 	add	r5,r5,r3
   a8758:	20c9883a 	add	r4,r4,r3
   a875c:	213fff04 	addi	r4,r4,-4
   a8760:	297fff04 	addi	r5,r5,-4
   a8764:	21800017 	ldw	r6,0(r4)
   a8768:	28c00017 	ldw	r3,0(r5)
   a876c:	30c0021e 	bne	r6,r3,a8778 <__mcmp+0x44>
   a8770:	393ffa36 	bltu	r7,r4,a875c <__mcmp+0x28>
   a8774:	f800283a 	ret
   a8778:	30c00236 	bltu	r6,r3,a8784 <__mcmp+0x50>
   a877c:	00800044 	movi	r2,1
   a8780:	f800283a 	ret
   a8784:	00bfffc4 	movi	r2,-1
   a8788:	f800283a 	ret

000a878c <__mdiff>:
   a878c:	defffb04 	addi	sp,sp,-20
   a8790:	dc000015 	stw	r16,0(sp)
   a8794:	2821883a 	mov	r16,r5
   a8798:	dc800215 	stw	r18,8(sp)
   a879c:	300b883a 	mov	r5,r6
   a87a0:	2025883a 	mov	r18,r4
   a87a4:	8009883a 	mov	r4,r16
   a87a8:	dc400115 	stw	r17,4(sp)
   a87ac:	dfc00415 	stw	ra,16(sp)
   a87b0:	dcc00315 	stw	r19,12(sp)
   a87b4:	3023883a 	mov	r17,r6
   a87b8:	00a87340 	call	a8734 <__mcmp>
   a87bc:	10005026 	beq	r2,zero,a8900 <__mdiff+0x174>
   a87c0:	10004a16 	blt	r2,zero,a88ec <__mdiff+0x160>
   a87c4:	0027883a 	mov	r19,zero
   a87c8:	81400117 	ldw	r5,4(r16)
   a87cc:	9009883a 	mov	r4,r18
   a87d0:	00a7de80 	call	a7de8 <_Balloc>
   a87d4:	82400417 	ldw	r9,16(r16)
   a87d8:	89800417 	ldw	r6,16(r17)
   a87dc:	14c00315 	stw	r19,12(r2)
   a87e0:	4b800144 	addi	r14,r9,5
   a87e4:	31800144 	addi	r6,r6,5
   a87e8:	739d883a 	add	r14,r14,r14
   a87ec:	318d883a 	add	r6,r6,r6
   a87f0:	739d883a 	add	r14,r14,r14
   a87f4:	318d883a 	add	r6,r6,r6
   a87f8:	81c00504 	addi	r7,r16,20
   a87fc:	839d883a 	add	r14,r16,r14
   a8800:	8a000504 	addi	r8,r17,20
   a8804:	898d883a 	add	r6,r17,r6
   a8808:	10c00504 	addi	r3,r2,20
   a880c:	0009883a 	mov	r4,zero
   a8810:	3b000017 	ldw	r12,0(r7)
   a8814:	42c00017 	ldw	r11,0(r8)
   a8818:	42000104 	addi	r8,r8,4
   a881c:	62bfffcc 	andi	r10,r12,65535
   a8820:	5b7fffcc 	andi	r13,r11,65535
   a8824:	5109883a 	add	r4,r10,r4
   a8828:	2355c83a 	sub	r10,r4,r13
   a882c:	5816d43a 	srli	r11,r11,16
   a8830:	6008d43a 	srli	r4,r12,16
   a8834:	501bd43a 	srai	r13,r10,16
   a8838:	1a80000d 	sth	r10,0(r3)
   a883c:	22c9c83a 	sub	r4,r4,r11
   a8840:	2349883a 	add	r4,r4,r13
   a8844:	1900008d 	sth	r4,2(r3)
   a8848:	39c00104 	addi	r7,r7,4
   a884c:	2009d43a 	srai	r4,r4,16
   a8850:	18c00104 	addi	r3,r3,4
   a8854:	41bfee36 	bltu	r8,r6,a8810 <__mdiff+0x84>
   a8858:	180b883a 	mov	r5,r3
   a885c:	3815883a 	mov	r10,r7
   a8860:	3b80132e 	bgeu	r7,r14,a88b0 <__mdiff+0x124>
   a8864:	3a000017 	ldw	r8,0(r7)
   a8868:	18c00104 	addi	r3,r3,4
   a886c:	39c00104 	addi	r7,r7,4
   a8870:	41bfffcc 	andi	r6,r8,65535
   a8874:	310d883a 	add	r6,r6,r4
   a8878:	3009d43a 	srai	r4,r6,16
   a887c:	4010d43a 	srli	r8,r8,16
   a8880:	19bfff0d 	sth	r6,-4(r3)
   a8884:	2209883a 	add	r4,r4,r8
   a8888:	193fff8d 	sth	r4,-2(r3)
   a888c:	2009d43a 	srai	r4,r4,16
   a8890:	3bbff436 	bltu	r7,r14,a8864 <__mdiff+0xd8>
   a8894:	0286303a 	nor	r3,zero,r10
   a8898:	1b87883a 	add	r3,r3,r14
   a889c:	1806d0ba 	srli	r3,r3,2
   a88a0:	18c00044 	addi	r3,r3,1
   a88a4:	18c7883a 	add	r3,r3,r3
   a88a8:	18c7883a 	add	r3,r3,r3
   a88ac:	28c7883a 	add	r3,r5,r3
   a88b0:	193fff17 	ldw	r4,-4(r3)
   a88b4:	18ffff04 	addi	r3,r3,-4
   a88b8:	2000041e 	bne	r4,zero,a88cc <__mdiff+0x140>
   a88bc:	18ffff04 	addi	r3,r3,-4
   a88c0:	19000017 	ldw	r4,0(r3)
   a88c4:	4a7fffc4 	addi	r9,r9,-1
   a88c8:	203ffc26 	beq	r4,zero,a88bc <__mdiff+0x130>
   a88cc:	12400415 	stw	r9,16(r2)
   a88d0:	dfc00417 	ldw	ra,16(sp)
   a88d4:	dcc00317 	ldw	r19,12(sp)
   a88d8:	dc800217 	ldw	r18,8(sp)
   a88dc:	dc400117 	ldw	r17,4(sp)
   a88e0:	dc000017 	ldw	r16,0(sp)
   a88e4:	dec00504 	addi	sp,sp,20
   a88e8:	f800283a 	ret
   a88ec:	8005883a 	mov	r2,r16
   a88f0:	04c00044 	movi	r19,1
   a88f4:	8821883a 	mov	r16,r17
   a88f8:	1023883a 	mov	r17,r2
   a88fc:	003fb206 	br	a87c8 <__mdiff+0x3c>
   a8900:	9009883a 	mov	r4,r18
   a8904:	000b883a 	mov	r5,zero
   a8908:	00a7de80 	call	a7de8 <_Balloc>
   a890c:	00c00044 	movi	r3,1
   a8910:	10c00415 	stw	r3,16(r2)
   a8914:	10000515 	stw	zero,20(r2)
   a8918:	dfc00417 	ldw	ra,16(sp)
   a891c:	dcc00317 	ldw	r19,12(sp)
   a8920:	dc800217 	ldw	r18,8(sp)
   a8924:	dc400117 	ldw	r17,4(sp)
   a8928:	dc000017 	ldw	r16,0(sp)
   a892c:	dec00504 	addi	sp,sp,20
   a8930:	f800283a 	ret

000a8934 <__ulp>:
   a8934:	295ffc2c 	andhi	r5,r5,32752
   a8938:	00bf3034 	movhi	r2,64704
   a893c:	2887883a 	add	r3,r5,r2
   a8940:	00c0020e 	bge	zero,r3,a894c <__ulp+0x18>
   a8944:	0005883a 	mov	r2,zero
   a8948:	f800283a 	ret
   a894c:	00c7c83a 	sub	r3,zero,r3
   a8950:	1805d53a 	srai	r2,r3,20
   a8954:	00c004c4 	movi	r3,19
   a8958:	18800a0e 	bge	r3,r2,a8984 <__ulp+0x50>
   a895c:	01000c84 	movi	r4,50
   a8960:	0007883a 	mov	r3,zero
   a8964:	20800516 	blt	r4,r2,a897c <__ulp+0x48>
   a8968:	01000cc4 	movi	r4,51
   a896c:	2085c83a 	sub	r2,r4,r2
   a8970:	01000044 	movi	r4,1
   a8974:	2084983a 	sll	r2,r4,r2
   a8978:	f800283a 	ret
   a897c:	00800044 	movi	r2,1
   a8980:	f800283a 	ret
   a8984:	00c00234 	movhi	r3,8
   a8988:	1887d83a 	sra	r3,r3,r2
   a898c:	0005883a 	mov	r2,zero
   a8990:	f800283a 	ret

000a8994 <__b2d>:
   a8994:	defffa04 	addi	sp,sp,-24
   a8998:	dc000015 	stw	r16,0(sp)
   a899c:	24000417 	ldw	r16,16(r4)
   a89a0:	dc400115 	stw	r17,4(sp)
   a89a4:	dcc00315 	stw	r19,12(sp)
   a89a8:	84000144 	addi	r16,r16,5
   a89ac:	8421883a 	add	r16,r16,r16
   a89b0:	8421883a 	add	r16,r16,r16
   a89b4:	2421883a 	add	r16,r4,r16
   a89b8:	847fff17 	ldw	r17,-4(r16)
   a89bc:	24c00504 	addi	r19,r4,20
   a89c0:	dd000415 	stw	r20,16(sp)
   a89c4:	8809883a 	mov	r4,r17
   a89c8:	dc800215 	stw	r18,8(sp)
   a89cc:	2829883a 	mov	r20,r5
   a89d0:	dfc00515 	stw	ra,20(sp)
   a89d4:	00a81000 	call	a8100 <__hi0bits>
   a89d8:	00c00804 	movi	r3,32
   a89dc:	1887c83a 	sub	r3,r3,r2
   a89e0:	a0c00015 	stw	r3,0(r20)
   a89e4:	00c00284 	movi	r3,10
   a89e8:	84bfff04 	addi	r18,r16,-4
   a89ec:	18801216 	blt	r3,r2,a8a38 <__b2d+0xa4>
   a89f0:	010002c4 	movi	r4,11
   a89f4:	2089c83a 	sub	r4,r4,r2
   a89f8:	8906d83a 	srl	r3,r17,r4
   a89fc:	18cffc34 	orhi	r3,r3,16368
   a8a00:	9c80322e 	bgeu	r19,r18,a8acc <__b2d+0x138>
   a8a04:	817ffe17 	ldw	r5,-8(r16)
   a8a08:	2908d83a 	srl	r4,r5,r4
   a8a0c:	10800544 	addi	r2,r2,21
   a8a10:	88a2983a 	sll	r17,r17,r2
   a8a14:	2444b03a 	or	r2,r4,r17
   a8a18:	dfc00517 	ldw	ra,20(sp)
   a8a1c:	dd000417 	ldw	r20,16(sp)
   a8a20:	dcc00317 	ldw	r19,12(sp)
   a8a24:	dc800217 	ldw	r18,8(sp)
   a8a28:	dc400117 	ldw	r17,4(sp)
   a8a2c:	dc000017 	ldw	r16,0(sp)
   a8a30:	dec00604 	addi	sp,sp,24
   a8a34:	f800283a 	ret
   a8a38:	9c801636 	bltu	r19,r18,a8a94 <__b2d+0x100>
   a8a3c:	113ffd44 	addi	r4,r2,-11
   a8a40:	000b883a 	mov	r5,zero
   a8a44:	20001726 	beq	r4,zero,a8aa4 <__b2d+0x110>
   a8a48:	00c00ac4 	movi	r3,43
   a8a4c:	1885c83a 	sub	r2,r3,r2
   a8a50:	8906983a 	sll	r3,r17,r4
   a8a54:	288cd83a 	srl	r6,r5,r2
   a8a58:	18cffc34 	orhi	r3,r3,16368
   a8a5c:	1986b03a 	or	r3,r3,r6
   a8a60:	9c801c2e 	bgeu	r19,r18,a8ad4 <__b2d+0x140>
   a8a64:	91bfff17 	ldw	r6,-4(r18)
   a8a68:	3084d83a 	srl	r2,r6,r2
   a8a6c:	2908983a 	sll	r4,r5,r4
   a8a70:	1104b03a 	or	r2,r2,r4
   a8a74:	dfc00517 	ldw	ra,20(sp)
   a8a78:	dd000417 	ldw	r20,16(sp)
   a8a7c:	dcc00317 	ldw	r19,12(sp)
   a8a80:	dc800217 	ldw	r18,8(sp)
   a8a84:	dc400117 	ldw	r17,4(sp)
   a8a88:	dc000017 	ldw	r16,0(sp)
   a8a8c:	dec00604 	addi	sp,sp,24
   a8a90:	f800283a 	ret
   a8a94:	113ffd44 	addi	r4,r2,-11
   a8a98:	84bffe04 	addi	r18,r16,-8
   a8a9c:	817ffe17 	ldw	r5,-8(r16)
   a8aa0:	203fe91e 	bne	r4,zero,a8a48 <__b2d+0xb4>
   a8aa4:	88cffc34 	orhi	r3,r17,16368
   a8aa8:	2805883a 	mov	r2,r5
   a8aac:	dfc00517 	ldw	ra,20(sp)
   a8ab0:	dd000417 	ldw	r20,16(sp)
   a8ab4:	dcc00317 	ldw	r19,12(sp)
   a8ab8:	dc800217 	ldw	r18,8(sp)
   a8abc:	dc400117 	ldw	r17,4(sp)
   a8ac0:	dc000017 	ldw	r16,0(sp)
   a8ac4:	dec00604 	addi	sp,sp,24
   a8ac8:	f800283a 	ret
   a8acc:	0009883a 	mov	r4,zero
   a8ad0:	003fce06 	br	a8a0c <__b2d+0x78>
   a8ad4:	0005883a 	mov	r2,zero
   a8ad8:	003fe406 	br	a8a6c <__b2d+0xd8>

000a8adc <__d2b>:
   a8adc:	defff804 	addi	sp,sp,-32
   a8ae0:	dc400315 	stw	r17,12(sp)
   a8ae4:	3023883a 	mov	r17,r6
   a8ae8:	dc800415 	stw	r18,16(sp)
   a8aec:	8824907a 	slli	r18,r17,1
   a8af0:	dcc00515 	stw	r19,20(sp)
   a8af4:	2827883a 	mov	r19,r5
   a8af8:	9024d57a 	srli	r18,r18,21
   a8afc:	01400044 	movi	r5,1
   a8b00:	dd000615 	stw	r20,24(sp)
   a8b04:	dc000215 	stw	r16,8(sp)
   a8b08:	dfc00715 	stw	ra,28(sp)
   a8b0c:	3829883a 	mov	r20,r7
   a8b10:	00a7de80 	call	a7de8 <_Balloc>
   a8b14:	1021883a 	mov	r16,r2
   a8b18:	00800434 	movhi	r2,16
   a8b1c:	10bfffc4 	addi	r2,r2,-1
   a8b20:	88a2703a 	and	r17,r17,r2
   a8b24:	90000126 	beq	r18,zero,a8b2c <__d2b+0x50>
   a8b28:	8c400434 	orhi	r17,r17,16
   a8b2c:	dc400015 	stw	r17,0(sp)
   a8b30:	98002226 	beq	r19,zero,a8bbc <__d2b+0xe0>
   a8b34:	d9000104 	addi	r4,sp,4
   a8b38:	dcc00115 	stw	r19,4(sp)
   a8b3c:	00a81680 	call	a8168 <__lo0bits>
   a8b40:	d8c00017 	ldw	r3,0(sp)
   a8b44:	10002d1e 	bne	r2,zero,a8bfc <__d2b+0x120>
   a8b48:	d9000117 	ldw	r4,4(sp)
   a8b4c:	81000515 	stw	r4,20(r16)
   a8b50:	1823003a 	cmpeq	r17,r3,zero
   a8b54:	01000084 	movi	r4,2
   a8b58:	2463c83a 	sub	r17,r4,r17
   a8b5c:	80c00615 	stw	r3,24(r16)
   a8b60:	84400415 	stw	r17,16(r16)
   a8b64:	90001d1e 	bne	r18,zero,a8bdc <__d2b+0x100>
   a8b68:	88c00104 	addi	r3,r17,4
   a8b6c:	18c7883a 	add	r3,r3,r3
   a8b70:	18c7883a 	add	r3,r3,r3
   a8b74:	80c7883a 	add	r3,r16,r3
   a8b78:	19000017 	ldw	r4,0(r3)
   a8b7c:	10bef384 	addi	r2,r2,-1074
   a8b80:	a0800015 	stw	r2,0(r20)
   a8b84:	00a81000 	call	a8100 <__hi0bits>
   a8b88:	8822917a 	slli	r17,r17,5
   a8b8c:	d8c00817 	ldw	r3,32(sp)
   a8b90:	8885c83a 	sub	r2,r17,r2
   a8b94:	18800015 	stw	r2,0(r3)
   a8b98:	8005883a 	mov	r2,r16
   a8b9c:	dfc00717 	ldw	ra,28(sp)
   a8ba0:	dd000617 	ldw	r20,24(sp)
   a8ba4:	dcc00517 	ldw	r19,20(sp)
   a8ba8:	dc800417 	ldw	r18,16(sp)
   a8bac:	dc400317 	ldw	r17,12(sp)
   a8bb0:	dc000217 	ldw	r16,8(sp)
   a8bb4:	dec00804 	addi	sp,sp,32
   a8bb8:	f800283a 	ret
   a8bbc:	d809883a 	mov	r4,sp
   a8bc0:	00a81680 	call	a8168 <__lo0bits>
   a8bc4:	d8c00017 	ldw	r3,0(sp)
   a8bc8:	04400044 	movi	r17,1
   a8bcc:	84400415 	stw	r17,16(r16)
   a8bd0:	80c00515 	stw	r3,20(r16)
   a8bd4:	10800804 	addi	r2,r2,32
   a8bd8:	903fe326 	beq	r18,zero,a8b68 <__d2b+0x8c>
   a8bdc:	00c00d44 	movi	r3,53
   a8be0:	94bef344 	addi	r18,r18,-1075
   a8be4:	90a5883a 	add	r18,r18,r2
   a8be8:	1885c83a 	sub	r2,r3,r2
   a8bec:	d8c00817 	ldw	r3,32(sp)
   a8bf0:	a4800015 	stw	r18,0(r20)
   a8bf4:	18800015 	stw	r2,0(r3)
   a8bf8:	003fe706 	br	a8b98 <__d2b+0xbc>
   a8bfc:	01000804 	movi	r4,32
   a8c00:	2089c83a 	sub	r4,r4,r2
   a8c04:	1908983a 	sll	r4,r3,r4
   a8c08:	d9400117 	ldw	r5,4(sp)
   a8c0c:	1886d83a 	srl	r3,r3,r2
   a8c10:	2148b03a 	or	r4,r4,r5
   a8c14:	81000515 	stw	r4,20(r16)
   a8c18:	d8c00015 	stw	r3,0(sp)
   a8c1c:	003fcc06 	br	a8b50 <__d2b+0x74>

000a8c20 <__ratio>:
   a8c20:	defff904 	addi	sp,sp,-28
   a8c24:	dc400315 	stw	r17,12(sp)
   a8c28:	2823883a 	mov	r17,r5
   a8c2c:	d9400104 	addi	r5,sp,4
   a8c30:	dfc00615 	stw	ra,24(sp)
   a8c34:	dcc00515 	stw	r19,20(sp)
   a8c38:	dc800415 	stw	r18,16(sp)
   a8c3c:	2027883a 	mov	r19,r4
   a8c40:	dc000215 	stw	r16,8(sp)
   a8c44:	00a89940 	call	a8994 <__b2d>
   a8c48:	8809883a 	mov	r4,r17
   a8c4c:	d80b883a 	mov	r5,sp
   a8c50:	1025883a 	mov	r18,r2
   a8c54:	1821883a 	mov	r16,r3
   a8c58:	00a89940 	call	a8994 <__b2d>
   a8c5c:	99400417 	ldw	r5,16(r19)
   a8c60:	89000417 	ldw	r4,16(r17)
   a8c64:	d9800117 	ldw	r6,4(sp)
   a8c68:	2909c83a 	sub	r4,r5,r4
   a8c6c:	d9400017 	ldw	r5,0(sp)
   a8c70:	2008917a 	slli	r4,r4,5
   a8c74:	314bc83a 	sub	r5,r6,r5
   a8c78:	290b883a 	add	r5,r5,r4
   a8c7c:	01400e0e 	bge	zero,r5,a8cb8 <__ratio+0x98>
   a8c80:	280a953a 	slli	r5,r5,20
   a8c84:	2c21883a 	add	r16,r5,r16
   a8c88:	9009883a 	mov	r4,r18
   a8c8c:	800b883a 	mov	r5,r16
   a8c90:	100d883a 	mov	r6,r2
   a8c94:	180f883a 	mov	r7,r3
   a8c98:	00aa9d80 	call	aa9d8 <__divdf3>
   a8c9c:	dfc00617 	ldw	ra,24(sp)
   a8ca0:	dcc00517 	ldw	r19,20(sp)
   a8ca4:	dc800417 	ldw	r18,16(sp)
   a8ca8:	dc400317 	ldw	r17,12(sp)
   a8cac:	dc000217 	ldw	r16,8(sp)
   a8cb0:	dec00704 	addi	sp,sp,28
   a8cb4:	f800283a 	ret
   a8cb8:	280a953a 	slli	r5,r5,20
   a8cbc:	1947c83a 	sub	r3,r3,r5
   a8cc0:	003ff106 	br	a8c88 <__ratio+0x68>

000a8cc4 <_mprec_log10>:
   a8cc4:	defffe04 	addi	sp,sp,-8
   a8cc8:	dc000015 	stw	r16,0(sp)
   a8ccc:	dfc00115 	stw	ra,4(sp)
   a8cd0:	008005c4 	movi	r2,23
   a8cd4:	2021883a 	mov	r16,r4
   a8cd8:	11000d0e 	bge	r2,r4,a8d10 <_mprec_log10+0x4c>
   a8cdc:	0005883a 	mov	r2,zero
   a8ce0:	00cffc34 	movhi	r3,16368
   a8ce4:	843fffc4 	addi	r16,r16,-1
   a8ce8:	1009883a 	mov	r4,r2
   a8cec:	180b883a 	mov	r5,r3
   a8cf0:	000d883a 	mov	r6,zero
   a8cf4:	01d00934 	movhi	r7,16420
   a8cf8:	00aa6f40 	call	aa6f4 <__muldf3>
   a8cfc:	803ff91e 	bne	r16,zero,a8ce4 <_mprec_log10+0x20>
   a8d00:	dfc00117 	ldw	ra,4(sp)
   a8d04:	dc000017 	ldw	r16,0(sp)
   a8d08:	dec00204 	addi	sp,sp,8
   a8d0c:	f800283a 	ret
   a8d10:	202090fa 	slli	r16,r4,3
   a8d14:	008002f4 	movhi	r2,11
   a8d18:	10bb9104 	addi	r2,r2,-4540
   a8d1c:	1421883a 	add	r16,r2,r16
   a8d20:	80800017 	ldw	r2,0(r16)
   a8d24:	80c00117 	ldw	r3,4(r16)
   a8d28:	dfc00117 	ldw	ra,4(sp)
   a8d2c:	dc000017 	ldw	r16,0(sp)
   a8d30:	dec00204 	addi	sp,sp,8
   a8d34:	f800283a 	ret

000a8d38 <__copybits>:
   a8d38:	297fffc4 	addi	r5,r5,-1
   a8d3c:	31c00417 	ldw	r7,16(r6)
   a8d40:	2811d17a 	srai	r8,r5,5
   a8d44:	30800504 	addi	r2,r6,20
   a8d48:	39c00144 	addi	r7,r7,5
   a8d4c:	42000044 	addi	r8,r8,1
   a8d50:	39cf883a 	add	r7,r7,r7
   a8d54:	4211883a 	add	r8,r8,r8
   a8d58:	39cf883a 	add	r7,r7,r7
   a8d5c:	4211883a 	add	r8,r8,r8
   a8d60:	31cf883a 	add	r7,r6,r7
   a8d64:	2211883a 	add	r8,r4,r8
   a8d68:	11c00d2e 	bgeu	r2,r7,a8da0 <__copybits+0x68>
   a8d6c:	2007883a 	mov	r3,r4
   a8d70:	11400017 	ldw	r5,0(r2)
   a8d74:	18c00104 	addi	r3,r3,4
   a8d78:	10800104 	addi	r2,r2,4
   a8d7c:	197fff15 	stw	r5,-4(r3)
   a8d80:	11fffb36 	bltu	r2,r7,a8d70 <__copybits+0x38>
   a8d84:	3985c83a 	sub	r2,r7,r6
   a8d88:	10bffac4 	addi	r2,r2,-21
   a8d8c:	1004d0ba 	srli	r2,r2,2
   a8d90:	10800044 	addi	r2,r2,1
   a8d94:	1085883a 	add	r2,r2,r2
   a8d98:	1085883a 	add	r2,r2,r2
   a8d9c:	2089883a 	add	r4,r4,r2
   a8da0:	2200032e 	bgeu	r4,r8,a8db0 <__copybits+0x78>
   a8da4:	20000015 	stw	zero,0(r4)
   a8da8:	21000104 	addi	r4,r4,4
   a8dac:	223ffd36 	bltu	r4,r8,a8da4 <__copybits+0x6c>
   a8db0:	f800283a 	ret

000a8db4 <__any_on>:
   a8db4:	21800417 	ldw	r6,16(r4)
   a8db8:	2805d17a 	srai	r2,r5,5
   a8dbc:	20c00504 	addi	r3,r4,20
   a8dc0:	30800f0e 	bge	r6,r2,a8e00 <__any_on+0x4c>
   a8dc4:	3005883a 	mov	r2,r6
   a8dc8:	10800144 	addi	r2,r2,5
   a8dcc:	1085883a 	add	r2,r2,r2
   a8dd0:	1085883a 	add	r2,r2,r2
   a8dd4:	2089883a 	add	r4,r4,r2
   a8dd8:	1900152e 	bgeu	r3,r4,a8e30 <__any_on+0x7c>
   a8ddc:	20bfff17 	ldw	r2,-4(r4)
   a8de0:	213fff04 	addi	r4,r4,-4
   a8de4:	1000041e 	bne	r2,zero,a8df8 <__any_on+0x44>
   a8de8:	1900112e 	bgeu	r3,r4,a8e30 <__any_on+0x7c>
   a8dec:	213fff04 	addi	r4,r4,-4
   a8df0:	20800017 	ldw	r2,0(r4)
   a8df4:	103ffc26 	beq	r2,zero,a8de8 <__any_on+0x34>
   a8df8:	00800044 	movi	r2,1
   a8dfc:	f800283a 	ret
   a8e00:	11bff10e 	bge	r2,r6,a8dc8 <__any_on+0x14>
   a8e04:	294007cc 	andi	r5,r5,31
   a8e08:	283fef26 	beq	r5,zero,a8dc8 <__any_on+0x14>
   a8e0c:	11800144 	addi	r6,r2,5
   a8e10:	318d883a 	add	r6,r6,r6
   a8e14:	318d883a 	add	r6,r6,r6
   a8e18:	218d883a 	add	r6,r4,r6
   a8e1c:	31800017 	ldw	r6,0(r6)
   a8e20:	314ed83a 	srl	r7,r6,r5
   a8e24:	394a983a 	sll	r5,r7,r5
   a8e28:	29bff31e 	bne	r5,r6,a8df8 <__any_on+0x44>
   a8e2c:	003fe606 	br	a8dc8 <__any_on+0x14>
   a8e30:	0005883a 	mov	r2,zero
   a8e34:	f800283a 	ret

000a8e38 <_read_r>:
   a8e38:	defffd04 	addi	sp,sp,-12
   a8e3c:	dc400115 	stw	r17,4(sp)
   a8e40:	dc000015 	stw	r16,0(sp)
   a8e44:	2023883a 	mov	r17,r4
   a8e48:	040002f4 	movhi	r16,11
   a8e4c:	84097d04 	addi	r16,r16,9716
   a8e50:	2809883a 	mov	r4,r5
   a8e54:	300b883a 	mov	r5,r6
   a8e58:	380d883a 	mov	r6,r7
   a8e5c:	dfc00215 	stw	ra,8(sp)
   a8e60:	80000015 	stw	zero,0(r16)
   a8e64:	00ac0c00 	call	ac0c0 <read>
   a8e68:	00ffffc4 	movi	r3,-1
   a8e6c:	10c00526 	beq	r2,r3,a8e84 <_read_r+0x4c>
   a8e70:	dfc00217 	ldw	ra,8(sp)
   a8e74:	dc400117 	ldw	r17,4(sp)
   a8e78:	dc000017 	ldw	r16,0(sp)
   a8e7c:	dec00304 	addi	sp,sp,12
   a8e80:	f800283a 	ret
   a8e84:	80c00017 	ldw	r3,0(r16)
   a8e88:	183ff926 	beq	r3,zero,a8e70 <_read_r+0x38>
   a8e8c:	88c00015 	stw	r3,0(r17)
   a8e90:	dfc00217 	ldw	ra,8(sp)
   a8e94:	dc400117 	ldw	r17,4(sp)
   a8e98:	dc000017 	ldw	r16,0(sp)
   a8e9c:	dec00304 	addi	sp,sp,12
   a8ea0:	f800283a 	ret

000a8ea4 <_realloc_r>:
   a8ea4:	defff504 	addi	sp,sp,-44
   a8ea8:	dd400615 	stw	r21,24(sp)
   a8eac:	dc800315 	stw	r18,12(sp)
   a8eb0:	dc000115 	stw	r16,4(sp)
   a8eb4:	dfc00a15 	stw	ra,40(sp)
   a8eb8:	df000915 	stw	fp,36(sp)
   a8ebc:	ddc00815 	stw	r23,32(sp)
   a8ec0:	dd800715 	stw	r22,28(sp)
   a8ec4:	dd000515 	stw	r20,20(sp)
   a8ec8:	dcc00415 	stw	r19,16(sp)
   a8ecc:	dc400215 	stw	r17,8(sp)
   a8ed0:	2821883a 	mov	r16,r5
   a8ed4:	202b883a 	mov	r21,r4
   a8ed8:	3025883a 	mov	r18,r6
   a8edc:	28009626 	beq	r5,zero,a9138 <_realloc_r+0x294>
   a8ee0:	00abd980 	call	abd98 <__malloc_lock>
   a8ee4:	80bfff17 	ldw	r2,-4(r16)
   a8ee8:	04ffff04 	movi	r19,-4
   a8eec:	90c002c4 	addi	r3,r18,11
   a8ef0:	01000584 	movi	r4,22
   a8ef4:	85bffe04 	addi	r22,r16,-8
   a8ef8:	14e6703a 	and	r19,r2,r19
   a8efc:	20c0372e 	bgeu	r4,r3,a8fdc <_realloc_r+0x138>
   a8f00:	047ffe04 	movi	r17,-8
   a8f04:	1c62703a 	and	r17,r3,r17
   a8f08:	8807883a 	mov	r3,r17
   a8f0c:	88005a16 	blt	r17,zero,a9078 <_realloc_r+0x1d4>
   a8f10:	8c805936 	bltu	r17,r18,a9078 <_realloc_r+0x1d4>
   a8f14:	98c0340e 	bge	r19,r3,a8fe8 <_realloc_r+0x144>
   a8f18:	070002f4 	movhi	fp,11
   a8f1c:	e73d1704 	addi	fp,fp,-2980
   a8f20:	e1400217 	ldw	r5,8(fp)
   a8f24:	b4c9883a 	add	r4,r22,r19
   a8f28:	29009026 	beq	r5,r4,a916c <_realloc_r+0x2c8>
   a8f2c:	21800117 	ldw	r6,4(r4)
   a8f30:	01ffff84 	movi	r7,-2
   a8f34:	31ce703a 	and	r7,r6,r7
   a8f38:	21cf883a 	add	r7,r4,r7
   a8f3c:	39c00117 	ldw	r7,4(r7)
   a8f40:	39c0004c 	andi	r7,r7,1
   a8f44:	38004326 	beq	r7,zero,a9054 <_realloc_r+0x1b0>
   a8f48:	000d883a 	mov	r6,zero
   a8f4c:	0009883a 	mov	r4,zero
   a8f50:	1080004c 	andi	r2,r2,1
   a8f54:	10005a1e 	bne	r2,zero,a90c0 <_realloc_r+0x21c>
   a8f58:	85fffe17 	ldw	r23,-8(r16)
   a8f5c:	00bfff04 	movi	r2,-4
   a8f60:	b5efc83a 	sub	r23,r22,r23
   a8f64:	b9c00117 	ldw	r7,4(r23)
   a8f68:	388e703a 	and	r7,r7,r2
   a8f6c:	3ccf883a 	add	r7,r7,r19
   a8f70:	20005226 	beq	r4,zero,a90bc <_realloc_r+0x218>
   a8f74:	31e9883a 	add	r20,r6,r7
   a8f78:	2140c726 	beq	r4,r5,a9298 <_realloc_r+0x3f4>
   a8f7c:	a0c04f16 	blt	r20,r3,a90bc <_realloc_r+0x218>
   a8f80:	20800317 	ldw	r2,12(r4)
   a8f84:	20c00217 	ldw	r3,8(r4)
   a8f88:	99bfff04 	addi	r6,r19,-4
   a8f8c:	01000904 	movi	r4,36
   a8f90:	18800315 	stw	r2,12(r3)
   a8f94:	10c00215 	stw	r3,8(r2)
   a8f98:	b8c00217 	ldw	r3,8(r23)
   a8f9c:	b8800317 	ldw	r2,12(r23)
   a8fa0:	bc800204 	addi	r18,r23,8
   a8fa4:	18800315 	stw	r2,12(r3)
   a8fa8:	10c00215 	stw	r3,8(r2)
   a8fac:	2180ed36 	bltu	r4,r6,a9364 <_realloc_r+0x4c0>
   a8fb0:	008004c4 	movi	r2,19
   a8fb4:	11809b2e 	bgeu	r2,r6,a9224 <_realloc_r+0x380>
   a8fb8:	80800017 	ldw	r2,0(r16)
   a8fbc:	b8800215 	stw	r2,8(r23)
   a8fc0:	80800117 	ldw	r2,4(r16)
   a8fc4:	b8800315 	stw	r2,12(r23)
   a8fc8:	008006c4 	movi	r2,27
   a8fcc:	1180f936 	bltu	r2,r6,a93b4 <_realloc_r+0x510>
   a8fd0:	b8800404 	addi	r2,r23,16
   a8fd4:	80c00204 	addi	r3,r16,8
   a8fd8:	00009406 	br	a922c <_realloc_r+0x388>
   a8fdc:	00c00404 	movi	r3,16
   a8fe0:	1823883a 	mov	r17,r3
   a8fe4:	003fca06 	br	a8f10 <_realloc_r+0x6c>
   a8fe8:	9829883a 	mov	r20,r19
   a8fec:	a447c83a 	sub	r3,r20,r17
   a8ff0:	010003c4 	movi	r4,15
   a8ff4:	1080004c 	andi	r2,r2,1
   a8ff8:	20c02336 	bltu	r4,r3,a9088 <_realloc_r+0x1e4>
   a8ffc:	1504b03a 	or	r2,r2,r20
   a9000:	b0800115 	stw	r2,4(r22)
   a9004:	b52d883a 	add	r22,r22,r20
   a9008:	b0800117 	ldw	r2,4(r22)
   a900c:	10800054 	ori	r2,r2,1
   a9010:	b0800115 	stw	r2,4(r22)
   a9014:	a809883a 	mov	r4,r21
   a9018:	00abdb80 	call	abdb8 <__malloc_unlock>
   a901c:	8025883a 	mov	r18,r16
   a9020:	9005883a 	mov	r2,r18
   a9024:	dfc00a17 	ldw	ra,40(sp)
   a9028:	df000917 	ldw	fp,36(sp)
   a902c:	ddc00817 	ldw	r23,32(sp)
   a9030:	dd800717 	ldw	r22,28(sp)
   a9034:	dd400617 	ldw	r21,24(sp)
   a9038:	dd000517 	ldw	r20,20(sp)
   a903c:	dcc00417 	ldw	r19,16(sp)
   a9040:	dc800317 	ldw	r18,12(sp)
   a9044:	dc400217 	ldw	r17,8(sp)
   a9048:	dc000117 	ldw	r16,4(sp)
   a904c:	dec00b04 	addi	sp,sp,44
   a9050:	f800283a 	ret
   a9054:	01ffff04 	movi	r7,-4
   a9058:	31cc703a 	and	r6,r6,r7
   a905c:	34e9883a 	add	r20,r6,r19
   a9060:	a0ffbb16 	blt	r20,r3,a8f50 <_realloc_r+0xac>
   a9064:	20c00317 	ldw	r3,12(r4)
   a9068:	21000217 	ldw	r4,8(r4)
   a906c:	20c00315 	stw	r3,12(r4)
   a9070:	19000215 	stw	r4,8(r3)
   a9074:	003fdd06 	br	a8fec <_realloc_r+0x148>
   a9078:	00800304 	movi	r2,12
   a907c:	a8800015 	stw	r2,0(r21)
   a9080:	0025883a 	mov	r18,zero
   a9084:	003fe606 	br	a9020 <_realloc_r+0x17c>
   a9088:	1444b03a 	or	r2,r2,r17
   a908c:	b0800115 	stw	r2,4(r22)
   a9090:	b44b883a 	add	r5,r22,r17
   a9094:	18800054 	ori	r2,r3,1
   a9098:	28800115 	stw	r2,4(r5)
   a909c:	28c7883a 	add	r3,r5,r3
   a90a0:	18800117 	ldw	r2,4(r3)
   a90a4:	a809883a 	mov	r4,r21
   a90a8:	29400204 	addi	r5,r5,8
   a90ac:	10800054 	ori	r2,r2,1
   a90b0:	18800115 	stw	r2,4(r3)
   a90b4:	00a1c040 	call	a1c04 <_free_r>
   a90b8:	003fd606 	br	a9014 <_realloc_r+0x170>
   a90bc:	38c0330e 	bge	r7,r3,a918c <_realloc_r+0x2e8>
   a90c0:	900b883a 	mov	r5,r18
   a90c4:	a809883a 	mov	r4,r21
   a90c8:	00a26dc0 	call	a26dc <_malloc_r>
   a90cc:	1025883a 	mov	r18,r2
   a90d0:	10001626 	beq	r2,zero,a912c <_realloc_r+0x288>
   a90d4:	80bfff17 	ldw	r2,-4(r16)
   a90d8:	00ffff84 	movi	r3,-2
   a90dc:	913ffe04 	addi	r4,r18,-8
   a90e0:	10c6703a 	and	r3,r2,r3
   a90e4:	b0c7883a 	add	r3,r22,r3
   a90e8:	20c09926 	beq	r4,r3,a9350 <_realloc_r+0x4ac>
   a90ec:	99bfff04 	addi	r6,r19,-4
   a90f0:	00800904 	movi	r2,36
   a90f4:	11806436 	bltu	r2,r6,a9288 <_realloc_r+0x3e4>
   a90f8:	00c004c4 	movi	r3,19
   a90fc:	19804036 	bltu	r3,r6,a9200 <_realloc_r+0x35c>
   a9100:	9005883a 	mov	r2,r18
   a9104:	8007883a 	mov	r3,r16
   a9108:	19000017 	ldw	r4,0(r3)
   a910c:	11000015 	stw	r4,0(r2)
   a9110:	19000117 	ldw	r4,4(r3)
   a9114:	11000115 	stw	r4,4(r2)
   a9118:	18c00217 	ldw	r3,8(r3)
   a911c:	10c00215 	stw	r3,8(r2)
   a9120:	a809883a 	mov	r4,r21
   a9124:	800b883a 	mov	r5,r16
   a9128:	00a1c040 	call	a1c04 <_free_r>
   a912c:	a809883a 	mov	r4,r21
   a9130:	00abdb80 	call	abdb8 <__malloc_unlock>
   a9134:	003fba06 	br	a9020 <_realloc_r+0x17c>
   a9138:	300b883a 	mov	r5,r6
   a913c:	dfc00a17 	ldw	ra,40(sp)
   a9140:	df000917 	ldw	fp,36(sp)
   a9144:	ddc00817 	ldw	r23,32(sp)
   a9148:	dd800717 	ldw	r22,28(sp)
   a914c:	dd400617 	ldw	r21,24(sp)
   a9150:	dd000517 	ldw	r20,20(sp)
   a9154:	dcc00417 	ldw	r19,16(sp)
   a9158:	dc800317 	ldw	r18,12(sp)
   a915c:	dc400217 	ldw	r17,8(sp)
   a9160:	dc000117 	ldw	r16,4(sp)
   a9164:	dec00b04 	addi	sp,sp,44
   a9168:	00a26dc1 	jmpi	a26dc <_malloc_r>
   a916c:	29800117 	ldw	r6,4(r5)
   a9170:	013fff04 	movi	r4,-4
   a9174:	89c00404 	addi	r7,r17,16
   a9178:	310c703a 	and	r6,r6,r4
   a917c:	34c9883a 	add	r4,r6,r19
   a9180:	21c0340e 	bge	r4,r7,a9254 <_realloc_r+0x3b0>
   a9184:	2809883a 	mov	r4,r5
   a9188:	003f7106 	br	a8f50 <_realloc_r+0xac>
   a918c:	b8800317 	ldw	r2,12(r23)
   a9190:	b8c00217 	ldw	r3,8(r23)
   a9194:	99bfff04 	addi	r6,r19,-4
   a9198:	01000904 	movi	r4,36
   a919c:	18800315 	stw	r2,12(r3)
   a91a0:	10c00215 	stw	r3,8(r2)
   a91a4:	bc800204 	addi	r18,r23,8
   a91a8:	21807836 	bltu	r4,r6,a938c <_realloc_r+0x4e8>
   a91ac:	008004c4 	movi	r2,19
   a91b0:	1180732e 	bgeu	r2,r6,a9380 <_realloc_r+0x4dc>
   a91b4:	80800017 	ldw	r2,0(r16)
   a91b8:	b8800215 	stw	r2,8(r23)
   a91bc:	80800117 	ldw	r2,4(r16)
   a91c0:	b8800315 	stw	r2,12(r23)
   a91c4:	008006c4 	movi	r2,27
   a91c8:	11808936 	bltu	r2,r6,a93f0 <_realloc_r+0x54c>
   a91cc:	b8800404 	addi	r2,r23,16
   a91d0:	80c00204 	addi	r3,r16,8
   a91d4:	19000017 	ldw	r4,0(r3)
   a91d8:	9021883a 	mov	r16,r18
   a91dc:	3829883a 	mov	r20,r7
   a91e0:	11000015 	stw	r4,0(r2)
   a91e4:	19000117 	ldw	r4,4(r3)
   a91e8:	b82d883a 	mov	r22,r23
   a91ec:	11000115 	stw	r4,4(r2)
   a91f0:	18c00217 	ldw	r3,8(r3)
   a91f4:	10c00215 	stw	r3,8(r2)
   a91f8:	b8800117 	ldw	r2,4(r23)
   a91fc:	003f7b06 	br	a8fec <_realloc_r+0x148>
   a9200:	80c00017 	ldw	r3,0(r16)
   a9204:	90c00015 	stw	r3,0(r18)
   a9208:	80c00117 	ldw	r3,4(r16)
   a920c:	90c00115 	stw	r3,4(r18)
   a9210:	00c006c4 	movi	r3,27
   a9214:	19804636 	bltu	r3,r6,a9330 <_realloc_r+0x48c>
   a9218:	90800204 	addi	r2,r18,8
   a921c:	80c00204 	addi	r3,r16,8
   a9220:	003fb906 	br	a9108 <_realloc_r+0x264>
   a9224:	9005883a 	mov	r2,r18
   a9228:	8007883a 	mov	r3,r16
   a922c:	19000017 	ldw	r4,0(r3)
   a9230:	9021883a 	mov	r16,r18
   a9234:	b82d883a 	mov	r22,r23
   a9238:	11000015 	stw	r4,0(r2)
   a923c:	19000117 	ldw	r4,4(r3)
   a9240:	11000115 	stw	r4,4(r2)
   a9244:	18c00217 	ldw	r3,8(r3)
   a9248:	10c00215 	stw	r3,8(r2)
   a924c:	b8800117 	ldw	r2,4(r23)
   a9250:	003f6606 	br	a8fec <_realloc_r+0x148>
   a9254:	2445c83a 	sub	r2,r4,r17
   a9258:	b46d883a 	add	r22,r22,r17
   a925c:	10800054 	ori	r2,r2,1
   a9260:	b0800115 	stw	r2,4(r22)
   a9264:	80bfff17 	ldw	r2,-4(r16)
   a9268:	a809883a 	mov	r4,r21
   a926c:	e5800215 	stw	r22,8(fp)
   a9270:	1080004c 	andi	r2,r2,1
   a9274:	88a2b03a 	or	r17,r17,r2
   a9278:	847fff15 	stw	r17,-4(r16)
   a927c:	00abdb80 	call	abdb8 <__malloc_unlock>
   a9280:	8025883a 	mov	r18,r16
   a9284:	003f6606 	br	a9020 <_realloc_r+0x17c>
   a9288:	9009883a 	mov	r4,r18
   a928c:	800b883a 	mov	r5,r16
   a9290:	00a7c5c0 	call	a7c5c <memmove>
   a9294:	003fa206 	br	a9120 <_realloc_r+0x27c>
   a9298:	88800404 	addi	r2,r17,16
   a929c:	a0bf8716 	blt	r20,r2,a90bc <_realloc_r+0x218>
   a92a0:	b8800317 	ldw	r2,12(r23)
   a92a4:	b8c00217 	ldw	r3,8(r23)
   a92a8:	99bfff04 	addi	r6,r19,-4
   a92ac:	01000904 	movi	r4,36
   a92b0:	18800315 	stw	r2,12(r3)
   a92b4:	10c00215 	stw	r3,8(r2)
   a92b8:	bc800204 	addi	r18,r23,8
   a92bc:	21806536 	bltu	r4,r6,a9454 <_realloc_r+0x5b0>
   a92c0:	008004c4 	movi	r2,19
   a92c4:	1180592e 	bgeu	r2,r6,a942c <_realloc_r+0x588>
   a92c8:	80800017 	ldw	r2,0(r16)
   a92cc:	b8800215 	stw	r2,8(r23)
   a92d0:	80800117 	ldw	r2,4(r16)
   a92d4:	b8800315 	stw	r2,12(r23)
   a92d8:	008006c4 	movi	r2,27
   a92dc:	11806136 	bltu	r2,r6,a9464 <_realloc_r+0x5c0>
   a92e0:	b8800404 	addi	r2,r23,16
   a92e4:	80c00204 	addi	r3,r16,8
   a92e8:	19000017 	ldw	r4,0(r3)
   a92ec:	11000015 	stw	r4,0(r2)
   a92f0:	19000117 	ldw	r4,4(r3)
   a92f4:	11000115 	stw	r4,4(r2)
   a92f8:	18c00217 	ldw	r3,8(r3)
   a92fc:	10c00215 	stw	r3,8(r2)
   a9300:	a447c83a 	sub	r3,r20,r17
   a9304:	bc45883a 	add	r2,r23,r17
   a9308:	18c00054 	ori	r3,r3,1
   a930c:	10c00115 	stw	r3,4(r2)
   a9310:	b8c00117 	ldw	r3,4(r23)
   a9314:	e0800215 	stw	r2,8(fp)
   a9318:	a809883a 	mov	r4,r21
   a931c:	1880004c 	andi	r2,r3,1
   a9320:	88a2b03a 	or	r17,r17,r2
   a9324:	bc400115 	stw	r17,4(r23)
   a9328:	00abdb80 	call	abdb8 <__malloc_unlock>
   a932c:	003f3c06 	br	a9020 <_realloc_r+0x17c>
   a9330:	80c00217 	ldw	r3,8(r16)
   a9334:	90c00215 	stw	r3,8(r18)
   a9338:	80c00317 	ldw	r3,12(r16)
   a933c:	90c00315 	stw	r3,12(r18)
   a9340:	30802426 	beq	r6,r2,a93d4 <_realloc_r+0x530>
   a9344:	90800404 	addi	r2,r18,16
   a9348:	80c00404 	addi	r3,r16,16
   a934c:	003f6e06 	br	a9108 <_realloc_r+0x264>
   a9350:	953fff17 	ldw	r20,-4(r18)
   a9354:	00ffff04 	movi	r3,-4
   a9358:	a0e8703a 	and	r20,r20,r3
   a935c:	a4e9883a 	add	r20,r20,r19
   a9360:	003f2206 	br	a8fec <_realloc_r+0x148>
   a9364:	800b883a 	mov	r5,r16
   a9368:	9009883a 	mov	r4,r18
   a936c:	00a7c5c0 	call	a7c5c <memmove>
   a9370:	9021883a 	mov	r16,r18
   a9374:	b8800117 	ldw	r2,4(r23)
   a9378:	b82d883a 	mov	r22,r23
   a937c:	003f1b06 	br	a8fec <_realloc_r+0x148>
   a9380:	9005883a 	mov	r2,r18
   a9384:	8007883a 	mov	r3,r16
   a9388:	003f9206 	br	a91d4 <_realloc_r+0x330>
   a938c:	800b883a 	mov	r5,r16
   a9390:	9009883a 	mov	r4,r18
   a9394:	d9c00015 	stw	r7,0(sp)
   a9398:	00a7c5c0 	call	a7c5c <memmove>
   a939c:	d9c00017 	ldw	r7,0(sp)
   a93a0:	9021883a 	mov	r16,r18
   a93a4:	b8800117 	ldw	r2,4(r23)
   a93a8:	3829883a 	mov	r20,r7
   a93ac:	b82d883a 	mov	r22,r23
   a93b0:	003f0e06 	br	a8fec <_realloc_r+0x148>
   a93b4:	80800217 	ldw	r2,8(r16)
   a93b8:	b8800415 	stw	r2,16(r23)
   a93bc:	80800317 	ldw	r2,12(r16)
   a93c0:	b8800515 	stw	r2,20(r23)
   a93c4:	31001226 	beq	r6,r4,a9410 <_realloc_r+0x56c>
   a93c8:	b8800604 	addi	r2,r23,24
   a93cc:	80c00404 	addi	r3,r16,16
   a93d0:	003f9606 	br	a922c <_realloc_r+0x388>
   a93d4:	81000417 	ldw	r4,16(r16)
   a93d8:	90800604 	addi	r2,r18,24
   a93dc:	80c00604 	addi	r3,r16,24
   a93e0:	91000415 	stw	r4,16(r18)
   a93e4:	81000517 	ldw	r4,20(r16)
   a93e8:	91000515 	stw	r4,20(r18)
   a93ec:	003f4606 	br	a9108 <_realloc_r+0x264>
   a93f0:	80800217 	ldw	r2,8(r16)
   a93f4:	b8800415 	stw	r2,16(r23)
   a93f8:	80800317 	ldw	r2,12(r16)
   a93fc:	b8800515 	stw	r2,20(r23)
   a9400:	31000d26 	beq	r6,r4,a9438 <_realloc_r+0x594>
   a9404:	b8800604 	addi	r2,r23,24
   a9408:	80c00404 	addi	r3,r16,16
   a940c:	003f7106 	br	a91d4 <_realloc_r+0x330>
   a9410:	81000417 	ldw	r4,16(r16)
   a9414:	b8800804 	addi	r2,r23,32
   a9418:	80c00604 	addi	r3,r16,24
   a941c:	b9000615 	stw	r4,24(r23)
   a9420:	81000517 	ldw	r4,20(r16)
   a9424:	b9000715 	stw	r4,28(r23)
   a9428:	003f8006 	br	a922c <_realloc_r+0x388>
   a942c:	9005883a 	mov	r2,r18
   a9430:	8007883a 	mov	r3,r16
   a9434:	003fac06 	br	a92e8 <_realloc_r+0x444>
   a9438:	81000417 	ldw	r4,16(r16)
   a943c:	b8800804 	addi	r2,r23,32
   a9440:	80c00604 	addi	r3,r16,24
   a9444:	b9000615 	stw	r4,24(r23)
   a9448:	81000517 	ldw	r4,20(r16)
   a944c:	b9000715 	stw	r4,28(r23)
   a9450:	003f6006 	br	a91d4 <_realloc_r+0x330>
   a9454:	9009883a 	mov	r4,r18
   a9458:	800b883a 	mov	r5,r16
   a945c:	00a7c5c0 	call	a7c5c <memmove>
   a9460:	003fa706 	br	a9300 <_realloc_r+0x45c>
   a9464:	80800217 	ldw	r2,8(r16)
   a9468:	b8800415 	stw	r2,16(r23)
   a946c:	80800317 	ldw	r2,12(r16)
   a9470:	b8800515 	stw	r2,20(r23)
   a9474:	31000326 	beq	r6,r4,a9484 <_realloc_r+0x5e0>
   a9478:	b8800604 	addi	r2,r23,24
   a947c:	80c00404 	addi	r3,r16,16
   a9480:	003f9906 	br	a92e8 <_realloc_r+0x444>
   a9484:	81000417 	ldw	r4,16(r16)
   a9488:	b8800804 	addi	r2,r23,32
   a948c:	80c00604 	addi	r3,r16,24
   a9490:	b9000615 	stw	r4,24(r23)
   a9494:	81000517 	ldw	r4,20(r16)
   a9498:	b9000715 	stw	r4,28(r23)
   a949c:	003f9206 	br	a92e8 <_realloc_r+0x444>

000a94a0 <__isinfd>:
   a94a0:	0105c83a 	sub	r2,zero,r4
   a94a4:	1108b03a 	or	r4,r2,r4
   a94a8:	2004d7fa 	srli	r2,r4,31
   a94ac:	00e00034 	movhi	r3,32768
   a94b0:	18ffffc4 	addi	r3,r3,-1
   a94b4:	28ca703a 	and	r5,r5,r3
   a94b8:	1144b03a 	or	r2,r2,r5
   a94bc:	00dffc34 	movhi	r3,32752
   a94c0:	1885c83a 	sub	r2,r3,r2
   a94c4:	0087c83a 	sub	r3,zero,r2
   a94c8:	1884b03a 	or	r2,r3,r2
   a94cc:	1005d7fa 	srai	r2,r2,31
   a94d0:	10800044 	addi	r2,r2,1
   a94d4:	f800283a 	ret

000a94d8 <__isnand>:
   a94d8:	0105c83a 	sub	r2,zero,r4
   a94dc:	1108b03a 	or	r4,r2,r4
   a94e0:	2004d7fa 	srli	r2,r4,31
   a94e4:	00e00034 	movhi	r3,32768
   a94e8:	18ffffc4 	addi	r3,r3,-1
   a94ec:	28ca703a 	and	r5,r5,r3
   a94f0:	1144b03a 	or	r2,r2,r5
   a94f4:	00dffc34 	movhi	r3,32752
   a94f8:	1885c83a 	sub	r2,r3,r2
   a94fc:	1004d7fa 	srli	r2,r2,31
   a9500:	f800283a 	ret

000a9504 <strcmp>:
   a9504:	2904b03a 	or	r2,r5,r4
   a9508:	108000cc 	andi	r2,r2,3
   a950c:	1000171e 	bne	r2,zero,a956c <strcmp+0x68>
   a9510:	20800017 	ldw	r2,0(r4)
   a9514:	28c00017 	ldw	r3,0(r5)
   a9518:	10c0141e 	bne	r2,r3,a956c <strcmp+0x68>
   a951c:	027fbff4 	movhi	r9,65279
   a9520:	4a7fbfc4 	addi	r9,r9,-257
   a9524:	1247883a 	add	r3,r2,r9
   a9528:	0084303a 	nor	r2,zero,r2
   a952c:	1884703a 	and	r2,r3,r2
   a9530:	02202074 	movhi	r8,32897
   a9534:	42202004 	addi	r8,r8,-32640
   a9538:	1204703a 	and	r2,r2,r8
   a953c:	10000226 	beq	r2,zero,a9548 <strcmp+0x44>
   a9540:	00001706 	br	a95a0 <strcmp+0x9c>
   a9544:	3000161e 	bne	r6,zero,a95a0 <strcmp+0x9c>
   a9548:	21000104 	addi	r4,r4,4
   a954c:	20800017 	ldw	r2,0(r4)
   a9550:	29400104 	addi	r5,r5,4
   a9554:	28c00017 	ldw	r3,0(r5)
   a9558:	124f883a 	add	r7,r2,r9
   a955c:	008c303a 	nor	r6,zero,r2
   a9560:	398c703a 	and	r6,r7,r6
   a9564:	320c703a 	and	r6,r6,r8
   a9568:	10fff626 	beq	r2,r3,a9544 <strcmp+0x40>
   a956c:	20800007 	ldb	r2,0(r4)
   a9570:	1000051e 	bne	r2,zero,a9588 <strcmp+0x84>
   a9574:	00000606 	br	a9590 <strcmp+0x8c>
   a9578:	21000044 	addi	r4,r4,1
   a957c:	20800007 	ldb	r2,0(r4)
   a9580:	29400044 	addi	r5,r5,1
   a9584:	10000226 	beq	r2,zero,a9590 <strcmp+0x8c>
   a9588:	28c00007 	ldb	r3,0(r5)
   a958c:	10fffa26 	beq	r2,r3,a9578 <strcmp+0x74>
   a9590:	20c00003 	ldbu	r3,0(r4)
   a9594:	28800003 	ldbu	r2,0(r5)
   a9598:	1885c83a 	sub	r2,r3,r2
   a959c:	f800283a 	ret
   a95a0:	0005883a 	mov	r2,zero
   a95a4:	f800283a 	ret

000a95a8 <_calloc_r>:
   a95a8:	defffe04 	addi	sp,sp,-8
   a95ac:	dc000015 	stw	r16,0(sp)
   a95b0:	2021883a 	mov	r16,r4
   a95b4:	3009883a 	mov	r4,r6
   a95b8:	dfc00115 	stw	ra,4(sp)
   a95bc:	00a118c0 	call	a118c <__mulsi3>
   a95c0:	8009883a 	mov	r4,r16
   a95c4:	100b883a 	mov	r5,r2
   a95c8:	00a26dc0 	call	a26dc <_malloc_r>
   a95cc:	1021883a 	mov	r16,r2
   a95d0:	10000c26 	beq	r2,zero,a9604 <_calloc_r+0x5c>
   a95d4:	11bfff17 	ldw	r6,-4(r2)
   a95d8:	00ffff04 	movi	r3,-4
   a95dc:	00800904 	movi	r2,36
   a95e0:	30cc703a 	and	r6,r6,r3
   a95e4:	30cd883a 	add	r6,r6,r3
   a95e8:	11801436 	bltu	r2,r6,a963c <_calloc_r+0x94>
   a95ec:	00c004c4 	movi	r3,19
   a95f0:	19800936 	bltu	r3,r6,a9618 <_calloc_r+0x70>
   a95f4:	8005883a 	mov	r2,r16
   a95f8:	10000015 	stw	zero,0(r2)
   a95fc:	10000115 	stw	zero,4(r2)
   a9600:	10000215 	stw	zero,8(r2)
   a9604:	8005883a 	mov	r2,r16
   a9608:	dfc00117 	ldw	ra,4(sp)
   a960c:	dc000017 	ldw	r16,0(sp)
   a9610:	dec00204 	addi	sp,sp,8
   a9614:	f800283a 	ret
   a9618:	80000015 	stw	zero,0(r16)
   a961c:	80000115 	stw	zero,4(r16)
   a9620:	00c006c4 	movi	r3,27
   a9624:	19800d2e 	bgeu	r3,r6,a965c <_calloc_r+0xb4>
   a9628:	80000215 	stw	zero,8(r16)
   a962c:	80000315 	stw	zero,12(r16)
   a9630:	30800c26 	beq	r6,r2,a9664 <_calloc_r+0xbc>
   a9634:	80800404 	addi	r2,r16,16
   a9638:	003fef06 	br	a95f8 <_calloc_r+0x50>
   a963c:	8009883a 	mov	r4,r16
   a9640:	000b883a 	mov	r5,zero
   a9644:	00a2e600 	call	a2e60 <memset>
   a9648:	8005883a 	mov	r2,r16
   a964c:	dfc00117 	ldw	ra,4(sp)
   a9650:	dc000017 	ldw	r16,0(sp)
   a9654:	dec00204 	addi	sp,sp,8
   a9658:	f800283a 	ret
   a965c:	80800204 	addi	r2,r16,8
   a9660:	003fe506 	br	a95f8 <_calloc_r+0x50>
   a9664:	80000415 	stw	zero,16(r16)
   a9668:	80000515 	stw	zero,20(r16)
   a966c:	80800604 	addi	r2,r16,24
   a9670:	003fe106 	br	a95f8 <_calloc_r+0x50>

000a9674 <__udivdi3>:
   a9674:	defff504 	addi	sp,sp,-44
   a9678:	dd000515 	stw	r20,20(sp)
   a967c:	dcc00415 	stw	r19,16(sp)
   a9680:	dc800315 	stw	r18,12(sp)
   a9684:	dc400215 	stw	r17,8(sp)
   a9688:	dc000115 	stw	r16,4(sp)
   a968c:	dfc00a15 	stw	ra,40(sp)
   a9690:	df000915 	stw	fp,36(sp)
   a9694:	ddc00815 	stw	r23,32(sp)
   a9698:	dd800715 	stw	r22,28(sp)
   a969c:	dd400615 	stw	r21,24(sp)
   a96a0:	2025883a 	mov	r18,r4
   a96a4:	2823883a 	mov	r17,r5
   a96a8:	3021883a 	mov	r16,r6
   a96ac:	2027883a 	mov	r19,r4
   a96b0:	2829883a 	mov	r20,r5
   a96b4:	3800451e 	bne	r7,zero,a97cc <__udivdi3+0x158>
   a96b8:	2980652e 	bgeu	r5,r6,a9850 <__udivdi3+0x1dc>
   a96bc:	00bfffd4 	movui	r2,65535
   a96c0:	1180b436 	bltu	r2,r6,a9994 <__udivdi3+0x320>
   a96c4:	00803fc4 	movi	r2,255
   a96c8:	11816636 	bltu	r2,r6,a9c64 <__udivdi3+0x5f0>
   a96cc:	0005883a 	mov	r2,zero
   a96d0:	0007883a 	mov	r3,zero
   a96d4:	3084d83a 	srl	r2,r6,r2
   a96d8:	010002f4 	movhi	r4,11
   a96dc:	213bcb04 	addi	r4,r4,-4308
   a96e0:	2085883a 	add	r2,r4,r2
   a96e4:	10800003 	ldbu	r2,0(r2)
   a96e8:	10c7883a 	add	r3,r2,r3
   a96ec:	00800804 	movi	r2,32
   a96f0:	10c5c83a 	sub	r2,r2,r3
   a96f4:	10000526 	beq	r2,zero,a970c <__udivdi3+0x98>
   a96f8:	88a2983a 	sll	r17,r17,r2
   a96fc:	90c6d83a 	srl	r3,r18,r3
   a9700:	30a0983a 	sll	r16,r6,r2
   a9704:	90a6983a 	sll	r19,r18,r2
   a9708:	88e8b03a 	or	r20,r17,r3
   a970c:	8022d43a 	srli	r17,r16,16
   a9710:	a009883a 	mov	r4,r20
   a9714:	857fffcc 	andi	r21,r16,65535
   a9718:	880b883a 	mov	r5,r17
   a971c:	00ab1540 	call	ab154 <__umodsi3>
   a9720:	a009883a 	mov	r4,r20
   a9724:	880b883a 	mov	r5,r17
   a9728:	102d883a 	mov	r22,r2
   a972c:	00ab14c0 	call	ab14c <__udivsi3>
   a9730:	1009883a 	mov	r4,r2
   a9734:	a80b883a 	mov	r5,r21
   a9738:	1025883a 	mov	r18,r2
   a973c:	00a118c0 	call	a118c <__mulsi3>
   a9740:	1009883a 	mov	r4,r2
   a9744:	b006943a 	slli	r3,r22,16
   a9748:	9804d43a 	srli	r2,r19,16
   a974c:	1886b03a 	or	r3,r3,r2
   a9750:	1900052e 	bgeu	r3,r4,a9768 <__udivdi3+0xf4>
   a9754:	1c07883a 	add	r3,r3,r16
   a9758:	90bfffc4 	addi	r2,r18,-1
   a975c:	1c000136 	bltu	r3,r16,a9764 <__udivdi3+0xf0>
   a9760:	19015536 	bltu	r3,r4,a9cb8 <__udivdi3+0x644>
   a9764:	1025883a 	mov	r18,r2
   a9768:	1929c83a 	sub	r20,r3,r4
   a976c:	880b883a 	mov	r5,r17
   a9770:	a009883a 	mov	r4,r20
   a9774:	00ab1540 	call	ab154 <__umodsi3>
   a9778:	102d883a 	mov	r22,r2
   a977c:	880b883a 	mov	r5,r17
   a9780:	a009883a 	mov	r4,r20
   a9784:	b02c943a 	slli	r22,r22,16
   a9788:	00ab14c0 	call	ab14c <__udivsi3>
   a978c:	1009883a 	mov	r4,r2
   a9790:	a80b883a 	mov	r5,r21
   a9794:	9cffffcc 	andi	r19,r19,65535
   a9798:	1023883a 	mov	r17,r2
   a979c:	b4e6b03a 	or	r19,r22,r19
   a97a0:	00a118c0 	call	a118c <__mulsi3>
   a97a4:	9880052e 	bgeu	r19,r2,a97bc <__udivdi3+0x148>
   a97a8:	9c27883a 	add	r19,r19,r16
   a97ac:	88ffffc4 	addi	r3,r17,-1
   a97b0:	9c011436 	bltu	r19,r16,a9c04 <__udivdi3+0x590>
   a97b4:	9881132e 	bgeu	r19,r2,a9c04 <__udivdi3+0x590>
   a97b8:	8c7fff84 	addi	r17,r17,-2
   a97bc:	9004943a 	slli	r2,r18,16
   a97c0:	0007883a 	mov	r3,zero
   a97c4:	8884b03a 	or	r2,r17,r2
   a97c8:	00001506 	br	a9820 <__udivdi3+0x1ac>
   a97cc:	29c06a36 	bltu	r5,r7,a9978 <__udivdi3+0x304>
   a97d0:	00bfffd4 	movui	r2,65535
   a97d4:	11c06a2e 	bgeu	r2,r7,a9980 <__udivdi3+0x30c>
   a97d8:	00804034 	movhi	r2,256
   a97dc:	10bfffc4 	addi	r2,r2,-1
   a97e0:	11c11436 	bltu	r2,r7,a9c34 <__udivdi3+0x5c0>
   a97e4:	00c00404 	movi	r3,16
   a97e8:	180b883a 	mov	r5,r3
   a97ec:	38c6d83a 	srl	r3,r7,r3
   a97f0:	010002f4 	movhi	r4,11
   a97f4:	213bcb04 	addi	r4,r4,-4308
   a97f8:	04000804 	movi	r16,32
   a97fc:	20c7883a 	add	r3,r4,r3
   a9800:	18800003 	ldbu	r2,0(r3)
   a9804:	1145883a 	add	r2,r2,r5
   a9808:	80a1c83a 	sub	r16,r16,r2
   a980c:	80006e1e 	bne	r16,zero,a99c8 <__udivdi3+0x354>
   a9810:	0007883a 	mov	r3,zero
   a9814:	3c406a36 	bltu	r7,r17,a99c0 <__udivdi3+0x34c>
   a9818:	9180692e 	bgeu	r18,r6,a99c0 <__udivdi3+0x34c>
   a981c:	0005883a 	mov	r2,zero
   a9820:	dfc00a17 	ldw	ra,40(sp)
   a9824:	df000917 	ldw	fp,36(sp)
   a9828:	ddc00817 	ldw	r23,32(sp)
   a982c:	dd800717 	ldw	r22,28(sp)
   a9830:	dd400617 	ldw	r21,24(sp)
   a9834:	dd000517 	ldw	r20,20(sp)
   a9838:	dcc00417 	ldw	r19,16(sp)
   a983c:	dc800317 	ldw	r18,12(sp)
   a9840:	dc400217 	ldw	r17,8(sp)
   a9844:	dc000117 	ldw	r16,4(sp)
   a9848:	dec00b04 	addi	sp,sp,44
   a984c:	f800283a 	ret
   a9850:	3000041e 	bne	r6,zero,a9864 <__udivdi3+0x1f0>
   a9854:	01000044 	movi	r4,1
   a9858:	000b883a 	mov	r5,zero
   a985c:	00ab14c0 	call	ab14c <__udivsi3>
   a9860:	1021883a 	mov	r16,r2
   a9864:	00bfffd4 	movui	r2,65535
   a9868:	1400502e 	bgeu	r2,r16,a99ac <__udivdi3+0x338>
   a986c:	00804034 	movhi	r2,256
   a9870:	10bfffc4 	addi	r2,r2,-1
   a9874:	1400f536 	bltu	r2,r16,a9c4c <__udivdi3+0x5d8>
   a9878:	00800404 	movi	r2,16
   a987c:	1007883a 	mov	r3,r2
   a9880:	8084d83a 	srl	r2,r16,r2
   a9884:	010002f4 	movhi	r4,11
   a9888:	213bcb04 	addi	r4,r4,-4308
   a988c:	2085883a 	add	r2,r4,r2
   a9890:	10800003 	ldbu	r2,0(r2)
   a9894:	10c7883a 	add	r3,r2,r3
   a9898:	00800804 	movi	r2,32
   a989c:	10c5c83a 	sub	r2,r2,r3
   a98a0:	1000a01e 	bne	r2,zero,a9b24 <__udivdi3+0x4b0>
   a98a4:	8028d43a 	srli	r20,r16,16
   a98a8:	8c23c83a 	sub	r17,r17,r16
   a98ac:	857fffcc 	andi	r21,r16,65535
   a98b0:	00c00044 	movi	r3,1
   a98b4:	8809883a 	mov	r4,r17
   a98b8:	a00b883a 	mov	r5,r20
   a98bc:	d8c00015 	stw	r3,0(sp)
   a98c0:	00ab1540 	call	ab154 <__umodsi3>
   a98c4:	8809883a 	mov	r4,r17
   a98c8:	a00b883a 	mov	r5,r20
   a98cc:	102d883a 	mov	r22,r2
   a98d0:	00ab14c0 	call	ab14c <__udivsi3>
   a98d4:	1009883a 	mov	r4,r2
   a98d8:	a80b883a 	mov	r5,r21
   a98dc:	1025883a 	mov	r18,r2
   a98e0:	00a118c0 	call	a118c <__mulsi3>
   a98e4:	1009883a 	mov	r4,r2
   a98e8:	b00c943a 	slli	r6,r22,16
   a98ec:	9804d43a 	srli	r2,r19,16
   a98f0:	d8c00017 	ldw	r3,0(sp)
   a98f4:	308cb03a 	or	r6,r6,r2
   a98f8:	3100052e 	bgeu	r6,r4,a9910 <__udivdi3+0x29c>
   a98fc:	340d883a 	add	r6,r6,r16
   a9900:	90bfffc4 	addi	r2,r18,-1
   a9904:	34000136 	bltu	r6,r16,a990c <__udivdi3+0x298>
   a9908:	3100e836 	bltu	r6,r4,a9cac <__udivdi3+0x638>
   a990c:	1025883a 	mov	r18,r2
   a9910:	3123c83a 	sub	r17,r6,r4
   a9914:	8809883a 	mov	r4,r17
   a9918:	a00b883a 	mov	r5,r20
   a991c:	d8c00015 	stw	r3,0(sp)
   a9920:	00ab1540 	call	ab154 <__umodsi3>
   a9924:	102d883a 	mov	r22,r2
   a9928:	8809883a 	mov	r4,r17
   a992c:	a00b883a 	mov	r5,r20
   a9930:	b02c943a 	slli	r22,r22,16
   a9934:	00ab14c0 	call	ab14c <__udivsi3>
   a9938:	1009883a 	mov	r4,r2
   a993c:	a80b883a 	mov	r5,r21
   a9940:	9cffffcc 	andi	r19,r19,65535
   a9944:	1023883a 	mov	r17,r2
   a9948:	b4e6b03a 	or	r19,r22,r19
   a994c:	00a118c0 	call	a118c <__mulsi3>
   a9950:	d8c00017 	ldw	r3,0(sp)
   a9954:	9880052e 	bgeu	r19,r2,a996c <__udivdi3+0x2f8>
   a9958:	9c27883a 	add	r19,r19,r16
   a995c:	893fffc4 	addi	r4,r17,-1
   a9960:	9c00aa36 	bltu	r19,r16,a9c0c <__udivdi3+0x598>
   a9964:	9880a92e 	bgeu	r19,r2,a9c0c <__udivdi3+0x598>
   a9968:	8c7fff84 	addi	r17,r17,-2
   a996c:	9004943a 	slli	r2,r18,16
   a9970:	8884b03a 	or	r2,r17,r2
   a9974:	003faa06 	br	a9820 <__udivdi3+0x1ac>
   a9978:	0007883a 	mov	r3,zero
   a997c:	003fa706 	br	a981c <__udivdi3+0x1a8>
   a9980:	00803fc4 	movi	r2,255
   a9984:	11c0ae36 	bltu	r2,r7,a9c40 <__udivdi3+0x5cc>
   a9988:	0007883a 	mov	r3,zero
   a998c:	000b883a 	mov	r5,zero
   a9990:	003f9606 	br	a97ec <__udivdi3+0x178>
   a9994:	00804034 	movhi	r2,256
   a9998:	10bfffc4 	addi	r2,r2,-1
   a999c:	1180ae36 	bltu	r2,r6,a9c58 <__udivdi3+0x5e4>
   a99a0:	00800404 	movi	r2,16
   a99a4:	1007883a 	mov	r3,r2
   a99a8:	003f4a06 	br	a96d4 <__udivdi3+0x60>
   a99ac:	00803fc4 	movi	r2,255
   a99b0:	1400af36 	bltu	r2,r16,a9c70 <__udivdi3+0x5fc>
   a99b4:	0005883a 	mov	r2,zero
   a99b8:	0007883a 	mov	r3,zero
   a99bc:	003fb006 	br	a9880 <__udivdi3+0x20c>
   a99c0:	00800044 	movi	r2,1
   a99c4:	003f9606 	br	a9820 <__udivdi3+0x1ac>
   a99c8:	3c0e983a 	sll	r7,r7,r16
   a99cc:	3086d83a 	srl	r3,r6,r2
   a99d0:	88aed83a 	srl	r23,r17,r2
   a99d4:	9084d83a 	srl	r2,r18,r2
   a99d8:	38e6b03a 	or	r19,r7,r3
   a99dc:	9828d43a 	srli	r20,r19,16
   a99e0:	8c22983a 	sll	r17,r17,r16
   a99e4:	b809883a 	mov	r4,r23
   a99e8:	a00b883a 	mov	r5,r20
   a99ec:	342a983a 	sll	r21,r6,r16
   a99f0:	88a2b03a 	or	r17,r17,r2
   a99f4:	00ab1540 	call	ab154 <__umodsi3>
   a99f8:	b809883a 	mov	r4,r23
   a99fc:	a00b883a 	mov	r5,r20
   a9a00:	1039883a 	mov	fp,r2
   a9a04:	9dbfffcc 	andi	r22,r19,65535
   a9a08:	00ab14c0 	call	ab14c <__udivsi3>
   a9a0c:	1009883a 	mov	r4,r2
   a9a10:	b00b883a 	mov	r5,r22
   a9a14:	102f883a 	mov	r23,r2
   a9a18:	00a118c0 	call	a118c <__mulsi3>
   a9a1c:	1009883a 	mov	r4,r2
   a9a20:	e00e943a 	slli	r7,fp,16
   a9a24:	8804d43a 	srli	r2,r17,16
   a9a28:	388eb03a 	or	r7,r7,r2
   a9a2c:	3900042e 	bgeu	r7,r4,a9a40 <__udivdi3+0x3cc>
   a9a30:	3ccf883a 	add	r7,r7,r19
   a9a34:	b8bfffc4 	addi	r2,r23,-1
   a9a38:	3cc0942e 	bgeu	r7,r19,a9c8c <__udivdi3+0x618>
   a9a3c:	102f883a 	mov	r23,r2
   a9a40:	3939c83a 	sub	fp,r7,r4
   a9a44:	a00b883a 	mov	r5,r20
   a9a48:	e009883a 	mov	r4,fp
   a9a4c:	00ab1540 	call	ab154 <__umodsi3>
   a9a50:	a00b883a 	mov	r5,r20
   a9a54:	e009883a 	mov	r4,fp
   a9a58:	d8800015 	stw	r2,0(sp)
   a9a5c:	00ab14c0 	call	ab14c <__udivsi3>
   a9a60:	1009883a 	mov	r4,r2
   a9a64:	b00b883a 	mov	r5,r22
   a9a68:	1029883a 	mov	r20,r2
   a9a6c:	00a118c0 	call	a118c <__mulsi3>
   a9a70:	d8c00017 	ldw	r3,0(sp)
   a9a74:	8c7fffcc 	andi	r17,r17,65535
   a9a78:	1806943a 	slli	r3,r3,16
   a9a7c:	1c46b03a 	or	r3,r3,r17
   a9a80:	1880042e 	bgeu	r3,r2,a9a94 <__udivdi3+0x420>
   a9a84:	1cc7883a 	add	r3,r3,r19
   a9a88:	a13fffc4 	addi	r4,r20,-1
   a9a8c:	1cc07b2e 	bgeu	r3,r19,a9c7c <__udivdi3+0x608>
   a9a90:	2029883a 	mov	r20,r4
   a9a94:	b82e943a 	slli	r23,r23,16
   a9a98:	a822d43a 	srli	r17,r21,16
   a9a9c:	ad7fffcc 	andi	r21,r21,65535
   a9aa0:	a5e8b03a 	or	r20,r20,r23
   a9aa4:	a5bfffcc 	andi	r22,r20,65535
   a9aa8:	b009883a 	mov	r4,r22
   a9aac:	a80b883a 	mov	r5,r21
   a9ab0:	18afc83a 	sub	r23,r3,r2
   a9ab4:	a026d43a 	srli	r19,r20,16
   a9ab8:	00a118c0 	call	a118c <__mulsi3>
   a9abc:	b009883a 	mov	r4,r22
   a9ac0:	880b883a 	mov	r5,r17
   a9ac4:	1039883a 	mov	fp,r2
   a9ac8:	00a118c0 	call	a118c <__mulsi3>
   a9acc:	a80b883a 	mov	r5,r21
   a9ad0:	9809883a 	mov	r4,r19
   a9ad4:	102d883a 	mov	r22,r2
   a9ad8:	00a118c0 	call	a118c <__mulsi3>
   a9adc:	9809883a 	mov	r4,r19
   a9ae0:	880b883a 	mov	r5,r17
   a9ae4:	102b883a 	mov	r21,r2
   a9ae8:	00a118c0 	call	a118c <__mulsi3>
   a9aec:	100b883a 	mov	r5,r2
   a9af0:	e004d43a 	srli	r2,fp,16
   a9af4:	ad89883a 	add	r4,r21,r22
   a9af8:	2089883a 	add	r4,r4,r2
   a9afc:	2540022e 	bgeu	r4,r21,a9b08 <__udivdi3+0x494>
   a9b00:	00800074 	movhi	r2,1
   a9b04:	288b883a 	add	r5,r5,r2
   a9b08:	2004d43a 	srli	r2,r4,16
   a9b0c:	288b883a 	add	r5,r5,r2
   a9b10:	b9404536 	bltu	r23,r5,a9c28 <__udivdi3+0x5b4>
   a9b14:	b9403f26 	beq	r23,r5,a9c14 <__udivdi3+0x5a0>
   a9b18:	a005883a 	mov	r2,r20
   a9b1c:	0007883a 	mov	r3,zero
   a9b20:	003f3f06 	br	a9820 <__udivdi3+0x1ac>
   a9b24:	80a0983a 	sll	r16,r16,r2
   a9b28:	88eed83a 	srl	r23,r17,r3
   a9b2c:	90c6d83a 	srl	r3,r18,r3
   a9b30:	8028d43a 	srli	r20,r16,16
   a9b34:	88a2983a 	sll	r17,r17,r2
   a9b38:	b809883a 	mov	r4,r23
   a9b3c:	a00b883a 	mov	r5,r20
   a9b40:	88ecb03a 	or	r22,r17,r3
   a9b44:	90a6983a 	sll	r19,r18,r2
   a9b48:	00ab1540 	call	ab154 <__umodsi3>
   a9b4c:	b809883a 	mov	r4,r23
   a9b50:	a00b883a 	mov	r5,r20
   a9b54:	1023883a 	mov	r17,r2
   a9b58:	857fffcc 	andi	r21,r16,65535
   a9b5c:	00ab14c0 	call	ab14c <__udivsi3>
   a9b60:	1009883a 	mov	r4,r2
   a9b64:	a80b883a 	mov	r5,r21
   a9b68:	102f883a 	mov	r23,r2
   a9b6c:	00a118c0 	call	a118c <__mulsi3>
   a9b70:	1009883a 	mov	r4,r2
   a9b74:	880a943a 	slli	r5,r17,16
   a9b78:	b004d43a 	srli	r2,r22,16
   a9b7c:	288ab03a 	or	r5,r5,r2
   a9b80:	2900062e 	bgeu	r5,r4,a9b9c <__udivdi3+0x528>
   a9b84:	2c0b883a 	add	r5,r5,r16
   a9b88:	b8bfffc4 	addi	r2,r23,-1
   a9b8c:	2c004536 	bltu	r5,r16,a9ca4 <__udivdi3+0x630>
   a9b90:	2900442e 	bgeu	r5,r4,a9ca4 <__udivdi3+0x630>
   a9b94:	bdffff84 	addi	r23,r23,-2
   a9b98:	2c0b883a 	add	r5,r5,r16
   a9b9c:	2925c83a 	sub	r18,r5,r4
   a9ba0:	9009883a 	mov	r4,r18
   a9ba4:	a00b883a 	mov	r5,r20
   a9ba8:	00ab1540 	call	ab154 <__umodsi3>
   a9bac:	1023883a 	mov	r17,r2
   a9bb0:	9009883a 	mov	r4,r18
   a9bb4:	a00b883a 	mov	r5,r20
   a9bb8:	8822943a 	slli	r17,r17,16
   a9bbc:	00ab14c0 	call	ab14c <__udivsi3>
   a9bc0:	1009883a 	mov	r4,r2
   a9bc4:	a80b883a 	mov	r5,r21
   a9bc8:	b5bfffcc 	andi	r22,r22,65535
   a9bcc:	1025883a 	mov	r18,r2
   a9bd0:	8da2b03a 	or	r17,r17,r22
   a9bd4:	00a118c0 	call	a118c <__mulsi3>
   a9bd8:	8880062e 	bgeu	r17,r2,a9bf4 <__udivdi3+0x580>
   a9bdc:	8c23883a 	add	r17,r17,r16
   a9be0:	90ffffc4 	addi	r3,r18,-1
   a9be4:	8c002d36 	bltu	r17,r16,a9c9c <__udivdi3+0x628>
   a9be8:	88802c2e 	bgeu	r17,r2,a9c9c <__udivdi3+0x628>
   a9bec:	94bfff84 	addi	r18,r18,-2
   a9bf0:	8c23883a 	add	r17,r17,r16
   a9bf4:	b806943a 	slli	r3,r23,16
   a9bf8:	88a3c83a 	sub	r17,r17,r2
   a9bfc:	90c6b03a 	or	r3,r18,r3
   a9c00:	003f2c06 	br	a98b4 <__udivdi3+0x240>
   a9c04:	1823883a 	mov	r17,r3
   a9c08:	003eec06 	br	a97bc <__udivdi3+0x148>
   a9c0c:	2023883a 	mov	r17,r4
   a9c10:	003f5606 	br	a996c <__udivdi3+0x2f8>
   a9c14:	2008943a 	slli	r4,r4,16
   a9c18:	9420983a 	sll	r16,r18,r16
   a9c1c:	e73fffcc 	andi	fp,fp,65535
   a9c20:	2709883a 	add	r4,r4,fp
   a9c24:	813fbc2e 	bgeu	r16,r4,a9b18 <__udivdi3+0x4a4>
   a9c28:	a0bfffc4 	addi	r2,r20,-1
   a9c2c:	0007883a 	mov	r3,zero
   a9c30:	003efb06 	br	a9820 <__udivdi3+0x1ac>
   a9c34:	00c00604 	movi	r3,24
   a9c38:	180b883a 	mov	r5,r3
   a9c3c:	003eeb06 	br	a97ec <__udivdi3+0x178>
   a9c40:	00c00204 	movi	r3,8
   a9c44:	180b883a 	mov	r5,r3
   a9c48:	003ee806 	br	a97ec <__udivdi3+0x178>
   a9c4c:	00800604 	movi	r2,24
   a9c50:	1007883a 	mov	r3,r2
   a9c54:	003f0a06 	br	a9880 <__udivdi3+0x20c>
   a9c58:	00800604 	movi	r2,24
   a9c5c:	1007883a 	mov	r3,r2
   a9c60:	003e9c06 	br	a96d4 <__udivdi3+0x60>
   a9c64:	00800204 	movi	r2,8
   a9c68:	1007883a 	mov	r3,r2
   a9c6c:	003e9906 	br	a96d4 <__udivdi3+0x60>
   a9c70:	00800204 	movi	r2,8
   a9c74:	1007883a 	mov	r3,r2
   a9c78:	003f0106 	br	a9880 <__udivdi3+0x20c>
   a9c7c:	18bf842e 	bgeu	r3,r2,a9a90 <__udivdi3+0x41c>
   a9c80:	a53fff84 	addi	r20,r20,-2
   a9c84:	1cc7883a 	add	r3,r3,r19
   a9c88:	003f8206 	br	a9a94 <__udivdi3+0x420>
   a9c8c:	393f6b2e 	bgeu	r7,r4,a9a3c <__udivdi3+0x3c8>
   a9c90:	bdffff84 	addi	r23,r23,-2
   a9c94:	3ccf883a 	add	r7,r7,r19
   a9c98:	003f6906 	br	a9a40 <__udivdi3+0x3cc>
   a9c9c:	1825883a 	mov	r18,r3
   a9ca0:	003fd406 	br	a9bf4 <__udivdi3+0x580>
   a9ca4:	102f883a 	mov	r23,r2
   a9ca8:	003fbc06 	br	a9b9c <__udivdi3+0x528>
   a9cac:	94bfff84 	addi	r18,r18,-2
   a9cb0:	340d883a 	add	r6,r6,r16
   a9cb4:	003f1606 	br	a9910 <__udivdi3+0x29c>
   a9cb8:	94bfff84 	addi	r18,r18,-2
   a9cbc:	1c07883a 	add	r3,r3,r16
   a9cc0:	003ea906 	br	a9768 <__udivdi3+0xf4>

000a9cc4 <__umoddi3>:
   a9cc4:	defff304 	addi	sp,sp,-52
   a9cc8:	dd000715 	stw	r20,28(sp)
   a9ccc:	dcc00615 	stw	r19,24(sp)
   a9cd0:	dc800515 	stw	r18,20(sp)
   a9cd4:	dc400415 	stw	r17,16(sp)
   a9cd8:	dc000315 	stw	r16,12(sp)
   a9cdc:	dfc00c15 	stw	ra,48(sp)
   a9ce0:	df000b15 	stw	fp,44(sp)
   a9ce4:	ddc00a15 	stw	r23,40(sp)
   a9ce8:	dd800915 	stw	r22,36(sp)
   a9cec:	dd400815 	stw	r21,32(sp)
   a9cf0:	2025883a 	mov	r18,r4
   a9cf4:	2823883a 	mov	r17,r5
   a9cf8:	3021883a 	mov	r16,r6
   a9cfc:	2027883a 	mov	r19,r4
   a9d00:	2829883a 	mov	r20,r5
   a9d04:	38003a1e 	bne	r7,zero,a9df0 <__umoddi3+0x12c>
   a9d08:	2980522e 	bgeu	r5,r6,a9e54 <__umoddi3+0x190>
   a9d0c:	00bfffd4 	movui	r2,65535
   a9d10:	1180a436 	bltu	r2,r6,a9fa4 <__umoddi3+0x2e0>
   a9d14:	00803fc4 	movi	r2,255
   a9d18:	11816036 	bltu	r2,r6,aa29c <__umoddi3+0x5d8>
   a9d1c:	0005883a 	mov	r2,zero
   a9d20:	0009883a 	mov	r4,zero
   a9d24:	3084d83a 	srl	r2,r6,r2
   a9d28:	00c002f4 	movhi	r3,11
   a9d2c:	18fbcb04 	addi	r3,r3,-4308
   a9d30:	05400804 	movi	r21,32
   a9d34:	1885883a 	add	r2,r3,r2
   a9d38:	10800003 	ldbu	r2,0(r2)
   a9d3c:	1109883a 	add	r4,r2,r4
   a9d40:	a92bc83a 	sub	r21,r21,r4
   a9d44:	a8010e26 	beq	r21,zero,aa180 <__umoddi3+0x4bc>
   a9d48:	8d62983a 	sll	r17,r17,r21
   a9d4c:	9108d83a 	srl	r4,r18,r4
   a9d50:	3560983a 	sll	r16,r6,r21
   a9d54:	9566983a 	sll	r19,r18,r21
   a9d58:	8928b03a 	or	r20,r17,r4
   a9d5c:	8022d43a 	srli	r17,r16,16
   a9d60:	a009883a 	mov	r4,r20
   a9d64:	84bfffcc 	andi	r18,r16,65535
   a9d68:	880b883a 	mov	r5,r17
   a9d6c:	00ab1540 	call	ab154 <__umodsi3>
   a9d70:	a009883a 	mov	r4,r20
   a9d74:	880b883a 	mov	r5,r17
   a9d78:	102d883a 	mov	r22,r2
   a9d7c:	00ab14c0 	call	ab14c <__udivsi3>
   a9d80:	1009883a 	mov	r4,r2
   a9d84:	900b883a 	mov	r5,r18
   a9d88:	00a118c0 	call	a118c <__mulsi3>
   a9d8c:	1009883a 	mov	r4,r2
   a9d90:	b006943a 	slli	r3,r22,16
   a9d94:	9804d43a 	srli	r2,r19,16
   a9d98:	1886b03a 	or	r3,r3,r2
   a9d9c:	1900042e 	bgeu	r3,r4,a9db0 <__umoddi3+0xec>
   a9da0:	1c07883a 	add	r3,r3,r16
   a9da4:	1c000236 	bltu	r3,r16,a9db0 <__umoddi3+0xec>
   a9da8:	1900012e 	bgeu	r3,r4,a9db0 <__umoddi3+0xec>
   a9dac:	1c07883a 	add	r3,r3,r16
   a9db0:	1929c83a 	sub	r20,r3,r4
   a9db4:	a009883a 	mov	r4,r20
   a9db8:	880b883a 	mov	r5,r17
   a9dbc:	00ab1540 	call	ab154 <__umodsi3>
   a9dc0:	102d883a 	mov	r22,r2
   a9dc4:	a009883a 	mov	r4,r20
   a9dc8:	880b883a 	mov	r5,r17
   a9dcc:	b02c943a 	slli	r22,r22,16
   a9dd0:	00ab14c0 	call	ab14c <__udivsi3>
   a9dd4:	1009883a 	mov	r4,r2
   a9dd8:	900b883a 	mov	r5,r18
   a9ddc:	9cffffcc 	andi	r19,r19,65535
   a9de0:	00a118c0 	call	a118c <__mulsi3>
   a9de4:	b4e6b03a 	or	r19,r22,r19
   a9de8:	9880572e 	bgeu	r19,r2,a9f48 <__umoddi3+0x284>
   a9dec:	00005206 	br	a9f38 <__umoddi3+0x274>
   a9df0:	29c05936 	bltu	r5,r7,a9f58 <__umoddi3+0x294>
   a9df4:	00bfffd4 	movui	r2,65535
   a9df8:	11c0652e 	bgeu	r2,r7,a9f90 <__umoddi3+0x2cc>
   a9dfc:	00804034 	movhi	r2,256
   a9e00:	10bfffc4 	addi	r2,r2,-1
   a9e04:	11c11936 	bltu	r2,r7,aa26c <__umoddi3+0x5a8>
   a9e08:	00c00404 	movi	r3,16
   a9e0c:	1827883a 	mov	r19,r3
   a9e10:	38c6d83a 	srl	r3,r7,r3
   a9e14:	010002f4 	movhi	r4,11
   a9e18:	213bcb04 	addi	r4,r4,-4308
   a9e1c:	04000804 	movi	r16,32
   a9e20:	20c7883a 	add	r3,r4,r3
   a9e24:	18800003 	ldbu	r2,0(r3)
   a9e28:	14e7883a 	add	r19,r2,r19
   a9e2c:	84e1c83a 	sub	r16,r16,r19
   a9e30:	8000671e 	bne	r16,zero,a9fd0 <__umoddi3+0x30c>
   a9e34:	3c400136 	bltu	r7,r17,a9e3c <__umoddi3+0x178>
   a9e38:	91812536 	bltu	r18,r6,aa2d0 <__umoddi3+0x60c>
   a9e3c:	9185c83a 	sub	r2,r18,r6
   a9e40:	89e3c83a 	sub	r17,r17,r7
   a9e44:	90a5803a 	cmpltu	r18,r18,r2
   a9e48:	8ca9c83a 	sub	r20,r17,r18
   a9e4c:	a007883a 	mov	r3,r20
   a9e50:	00004306 	br	a9f60 <__umoddi3+0x29c>
   a9e54:	3000041e 	bne	r6,zero,a9e68 <__umoddi3+0x1a4>
   a9e58:	01000044 	movi	r4,1
   a9e5c:	000b883a 	mov	r5,zero
   a9e60:	00ab14c0 	call	ab14c <__udivsi3>
   a9e64:	1021883a 	mov	r16,r2
   a9e68:	00bfffd4 	movui	r2,65535
   a9e6c:	1400532e 	bgeu	r2,r16,a9fbc <__umoddi3+0x2f8>
   a9e70:	00804034 	movhi	r2,256
   a9e74:	10bfffc4 	addi	r2,r2,-1
   a9e78:	14010536 	bltu	r2,r16,aa290 <__umoddi3+0x5cc>
   a9e7c:	00800404 	movi	r2,16
   a9e80:	1007883a 	mov	r3,r2
   a9e84:	8084d83a 	srl	r2,r16,r2
   a9e88:	010002f4 	movhi	r4,11
   a9e8c:	213bcb04 	addi	r4,r4,-4308
   a9e90:	05400804 	movi	r21,32
   a9e94:	2085883a 	add	r2,r4,r2
   a9e98:	10800003 	ldbu	r2,0(r2)
   a9e9c:	10c7883a 	add	r3,r2,r3
   a9ea0:	a8ebc83a 	sub	r21,r21,r3
   a9ea4:	a800b81e 	bne	r21,zero,aa188 <__umoddi3+0x4c4>
   a9ea8:	8028d43a 	srli	r20,r16,16
   a9eac:	8c23c83a 	sub	r17,r17,r16
   a9eb0:	85bfffcc 	andi	r22,r16,65535
   a9eb4:	8809883a 	mov	r4,r17
   a9eb8:	a00b883a 	mov	r5,r20
   a9ebc:	00ab1540 	call	ab154 <__umodsi3>
   a9ec0:	8809883a 	mov	r4,r17
   a9ec4:	a00b883a 	mov	r5,r20
   a9ec8:	1025883a 	mov	r18,r2
   a9ecc:	00ab14c0 	call	ab14c <__udivsi3>
   a9ed0:	1009883a 	mov	r4,r2
   a9ed4:	b00b883a 	mov	r5,r22
   a9ed8:	00a118c0 	call	a118c <__mulsi3>
   a9edc:	1009883a 	mov	r4,r2
   a9ee0:	9006943a 	slli	r3,r18,16
   a9ee4:	9804d43a 	srli	r2,r19,16
   a9ee8:	1886b03a 	or	r3,r3,r2
   a9eec:	1900032e 	bgeu	r3,r4,a9efc <__umoddi3+0x238>
   a9ef0:	1c07883a 	add	r3,r3,r16
   a9ef4:	1c000136 	bltu	r3,r16,a9efc <__umoddi3+0x238>
   a9ef8:	1900f336 	bltu	r3,r4,aa2c8 <__umoddi3+0x604>
   a9efc:	1923c83a 	sub	r17,r3,r4
   a9f00:	8809883a 	mov	r4,r17
   a9f04:	a00b883a 	mov	r5,r20
   a9f08:	00ab1540 	call	ab154 <__umodsi3>
   a9f0c:	102f883a 	mov	r23,r2
   a9f10:	8809883a 	mov	r4,r17
   a9f14:	a00b883a 	mov	r5,r20
   a9f18:	b82e943a 	slli	r23,r23,16
   a9f1c:	00ab14c0 	call	ab14c <__udivsi3>
   a9f20:	1009883a 	mov	r4,r2
   a9f24:	b00b883a 	mov	r5,r22
   a9f28:	9cffffcc 	andi	r19,r19,65535
   a9f2c:	00a118c0 	call	a118c <__mulsi3>
   a9f30:	bce6b03a 	or	r19,r23,r19
   a9f34:	9880042e 	bgeu	r19,r2,a9f48 <__umoddi3+0x284>
   a9f38:	9c27883a 	add	r19,r19,r16
   a9f3c:	9c000236 	bltu	r19,r16,a9f48 <__umoddi3+0x284>
   a9f40:	9880012e 	bgeu	r19,r2,a9f48 <__umoddi3+0x284>
   a9f44:	9c27883a 	add	r19,r19,r16
   a9f48:	9885c83a 	sub	r2,r19,r2
   a9f4c:	1544d83a 	srl	r2,r2,r21
   a9f50:	0007883a 	mov	r3,zero
   a9f54:	00000206 	br	a9f60 <__umoddi3+0x29c>
   a9f58:	2005883a 	mov	r2,r4
   a9f5c:	2807883a 	mov	r3,r5
   a9f60:	dfc00c17 	ldw	ra,48(sp)
   a9f64:	df000b17 	ldw	fp,44(sp)
   a9f68:	ddc00a17 	ldw	r23,40(sp)
   a9f6c:	dd800917 	ldw	r22,36(sp)
   a9f70:	dd400817 	ldw	r21,32(sp)
   a9f74:	dd000717 	ldw	r20,28(sp)
   a9f78:	dcc00617 	ldw	r19,24(sp)
   a9f7c:	dc800517 	ldw	r18,20(sp)
   a9f80:	dc400417 	ldw	r17,16(sp)
   a9f84:	dc000317 	ldw	r16,12(sp)
   a9f88:	dec00d04 	addi	sp,sp,52
   a9f8c:	f800283a 	ret
   a9f90:	00803fc4 	movi	r2,255
   a9f94:	11c0b236 	bltu	r2,r7,aa260 <__umoddi3+0x59c>
   a9f98:	0007883a 	mov	r3,zero
   a9f9c:	0027883a 	mov	r19,zero
   a9fa0:	003f9b06 	br	a9e10 <__umoddi3+0x14c>
   a9fa4:	00804034 	movhi	r2,256
   a9fa8:	10bfffc4 	addi	r2,r2,-1
   a9fac:	1180b236 	bltu	r2,r6,aa278 <__umoddi3+0x5b4>
   a9fb0:	00800404 	movi	r2,16
   a9fb4:	1009883a 	mov	r4,r2
   a9fb8:	003f5a06 	br	a9d24 <__umoddi3+0x60>
   a9fbc:	00803fc4 	movi	r2,255
   a9fc0:	1400b036 	bltu	r2,r16,aa284 <__umoddi3+0x5c0>
   a9fc4:	0005883a 	mov	r2,zero
   a9fc8:	0007883a 	mov	r3,zero
   a9fcc:	003fad06 	br	a9e84 <__umoddi3+0x1c0>
   a9fd0:	34c4d83a 	srl	r2,r6,r19
   a9fd4:	3c0e983a 	sll	r7,r7,r16
   a9fd8:	8cf8d83a 	srl	fp,r17,r19
   a9fdc:	8c22983a 	sll	r17,r17,r16
   a9fe0:	38a8b03a 	or	r20,r7,r2
   a9fe4:	a02ad43a 	srli	r21,r20,16
   a9fe8:	94c4d83a 	srl	r2,r18,r19
   a9fec:	e009883a 	mov	r4,fp
   a9ff0:	a80b883a 	mov	r5,r21
   a9ff4:	342c983a 	sll	r22,r6,r16
   a9ff8:	88a2b03a 	or	r17,r17,r2
   a9ffc:	00ab1540 	call	ab154 <__umodsi3>
   aa000:	e009883a 	mov	r4,fp
   aa004:	a80b883a 	mov	r5,r21
   aa008:	a5ffffcc 	andi	r23,r20,65535
   aa00c:	d8800215 	stw	r2,8(sp)
   aa010:	00ab14c0 	call	ab14c <__udivsi3>
   aa014:	1009883a 	mov	r4,r2
   aa018:	b80b883a 	mov	r5,r23
   aa01c:	1039883a 	mov	fp,r2
   aa020:	00a118c0 	call	a118c <__mulsi3>
   aa024:	d8c00217 	ldw	r3,8(sp)
   aa028:	1009883a 	mov	r4,r2
   aa02c:	8804d43a 	srli	r2,r17,16
   aa030:	1806943a 	slli	r3,r3,16
   aa034:	9424983a 	sll	r18,r18,r16
   aa038:	1886b03a 	or	r3,r3,r2
   aa03c:	1900042e 	bgeu	r3,r4,aa050 <__umoddi3+0x38c>
   aa040:	1d07883a 	add	r3,r3,r20
   aa044:	e0bfffc4 	addi	r2,fp,-1
   aa048:	1d009b2e 	bgeu	r3,r20,aa2b8 <__umoddi3+0x5f4>
   aa04c:	1039883a 	mov	fp,r2
   aa050:	1907c83a 	sub	r3,r3,r4
   aa054:	1809883a 	mov	r4,r3
   aa058:	a80b883a 	mov	r5,r21
   aa05c:	d8c00215 	stw	r3,8(sp)
   aa060:	00ab1540 	call	ab154 <__umodsi3>
   aa064:	d8c00217 	ldw	r3,8(sp)
   aa068:	a80b883a 	mov	r5,r21
   aa06c:	d8800015 	stw	r2,0(sp)
   aa070:	1809883a 	mov	r4,r3
   aa074:	00ab14c0 	call	ab14c <__udivsi3>
   aa078:	1009883a 	mov	r4,r2
   aa07c:	b80b883a 	mov	r5,r23
   aa080:	102b883a 	mov	r21,r2
   aa084:	00a118c0 	call	a118c <__mulsi3>
   aa088:	d9c00017 	ldw	r7,0(sp)
   aa08c:	8c7fffcc 	andi	r17,r17,65535
   aa090:	380e943a 	slli	r7,r7,16
   aa094:	3c4eb03a 	or	r7,r7,r17
   aa098:	3880042e 	bgeu	r7,r2,aa0ac <__umoddi3+0x3e8>
   aa09c:	3d0f883a 	add	r7,r7,r20
   aa0a0:	a8ffffc4 	addi	r3,r21,-1
   aa0a4:	3d00802e 	bgeu	r7,r20,aa2a8 <__umoddi3+0x5e4>
   aa0a8:	182b883a 	mov	r21,r3
   aa0ac:	e038943a 	slli	fp,fp,16
   aa0b0:	b010d43a 	srli	r8,r22,16
   aa0b4:	b1bfffcc 	andi	r6,r22,65535
   aa0b8:	af2ab03a 	or	r21,r21,fp
   aa0bc:	a82ed43a 	srli	r23,r21,16
   aa0c0:	ad7fffcc 	andi	r21,r21,65535
   aa0c4:	300b883a 	mov	r5,r6
   aa0c8:	a809883a 	mov	r4,r21
   aa0cc:	38a3c83a 	sub	r17,r7,r2
   aa0d0:	d9800115 	stw	r6,4(sp)
   aa0d4:	da000015 	stw	r8,0(sp)
   aa0d8:	00a118c0 	call	a118c <__mulsi3>
   aa0dc:	da000017 	ldw	r8,0(sp)
   aa0e0:	a809883a 	mov	r4,r21
   aa0e4:	1039883a 	mov	fp,r2
   aa0e8:	400b883a 	mov	r5,r8
   aa0ec:	da000215 	stw	r8,8(sp)
   aa0f0:	00a118c0 	call	a118c <__mulsi3>
   aa0f4:	d9800117 	ldw	r6,4(sp)
   aa0f8:	b809883a 	mov	r4,r23
   aa0fc:	d8800015 	stw	r2,0(sp)
   aa100:	300b883a 	mov	r5,r6
   aa104:	00a118c0 	call	a118c <__mulsi3>
   aa108:	d8c00217 	ldw	r3,8(sp)
   aa10c:	b809883a 	mov	r4,r23
   aa110:	102b883a 	mov	r21,r2
   aa114:	180b883a 	mov	r5,r3
   aa118:	00a118c0 	call	a118c <__mulsi3>
   aa11c:	d9c00017 	ldw	r7,0(sp)
   aa120:	1007883a 	mov	r3,r2
   aa124:	e004d43a 	srli	r2,fp,16
   aa128:	a9c9883a 	add	r4,r21,r7
   aa12c:	2089883a 	add	r4,r4,r2
   aa130:	2540022e 	bgeu	r4,r21,aa13c <__umoddi3+0x478>
   aa134:	00800074 	movhi	r2,1
   aa138:	1887883a 	add	r3,r3,r2
   aa13c:	2004d43a 	srli	r2,r4,16
   aa140:	2008943a 	slli	r4,r4,16
   aa144:	e73fffcc 	andi	fp,fp,65535
   aa148:	1887883a 	add	r3,r3,r2
   aa14c:	2709883a 	add	r4,r4,fp
   aa150:	88c03d36 	bltu	r17,r3,aa248 <__umoddi3+0x584>
   aa154:	88c06126 	beq	r17,r3,aa2dc <__umoddi3+0x618>
   aa158:	88c7c83a 	sub	r3,r17,r3
   aa15c:	202d883a 	mov	r22,r4
   aa160:	95adc83a 	sub	r22,r18,r22
   aa164:	95a5803a 	cmpltu	r18,r18,r22
   aa168:	1c87c83a 	sub	r3,r3,r18
   aa16c:	1cc4983a 	sll	r2,r3,r19
   aa170:	b42cd83a 	srl	r22,r22,r16
   aa174:	1c06d83a 	srl	r3,r3,r16
   aa178:	1584b03a 	or	r2,r2,r22
   aa17c:	003f7806 	br	a9f60 <__umoddi3+0x29c>
   aa180:	002b883a 	mov	r21,zero
   aa184:	003ef506 	br	a9d5c <__umoddi3+0x98>
   aa188:	8560983a 	sll	r16,r16,r21
   aa18c:	88e6d83a 	srl	r19,r17,r3
   aa190:	90c6d83a 	srl	r3,r18,r3
   aa194:	8028d43a 	srli	r20,r16,16
   aa198:	8d62983a 	sll	r17,r17,r21
   aa19c:	9809883a 	mov	r4,r19
   aa1a0:	a00b883a 	mov	r5,r20
   aa1a4:	88eeb03a 	or	r23,r17,r3
   aa1a8:	00ab1540 	call	ab154 <__umodsi3>
   aa1ac:	9809883a 	mov	r4,r19
   aa1b0:	a00b883a 	mov	r5,r20
   aa1b4:	1023883a 	mov	r17,r2
   aa1b8:	85bfffcc 	andi	r22,r16,65535
   aa1bc:	00ab14c0 	call	ab14c <__udivsi3>
   aa1c0:	1009883a 	mov	r4,r2
   aa1c4:	b00b883a 	mov	r5,r22
   aa1c8:	00a118c0 	call	a118c <__mulsi3>
   aa1cc:	1007883a 	mov	r3,r2
   aa1d0:	8808943a 	slli	r4,r17,16
   aa1d4:	b804d43a 	srli	r2,r23,16
   aa1d8:	9566983a 	sll	r19,r18,r21
   aa1dc:	2088b03a 	or	r4,r4,r2
   aa1e0:	20c0042e 	bgeu	r4,r3,aa1f4 <__umoddi3+0x530>
   aa1e4:	2409883a 	add	r4,r4,r16
   aa1e8:	24000236 	bltu	r4,r16,aa1f4 <__umoddi3+0x530>
   aa1ec:	20c0012e 	bgeu	r4,r3,aa1f4 <__umoddi3+0x530>
   aa1f0:	2409883a 	add	r4,r4,r16
   aa1f4:	20e5c83a 	sub	r18,r4,r3
   aa1f8:	9009883a 	mov	r4,r18
   aa1fc:	a00b883a 	mov	r5,r20
   aa200:	00ab1540 	call	ab154 <__umodsi3>
   aa204:	1023883a 	mov	r17,r2
   aa208:	9009883a 	mov	r4,r18
   aa20c:	a00b883a 	mov	r5,r20
   aa210:	8822943a 	slli	r17,r17,16
   aa214:	00ab14c0 	call	ab14c <__udivsi3>
   aa218:	1009883a 	mov	r4,r2
   aa21c:	b00b883a 	mov	r5,r22
   aa220:	bdffffcc 	andi	r23,r23,65535
   aa224:	00a118c0 	call	a118c <__mulsi3>
   aa228:	8de2b03a 	or	r17,r17,r23
   aa22c:	8880042e 	bgeu	r17,r2,aa240 <__umoddi3+0x57c>
   aa230:	8c23883a 	add	r17,r17,r16
   aa234:	8c000236 	bltu	r17,r16,aa240 <__umoddi3+0x57c>
   aa238:	8880012e 	bgeu	r17,r2,aa240 <__umoddi3+0x57c>
   aa23c:	8c23883a 	add	r17,r17,r16
   aa240:	88a3c83a 	sub	r17,r17,r2
   aa244:	003f1b06 	br	a9eb4 <__umoddi3+0x1f0>
   aa248:	25adc83a 	sub	r22,r4,r22
   aa24c:	1d07c83a 	sub	r3,r3,r20
   aa250:	2589803a 	cmpltu	r4,r4,r22
   aa254:	1907c83a 	sub	r3,r3,r4
   aa258:	88c7c83a 	sub	r3,r17,r3
   aa25c:	003fc006 	br	aa160 <__umoddi3+0x49c>
   aa260:	00c00204 	movi	r3,8
   aa264:	1827883a 	mov	r19,r3
   aa268:	003ee906 	br	a9e10 <__umoddi3+0x14c>
   aa26c:	00c00604 	movi	r3,24
   aa270:	1827883a 	mov	r19,r3
   aa274:	003ee606 	br	a9e10 <__umoddi3+0x14c>
   aa278:	00800604 	movi	r2,24
   aa27c:	1009883a 	mov	r4,r2
   aa280:	003ea806 	br	a9d24 <__umoddi3+0x60>
   aa284:	00800204 	movi	r2,8
   aa288:	1007883a 	mov	r3,r2
   aa28c:	003efd06 	br	a9e84 <__umoddi3+0x1c0>
   aa290:	00800604 	movi	r2,24
   aa294:	1007883a 	mov	r3,r2
   aa298:	003efa06 	br	a9e84 <__umoddi3+0x1c0>
   aa29c:	00800204 	movi	r2,8
   aa2a0:	1009883a 	mov	r4,r2
   aa2a4:	003e9f06 	br	a9d24 <__umoddi3+0x60>
   aa2a8:	38bf7f2e 	bgeu	r7,r2,aa0a8 <__umoddi3+0x3e4>
   aa2ac:	ad7fff84 	addi	r21,r21,-2
   aa2b0:	3d0f883a 	add	r7,r7,r20
   aa2b4:	003f7d06 	br	aa0ac <__umoddi3+0x3e8>
   aa2b8:	193f642e 	bgeu	r3,r4,aa04c <__umoddi3+0x388>
   aa2bc:	e73fff84 	addi	fp,fp,-2
   aa2c0:	1d07883a 	add	r3,r3,r20
   aa2c4:	003f6206 	br	aa050 <__umoddi3+0x38c>
   aa2c8:	1c07883a 	add	r3,r3,r16
   aa2cc:	003f0b06 	br	a9efc <__umoddi3+0x238>
   aa2d0:	9005883a 	mov	r2,r18
   aa2d4:	a007883a 	mov	r3,r20
   aa2d8:	003f2106 	br	a9f60 <__umoddi3+0x29c>
   aa2dc:	913fda36 	bltu	r18,r4,aa248 <__umoddi3+0x584>
   aa2e0:	202d883a 	mov	r22,r4
   aa2e4:	0007883a 	mov	r3,zero
   aa2e8:	003f9d06 	br	aa160 <__umoddi3+0x49c>

000aa2ec <_fpadd_parts>:
   aa2ec:	2005883a 	mov	r2,r4
   aa2f0:	21000017 	ldw	r4,0(r4)
   aa2f4:	01c00044 	movi	r7,1
   aa2f8:	3900622e 	bgeu	r7,r4,aa484 <_fpadd_parts+0x198>
   aa2fc:	28c00017 	ldw	r3,0(r5)
   aa300:	38c05f2e 	bgeu	r7,r3,aa480 <_fpadd_parts+0x194>
   aa304:	01c00104 	movi	r7,4
   aa308:	21c0c626 	beq	r4,r7,aa624 <_fpadd_parts+0x338>
   aa30c:	19c05c26 	beq	r3,r7,aa480 <_fpadd_parts+0x194>
   aa310:	01c00084 	movi	r7,2
   aa314:	19c06b26 	beq	r3,r7,aa4c4 <_fpadd_parts+0x1d8>
   aa318:	21c05926 	beq	r4,r7,aa480 <_fpadd_parts+0x194>
   aa31c:	11c00217 	ldw	r7,8(r2)
   aa320:	2ac00217 	ldw	r11,8(r5)
   aa324:	13000317 	ldw	r12,12(r2)
   aa328:	13400417 	ldw	r13,16(r2)
   aa32c:	3ac9c83a 	sub	r4,r7,r11
   aa330:	2a000317 	ldw	r8,12(r5)
   aa334:	2a400417 	ldw	r9,16(r5)
   aa338:	2015883a 	mov	r10,r4
   aa33c:	20007516 	blt	r4,zero,aa514 <_fpadd_parts+0x228>
   aa340:	00c00fc4 	movi	r3,63
   aa344:	1a805016 	blt	r3,r10,aa488 <_fpadd_parts+0x19c>
   aa348:	0100870e 	bge	zero,r4,aa568 <_fpadd_parts+0x27c>
   aa34c:	50fff804 	addi	r3,r10,-32
   aa350:	18009916 	blt	r3,zero,aa5b8 <_fpadd_parts+0x2cc>
   aa354:	48d6d83a 	srl	r11,r9,r3
   aa358:	001d883a 	mov	r14,zero
   aa35c:	18009e16 	blt	r3,zero,aa5d8 <_fpadd_parts+0x2ec>
   aa360:	01000044 	movi	r4,1
   aa364:	20c6983a 	sll	r3,r4,r3
   aa368:	0015883a 	mov	r10,zero
   aa36c:	513fffc4 	addi	r4,r10,-1
   aa370:	2295403a 	cmpgeu	r10,r4,r10
   aa374:	1a87c83a 	sub	r3,r3,r10
   aa378:	1a52703a 	and	r9,r3,r9
   aa37c:	2210703a 	and	r8,r4,r8
   aa380:	4250b03a 	or	r8,r8,r9
   aa384:	4010c03a 	cmpne	r8,r8,zero
   aa388:	42d0b03a 	or	r8,r8,r11
   aa38c:	7013883a 	mov	r9,r14
   aa390:	11000117 	ldw	r4,4(r2)
   aa394:	28800117 	ldw	r2,4(r5)
   aa398:	20804126 	beq	r4,r2,aa4a0 <_fpadd_parts+0x1b4>
   aa39c:	20006326 	beq	r4,zero,aa52c <_fpadd_parts+0x240>
   aa3a0:	4305c83a 	sub	r2,r8,r12
   aa3a4:	4091803a 	cmpltu	r8,r8,r2
   aa3a8:	4b47c83a 	sub	r3,r9,r13
   aa3ac:	1a07c83a 	sub	r3,r3,r8
   aa3b0:	18006316 	blt	r3,zero,aa540 <_fpadd_parts+0x254>
   aa3b4:	30000115 	stw	zero,4(r6)
   aa3b8:	31c00215 	stw	r7,8(r6)
   aa3bc:	30800315 	stw	r2,12(r6)
   aa3c0:	30c00415 	stw	r3,16(r6)
   aa3c4:	11ffffc4 	addi	r7,r2,-1
   aa3c8:	388b403a 	cmpgeu	r5,r7,r2
   aa3cc:	194bc83a 	sub	r5,r3,r5
   aa3d0:	01040034 	movhi	r4,4096
   aa3d4:	213fffc4 	addi	r4,r4,-1
   aa3d8:	21401736 	bltu	r4,r5,aa438 <_fpadd_parts+0x14c>
   aa3dc:	29008226 	beq	r5,r4,aa5e8 <_fpadd_parts+0x2fc>
   aa3e0:	31400217 	ldw	r5,8(r6)
   aa3e4:	02840034 	movhi	r10,4096
   aa3e8:	52bfffc4 	addi	r10,r10,-1
   aa3ec:	033fff84 	movi	r12,-2
   aa3f0:	297fffc4 	addi	r5,r5,-1
   aa3f4:	00000106 	br	aa3fc <_fpadd_parts+0x110>
   aa3f8:	3a804a26 	beq	r7,r10,aa524 <_fpadd_parts+0x238>
   aa3fc:	1089883a 	add	r4,r2,r2
   aa400:	2091803a 	cmpltu	r8,r4,r2
   aa404:	18c7883a 	add	r3,r3,r3
   aa408:	227fffc4 	addi	r9,r4,-1
   aa40c:	40d1883a 	add	r8,r8,r3
   aa410:	490f403a 	cmpgeu	r7,r9,r4
   aa414:	41cfc83a 	sub	r7,r8,r7
   aa418:	2817883a 	mov	r11,r5
   aa41c:	2005883a 	mov	r2,r4
   aa420:	4007883a 	mov	r3,r8
   aa424:	297fffc4 	addi	r5,r5,-1
   aa428:	51fff32e 	bgeu	r10,r7,aa3f8 <_fpadd_parts+0x10c>
   aa42c:	31000315 	stw	r4,12(r6)
   aa430:	32000415 	stw	r8,16(r6)
   aa434:	32c00215 	stw	r11,8(r6)
   aa438:	010000c4 	movi	r4,3
   aa43c:	31000015 	stw	r4,0(r6)
   aa440:	01080034 	movhi	r4,8192
   aa444:	213fffc4 	addi	r4,r4,-1
   aa448:	20c00b2e 	bgeu	r4,r3,aa478 <_fpadd_parts+0x18c>
   aa44c:	180e97fa 	slli	r7,r3,31
   aa450:	1008d07a 	srli	r4,r2,1
   aa454:	31400217 	ldw	r5,8(r6)
   aa458:	1806d07a 	srli	r3,r3,1
   aa45c:	1080004c 	andi	r2,r2,1
   aa460:	3908b03a 	or	r4,r7,r4
   aa464:	1108b03a 	or	r4,r2,r4
   aa468:	29400044 	addi	r5,r5,1
   aa46c:	31000315 	stw	r4,12(r6)
   aa470:	30c00415 	stw	r3,16(r6)
   aa474:	31400215 	stw	r5,8(r6)
   aa478:	3005883a 	mov	r2,r6
   aa47c:	f800283a 	ret
   aa480:	2805883a 	mov	r2,r5
   aa484:	f800283a 	ret
   aa488:	59c01e0e 	bge	r11,r7,aa504 <_fpadd_parts+0x218>
   aa48c:	11000117 	ldw	r4,4(r2)
   aa490:	28800117 	ldw	r2,4(r5)
   aa494:	0011883a 	mov	r8,zero
   aa498:	0013883a 	mov	r9,zero
   aa49c:	20bfbf1e 	bne	r4,r2,aa39c <_fpadd_parts+0xb0>
   aa4a0:	4305883a 	add	r2,r8,r12
   aa4a4:	1207803a 	cmpltu	r3,r2,r8
   aa4a8:	4b53883a 	add	r9,r9,r13
   aa4ac:	1a47883a 	add	r3,r3,r9
   aa4b0:	31000115 	stw	r4,4(r6)
   aa4b4:	31c00215 	stw	r7,8(r6)
   aa4b8:	30800315 	stw	r2,12(r6)
   aa4bc:	30c00415 	stw	r3,16(r6)
   aa4c0:	003fdd06 	br	aa438 <_fpadd_parts+0x14c>
   aa4c4:	20ffef1e 	bne	r4,r3,aa484 <_fpadd_parts+0x198>
   aa4c8:	31000015 	stw	r4,0(r6)
   aa4cc:	10c00117 	ldw	r3,4(r2)
   aa4d0:	30c00115 	stw	r3,4(r6)
   aa4d4:	10c00217 	ldw	r3,8(r2)
   aa4d8:	11000117 	ldw	r4,4(r2)
   aa4dc:	29400117 	ldw	r5,4(r5)
   aa4e0:	30c00215 	stw	r3,8(r6)
   aa4e4:	10c00317 	ldw	r3,12(r2)
   aa4e8:	2908703a 	and	r4,r5,r4
   aa4ec:	30c00315 	stw	r3,12(r6)
   aa4f0:	10c00417 	ldw	r3,16(r2)
   aa4f4:	31000115 	stw	r4,4(r6)
   aa4f8:	3005883a 	mov	r2,r6
   aa4fc:	30c00415 	stw	r3,16(r6)
   aa500:	f800283a 	ret
   aa504:	580f883a 	mov	r7,r11
   aa508:	0019883a 	mov	r12,zero
   aa50c:	001b883a 	mov	r13,zero
   aa510:	003f9f06 	br	aa390 <_fpadd_parts+0xa4>
   aa514:	0115c83a 	sub	r10,zero,r4
   aa518:	00c00fc4 	movi	r3,63
   aa51c:	1abfda16 	blt	r3,r10,aa488 <_fpadd_parts+0x19c>
   aa520:	003f8906 	br	aa348 <_fpadd_parts+0x5c>
   aa524:	627fb52e 	bgeu	r12,r9,aa3fc <_fpadd_parts+0x110>
   aa528:	003fc006 	br	aa42c <_fpadd_parts+0x140>
   aa52c:	6205c83a 	sub	r2,r12,r8
   aa530:	6099803a 	cmpltu	r12,r12,r2
   aa534:	6a47c83a 	sub	r3,r13,r9
   aa538:	1b07c83a 	sub	r3,r3,r12
   aa53c:	183f9d0e 	bge	r3,zero,aa3b4 <_fpadd_parts+0xc8>
   aa540:	0085c83a 	sub	r2,zero,r2
   aa544:	1008c03a 	cmpne	r4,r2,zero
   aa548:	00c7c83a 	sub	r3,zero,r3
   aa54c:	1907c83a 	sub	r3,r3,r4
   aa550:	01000044 	movi	r4,1
   aa554:	31000115 	stw	r4,4(r6)
   aa558:	31c00215 	stw	r7,8(r6)
   aa55c:	30800315 	stw	r2,12(r6)
   aa560:	30c00415 	stw	r3,16(r6)
   aa564:	003f9706 	br	aa3c4 <_fpadd_parts+0xd8>
   aa568:	203f8926 	beq	r4,zero,aa390 <_fpadd_parts+0xa4>
   aa56c:	50fff804 	addi	r3,r10,-32
   aa570:	3a8f883a 	add	r7,r7,r10
   aa574:	18002316 	blt	r3,zero,aa604 <_fpadd_parts+0x318>
   aa578:	68d6d83a 	srl	r11,r13,r3
   aa57c:	001d883a 	mov	r14,zero
   aa580:	18001c16 	blt	r3,zero,aa5f4 <_fpadd_parts+0x308>
   aa584:	01000044 	movi	r4,1
   aa588:	20c6983a 	sll	r3,r4,r3
   aa58c:	0015883a 	mov	r10,zero
   aa590:	513fffc4 	addi	r4,r10,-1
   aa594:	2295403a 	cmpgeu	r10,r4,r10
   aa598:	1a87c83a 	sub	r3,r3,r10
   aa59c:	1b5a703a 	and	r13,r3,r13
   aa5a0:	2318703a 	and	r12,r4,r12
   aa5a4:	6358b03a 	or	r12,r12,r13
   aa5a8:	6018c03a 	cmpne	r12,r12,zero
   aa5ac:	62d8b03a 	or	r12,r12,r11
   aa5b0:	701b883a 	mov	r13,r14
   aa5b4:	003f7606 	br	aa390 <_fpadd_parts+0xa4>
   aa5b8:	4808907a 	slli	r4,r9,1
   aa5bc:	02c007c4 	movi	r11,31
   aa5c0:	5a97c83a 	sub	r11,r11,r10
   aa5c4:	22c8983a 	sll	r4,r4,r11
   aa5c8:	4296d83a 	srl	r11,r8,r10
   aa5cc:	4a9cd83a 	srl	r14,r9,r10
   aa5d0:	22d6b03a 	or	r11,r4,r11
   aa5d4:	003f6106 	br	aa35c <_fpadd_parts+0x70>
   aa5d8:	00c00044 	movi	r3,1
   aa5dc:	1a94983a 	sll	r10,r3,r10
   aa5e0:	0007883a 	mov	r3,zero
   aa5e4:	003f6106 	br	aa36c <_fpadd_parts+0x80>
   aa5e8:	013fff84 	movi	r4,-2
   aa5ec:	21ff7c2e 	bgeu	r4,r7,aa3e0 <_fpadd_parts+0xf4>
   aa5f0:	003f9106 	br	aa438 <_fpadd_parts+0x14c>
   aa5f4:	00c00044 	movi	r3,1
   aa5f8:	1a94983a 	sll	r10,r3,r10
   aa5fc:	0007883a 	mov	r3,zero
   aa600:	003fe306 	br	aa590 <_fpadd_parts+0x2a4>
   aa604:	6816907a 	slli	r11,r13,1
   aa608:	010007c4 	movi	r4,31
   aa60c:	2289c83a 	sub	r4,r4,r10
   aa610:	5908983a 	sll	r4,r11,r4
   aa614:	6296d83a 	srl	r11,r12,r10
   aa618:	6a9cd83a 	srl	r14,r13,r10
   aa61c:	22d6b03a 	or	r11,r4,r11
   aa620:	003fd706 	br	aa580 <_fpadd_parts+0x294>
   aa624:	193f971e 	bne	r3,r4,aa484 <_fpadd_parts+0x198>
   aa628:	11000117 	ldw	r4,4(r2)
   aa62c:	28c00117 	ldw	r3,4(r5)
   aa630:	20ff9426 	beq	r4,r3,aa484 <_fpadd_parts+0x198>
   aa634:	008002f4 	movhi	r2,11
   aa638:	10bbc604 	addi	r2,r2,-4328
   aa63c:	f800283a 	ret

000aa640 <__adddf3>:
   aa640:	deffec04 	addi	sp,sp,-80
   aa644:	d9001115 	stw	r4,68(sp)
   aa648:	d9401215 	stw	r5,72(sp)
   aa64c:	d9001104 	addi	r4,sp,68
   aa650:	d9400a04 	addi	r5,sp,40
   aa654:	dfc01315 	stw	ra,76(sp)
   aa658:	d9c01015 	stw	r7,64(sp)
   aa65c:	d9800f15 	stw	r6,60(sp)
   aa660:	00ab53c0 	call	ab53c <__unpack_d>
   aa664:	d9000f04 	addi	r4,sp,60
   aa668:	d9400504 	addi	r5,sp,20
   aa66c:	00ab53c0 	call	ab53c <__unpack_d>
   aa670:	d9000a04 	addi	r4,sp,40
   aa674:	d9400504 	addi	r5,sp,20
   aa678:	d80d883a 	mov	r6,sp
   aa67c:	00aa2ec0 	call	aa2ec <_fpadd_parts>
   aa680:	1009883a 	mov	r4,r2
   aa684:	00ab3180 	call	ab318 <__pack_d>
   aa688:	dfc01317 	ldw	ra,76(sp)
   aa68c:	dec01404 	addi	sp,sp,80
   aa690:	f800283a 	ret

000aa694 <__subdf3>:
   aa694:	deffec04 	addi	sp,sp,-80
   aa698:	d9001115 	stw	r4,68(sp)
   aa69c:	d9401215 	stw	r5,72(sp)
   aa6a0:	d9001104 	addi	r4,sp,68
   aa6a4:	d9400a04 	addi	r5,sp,40
   aa6a8:	dfc01315 	stw	ra,76(sp)
   aa6ac:	d9c01015 	stw	r7,64(sp)
   aa6b0:	d9800f15 	stw	r6,60(sp)
   aa6b4:	00ab53c0 	call	ab53c <__unpack_d>
   aa6b8:	d9000f04 	addi	r4,sp,60
   aa6bc:	d9400504 	addi	r5,sp,20
   aa6c0:	00ab53c0 	call	ab53c <__unpack_d>
   aa6c4:	d8800617 	ldw	r2,24(sp)
   aa6c8:	d9000a04 	addi	r4,sp,40
   aa6cc:	d9400504 	addi	r5,sp,20
   aa6d0:	d80d883a 	mov	r6,sp
   aa6d4:	1080005c 	xori	r2,r2,1
   aa6d8:	d8800615 	stw	r2,24(sp)
   aa6dc:	00aa2ec0 	call	aa2ec <_fpadd_parts>
   aa6e0:	1009883a 	mov	r4,r2
   aa6e4:	00ab3180 	call	ab318 <__pack_d>
   aa6e8:	dfc01317 	ldw	ra,76(sp)
   aa6ec:	dec01404 	addi	sp,sp,80
   aa6f0:	f800283a 	ret

000aa6f4 <__muldf3>:
   aa6f4:	deffe404 	addi	sp,sp,-112
   aa6f8:	d9001115 	stw	r4,68(sp)
   aa6fc:	d9401215 	stw	r5,72(sp)
   aa700:	d9001104 	addi	r4,sp,68
   aa704:	d9400a04 	addi	r5,sp,40
   aa708:	dfc01b15 	stw	ra,108(sp)
   aa70c:	d9800f15 	stw	r6,60(sp)
   aa710:	d9c01015 	stw	r7,64(sp)
   aa714:	ddc01a15 	stw	r23,104(sp)
   aa718:	dd801915 	stw	r22,100(sp)
   aa71c:	dd401815 	stw	r21,96(sp)
   aa720:	dd001715 	stw	r20,92(sp)
   aa724:	dcc01615 	stw	r19,88(sp)
   aa728:	dc801515 	stw	r18,84(sp)
   aa72c:	dc401415 	stw	r17,80(sp)
   aa730:	dc001315 	stw	r16,76(sp)
   aa734:	00ab53c0 	call	ab53c <__unpack_d>
   aa738:	d9000f04 	addi	r4,sp,60
   aa73c:	d9400504 	addi	r5,sp,20
   aa740:	00ab53c0 	call	ab53c <__unpack_d>
   aa744:	d8c00a17 	ldw	r3,40(sp)
   aa748:	00800044 	movi	r2,1
   aa74c:	10c01136 	bltu	r2,r3,aa794 <__muldf3+0xa0>
   aa750:	d8c00b17 	ldw	r3,44(sp)
   aa754:	d8800617 	ldw	r2,24(sp)
   aa758:	d9000a04 	addi	r4,sp,40
   aa75c:	1884c03a 	cmpne	r2,r3,r2
   aa760:	d8800b15 	stw	r2,44(sp)
   aa764:	00ab3180 	call	ab318 <__pack_d>
   aa768:	dfc01b17 	ldw	ra,108(sp)
   aa76c:	ddc01a17 	ldw	r23,104(sp)
   aa770:	dd801917 	ldw	r22,100(sp)
   aa774:	dd401817 	ldw	r21,96(sp)
   aa778:	dd001717 	ldw	r20,92(sp)
   aa77c:	dcc01617 	ldw	r19,88(sp)
   aa780:	dc801517 	ldw	r18,84(sp)
   aa784:	dc401417 	ldw	r17,80(sp)
   aa788:	dc001317 	ldw	r16,76(sp)
   aa78c:	dec01c04 	addi	sp,sp,112
   aa790:	f800283a 	ret
   aa794:	d9000517 	ldw	r4,20(sp)
   aa798:	11000636 	bltu	r2,r4,aa7b4 <__muldf3+0xc0>
   aa79c:	d8800617 	ldw	r2,24(sp)
   aa7a0:	d8c00b17 	ldw	r3,44(sp)
   aa7a4:	d9000504 	addi	r4,sp,20
   aa7a8:	1884c03a 	cmpne	r2,r3,r2
   aa7ac:	d8800615 	stw	r2,24(sp)
   aa7b0:	003fec06 	br	aa764 <__muldf3+0x70>
   aa7b4:	00800104 	movi	r2,4
   aa7b8:	1880051e 	bne	r3,r2,aa7d0 <__muldf3+0xdc>
   aa7bc:	00800084 	movi	r2,2
   aa7c0:	20bfe31e 	bne	r4,r2,aa750 <__muldf3+0x5c>
   aa7c4:	010002f4 	movhi	r4,11
   aa7c8:	213bc604 	addi	r4,r4,-4328
   aa7cc:	003fe506 	br	aa764 <__muldf3+0x70>
   aa7d0:	2080031e 	bne	r4,r2,aa7e0 <__muldf3+0xec>
   aa7d4:	00800084 	movi	r2,2
   aa7d8:	18bffa26 	beq	r3,r2,aa7c4 <__muldf3+0xd0>
   aa7dc:	003fef06 	br	aa79c <__muldf3+0xa8>
   aa7e0:	00800084 	movi	r2,2
   aa7e4:	18bfda26 	beq	r3,r2,aa750 <__muldf3+0x5c>
   aa7e8:	20bfec26 	beq	r4,r2,aa79c <__muldf3+0xa8>
   aa7ec:	dc000d17 	ldw	r16,52(sp)
   aa7f0:	dd000817 	ldw	r20,32(sp)
   aa7f4:	dc800917 	ldw	r18,36(sp)
   aa7f8:	8009883a 	mov	r4,r16
   aa7fc:	000b883a 	mov	r5,zero
   aa800:	a00d883a 	mov	r6,r20
   aa804:	000f883a 	mov	r7,zero
   aa808:	00ab15c0 	call	ab15c <__muldi3>
   aa80c:	dc400e17 	ldw	r17,56(sp)
   aa810:	9009883a 	mov	r4,r18
   aa814:	800d883a 	mov	r6,r16
   aa818:	000b883a 	mov	r5,zero
   aa81c:	000f883a 	mov	r7,zero
   aa820:	102f883a 	mov	r23,r2
   aa824:	1827883a 	mov	r19,r3
   aa828:	00ab15c0 	call	ab15c <__muldi3>
   aa82c:	900d883a 	mov	r6,r18
   aa830:	8809883a 	mov	r4,r17
   aa834:	000b883a 	mov	r5,zero
   aa838:	000f883a 	mov	r7,zero
   aa83c:	102b883a 	mov	r21,r2
   aa840:	1821883a 	mov	r16,r3
   aa844:	00ab15c0 	call	ab15c <__muldi3>
   aa848:	8809883a 	mov	r4,r17
   aa84c:	000b883a 	mov	r5,zero
   aa850:	a00d883a 	mov	r6,r20
   aa854:	000f883a 	mov	r7,zero
   aa858:	102d883a 	mov	r22,r2
   aa85c:	1825883a 	mov	r18,r3
   aa860:	00ab15c0 	call	ab15c <__muldi3>
   aa864:	154b883a 	add	r5,r2,r21
   aa868:	2889803a 	cmpltu	r4,r5,r2
   aa86c:	1c07883a 	add	r3,r3,r16
   aa870:	20c9883a 	add	r4,r4,r3
   aa874:	24004b36 	bltu	r4,r16,aa9a4 <__muldf3+0x2b0>
   aa878:	8100011e 	bne	r16,r4,aa880 <__muldf3+0x18c>
   aa87c:	2d404936 	bltu	r5,r21,aa9a4 <__muldf3+0x2b0>
   aa880:	0011883a 	mov	r8,zero
   aa884:	0007883a 	mov	r3,zero
   aa888:	2ccb883a 	add	r5,r5,r19
   aa88c:	b80d883a 	mov	r6,r23
   aa890:	2cc0012e 	bgeu	r5,r19,aa898 <__muldf3+0x1a4>
   aa894:	02000044 	movi	r8,1
   aa898:	258f883a 	add	r7,r4,r22
   aa89c:	3909803a 	cmpltu	r4,r7,r4
   aa8a0:	da400c17 	ldw	r9,48(sp)
   aa8a4:	2489883a 	add	r4,r4,r18
   aa8a8:	d8800717 	ldw	r2,28(sp)
   aa8ac:	20c9883a 	add	r4,r4,r3
   aa8b0:	da800b17 	ldw	r10,44(sp)
   aa8b4:	d8c00617 	ldw	r3,24(sp)
   aa8b8:	3a11883a 	add	r8,r7,r8
   aa8bc:	4885883a 	add	r2,r9,r2
   aa8c0:	50c6c03a 	cmpne	r3,r10,r3
   aa8c4:	41cf803a 	cmpltu	r7,r8,r7
   aa8c8:	12400104 	addi	r9,r2,4
   aa8cc:	d8c00115 	stw	r3,4(sp)
   aa8d0:	3909883a 	add	r4,r7,r4
   aa8d4:	da400215 	stw	r9,8(sp)
   aa8d8:	03480034 	movhi	r13,8192
   aa8dc:	6b7fffc4 	addi	r13,r13,-1
   aa8e0:	4007883a 	mov	r3,r8
   aa8e4:	6900102e 	bgeu	r13,r4,aa928 <__muldf3+0x234>
   aa8e8:	10800144 	addi	r2,r2,5
   aa8ec:	180ed07a 	srli	r7,r3,1
   aa8f0:	18c0004c 	andi	r3,r3,1
   aa8f4:	201097fa 	slli	r8,r4,31
   aa8f8:	281697fa 	slli	r11,r5,31
   aa8fc:	2008d07a 	srli	r4,r4,1
   aa900:	3014d07a 	srli	r10,r6,1
   aa904:	2812d07a 	srli	r9,r5,1
   aa908:	1019883a 	mov	r12,r2
   aa90c:	18000226 	beq	r3,zero,aa918 <__muldf3+0x224>
   aa910:	5a8cb03a 	or	r6,r11,r10
   aa914:	49600034 	orhi	r5,r9,32768
   aa918:	41c6b03a 	or	r3,r8,r7
   aa91c:	10800044 	addi	r2,r2,1
   aa920:	693ff236 	bltu	r13,r4,aa8ec <__muldf3+0x1f8>
   aa924:	db000215 	stw	r12,8(sp)
   aa928:	03440034 	movhi	r13,4096
   aa92c:	6b7fffc4 	addi	r13,r13,-1
   aa930:	69001336 	bltu	r13,r4,aa980 <__muldf3+0x28c>
   aa934:	d8800217 	ldw	r2,8(sp)
   aa938:	10bfffc4 	addi	r2,r2,-1
   aa93c:	18d3883a 	add	r9,r3,r3
   aa940:	48c7803a 	cmpltu	r3,r9,r3
   aa944:	2109883a 	add	r4,r4,r4
   aa948:	190f883a 	add	r7,r3,r4
   aa94c:	3191883a 	add	r8,r6,r6
   aa950:	4197803a 	cmpltu	r11,r8,r6
   aa954:	2955883a 	add	r10,r5,r5
   aa958:	1019883a 	mov	r12,r2
   aa95c:	4807883a 	mov	r3,r9
   aa960:	3809883a 	mov	r4,r7
   aa964:	2800010e 	bge	r5,zero,aa96c <__muldf3+0x278>
   aa968:	48c00054 	ori	r3,r9,1
   aa96c:	400d883a 	mov	r6,r8
   aa970:	5a8b883a 	add	r5,r11,r10
   aa974:	10bfffc4 	addi	r2,r2,-1
   aa978:	69fff02e 	bgeu	r13,r7,aa93c <__muldf3+0x248>
   aa97c:	db000215 	stw	r12,8(sp)
   aa980:	18803fcc 	andi	r2,r3,255
   aa984:	01c02004 	movi	r7,128
   aa988:	11c00926 	beq	r2,r7,aa9b0 <__muldf3+0x2bc>
   aa98c:	008000c4 	movi	r2,3
   aa990:	d9000415 	stw	r4,16(sp)
   aa994:	d8c00315 	stw	r3,12(sp)
   aa998:	d8800015 	stw	r2,0(sp)
   aa99c:	d809883a 	mov	r4,sp
   aa9a0:	003f7006 	br	aa764 <__muldf3+0x70>
   aa9a4:	0011883a 	mov	r8,zero
   aa9a8:	00c00044 	movi	r3,1
   aa9ac:	003fb606 	br	aa888 <__muldf3+0x194>
   aa9b0:	19c0400c 	andi	r7,r3,256
   aa9b4:	383ff51e 	bne	r7,zero,aa98c <__muldf3+0x298>
   aa9b8:	314ab03a 	or	r5,r6,r5
   aa9bc:	283ff326 	beq	r5,zero,aa98c <__muldf3+0x298>
   aa9c0:	1885883a 	add	r2,r3,r2
   aa9c4:	10cb803a 	cmpltu	r5,r2,r3
   aa9c8:	00ffc004 	movi	r3,-256
   aa9cc:	10c6703a 	and	r3,r2,r3
   aa9d0:	2909883a 	add	r4,r5,r4
   aa9d4:	003fed06 	br	aa98c <__muldf3+0x298>

000aa9d8 <__divdf3>:
   aa9d8:	defff104 	addi	sp,sp,-60
   aa9dc:	d9000c15 	stw	r4,48(sp)
   aa9e0:	d9400d15 	stw	r5,52(sp)
   aa9e4:	d9000c04 	addi	r4,sp,48
   aa9e8:	d9400504 	addi	r5,sp,20
   aa9ec:	dfc00e15 	stw	ra,56(sp)
   aa9f0:	d9800a15 	stw	r6,40(sp)
   aa9f4:	d9c00b15 	stw	r7,44(sp)
   aa9f8:	00ab53c0 	call	ab53c <__unpack_d>
   aa9fc:	d9000a04 	addi	r4,sp,40
   aaa00:	d80b883a 	mov	r5,sp
   aaa04:	00ab53c0 	call	ab53c <__unpack_d>
   aaa08:	d8c00517 	ldw	r3,20(sp)
   aaa0c:	00800044 	movi	r2,1
   aaa10:	10c00536 	bltu	r2,r3,aaa28 <__divdf3+0x50>
   aaa14:	d9000504 	addi	r4,sp,20
   aaa18:	00ab3180 	call	ab318 <__pack_d>
   aaa1c:	dfc00e17 	ldw	ra,56(sp)
   aaa20:	dec00f04 	addi	sp,sp,60
   aaa24:	f800283a 	ret
   aaa28:	d9000017 	ldw	r4,0(sp)
   aaa2c:	11000536 	bltu	r2,r4,aaa44 <__divdf3+0x6c>
   aaa30:	d809883a 	mov	r4,sp
   aaa34:	00ab3180 	call	ab318 <__pack_d>
   aaa38:	dfc00e17 	ldw	ra,56(sp)
   aaa3c:	dec00f04 	addi	sp,sp,60
   aaa40:	f800283a 	ret
   aaa44:	d9800617 	ldw	r6,24(sp)
   aaa48:	d9400117 	ldw	r5,4(sp)
   aaa4c:	00800104 	movi	r2,4
   aaa50:	314af03a 	xor	r5,r6,r5
   aaa54:	d9400615 	stw	r5,24(sp)
   aaa58:	18800226 	beq	r3,r2,aaa64 <__divdf3+0x8c>
   aaa5c:	01400084 	movi	r5,2
   aaa60:	1940041e 	bne	r3,r5,aaa74 <__divdf3+0x9c>
   aaa64:	193feb1e 	bne	r3,r4,aaa14 <__divdf3+0x3c>
   aaa68:	010002f4 	movhi	r4,11
   aaa6c:	213bc604 	addi	r4,r4,-4328
   aaa70:	003fe906 	br	aaa18 <__divdf3+0x40>
   aaa74:	20803326 	beq	r4,r2,aab44 <__divdf3+0x16c>
   aaa78:	21403726 	beq	r4,r5,aab58 <__divdf3+0x180>
   aaa7c:	d8800217 	ldw	r2,8(sp)
   aaa80:	d9000717 	ldw	r4,28(sp)
   aaa84:	d8c00917 	ldw	r3,36(sp)
   aaa88:	da000417 	ldw	r8,16(sp)
   aaa8c:	2089c83a 	sub	r4,r4,r2
   aaa90:	d9000715 	stw	r4,28(sp)
   aaa94:	d8800817 	ldw	r2,32(sp)
   aaa98:	dbc00317 	ldw	r15,12(sp)
   aaa9c:	1a000236 	bltu	r3,r8,aaaa8 <__divdf3+0xd0>
   aaaa0:	40c0081e 	bne	r8,r3,aaac4 <__divdf3+0xec>
   aaaa4:	13c0072e 	bgeu	r2,r15,aaac4 <__divdf3+0xec>
   aaaa8:	108b883a 	add	r5,r2,r2
   aaaac:	288d803a 	cmpltu	r6,r5,r2
   aaab0:	18c7883a 	add	r3,r3,r3
   aaab4:	213fffc4 	addi	r4,r4,-1
   aaab8:	2805883a 	mov	r2,r5
   aaabc:	30c7883a 	add	r3,r6,r3
   aaac0:	d9000715 	stw	r4,28(sp)
   aaac4:	01400f44 	movi	r5,61
   aaac8:	000f883a 	mov	r7,zero
   aaacc:	01040034 	movhi	r4,4096
   aaad0:	0019883a 	mov	r12,zero
   aaad4:	001b883a 	mov	r13,zero
   aaad8:	201697fa 	slli	r11,r4,31
   aaadc:	3814d07a 	srli	r10,r7,1
   aaae0:	297fffc4 	addi	r5,r5,-1
   aaae4:	1a000936 	bltu	r3,r8,aab0c <__divdf3+0x134>
   aaae8:	13cdc83a 	sub	r6,r2,r15
   aaaec:	1193803a 	cmpltu	r9,r2,r6
   aaaf0:	1a1dc83a 	sub	r14,r3,r8
   aaaf4:	40c0011e 	bne	r8,r3,aaafc <__divdf3+0x124>
   aaaf8:	13c00436 	bltu	r2,r15,aab0c <__divdf3+0x134>
   aaafc:	3005883a 	mov	r2,r6
   aab00:	7247c83a 	sub	r3,r14,r9
   aab04:	61d8b03a 	or	r12,r12,r7
   aab08:	691ab03a 	or	r13,r13,r4
   aab0c:	108d883a 	add	r6,r2,r2
   aab10:	3093803a 	cmpltu	r9,r6,r2
   aab14:	18c7883a 	add	r3,r3,r3
   aab18:	5a8eb03a 	or	r7,r11,r10
   aab1c:	2008d07a 	srli	r4,r4,1
   aab20:	3005883a 	mov	r2,r6
   aab24:	48c7883a 	add	r3,r9,r3
   aab28:	283feb1e 	bne	r5,zero,aaad8 <__divdf3+0x100>
   aab2c:	61003fcc 	andi	r4,r12,255
   aab30:	01402004 	movi	r5,128
   aab34:	21400b26 	beq	r4,r5,aab64 <__divdf3+0x18c>
   aab38:	db000815 	stw	r12,32(sp)
   aab3c:	db400915 	stw	r13,36(sp)
   aab40:	003fb406 	br	aaa14 <__divdf3+0x3c>
   aab44:	d8000815 	stw	zero,32(sp)
   aab48:	d8000915 	stw	zero,36(sp)
   aab4c:	d8000715 	stw	zero,28(sp)
   aab50:	d9000504 	addi	r4,sp,20
   aab54:	003fb006 	br	aaa18 <__divdf3+0x40>
   aab58:	d8800515 	stw	r2,20(sp)
   aab5c:	d9000504 	addi	r4,sp,20
   aab60:	003fad06 	br	aaa18 <__divdf3+0x40>
   aab64:	6140400c 	andi	r5,r12,256
   aab68:	283ff31e 	bne	r5,zero,aab38 <__divdf3+0x160>
   aab6c:	30c4b03a 	or	r2,r6,r3
   aab70:	103ff126 	beq	r2,zero,aab38 <__divdf3+0x160>
   aab74:	6109883a 	add	r4,r12,r4
   aab78:	2305803a 	cmpltu	r2,r4,r12
   aab7c:	033fc004 	movi	r12,-256
   aab80:	2318703a 	and	r12,r4,r12
   aab84:	135b883a 	add	r13,r2,r13
   aab88:	003feb06 	br	aab38 <__divdf3+0x160>

000aab8c <__eqdf2>:
   aab8c:	defff104 	addi	sp,sp,-60
   aab90:	d9000c15 	stw	r4,48(sp)
   aab94:	d9400d15 	stw	r5,52(sp)
   aab98:	d9000c04 	addi	r4,sp,48
   aab9c:	d9400504 	addi	r5,sp,20
   aaba0:	dfc00e15 	stw	ra,56(sp)
   aaba4:	d9800a15 	stw	r6,40(sp)
   aaba8:	d9c00b15 	stw	r7,44(sp)
   aabac:	00ab53c0 	call	ab53c <__unpack_d>
   aabb0:	d9000a04 	addi	r4,sp,40
   aabb4:	d80b883a 	mov	r5,sp
   aabb8:	00ab53c0 	call	ab53c <__unpack_d>
   aabbc:	d8c00517 	ldw	r3,20(sp)
   aabc0:	00800044 	movi	r2,1
   aabc4:	10c0052e 	bgeu	r2,r3,aabdc <__eqdf2+0x50>
   aabc8:	d8c00017 	ldw	r3,0(sp)
   aabcc:	10c0032e 	bgeu	r2,r3,aabdc <__eqdf2+0x50>
   aabd0:	d9000504 	addi	r4,sp,20
   aabd4:	d80b883a 	mov	r5,sp
   aabd8:	00ab6400 	call	ab640 <__fpcmp_parts_d>
   aabdc:	dfc00e17 	ldw	ra,56(sp)
   aabe0:	dec00f04 	addi	sp,sp,60
   aabe4:	f800283a 	ret

000aabe8 <__nedf2>:
   aabe8:	defff104 	addi	sp,sp,-60
   aabec:	d9000c15 	stw	r4,48(sp)
   aabf0:	d9400d15 	stw	r5,52(sp)
   aabf4:	d9000c04 	addi	r4,sp,48
   aabf8:	d9400504 	addi	r5,sp,20
   aabfc:	dfc00e15 	stw	ra,56(sp)
   aac00:	d9800a15 	stw	r6,40(sp)
   aac04:	d9c00b15 	stw	r7,44(sp)
   aac08:	00ab53c0 	call	ab53c <__unpack_d>
   aac0c:	d9000a04 	addi	r4,sp,40
   aac10:	d80b883a 	mov	r5,sp
   aac14:	00ab53c0 	call	ab53c <__unpack_d>
   aac18:	d8c00517 	ldw	r3,20(sp)
   aac1c:	00800044 	movi	r2,1
   aac20:	10c0052e 	bgeu	r2,r3,aac38 <__nedf2+0x50>
   aac24:	d8c00017 	ldw	r3,0(sp)
   aac28:	10c0032e 	bgeu	r2,r3,aac38 <__nedf2+0x50>
   aac2c:	d9000504 	addi	r4,sp,20
   aac30:	d80b883a 	mov	r5,sp
   aac34:	00ab6400 	call	ab640 <__fpcmp_parts_d>
   aac38:	dfc00e17 	ldw	ra,56(sp)
   aac3c:	dec00f04 	addi	sp,sp,60
   aac40:	f800283a 	ret

000aac44 <__gtdf2>:
   aac44:	defff104 	addi	sp,sp,-60
   aac48:	d9000c15 	stw	r4,48(sp)
   aac4c:	d9400d15 	stw	r5,52(sp)
   aac50:	d9000c04 	addi	r4,sp,48
   aac54:	d9400504 	addi	r5,sp,20
   aac58:	dfc00e15 	stw	ra,56(sp)
   aac5c:	d9800a15 	stw	r6,40(sp)
   aac60:	d9c00b15 	stw	r7,44(sp)
   aac64:	00ab53c0 	call	ab53c <__unpack_d>
   aac68:	d9000a04 	addi	r4,sp,40
   aac6c:	d80b883a 	mov	r5,sp
   aac70:	00ab53c0 	call	ab53c <__unpack_d>
   aac74:	d8c00517 	ldw	r3,20(sp)
   aac78:	00800044 	movi	r2,1
   aac7c:	10c0082e 	bgeu	r2,r3,aaca0 <__gtdf2+0x5c>
   aac80:	d8c00017 	ldw	r3,0(sp)
   aac84:	10c0062e 	bgeu	r2,r3,aaca0 <__gtdf2+0x5c>
   aac88:	d9000504 	addi	r4,sp,20
   aac8c:	d80b883a 	mov	r5,sp
   aac90:	00ab6400 	call	ab640 <__fpcmp_parts_d>
   aac94:	dfc00e17 	ldw	ra,56(sp)
   aac98:	dec00f04 	addi	sp,sp,60
   aac9c:	f800283a 	ret
   aaca0:	00bfffc4 	movi	r2,-1
   aaca4:	003ffb06 	br	aac94 <__gtdf2+0x50>

000aaca8 <__gedf2>:
   aaca8:	defff104 	addi	sp,sp,-60
   aacac:	d9000c15 	stw	r4,48(sp)
   aacb0:	d9400d15 	stw	r5,52(sp)
   aacb4:	d9000c04 	addi	r4,sp,48
   aacb8:	d9400504 	addi	r5,sp,20
   aacbc:	dfc00e15 	stw	ra,56(sp)
   aacc0:	d9800a15 	stw	r6,40(sp)
   aacc4:	d9c00b15 	stw	r7,44(sp)
   aacc8:	00ab53c0 	call	ab53c <__unpack_d>
   aaccc:	d9000a04 	addi	r4,sp,40
   aacd0:	d80b883a 	mov	r5,sp
   aacd4:	00ab53c0 	call	ab53c <__unpack_d>
   aacd8:	d8c00517 	ldw	r3,20(sp)
   aacdc:	00800044 	movi	r2,1
   aace0:	10c0082e 	bgeu	r2,r3,aad04 <__gedf2+0x5c>
   aace4:	d8c00017 	ldw	r3,0(sp)
   aace8:	10c0062e 	bgeu	r2,r3,aad04 <__gedf2+0x5c>
   aacec:	d9000504 	addi	r4,sp,20
   aacf0:	d80b883a 	mov	r5,sp
   aacf4:	00ab6400 	call	ab640 <__fpcmp_parts_d>
   aacf8:	dfc00e17 	ldw	ra,56(sp)
   aacfc:	dec00f04 	addi	sp,sp,60
   aad00:	f800283a 	ret
   aad04:	00bfffc4 	movi	r2,-1
   aad08:	003ffb06 	br	aacf8 <__gedf2+0x50>

000aad0c <__ltdf2>:
   aad0c:	defff104 	addi	sp,sp,-60
   aad10:	d9000c15 	stw	r4,48(sp)
   aad14:	d9400d15 	stw	r5,52(sp)
   aad18:	d9000c04 	addi	r4,sp,48
   aad1c:	d9400504 	addi	r5,sp,20
   aad20:	dfc00e15 	stw	ra,56(sp)
   aad24:	d9800a15 	stw	r6,40(sp)
   aad28:	d9c00b15 	stw	r7,44(sp)
   aad2c:	00ab53c0 	call	ab53c <__unpack_d>
   aad30:	d9000a04 	addi	r4,sp,40
   aad34:	d80b883a 	mov	r5,sp
   aad38:	00ab53c0 	call	ab53c <__unpack_d>
   aad3c:	d8c00517 	ldw	r3,20(sp)
   aad40:	00800044 	movi	r2,1
   aad44:	10c0052e 	bgeu	r2,r3,aad5c <__ltdf2+0x50>
   aad48:	d8c00017 	ldw	r3,0(sp)
   aad4c:	10c0032e 	bgeu	r2,r3,aad5c <__ltdf2+0x50>
   aad50:	d9000504 	addi	r4,sp,20
   aad54:	d80b883a 	mov	r5,sp
   aad58:	00ab6400 	call	ab640 <__fpcmp_parts_d>
   aad5c:	dfc00e17 	ldw	ra,56(sp)
   aad60:	dec00f04 	addi	sp,sp,60
   aad64:	f800283a 	ret

000aad68 <__floatsidf>:
   aad68:	2004d7fa 	srli	r2,r4,31
   aad6c:	defff904 	addi	sp,sp,-28
   aad70:	00c000c4 	movi	r3,3
   aad74:	dfc00615 	stw	ra,24(sp)
   aad78:	dc000515 	stw	r16,20(sp)
   aad7c:	d8c00015 	stw	r3,0(sp)
   aad80:	d8800115 	stw	r2,4(sp)
   aad84:	2000081e 	bne	r4,zero,aada8 <__floatsidf+0x40>
   aad88:	00800084 	movi	r2,2
   aad8c:	d8800015 	stw	r2,0(sp)
   aad90:	d809883a 	mov	r4,sp
   aad94:	00ab3180 	call	ab318 <__pack_d>
   aad98:	dfc00617 	ldw	ra,24(sp)
   aad9c:	dc000517 	ldw	r16,20(sp)
   aada0:	dec00704 	addi	sp,sp,28
   aada4:	f800283a 	ret
   aada8:	00c00f04 	movi	r3,60
   aadac:	d8c00215 	stw	r3,8(sp)
   aadb0:	10000f1e 	bne	r2,zero,aadf0 <__floatsidf+0x88>
   aadb4:	2021883a 	mov	r16,r4
   aadb8:	8009883a 	mov	r4,r16
   aadbc:	00ab26c0 	call	ab26c <__clzsi2>
   aadc0:	11000744 	addi	r4,r2,29
   aadc4:	0100110e 	bge	zero,r4,aae0c <__floatsidf+0xa4>
   aadc8:	10ffff44 	addi	r3,r2,-3
   aadcc:	18001216 	blt	r3,zero,aae18 <__floatsidf+0xb0>
   aadd0:	80c6983a 	sll	r3,r16,r3
   aadd4:	0009883a 	mov	r4,zero
   aadd8:	014007c4 	movi	r5,31
   aaddc:	2885c83a 	sub	r2,r5,r2
   aade0:	d9000315 	stw	r4,12(sp)
   aade4:	d8c00415 	stw	r3,16(sp)
   aade8:	d8800215 	stw	r2,8(sp)
   aadec:	003fe806 	br	aad90 <__floatsidf+0x28>
   aadf0:	00a00034 	movhi	r2,32768
   aadf4:	20800e26 	beq	r4,r2,aae30 <__floatsidf+0xc8>
   aadf8:	0121c83a 	sub	r16,zero,r4
   aadfc:	8009883a 	mov	r4,r16
   aae00:	00ab26c0 	call	ab26c <__clzsi2>
   aae04:	11000744 	addi	r4,r2,29
   aae08:	013fef16 	blt	zero,r4,aadc8 <__floatsidf+0x60>
   aae0c:	dc000315 	stw	r16,12(sp)
   aae10:	d8000415 	stw	zero,16(sp)
   aae14:	003fde06 	br	aad90 <__floatsidf+0x28>
   aae18:	800ad07a 	srli	r5,r16,1
   aae1c:	00c007c4 	movi	r3,31
   aae20:	1907c83a 	sub	r3,r3,r4
   aae24:	28c6d83a 	srl	r3,r5,r3
   aae28:	8108983a 	sll	r4,r16,r4
   aae2c:	003fea06 	br	aadd8 <__floatsidf+0x70>
   aae30:	0005883a 	mov	r2,zero
   aae34:	00f07834 	movhi	r3,49632
   aae38:	003fd706 	br	aad98 <__floatsidf+0x30>

000aae3c <__fixdfsi>:
   aae3c:	defff804 	addi	sp,sp,-32
   aae40:	d9000515 	stw	r4,20(sp)
   aae44:	d9400615 	stw	r5,24(sp)
   aae48:	d9000504 	addi	r4,sp,20
   aae4c:	d80b883a 	mov	r5,sp
   aae50:	dfc00715 	stw	ra,28(sp)
   aae54:	00ab53c0 	call	ab53c <__unpack_d>
   aae58:	d8800017 	ldw	r2,0(sp)
   aae5c:	00c00084 	movi	r3,2
   aae60:	10c01c26 	beq	r2,r3,aaed4 <__fixdfsi+0x98>
   aae64:	00c00044 	movi	r3,1
   aae68:	18801a2e 	bgeu	r3,r2,aaed4 <__fixdfsi+0x98>
   aae6c:	00c00104 	movi	r3,4
   aae70:	10c01126 	beq	r2,r3,aaeb8 <__fixdfsi+0x7c>
   aae74:	d8800217 	ldw	r2,8(sp)
   aae78:	10001616 	blt	r2,zero,aaed4 <__fixdfsi+0x98>
   aae7c:	00c00784 	movi	r3,30
   aae80:	18800d16 	blt	r3,r2,aaeb8 <__fixdfsi+0x7c>
   aae84:	00c00f04 	movi	r3,60
   aae88:	1885c83a 	sub	r2,r3,r2
   aae8c:	10fff804 	addi	r3,r2,-32
   aae90:	d9400317 	ldw	r5,12(sp)
   aae94:	d9000417 	ldw	r4,16(sp)
   aae98:	18001616 	blt	r3,zero,aaef4 <__fixdfsi+0xb8>
   aae9c:	20c4d83a 	srl	r2,r4,r3
   aaea0:	d8c00117 	ldw	r3,4(sp)
   aaea4:	18000126 	beq	r3,zero,aaeac <__fixdfsi+0x70>
   aaea8:	0085c83a 	sub	r2,zero,r2
   aaeac:	dfc00717 	ldw	ra,28(sp)
   aaeb0:	dec00804 	addi	sp,sp,32
   aaeb4:	f800283a 	ret
   aaeb8:	d8800117 	ldw	r2,4(sp)
   aaebc:	1000091e 	bne	r2,zero,aaee4 <__fixdfsi+0xa8>
   aaec0:	00a00034 	movhi	r2,32768
   aaec4:	10bfffc4 	addi	r2,r2,-1
   aaec8:	dfc00717 	ldw	ra,28(sp)
   aaecc:	dec00804 	addi	sp,sp,32
   aaed0:	f800283a 	ret
   aaed4:	0005883a 	mov	r2,zero
   aaed8:	dfc00717 	ldw	ra,28(sp)
   aaedc:	dec00804 	addi	sp,sp,32
   aaee0:	f800283a 	ret
   aaee4:	00a00034 	movhi	r2,32768
   aaee8:	dfc00717 	ldw	ra,28(sp)
   aaeec:	dec00804 	addi	sp,sp,32
   aaef0:	f800283a 	ret
   aaef4:	2008907a 	slli	r4,r4,1
   aaef8:	018007c4 	movi	r6,31
   aaefc:	308dc83a 	sub	r6,r6,r2
   aaf00:	2188983a 	sll	r4,r4,r6
   aaf04:	2884d83a 	srl	r2,r5,r2
   aaf08:	2084b03a 	or	r2,r4,r2
   aaf0c:	003fe406 	br	aaea0 <__fixdfsi+0x64>

000aaf10 <__floatunsidf>:
   aaf10:	defff904 	addi	sp,sp,-28
   aaf14:	dc000515 	stw	r16,20(sp)
   aaf18:	dfc00615 	stw	ra,24(sp)
   aaf1c:	d8000115 	stw	zero,4(sp)
   aaf20:	2021883a 	mov	r16,r4
   aaf24:	20001726 	beq	r4,zero,aaf84 <__floatunsidf+0x74>
   aaf28:	008000c4 	movi	r2,3
   aaf2c:	d8800015 	stw	r2,0(sp)
   aaf30:	00800f04 	movi	r2,60
   aaf34:	d8800215 	stw	r2,8(sp)
   aaf38:	00ab26c0 	call	ab26c <__clzsi2>
   aaf3c:	10c00744 	addi	r3,r2,29
   aaf40:	18001816 	blt	r3,zero,aafa4 <__floatunsidf+0x94>
   aaf44:	18002d26 	beq	r3,zero,aaffc <__floatunsidf+0xec>
   aaf48:	113fff44 	addi	r4,r2,-3
   aaf4c:	20002e16 	blt	r4,zero,ab008 <__floatunsidf+0xf8>
   aaf50:	8108983a 	sll	r4,r16,r4
   aaf54:	0021883a 	mov	r16,zero
   aaf58:	014007c4 	movi	r5,31
   aaf5c:	2885c83a 	sub	r2,r5,r2
   aaf60:	dc000315 	stw	r16,12(sp)
   aaf64:	d9000415 	stw	r4,16(sp)
   aaf68:	d8800215 	stw	r2,8(sp)
   aaf6c:	d809883a 	mov	r4,sp
   aaf70:	00ab3180 	call	ab318 <__pack_d>
   aaf74:	dfc00617 	ldw	ra,24(sp)
   aaf78:	dc000517 	ldw	r16,20(sp)
   aaf7c:	dec00704 	addi	sp,sp,28
   aaf80:	f800283a 	ret
   aaf84:	00800084 	movi	r2,2
   aaf88:	d809883a 	mov	r4,sp
   aaf8c:	d8800015 	stw	r2,0(sp)
   aaf90:	00ab3180 	call	ab318 <__pack_d>
   aaf94:	dfc00617 	ldw	ra,24(sp)
   aaf98:	dc000517 	ldw	r16,20(sp)
   aaf9c:	dec00704 	addi	sp,sp,28
   aafa0:	f800283a 	ret
   aafa4:	00c7c83a 	sub	r3,zero,r3
   aafa8:	193ff804 	addi	r4,r3,-32
   aafac:	20001c16 	blt	r4,zero,ab020 <__floatunsidf+0x110>
   aafb0:	000b883a 	mov	r5,zero
   aafb4:	2009d7fa 	srai	r4,r4,31
   aafb8:	80c6d83a 	srl	r3,r16,r3
   aafbc:	297fffc4 	addi	r5,r5,-1
   aafc0:	2c20703a 	and	r16,r5,r16
   aafc4:	8020c03a 	cmpne	r16,r16,zero
   aafc8:	1906703a 	and	r3,r3,r4
   aafcc:	010007c4 	movi	r4,31
   aafd0:	80c6b03a 	or	r3,r16,r3
   aafd4:	2085c83a 	sub	r2,r4,r2
   aafd8:	d809883a 	mov	r4,sp
   aafdc:	d8c00315 	stw	r3,12(sp)
   aafe0:	d8000415 	stw	zero,16(sp)
   aafe4:	d8800215 	stw	r2,8(sp)
   aafe8:	00ab3180 	call	ab318 <__pack_d>
   aafec:	dfc00617 	ldw	ra,24(sp)
   aaff0:	dc000517 	ldw	r16,20(sp)
   aaff4:	dec00704 	addi	sp,sp,28
   aaff8:	f800283a 	ret
   aaffc:	dc000315 	stw	r16,12(sp)
   ab000:	d8000415 	stw	zero,16(sp)
   ab004:	003fd906 	br	aaf6c <__floatunsidf+0x5c>
   ab008:	800ad07a 	srli	r5,r16,1
   ab00c:	010007c4 	movi	r4,31
   ab010:	20c9c83a 	sub	r4,r4,r3
   ab014:	2908d83a 	srl	r4,r5,r4
   ab018:	80e0983a 	sll	r16,r16,r3
   ab01c:	003fce06 	br	aaf58 <__floatunsidf+0x48>
   ab020:	01400044 	movi	r5,1
   ab024:	28ca983a 	sll	r5,r5,r3
   ab028:	003fe206 	br	aafb4 <__floatunsidf+0xa4>

000ab02c <udivmodsi4>:
   ab02c:	2005883a 	mov	r2,r4
   ab030:	2900182e 	bgeu	r5,r4,ab094 <udivmodsi4+0x68>
   ab034:	28001716 	blt	r5,zero,ab094 <udivmodsi4+0x68>
   ab038:	01000804 	movi	r4,32
   ab03c:	00c00044 	movi	r3,1
   ab040:	00000206 	br	ab04c <udivmodsi4+0x20>
   ab044:	20001126 	beq	r4,zero,ab08c <udivmodsi4+0x60>
   ab048:	28000516 	blt	r5,zero,ab060 <udivmodsi4+0x34>
   ab04c:	294b883a 	add	r5,r5,r5
   ab050:	213fffc4 	addi	r4,r4,-1
   ab054:	18c7883a 	add	r3,r3,r3
   ab058:	28bffa36 	bltu	r5,r2,ab044 <udivmodsi4+0x18>
   ab05c:	18000b26 	beq	r3,zero,ab08c <udivmodsi4+0x60>
   ab060:	0009883a 	mov	r4,zero
   ab064:	11400236 	bltu	r2,r5,ab070 <udivmodsi4+0x44>
   ab068:	1145c83a 	sub	r2,r2,r5
   ab06c:	20c8b03a 	or	r4,r4,r3
   ab070:	1806d07a 	srli	r3,r3,1
   ab074:	280ad07a 	srli	r5,r5,1
   ab078:	183ffa1e 	bne	r3,zero,ab064 <udivmodsi4+0x38>
   ab07c:	3000021e 	bne	r6,zero,ab088 <udivmodsi4+0x5c>
   ab080:	2005883a 	mov	r2,r4
   ab084:	f800283a 	ret
   ab088:	f800283a 	ret
   ab08c:	0009883a 	mov	r4,zero
   ab090:	003ffa06 	br	ab07c <udivmodsi4+0x50>
   ab094:	00c00044 	movi	r3,1
   ab098:	0009883a 	mov	r4,zero
   ab09c:	003ff106 	br	ab064 <udivmodsi4+0x38>

000ab0a0 <__divsi3>:
   ab0a0:	defffe04 	addi	sp,sp,-8
   ab0a4:	dfc00115 	stw	ra,4(sp)
   ab0a8:	dc000015 	stw	r16,0(sp)
   ab0ac:	20000a16 	blt	r4,zero,ab0d8 <__divsi3+0x38>
   ab0b0:	0021883a 	mov	r16,zero
   ab0b4:	28000b16 	blt	r5,zero,ab0e4 <__divsi3+0x44>
   ab0b8:	000d883a 	mov	r6,zero
   ab0bc:	00ab02c0 	call	ab02c <udivmodsi4>
   ab0c0:	80000126 	beq	r16,zero,ab0c8 <__divsi3+0x28>
   ab0c4:	0085c83a 	sub	r2,zero,r2
   ab0c8:	dfc00117 	ldw	ra,4(sp)
   ab0cc:	dc000017 	ldw	r16,0(sp)
   ab0d0:	dec00204 	addi	sp,sp,8
   ab0d4:	f800283a 	ret
   ab0d8:	0109c83a 	sub	r4,zero,r4
   ab0dc:	04000044 	movi	r16,1
   ab0e0:	283ff50e 	bge	r5,zero,ab0b8 <__divsi3+0x18>
   ab0e4:	014bc83a 	sub	r5,zero,r5
   ab0e8:	8400005c 	xori	r16,r16,1
   ab0ec:	003ff206 	br	ab0b8 <__divsi3+0x18>

000ab0f0 <__modsi3>:
   ab0f0:	deffff04 	addi	sp,sp,-4
   ab0f4:	dfc00015 	stw	ra,0(sp)
   ab0f8:	20000516 	blt	r4,zero,ab110 <__modsi3+0x20>
   ab0fc:	28000c16 	blt	r5,zero,ab130 <__modsi3+0x40>
   ab100:	01800044 	movi	r6,1
   ab104:	dfc00017 	ldw	ra,0(sp)
   ab108:	dec00104 	addi	sp,sp,4
   ab10c:	00ab02c1 	jmpi	ab02c <udivmodsi4>
   ab110:	0109c83a 	sub	r4,zero,r4
   ab114:	28000b16 	blt	r5,zero,ab144 <__modsi3+0x54>
   ab118:	01800044 	movi	r6,1
   ab11c:	00ab02c0 	call	ab02c <udivmodsi4>
   ab120:	0085c83a 	sub	r2,zero,r2
   ab124:	dfc00017 	ldw	ra,0(sp)
   ab128:	dec00104 	addi	sp,sp,4
   ab12c:	f800283a 	ret
   ab130:	014bc83a 	sub	r5,zero,r5
   ab134:	01800044 	movi	r6,1
   ab138:	dfc00017 	ldw	ra,0(sp)
   ab13c:	dec00104 	addi	sp,sp,4
   ab140:	00ab02c1 	jmpi	ab02c <udivmodsi4>
   ab144:	014bc83a 	sub	r5,zero,r5
   ab148:	003ff306 	br	ab118 <__modsi3+0x28>

000ab14c <__udivsi3>:
   ab14c:	000d883a 	mov	r6,zero
   ab150:	00ab02c1 	jmpi	ab02c <udivmodsi4>

000ab154 <__umodsi3>:
   ab154:	01800044 	movi	r6,1
   ab158:	00ab02c1 	jmpi	ab02c <udivmodsi4>

000ab15c <__muldi3>:
   ab15c:	defff604 	addi	sp,sp,-40
   ab160:	dd400515 	stw	r21,20(sp)
   ab164:	dd000415 	stw	r20,16(sp)
   ab168:	257fffcc 	andi	r21,r4,65535
   ab16c:	353fffcc 	andi	r20,r6,65535
   ab170:	dcc00315 	stw	r19,12(sp)
   ab174:	3026d43a 	srli	r19,r6,16
   ab178:	dd800615 	stw	r22,24(sp)
   ab17c:	dc800215 	stw	r18,8(sp)
   ab180:	dc400115 	stw	r17,4(sp)
   ab184:	2024d43a 	srli	r18,r4,16
   ab188:	2023883a 	mov	r17,r4
   ab18c:	282d883a 	mov	r22,r5
   ab190:	a009883a 	mov	r4,r20
   ab194:	a80b883a 	mov	r5,r21
   ab198:	dfc00915 	stw	ra,36(sp)
   ab19c:	df000815 	stw	fp,32(sp)
   ab1a0:	ddc00715 	stw	r23,28(sp)
   ab1a4:	3839883a 	mov	fp,r7
   ab1a8:	dc000015 	stw	r16,0(sp)
   ab1ac:	3021883a 	mov	r16,r6
   ab1b0:	00a118c0 	call	a118c <__mulsi3>
   ab1b4:	a80b883a 	mov	r5,r21
   ab1b8:	9809883a 	mov	r4,r19
   ab1bc:	102f883a 	mov	r23,r2
   ab1c0:	00a118c0 	call	a118c <__mulsi3>
   ab1c4:	a009883a 	mov	r4,r20
   ab1c8:	900b883a 	mov	r5,r18
   ab1cc:	102b883a 	mov	r21,r2
   ab1d0:	00a118c0 	call	a118c <__mulsi3>
   ab1d4:	9809883a 	mov	r4,r19
   ab1d8:	900b883a 	mov	r5,r18
   ab1dc:	1029883a 	mov	r20,r2
   ab1e0:	00a118c0 	call	a118c <__mulsi3>
   ab1e4:	1007883a 	mov	r3,r2
   ab1e8:	b804d43a 	srli	r2,r23,16
   ab1ec:	a549883a 	add	r4,r20,r21
   ab1f0:	2089883a 	add	r4,r4,r2
   ab1f4:	2500022e 	bgeu	r4,r20,ab200 <__muldi3+0xa4>
   ab1f8:	00800074 	movhi	r2,1
   ab1fc:	1887883a 	add	r3,r3,r2
   ab200:	200cd43a 	srli	r6,r4,16
   ab204:	2004943a 	slli	r2,r4,16
   ab208:	e00b883a 	mov	r5,fp
   ab20c:	8809883a 	mov	r4,r17
   ab210:	bdffffcc 	andi	r23,r23,65535
   ab214:	19a3883a 	add	r17,r3,r6
   ab218:	15ef883a 	add	r23,r2,r23
   ab21c:	00a118c0 	call	a118c <__mulsi3>
   ab220:	8009883a 	mov	r4,r16
   ab224:	b00b883a 	mov	r5,r22
   ab228:	1025883a 	mov	r18,r2
   ab22c:	00a118c0 	call	a118c <__mulsi3>
   ab230:	9085883a 	add	r2,r18,r2
   ab234:	1447883a 	add	r3,r2,r17
   ab238:	b805883a 	mov	r2,r23
   ab23c:	dfc00917 	ldw	ra,36(sp)
   ab240:	df000817 	ldw	fp,32(sp)
   ab244:	ddc00717 	ldw	r23,28(sp)
   ab248:	dd800617 	ldw	r22,24(sp)
   ab24c:	dd400517 	ldw	r21,20(sp)
   ab250:	dd000417 	ldw	r20,16(sp)
   ab254:	dcc00317 	ldw	r19,12(sp)
   ab258:	dc800217 	ldw	r18,8(sp)
   ab25c:	dc400117 	ldw	r17,4(sp)
   ab260:	dc000017 	ldw	r16,0(sp)
   ab264:	dec00a04 	addi	sp,sp,40
   ab268:	f800283a 	ret

000ab26c <__clzsi2>:
   ab26c:	00bfffd4 	movui	r2,65535
   ab270:	11000b36 	bltu	r2,r4,ab2a0 <__clzsi2+0x34>
   ab274:	00803fc4 	movi	r2,255
   ab278:	11001e2e 	bgeu	r2,r4,ab2f4 <__clzsi2+0x88>
   ab27c:	00c00204 	movi	r3,8
   ab280:	20c8d83a 	srl	r4,r4,r3
   ab284:	00c002f4 	movhi	r3,11
   ab288:	18fbcb04 	addi	r3,r3,-4308
   ab28c:	00800604 	movi	r2,24
   ab290:	1909883a 	add	r4,r3,r4
   ab294:	20c00003 	ldbu	r3,0(r4)
   ab298:	10c5c83a 	sub	r2,r2,r3
   ab29c:	f800283a 	ret
   ab2a0:	00804034 	movhi	r2,256
   ab2a4:	10bfffc4 	addi	r2,r2,-1
   ab2a8:	11000936 	bltu	r2,r4,ab2d0 <__clzsi2+0x64>
   ab2ac:	00800404 	movi	r2,16
   ab2b0:	1007883a 	mov	r3,r2
   ab2b4:	20c8d83a 	srl	r4,r4,r3
   ab2b8:	00c002f4 	movhi	r3,11
   ab2bc:	18fbcb04 	addi	r3,r3,-4308
   ab2c0:	1909883a 	add	r4,r3,r4
   ab2c4:	20c00003 	ldbu	r3,0(r4)
   ab2c8:	10c5c83a 	sub	r2,r2,r3
   ab2cc:	f800283a 	ret
   ab2d0:	00c00604 	movi	r3,24
   ab2d4:	20c8d83a 	srl	r4,r4,r3
   ab2d8:	00c002f4 	movhi	r3,11
   ab2dc:	18fbcb04 	addi	r3,r3,-4308
   ab2e0:	00800204 	movi	r2,8
   ab2e4:	1909883a 	add	r4,r3,r4
   ab2e8:	20c00003 	ldbu	r3,0(r4)
   ab2ec:	10c5c83a 	sub	r2,r2,r3
   ab2f0:	f800283a 	ret
   ab2f4:	0007883a 	mov	r3,zero
   ab2f8:	20c8d83a 	srl	r4,r4,r3
   ab2fc:	00c002f4 	movhi	r3,11
   ab300:	18fbcb04 	addi	r3,r3,-4308
   ab304:	00800804 	movi	r2,32
   ab308:	1909883a 	add	r4,r3,r4
   ab30c:	20c00003 	ldbu	r3,0(r4)
   ab310:	10c5c83a 	sub	r2,r2,r3
   ab314:	f800283a 	ret

000ab318 <__pack_d>:
   ab318:	20800017 	ldw	r2,0(r4)
   ab31c:	defff804 	addi	sp,sp,-32
   ab320:	dcc00315 	stw	r19,12(sp)
   ab324:	dc800215 	stw	r18,8(sp)
   ab328:	dfc00715 	stw	ra,28(sp)
   ab32c:	dd800615 	stw	r22,24(sp)
   ab330:	dd400515 	stw	r21,20(sp)
   ab334:	dd000415 	stw	r20,16(sp)
   ab338:	dc400115 	stw	r17,4(sp)
   ab33c:	dc000015 	stw	r16,0(sp)
   ab340:	04800044 	movi	r18,1
   ab344:	24400317 	ldw	r17,12(r4)
   ab348:	24000417 	ldw	r16,16(r4)
   ab34c:	24c00117 	ldw	r19,4(r4)
   ab350:	9080422e 	bgeu	r18,r2,ab45c <__pack_d+0x144>
   ab354:	00c00104 	movi	r3,4
   ab358:	10c03c26 	beq	r2,r3,ab44c <__pack_d+0x134>
   ab35c:	00c00084 	movi	r3,2
   ab360:	10c01926 	beq	r2,r3,ab3c8 <__pack_d+0xb0>
   ab364:	8c04b03a 	or	r2,r17,r16
   ab368:	10001726 	beq	r2,zero,ab3c8 <__pack_d+0xb0>
   ab36c:	21000217 	ldw	r4,8(r4)
   ab370:	00bf0084 	movi	r2,-1022
   ab374:	20804016 	blt	r4,r2,ab478 <__pack_d+0x160>
   ab378:	0080ffc4 	movi	r2,1023
   ab37c:	11003316 	blt	r2,r4,ab44c <__pack_d+0x134>
   ab380:	88803fcc 	andi	r2,r17,255
   ab384:	00c02004 	movi	r3,128
   ab388:	10c02926 	beq	r2,r3,ab430 <__pack_d+0x118>
   ab38c:	88801fc4 	addi	r2,r17,127
   ab390:	1463803a 	cmpltu	r17,r2,r17
   ab394:	8c21883a 	add	r16,r17,r16
   ab398:	1023883a 	mov	r17,r2
   ab39c:	00880034 	movhi	r2,8192
   ab3a0:	10bfffc4 	addi	r2,r2,-1
   ab3a4:	14001c36 	bltu	r2,r16,ab418 <__pack_d+0x100>
   ab3a8:	2100ffc4 	addi	r4,r4,1023
   ab3ac:	8006963a 	slli	r3,r16,24
   ab3b0:	8804d23a 	srli	r2,r17,8
   ab3b4:	8020913a 	slli	r16,r16,4
   ab3b8:	2101ffcc 	andi	r4,r4,2047
   ab3bc:	1884b03a 	or	r2,r3,r2
   ab3c0:	8020d33a 	srli	r16,r16,12
   ab3c4:	00000306 	br	ab3d4 <__pack_d+0xbc>
   ab3c8:	0009883a 	mov	r4,zero
   ab3cc:	0005883a 	mov	r2,zero
   ab3d0:	0021883a 	mov	r16,zero
   ab3d4:	2008953a 	slli	r4,r4,20
   ab3d8:	982697fa 	slli	r19,r19,31
   ab3dc:	00c00434 	movhi	r3,16
   ab3e0:	18ffffc4 	addi	r3,r3,-1
   ab3e4:	80e0703a 	and	r16,r16,r3
   ab3e8:	8106b03a 	or	r3,r16,r4
   ab3ec:	1cc6b03a 	or	r3,r3,r19
   ab3f0:	dfc00717 	ldw	ra,28(sp)
   ab3f4:	dd800617 	ldw	r22,24(sp)
   ab3f8:	dd400517 	ldw	r21,20(sp)
   ab3fc:	dd000417 	ldw	r20,16(sp)
   ab400:	dcc00317 	ldw	r19,12(sp)
   ab404:	dc800217 	ldw	r18,8(sp)
   ab408:	dc400117 	ldw	r17,4(sp)
   ab40c:	dc000017 	ldw	r16,0(sp)
   ab410:	dec00804 	addi	sp,sp,32
   ab414:	f800283a 	ret
   ab418:	800697fa 	slli	r3,r16,31
   ab41c:	8804d07a 	srli	r2,r17,1
   ab420:	21010004 	addi	r4,r4,1024
   ab424:	8020d07a 	srli	r16,r16,1
   ab428:	18a2b03a 	or	r17,r3,r2
   ab42c:	003fdf06 	br	ab3ac <__pack_d+0x94>
   ab430:	88c0400c 	andi	r3,r17,256
   ab434:	183fd926 	beq	r3,zero,ab39c <__pack_d+0x84>
   ab438:	8885883a 	add	r2,r17,r2
   ab43c:	1463803a 	cmpltu	r17,r2,r17
   ab440:	8c21883a 	add	r16,r17,r16
   ab444:	1023883a 	mov	r17,r2
   ab448:	003fd406 	br	ab39c <__pack_d+0x84>
   ab44c:	0101ffc4 	movi	r4,2047
   ab450:	0005883a 	mov	r2,zero
   ab454:	0021883a 	mov	r16,zero
   ab458:	003fde06 	br	ab3d4 <__pack_d+0xbc>
   ab45c:	84000234 	orhi	r16,r16,8
   ab460:	00c00434 	movhi	r3,16
   ab464:	18ffffc4 	addi	r3,r3,-1
   ab468:	8805883a 	mov	r2,r17
   ab46c:	80e0703a 	and	r16,r16,r3
   ab470:	0101ffc4 	movi	r4,2047
   ab474:	003fd706 	br	ab3d4 <__pack_d+0xbc>
   ab478:	1129c83a 	sub	r20,r2,r4
   ab47c:	00800e04 	movi	r2,56
   ab480:	15002716 	blt	r2,r20,ab520 <__pack_d+0x208>
   ab484:	800b883a 	mov	r5,r16
   ab488:	a00d883a 	mov	r6,r20
   ab48c:	8809883a 	mov	r4,r17
   ab490:	00ab7100 	call	ab710 <__lshrdi3>
   ab494:	9009883a 	mov	r4,r18
   ab498:	000b883a 	mov	r5,zero
   ab49c:	a00d883a 	mov	r6,r20
   ab4a0:	102d883a 	mov	r22,r2
   ab4a4:	182b883a 	mov	r21,r3
   ab4a8:	00ab7540 	call	ab754 <__ashldi3>
   ab4ac:	1009003a 	cmpeq	r4,r2,zero
   ab4b0:	1907c83a 	sub	r3,r3,r4
   ab4b4:	10bfffc4 	addi	r2,r2,-1
   ab4b8:	1c20703a 	and	r16,r3,r16
   ab4bc:	1444703a 	and	r2,r2,r17
   ab4c0:	1404b03a 	or	r2,r2,r16
   ab4c4:	1004c03a 	cmpne	r2,r2,zero
   ab4c8:	1584b03a 	or	r2,r2,r22
   ab4cc:	11003fcc 	andi	r4,r2,255
   ab4d0:	01402004 	movi	r5,128
   ab4d4:	a807883a 	mov	r3,r21
   ab4d8:	2140131e 	bne	r4,r5,ab528 <__pack_d+0x210>
   ab4dc:	1140400c 	andi	r5,r2,256
   ab4e0:	28000426 	beq	r5,zero,ab4f4 <__pack_d+0x1dc>
   ab4e4:	1109883a 	add	r4,r2,r4
   ab4e8:	2085803a 	cmpltu	r2,r4,r2
   ab4ec:	1547883a 	add	r3,r2,r21
   ab4f0:	2005883a 	mov	r2,r4
   ab4f4:	1808963a 	slli	r4,r3,24
   ab4f8:	1004d23a 	srli	r2,r2,8
   ab4fc:	1820913a 	slli	r16,r3,4
   ab500:	01440034 	movhi	r5,4096
   ab504:	297fffc4 	addi	r5,r5,-1
   ab508:	2084b03a 	or	r2,r4,r2
   ab50c:	8020d33a 	srli	r16,r16,12
   ab510:	01000044 	movi	r4,1
   ab514:	28ffaf36 	bltu	r5,r3,ab3d4 <__pack_d+0xbc>
   ab518:	0009883a 	mov	r4,zero
   ab51c:	003fad06 	br	ab3d4 <__pack_d+0xbc>
   ab520:	0005883a 	mov	r2,zero
   ab524:	0007883a 	mov	r3,zero
   ab528:	11001fc4 	addi	r4,r2,127
   ab52c:	2085803a 	cmpltu	r2,r4,r2
   ab530:	10c7883a 	add	r3,r2,r3
   ab534:	2005883a 	mov	r2,r4
   ab538:	003fee06 	br	ab4f4 <__pack_d+0x1dc>

000ab53c <__unpack_d>:
   ab53c:	21800117 	ldw	r6,4(r4)
   ab540:	20c00017 	ldw	r3,0(r4)
   ab544:	3004d7fa 	srli	r2,r6,31
   ab548:	3008d53a 	srli	r4,r6,20
   ab54c:	28800115 	stw	r2,4(r5)
   ab550:	2101ffcc 	andi	r4,r4,2047
   ab554:	00800434 	movhi	r2,16
   ab558:	10bfffc4 	addi	r2,r2,-1
   ab55c:	3084703a 	and	r2,r6,r2
   ab560:	20001a1e 	bne	r4,zero,ab5cc <__unpack_d+0x90>
   ab564:	1888b03a 	or	r4,r3,r2
   ab568:	20002626 	beq	r4,zero,ab604 <__unpack_d+0xc8>
   ab56c:	1808d63a 	srli	r4,r3,24
   ab570:	1004923a 	slli	r2,r2,8
   ab574:	01bf0084 	movi	r6,-1022
   ab578:	29800215 	stw	r6,8(r5)
   ab57c:	2084b03a 	or	r2,r4,r2
   ab580:	010000c4 	movi	r4,3
   ab584:	29000015 	stw	r4,0(r5)
   ab588:	02040034 	movhi	r8,4096
   ab58c:	423fffc4 	addi	r8,r8,-1
   ab590:	1806923a 	slli	r3,r3,8
   ab594:	40801836 	bltu	r8,r2,ab5f8 <__unpack_d+0xbc>
   ab598:	013f0044 	movi	r4,-1023
   ab59c:	18cd883a 	add	r6,r3,r3
   ab5a0:	30c7803a 	cmpltu	r3,r6,r3
   ab5a4:	1085883a 	add	r2,r2,r2
   ab5a8:	1885883a 	add	r2,r3,r2
   ab5ac:	200f883a 	mov	r7,r4
   ab5b0:	3007883a 	mov	r3,r6
   ab5b4:	213fffc4 	addi	r4,r4,-1
   ab5b8:	40bff82e 	bgeu	r8,r2,ab59c <__unpack_d+0x60>
   ab5bc:	29c00215 	stw	r7,8(r5)
   ab5c0:	28c00315 	stw	r3,12(r5)
   ab5c4:	28800415 	stw	r2,16(r5)
   ab5c8:	f800283a 	ret
   ab5cc:	01c1ffc4 	movi	r7,2047
   ab5d0:	21c00f26 	beq	r4,r7,ab610 <__unpack_d+0xd4>
   ab5d4:	180cd63a 	srli	r6,r3,24
   ab5d8:	1004923a 	slli	r2,r2,8
   ab5dc:	213f0044 	addi	r4,r4,-1023
   ab5e0:	1806923a 	slli	r3,r3,8
   ab5e4:	3084b03a 	or	r2,r6,r2
   ab5e8:	29000215 	stw	r4,8(r5)
   ab5ec:	010000c4 	movi	r4,3
   ab5f0:	10840034 	orhi	r2,r2,4096
   ab5f4:	29000015 	stw	r4,0(r5)
   ab5f8:	28c00315 	stw	r3,12(r5)
   ab5fc:	28800415 	stw	r2,16(r5)
   ab600:	f800283a 	ret
   ab604:	00800084 	movi	r2,2
   ab608:	28800015 	stw	r2,0(r5)
   ab60c:	f800283a 	ret
   ab610:	1888b03a 	or	r4,r3,r2
   ab614:	20000526 	beq	r4,zero,ab62c <__unpack_d+0xf0>
   ab618:	3180022c 	andhi	r6,r6,8
   ab61c:	30000626 	beq	r6,zero,ab638 <__unpack_d+0xfc>
   ab620:	01000044 	movi	r4,1
   ab624:	29000015 	stw	r4,0(r5)
   ab628:	003ff306 	br	ab5f8 <__unpack_d+0xbc>
   ab62c:	00800104 	movi	r2,4
   ab630:	28800015 	stw	r2,0(r5)
   ab634:	f800283a 	ret
   ab638:	28000015 	stw	zero,0(r5)
   ab63c:	003fee06 	br	ab5f8 <__unpack_d+0xbc>

000ab640 <__fpcmp_parts_d>:
   ab640:	20c00017 	ldw	r3,0(r4)
   ab644:	00800044 	movi	r2,1
   ab648:	10c0142e 	bgeu	r2,r3,ab69c <__fpcmp_parts_d+0x5c>
   ab64c:	29800017 	ldw	r6,0(r5)
   ab650:	1180122e 	bgeu	r2,r6,ab69c <__fpcmp_parts_d+0x5c>
   ab654:	01c00104 	movi	r7,4
   ab658:	19c02826 	beq	r3,r7,ab6fc <__fpcmp_parts_d+0xbc>
   ab65c:	31c00926 	beq	r6,r7,ab684 <__fpcmp_parts_d+0x44>
   ab660:	01c00084 	movi	r7,2
   ab664:	19c00626 	beq	r3,r7,ab680 <__fpcmp_parts_d+0x40>
   ab668:	31c00a26 	beq	r6,r7,ab694 <__fpcmp_parts_d+0x54>
   ab66c:	20c00117 	ldw	r3,4(r4)
   ab670:	29800117 	ldw	r6,4(r5)
   ab674:	19800b26 	beq	r3,r6,ab6a4 <__fpcmp_parts_d+0x64>
   ab678:	1800041e 	bne	r3,zero,ab68c <__fpcmp_parts_d+0x4c>
   ab67c:	f800283a 	ret
   ab680:	30c01a26 	beq	r6,r3,ab6ec <__fpcmp_parts_d+0xac>
   ab684:	28800117 	ldw	r2,4(r5)
   ab688:	1000041e 	bne	r2,zero,ab69c <__fpcmp_parts_d+0x5c>
   ab68c:	00bfffc4 	movi	r2,-1
   ab690:	f800283a 	ret
   ab694:	20800117 	ldw	r2,4(r4)
   ab698:	103ffc1e 	bne	r2,zero,ab68c <__fpcmp_parts_d+0x4c>
   ab69c:	00800044 	movi	r2,1
   ab6a0:	f800283a 	ret
   ab6a4:	21c00217 	ldw	r7,8(r4)
   ab6a8:	29800217 	ldw	r6,8(r5)
   ab6ac:	31c0020e 	bge	r6,r7,ab6b8 <__fpcmp_parts_d+0x78>
   ab6b0:	183ff61e 	bne	r3,zero,ab68c <__fpcmp_parts_d+0x4c>
   ab6b4:	f800283a 	ret
   ab6b8:	39800a16 	blt	r7,r6,ab6e4 <__fpcmp_parts_d+0xa4>
   ab6bc:	20800417 	ldw	r2,16(r4)
   ab6c0:	29800417 	ldw	r6,16(r5)
   ab6c4:	21c00317 	ldw	r7,12(r4)
   ab6c8:	29000317 	ldw	r4,12(r5)
   ab6cc:	30800936 	bltu	r6,r2,ab6f4 <__fpcmp_parts_d+0xb4>
   ab6d0:	1180011e 	bne	r2,r6,ab6d8 <__fpcmp_parts_d+0x98>
   ab6d4:	21c00736 	bltu	r4,r7,ab6f4 <__fpcmp_parts_d+0xb4>
   ab6d8:	11800236 	bltu	r2,r6,ab6e4 <__fpcmp_parts_d+0xa4>
   ab6dc:	3080031e 	bne	r6,r2,ab6ec <__fpcmp_parts_d+0xac>
   ab6e0:	3900022e 	bgeu	r7,r4,ab6ec <__fpcmp_parts_d+0xac>
   ab6e4:	183fe926 	beq	r3,zero,ab68c <__fpcmp_parts_d+0x4c>
   ab6e8:	003fec06 	br	ab69c <__fpcmp_parts_d+0x5c>
   ab6ec:	0005883a 	mov	r2,zero
   ab6f0:	f800283a 	ret
   ab6f4:	183fe926 	beq	r3,zero,ab69c <__fpcmp_parts_d+0x5c>
   ab6f8:	003fe406 	br	ab68c <__fpcmp_parts_d+0x4c>
   ab6fc:	30ffe51e 	bne	r6,r3,ab694 <__fpcmp_parts_d+0x54>
   ab700:	28c00117 	ldw	r3,4(r5)
   ab704:	20800117 	ldw	r2,4(r4)
   ab708:	1885c83a 	sub	r2,r3,r2
   ab70c:	f800283a 	ret

000ab710 <__lshrdi3>:
   ab710:	2005883a 	mov	r2,r4
   ab714:	2807883a 	mov	r3,r5
   ab718:	30000826 	beq	r6,zero,ab73c <__lshrdi3+0x2c>
   ab71c:	01000804 	movi	r4,32
   ab720:	2189c83a 	sub	r4,r4,r6
   ab724:	0100060e 	bge	zero,r4,ab740 <__lshrdi3+0x30>
   ab728:	1184d83a 	srl	r2,r2,r6
   ab72c:	2908983a 	sll	r4,r5,r4
   ab730:	298cd83a 	srl	r6,r5,r6
   ab734:	2084b03a 	or	r2,r4,r2
   ab738:	3007883a 	mov	r3,r6
   ab73c:	f800283a 	ret
   ab740:	0105c83a 	sub	r2,zero,r4
   ab744:	000d883a 	mov	r6,zero
   ab748:	2884d83a 	srl	r2,r5,r2
   ab74c:	3007883a 	mov	r3,r6
   ab750:	003ffa06 	br	ab73c <__lshrdi3+0x2c>

000ab754 <__ashldi3>:
   ab754:	2005883a 	mov	r2,r4
   ab758:	2807883a 	mov	r3,r5
   ab75c:	30000826 	beq	r6,zero,ab780 <__ashldi3+0x2c>
   ab760:	01000804 	movi	r4,32
   ab764:	2189c83a 	sub	r4,r4,r6
   ab768:	0100060e 	bge	zero,r4,ab784 <__ashldi3+0x30>
   ab76c:	1108d83a 	srl	r4,r2,r4
   ab770:	2986983a 	sll	r3,r5,r6
   ab774:	118c983a 	sll	r6,r2,r6
   ab778:	20c6b03a 	or	r3,r4,r3
   ab77c:	3005883a 	mov	r2,r6
   ab780:	f800283a 	ret
   ab784:	0107c83a 	sub	r3,zero,r4
   ab788:	000d883a 	mov	r6,zero
   ab78c:	10c6983a 	sll	r3,r2,r3
   ab790:	3005883a 	mov	r2,r6
   ab794:	003ffa06 	br	ab780 <__ashldi3+0x2c>

000ab798 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   ab798:	defffe04 	addi	sp,sp,-8
   ab79c:	dfc00115 	stw	ra,4(sp)
   ab7a0:	df000015 	stw	fp,0(sp)
   ab7a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   ab7a8:	008002f4 	movhi	r2,11
   ab7ac:	1082b204 	addi	r2,r2,2760
   ab7b0:	10800017 	ldw	r2,0(r2)
   ab7b4:	10000526 	beq	r2,zero,ab7cc <alt_get_errno+0x34>
   ab7b8:	008002f4 	movhi	r2,11
   ab7bc:	1082b204 	addi	r2,r2,2760
   ab7c0:	10800017 	ldw	r2,0(r2)
   ab7c4:	103ee83a 	callr	r2
   ab7c8:	00000206 	br	ab7d4 <alt_get_errno+0x3c>
   ab7cc:	008002f4 	movhi	r2,11
   ab7d0:	10897d04 	addi	r2,r2,9716
}
   ab7d4:	e037883a 	mov	sp,fp
   ab7d8:	dfc00117 	ldw	ra,4(sp)
   ab7dc:	df000017 	ldw	fp,0(sp)
   ab7e0:	dec00204 	addi	sp,sp,8
   ab7e4:	f800283a 	ret

000ab7e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   ab7e8:	defffb04 	addi	sp,sp,-20
   ab7ec:	dfc00415 	stw	ra,16(sp)
   ab7f0:	df000315 	stw	fp,12(sp)
   ab7f4:	df000304 	addi	fp,sp,12
   ab7f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   ab7fc:	e0bfff17 	ldw	r2,-4(fp)
   ab800:	10000716 	blt	r2,zero,ab820 <close+0x38>
   ab804:	e13fff17 	ldw	r4,-4(fp)
   ab808:	01400304 	movi	r5,12
   ab80c:	00a118c0 	call	a118c <__mulsi3>
   ab810:	00c002f4 	movhi	r3,11
   ab814:	18fe2604 	addi	r3,r3,-1896
   ab818:	10c5883a 	add	r2,r2,r3
   ab81c:	00000106 	br	ab824 <close+0x3c>
   ab820:	0005883a 	mov	r2,zero
   ab824:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   ab828:	e0bffd17 	ldw	r2,-12(fp)
   ab82c:	10001826 	beq	r2,zero,ab890 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   ab830:	e0bffd17 	ldw	r2,-12(fp)
   ab834:	10800017 	ldw	r2,0(r2)
   ab838:	10800417 	ldw	r2,16(r2)
   ab83c:	10000626 	beq	r2,zero,ab858 <close+0x70>
   ab840:	e0bffd17 	ldw	r2,-12(fp)
   ab844:	10800017 	ldw	r2,0(r2)
   ab848:	10800417 	ldw	r2,16(r2)
   ab84c:	e13ffd17 	ldw	r4,-12(fp)
   ab850:	103ee83a 	callr	r2
   ab854:	00000106 	br	ab85c <close+0x74>
   ab858:	0005883a 	mov	r2,zero
   ab85c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   ab860:	e13fff17 	ldw	r4,-4(fp)
   ab864:	00ac1b40 	call	ac1b4 <alt_release_fd>
    if (rval < 0)
   ab868:	e0bffe17 	ldw	r2,-8(fp)
   ab86c:	1000060e 	bge	r2,zero,ab888 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   ab870:	00ab7980 	call	ab798 <alt_get_errno>
   ab874:	e0fffe17 	ldw	r3,-8(fp)
   ab878:	00c7c83a 	sub	r3,zero,r3
   ab87c:	10c00015 	stw	r3,0(r2)
      return -1;
   ab880:	00bfffc4 	movi	r2,-1
   ab884:	00000606 	br	ab8a0 <close+0xb8>
    }
    return 0;
   ab888:	0005883a 	mov	r2,zero
   ab88c:	00000406 	br	ab8a0 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   ab890:	00ab7980 	call	ab798 <alt_get_errno>
   ab894:	00c01444 	movi	r3,81
   ab898:	10c00015 	stw	r3,0(r2)
    return -1;
   ab89c:	00bfffc4 	movi	r2,-1
  }
}
   ab8a0:	e037883a 	mov	sp,fp
   ab8a4:	dfc00117 	ldw	ra,4(sp)
   ab8a8:	df000017 	ldw	fp,0(sp)
   ab8ac:	dec00204 	addi	sp,sp,8
   ab8b0:	f800283a 	ret

000ab8b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   ab8b4:	defffc04 	addi	sp,sp,-16
   ab8b8:	df000315 	stw	fp,12(sp)
   ab8bc:	df000304 	addi	fp,sp,12
   ab8c0:	e13ffd15 	stw	r4,-12(fp)
   ab8c4:	e17ffe15 	stw	r5,-8(fp)
   ab8c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   ab8cc:	e0bfff17 	ldw	r2,-4(fp)
}
   ab8d0:	e037883a 	mov	sp,fp
   ab8d4:	df000017 	ldw	fp,0(sp)
   ab8d8:	dec00104 	addi	sp,sp,4
   ab8dc:	f800283a 	ret

000ab8e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   ab8e0:	defffc04 	addi	sp,sp,-16
   ab8e4:	df000315 	stw	fp,12(sp)
   ab8e8:	df000304 	addi	fp,sp,12
   ab8ec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   ab8f0:	0001883a 	nop
   ab8f4:	e0bfff17 	ldw	r2,-4(fp)
   ab8f8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   ab8fc:	e0bffd17 	ldw	r2,-12(fp)
   ab900:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   ab904:	e0bffe17 	ldw	r2,-8(fp)
   ab908:	10000226 	beq	r2,zero,ab914 <_exit+0x34>
    ALT_SIM_FAIL();
   ab90c:	002af070 	cmpltui	zero,zero,43969
   ab910:	00000106 	br	ab918 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   ab914:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   ab918:	003fff06 	br	ab918 <_exit+0x38>

000ab91c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   ab91c:	defffe04 	addi	sp,sp,-8
   ab920:	dfc00115 	stw	ra,4(sp)
   ab924:	df000015 	stw	fp,0(sp)
   ab928:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   ab92c:	008002f4 	movhi	r2,11
   ab930:	1082b204 	addi	r2,r2,2760
   ab934:	10800017 	ldw	r2,0(r2)
   ab938:	10000526 	beq	r2,zero,ab950 <alt_get_errno+0x34>
   ab93c:	008002f4 	movhi	r2,11
   ab940:	1082b204 	addi	r2,r2,2760
   ab944:	10800017 	ldw	r2,0(r2)
   ab948:	103ee83a 	callr	r2
   ab94c:	00000206 	br	ab958 <alt_get_errno+0x3c>
   ab950:	008002f4 	movhi	r2,11
   ab954:	10897d04 	addi	r2,r2,9716
}
   ab958:	e037883a 	mov	sp,fp
   ab95c:	dfc00117 	ldw	ra,4(sp)
   ab960:	df000017 	ldw	fp,0(sp)
   ab964:	dec00204 	addi	sp,sp,8
   ab968:	f800283a 	ret

000ab96c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   ab96c:	defffb04 	addi	sp,sp,-20
   ab970:	dfc00415 	stw	ra,16(sp)
   ab974:	df000315 	stw	fp,12(sp)
   ab978:	df000304 	addi	fp,sp,12
   ab97c:	e13ffe15 	stw	r4,-8(fp)
   ab980:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   ab984:	e0bffe17 	ldw	r2,-8(fp)
   ab988:	10000716 	blt	r2,zero,ab9a8 <fstat+0x3c>
   ab98c:	e13ffe17 	ldw	r4,-8(fp)
   ab990:	01400304 	movi	r5,12
   ab994:	00a118c0 	call	a118c <__mulsi3>
   ab998:	00c002f4 	movhi	r3,11
   ab99c:	18fe2604 	addi	r3,r3,-1896
   ab9a0:	10c5883a 	add	r2,r2,r3
   ab9a4:	00000106 	br	ab9ac <fstat+0x40>
   ab9a8:	0005883a 	mov	r2,zero
   ab9ac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   ab9b0:	e0bffd17 	ldw	r2,-12(fp)
   ab9b4:	10001026 	beq	r2,zero,ab9f8 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   ab9b8:	e0bffd17 	ldw	r2,-12(fp)
   ab9bc:	10800017 	ldw	r2,0(r2)
   ab9c0:	10800817 	ldw	r2,32(r2)
   ab9c4:	10000726 	beq	r2,zero,ab9e4 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   ab9c8:	e0bffd17 	ldw	r2,-12(fp)
   ab9cc:	10800017 	ldw	r2,0(r2)
   ab9d0:	10800817 	ldw	r2,32(r2)
   ab9d4:	e13ffd17 	ldw	r4,-12(fp)
   ab9d8:	e17fff17 	ldw	r5,-4(fp)
   ab9dc:	103ee83a 	callr	r2
   ab9e0:	00000906 	br	aba08 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   ab9e4:	e0bfff17 	ldw	r2,-4(fp)
   ab9e8:	00c80004 	movi	r3,8192
   ab9ec:	10c00115 	stw	r3,4(r2)
      return 0;
   ab9f0:	0005883a 	mov	r2,zero
   ab9f4:	00000406 	br	aba08 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   ab9f8:	00ab91c0 	call	ab91c <alt_get_errno>
   ab9fc:	00c01444 	movi	r3,81
   aba00:	10c00015 	stw	r3,0(r2)
    return -1;
   aba04:	00bfffc4 	movi	r2,-1
  }
}
   aba08:	e037883a 	mov	sp,fp
   aba0c:	dfc00117 	ldw	ra,4(sp)
   aba10:	df000017 	ldw	fp,0(sp)
   aba14:	dec00204 	addi	sp,sp,8
   aba18:	f800283a 	ret

000aba1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   aba1c:	defffe04 	addi	sp,sp,-8
   aba20:	dfc00115 	stw	ra,4(sp)
   aba24:	df000015 	stw	fp,0(sp)
   aba28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   aba2c:	008002f4 	movhi	r2,11
   aba30:	1082b204 	addi	r2,r2,2760
   aba34:	10800017 	ldw	r2,0(r2)
   aba38:	10000526 	beq	r2,zero,aba50 <alt_get_errno+0x34>
   aba3c:	008002f4 	movhi	r2,11
   aba40:	1082b204 	addi	r2,r2,2760
   aba44:	10800017 	ldw	r2,0(r2)
   aba48:	103ee83a 	callr	r2
   aba4c:	00000206 	br	aba58 <alt_get_errno+0x3c>
   aba50:	008002f4 	movhi	r2,11
   aba54:	10897d04 	addi	r2,r2,9716
}
   aba58:	e037883a 	mov	sp,fp
   aba5c:	dfc00117 	ldw	ra,4(sp)
   aba60:	df000017 	ldw	fp,0(sp)
   aba64:	dec00204 	addi	sp,sp,8
   aba68:	f800283a 	ret

000aba6c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   aba6c:	deffed04 	addi	sp,sp,-76
   aba70:	dfc01215 	stw	ra,72(sp)
   aba74:	df001115 	stw	fp,68(sp)
   aba78:	df001104 	addi	fp,sp,68
   aba7c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   aba80:	e0bfff17 	ldw	r2,-4(fp)
   aba84:	10000716 	blt	r2,zero,abaa4 <isatty+0x38>
   aba88:	e13fff17 	ldw	r4,-4(fp)
   aba8c:	01400304 	movi	r5,12
   aba90:	00a118c0 	call	a118c <__mulsi3>
   aba94:	00c002f4 	movhi	r3,11
   aba98:	18fe2604 	addi	r3,r3,-1896
   aba9c:	10c5883a 	add	r2,r2,r3
   abaa0:	00000106 	br	abaa8 <isatty+0x3c>
   abaa4:	0005883a 	mov	r2,zero
   abaa8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   abaac:	e0bfef17 	ldw	r2,-68(fp)
   abab0:	10000e26 	beq	r2,zero,abaec <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   abab4:	e0bfef17 	ldw	r2,-68(fp)
   abab8:	10800017 	ldw	r2,0(r2)
   ababc:	10800817 	ldw	r2,32(r2)
   abac0:	1000021e 	bne	r2,zero,abacc <isatty+0x60>
    {
      return 1;
   abac4:	00800044 	movi	r2,1
   abac8:	00000c06 	br	abafc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   abacc:	e0bff004 	addi	r2,fp,-64
   abad0:	e13fff17 	ldw	r4,-4(fp)
   abad4:	100b883a 	mov	r5,r2
   abad8:	00ab96c0 	call	ab96c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   abadc:	e0bff117 	ldw	r2,-60(fp)
   abae0:	10880020 	cmpeqi	r2,r2,8192
   abae4:	10803fcc 	andi	r2,r2,255
   abae8:	00000406 	br	abafc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   abaec:	00aba1c0 	call	aba1c <alt_get_errno>
   abaf0:	00c01444 	movi	r3,81
   abaf4:	10c00015 	stw	r3,0(r2)
    return 0;
   abaf8:	0005883a 	mov	r2,zero
  }
}
   abafc:	e037883a 	mov	sp,fp
   abb00:	dfc00117 	ldw	ra,4(sp)
   abb04:	df000017 	ldw	fp,0(sp)
   abb08:	dec00204 	addi	sp,sp,8
   abb0c:	f800283a 	ret

000abb10 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   abb10:	defffc04 	addi	sp,sp,-16
   abb14:	df000315 	stw	fp,12(sp)
   abb18:	df000304 	addi	fp,sp,12
   abb1c:	e13ffd15 	stw	r4,-12(fp)
   abb20:	e17ffe15 	stw	r5,-8(fp)
   abb24:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   abb28:	e0fffe17 	ldw	r3,-8(fp)
   abb2c:	e0bffd17 	ldw	r2,-12(fp)
   abb30:	18800e26 	beq	r3,r2,abb6c <alt_load_section+0x5c>
  {
    while( to != end )
   abb34:	00000a06 	br	abb60 <alt_load_section+0x50>
    {
      *to++ = *from++;
   abb38:	e0bffd17 	ldw	r2,-12(fp)
   abb3c:	10c00017 	ldw	r3,0(r2)
   abb40:	e0bffe17 	ldw	r2,-8(fp)
   abb44:	10c00015 	stw	r3,0(r2)
   abb48:	e0bffe17 	ldw	r2,-8(fp)
   abb4c:	10800104 	addi	r2,r2,4
   abb50:	e0bffe15 	stw	r2,-8(fp)
   abb54:	e0bffd17 	ldw	r2,-12(fp)
   abb58:	10800104 	addi	r2,r2,4
   abb5c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   abb60:	e0fffe17 	ldw	r3,-8(fp)
   abb64:	e0bfff17 	ldw	r2,-4(fp)
   abb68:	18bff31e 	bne	r3,r2,abb38 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   abb6c:	e037883a 	mov	sp,fp
   abb70:	df000017 	ldw	fp,0(sp)
   abb74:	dec00104 	addi	sp,sp,4
   abb78:	f800283a 	ret

000abb7c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   abb7c:	defffe04 	addi	sp,sp,-8
   abb80:	dfc00115 	stw	ra,4(sp)
   abb84:	df000015 	stw	fp,0(sp)
   abb88:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   abb8c:	010002f4 	movhi	r4,11
   abb90:	2102c904 	addi	r4,r4,2852
   abb94:	014002f4 	movhi	r5,11
   abb98:	297c1704 	addi	r5,r5,-4004
   abb9c:	018002f4 	movhi	r6,11
   abba0:	3182c904 	addi	r6,r6,2852
   abba4:	00abb100 	call	abb10 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   abba8:	010002b4 	movhi	r4,10
   abbac:	21000804 	addi	r4,r4,32
   abbb0:	014002b4 	movhi	r5,10
   abbb4:	29400804 	addi	r5,r5,32
   abbb8:	018002b4 	movhi	r6,10
   abbbc:	31806e04 	addi	r6,r6,440
   abbc0:	00abb100 	call	abb10 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   abbc4:	010002f4 	movhi	r4,11
   abbc8:	213b1504 	addi	r4,r4,-5036
   abbcc:	014002f4 	movhi	r5,11
   abbd0:	297b1504 	addi	r5,r5,-5036
   abbd4:	018002f4 	movhi	r6,11
   abbd8:	31bc1704 	addi	r6,r6,-4004
   abbdc:	00abb100 	call	abb10 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   abbe0:	00adf3c0 	call	adf3c <alt_dcache_flush_all>
  alt_icache_flush_all();
   abbe4:	00ae3fc0 	call	ae3fc <alt_icache_flush_all>
}
   abbe8:	e037883a 	mov	sp,fp
   abbec:	dfc00117 	ldw	ra,4(sp)
   abbf0:	df000017 	ldw	fp,0(sp)
   abbf4:	dec00204 	addi	sp,sp,8
   abbf8:	f800283a 	ret

000abbfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   abbfc:	defffe04 	addi	sp,sp,-8
   abc00:	dfc00115 	stw	ra,4(sp)
   abc04:	df000015 	stw	fp,0(sp)
   abc08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   abc0c:	008002f4 	movhi	r2,11
   abc10:	1082b204 	addi	r2,r2,2760
   abc14:	10800017 	ldw	r2,0(r2)
   abc18:	10000526 	beq	r2,zero,abc30 <alt_get_errno+0x34>
   abc1c:	008002f4 	movhi	r2,11
   abc20:	1082b204 	addi	r2,r2,2760
   abc24:	10800017 	ldw	r2,0(r2)
   abc28:	103ee83a 	callr	r2
   abc2c:	00000206 	br	abc38 <alt_get_errno+0x3c>
   abc30:	008002f4 	movhi	r2,11
   abc34:	10897d04 	addi	r2,r2,9716
}
   abc38:	e037883a 	mov	sp,fp
   abc3c:	dfc00117 	ldw	ra,4(sp)
   abc40:	df000017 	ldw	fp,0(sp)
   abc44:	dec00204 	addi	sp,sp,8
   abc48:	f800283a 	ret

000abc4c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   abc4c:	defff904 	addi	sp,sp,-28
   abc50:	dfc00615 	stw	ra,24(sp)
   abc54:	df000515 	stw	fp,20(sp)
   abc58:	df000504 	addi	fp,sp,20
   abc5c:	e13ffd15 	stw	r4,-12(fp)
   abc60:	e17ffe15 	stw	r5,-8(fp)
   abc64:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   abc68:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   abc6c:	e0bffd17 	ldw	r2,-12(fp)
   abc70:	10000716 	blt	r2,zero,abc90 <lseek+0x44>
   abc74:	e13ffd17 	ldw	r4,-12(fp)
   abc78:	01400304 	movi	r5,12
   abc7c:	00a118c0 	call	a118c <__mulsi3>
   abc80:	00c002f4 	movhi	r3,11
   abc84:	18fe2604 	addi	r3,r3,-1896
   abc88:	10c5883a 	add	r2,r2,r3
   abc8c:	00000106 	br	abc94 <lseek+0x48>
   abc90:	0005883a 	mov	r2,zero
   abc94:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   abc98:	e0bffc17 	ldw	r2,-16(fp)
   abc9c:	10001026 	beq	r2,zero,abce0 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   abca0:	e0bffc17 	ldw	r2,-16(fp)
   abca4:	10800017 	ldw	r2,0(r2)
   abca8:	10800717 	ldw	r2,28(r2)
   abcac:	10000926 	beq	r2,zero,abcd4 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   abcb0:	e0bffc17 	ldw	r2,-16(fp)
   abcb4:	10800017 	ldw	r2,0(r2)
   abcb8:	10800717 	ldw	r2,28(r2)
   abcbc:	e13ffc17 	ldw	r4,-16(fp)
   abcc0:	e17ffe17 	ldw	r5,-8(fp)
   abcc4:	e1bfff17 	ldw	r6,-4(fp)
   abcc8:	103ee83a 	callr	r2
   abccc:	e0bffb15 	stw	r2,-20(fp)
   abcd0:	00000506 	br	abce8 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   abcd4:	00bfde84 	movi	r2,-134
   abcd8:	e0bffb15 	stw	r2,-20(fp)
   abcdc:	00000206 	br	abce8 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   abce0:	00bfebc4 	movi	r2,-81
   abce4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   abce8:	e0bffb17 	ldw	r2,-20(fp)
   abcec:	1000060e 	bge	r2,zero,abd08 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   abcf0:	00abbfc0 	call	abbfc <alt_get_errno>
   abcf4:	e0fffb17 	ldw	r3,-20(fp)
   abcf8:	00c7c83a 	sub	r3,zero,r3
   abcfc:	10c00015 	stw	r3,0(r2)
    rc = -1;
   abd00:	00bfffc4 	movi	r2,-1
   abd04:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   abd08:	e0bffb17 	ldw	r2,-20(fp)
}
   abd0c:	e037883a 	mov	sp,fp
   abd10:	dfc00117 	ldw	ra,4(sp)
   abd14:	df000017 	ldw	fp,0(sp)
   abd18:	dec00204 	addi	sp,sp,8
   abd1c:	f800283a 	ret

000abd20 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   abd20:	defffd04 	addi	sp,sp,-12
   abd24:	dfc00215 	stw	ra,8(sp)
   abd28:	df000115 	stw	fp,4(sp)
   abd2c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   abd30:	0009883a 	mov	r4,zero
   abd34:	00ac5600 	call	ac560 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   abd38:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   abd3c:	00ac5940 	call	ac594 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   abd40:	010002f4 	movhi	r4,11
   abd44:	213c0e04 	addi	r4,r4,-4040
   abd48:	014002f4 	movhi	r5,11
   abd4c:	297c0e04 	addi	r5,r5,-4040
   abd50:	018002f4 	movhi	r6,11
   abd54:	31bc0e04 	addi	r6,r6,-4040
   abd58:	00ae7d40 	call	ae7d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   abd5c:	00ae0480 	call	ae048 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   abd60:	010002f4 	movhi	r4,11
   abd64:	21382904 	addi	r4,r4,-8028
   abd68:	00aea940 	call	aea94 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   abd6c:	d126dc17 	ldw	r4,-25744(gp)
   abd70:	d0e6dd17 	ldw	r3,-25740(gp)
   abd74:	d0a6de17 	ldw	r2,-25736(gp)
   abd78:	180b883a 	mov	r5,r3
   abd7c:	100d883a 	mov	r6,r2
   abd80:	00a01f40 	call	a01f4 <main>
   abd84:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   abd88:	01000044 	movi	r4,1
   abd8c:	00ab7e80 	call	ab7e8 <close>
  exit (result);
   abd90:	e13fff17 	ldw	r4,-4(fp)
   abd94:	00a12000 	call	a1200 <exit>

000abd98 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   abd98:	defffe04 	addi	sp,sp,-8
   abd9c:	df000115 	stw	fp,4(sp)
   abda0:	df000104 	addi	fp,sp,4
   abda4:	e13fff15 	stw	r4,-4(fp)
}
   abda8:	e037883a 	mov	sp,fp
   abdac:	df000017 	ldw	fp,0(sp)
   abdb0:	dec00104 	addi	sp,sp,4
   abdb4:	f800283a 	ret

000abdb8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   abdb8:	defffe04 	addi	sp,sp,-8
   abdbc:	df000115 	stw	fp,4(sp)
   abdc0:	df000104 	addi	fp,sp,4
   abdc4:	e13fff15 	stw	r4,-4(fp)
}
   abdc8:	e037883a 	mov	sp,fp
   abdcc:	df000017 	ldw	fp,0(sp)
   abdd0:	dec00104 	addi	sp,sp,4
   abdd4:	f800283a 	ret

000abdd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   abdd8:	defffe04 	addi	sp,sp,-8
   abddc:	dfc00115 	stw	ra,4(sp)
   abde0:	df000015 	stw	fp,0(sp)
   abde4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   abde8:	008002f4 	movhi	r2,11
   abdec:	1082b204 	addi	r2,r2,2760
   abdf0:	10800017 	ldw	r2,0(r2)
   abdf4:	10000526 	beq	r2,zero,abe0c <alt_get_errno+0x34>
   abdf8:	008002f4 	movhi	r2,11
   abdfc:	1082b204 	addi	r2,r2,2760
   abe00:	10800017 	ldw	r2,0(r2)
   abe04:	103ee83a 	callr	r2
   abe08:	00000206 	br	abe14 <alt_get_errno+0x3c>
   abe0c:	008002f4 	movhi	r2,11
   abe10:	10897d04 	addi	r2,r2,9716
}
   abe14:	e037883a 	mov	sp,fp
   abe18:	dfc00117 	ldw	ra,4(sp)
   abe1c:	df000017 	ldw	fp,0(sp)
   abe20:	dec00204 	addi	sp,sp,8
   abe24:	f800283a 	ret

000abe28 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   abe28:	defffb04 	addi	sp,sp,-20
   abe2c:	dfc00415 	stw	ra,16(sp)
   abe30:	df000315 	stw	fp,12(sp)
   abe34:	dc000215 	stw	r16,8(sp)
   abe38:	df000204 	addi	fp,sp,8
   abe3c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   abe40:	e0bfff17 	ldw	r2,-4(fp)
   abe44:	10800217 	ldw	r2,8(r2)
   abe48:	10d00034 	orhi	r3,r2,16384
   abe4c:	e0bfff17 	ldw	r2,-4(fp)
   abe50:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   abe54:	e03ffe15 	stw	zero,-8(fp)
   abe58:	00002206 	br	abee4 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   abe5c:	040002f4 	movhi	r16,11
   abe60:	843e2604 	addi	r16,r16,-1896
   abe64:	e0bffe17 	ldw	r2,-8(fp)
   abe68:	1009883a 	mov	r4,r2
   abe6c:	01400304 	movi	r5,12
   abe70:	00a118c0 	call	a118c <__mulsi3>
   abe74:	8085883a 	add	r2,r16,r2
   abe78:	10c00017 	ldw	r3,0(r2)
   abe7c:	e0bfff17 	ldw	r2,-4(fp)
   abe80:	10800017 	ldw	r2,0(r2)
   abe84:	1880141e 	bne	r3,r2,abed8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   abe88:	040002f4 	movhi	r16,11
   abe8c:	843e2604 	addi	r16,r16,-1896
   abe90:	e0bffe17 	ldw	r2,-8(fp)
   abe94:	1009883a 	mov	r4,r2
   abe98:	01400304 	movi	r5,12
   abe9c:	00a118c0 	call	a118c <__mulsi3>
   abea0:	8085883a 	add	r2,r16,r2
   abea4:	10800204 	addi	r2,r2,8
   abea8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   abeac:	10000a0e 	bge	r2,zero,abed8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   abeb0:	e13ffe17 	ldw	r4,-8(fp)
   abeb4:	01400304 	movi	r5,12
   abeb8:	00a118c0 	call	a118c <__mulsi3>
   abebc:	00c002f4 	movhi	r3,11
   abec0:	18fe2604 	addi	r3,r3,-1896
   abec4:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   abec8:	e0bfff17 	ldw	r2,-4(fp)
   abecc:	18800226 	beq	r3,r2,abed8 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   abed0:	00bffcc4 	movi	r2,-13
   abed4:	00000a06 	br	abf00 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   abed8:	e0bffe17 	ldw	r2,-8(fp)
   abedc:	10800044 	addi	r2,r2,1
   abee0:	e0bffe15 	stw	r2,-8(fp)
   abee4:	008002f4 	movhi	r2,11
   abee8:	1082b104 	addi	r2,r2,2756
   abeec:	10800017 	ldw	r2,0(r2)
   abef0:	1007883a 	mov	r3,r2
   abef4:	e0bffe17 	ldw	r2,-8(fp)
   abef8:	18bfd82e 	bgeu	r3,r2,abe5c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   abefc:	0005883a 	mov	r2,zero
}
   abf00:	e037883a 	mov	sp,fp
   abf04:	dfc00217 	ldw	ra,8(sp)
   abf08:	df000117 	ldw	fp,4(sp)
   abf0c:	dc000017 	ldw	r16,0(sp)
   abf10:	dec00304 	addi	sp,sp,12
   abf14:	f800283a 	ret

000abf18 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   abf18:	defff604 	addi	sp,sp,-40
   abf1c:	dfc00915 	stw	ra,36(sp)
   abf20:	df000815 	stw	fp,32(sp)
   abf24:	df000804 	addi	fp,sp,32
   abf28:	e13ffd15 	stw	r4,-12(fp)
   abf2c:	e17ffe15 	stw	r5,-8(fp)
   abf30:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   abf34:	00bfffc4 	movi	r2,-1
   abf38:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   abf3c:	00bffb44 	movi	r2,-19
   abf40:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   abf44:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   abf48:	e13ffd17 	ldw	r4,-12(fp)
   abf4c:	014002f4 	movhi	r5,11
   abf50:	2942af04 	addi	r5,r5,2748
   abf54:	00ae1000 	call	ae100 <alt_find_dev>
   abf58:	e0bff815 	stw	r2,-32(fp)
   abf5c:	e0bff817 	ldw	r2,-32(fp)
   abf60:	1000051e 	bne	r2,zero,abf78 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   abf64:	e13ffd17 	ldw	r4,-12(fp)
   abf68:	00ae1900 	call	ae190 <alt_find_file>
   abf6c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   abf70:	00800044 	movi	r2,1
   abf74:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   abf78:	e0bff817 	ldw	r2,-32(fp)
   abf7c:	10002a26 	beq	r2,zero,ac028 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   abf80:	e13ff817 	ldw	r4,-32(fp)
   abf84:	00ae3280 	call	ae328 <alt_get_fd>
   abf88:	e0bff915 	stw	r2,-28(fp)
   abf8c:	e0bff917 	ldw	r2,-28(fp)
   abf90:	1000030e 	bge	r2,zero,abfa0 <open+0x88>
    {
      status = index;
   abf94:	e0bff917 	ldw	r2,-28(fp)
   abf98:	e0bffa15 	stw	r2,-24(fp)
   abf9c:	00002406 	br	ac030 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   abfa0:	e13ff917 	ldw	r4,-28(fp)
   abfa4:	01400304 	movi	r5,12
   abfa8:	00a118c0 	call	a118c <__mulsi3>
   abfac:	00c002f4 	movhi	r3,11
   abfb0:	18fe2604 	addi	r3,r3,-1896
   abfb4:	10c5883a 	add	r2,r2,r3
   abfb8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   abfbc:	e0fffe17 	ldw	r3,-8(fp)
   abfc0:	00900034 	movhi	r2,16384
   abfc4:	10bfffc4 	addi	r2,r2,-1
   abfc8:	1886703a 	and	r3,r3,r2
   abfcc:	e0bffc17 	ldw	r2,-16(fp)
   abfd0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   abfd4:	e0bffb17 	ldw	r2,-20(fp)
   abfd8:	1000051e 	bne	r2,zero,abff0 <open+0xd8>
   abfdc:	e13ffc17 	ldw	r4,-16(fp)
   abfe0:	00abe280 	call	abe28 <alt_file_locked>
   abfe4:	e0bffa15 	stw	r2,-24(fp)
   abfe8:	e0bffa17 	ldw	r2,-24(fp)
   abfec:	10001016 	blt	r2,zero,ac030 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   abff0:	e0bff817 	ldw	r2,-32(fp)
   abff4:	10800317 	ldw	r2,12(r2)
   abff8:	10000826 	beq	r2,zero,ac01c <open+0x104>
   abffc:	e0bff817 	ldw	r2,-32(fp)
   ac000:	10800317 	ldw	r2,12(r2)
   ac004:	e13ffc17 	ldw	r4,-16(fp)
   ac008:	e17ffd17 	ldw	r5,-12(fp)
   ac00c:	e1bffe17 	ldw	r6,-8(fp)
   ac010:	e1ffff17 	ldw	r7,-4(fp)
   ac014:	103ee83a 	callr	r2
   ac018:	00000106 	br	ac020 <open+0x108>
   ac01c:	0005883a 	mov	r2,zero
   ac020:	e0bffa15 	stw	r2,-24(fp)
   ac024:	00000206 	br	ac030 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   ac028:	00bffb44 	movi	r2,-19
   ac02c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   ac030:	e0bffa17 	ldw	r2,-24(fp)
   ac034:	1000080e 	bge	r2,zero,ac058 <open+0x140>
  {
    alt_release_fd (index);  
   ac038:	e13ff917 	ldw	r4,-28(fp)
   ac03c:	00ac1b40 	call	ac1b4 <alt_release_fd>
    ALT_ERRNO = -status;
   ac040:	00abdd80 	call	abdd8 <alt_get_errno>
   ac044:	e0fffa17 	ldw	r3,-24(fp)
   ac048:	00c7c83a 	sub	r3,zero,r3
   ac04c:	10c00015 	stw	r3,0(r2)
    return -1;
   ac050:	00bfffc4 	movi	r2,-1
   ac054:	00000106 	br	ac05c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   ac058:	e0bff917 	ldw	r2,-28(fp)
}
   ac05c:	e037883a 	mov	sp,fp
   ac060:	dfc00117 	ldw	ra,4(sp)
   ac064:	df000017 	ldw	fp,0(sp)
   ac068:	dec00204 	addi	sp,sp,8
   ac06c:	f800283a 	ret

000ac070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   ac070:	defffe04 	addi	sp,sp,-8
   ac074:	dfc00115 	stw	ra,4(sp)
   ac078:	df000015 	stw	fp,0(sp)
   ac07c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   ac080:	008002f4 	movhi	r2,11
   ac084:	1082b204 	addi	r2,r2,2760
   ac088:	10800017 	ldw	r2,0(r2)
   ac08c:	10000526 	beq	r2,zero,ac0a4 <alt_get_errno+0x34>
   ac090:	008002f4 	movhi	r2,11
   ac094:	1082b204 	addi	r2,r2,2760
   ac098:	10800017 	ldw	r2,0(r2)
   ac09c:	103ee83a 	callr	r2
   ac0a0:	00000206 	br	ac0ac <alt_get_errno+0x3c>
   ac0a4:	008002f4 	movhi	r2,11
   ac0a8:	10897d04 	addi	r2,r2,9716
}
   ac0ac:	e037883a 	mov	sp,fp
   ac0b0:	dfc00117 	ldw	ra,4(sp)
   ac0b4:	df000017 	ldw	fp,0(sp)
   ac0b8:	dec00204 	addi	sp,sp,8
   ac0bc:	f800283a 	ret

000ac0c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   ac0c0:	defff904 	addi	sp,sp,-28
   ac0c4:	dfc00615 	stw	ra,24(sp)
   ac0c8:	df000515 	stw	fp,20(sp)
   ac0cc:	df000504 	addi	fp,sp,20
   ac0d0:	e13ffd15 	stw	r4,-12(fp)
   ac0d4:	e17ffe15 	stw	r5,-8(fp)
   ac0d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   ac0dc:	e0bffd17 	ldw	r2,-12(fp)
   ac0e0:	10000716 	blt	r2,zero,ac100 <read+0x40>
   ac0e4:	e13ffd17 	ldw	r4,-12(fp)
   ac0e8:	01400304 	movi	r5,12
   ac0ec:	00a118c0 	call	a118c <__mulsi3>
   ac0f0:	00c002f4 	movhi	r3,11
   ac0f4:	18fe2604 	addi	r3,r3,-1896
   ac0f8:	10c5883a 	add	r2,r2,r3
   ac0fc:	00000106 	br	ac104 <read+0x44>
   ac100:	0005883a 	mov	r2,zero
   ac104:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   ac108:	e0bffb17 	ldw	r2,-20(fp)
   ac10c:	10002026 	beq	r2,zero,ac190 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   ac110:	e0bffb17 	ldw	r2,-20(fp)
   ac114:	10800217 	ldw	r2,8(r2)
   ac118:	108000cc 	andi	r2,r2,3
   ac11c:	10800060 	cmpeqi	r2,r2,1
   ac120:	1000171e 	bne	r2,zero,ac180 <read+0xc0>
        (fd->dev->read))
   ac124:	e0bffb17 	ldw	r2,-20(fp)
   ac128:	10800017 	ldw	r2,0(r2)
   ac12c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   ac130:	10001326 	beq	r2,zero,ac180 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   ac134:	e0bffb17 	ldw	r2,-20(fp)
   ac138:	10800017 	ldw	r2,0(r2)
   ac13c:	10c00517 	ldw	r3,20(r2)
   ac140:	e0bfff17 	ldw	r2,-4(fp)
   ac144:	e13ffb17 	ldw	r4,-20(fp)
   ac148:	e17ffe17 	ldw	r5,-8(fp)
   ac14c:	100d883a 	mov	r6,r2
   ac150:	183ee83a 	callr	r3
   ac154:	e0bffc15 	stw	r2,-16(fp)
   ac158:	e0bffc17 	ldw	r2,-16(fp)
   ac15c:	1000060e 	bge	r2,zero,ac178 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   ac160:	00ac0700 	call	ac070 <alt_get_errno>
   ac164:	e0fffc17 	ldw	r3,-16(fp)
   ac168:	00c7c83a 	sub	r3,zero,r3
   ac16c:	10c00015 	stw	r3,0(r2)
          return -1;
   ac170:	00bfffc4 	movi	r2,-1
   ac174:	00000a06 	br	ac1a0 <read+0xe0>
        }
        return rval;
   ac178:	e0bffc17 	ldw	r2,-16(fp)
   ac17c:	00000806 	br	ac1a0 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   ac180:	00ac0700 	call	ac070 <alt_get_errno>
   ac184:	00c00344 	movi	r3,13
   ac188:	10c00015 	stw	r3,0(r2)
   ac18c:	00000306 	br	ac19c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   ac190:	00ac0700 	call	ac070 <alt_get_errno>
   ac194:	00c01444 	movi	r3,81
   ac198:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   ac19c:	00bfffc4 	movi	r2,-1
}
   ac1a0:	e037883a 	mov	sp,fp
   ac1a4:	dfc00117 	ldw	ra,4(sp)
   ac1a8:	df000017 	ldw	fp,0(sp)
   ac1ac:	dec00204 	addi	sp,sp,8
   ac1b0:	f800283a 	ret

000ac1b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   ac1b4:	defffc04 	addi	sp,sp,-16
   ac1b8:	dfc00315 	stw	ra,12(sp)
   ac1bc:	df000215 	stw	fp,8(sp)
   ac1c0:	dc000115 	stw	r16,4(sp)
   ac1c4:	df000104 	addi	fp,sp,4
   ac1c8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   ac1cc:	e0bfff17 	ldw	r2,-4(fp)
   ac1d0:	108000d0 	cmplti	r2,r2,3
   ac1d4:	1000111e 	bne	r2,zero,ac21c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   ac1d8:	040002f4 	movhi	r16,11
   ac1dc:	843e2604 	addi	r16,r16,-1896
   ac1e0:	e0bfff17 	ldw	r2,-4(fp)
   ac1e4:	1009883a 	mov	r4,r2
   ac1e8:	01400304 	movi	r5,12
   ac1ec:	00a118c0 	call	a118c <__mulsi3>
   ac1f0:	8085883a 	add	r2,r16,r2
   ac1f4:	10800204 	addi	r2,r2,8
   ac1f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   ac1fc:	040002f4 	movhi	r16,11
   ac200:	843e2604 	addi	r16,r16,-1896
   ac204:	e0bfff17 	ldw	r2,-4(fp)
   ac208:	1009883a 	mov	r4,r2
   ac20c:	01400304 	movi	r5,12
   ac210:	00a118c0 	call	a118c <__mulsi3>
   ac214:	8085883a 	add	r2,r16,r2
   ac218:	10000015 	stw	zero,0(r2)
  }
}
   ac21c:	e037883a 	mov	sp,fp
   ac220:	dfc00217 	ldw	ra,8(sp)
   ac224:	df000117 	ldw	fp,4(sp)
   ac228:	dc000017 	ldw	r16,0(sp)
   ac22c:	dec00304 	addi	sp,sp,12
   ac230:	f800283a 	ret

000ac234 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   ac234:	defff904 	addi	sp,sp,-28
   ac238:	df000615 	stw	fp,24(sp)
   ac23c:	df000604 	addi	fp,sp,24
   ac240:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   ac244:	0005303a 	rdctl	r2,status
   ac248:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   ac24c:	e0fffc17 	ldw	r3,-16(fp)
   ac250:	00bfff84 	movi	r2,-2
   ac254:	1884703a 	and	r2,r3,r2
   ac258:	1001703a 	wrctl	status,r2
  
  return context;
   ac25c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   ac260:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   ac264:	d0a00b17 	ldw	r2,-32724(gp)
   ac268:	10c000c4 	addi	r3,r2,3
   ac26c:	00bfff04 	movi	r2,-4
   ac270:	1884703a 	and	r2,r3,r2
   ac274:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   ac278:	d0e00b17 	ldw	r3,-32724(gp)
   ac27c:	e0bfff17 	ldw	r2,-4(fp)
   ac280:	1885883a 	add	r2,r3,r2
   ac284:	00c01834 	movhi	r3,96
   ac288:	18c00004 	addi	r3,r3,0
   ac28c:	1880062e 	bgeu	r3,r2,ac2a8 <sbrk+0x74>
   ac290:	e0bffa17 	ldw	r2,-24(fp)
   ac294:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   ac298:	e0bffd17 	ldw	r2,-12(fp)
   ac29c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   ac2a0:	00bfffc4 	movi	r2,-1
   ac2a4:	00000b06 	br	ac2d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   ac2a8:	d0a00b17 	ldw	r2,-32724(gp)
   ac2ac:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   ac2b0:	d0e00b17 	ldw	r3,-32724(gp)
   ac2b4:	e0bfff17 	ldw	r2,-4(fp)
   ac2b8:	1885883a 	add	r2,r3,r2
   ac2bc:	d0a00b15 	stw	r2,-32724(gp)
   ac2c0:	e0bffa17 	ldw	r2,-24(fp)
   ac2c4:	e0bffe15 	stw	r2,-8(fp)
   ac2c8:	e0bffe17 	ldw	r2,-8(fp)
   ac2cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   ac2d0:	e0bffb17 	ldw	r2,-20(fp)
} 
   ac2d4:	e037883a 	mov	sp,fp
   ac2d8:	df000017 	ldw	fp,0(sp)
   ac2dc:	dec00104 	addi	sp,sp,4
   ac2e0:	f800283a 	ret

000ac2e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   ac2e4:	defffe04 	addi	sp,sp,-8
   ac2e8:	dfc00115 	stw	ra,4(sp)
   ac2ec:	df000015 	stw	fp,0(sp)
   ac2f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   ac2f4:	008002f4 	movhi	r2,11
   ac2f8:	1082b204 	addi	r2,r2,2760
   ac2fc:	10800017 	ldw	r2,0(r2)
   ac300:	10000526 	beq	r2,zero,ac318 <alt_get_errno+0x34>
   ac304:	008002f4 	movhi	r2,11
   ac308:	1082b204 	addi	r2,r2,2760
   ac30c:	10800017 	ldw	r2,0(r2)
   ac310:	103ee83a 	callr	r2
   ac314:	00000206 	br	ac320 <alt_get_errno+0x3c>
   ac318:	008002f4 	movhi	r2,11
   ac31c:	10897d04 	addi	r2,r2,9716
}
   ac320:	e037883a 	mov	sp,fp
   ac324:	dfc00117 	ldw	ra,4(sp)
   ac328:	df000017 	ldw	fp,0(sp)
   ac32c:	dec00204 	addi	sp,sp,8
   ac330:	f800283a 	ret

000ac334 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   ac334:	defffc04 	addi	sp,sp,-16
   ac338:	dfc00315 	stw	ra,12(sp)
   ac33c:	df000215 	stw	fp,8(sp)
   ac340:	df000204 	addi	fp,sp,8
   ac344:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   ac348:	008002f4 	movhi	r2,11
   ac34c:	10898b04 	addi	r2,r2,9772
   ac350:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
   ac354:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   ac358:	008002f4 	movhi	r2,11
   ac35c:	10898a04 	addi	r2,r2,9768
   ac360:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   ac364:	1000051e 	bne	r2,zero,ac37c <times+0x48>
  {
    ALT_ERRNO = ENOSYS;
   ac368:	00ac2e40 	call	ac2e4 <alt_get_errno>
   ac36c:	00c01604 	movi	r3,88
   ac370:	10c00015 	stw	r3,0(r2)
    return 0;
   ac374:	0005883a 	mov	r2,zero
   ac378:	00000a06 	br	ac3a4 <times+0x70>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   ac37c:	e0bfff17 	ldw	r2,-4(fp)
   ac380:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   ac384:	e0bfff17 	ldw	r2,-4(fp)
   ac388:	e0fffe17 	ldw	r3,-8(fp)
   ac38c:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   ac390:	e0bfff17 	ldw	r2,-4(fp)
   ac394:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   ac398:	e0bfff17 	ldw	r2,-4(fp)
   ac39c:	10000315 	stw	zero,12(r2)

  return ticks;
   ac3a0:	e0bffe17 	ldw	r2,-8(fp)
}
   ac3a4:	e037883a 	mov	sp,fp
   ac3a8:	dfc00117 	ldw	ra,4(sp)
   ac3ac:	df000017 	ldw	fp,0(sp)
   ac3b0:	dec00204 	addi	sp,sp,8
   ac3b4:	f800283a 	ret

000ac3b8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   ac3b8:	defffd04 	addi	sp,sp,-12
   ac3bc:	dfc00215 	stw	ra,8(sp)
   ac3c0:	df000115 	stw	fp,4(sp)
   ac3c4:	df000104 	addi	fp,sp,4
   ac3c8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   ac3cc:	e13fff17 	ldw	r4,-4(fp)
   ac3d0:	00adde80 	call	adde8 <alt_busy_sleep>
}
   ac3d4:	e037883a 	mov	sp,fp
   ac3d8:	dfc00117 	ldw	ra,4(sp)
   ac3dc:	df000017 	ldw	fp,0(sp)
   ac3e0:	dec00204 	addi	sp,sp,8
   ac3e4:	f800283a 	ret

000ac3e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   ac3e8:	defffe04 	addi	sp,sp,-8
   ac3ec:	dfc00115 	stw	ra,4(sp)
   ac3f0:	df000015 	stw	fp,0(sp)
   ac3f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   ac3f8:	008002f4 	movhi	r2,11
   ac3fc:	1082b204 	addi	r2,r2,2760
   ac400:	10800017 	ldw	r2,0(r2)
   ac404:	10000526 	beq	r2,zero,ac41c <alt_get_errno+0x34>
   ac408:	008002f4 	movhi	r2,11
   ac40c:	1082b204 	addi	r2,r2,2760
   ac410:	10800017 	ldw	r2,0(r2)
   ac414:	103ee83a 	callr	r2
   ac418:	00000206 	br	ac424 <alt_get_errno+0x3c>
   ac41c:	008002f4 	movhi	r2,11
   ac420:	10897d04 	addi	r2,r2,9716
}
   ac424:	e037883a 	mov	sp,fp
   ac428:	dfc00117 	ldw	ra,4(sp)
   ac42c:	df000017 	ldw	fp,0(sp)
   ac430:	dec00204 	addi	sp,sp,8
   ac434:	f800283a 	ret

000ac438 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   ac438:	defff904 	addi	sp,sp,-28
   ac43c:	dfc00615 	stw	ra,24(sp)
   ac440:	df000515 	stw	fp,20(sp)
   ac444:	df000504 	addi	fp,sp,20
   ac448:	e13ffd15 	stw	r4,-12(fp)
   ac44c:	e17ffe15 	stw	r5,-8(fp)
   ac450:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   ac454:	e0bffd17 	ldw	r2,-12(fp)
   ac458:	10000716 	blt	r2,zero,ac478 <write+0x40>
   ac45c:	e13ffd17 	ldw	r4,-12(fp)
   ac460:	01400304 	movi	r5,12
   ac464:	00a118c0 	call	a118c <__mulsi3>
   ac468:	00c002f4 	movhi	r3,11
   ac46c:	18fe2604 	addi	r3,r3,-1896
   ac470:	10c5883a 	add	r2,r2,r3
   ac474:	00000106 	br	ac47c <write+0x44>
   ac478:	0005883a 	mov	r2,zero
   ac47c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   ac480:	e0bffb17 	ldw	r2,-20(fp)
   ac484:	10001f26 	beq	r2,zero,ac504 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   ac488:	e0bffb17 	ldw	r2,-20(fp)
   ac48c:	10800217 	ldw	r2,8(r2)
   ac490:	108000cc 	andi	r2,r2,3
   ac494:	10001726 	beq	r2,zero,ac4f4 <write+0xbc>
   ac498:	e0bffb17 	ldw	r2,-20(fp)
   ac49c:	10800017 	ldw	r2,0(r2)
   ac4a0:	10800617 	ldw	r2,24(r2)
   ac4a4:	10001326 	beq	r2,zero,ac4f4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   ac4a8:	e0bffb17 	ldw	r2,-20(fp)
   ac4ac:	10800017 	ldw	r2,0(r2)
   ac4b0:	10c00617 	ldw	r3,24(r2)
   ac4b4:	e0bfff17 	ldw	r2,-4(fp)
   ac4b8:	e13ffb17 	ldw	r4,-20(fp)
   ac4bc:	e17ffe17 	ldw	r5,-8(fp)
   ac4c0:	100d883a 	mov	r6,r2
   ac4c4:	183ee83a 	callr	r3
   ac4c8:	e0bffc15 	stw	r2,-16(fp)
   ac4cc:	e0bffc17 	ldw	r2,-16(fp)
   ac4d0:	1000060e 	bge	r2,zero,ac4ec <write+0xb4>
      {
        ALT_ERRNO = -rval;
   ac4d4:	00ac3e80 	call	ac3e8 <alt_get_errno>
   ac4d8:	e0fffc17 	ldw	r3,-16(fp)
   ac4dc:	00c7c83a 	sub	r3,zero,r3
   ac4e0:	10c00015 	stw	r3,0(r2)
        return -1;
   ac4e4:	00bfffc4 	movi	r2,-1
   ac4e8:	00000a06 	br	ac514 <write+0xdc>
      }
      return rval;
   ac4ec:	e0bffc17 	ldw	r2,-16(fp)
   ac4f0:	00000806 	br	ac514 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   ac4f4:	00ac3e80 	call	ac3e8 <alt_get_errno>
   ac4f8:	00c00344 	movi	r3,13
   ac4fc:	10c00015 	stw	r3,0(r2)
   ac500:	00000306 	br	ac510 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   ac504:	00ac3e80 	call	ac3e8 <alt_get_errno>
   ac508:	00c01444 	movi	r3,81
   ac50c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   ac510:	00bfffc4 	movi	r2,-1
}
   ac514:	e037883a 	mov	sp,fp
   ac518:	dfc00117 	ldw	ra,4(sp)
   ac51c:	df000017 	ldw	fp,0(sp)
   ac520:	dec00204 	addi	sp,sp,8
   ac524:	f800283a 	ret

000ac528 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   ac528:	defffd04 	addi	sp,sp,-12
   ac52c:	dfc00215 	stw	ra,8(sp)
   ac530:	df000115 	stw	fp,4(sp)
   ac534:	df000104 	addi	fp,sp,4
   ac538:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   ac53c:	e13fff17 	ldw	r4,-4(fp)
   ac540:	014002f4 	movhi	r5,11
   ac544:	2942af04 	addi	r5,r5,2748
   ac548:	00adfa80 	call	adfa8 <alt_dev_llist_insert>
}
   ac54c:	e037883a 	mov	sp,fp
   ac550:	dfc00117 	ldw	ra,4(sp)
   ac554:	df000017 	ldw	fp,0(sp)
   ac558:	dec00204 	addi	sp,sp,8
   ac55c:	f800283a 	ret

000ac560 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   ac560:	defffd04 	addi	sp,sp,-12
   ac564:	dfc00215 	stw	ra,8(sp)
   ac568:	df000115 	stw	fp,4(sp)
   ac56c:	df000104 	addi	fp,sp,4
   ac570:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_F, cpu_F);
   ac574:	00ae9e80 	call	ae9e8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   ac578:	00800044 	movi	r2,1
   ac57c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   ac580:	e037883a 	mov	sp,fp
   ac584:	dfc00117 	ldw	ra,4(sp)
   ac588:	df000017 	ldw	fp,0(sp)
   ac58c:	dec00204 	addi	sp,sp,8
   ac590:	f800283a 	ret

000ac594 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   ac594:	defffe04 	addi	sp,sp,-8
   ac598:	dfc00115 	stw	ra,4(sp)
   ac59c:	df000015 	stw	fp,0(sp)
   ac5a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGHTIMER_F, highTimer_F);
   ac5a4:	008002f4 	movhi	r2,11
   ac5a8:	10898704 	addi	r2,r2,9756
   ac5ac:	00c20074 	movhi	r3,2049
   ac5b0:	18c41804 	addi	r3,r3,4192
   ac5b4:	10c00015 	stw	r3,0(r2)
   ac5b8:	008002f4 	movhi	r2,11
   ac5bc:	10898804 	addi	r2,r2,9760
   ac5c0:	00c17db4 	movhi	r3,1526
   ac5c4:	18f84004 	addi	r3,r3,-7936
   ac5c8:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_F, timer_F);
   ac5cc:	01020074 	movhi	r4,2049
   ac5d0:	21040804 	addi	r4,r4,4128
   ac5d4:	000b883a 	mov	r5,zero
   ac5d8:	000d883a 	mov	r6,zero
   ac5dc:	01c0fa04 	movi	r7,1000
   ac5e0:	00ad5f80 	call	ad5f8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_AF, fifo_AF);
   ac5e4:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_EF, fifo_EF);
   ac5e8:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_F, jtag_F);
   ac5ec:	010002f4 	movhi	r4,11
   ac5f0:	213e9004 	addi	r4,r4,-1472
   ac5f4:	000b883a 	mov	r5,zero
   ac5f8:	01800084 	movi	r6,2
   ac5fc:	00acc840 	call	acc84 <altera_avalon_jtag_uart_init>
   ac600:	010002f4 	movhi	r4,11
   ac604:	213e8604 	addi	r4,r4,-1512
   ac608:	00ac5280 	call	ac528 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_F, sysid_F);
   ac60c:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   ac610:	010002f4 	movhi	r4,11
   ac614:	21029e04 	addi	r4,r4,2680
   ac618:	00ae2a40 	call	ae2a4 <alt_fs_reg>
}
   ac61c:	e037883a 	mov	sp,fp
   ac620:	dfc00117 	ldw	ra,4(sp)
   ac624:	df000017 	ldw	fp,0(sp)
   ac628:	dec00204 	addi	sp,sp,8
   ac62c:	f800283a 	ret

000ac630 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   ac630:	defffa04 	addi	sp,sp,-24
   ac634:	dfc00515 	stw	ra,20(sp)
   ac638:	df000415 	stw	fp,16(sp)
   ac63c:	df000404 	addi	fp,sp,16
   ac640:	e13ffc15 	stw	r4,-16(fp)
   ac644:	e17ffd15 	stw	r5,-12(fp)
   ac648:	e1bffe15 	stw	r6,-8(fp)
   ac64c:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   ac650:	e13ffc17 	ldw	r4,-16(fp)
   ac654:	01400fc4 	movi	r5,63
   ac658:	00ac7fc0 	call	ac7fc <altera_avalon_fifo_clear_event>
   ac65c:	10000226 	beq	r2,zero,ac668 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   ac660:	00bfffc4 	movi	r2,-1
   ac664:	00001306 	br	ac6b4 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   ac668:	e13ffc17 	ldw	r4,-16(fp)
   ac66c:	e17ffd17 	ldw	r5,-12(fp)
   ac670:	00ac8580 	call	ac858 <altera_avalon_fifo_write_ienable>
   ac674:	10000226 	beq	r2,zero,ac680 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   ac678:	00bfff84 	movi	r2,-2
   ac67c:	00000d06 	br	ac6b4 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   ac680:	e13ffc17 	ldw	r4,-16(fp)
   ac684:	e17fff17 	ldw	r5,-4(fp)
   ac688:	00ac8b00 	call	ac8b0 <altera_avalon_fifo_write_almostfull>
   ac68c:	10000226 	beq	r2,zero,ac698 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   ac690:	00bfff44 	movi	r2,-3
   ac694:	00000706 	br	ac6b4 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   ac698:	e13ffc17 	ldw	r4,-16(fp)
   ac69c:	e17ffe17 	ldw	r5,-8(fp)
   ac6a0:	00ac9080 	call	ac908 <altera_avalon_fifo_write_almostempty>
   ac6a4:	10000226 	beq	r2,zero,ac6b0 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   ac6a8:	00bfff44 	movi	r2,-3
   ac6ac:	00000106 	br	ac6b4 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   ac6b0:	0005883a 	mov	r2,zero
}
   ac6b4:	e037883a 	mov	sp,fp
   ac6b8:	dfc00117 	ldw	ra,4(sp)
   ac6bc:	df000017 	ldw	fp,0(sp)
   ac6c0:	dec00204 	addi	sp,sp,8
   ac6c4:	f800283a 	ret

000ac6c8 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   ac6c8:	defffd04 	addi	sp,sp,-12
   ac6cc:	df000215 	stw	fp,8(sp)
   ac6d0:	df000204 	addi	fp,sp,8
   ac6d4:	e13ffe15 	stw	r4,-8(fp)
   ac6d8:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   ac6dc:	e0bffe17 	ldw	r2,-8(fp)
   ac6e0:	10800104 	addi	r2,r2,4
   ac6e4:	10800037 	ldwio	r2,0(r2)
   ac6e8:	1007883a 	mov	r3,r2
   ac6ec:	e0bfff17 	ldw	r2,-4(fp)
   ac6f0:	1884703a 	and	r2,r3,r2
}
   ac6f4:	e037883a 	mov	sp,fp
   ac6f8:	df000017 	ldw	fp,0(sp)
   ac6fc:	dec00104 	addi	sp,sp,4
   ac700:	f800283a 	ret

000ac704 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   ac704:	defffd04 	addi	sp,sp,-12
   ac708:	df000215 	stw	fp,8(sp)
   ac70c:	df000204 	addi	fp,sp,8
   ac710:	e13ffe15 	stw	r4,-8(fp)
   ac714:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   ac718:	e0bffe17 	ldw	r2,-8(fp)
   ac71c:	10800304 	addi	r2,r2,12
   ac720:	10800037 	ldwio	r2,0(r2)
   ac724:	1007883a 	mov	r3,r2
   ac728:	e0bfff17 	ldw	r2,-4(fp)
   ac72c:	1884703a 	and	r2,r3,r2
}
   ac730:	e037883a 	mov	sp,fp
   ac734:	df000017 	ldw	fp,0(sp)
   ac738:	dec00104 	addi	sp,sp,4
   ac73c:	f800283a 	ret

000ac740 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   ac740:	defffe04 	addi	sp,sp,-8
   ac744:	df000115 	stw	fp,4(sp)
   ac748:	df000104 	addi	fp,sp,4
   ac74c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   ac750:	e0bfff17 	ldw	r2,-4(fp)
   ac754:	10800404 	addi	r2,r2,16
   ac758:	10800037 	ldwio	r2,0(r2)
}
   ac75c:	e037883a 	mov	sp,fp
   ac760:	df000017 	ldw	fp,0(sp)
   ac764:	dec00104 	addi	sp,sp,4
   ac768:	f800283a 	ret

000ac76c <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   ac76c:	defffe04 	addi	sp,sp,-8
   ac770:	df000115 	stw	fp,4(sp)
   ac774:	df000104 	addi	fp,sp,4
   ac778:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   ac77c:	e0bfff17 	ldw	r2,-4(fp)
   ac780:	10800504 	addi	r2,r2,20
   ac784:	10800037 	ldwio	r2,0(r2)
}
   ac788:	e037883a 	mov	sp,fp
   ac78c:	df000017 	ldw	fp,0(sp)
   ac790:	dec00104 	addi	sp,sp,4
   ac794:	f800283a 	ret

000ac798 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   ac798:	defffd04 	addi	sp,sp,-12
   ac79c:	df000215 	stw	fp,8(sp)
   ac7a0:	df000204 	addi	fp,sp,8
   ac7a4:	e13ffe15 	stw	r4,-8(fp)
   ac7a8:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   ac7ac:	e0bffe17 	ldw	r2,-8(fp)
   ac7b0:	10800204 	addi	r2,r2,8
   ac7b4:	10800037 	ldwio	r2,0(r2)
   ac7b8:	1007883a 	mov	r3,r2
   ac7bc:	e0bfff17 	ldw	r2,-4(fp)
   ac7c0:	1884703a 	and	r2,r3,r2
}
   ac7c4:	e037883a 	mov	sp,fp
   ac7c8:	df000017 	ldw	fp,0(sp)
   ac7cc:	dec00104 	addi	sp,sp,4
   ac7d0:	f800283a 	ret

000ac7d4 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   ac7d4:	defffe04 	addi	sp,sp,-8
   ac7d8:	df000115 	stw	fp,4(sp)
   ac7dc:	df000104 	addi	fp,sp,4
   ac7e0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   ac7e4:	e0bfff17 	ldw	r2,-4(fp)
   ac7e8:	10800037 	ldwio	r2,0(r2)
}
   ac7ec:	e037883a 	mov	sp,fp
   ac7f0:	df000017 	ldw	fp,0(sp)
   ac7f4:	dec00104 	addi	sp,sp,4
   ac7f8:	f800283a 	ret

000ac7fc <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   ac7fc:	defffd04 	addi	sp,sp,-12
   ac800:	df000215 	stw	fp,8(sp)
   ac804:	df000204 	addi	fp,sp,8
   ac808:	e13ffe15 	stw	r4,-8(fp)
   ac80c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   ac810:	e0bffe17 	ldw	r2,-8(fp)
   ac814:	10800204 	addi	r2,r2,8
   ac818:	e0ffff17 	ldw	r3,-4(fp)
   ac81c:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   ac820:	e0bffe17 	ldw	r2,-8(fp)
   ac824:	10800204 	addi	r2,r2,8
   ac828:	10800037 	ldwio	r2,0(r2)
   ac82c:	1007883a 	mov	r3,r2
   ac830:	e0bfff17 	ldw	r2,-4(fp)
   ac834:	1884703a 	and	r2,r3,r2
   ac838:	1000021e 	bne	r2,zero,ac844 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   ac83c:	0005883a 	mov	r2,zero
   ac840:	00000106 	br	ac848 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   ac844:	00bfffc4 	movi	r2,-1
}
   ac848:	e037883a 	mov	sp,fp
   ac84c:	df000017 	ldw	fp,0(sp)
   ac850:	dec00104 	addi	sp,sp,4
   ac854:	f800283a 	ret

000ac858 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   ac858:	defffd04 	addi	sp,sp,-12
   ac85c:	df000215 	stw	fp,8(sp)
   ac860:	df000204 	addi	fp,sp,8
   ac864:	e13ffe15 	stw	r4,-8(fp)
   ac868:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   ac86c:	e0bffe17 	ldw	r2,-8(fp)
   ac870:	10800304 	addi	r2,r2,12
   ac874:	e0ffff17 	ldw	r3,-4(fp)
   ac878:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   ac87c:	e0bffe17 	ldw	r2,-8(fp)
   ac880:	10800304 	addi	r2,r2,12
   ac884:	10800037 	ldwio	r2,0(r2)
   ac888:	1007883a 	mov	r3,r2
   ac88c:	e0bfff17 	ldw	r2,-4(fp)
   ac890:	1880021e 	bne	r3,r2,ac89c <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   ac894:	0005883a 	mov	r2,zero
   ac898:	00000106 	br	ac8a0 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   ac89c:	00bfff84 	movi	r2,-2
}
   ac8a0:	e037883a 	mov	sp,fp
   ac8a4:	df000017 	ldw	fp,0(sp)
   ac8a8:	dec00104 	addi	sp,sp,4
   ac8ac:	f800283a 	ret

000ac8b0 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   ac8b0:	defffd04 	addi	sp,sp,-12
   ac8b4:	df000215 	stw	fp,8(sp)
   ac8b8:	df000204 	addi	fp,sp,8
   ac8bc:	e13ffe15 	stw	r4,-8(fp)
   ac8c0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   ac8c4:	e0bffe17 	ldw	r2,-8(fp)
   ac8c8:	10800404 	addi	r2,r2,16
   ac8cc:	e0ffff17 	ldw	r3,-4(fp)
   ac8d0:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   ac8d4:	e0bffe17 	ldw	r2,-8(fp)
   ac8d8:	10800404 	addi	r2,r2,16
   ac8dc:	10800037 	ldwio	r2,0(r2)
   ac8e0:	1007883a 	mov	r3,r2
   ac8e4:	e0bfff17 	ldw	r2,-4(fp)
   ac8e8:	1880021e 	bne	r3,r2,ac8f4 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   ac8ec:	0005883a 	mov	r2,zero
   ac8f0:	00000106 	br	ac8f8 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   ac8f4:	00bfff44 	movi	r2,-3
}
   ac8f8:	e037883a 	mov	sp,fp
   ac8fc:	df000017 	ldw	fp,0(sp)
   ac900:	dec00104 	addi	sp,sp,4
   ac904:	f800283a 	ret

000ac908 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   ac908:	defffd04 	addi	sp,sp,-12
   ac90c:	df000215 	stw	fp,8(sp)
   ac910:	df000204 	addi	fp,sp,8
   ac914:	e13ffe15 	stw	r4,-8(fp)
   ac918:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   ac91c:	e0bffe17 	ldw	r2,-8(fp)
   ac920:	10800504 	addi	r2,r2,20
   ac924:	e0ffff17 	ldw	r3,-4(fp)
   ac928:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   ac92c:	e0bffe17 	ldw	r2,-8(fp)
   ac930:	10800504 	addi	r2,r2,20
   ac934:	10800037 	ldwio	r2,0(r2)
   ac938:	1007883a 	mov	r3,r2
   ac93c:	e0bfff17 	ldw	r2,-4(fp)
   ac940:	1880021e 	bne	r3,r2,ac94c <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   ac944:	0005883a 	mov	r2,zero
   ac948:	00000106 	br	ac950 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   ac94c:	00bfff44 	movi	r2,-3
}
   ac950:	e037883a 	mov	sp,fp
   ac954:	df000017 	ldw	fp,0(sp)
   ac958:	dec00104 	addi	sp,sp,4
   ac95c:	f800283a 	ret

000ac960 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   ac960:	defffb04 	addi	sp,sp,-20
   ac964:	dfc00415 	stw	ra,16(sp)
   ac968:	df000315 	stw	fp,12(sp)
   ac96c:	df000304 	addi	fp,sp,12
   ac970:	e13ffd15 	stw	r4,-12(fp)
   ac974:	e17ffe15 	stw	r5,-8(fp)
   ac978:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   ac97c:	e13ffe17 	ldw	r4,-8(fp)
   ac980:	01400044 	movi	r5,1
   ac984:	00ac6c80 	call	ac6c8 <altera_avalon_fifo_read_status>
   ac988:	1000051e 	bne	r2,zero,ac9a0 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   ac98c:	e0bffd17 	ldw	r2,-12(fp)
   ac990:	e0ffff17 	ldw	r3,-4(fp)
   ac994:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   ac998:	0005883a 	mov	r2,zero
   ac99c:	00000106 	br	ac9a4 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   ac9a0:	00bfff04 	movi	r2,-4
    }
}
   ac9a4:	e037883a 	mov	sp,fp
   ac9a8:	dfc00117 	ldw	ra,4(sp)
   ac9ac:	df000017 	ldw	fp,0(sp)
   ac9b0:	dec00204 	addi	sp,sp,8
   ac9b4:	f800283a 	ret

000ac9b8 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   ac9b8:	defffa04 	addi	sp,sp,-24
   ac9bc:	dfc00515 	stw	ra,20(sp)
   ac9c0:	df000415 	stw	fp,16(sp)
   ac9c4:	df000404 	addi	fp,sp,16
   ac9c8:	e13ffd15 	stw	r4,-12(fp)
   ac9cc:	e17ffe15 	stw	r5,-8(fp)
   ac9d0:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   ac9d4:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   ac9d8:	e0bfff17 	ldw	r2,-4(fp)
   ac9dc:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   ac9e0:	e13ffe17 	ldw	r4,-8(fp)
   ac9e4:	01400084 	movi	r5,2
   ac9e8:	00ac6c80 	call	ac6c8 <altera_avalon_fifo_read_status>
   ac9ec:	1000071e 	bne	r2,zero,aca0c <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   ac9f0:	e13ffe17 	ldw	r4,-8(fp)
   ac9f4:	00ac7d40 	call	ac7d4 <altera_avalon_fifo_read_level>
   ac9f8:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   ac9fc:	e0bffd17 	ldw	r2,-12(fp)
   aca00:	10c00037 	ldwio	r3,0(r2)
   aca04:	e0bfff17 	ldw	r2,-4(fp)
   aca08:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   aca0c:	e0bffc17 	ldw	r2,-16(fp)
}
   aca10:	e037883a 	mov	sp,fp
   aca14:	dfc00117 	ldw	ra,4(sp)
   aca18:	df000017 	ldw	fp,0(sp)
   aca1c:	dec00204 	addi	sp,sp,8
   aca20:	f800283a 	ret

000aca24 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   aca24:	defffc04 	addi	sp,sp,-16
   aca28:	dfc00315 	stw	ra,12(sp)
   aca2c:	df000215 	stw	fp,8(sp)
   aca30:	df000204 	addi	fp,sp,8
   aca34:	e13ffe15 	stw	r4,-8(fp)
   aca38:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   aca3c:	e13fff17 	ldw	r4,-4(fp)
   aca40:	01400084 	movi	r5,2
   aca44:	00ac6c80 	call	ac6c8 <altera_avalon_fifo_read_status>
   aca48:	1000031e 	bne	r2,zero,aca58 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   aca4c:	e0bffe17 	ldw	r2,-8(fp)
   aca50:	10800037 	ldwio	r2,0(r2)
   aca54:	00000106 	br	aca5c <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   aca58:	0005883a 	mov	r2,zero
}
   aca5c:	e037883a 	mov	sp,fp
   aca60:	dfc00117 	ldw	ra,4(sp)
   aca64:	df000017 	ldw	fp,0(sp)
   aca68:	dec00204 	addi	sp,sp,8
   aca6c:	f800283a 	ret

000aca70 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   aca70:	defffb04 	addi	sp,sp,-20
   aca74:	dfc00415 	stw	ra,16(sp)
   aca78:	df000315 	stw	fp,12(sp)
   aca7c:	df000304 	addi	fp,sp,12
   aca80:	e13ffd15 	stw	r4,-12(fp)
   aca84:	e17ffe15 	stw	r5,-8(fp)
   aca88:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   aca8c:	e13ffe17 	ldw	r4,-8(fp)
   aca90:	01400044 	movi	r5,1
   aca94:	00ac6c80 	call	ac6c8 <altera_avalon_fifo_read_status>
   aca98:	1000061e 	bne	r2,zero,acab4 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   aca9c:	e0bffd17 	ldw	r2,-12(fp)
   acaa0:	10800104 	addi	r2,r2,4
   acaa4:	e0ffff17 	ldw	r3,-4(fp)
   acaa8:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   acaac:	0005883a 	mov	r2,zero
   acab0:	00000106 	br	acab8 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   acab4:	00bfff04 	movi	r2,-4
    }
}
   acab8:	e037883a 	mov	sp,fp
   acabc:	dfc00117 	ldw	ra,4(sp)
   acac0:	df000017 	ldw	fp,0(sp)
   acac4:	dec00204 	addi	sp,sp,8
   acac8:	f800283a 	ret

000acacc <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   acacc:	defffe04 	addi	sp,sp,-8
   acad0:	df000115 	stw	fp,4(sp)
   acad4:	df000104 	addi	fp,sp,4
   acad8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   acadc:	e0bfff17 	ldw	r2,-4(fp)
   acae0:	10800104 	addi	r2,r2,4
   acae4:	10800037 	ldwio	r2,0(r2)
}
   acae8:	e037883a 	mov	sp,fp
   acaec:	df000017 	ldw	fp,0(sp)
   acaf0:	dec00104 	addi	sp,sp,4
   acaf4:	f800283a 	ret

000acaf8 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   acaf8:	defffe04 	addi	sp,sp,-8
   acafc:	df000115 	stw	fp,4(sp)
   acb00:	df000104 	addi	fp,sp,4
   acb04:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   acb08:	e0bfff17 	ldw	r2,-4(fp)
   acb0c:	10800037 	ldwio	r2,0(r2)
}
   acb10:	e037883a 	mov	sp,fp
   acb14:	df000017 	ldw	fp,0(sp)
   acb18:	dec00104 	addi	sp,sp,4
   acb1c:	f800283a 	ret

000acb20 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   acb20:	defffa04 	addi	sp,sp,-24
   acb24:	dfc00515 	stw	ra,20(sp)
   acb28:	df000415 	stw	fp,16(sp)
   acb2c:	df000404 	addi	fp,sp,16
   acb30:	e13ffd15 	stw	r4,-12(fp)
   acb34:	e17ffe15 	stw	r5,-8(fp)
   acb38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   acb3c:	e0bffd17 	ldw	r2,-12(fp)
   acb40:	10800017 	ldw	r2,0(r2)
   acb44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   acb48:	e0bffc17 	ldw	r2,-16(fp)
   acb4c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   acb50:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   acb54:	10800217 	ldw	r2,8(r2)
   acb58:	1809883a 	mov	r4,r3
   acb5c:	e17ffe17 	ldw	r5,-8(fp)
   acb60:	e1bfff17 	ldw	r6,-4(fp)
   acb64:	100f883a 	mov	r7,r2
   acb68:	00ad1480 	call	ad148 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   acb6c:	e037883a 	mov	sp,fp
   acb70:	dfc00117 	ldw	ra,4(sp)
   acb74:	df000017 	ldw	fp,0(sp)
   acb78:	dec00204 	addi	sp,sp,8
   acb7c:	f800283a 	ret

000acb80 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   acb80:	defffa04 	addi	sp,sp,-24
   acb84:	dfc00515 	stw	ra,20(sp)
   acb88:	df000415 	stw	fp,16(sp)
   acb8c:	df000404 	addi	fp,sp,16
   acb90:	e13ffd15 	stw	r4,-12(fp)
   acb94:	e17ffe15 	stw	r5,-8(fp)
   acb98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   acb9c:	e0bffd17 	ldw	r2,-12(fp)
   acba0:	10800017 	ldw	r2,0(r2)
   acba4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   acba8:	e0bffc17 	ldw	r2,-16(fp)
   acbac:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   acbb0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   acbb4:	10800217 	ldw	r2,8(r2)
   acbb8:	1809883a 	mov	r4,r3
   acbbc:	e17ffe17 	ldw	r5,-8(fp)
   acbc0:	e1bfff17 	ldw	r6,-4(fp)
   acbc4:	100f883a 	mov	r7,r2
   acbc8:	00ad3600 	call	ad360 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   acbcc:	e037883a 	mov	sp,fp
   acbd0:	dfc00117 	ldw	ra,4(sp)
   acbd4:	df000017 	ldw	fp,0(sp)
   acbd8:	dec00204 	addi	sp,sp,8
   acbdc:	f800283a 	ret

000acbe0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   acbe0:	defffc04 	addi	sp,sp,-16
   acbe4:	dfc00315 	stw	ra,12(sp)
   acbe8:	df000215 	stw	fp,8(sp)
   acbec:	df000204 	addi	fp,sp,8
   acbf0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   acbf4:	e0bfff17 	ldw	r2,-4(fp)
   acbf8:	10800017 	ldw	r2,0(r2)
   acbfc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   acc00:	e0bffe17 	ldw	r2,-8(fp)
   acc04:	10c00a04 	addi	r3,r2,40
   acc08:	e0bfff17 	ldw	r2,-4(fp)
   acc0c:	10800217 	ldw	r2,8(r2)
   acc10:	1809883a 	mov	r4,r3
   acc14:	100b883a 	mov	r5,r2
   acc18:	00acfec0 	call	acfec <altera_avalon_jtag_uart_close>
}
   acc1c:	e037883a 	mov	sp,fp
   acc20:	dfc00117 	ldw	ra,4(sp)
   acc24:	df000017 	ldw	fp,0(sp)
   acc28:	dec00204 	addi	sp,sp,8
   acc2c:	f800283a 	ret

000acc30 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   acc30:	defffa04 	addi	sp,sp,-24
   acc34:	dfc00515 	stw	ra,20(sp)
   acc38:	df000415 	stw	fp,16(sp)
   acc3c:	df000404 	addi	fp,sp,16
   acc40:	e13ffd15 	stw	r4,-12(fp)
   acc44:	e17ffe15 	stw	r5,-8(fp)
   acc48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   acc4c:	e0bffd17 	ldw	r2,-12(fp)
   acc50:	10800017 	ldw	r2,0(r2)
   acc54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   acc58:	e0bffc17 	ldw	r2,-16(fp)
   acc5c:	10800a04 	addi	r2,r2,40
   acc60:	1009883a 	mov	r4,r2
   acc64:	e17ffe17 	ldw	r5,-8(fp)
   acc68:	e1bfff17 	ldw	r6,-4(fp)
   acc6c:	00ad0540 	call	ad054 <altera_avalon_jtag_uart_ioctl>
}
   acc70:	e037883a 	mov	sp,fp
   acc74:	dfc00117 	ldw	ra,4(sp)
   acc78:	df000017 	ldw	fp,0(sp)
   acc7c:	dec00204 	addi	sp,sp,8
   acc80:	f800283a 	ret

000acc84 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   acc84:	defffa04 	addi	sp,sp,-24
   acc88:	dfc00515 	stw	ra,20(sp)
   acc8c:	df000415 	stw	fp,16(sp)
   acc90:	df000404 	addi	fp,sp,16
   acc94:	e13ffd15 	stw	r4,-12(fp)
   acc98:	e17ffe15 	stw	r5,-8(fp)
   acc9c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   acca0:	e0bffd17 	ldw	r2,-12(fp)
   acca4:	00c00044 	movi	r3,1
   acca8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   accac:	e0bffd17 	ldw	r2,-12(fp)
   accb0:	10800017 	ldw	r2,0(r2)
   accb4:	10800104 	addi	r2,r2,4
   accb8:	e0fffd17 	ldw	r3,-12(fp)
   accbc:	18c00817 	ldw	r3,32(r3)
   accc0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   accc4:	e0fffe17 	ldw	r3,-8(fp)
   accc8:	e0bfff17 	ldw	r2,-4(fp)
   acccc:	d8000015 	stw	zero,0(sp)
   accd0:	1809883a 	mov	r4,r3
   accd4:	100b883a 	mov	r5,r2
   accd8:	018002f4 	movhi	r6,11
   accdc:	31b35104 	addi	r6,r6,-12988
   acce0:	e1fffd17 	ldw	r7,-12(fp)
   acce4:	00ae42c0 	call	ae42c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   acce8:	e0bffd17 	ldw	r2,-12(fp)
   accec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   accf0:	e0bffd17 	ldw	r2,-12(fp)
   accf4:	10c00204 	addi	r3,r2,8
   accf8:	008002f4 	movhi	r2,11
   accfc:	10898a04 	addi	r2,r2,9768
   acd00:	10800017 	ldw	r2,0(r2)
   acd04:	1809883a 	mov	r4,r3
   acd08:	100b883a 	mov	r5,r2
   acd0c:	018002f4 	movhi	r6,11
   acd10:	31b3d204 	addi	r6,r6,-12472
   acd14:	e1fffd17 	ldw	r7,-12(fp)
   acd18:	00adca80 	call	adca8 <alt_alarm_start>
   acd1c:	1000040e 	bge	r2,zero,acd30 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   acd20:	e0bffd17 	ldw	r2,-12(fp)
   acd24:	00e00034 	movhi	r3,32768
   acd28:	18ffffc4 	addi	r3,r3,-1
   acd2c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   acd30:	e037883a 	mov	sp,fp
   acd34:	dfc00117 	ldw	ra,4(sp)
   acd38:	df000017 	ldw	fp,0(sp)
   acd3c:	dec00204 	addi	sp,sp,8
   acd40:	f800283a 	ret

000acd44 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   acd44:	defff804 	addi	sp,sp,-32
   acd48:	df000715 	stw	fp,28(sp)
   acd4c:	df000704 	addi	fp,sp,28
   acd50:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   acd54:	e0bfff17 	ldw	r2,-4(fp)
   acd58:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   acd5c:	e0bffb17 	ldw	r2,-20(fp)
   acd60:	10800017 	ldw	r2,0(r2)
   acd64:	e0bffc15 	stw	r2,-16(fp)
   acd68:	00000106 	br	acd70 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   acd6c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   acd70:	e0bffc17 	ldw	r2,-16(fp)
   acd74:	10800104 	addi	r2,r2,4
   acd78:	10800037 	ldwio	r2,0(r2)
   acd7c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   acd80:	e0bffd17 	ldw	r2,-12(fp)
   acd84:	1080c00c 	andi	r2,r2,768
   acd88:	10006a26 	beq	r2,zero,acf34 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   acd8c:	e0bffd17 	ldw	r2,-12(fp)
   acd90:	1080400c 	andi	r2,r2,256
   acd94:	10003326 	beq	r2,zero,ace64 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   acd98:	00800074 	movhi	r2,1
   acd9c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   acda0:	e0bffb17 	ldw	r2,-20(fp)
   acda4:	10800a17 	ldw	r2,40(r2)
   acda8:	10800044 	addi	r2,r2,1
   acdac:	1081ffcc 	andi	r2,r2,2047
   acdb0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   acdb4:	e0bffb17 	ldw	r2,-20(fp)
   acdb8:	10c00b17 	ldw	r3,44(r2)
   acdbc:	e0bffe17 	ldw	r2,-8(fp)
   acdc0:	18801426 	beq	r3,r2,ace14 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   acdc4:	e0bffc17 	ldw	r2,-16(fp)
   acdc8:	10800037 	ldwio	r2,0(r2)
   acdcc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   acdd0:	e0bff917 	ldw	r2,-28(fp)
   acdd4:	10a0000c 	andi	r2,r2,32768
   acdd8:	10001026 	beq	r2,zero,ace1c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   acddc:	e0bffb17 	ldw	r2,-20(fp)
   acde0:	10800a17 	ldw	r2,40(r2)
   acde4:	e0fff917 	ldw	r3,-28(fp)
   acde8:	e13ffb17 	ldw	r4,-20(fp)
   acdec:	2085883a 	add	r2,r4,r2
   acdf0:	10800e04 	addi	r2,r2,56
   acdf4:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   acdf8:	e0bffb17 	ldw	r2,-20(fp)
   acdfc:	10800a17 	ldw	r2,40(r2)
   ace00:	10800044 	addi	r2,r2,1
   ace04:	10c1ffcc 	andi	r3,r2,2047
   ace08:	e0bffb17 	ldw	r2,-20(fp)
   ace0c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   ace10:	003fe306 	br	acda0 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   ace14:	0001883a 	nop
   ace18:	00000106 	br	ace20 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   ace1c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   ace20:	e0bff917 	ldw	r2,-28(fp)
   ace24:	10bfffec 	andhi	r2,r2,65535
   ace28:	10000e26 	beq	r2,zero,ace64 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   ace2c:	e0bffb17 	ldw	r2,-20(fp)
   ace30:	10c00817 	ldw	r3,32(r2)
   ace34:	00bfff84 	movi	r2,-2
   ace38:	1886703a 	and	r3,r3,r2
   ace3c:	e0bffb17 	ldw	r2,-20(fp)
   ace40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   ace44:	e0bffc17 	ldw	r2,-16(fp)
   ace48:	10800104 	addi	r2,r2,4
   ace4c:	e0fffb17 	ldw	r3,-20(fp)
   ace50:	18c00817 	ldw	r3,32(r3)
   ace54:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   ace58:	e0bffc17 	ldw	r2,-16(fp)
   ace5c:	10800104 	addi	r2,r2,4
   ace60:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   ace64:	e0bffd17 	ldw	r2,-12(fp)
   ace68:	1080800c 	andi	r2,r2,512
   ace6c:	103fbf26 	beq	r2,zero,acd6c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   ace70:	e0bffd17 	ldw	r2,-12(fp)
   ace74:	1004d43a 	srli	r2,r2,16
   ace78:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   ace7c:	00001406 	br	aced0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   ace80:	e0bffc17 	ldw	r2,-16(fp)
   ace84:	e0fffb17 	ldw	r3,-20(fp)
   ace88:	18c00d17 	ldw	r3,52(r3)
   ace8c:	e13ffb17 	ldw	r4,-20(fp)
   ace90:	20c7883a 	add	r3,r4,r3
   ace94:	18c20e04 	addi	r3,r3,2104
   ace98:	18c00003 	ldbu	r3,0(r3)
   ace9c:	18c03fcc 	andi	r3,r3,255
   acea0:	18c0201c 	xori	r3,r3,128
   acea4:	18ffe004 	addi	r3,r3,-128
   acea8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   aceac:	e0bffb17 	ldw	r2,-20(fp)
   aceb0:	10800d17 	ldw	r2,52(r2)
   aceb4:	10800044 	addi	r2,r2,1
   aceb8:	10c1ffcc 	andi	r3,r2,2047
   acebc:	e0bffb17 	ldw	r2,-20(fp)
   acec0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   acec4:	e0bffa17 	ldw	r2,-24(fp)
   acec8:	10bfffc4 	addi	r2,r2,-1
   acecc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   aced0:	e0bffa17 	ldw	r2,-24(fp)
   aced4:	10000526 	beq	r2,zero,aceec <altera_avalon_jtag_uart_irq+0x1a8>
   aced8:	e0bffb17 	ldw	r2,-20(fp)
   acedc:	10c00d17 	ldw	r3,52(r2)
   acee0:	e0bffb17 	ldw	r2,-20(fp)
   acee4:	10800c17 	ldw	r2,48(r2)
   acee8:	18bfe51e 	bne	r3,r2,ace80 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   aceec:	e0bffa17 	ldw	r2,-24(fp)
   acef0:	103f9e26 	beq	r2,zero,acd6c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   acef4:	e0bffb17 	ldw	r2,-20(fp)
   acef8:	10c00817 	ldw	r3,32(r2)
   acefc:	00bfff44 	movi	r2,-3
   acf00:	1886703a 	and	r3,r3,r2
   acf04:	e0bffb17 	ldw	r2,-20(fp)
   acf08:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   acf0c:	e0bffb17 	ldw	r2,-20(fp)
   acf10:	10800017 	ldw	r2,0(r2)
   acf14:	10800104 	addi	r2,r2,4
   acf18:	e0fffb17 	ldw	r3,-20(fp)
   acf1c:	18c00817 	ldw	r3,32(r3)
   acf20:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   acf24:	e0bffc17 	ldw	r2,-16(fp)
   acf28:	10800104 	addi	r2,r2,4
   acf2c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   acf30:	003f8e06 	br	acd6c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   acf34:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   acf38:	e037883a 	mov	sp,fp
   acf3c:	df000017 	ldw	fp,0(sp)
   acf40:	dec00104 	addi	sp,sp,4
   acf44:	f800283a 	ret

000acf48 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   acf48:	defffc04 	addi	sp,sp,-16
   acf4c:	df000315 	stw	fp,12(sp)
   acf50:	df000304 	addi	fp,sp,12
   acf54:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   acf58:	e0bfff17 	ldw	r2,-4(fp)
   acf5c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   acf60:	e0bffd17 	ldw	r2,-12(fp)
   acf64:	10800017 	ldw	r2,0(r2)
   acf68:	10800104 	addi	r2,r2,4
   acf6c:	10800037 	ldwio	r2,0(r2)
   acf70:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   acf74:	e0bffe17 	ldw	r2,-8(fp)
   acf78:	1081000c 	andi	r2,r2,1024
   acf7c:	10000a26 	beq	r2,zero,acfa8 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   acf80:	e0bffd17 	ldw	r2,-12(fp)
   acf84:	10800017 	ldw	r2,0(r2)
   acf88:	10800104 	addi	r2,r2,4
   acf8c:	e0fffd17 	ldw	r3,-12(fp)
   acf90:	18c00817 	ldw	r3,32(r3)
   acf94:	18c10014 	ori	r3,r3,1024
   acf98:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   acf9c:	e0bffd17 	ldw	r2,-12(fp)
   acfa0:	10000915 	stw	zero,36(r2)
   acfa4:	00000a06 	br	acfd0 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   acfa8:	e0bffd17 	ldw	r2,-12(fp)
   acfac:	10800917 	ldw	r2,36(r2)
   acfb0:	00e00034 	movhi	r3,32768
   acfb4:	18ffff04 	addi	r3,r3,-4
   acfb8:	18800536 	bltu	r3,r2,acfd0 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   acfbc:	e0bffd17 	ldw	r2,-12(fp)
   acfc0:	10800917 	ldw	r2,36(r2)
   acfc4:	10c00044 	addi	r3,r2,1
   acfc8:	e0bffd17 	ldw	r2,-12(fp)
   acfcc:	10c00915 	stw	r3,36(r2)
   acfd0:	008002f4 	movhi	r2,11
   acfd4:	10898a04 	addi	r2,r2,9768
   acfd8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   acfdc:	e037883a 	mov	sp,fp
   acfe0:	df000017 	ldw	fp,0(sp)
   acfe4:	dec00104 	addi	sp,sp,4
   acfe8:	f800283a 	ret

000acfec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   acfec:	defffd04 	addi	sp,sp,-12
   acff0:	df000215 	stw	fp,8(sp)
   acff4:	df000204 	addi	fp,sp,8
   acff8:	e13ffe15 	stw	r4,-8(fp)
   acffc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   ad000:	00000506 	br	ad018 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   ad004:	e0bfff17 	ldw	r2,-4(fp)
   ad008:	1090000c 	andi	r2,r2,16384
   ad00c:	10000226 	beq	r2,zero,ad018 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   ad010:	00bffd44 	movi	r2,-11
   ad014:	00000b06 	br	ad044 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   ad018:	e0bffe17 	ldw	r2,-8(fp)
   ad01c:	10c00d17 	ldw	r3,52(r2)
   ad020:	e0bffe17 	ldw	r2,-8(fp)
   ad024:	10800c17 	ldw	r2,48(r2)
   ad028:	18800526 	beq	r3,r2,ad040 <altera_avalon_jtag_uart_close+0x54>
   ad02c:	e0bffe17 	ldw	r2,-8(fp)
   ad030:	10c00917 	ldw	r3,36(r2)
   ad034:	e0bffe17 	ldw	r2,-8(fp)
   ad038:	10800117 	ldw	r2,4(r2)
   ad03c:	18bff136 	bltu	r3,r2,ad004 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   ad040:	0005883a 	mov	r2,zero
}
   ad044:	e037883a 	mov	sp,fp
   ad048:	df000017 	ldw	fp,0(sp)
   ad04c:	dec00104 	addi	sp,sp,4
   ad050:	f800283a 	ret

000ad054 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   ad054:	defffa04 	addi	sp,sp,-24
   ad058:	df000515 	stw	fp,20(sp)
   ad05c:	df000504 	addi	fp,sp,20
   ad060:	e13ffd15 	stw	r4,-12(fp)
   ad064:	e17ffe15 	stw	r5,-8(fp)
   ad068:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   ad06c:	00bff9c4 	movi	r2,-25
   ad070:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   ad074:	e0bffe17 	ldw	r2,-8(fp)
   ad078:	10da8060 	cmpeqi	r3,r2,27137
   ad07c:	1800031e 	bne	r3,zero,ad08c <altera_avalon_jtag_uart_ioctl+0x38>
   ad080:	109a80a0 	cmpeqi	r2,r2,27138
   ad084:	1000181e 	bne	r2,zero,ad0e8 <altera_avalon_jtag_uart_ioctl+0x94>
   ad088:	00002606 	br	ad124 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   ad08c:	e0bffd17 	ldw	r2,-12(fp)
   ad090:	10c00117 	ldw	r3,4(r2)
   ad094:	00a00034 	movhi	r2,32768
   ad098:	10bfffc4 	addi	r2,r2,-1
   ad09c:	18802226 	beq	r3,r2,ad128 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   ad0a0:	e0bfff17 	ldw	r2,-4(fp)
   ad0a4:	10800017 	ldw	r2,0(r2)
   ad0a8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   ad0ac:	e0bffc17 	ldw	r2,-16(fp)
   ad0b0:	10800090 	cmplti	r2,r2,2
   ad0b4:	1000061e 	bne	r2,zero,ad0d0 <altera_avalon_jtag_uart_ioctl+0x7c>
   ad0b8:	e0fffc17 	ldw	r3,-16(fp)
   ad0bc:	00a00034 	movhi	r2,32768
   ad0c0:	10bfffc4 	addi	r2,r2,-1
   ad0c4:	18800226 	beq	r3,r2,ad0d0 <altera_avalon_jtag_uart_ioctl+0x7c>
   ad0c8:	e0bffc17 	ldw	r2,-16(fp)
   ad0cc:	00000206 	br	ad0d8 <altera_avalon_jtag_uart_ioctl+0x84>
   ad0d0:	00a00034 	movhi	r2,32768
   ad0d4:	10bfff84 	addi	r2,r2,-2
   ad0d8:	e0fffd17 	ldw	r3,-12(fp)
   ad0dc:	18800115 	stw	r2,4(r3)
      rc = 0;
   ad0e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   ad0e4:	00001006 	br	ad128 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   ad0e8:	e0bffd17 	ldw	r2,-12(fp)
   ad0ec:	10c00117 	ldw	r3,4(r2)
   ad0f0:	00a00034 	movhi	r2,32768
   ad0f4:	10bfffc4 	addi	r2,r2,-1
   ad0f8:	18800d26 	beq	r3,r2,ad130 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   ad0fc:	e0bffd17 	ldw	r2,-12(fp)
   ad100:	10c00917 	ldw	r3,36(r2)
   ad104:	e0bffd17 	ldw	r2,-12(fp)
   ad108:	10800117 	ldw	r2,4(r2)
   ad10c:	1885803a 	cmpltu	r2,r3,r2
   ad110:	10c03fcc 	andi	r3,r2,255
   ad114:	e0bfff17 	ldw	r2,-4(fp)
   ad118:	10c00015 	stw	r3,0(r2)
      rc = 0;
   ad11c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   ad120:	00000306 	br	ad130 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   ad124:	00000306 	br	ad134 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   ad128:	0001883a 	nop
   ad12c:	00000106 	br	ad134 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   ad130:	0001883a 	nop

  default:
    break;
  }

  return rc;
   ad134:	e0bffb17 	ldw	r2,-20(fp)
}
   ad138:	e037883a 	mov	sp,fp
   ad13c:	df000017 	ldw	fp,0(sp)
   ad140:	dec00104 	addi	sp,sp,4
   ad144:	f800283a 	ret

000ad148 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   ad148:	defff304 	addi	sp,sp,-52
   ad14c:	dfc00c15 	stw	ra,48(sp)
   ad150:	df000b15 	stw	fp,44(sp)
   ad154:	df000b04 	addi	fp,sp,44
   ad158:	e13ffc15 	stw	r4,-16(fp)
   ad15c:	e17ffd15 	stw	r5,-12(fp)
   ad160:	e1bffe15 	stw	r6,-8(fp)
   ad164:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   ad168:	e0bffd17 	ldw	r2,-12(fp)
   ad16c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   ad170:	00004706 	br	ad290 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   ad174:	e0bffc17 	ldw	r2,-16(fp)
   ad178:	10800a17 	ldw	r2,40(r2)
   ad17c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   ad180:	e0bffc17 	ldw	r2,-16(fp)
   ad184:	10800b17 	ldw	r2,44(r2)
   ad188:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   ad18c:	e0fff717 	ldw	r3,-36(fp)
   ad190:	e0bff817 	ldw	r2,-32(fp)
   ad194:	18800536 	bltu	r3,r2,ad1ac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   ad198:	e0fff717 	ldw	r3,-36(fp)
   ad19c:	e0bff817 	ldw	r2,-32(fp)
   ad1a0:	1885c83a 	sub	r2,r3,r2
   ad1a4:	e0bff615 	stw	r2,-40(fp)
   ad1a8:	00000406 	br	ad1bc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   ad1ac:	00c20004 	movi	r3,2048
   ad1b0:	e0bff817 	ldw	r2,-32(fp)
   ad1b4:	1885c83a 	sub	r2,r3,r2
   ad1b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   ad1bc:	e0bff617 	ldw	r2,-40(fp)
   ad1c0:	10001e26 	beq	r2,zero,ad23c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   ad1c4:	e0fffe17 	ldw	r3,-8(fp)
   ad1c8:	e0bff617 	ldw	r2,-40(fp)
   ad1cc:	1880022e 	bgeu	r3,r2,ad1d8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   ad1d0:	e0bffe17 	ldw	r2,-8(fp)
   ad1d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   ad1d8:	e0bff817 	ldw	r2,-32(fp)
   ad1dc:	10800e04 	addi	r2,r2,56
   ad1e0:	e0fffc17 	ldw	r3,-16(fp)
   ad1e4:	1885883a 	add	r2,r3,r2
   ad1e8:	e13ff517 	ldw	r4,-44(fp)
   ad1ec:	100b883a 	mov	r5,r2
   ad1f0:	e1bff617 	ldw	r6,-40(fp)
   ad1f4:	00a7b1c0 	call	a7b1c <memcpy>
      ptr   += n;
   ad1f8:	e0fff517 	ldw	r3,-44(fp)
   ad1fc:	e0bff617 	ldw	r2,-40(fp)
   ad200:	1885883a 	add	r2,r3,r2
   ad204:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   ad208:	e0fffe17 	ldw	r3,-8(fp)
   ad20c:	e0bff617 	ldw	r2,-40(fp)
   ad210:	1885c83a 	sub	r2,r3,r2
   ad214:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   ad218:	e0fff817 	ldw	r3,-32(fp)
   ad21c:	e0bff617 	ldw	r2,-40(fp)
   ad220:	1885883a 	add	r2,r3,r2
   ad224:	10c1ffcc 	andi	r3,r2,2047
   ad228:	e0bffc17 	ldw	r2,-16(fp)
   ad22c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   ad230:	e0bffe17 	ldw	r2,-8(fp)
   ad234:	00bfcf16 	blt	zero,r2,ad174 <altera_avalon_jtag_uart_read+0x2c>
   ad238:	00000106 	br	ad240 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   ad23c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   ad240:	e0fff517 	ldw	r3,-44(fp)
   ad244:	e0bffd17 	ldw	r2,-12(fp)
   ad248:	1880141e 	bne	r3,r2,ad29c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   ad24c:	e0bfff17 	ldw	r2,-4(fp)
   ad250:	1090000c 	andi	r2,r2,16384
   ad254:	1000131e 	bne	r2,zero,ad2a4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   ad258:	0001883a 	nop
   ad25c:	e0bffc17 	ldw	r2,-16(fp)
   ad260:	10c00a17 	ldw	r3,40(r2)
   ad264:	e0bff717 	ldw	r2,-36(fp)
   ad268:	1880051e 	bne	r3,r2,ad280 <altera_avalon_jtag_uart_read+0x138>
   ad26c:	e0bffc17 	ldw	r2,-16(fp)
   ad270:	10c00917 	ldw	r3,36(r2)
   ad274:	e0bffc17 	ldw	r2,-16(fp)
   ad278:	10800117 	ldw	r2,4(r2)
   ad27c:	18bff736 	bltu	r3,r2,ad25c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   ad280:	e0bffc17 	ldw	r2,-16(fp)
   ad284:	10c00a17 	ldw	r3,40(r2)
   ad288:	e0bff717 	ldw	r2,-36(fp)
   ad28c:	18800726 	beq	r3,r2,ad2ac <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   ad290:	e0bffe17 	ldw	r2,-8(fp)
   ad294:	00bfb716 	blt	zero,r2,ad174 <altera_avalon_jtag_uart_read+0x2c>
   ad298:	00000506 	br	ad2b0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   ad29c:	0001883a 	nop
   ad2a0:	00000306 	br	ad2b0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   ad2a4:	0001883a 	nop
   ad2a8:	00000106 	br	ad2b0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   ad2ac:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   ad2b0:	e0fff517 	ldw	r3,-44(fp)
   ad2b4:	e0bffd17 	ldw	r2,-12(fp)
   ad2b8:	18801726 	beq	r3,r2,ad318 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   ad2bc:	0005303a 	rdctl	r2,status
   ad2c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   ad2c4:	e0fffa17 	ldw	r3,-24(fp)
   ad2c8:	00bfff84 	movi	r2,-2
   ad2cc:	1884703a 	and	r2,r3,r2
   ad2d0:	1001703a 	wrctl	status,r2
  
  return context;
   ad2d4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   ad2d8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   ad2dc:	e0bffc17 	ldw	r2,-16(fp)
   ad2e0:	10800817 	ldw	r2,32(r2)
   ad2e4:	10c00054 	ori	r3,r2,1
   ad2e8:	e0bffc17 	ldw	r2,-16(fp)
   ad2ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   ad2f0:	e0bffc17 	ldw	r2,-16(fp)
   ad2f4:	10800017 	ldw	r2,0(r2)
   ad2f8:	10800104 	addi	r2,r2,4
   ad2fc:	e0fffc17 	ldw	r3,-16(fp)
   ad300:	18c00817 	ldw	r3,32(r3)
   ad304:	10c00035 	stwio	r3,0(r2)
   ad308:	e0bff917 	ldw	r2,-28(fp)
   ad30c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   ad310:	e0bffb17 	ldw	r2,-20(fp)
   ad314:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   ad318:	e0fff517 	ldw	r3,-44(fp)
   ad31c:	e0bffd17 	ldw	r2,-12(fp)
   ad320:	18800426 	beq	r3,r2,ad334 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   ad324:	e0fff517 	ldw	r3,-44(fp)
   ad328:	e0bffd17 	ldw	r2,-12(fp)
   ad32c:	1885c83a 	sub	r2,r3,r2
   ad330:	00000606 	br	ad34c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   ad334:	e0bfff17 	ldw	r2,-4(fp)
   ad338:	1090000c 	andi	r2,r2,16384
   ad33c:	10000226 	beq	r2,zero,ad348 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   ad340:	00bffd44 	movi	r2,-11
   ad344:	00000106 	br	ad34c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   ad348:	00bffec4 	movi	r2,-5
}
   ad34c:	e037883a 	mov	sp,fp
   ad350:	dfc00117 	ldw	ra,4(sp)
   ad354:	df000017 	ldw	fp,0(sp)
   ad358:	dec00204 	addi	sp,sp,8
   ad35c:	f800283a 	ret

000ad360 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   ad360:	defff304 	addi	sp,sp,-52
   ad364:	dfc00c15 	stw	ra,48(sp)
   ad368:	df000b15 	stw	fp,44(sp)
   ad36c:	df000b04 	addi	fp,sp,44
   ad370:	e13ffc15 	stw	r4,-16(fp)
   ad374:	e17ffd15 	stw	r5,-12(fp)
   ad378:	e1bffe15 	stw	r6,-8(fp)
   ad37c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   ad380:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   ad384:	e0bffd17 	ldw	r2,-12(fp)
   ad388:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   ad38c:	00003706 	br	ad46c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   ad390:	e0bffc17 	ldw	r2,-16(fp)
   ad394:	10800c17 	ldw	r2,48(r2)
   ad398:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   ad39c:	e0bffc17 	ldw	r2,-16(fp)
   ad3a0:	10800d17 	ldw	r2,52(r2)
   ad3a4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   ad3a8:	e0fff817 	ldw	r3,-32(fp)
   ad3ac:	e0bff517 	ldw	r2,-44(fp)
   ad3b0:	1880062e 	bgeu	r3,r2,ad3cc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   ad3b4:	e0fff517 	ldw	r3,-44(fp)
   ad3b8:	e0bff817 	ldw	r2,-32(fp)
   ad3bc:	1885c83a 	sub	r2,r3,r2
   ad3c0:	10bfffc4 	addi	r2,r2,-1
   ad3c4:	e0bff615 	stw	r2,-40(fp)
   ad3c8:	00000b06 	br	ad3f8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   ad3cc:	e0bff517 	ldw	r2,-44(fp)
   ad3d0:	10000526 	beq	r2,zero,ad3e8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   ad3d4:	00c20004 	movi	r3,2048
   ad3d8:	e0bff817 	ldw	r2,-32(fp)
   ad3dc:	1885c83a 	sub	r2,r3,r2
   ad3e0:	e0bff615 	stw	r2,-40(fp)
   ad3e4:	00000406 	br	ad3f8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   ad3e8:	00c1ffc4 	movi	r3,2047
   ad3ec:	e0bff817 	ldw	r2,-32(fp)
   ad3f0:	1885c83a 	sub	r2,r3,r2
   ad3f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   ad3f8:	e0bff617 	ldw	r2,-40(fp)
   ad3fc:	10001e26 	beq	r2,zero,ad478 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   ad400:	e0fffe17 	ldw	r3,-8(fp)
   ad404:	e0bff617 	ldw	r2,-40(fp)
   ad408:	1880022e 	bgeu	r3,r2,ad414 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   ad40c:	e0bffe17 	ldw	r2,-8(fp)
   ad410:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   ad414:	e0bff817 	ldw	r2,-32(fp)
   ad418:	10820e04 	addi	r2,r2,2104
   ad41c:	e0fffc17 	ldw	r3,-16(fp)
   ad420:	1885883a 	add	r2,r3,r2
   ad424:	1009883a 	mov	r4,r2
   ad428:	e17ffd17 	ldw	r5,-12(fp)
   ad42c:	e1bff617 	ldw	r6,-40(fp)
   ad430:	00a7b1c0 	call	a7b1c <memcpy>
      ptr   += n;
   ad434:	e0fffd17 	ldw	r3,-12(fp)
   ad438:	e0bff617 	ldw	r2,-40(fp)
   ad43c:	1885883a 	add	r2,r3,r2
   ad440:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   ad444:	e0fffe17 	ldw	r3,-8(fp)
   ad448:	e0bff617 	ldw	r2,-40(fp)
   ad44c:	1885c83a 	sub	r2,r3,r2
   ad450:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   ad454:	e0fff817 	ldw	r3,-32(fp)
   ad458:	e0bff617 	ldw	r2,-40(fp)
   ad45c:	1885883a 	add	r2,r3,r2
   ad460:	10c1ffcc 	andi	r3,r2,2047
   ad464:	e0bffc17 	ldw	r2,-16(fp)
   ad468:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   ad46c:	e0bffe17 	ldw	r2,-8(fp)
   ad470:	00bfc716 	blt	zero,r2,ad390 <altera_avalon_jtag_uart_write+0x30>
   ad474:	00000106 	br	ad47c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   ad478:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   ad47c:	0005303a 	rdctl	r2,status
   ad480:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   ad484:	e0fffa17 	ldw	r3,-24(fp)
   ad488:	00bfff84 	movi	r2,-2
   ad48c:	1884703a 	and	r2,r3,r2
   ad490:	1001703a 	wrctl	status,r2
  
  return context;
   ad494:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   ad498:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   ad49c:	e0bffc17 	ldw	r2,-16(fp)
   ad4a0:	10800817 	ldw	r2,32(r2)
   ad4a4:	10c00094 	ori	r3,r2,2
   ad4a8:	e0bffc17 	ldw	r2,-16(fp)
   ad4ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   ad4b0:	e0bffc17 	ldw	r2,-16(fp)
   ad4b4:	10800017 	ldw	r2,0(r2)
   ad4b8:	10800104 	addi	r2,r2,4
   ad4bc:	e0fffc17 	ldw	r3,-16(fp)
   ad4c0:	18c00817 	ldw	r3,32(r3)
   ad4c4:	10c00035 	stwio	r3,0(r2)
   ad4c8:	e0bff917 	ldw	r2,-28(fp)
   ad4cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   ad4d0:	e0bffb17 	ldw	r2,-20(fp)
   ad4d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   ad4d8:	e0bffe17 	ldw	r2,-8(fp)
   ad4dc:	0080110e 	bge	zero,r2,ad524 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   ad4e0:	e0bfff17 	ldw	r2,-4(fp)
   ad4e4:	1090000c 	andi	r2,r2,16384
   ad4e8:	1000111e 	bne	r2,zero,ad530 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   ad4ec:	0001883a 	nop
   ad4f0:	e0bffc17 	ldw	r2,-16(fp)
   ad4f4:	10c00d17 	ldw	r3,52(r2)
   ad4f8:	e0bff517 	ldw	r2,-44(fp)
   ad4fc:	1880051e 	bne	r3,r2,ad514 <altera_avalon_jtag_uart_write+0x1b4>
   ad500:	e0bffc17 	ldw	r2,-16(fp)
   ad504:	10c00917 	ldw	r3,36(r2)
   ad508:	e0bffc17 	ldw	r2,-16(fp)
   ad50c:	10800117 	ldw	r2,4(r2)
   ad510:	18bff736 	bltu	r3,r2,ad4f0 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   ad514:	e0bffc17 	ldw	r2,-16(fp)
   ad518:	10c00d17 	ldw	r3,52(r2)
   ad51c:	e0bff517 	ldw	r2,-44(fp)
   ad520:	18800526 	beq	r3,r2,ad538 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   ad524:	e0bffe17 	ldw	r2,-8(fp)
   ad528:	00bfd016 	blt	zero,r2,ad46c <altera_avalon_jtag_uart_write+0x10c>
   ad52c:	00000306 	br	ad53c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   ad530:	0001883a 	nop
   ad534:	00000106 	br	ad53c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   ad538:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   ad53c:	e0fffd17 	ldw	r3,-12(fp)
   ad540:	e0bff717 	ldw	r2,-36(fp)
   ad544:	18800426 	beq	r3,r2,ad558 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   ad548:	e0fffd17 	ldw	r3,-12(fp)
   ad54c:	e0bff717 	ldw	r2,-36(fp)
   ad550:	1885c83a 	sub	r2,r3,r2
   ad554:	00000606 	br	ad570 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   ad558:	e0bfff17 	ldw	r2,-4(fp)
   ad55c:	1090000c 	andi	r2,r2,16384
   ad560:	10000226 	beq	r2,zero,ad56c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   ad564:	00bffd44 	movi	r2,-11
   ad568:	00000106 	br	ad570 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   ad56c:	00bffec4 	movi	r2,-5
}
   ad570:	e037883a 	mov	sp,fp
   ad574:	dfc00117 	ldw	ra,4(sp)
   ad578:	df000017 	ldw	fp,0(sp)
   ad57c:	dec00204 	addi	sp,sp,8
   ad580:	f800283a 	ret

000ad584 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   ad584:	defffa04 	addi	sp,sp,-24
   ad588:	dfc00515 	stw	ra,20(sp)
   ad58c:	df000415 	stw	fp,16(sp)
   ad590:	df000404 	addi	fp,sp,16
   ad594:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   ad598:	0007883a 	mov	r3,zero
   ad59c:	e0bfff17 	ldw	r2,-4(fp)
   ad5a0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   ad5a4:	e0bfff17 	ldw	r2,-4(fp)
   ad5a8:	10800104 	addi	r2,r2,4
   ad5ac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   ad5b0:	0005303a 	rdctl	r2,status
   ad5b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   ad5b8:	e0fffd17 	ldw	r3,-12(fp)
   ad5bc:	00bfff84 	movi	r2,-2
   ad5c0:	1884703a 	and	r2,r3,r2
   ad5c4:	1001703a 	wrctl	status,r2
  
  return context;
   ad5c8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   ad5cc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   ad5d0:	00ae8e40 	call	ae8e4 <alt_tick>
   ad5d4:	e0bffc17 	ldw	r2,-16(fp)
   ad5d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   ad5dc:	e0bffe17 	ldw	r2,-8(fp)
   ad5e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   ad5e4:	e037883a 	mov	sp,fp
   ad5e8:	dfc00117 	ldw	ra,4(sp)
   ad5ec:	df000017 	ldw	fp,0(sp)
   ad5f0:	dec00204 	addi	sp,sp,8
   ad5f4:	f800283a 	ret

000ad5f8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   ad5f8:	defff804 	addi	sp,sp,-32
   ad5fc:	dfc00715 	stw	ra,28(sp)
   ad600:	df000615 	stw	fp,24(sp)
   ad604:	df000604 	addi	fp,sp,24
   ad608:	e13ffc15 	stw	r4,-16(fp)
   ad60c:	e17ffd15 	stw	r5,-12(fp)
   ad610:	e1bffe15 	stw	r6,-8(fp)
   ad614:	e1ffff15 	stw	r7,-4(fp)
   ad618:	e0bfff17 	ldw	r2,-4(fp)
   ad61c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   ad620:	008002f4 	movhi	r2,11
   ad624:	10898a04 	addi	r2,r2,9768
   ad628:	10800017 	ldw	r2,0(r2)
   ad62c:	1000041e 	bne	r2,zero,ad640 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   ad630:	008002f4 	movhi	r2,11
   ad634:	10898a04 	addi	r2,r2,9768
   ad638:	e0fffb17 	ldw	r3,-20(fp)
   ad63c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   ad640:	e0bffc17 	ldw	r2,-16(fp)
   ad644:	10800104 	addi	r2,r2,4
   ad648:	00c001c4 	movi	r3,7
   ad64c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   ad650:	d8000015 	stw	zero,0(sp)
   ad654:	e13ffd17 	ldw	r4,-12(fp)
   ad658:	e17ffe17 	ldw	r5,-8(fp)
   ad65c:	018002f4 	movhi	r6,11
   ad660:	31b56104 	addi	r6,r6,-10876
   ad664:	e1fffc17 	ldw	r7,-16(fp)
   ad668:	00ae42c0 	call	ae42c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   ad66c:	e037883a 	mov	sp,fp
   ad670:	dfc00117 	ldw	ra,4(sp)
   ad674:	df000017 	ldw	fp,0(sp)
   ad678:	dec00204 	addi	sp,sp,8
   ad67c:	f800283a 	ret

000ad680 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   ad680:	deffeb04 	addi	sp,sp,-84
   ad684:	df001415 	stw	fp,80(sp)
   ad688:	dc401315 	stw	r17,76(sp)
   ad68c:	dc001215 	stw	r16,72(sp)
   ad690:	df001204 	addi	fp,sp,72
   ad694:	e13ffb15 	stw	r4,-20(fp)
   ad698:	e17ffc15 	stw	r5,-16(fp)
   ad69c:	e1bffd15 	stw	r6,-12(fp)
   ad6a0:	e1fffe15 	stw	r7,-8(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   ad6a4:	e0bffb17 	ldw	r2,-20(fp)
   ad6a8:	10800017 	ldw	r2,0(r2)
   ad6ac:	e0bfee15 	stw	r2,-72(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   ad6b0:	e0bfee17 	ldw	r2,-72(fp)
   ad6b4:	10800217 	ldw	r2,8(r2)
   ad6b8:	e0bff715 	stw	r2,-36(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   ad6bc:	e0bff717 	ldw	r2,-36(fp)
   ad6c0:	10bfffc4 	addi	r2,r2,-1
   ad6c4:	e0bff815 	stw	r2,-32(fp)

  while (*++ptr != 0)
   ad6c8:	e0bff817 	ldw	r2,-32(fp)
   ad6cc:	10800044 	addi	r2,r2,1
   ad6d0:	e0bff815 	stw	r2,-32(fp)
   ad6d4:	e0bff817 	ldw	r2,-32(fp)
   ad6d8:	10800003 	ldbu	r2,0(r2)
   ad6dc:	10803fcc 	andi	r2,r2,255
   ad6e0:	1080201c 	xori	r2,r2,128
   ad6e4:	10bfe004 	addi	r2,r2,-128
   ad6e8:	103ff71e 	bne	r2,zero,ad6c8 <alt_hostfs_open+0x48>
    ;

  return ptr - string;
   ad6ec:	e0fff817 	ldw	r3,-32(fp)
   ad6f0:	e0bff717 	ldw	r2,-36(fp)
   ad6f4:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   ad6f8:	10800044 	addi	r2,r2,1
   ad6fc:	e0fffc17 	ldw	r3,-16(fp)
   ad700:	1885883a 	add	r2,r3,r2
   ad704:	e0bffc15 	stw	r2,-16(fp)

  r3 = (int)&hcinfo;
   ad708:	d0a01b04 	addi	r2,gp,-32660
   ad70c:	e0bfef15 	stw	r2,-68(fp)
  r4 = (int)name;
   ad710:	e0bffc17 	ldw	r2,-16(fp)
   ad714:	e0bff015 	stw	r2,-64(fp)
  r5 = flags;
   ad718:	e0bffd17 	ldw	r2,-12(fp)
   ad71c:	e0bff115 	stw	r2,-60(fp)
  r6 = mode;
   ad720:	e0bffe17 	ldw	r2,-8(fp)
   ad724:	e0bff215 	stw	r2,-56(fp)
   ad728:	e0bffc17 	ldw	r2,-16(fp)
   ad72c:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   ad730:	e0bff917 	ldw	r2,-28(fp)
   ad734:	10bfffc4 	addi	r2,r2,-1
   ad738:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   ad73c:	e0bffa17 	ldw	r2,-24(fp)
   ad740:	10800044 	addi	r2,r2,1
   ad744:	e0bffa15 	stw	r2,-24(fp)
   ad748:	e0bffa17 	ldw	r2,-24(fp)
   ad74c:	10800003 	ldbu	r2,0(r2)
   ad750:	10803fcc 	andi	r2,r2,255
   ad754:	1080201c 	xori	r2,r2,128
   ad758:	10bfe004 	addi	r2,r2,-128
   ad75c:	103ff71e 	bne	r2,zero,ad73c <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
   ad760:	e0fffa17 	ldw	r3,-24(fp)
   ad764:	e0bff917 	ldw	r2,-28(fp)
   ad768:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   ad76c:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
   ad770:	e13ff017 	ldw	r4,-64(fp)
   ad774:	e13fff15 	stw	r4,-4(fp)
   ad778:	e17ff117 	ldw	r5,-60(fp)
   ad77c:	e1bff217 	ldw	r6,-56(fp)
   ad780:	e1fff317 	ldw	r7,-52(fp)
   ad784:	e0ffef17 	ldw	r3,-68(fp)
   ad788:	1821883a 	mov	r16,r3
   ad78c:	8007883a 	mov	r3,r16
   ad790:	e13fff17 	ldw	r4,-4(fp)
   ad794:	003da07a 	break	1
   ad798:	1821883a 	mov	r16,r3
   ad79c:	1023883a 	mov	r17,r2
   ad7a0:	e47ff415 	stw	r17,-48(fp)
   ad7a4:	e43fef15 	stw	r16,-68(fp)

  handle = (void *)r2;
   ad7a8:	e0bff417 	ldw	r2,-48(fp)
   ad7ac:	e0bff515 	stw	r2,-44(fp)
  error = r3;
   ad7b0:	e0bfef17 	ldw	r2,-68(fp)
   ad7b4:	e0bff615 	stw	r2,-40(fp)

  if (error == 0)
   ad7b8:	e0bff617 	ldw	r2,-40(fp)
   ad7bc:	1000031e 	bne	r2,zero,ad7cc <alt_hostfs_open+0x14c>
    fd->priv = handle;
   ad7c0:	e0bffb17 	ldw	r2,-20(fp)
   ad7c4:	e0fff517 	ldw	r3,-44(fp)
   ad7c8:	10c00115 	stw	r3,4(r2)

  return -error;
   ad7cc:	e0bff617 	ldw	r2,-40(fp)
   ad7d0:	0085c83a 	sub	r2,zero,r2
}
   ad7d4:	e037883a 	mov	sp,fp
   ad7d8:	df000217 	ldw	fp,8(sp)
   ad7dc:	dc400117 	ldw	r17,4(sp)
   ad7e0:	dc000017 	ldw	r16,0(sp)
   ad7e4:	dec00304 	addi	sp,sp,12
   ad7e8:	f800283a 	ret

000ad7ec <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   ad7ec:	defffa04 	addi	sp,sp,-24
   ad7f0:	df000515 	stw	fp,20(sp)
   ad7f4:	dc000415 	stw	r16,16(sp)
   ad7f8:	df000404 	addi	fp,sp,16
   ad7fc:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
   ad800:	d0a01804 	addi	r2,gp,-32672
   ad804:	e0bffc15 	stw	r2,-16(fp)
  r4 = (int)fd->priv;
   ad808:	e0bfff17 	ldw	r2,-4(fp)
   ad80c:	10800117 	ldw	r2,4(r2)
   ad810:	e0bffd15 	stw	r2,-12(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
   ad814:	e0bffd17 	ldw	r2,-12(fp)
   ad818:	e0fffc17 	ldw	r3,-16(fp)
   ad81c:	1821883a 	mov	r16,r3
   ad820:	8007883a 	mov	r3,r16
   ad824:	1009883a 	mov	r4,r2
   ad828:	003da07a 	break	1
   ad82c:	1821883a 	mov	r16,r3
   ad830:	e43ffc15 	stw	r16,-16(fp)

  error = r3;
   ad834:	e0bffc17 	ldw	r2,-16(fp)
   ad838:	e0bffe15 	stw	r2,-8(fp)

  return -error;
   ad83c:	e0bffe17 	ldw	r2,-8(fp)
   ad840:	0085c83a 	sub	r2,zero,r2
}
   ad844:	e037883a 	mov	sp,fp
   ad848:	df000117 	ldw	fp,4(sp)
   ad84c:	dc000017 	ldw	r16,0(sp)
   ad850:	dec00204 	addi	sp,sp,8
   ad854:	f800283a 	ret

000ad858 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   ad858:	defff204 	addi	sp,sp,-56
   ad85c:	df000d15 	stw	fp,52(sp)
   ad860:	dc400c15 	stw	r17,48(sp)
   ad864:	dc000b15 	stw	r16,44(sp)
   ad868:	df000b04 	addi	fp,sp,44
   ad86c:	e13ffc15 	stw	r4,-16(fp)
   ad870:	e17ffd15 	stw	r5,-12(fp)
   ad874:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   ad878:	d0a01504 	addi	r2,gp,-32684
   ad87c:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   ad880:	e0bffc17 	ldw	r2,-16(fp)
   ad884:	10800117 	ldw	r2,4(r2)
   ad888:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   ad88c:	e0bffd17 	ldw	r2,-12(fp)
   ad890:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   ad894:	e0bffe17 	ldw	r2,-8(fp)
   ad898:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   ad89c:	e13ff617 	ldw	r4,-40(fp)
   ad8a0:	e13fff15 	stw	r4,-4(fp)
   ad8a4:	e17ff717 	ldw	r5,-36(fp)
   ad8a8:	e1bff817 	ldw	r6,-32(fp)
   ad8ac:	e0fff517 	ldw	r3,-44(fp)
   ad8b0:	1821883a 	mov	r16,r3
   ad8b4:	8007883a 	mov	r3,r16
   ad8b8:	e13fff17 	ldw	r4,-4(fp)
   ad8bc:	003da07a 	break	1
   ad8c0:	1821883a 	mov	r16,r3
   ad8c4:	1023883a 	mov	r17,r2
   ad8c8:	e47ff915 	stw	r17,-28(fp)
   ad8cc:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   ad8d0:	e0bff917 	ldw	r2,-28(fp)
   ad8d4:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   ad8d8:	e0bff517 	ldw	r2,-44(fp)
   ad8dc:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   ad8e0:	e0bffb17 	ldw	r2,-20(fp)
   ad8e4:	10000326 	beq	r2,zero,ad8f4 <alt_hostfs_read+0x9c>
   ad8e8:	e0bffb17 	ldw	r2,-20(fp)
   ad8ec:	0085c83a 	sub	r2,zero,r2
   ad8f0:	00000106 	br	ad8f8 <alt_hostfs_read+0xa0>
   ad8f4:	e0bffa17 	ldw	r2,-24(fp)
}
   ad8f8:	e037883a 	mov	sp,fp
   ad8fc:	df000217 	ldw	fp,8(sp)
   ad900:	dc400117 	ldw	r17,4(sp)
   ad904:	dc000017 	ldw	r16,0(sp)
   ad908:	dec00304 	addi	sp,sp,12
   ad90c:	f800283a 	ret

000ad910 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   ad910:	defff204 	addi	sp,sp,-56
   ad914:	df000d15 	stw	fp,52(sp)
   ad918:	dc400c15 	stw	r17,48(sp)
   ad91c:	dc000b15 	stw	r16,44(sp)
   ad920:	df000b04 	addi	fp,sp,44
   ad924:	e13ffc15 	stw	r4,-16(fp)
   ad928:	e17ffd15 	stw	r5,-12(fp)
   ad92c:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   ad930:	d0a01204 	addi	r2,gp,-32696
   ad934:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   ad938:	e0bffc17 	ldw	r2,-16(fp)
   ad93c:	10800117 	ldw	r2,4(r2)
   ad940:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   ad944:	e0bffd17 	ldw	r2,-12(fp)
   ad948:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   ad94c:	e0bffe17 	ldw	r2,-8(fp)
   ad950:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   ad954:	e13ff617 	ldw	r4,-40(fp)
   ad958:	e13fff15 	stw	r4,-4(fp)
   ad95c:	e17ff717 	ldw	r5,-36(fp)
   ad960:	e1bff817 	ldw	r6,-32(fp)
   ad964:	e0fff517 	ldw	r3,-44(fp)
   ad968:	1821883a 	mov	r16,r3
   ad96c:	8007883a 	mov	r3,r16
   ad970:	e13fff17 	ldw	r4,-4(fp)
   ad974:	003da07a 	break	1
   ad978:	1821883a 	mov	r16,r3
   ad97c:	1023883a 	mov	r17,r2
   ad980:	e47ff915 	stw	r17,-28(fp)
   ad984:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   ad988:	e0bff917 	ldw	r2,-28(fp)
   ad98c:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   ad990:	e0bff517 	ldw	r2,-44(fp)
   ad994:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   ad998:	e0bffb17 	ldw	r2,-20(fp)
   ad99c:	10000326 	beq	r2,zero,ad9ac <alt_hostfs_write+0x9c>
   ad9a0:	e0bffb17 	ldw	r2,-20(fp)
   ad9a4:	0085c83a 	sub	r2,zero,r2
   ad9a8:	00000106 	br	ad9b0 <alt_hostfs_write+0xa0>
   ad9ac:	e0bffa17 	ldw	r2,-24(fp)
}
   ad9b0:	e037883a 	mov	sp,fp
   ad9b4:	df000217 	ldw	fp,8(sp)
   ad9b8:	dc400117 	ldw	r17,4(sp)
   ad9bc:	dc000017 	ldw	r16,0(sp)
   ad9c0:	dec00304 	addi	sp,sp,12
   ad9c4:	f800283a 	ret

000ad9c8 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   ad9c8:	defff204 	addi	sp,sp,-56
   ad9cc:	df000d15 	stw	fp,52(sp)
   ad9d0:	dc400c15 	stw	r17,48(sp)
   ad9d4:	dc000b15 	stw	r16,44(sp)
   ad9d8:	df000b04 	addi	fp,sp,44
   ad9dc:	e13ffc15 	stw	r4,-16(fp)
   ad9e0:	e17ffd15 	stw	r5,-12(fp)
   ad9e4:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   ad9e8:	d0a00f04 	addi	r2,gp,-32708
   ad9ec:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   ad9f0:	e0bffc17 	ldw	r2,-16(fp)
   ad9f4:	10800117 	ldw	r2,4(r2)
   ad9f8:	e0bff615 	stw	r2,-40(fp)
  r5 = ptr;
   ad9fc:	e0bffd17 	ldw	r2,-12(fp)
   ada00:	e0bff715 	stw	r2,-36(fp)
  r6 = dir;
   ada04:	e0bffe17 	ldw	r2,-8(fp)
   ada08:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   ada0c:	e13ff617 	ldw	r4,-40(fp)
   ada10:	e13fff15 	stw	r4,-4(fp)
   ada14:	e17ff717 	ldw	r5,-36(fp)
   ada18:	e1bff817 	ldw	r6,-32(fp)
   ada1c:	e0fff517 	ldw	r3,-44(fp)
   ada20:	1821883a 	mov	r16,r3
   ada24:	8007883a 	mov	r3,r16
   ada28:	e13fff17 	ldw	r4,-4(fp)
   ada2c:	003da07a 	break	1
   ada30:	1821883a 	mov	r16,r3
   ada34:	1023883a 	mov	r17,r2
   ada38:	e47ff915 	stw	r17,-28(fp)
   ada3c:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   ada40:	e0bff917 	ldw	r2,-28(fp)
   ada44:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   ada48:	e0bff517 	ldw	r2,-44(fp)
   ada4c:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   ada50:	e0bffb17 	ldw	r2,-20(fp)
   ada54:	10000326 	beq	r2,zero,ada64 <alt_hostfs_seek+0x9c>
   ada58:	e0bffb17 	ldw	r2,-20(fp)
   ada5c:	0085c83a 	sub	r2,zero,r2
   ada60:	00000106 	br	ada68 <alt_hostfs_seek+0xa0>
   ada64:	e0bffa17 	ldw	r2,-24(fp)
}
   ada68:	e037883a 	mov	sp,fp
   ada6c:	df000217 	ldw	fp,8(sp)
   ada70:	dc400117 	ldw	r17,4(sp)
   ada74:	dc000017 	ldw	r16,0(sp)
   ada78:	dec00304 	addi	sp,sp,12
   ada7c:	f800283a 	ret

000ada80 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   ada80:	deffe204 	addi	sp,sp,-120
   ada84:	df001d15 	stw	fp,116(sp)
   ada88:	dc401c15 	stw	r17,112(sp)
   ada8c:	dc001b15 	stw	r16,108(sp)
   ada90:	df001b04 	addi	fp,sp,108
   ada94:	e13ffd15 	stw	r4,-12(fp)
   ada98:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
   ada9c:	d0a00c04 	addi	r2,gp,-32720
   adaa0:	e0bfe615 	stw	r2,-104(fp)
  r4 = (int)fd->priv;
   adaa4:	e0bffd17 	ldw	r2,-12(fp)
   adaa8:	10800117 	ldw	r2,4(r2)
   adaac:	e0bfe715 	stw	r2,-100(fp)
  r5 = (int)&hoststat;
   adab0:	e0bfed04 	addi	r2,fp,-76
   adab4:	e0bfe815 	stw	r2,-96(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
   adab8:	e13fe717 	ldw	r4,-100(fp)
   adabc:	e13fff15 	stw	r4,-4(fp)
   adac0:	e17fe817 	ldw	r5,-96(fp)
   adac4:	e0ffe617 	ldw	r3,-104(fp)
   adac8:	1821883a 	mov	r16,r3
   adacc:	8007883a 	mov	r3,r16
   adad0:	e13fff17 	ldw	r4,-4(fp)
   adad4:	003da07a 	break	1
   adad8:	1821883a 	mov	r16,r3
   adadc:	1023883a 	mov	r17,r2
   adae0:	e47fe915 	stw	r17,-92(fp)
   adae4:	e43fe615 	stw	r16,-104(fp)

  rc = r2;
   adae8:	e0bfe917 	ldw	r2,-92(fp)
   adaec:	e0bfea15 	stw	r2,-88(fp)
  error = r3;
   adaf0:	e0bfe617 	ldw	r2,-104(fp)
   adaf4:	e0bfeb15 	stw	r2,-84(fp)

  if (error == 0)
   adaf8:	e0bfeb17 	ldw	r2,-84(fp)
   adafc:	1000621e 	bne	r2,zero,adc88 <alt_hostfs_fstat+0x208>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   adb00:	e0bfed04 	addi	r2,fp,-76
   adb04:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   adb08:	e0bfe517 	ldw	r2,-108(fp)
   adb0c:	10801004 	addi	r2,r2,64
   adb10:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   adb14:	00001606 	br	adb70 <alt_hostfs_fstat+0xf0>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   adb18:	e0bfe517 	ldw	r2,-108(fp)
   adb1c:	10800017 	ldw	r2,0(r2)
   adb20:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   adb24:	e0bfe517 	ldw	r2,-108(fp)
   adb28:	10800017 	ldw	r2,0(r2)
   adb2c:	10803fec 	andhi	r2,r2,255
   adb30:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   adb34:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   adb38:	e0bfe517 	ldw	r2,-108(fp)
   adb3c:	10800017 	ldw	r2,0(r2)
   adb40:	10bfc00c 	andi	r2,r2,65280
   adb44:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   adb48:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   adb4c:	e0bfe517 	ldw	r2,-108(fp)
   adb50:	10800017 	ldw	r2,0(r2)
   adb54:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   adb58:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   adb5c:	e0bfe517 	ldw	r2,-108(fp)
   adb60:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   adb64:	e0bfe517 	ldw	r2,-108(fp)
   adb68:	10800104 	addi	r2,r2,4
   adb6c:	e0bfe515 	stw	r2,-108(fp)
   adb70:	e0ffe517 	ldw	r3,-108(fp)
   adb74:	e0bfec17 	ldw	r2,-80(fp)
   adb78:	18bfe736 	bltu	r3,r2,adb18 <alt_hostfs_fstat+0x98>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   adb7c:	e0bffe17 	ldw	r2,-8(fp)
   adb80:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   adb84:	e0bfe517 	ldw	r2,-108(fp)
   adb88:	10800f04 	addi	r2,r2,60
   adb8c:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   adb90:	00000506 	br	adba8 <alt_hostfs_fstat+0x128>
      *ptr = 0;
   adb94:	e0bfe517 	ldw	r2,-108(fp)
   adb98:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   adb9c:	e0bfe517 	ldw	r2,-108(fp)
   adba0:	10800104 	addi	r2,r2,4
   adba4:	e0bfe515 	stw	r2,-108(fp)
   adba8:	e0ffe517 	ldw	r3,-108(fp)
   adbac:	e0bfec17 	ldw	r2,-80(fp)
   adbb0:	18bff836 	bltu	r3,r2,adb94 <alt_hostfs_fstat+0x114>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   adbb4:	e0bfed17 	ldw	r2,-76(fp)
   adbb8:	1007883a 	mov	r3,r2
   adbbc:	e0bffe17 	ldw	r2,-8(fp)
   adbc0:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   adbc4:	e0bfee17 	ldw	r2,-72(fp)
   adbc8:	1007883a 	mov	r3,r2
   adbcc:	e0bffe17 	ldw	r2,-8(fp)
   adbd0:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   adbd4:	e0ffef17 	ldw	r3,-68(fp)
   adbd8:	e0bffe17 	ldw	r2,-8(fp)
   adbdc:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   adbe0:	e0bff017 	ldw	r2,-64(fp)
   adbe4:	1007883a 	mov	r3,r2
   adbe8:	e0bffe17 	ldw	r2,-8(fp)
   adbec:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   adbf0:	e0bff117 	ldw	r2,-60(fp)
   adbf4:	1007883a 	mov	r3,r2
   adbf8:	e0bffe17 	ldw	r2,-8(fp)
   adbfc:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   adc00:	e0bff217 	ldw	r2,-56(fp)
   adc04:	1007883a 	mov	r3,r2
   adc08:	e0bffe17 	ldw	r2,-8(fp)
   adc0c:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   adc10:	e0bff317 	ldw	r2,-52(fp)
   adc14:	1007883a 	mov	r3,r2
   adc18:	e0bffe17 	ldw	r2,-8(fp)
   adc1c:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   adc20:	e0bff517 	ldw	r2,-44(fp)
   adc24:	1007883a 	mov	r3,r2
   adc28:	e0bffe17 	ldw	r2,-8(fp)
   adc2c:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   adc30:	e0bffa17 	ldw	r2,-24(fp)
   adc34:	1007883a 	mov	r3,r2
   adc38:	e0bffe17 	ldw	r2,-8(fp)
   adc3c:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   adc40:	e0bffb17 	ldw	r2,-20(fp)
   adc44:	1007883a 	mov	r3,r2
   adc48:	e0bffe17 	ldw	r2,-8(fp)
   adc4c:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   adc50:	e0bffc17 	ldw	r2,-16(fp)
   adc54:	1007883a 	mov	r3,r2
   adc58:	e0bffe17 	ldw	r2,-8(fp)
   adc5c:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   adc60:	e0bff717 	ldw	r2,-36(fp)
   adc64:	1007883a 	mov	r3,r2
   adc68:	e0bffe17 	ldw	r2,-8(fp)
   adc6c:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   adc70:	e0bff917 	ldw	r2,-28(fp)
   adc74:	1007883a 	mov	r3,r2
   adc78:	e0bffe17 	ldw	r2,-8(fp)
   adc7c:	10c00c15 	stw	r3,48(r2)

    return rc;
   adc80:	e0bfea17 	ldw	r2,-88(fp)
   adc84:	00000206 	br	adc90 <alt_hostfs_fstat+0x210>
  }
  else
    return -error;
   adc88:	e0bfeb17 	ldw	r2,-84(fp)
   adc8c:	0085c83a 	sub	r2,zero,r2
}
   adc90:	e037883a 	mov	sp,fp
   adc94:	df000217 	ldw	fp,8(sp)
   adc98:	dc400117 	ldw	r17,4(sp)
   adc9c:	dc000017 	ldw	r16,0(sp)
   adca0:	dec00304 	addi	sp,sp,12
   adca4:	f800283a 	ret

000adca8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   adca8:	defff504 	addi	sp,sp,-44
   adcac:	df000a15 	stw	fp,40(sp)
   adcb0:	df000a04 	addi	fp,sp,40
   adcb4:	e13ffc15 	stw	r4,-16(fp)
   adcb8:	e17ffd15 	stw	r5,-12(fp)
   adcbc:	e1bffe15 	stw	r6,-8(fp)
   adcc0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   adcc4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   adcc8:	008002f4 	movhi	r2,11
   adccc:	10898a04 	addi	r2,r2,9768
   adcd0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   adcd4:	10003f26 	beq	r2,zero,addd4 <alt_alarm_start+0x12c>
  {
    if (alarm)
   adcd8:	e0bffc17 	ldw	r2,-16(fp)
   adcdc:	10003b26 	beq	r2,zero,addcc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   adce0:	e0bffc17 	ldw	r2,-16(fp)
   adce4:	e0fffe17 	ldw	r3,-8(fp)
   adce8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   adcec:	e0bffc17 	ldw	r2,-16(fp)
   adcf0:	e0ffff17 	ldw	r3,-4(fp)
   adcf4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   adcf8:	0005303a 	rdctl	r2,status
   adcfc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   add00:	e0fff817 	ldw	r3,-32(fp)
   add04:	00bfff84 	movi	r2,-2
   add08:	1884703a 	and	r2,r3,r2
   add0c:	1001703a 	wrctl	status,r2
  
  return context;
   add10:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   add14:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   add18:	008002f4 	movhi	r2,11
   add1c:	10898b04 	addi	r2,r2,9772
   add20:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   add24:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   add28:	e0fffd17 	ldw	r3,-12(fp)
   add2c:	e0bff617 	ldw	r2,-40(fp)
   add30:	1885883a 	add	r2,r3,r2
   add34:	10c00044 	addi	r3,r2,1
   add38:	e0bffc17 	ldw	r2,-16(fp)
   add3c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   add40:	e0bffc17 	ldw	r2,-16(fp)
   add44:	10c00217 	ldw	r3,8(r2)
   add48:	e0bff617 	ldw	r2,-40(fp)
   add4c:	1880042e 	bgeu	r3,r2,add60 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   add50:	e0bffc17 	ldw	r2,-16(fp)
   add54:	00c00044 	movi	r3,1
   add58:	10c00405 	stb	r3,16(r2)
   add5c:	00000206 	br	add68 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   add60:	e0bffc17 	ldw	r2,-16(fp)
   add64:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   add68:	e0bffc17 	ldw	r2,-16(fp)
   add6c:	00c002f4 	movhi	r3,11
   add70:	18c2c704 	addi	r3,r3,2844
   add74:	e0fff915 	stw	r3,-28(fp)
   add78:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   add7c:	e0bffa17 	ldw	r2,-24(fp)
   add80:	e0fff917 	ldw	r3,-28(fp)
   add84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   add88:	e0bff917 	ldw	r2,-28(fp)
   add8c:	10c00017 	ldw	r3,0(r2)
   add90:	e0bffa17 	ldw	r2,-24(fp)
   add94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   add98:	e0bff917 	ldw	r2,-28(fp)
   add9c:	10800017 	ldw	r2,0(r2)
   adda0:	e0fffa17 	ldw	r3,-24(fp)
   adda4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   adda8:	e0bff917 	ldw	r2,-28(fp)
   addac:	e0fffa17 	ldw	r3,-24(fp)
   addb0:	10c00015 	stw	r3,0(r2)
   addb4:	e0bff717 	ldw	r2,-36(fp)
   addb8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   addbc:	e0bffb17 	ldw	r2,-20(fp)
   addc0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   addc4:	0005883a 	mov	r2,zero
   addc8:	00000306 	br	addd8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   addcc:	00bffa84 	movi	r2,-22
   addd0:	00000106 	br	addd8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   addd4:	00bfde84 	movi	r2,-134
  }
}
   addd8:	e037883a 	mov	sp,fp
   adddc:	df000017 	ldw	fp,0(sp)
   adde0:	dec00104 	addi	sp,sp,4
   adde4:	f800283a 	ret

000adde8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   adde8:	defffa04 	addi	sp,sp,-24
   addec:	dfc00515 	stw	ra,20(sp)
   addf0:	df000415 	stw	fp,16(sp)
   addf4:	df000404 	addi	fp,sp,16
   addf8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   addfc:	008000c4 	movi	r2,3
   ade00:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   ade04:	e13ffd17 	ldw	r4,-12(fp)
   ade08:	014003f4 	movhi	r5,15
   ade0c:	29509004 	addi	r5,r5,16960
   ade10:	00a118c0 	call	a118c <__mulsi3>
   ade14:	01017db4 	movhi	r4,1526
   ade18:	21384004 	addi	r4,r4,-7936
   ade1c:	100b883a 	mov	r5,r2
   ade20:	00ab14c0 	call	ab14c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   ade24:	01200034 	movhi	r4,32768
   ade28:	213fffc4 	addi	r4,r4,-1
   ade2c:	100b883a 	mov	r5,r2
   ade30:	00ab14c0 	call	ab14c <__udivsi3>
   ade34:	e13fff17 	ldw	r4,-4(fp)
   ade38:	100b883a 	mov	r5,r2
   ade3c:	00ab14c0 	call	ab14c <__udivsi3>
   ade40:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   ade44:	e0bffe17 	ldw	r2,-8(fp)
   ade48:	10002926 	beq	r2,zero,adef0 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   ade4c:	e03ffc15 	stw	zero,-16(fp)
   ade50:	00001606 	br	adeac <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   ade54:	00a00034 	movhi	r2,32768
   ade58:	10bfffc4 	addi	r2,r2,-1
   ade5c:	10bfffc4 	addi	r2,r2,-1
   ade60:	103ffe1e 	bne	r2,zero,ade5c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   ade64:	e13ffd17 	ldw	r4,-12(fp)
   ade68:	014003f4 	movhi	r5,15
   ade6c:	29509004 	addi	r5,r5,16960
   ade70:	00a118c0 	call	a118c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   ade74:	01017db4 	movhi	r4,1526
   ade78:	21384004 	addi	r4,r4,-7936
   ade7c:	100b883a 	mov	r5,r2
   ade80:	00ab14c0 	call	ab14c <__udivsi3>
   ade84:	01200034 	movhi	r4,32768
   ade88:	213fffc4 	addi	r4,r4,-1
   ade8c:	100b883a 	mov	r5,r2
   ade90:	00ab14c0 	call	ab14c <__udivsi3>
   ade94:	e0ffff17 	ldw	r3,-4(fp)
   ade98:	1885c83a 	sub	r2,r3,r2
   ade9c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   adea0:	e0bffc17 	ldw	r2,-16(fp)
   adea4:	10800044 	addi	r2,r2,1
   adea8:	e0bffc15 	stw	r2,-16(fp)
   adeac:	e0fffc17 	ldw	r3,-16(fp)
   adeb0:	e0bffe17 	ldw	r2,-8(fp)
   adeb4:	18bfe716 	blt	r3,r2,ade54 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   adeb8:	e13ffd17 	ldw	r4,-12(fp)
   adebc:	014003f4 	movhi	r5,15
   adec0:	29509004 	addi	r5,r5,16960
   adec4:	00a118c0 	call	a118c <__mulsi3>
   adec8:	01017db4 	movhi	r4,1526
   adecc:	21384004 	addi	r4,r4,-7936
   aded0:	100b883a 	mov	r5,r2
   aded4:	00ab14c0 	call	ab14c <__udivsi3>
   aded8:	1009883a 	mov	r4,r2
   adedc:	e17fff17 	ldw	r5,-4(fp)
   adee0:	00a118c0 	call	a118c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   adee4:	10bfffc4 	addi	r2,r2,-1
   adee8:	103ffe1e 	bne	r2,zero,adee4 <alt_busy_sleep+0xfc>
   adeec:	00000d06 	br	adf24 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   adef0:	e13ffd17 	ldw	r4,-12(fp)
   adef4:	014003f4 	movhi	r5,15
   adef8:	29509004 	addi	r5,r5,16960
   adefc:	00a118c0 	call	a118c <__mulsi3>
   adf00:	01017db4 	movhi	r4,1526
   adf04:	21384004 	addi	r4,r4,-7936
   adf08:	100b883a 	mov	r5,r2
   adf0c:	00ab14c0 	call	ab14c <__udivsi3>
   adf10:	1009883a 	mov	r4,r2
   adf14:	e17fff17 	ldw	r5,-4(fp)
   adf18:	00a118c0 	call	a118c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   adf1c:	10bfffc4 	addi	r2,r2,-1
   adf20:	00bffe16 	blt	zero,r2,adf1c <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   adf24:	0005883a 	mov	r2,zero
}
   adf28:	e037883a 	mov	sp,fp
   adf2c:	dfc00117 	ldw	ra,4(sp)
   adf30:	df000017 	ldw	fp,0(sp)
   adf34:	dec00204 	addi	sp,sp,8
   adf38:	f800283a 	ret

000adf3c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   adf3c:	deffff04 	addi	sp,sp,-4
   adf40:	df000015 	stw	fp,0(sp)
   adf44:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   adf48:	e037883a 	mov	sp,fp
   adf4c:	df000017 	ldw	fp,0(sp)
   adf50:	dec00104 	addi	sp,sp,4
   adf54:	f800283a 	ret

000adf58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   adf58:	defffe04 	addi	sp,sp,-8
   adf5c:	dfc00115 	stw	ra,4(sp)
   adf60:	df000015 	stw	fp,0(sp)
   adf64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   adf68:	008002f4 	movhi	r2,11
   adf6c:	1082b204 	addi	r2,r2,2760
   adf70:	10800017 	ldw	r2,0(r2)
   adf74:	10000526 	beq	r2,zero,adf8c <alt_get_errno+0x34>
   adf78:	008002f4 	movhi	r2,11
   adf7c:	1082b204 	addi	r2,r2,2760
   adf80:	10800017 	ldw	r2,0(r2)
   adf84:	103ee83a 	callr	r2
   adf88:	00000206 	br	adf94 <alt_get_errno+0x3c>
   adf8c:	008002f4 	movhi	r2,11
   adf90:	10897d04 	addi	r2,r2,9716
}
   adf94:	e037883a 	mov	sp,fp
   adf98:	dfc00117 	ldw	ra,4(sp)
   adf9c:	df000017 	ldw	fp,0(sp)
   adfa0:	dec00204 	addi	sp,sp,8
   adfa4:	f800283a 	ret

000adfa8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   adfa8:	defffa04 	addi	sp,sp,-24
   adfac:	dfc00515 	stw	ra,20(sp)
   adfb0:	df000415 	stw	fp,16(sp)
   adfb4:	df000404 	addi	fp,sp,16
   adfb8:	e13ffe15 	stw	r4,-8(fp)
   adfbc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   adfc0:	e0bffe17 	ldw	r2,-8(fp)
   adfc4:	10000326 	beq	r2,zero,adfd4 <alt_dev_llist_insert+0x2c>
   adfc8:	e0bffe17 	ldw	r2,-8(fp)
   adfcc:	10800217 	ldw	r2,8(r2)
   adfd0:	1000051e 	bne	r2,zero,adfe8 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   adfd4:	00adf580 	call	adf58 <alt_get_errno>
   adfd8:	00c00584 	movi	r3,22
   adfdc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   adfe0:	00bffa84 	movi	r2,-22
   adfe4:	00001306 	br	ae034 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   adfe8:	e0bffe17 	ldw	r2,-8(fp)
   adfec:	e0ffff17 	ldw	r3,-4(fp)
   adff0:	e0fffc15 	stw	r3,-16(fp)
   adff4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   adff8:	e0bffd17 	ldw	r2,-12(fp)
   adffc:	e0fffc17 	ldw	r3,-16(fp)
   ae000:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   ae004:	e0bffc17 	ldw	r2,-16(fp)
   ae008:	10c00017 	ldw	r3,0(r2)
   ae00c:	e0bffd17 	ldw	r2,-12(fp)
   ae010:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   ae014:	e0bffc17 	ldw	r2,-16(fp)
   ae018:	10800017 	ldw	r2,0(r2)
   ae01c:	e0fffd17 	ldw	r3,-12(fp)
   ae020:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   ae024:	e0bffc17 	ldw	r2,-16(fp)
   ae028:	e0fffd17 	ldw	r3,-12(fp)
   ae02c:	10c00015 	stw	r3,0(r2)

  return 0;  
   ae030:	0005883a 	mov	r2,zero
}
   ae034:	e037883a 	mov	sp,fp
   ae038:	dfc00117 	ldw	ra,4(sp)
   ae03c:	df000017 	ldw	fp,0(sp)
   ae040:	dec00204 	addi	sp,sp,8
   ae044:	f800283a 	ret

000ae048 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   ae048:	defffd04 	addi	sp,sp,-12
   ae04c:	dfc00215 	stw	ra,8(sp)
   ae050:	df000115 	stw	fp,4(sp)
   ae054:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   ae058:	008002f4 	movhi	r2,11
   ae05c:	10bb1404 	addi	r2,r2,-5040
   ae060:	e0bfff15 	stw	r2,-4(fp)
   ae064:	00000606 	br	ae080 <_do_ctors+0x38>
        (*ctor) (); 
   ae068:	e0bfff17 	ldw	r2,-4(fp)
   ae06c:	10800017 	ldw	r2,0(r2)
   ae070:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   ae074:	e0bfff17 	ldw	r2,-4(fp)
   ae078:	10bfff04 	addi	r2,r2,-4
   ae07c:	e0bfff15 	stw	r2,-4(fp)
   ae080:	e0ffff17 	ldw	r3,-4(fp)
   ae084:	008002f4 	movhi	r2,11
   ae088:	10bb1504 	addi	r2,r2,-5036
   ae08c:	18bff62e 	bgeu	r3,r2,ae068 <_do_ctors+0x20>
        (*ctor) (); 
}
   ae090:	e037883a 	mov	sp,fp
   ae094:	dfc00117 	ldw	ra,4(sp)
   ae098:	df000017 	ldw	fp,0(sp)
   ae09c:	dec00204 	addi	sp,sp,8
   ae0a0:	f800283a 	ret

000ae0a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   ae0a4:	defffd04 	addi	sp,sp,-12
   ae0a8:	dfc00215 	stw	ra,8(sp)
   ae0ac:	df000115 	stw	fp,4(sp)
   ae0b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   ae0b4:	008002f4 	movhi	r2,11
   ae0b8:	10bb1404 	addi	r2,r2,-5040
   ae0bc:	e0bfff15 	stw	r2,-4(fp)
   ae0c0:	00000606 	br	ae0dc <_do_dtors+0x38>
        (*dtor) (); 
   ae0c4:	e0bfff17 	ldw	r2,-4(fp)
   ae0c8:	10800017 	ldw	r2,0(r2)
   ae0cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   ae0d0:	e0bfff17 	ldw	r2,-4(fp)
   ae0d4:	10bfff04 	addi	r2,r2,-4
   ae0d8:	e0bfff15 	stw	r2,-4(fp)
   ae0dc:	e0ffff17 	ldw	r3,-4(fp)
   ae0e0:	008002f4 	movhi	r2,11
   ae0e4:	10bb1504 	addi	r2,r2,-5036
   ae0e8:	18bff62e 	bgeu	r3,r2,ae0c4 <_do_dtors+0x20>
        (*dtor) (); 
}
   ae0ec:	e037883a 	mov	sp,fp
   ae0f0:	dfc00117 	ldw	ra,4(sp)
   ae0f4:	df000017 	ldw	fp,0(sp)
   ae0f8:	dec00204 	addi	sp,sp,8
   ae0fc:	f800283a 	ret

000ae100 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   ae100:	defffa04 	addi	sp,sp,-24
   ae104:	dfc00515 	stw	ra,20(sp)
   ae108:	df000415 	stw	fp,16(sp)
   ae10c:	df000404 	addi	fp,sp,16
   ae110:	e13ffe15 	stw	r4,-8(fp)
   ae114:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   ae118:	e0bfff17 	ldw	r2,-4(fp)
   ae11c:	10800017 	ldw	r2,0(r2)
   ae120:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   ae124:	e13ffe17 	ldw	r4,-8(fp)
   ae128:	00a36000 	call	a3600 <strlen>
   ae12c:	10800044 	addi	r2,r2,1
   ae130:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   ae134:	00000d06 	br	ae16c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   ae138:	e0bffc17 	ldw	r2,-16(fp)
   ae13c:	10c00217 	ldw	r3,8(r2)
   ae140:	e0bffd17 	ldw	r2,-12(fp)
   ae144:	1809883a 	mov	r4,r3
   ae148:	e17ffe17 	ldw	r5,-8(fp)
   ae14c:	100d883a 	mov	r6,r2
   ae150:	00aeaa80 	call	aeaa8 <memcmp>
   ae154:	1000021e 	bne	r2,zero,ae160 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   ae158:	e0bffc17 	ldw	r2,-16(fp)
   ae15c:	00000706 	br	ae17c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   ae160:	e0bffc17 	ldw	r2,-16(fp)
   ae164:	10800017 	ldw	r2,0(r2)
   ae168:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   ae16c:	e0fffc17 	ldw	r3,-16(fp)
   ae170:	e0bfff17 	ldw	r2,-4(fp)
   ae174:	18bff01e 	bne	r3,r2,ae138 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   ae178:	0005883a 	mov	r2,zero
}
   ae17c:	e037883a 	mov	sp,fp
   ae180:	dfc00117 	ldw	ra,4(sp)
   ae184:	df000017 	ldw	fp,0(sp)
   ae188:	dec00204 	addi	sp,sp,8
   ae18c:	f800283a 	ret

000ae190 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   ae190:	defffb04 	addi	sp,sp,-20
   ae194:	dfc00415 	stw	ra,16(sp)
   ae198:	df000315 	stw	fp,12(sp)
   ae19c:	df000304 	addi	fp,sp,12
   ae1a0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   ae1a4:	008002f4 	movhi	r2,11
   ae1a8:	1082ad04 	addi	r2,r2,2740
   ae1ac:	10800017 	ldw	r2,0(r2)
   ae1b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   ae1b4:	00003106 	br	ae27c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   ae1b8:	e0bffd17 	ldw	r2,-12(fp)
   ae1bc:	10800217 	ldw	r2,8(r2)
   ae1c0:	1009883a 	mov	r4,r2
   ae1c4:	00a36000 	call	a3600 <strlen>
   ae1c8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   ae1cc:	e0bffd17 	ldw	r2,-12(fp)
   ae1d0:	10c00217 	ldw	r3,8(r2)
   ae1d4:	e0bffe17 	ldw	r2,-8(fp)
   ae1d8:	10bfffc4 	addi	r2,r2,-1
   ae1dc:	1885883a 	add	r2,r3,r2
   ae1e0:	10800003 	ldbu	r2,0(r2)
   ae1e4:	10803fcc 	andi	r2,r2,255
   ae1e8:	1080201c 	xori	r2,r2,128
   ae1ec:	10bfe004 	addi	r2,r2,-128
   ae1f0:	10800bd8 	cmpnei	r2,r2,47
   ae1f4:	1000031e 	bne	r2,zero,ae204 <alt_find_file+0x74>
    {
      len -= 1;
   ae1f8:	e0bffe17 	ldw	r2,-8(fp)
   ae1fc:	10bfffc4 	addi	r2,r2,-1
   ae200:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   ae204:	e0bffe17 	ldw	r2,-8(fp)
   ae208:	e0ffff17 	ldw	r3,-4(fp)
   ae20c:	1885883a 	add	r2,r3,r2
   ae210:	10800003 	ldbu	r2,0(r2)
   ae214:	10803fcc 	andi	r2,r2,255
   ae218:	1080201c 	xori	r2,r2,128
   ae21c:	10bfe004 	addi	r2,r2,-128
   ae220:	10800be0 	cmpeqi	r2,r2,47
   ae224:	1000081e 	bne	r2,zero,ae248 <alt_find_file+0xb8>
   ae228:	e0bffe17 	ldw	r2,-8(fp)
   ae22c:	e0ffff17 	ldw	r3,-4(fp)
   ae230:	1885883a 	add	r2,r3,r2
   ae234:	10800003 	ldbu	r2,0(r2)
   ae238:	10803fcc 	andi	r2,r2,255
   ae23c:	1080201c 	xori	r2,r2,128
   ae240:	10bfe004 	addi	r2,r2,-128
   ae244:	10000a1e 	bne	r2,zero,ae270 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   ae248:	e0bffd17 	ldw	r2,-12(fp)
   ae24c:	10c00217 	ldw	r3,8(r2)
   ae250:	e0bffe17 	ldw	r2,-8(fp)
   ae254:	1809883a 	mov	r4,r3
   ae258:	e17fff17 	ldw	r5,-4(fp)
   ae25c:	100d883a 	mov	r6,r2
   ae260:	00aeaa80 	call	aeaa8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   ae264:	1000021e 	bne	r2,zero,ae270 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   ae268:	e0bffd17 	ldw	r2,-12(fp)
   ae26c:	00000806 	br	ae290 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   ae270:	e0bffd17 	ldw	r2,-12(fp)
   ae274:	10800017 	ldw	r2,0(r2)
   ae278:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   ae27c:	e0fffd17 	ldw	r3,-12(fp)
   ae280:	008002f4 	movhi	r2,11
   ae284:	1082ad04 	addi	r2,r2,2740
   ae288:	18bfcb1e 	bne	r3,r2,ae1b8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   ae28c:	0005883a 	mov	r2,zero
}
   ae290:	e037883a 	mov	sp,fp
   ae294:	dfc00117 	ldw	ra,4(sp)
   ae298:	df000017 	ldw	fp,0(sp)
   ae29c:	dec00204 	addi	sp,sp,8
   ae2a0:	f800283a 	ret

000ae2a4 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   ae2a4:	defffc04 	addi	sp,sp,-16
   ae2a8:	df000315 	stw	fp,12(sp)
   ae2ac:	df000304 	addi	fp,sp,12
   ae2b0:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   ae2b4:	e0bfff17 	ldw	r2,-4(fp)
   ae2b8:	10800217 	ldw	r2,8(r2)
   ae2bc:	1000021e 	bne	r2,zero,ae2c8 <alt_fs_reg+0x24>
  {
    return -ENODEV;
   ae2c0:	00bffb44 	movi	r2,-19
   ae2c4:	00001406 	br	ae318 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   ae2c8:	e0bfff17 	ldw	r2,-4(fp)
   ae2cc:	00c002f4 	movhi	r3,11
   ae2d0:	18c2ad04 	addi	r3,r3,2740
   ae2d4:	e0fffd15 	stw	r3,-12(fp)
   ae2d8:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   ae2dc:	e0bffe17 	ldw	r2,-8(fp)
   ae2e0:	e0fffd17 	ldw	r3,-12(fp)
   ae2e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   ae2e8:	e0bffd17 	ldw	r2,-12(fp)
   ae2ec:	10c00017 	ldw	r3,0(r2)
   ae2f0:	e0bffe17 	ldw	r2,-8(fp)
   ae2f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   ae2f8:	e0bffd17 	ldw	r2,-12(fp)
   ae2fc:	10800017 	ldw	r2,0(r2)
   ae300:	e0fffe17 	ldw	r3,-8(fp)
   ae304:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   ae308:	e0bffd17 	ldw	r2,-12(fp)
   ae30c:	e0fffe17 	ldw	r3,-8(fp)
   ae310:	10c00015 	stw	r3,0(r2)

  return 0;
   ae314:	0005883a 	mov	r2,zero
} 
   ae318:	e037883a 	mov	sp,fp
   ae31c:	df000017 	ldw	fp,0(sp)
   ae320:	dec00104 	addi	sp,sp,4
   ae324:	f800283a 	ret

000ae328 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   ae328:	defffa04 	addi	sp,sp,-24
   ae32c:	dfc00515 	stw	ra,20(sp)
   ae330:	df000415 	stw	fp,16(sp)
   ae334:	dc000315 	stw	r16,12(sp)
   ae338:	df000304 	addi	fp,sp,12
   ae33c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   ae340:	00bffa04 	movi	r2,-24
   ae344:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   ae348:	e03ffd15 	stw	zero,-12(fp)
   ae34c:	00002106 	br	ae3d4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   ae350:	040002f4 	movhi	r16,11
   ae354:	843e2604 	addi	r16,r16,-1896
   ae358:	e0bffd17 	ldw	r2,-12(fp)
   ae35c:	1009883a 	mov	r4,r2
   ae360:	01400304 	movi	r5,12
   ae364:	00a118c0 	call	a118c <__mulsi3>
   ae368:	8085883a 	add	r2,r16,r2
   ae36c:	10800017 	ldw	r2,0(r2)
   ae370:	1000151e 	bne	r2,zero,ae3c8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   ae374:	040002f4 	movhi	r16,11
   ae378:	843e2604 	addi	r16,r16,-1896
   ae37c:	e0bffd17 	ldw	r2,-12(fp)
   ae380:	1009883a 	mov	r4,r2
   ae384:	01400304 	movi	r5,12
   ae388:	00a118c0 	call	a118c <__mulsi3>
   ae38c:	8085883a 	add	r2,r16,r2
   ae390:	e0ffff17 	ldw	r3,-4(fp)
   ae394:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   ae398:	008002f4 	movhi	r2,11
   ae39c:	1082b104 	addi	r2,r2,2756
   ae3a0:	10c00017 	ldw	r3,0(r2)
   ae3a4:	e0bffd17 	ldw	r2,-12(fp)
   ae3a8:	1880040e 	bge	r3,r2,ae3bc <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   ae3ac:	008002f4 	movhi	r2,11
   ae3b0:	1082b104 	addi	r2,r2,2756
   ae3b4:	e0fffd17 	ldw	r3,-12(fp)
   ae3b8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   ae3bc:	e0bffd17 	ldw	r2,-12(fp)
   ae3c0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   ae3c4:	00000606 	br	ae3e0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   ae3c8:	e0bffd17 	ldw	r2,-12(fp)
   ae3cc:	10800044 	addi	r2,r2,1
   ae3d0:	e0bffd15 	stw	r2,-12(fp)
   ae3d4:	e0bffd17 	ldw	r2,-12(fp)
   ae3d8:	10800810 	cmplti	r2,r2,32
   ae3dc:	103fdc1e 	bne	r2,zero,ae350 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   ae3e0:	e0bffe17 	ldw	r2,-8(fp)
}
   ae3e4:	e037883a 	mov	sp,fp
   ae3e8:	dfc00217 	ldw	ra,8(sp)
   ae3ec:	df000117 	ldw	fp,4(sp)
   ae3f0:	dc000017 	ldw	r16,0(sp)
   ae3f4:	dec00304 	addi	sp,sp,12
   ae3f8:	f800283a 	ret

000ae3fc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   ae3fc:	defffe04 	addi	sp,sp,-8
   ae400:	dfc00115 	stw	ra,4(sp)
   ae404:	df000015 	stw	fp,0(sp)
   ae408:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   ae40c:	0009883a 	mov	r4,zero
   ae410:	01440004 	movi	r5,4096
   ae414:	00aea080 	call	aea08 <alt_icache_flush>
#endif
}
   ae418:	e037883a 	mov	sp,fp
   ae41c:	dfc00117 	ldw	ra,4(sp)
   ae420:	df000017 	ldw	fp,0(sp)
   ae424:	dec00204 	addi	sp,sp,8
   ae428:	f800283a 	ret

000ae42c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   ae42c:	defff904 	addi	sp,sp,-28
   ae430:	dfc00615 	stw	ra,24(sp)
   ae434:	df000515 	stw	fp,20(sp)
   ae438:	df000504 	addi	fp,sp,20
   ae43c:	e13ffc15 	stw	r4,-16(fp)
   ae440:	e17ffd15 	stw	r5,-12(fp)
   ae444:	e1bffe15 	stw	r6,-8(fp)
   ae448:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   ae44c:	e0800217 	ldw	r2,8(fp)
   ae450:	d8800015 	stw	r2,0(sp)
   ae454:	e13ffc17 	ldw	r4,-16(fp)
   ae458:	e17ffd17 	ldw	r5,-12(fp)
   ae45c:	e1bffe17 	ldw	r6,-8(fp)
   ae460:	e1ffff17 	ldw	r7,-4(fp)
   ae464:	00ae6040 	call	ae604 <alt_iic_isr_register>
}  
   ae468:	e037883a 	mov	sp,fp
   ae46c:	dfc00117 	ldw	ra,4(sp)
   ae470:	df000017 	ldw	fp,0(sp)
   ae474:	dec00204 	addi	sp,sp,8
   ae478:	f800283a 	ret

000ae47c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   ae47c:	defff904 	addi	sp,sp,-28
   ae480:	df000615 	stw	fp,24(sp)
   ae484:	df000604 	addi	fp,sp,24
   ae488:	e13ffe15 	stw	r4,-8(fp)
   ae48c:	e17fff15 	stw	r5,-4(fp)
   ae490:	e0bfff17 	ldw	r2,-4(fp)
   ae494:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   ae498:	0005303a 	rdctl	r2,status
   ae49c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   ae4a0:	e0fffb17 	ldw	r3,-20(fp)
   ae4a4:	00bfff84 	movi	r2,-2
   ae4a8:	1884703a 	and	r2,r3,r2
   ae4ac:	1001703a 	wrctl	status,r2
  
  return context;
   ae4b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   ae4b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   ae4b8:	e0bffa17 	ldw	r2,-24(fp)
   ae4bc:	00c00044 	movi	r3,1
   ae4c0:	1884983a 	sll	r2,r3,r2
   ae4c4:	1007883a 	mov	r3,r2
   ae4c8:	008002f4 	movhi	r2,11
   ae4cc:	10898904 	addi	r2,r2,9764
   ae4d0:	10800017 	ldw	r2,0(r2)
   ae4d4:	1886b03a 	or	r3,r3,r2
   ae4d8:	008002f4 	movhi	r2,11
   ae4dc:	10898904 	addi	r2,r2,9764
   ae4e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   ae4e4:	008002f4 	movhi	r2,11
   ae4e8:	10898904 	addi	r2,r2,9764
   ae4ec:	10800017 	ldw	r2,0(r2)
   ae4f0:	100170fa 	wrctl	ienable,r2
   ae4f4:	e0bffc17 	ldw	r2,-16(fp)
   ae4f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   ae4fc:	e0bffd17 	ldw	r2,-12(fp)
   ae500:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   ae504:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   ae508:	e037883a 	mov	sp,fp
   ae50c:	df000017 	ldw	fp,0(sp)
   ae510:	dec00104 	addi	sp,sp,4
   ae514:	f800283a 	ret

000ae518 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   ae518:	defff904 	addi	sp,sp,-28
   ae51c:	df000615 	stw	fp,24(sp)
   ae520:	df000604 	addi	fp,sp,24
   ae524:	e13ffe15 	stw	r4,-8(fp)
   ae528:	e17fff15 	stw	r5,-4(fp)
   ae52c:	e0bfff17 	ldw	r2,-4(fp)
   ae530:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   ae534:	0005303a 	rdctl	r2,status
   ae538:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   ae53c:	e0fffb17 	ldw	r3,-20(fp)
   ae540:	00bfff84 	movi	r2,-2
   ae544:	1884703a 	and	r2,r3,r2
   ae548:	1001703a 	wrctl	status,r2
  
  return context;
   ae54c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   ae550:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   ae554:	e0bffa17 	ldw	r2,-24(fp)
   ae558:	00c00044 	movi	r3,1
   ae55c:	1884983a 	sll	r2,r3,r2
   ae560:	0084303a 	nor	r2,zero,r2
   ae564:	1007883a 	mov	r3,r2
   ae568:	008002f4 	movhi	r2,11
   ae56c:	10898904 	addi	r2,r2,9764
   ae570:	10800017 	ldw	r2,0(r2)
   ae574:	1886703a 	and	r3,r3,r2
   ae578:	008002f4 	movhi	r2,11
   ae57c:	10898904 	addi	r2,r2,9764
   ae580:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   ae584:	008002f4 	movhi	r2,11
   ae588:	10898904 	addi	r2,r2,9764
   ae58c:	10800017 	ldw	r2,0(r2)
   ae590:	100170fa 	wrctl	ienable,r2
   ae594:	e0bffc17 	ldw	r2,-16(fp)
   ae598:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   ae59c:	e0bffd17 	ldw	r2,-12(fp)
   ae5a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   ae5a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   ae5a8:	e037883a 	mov	sp,fp
   ae5ac:	df000017 	ldw	fp,0(sp)
   ae5b0:	dec00104 	addi	sp,sp,4
   ae5b4:	f800283a 	ret

000ae5b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   ae5b8:	defffc04 	addi	sp,sp,-16
   ae5bc:	df000315 	stw	fp,12(sp)
   ae5c0:	df000304 	addi	fp,sp,12
   ae5c4:	e13ffe15 	stw	r4,-8(fp)
   ae5c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   ae5cc:	000530fa 	rdctl	r2,ienable
   ae5d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   ae5d4:	e0bfff17 	ldw	r2,-4(fp)
   ae5d8:	00c00044 	movi	r3,1
   ae5dc:	1884983a 	sll	r2,r3,r2
   ae5e0:	1007883a 	mov	r3,r2
   ae5e4:	e0bffd17 	ldw	r2,-12(fp)
   ae5e8:	1884703a 	and	r2,r3,r2
   ae5ec:	1004c03a 	cmpne	r2,r2,zero
   ae5f0:	10803fcc 	andi	r2,r2,255
}
   ae5f4:	e037883a 	mov	sp,fp
   ae5f8:	df000017 	ldw	fp,0(sp)
   ae5fc:	dec00104 	addi	sp,sp,4
   ae600:	f800283a 	ret

000ae604 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   ae604:	defff504 	addi	sp,sp,-44
   ae608:	dfc00a15 	stw	ra,40(sp)
   ae60c:	df000915 	stw	fp,36(sp)
   ae610:	df000904 	addi	fp,sp,36
   ae614:	e13ffc15 	stw	r4,-16(fp)
   ae618:	e17ffd15 	stw	r5,-12(fp)
   ae61c:	e1bffe15 	stw	r6,-8(fp)
   ae620:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   ae624:	00bffa84 	movi	r2,-22
   ae628:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   ae62c:	e0bffd17 	ldw	r2,-12(fp)
   ae630:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   ae634:	e0bff817 	ldw	r2,-32(fp)
   ae638:	10800808 	cmpgei	r2,r2,32
   ae63c:	1000271e 	bne	r2,zero,ae6dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   ae640:	0005303a 	rdctl	r2,status
   ae644:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   ae648:	e0fffa17 	ldw	r3,-24(fp)
   ae64c:	00bfff84 	movi	r2,-2
   ae650:	1884703a 	and	r2,r3,r2
   ae654:	1001703a 	wrctl	status,r2
  
  return context;
   ae658:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   ae65c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   ae660:	00c002f4 	movhi	r3,11
   ae664:	18c99604 	addi	r3,r3,9816
   ae668:	e0bff817 	ldw	r2,-32(fp)
   ae66c:	100490fa 	slli	r2,r2,3
   ae670:	1885883a 	add	r2,r3,r2
   ae674:	e0fffe17 	ldw	r3,-8(fp)
   ae678:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   ae67c:	00c002f4 	movhi	r3,11
   ae680:	18c99604 	addi	r3,r3,9816
   ae684:	e0bff817 	ldw	r2,-32(fp)
   ae688:	100490fa 	slli	r2,r2,3
   ae68c:	1885883a 	add	r2,r3,r2
   ae690:	10800104 	addi	r2,r2,4
   ae694:	e0ffff17 	ldw	r3,-4(fp)
   ae698:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   ae69c:	e0bffe17 	ldw	r2,-8(fp)
   ae6a0:	10000526 	beq	r2,zero,ae6b8 <alt_iic_isr_register+0xb4>
   ae6a4:	e0bff817 	ldw	r2,-32(fp)
   ae6a8:	e13ffc17 	ldw	r4,-16(fp)
   ae6ac:	100b883a 	mov	r5,r2
   ae6b0:	00ae47c0 	call	ae47c <alt_ic_irq_enable>
   ae6b4:	00000406 	br	ae6c8 <alt_iic_isr_register+0xc4>
   ae6b8:	e0bff817 	ldw	r2,-32(fp)
   ae6bc:	e13ffc17 	ldw	r4,-16(fp)
   ae6c0:	100b883a 	mov	r5,r2
   ae6c4:	00ae5180 	call	ae518 <alt_ic_irq_disable>
   ae6c8:	e0bff715 	stw	r2,-36(fp)
   ae6cc:	e0bff917 	ldw	r2,-28(fp)
   ae6d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   ae6d4:	e0bffb17 	ldw	r2,-20(fp)
   ae6d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   ae6dc:	e0bff717 	ldw	r2,-36(fp)
}
   ae6e0:	e037883a 	mov	sp,fp
   ae6e4:	dfc00117 	ldw	ra,4(sp)
   ae6e8:	df000017 	ldw	fp,0(sp)
   ae6ec:	dec00204 	addi	sp,sp,8
   ae6f0:	f800283a 	ret

000ae6f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   ae6f4:	defff804 	addi	sp,sp,-32
   ae6f8:	dfc00715 	stw	ra,28(sp)
   ae6fc:	df000615 	stw	fp,24(sp)
   ae700:	dc000515 	stw	r16,20(sp)
   ae704:	df000504 	addi	fp,sp,20
   ae708:	e13ffc15 	stw	r4,-16(fp)
   ae70c:	e17ffd15 	stw	r5,-12(fp)
   ae710:	e1bffe15 	stw	r6,-8(fp)
   ae714:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   ae718:	e13ffd17 	ldw	r4,-12(fp)
   ae71c:	e17ffe17 	ldw	r5,-8(fp)
   ae720:	e1bfff17 	ldw	r6,-4(fp)
   ae724:	00abf180 	call	abf18 <open>
   ae728:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   ae72c:	e0bffb17 	ldw	r2,-20(fp)
   ae730:	10002216 	blt	r2,zero,ae7bc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   ae734:	040002f4 	movhi	r16,11
   ae738:	843e2604 	addi	r16,r16,-1896
   ae73c:	e0bffb17 	ldw	r2,-20(fp)
   ae740:	1009883a 	mov	r4,r2
   ae744:	01400304 	movi	r5,12
   ae748:	00a118c0 	call	a118c <__mulsi3>
   ae74c:	8085883a 	add	r2,r16,r2
   ae750:	10c00017 	ldw	r3,0(r2)
   ae754:	e0bffc17 	ldw	r2,-16(fp)
   ae758:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   ae75c:	040002f4 	movhi	r16,11
   ae760:	843e2604 	addi	r16,r16,-1896
   ae764:	e0bffb17 	ldw	r2,-20(fp)
   ae768:	1009883a 	mov	r4,r2
   ae76c:	01400304 	movi	r5,12
   ae770:	00a118c0 	call	a118c <__mulsi3>
   ae774:	8085883a 	add	r2,r16,r2
   ae778:	10800104 	addi	r2,r2,4
   ae77c:	10c00017 	ldw	r3,0(r2)
   ae780:	e0bffc17 	ldw	r2,-16(fp)
   ae784:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   ae788:	040002f4 	movhi	r16,11
   ae78c:	843e2604 	addi	r16,r16,-1896
   ae790:	e0bffb17 	ldw	r2,-20(fp)
   ae794:	1009883a 	mov	r4,r2
   ae798:	01400304 	movi	r5,12
   ae79c:	00a118c0 	call	a118c <__mulsi3>
   ae7a0:	8085883a 	add	r2,r16,r2
   ae7a4:	10800204 	addi	r2,r2,8
   ae7a8:	10c00017 	ldw	r3,0(r2)
   ae7ac:	e0bffc17 	ldw	r2,-16(fp)
   ae7b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   ae7b4:	e13ffb17 	ldw	r4,-20(fp)
   ae7b8:	00ac1b40 	call	ac1b4 <alt_release_fd>
  }
} 
   ae7bc:	e037883a 	mov	sp,fp
   ae7c0:	dfc00217 	ldw	ra,8(sp)
   ae7c4:	df000117 	ldw	fp,4(sp)
   ae7c8:	dc000017 	ldw	r16,0(sp)
   ae7cc:	dec00304 	addi	sp,sp,12
   ae7d0:	f800283a 	ret

000ae7d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   ae7d4:	defffb04 	addi	sp,sp,-20
   ae7d8:	dfc00415 	stw	ra,16(sp)
   ae7dc:	df000315 	stw	fp,12(sp)
   ae7e0:	df000304 	addi	fp,sp,12
   ae7e4:	e13ffd15 	stw	r4,-12(fp)
   ae7e8:	e17ffe15 	stw	r5,-8(fp)
   ae7ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   ae7f0:	010002f4 	movhi	r4,11
   ae7f4:	213e2904 	addi	r4,r4,-1884
   ae7f8:	e17ffd17 	ldw	r5,-12(fp)
   ae7fc:	01800044 	movi	r6,1
   ae800:	01c07fc4 	movi	r7,511
   ae804:	00ae6f40 	call	ae6f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   ae808:	010002f4 	movhi	r4,11
   ae80c:	213e2604 	addi	r4,r4,-1896
   ae810:	e17ffe17 	ldw	r5,-8(fp)
   ae814:	000d883a 	mov	r6,zero
   ae818:	01c07fc4 	movi	r7,511
   ae81c:	00ae6f40 	call	ae6f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   ae820:	010002f4 	movhi	r4,11
   ae824:	213e2c04 	addi	r4,r4,-1872
   ae828:	e17fff17 	ldw	r5,-4(fp)
   ae82c:	01800044 	movi	r6,1
   ae830:	01c07fc4 	movi	r7,511
   ae834:	00ae6f40 	call	ae6f4 <alt_open_fd>
}  
   ae838:	e037883a 	mov	sp,fp
   ae83c:	dfc00117 	ldw	ra,4(sp)
   ae840:	df000017 	ldw	fp,0(sp)
   ae844:	dec00204 	addi	sp,sp,8
   ae848:	f800283a 	ret

000ae84c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   ae84c:	defffa04 	addi	sp,sp,-24
   ae850:	df000515 	stw	fp,20(sp)
   ae854:	df000504 	addi	fp,sp,20
   ae858:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   ae85c:	0005303a 	rdctl	r2,status
   ae860:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   ae864:	e0fffc17 	ldw	r3,-16(fp)
   ae868:	00bfff84 	movi	r2,-2
   ae86c:	1884703a 	and	r2,r3,r2
   ae870:	1001703a 	wrctl	status,r2
  
  return context;
   ae874:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   ae878:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   ae87c:	e0bfff17 	ldw	r2,-4(fp)
   ae880:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   ae884:	e0bffd17 	ldw	r2,-12(fp)
   ae888:	10800017 	ldw	r2,0(r2)
   ae88c:	e0fffd17 	ldw	r3,-12(fp)
   ae890:	18c00117 	ldw	r3,4(r3)
   ae894:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   ae898:	e0bffd17 	ldw	r2,-12(fp)
   ae89c:	10800117 	ldw	r2,4(r2)
   ae8a0:	e0fffd17 	ldw	r3,-12(fp)
   ae8a4:	18c00017 	ldw	r3,0(r3)
   ae8a8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   ae8ac:	e0bffd17 	ldw	r2,-12(fp)
   ae8b0:	e0fffd17 	ldw	r3,-12(fp)
   ae8b4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   ae8b8:	e0bffd17 	ldw	r2,-12(fp)
   ae8bc:	e0fffd17 	ldw	r3,-12(fp)
   ae8c0:	10c00015 	stw	r3,0(r2)
   ae8c4:	e0bffb17 	ldw	r2,-20(fp)
   ae8c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   ae8cc:	e0bffe17 	ldw	r2,-8(fp)
   ae8d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   ae8d4:	e037883a 	mov	sp,fp
   ae8d8:	df000017 	ldw	fp,0(sp)
   ae8dc:	dec00104 	addi	sp,sp,4
   ae8e0:	f800283a 	ret

000ae8e4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   ae8e4:	defffb04 	addi	sp,sp,-20
   ae8e8:	dfc00415 	stw	ra,16(sp)
   ae8ec:	df000315 	stw	fp,12(sp)
   ae8f0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   ae8f4:	d0a01f17 	ldw	r2,-32644(gp)
   ae8f8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   ae8fc:	d0a6e317 	ldw	r2,-25716(gp)
   ae900:	10800044 	addi	r2,r2,1
   ae904:	d0a6e315 	stw	r2,-25716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   ae908:	00002e06 	br	ae9c4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   ae90c:	e0bffd17 	ldw	r2,-12(fp)
   ae910:	10800017 	ldw	r2,0(r2)
   ae914:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   ae918:	e0bffd17 	ldw	r2,-12(fp)
   ae91c:	10800403 	ldbu	r2,16(r2)
   ae920:	10803fcc 	andi	r2,r2,255
   ae924:	10000426 	beq	r2,zero,ae938 <alt_tick+0x54>
   ae928:	d0a6e317 	ldw	r2,-25716(gp)
   ae92c:	1000021e 	bne	r2,zero,ae938 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   ae930:	e0bffd17 	ldw	r2,-12(fp)
   ae934:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   ae938:	e0bffd17 	ldw	r2,-12(fp)
   ae93c:	10800217 	ldw	r2,8(r2)
   ae940:	d0e6e317 	ldw	r3,-25716(gp)
   ae944:	18801d36 	bltu	r3,r2,ae9bc <alt_tick+0xd8>
   ae948:	e0bffd17 	ldw	r2,-12(fp)
   ae94c:	10800403 	ldbu	r2,16(r2)
   ae950:	10803fcc 	andi	r2,r2,255
   ae954:	1000191e 	bne	r2,zero,ae9bc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   ae958:	e0bffd17 	ldw	r2,-12(fp)
   ae95c:	10c00317 	ldw	r3,12(r2)
   ae960:	e0bffd17 	ldw	r2,-12(fp)
   ae964:	10800517 	ldw	r2,20(r2)
   ae968:	1009883a 	mov	r4,r2
   ae96c:	183ee83a 	callr	r3
   ae970:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   ae974:	e0bfff17 	ldw	r2,-4(fp)
   ae978:	1000031e 	bne	r2,zero,ae988 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   ae97c:	e13ffd17 	ldw	r4,-12(fp)
   ae980:	00ae84c0 	call	ae84c <alt_alarm_stop>
   ae984:	00000d06 	br	ae9bc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   ae988:	e0bffd17 	ldw	r2,-12(fp)
   ae98c:	10c00217 	ldw	r3,8(r2)
   ae990:	e0bfff17 	ldw	r2,-4(fp)
   ae994:	1887883a 	add	r3,r3,r2
   ae998:	e0bffd17 	ldw	r2,-12(fp)
   ae99c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   ae9a0:	e0bffd17 	ldw	r2,-12(fp)
   ae9a4:	10c00217 	ldw	r3,8(r2)
   ae9a8:	d0a6e317 	ldw	r2,-25716(gp)
   ae9ac:	1880032e 	bgeu	r3,r2,ae9bc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   ae9b0:	e0bffd17 	ldw	r2,-12(fp)
   ae9b4:	00c00044 	movi	r3,1
   ae9b8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   ae9bc:	e0bffe17 	ldw	r2,-8(fp)
   ae9c0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   ae9c4:	e0fffd17 	ldw	r3,-12(fp)
   ae9c8:	d0a01f04 	addi	r2,gp,-32644
   ae9cc:	18bfcf1e 	bne	r3,r2,ae90c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   ae9d0:	0001883a 	nop
}
   ae9d4:	e037883a 	mov	sp,fp
   ae9d8:	dfc00117 	ldw	ra,4(sp)
   ae9dc:	df000017 	ldw	fp,0(sp)
   ae9e0:	dec00204 	addi	sp,sp,8
   ae9e4:	f800283a 	ret

000ae9e8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   ae9e8:	deffff04 	addi	sp,sp,-4
   ae9ec:	df000015 	stw	fp,0(sp)
   ae9f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   ae9f4:	000170fa 	wrctl	ienable,zero
}
   ae9f8:	e037883a 	mov	sp,fp
   ae9fc:	df000017 	ldw	fp,0(sp)
   aea00:	dec00104 	addi	sp,sp,4
   aea04:	f800283a 	ret

000aea08 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   aea08:	defffb04 	addi	sp,sp,-20
   aea0c:	df000415 	stw	fp,16(sp)
   aea10:	df000404 	addi	fp,sp,16
   aea14:	e13ffe15 	stw	r4,-8(fp)
   aea18:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   aea1c:	e0bfff17 	ldw	r2,-4(fp)
   aea20:	10840070 	cmpltui	r2,r2,4097
   aea24:	1000021e 	bne	r2,zero,aea30 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   aea28:	00840004 	movi	r2,4096
   aea2c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   aea30:	e0fffe17 	ldw	r3,-8(fp)
   aea34:	e0bfff17 	ldw	r2,-4(fp)
   aea38:	1885883a 	add	r2,r3,r2
   aea3c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   aea40:	e0bffe17 	ldw	r2,-8(fp)
   aea44:	e0bffc15 	stw	r2,-16(fp)
   aea48:	00000506 	br	aea60 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   aea4c:	e0bffc17 	ldw	r2,-16(fp)
   aea50:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   aea54:	e0bffc17 	ldw	r2,-16(fp)
   aea58:	10800804 	addi	r2,r2,32
   aea5c:	e0bffc15 	stw	r2,-16(fp)
   aea60:	e0fffc17 	ldw	r3,-16(fp)
   aea64:	e0bffd17 	ldw	r2,-12(fp)
   aea68:	18bff836 	bltu	r3,r2,aea4c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   aea6c:	e0bffe17 	ldw	r2,-8(fp)
   aea70:	108007cc 	andi	r2,r2,31
   aea74:	10000226 	beq	r2,zero,aea80 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   aea78:	e0bffc17 	ldw	r2,-16(fp)
   aea7c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   aea80:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   aea84:	e037883a 	mov	sp,fp
   aea88:	df000017 	ldw	fp,0(sp)
   aea8c:	dec00104 	addi	sp,sp,4
   aea90:	f800283a 	ret

000aea94 <atexit>:
   aea94:	200b883a 	mov	r5,r4
   aea98:	000d883a 	mov	r6,zero
   aea9c:	0009883a 	mov	r4,zero
   aeaa0:	000f883a 	mov	r7,zero
   aeaa4:	00aeb241 	jmpi	aeb24 <__register_exitproc>

000aeaa8 <memcmp>:
   aeaa8:	01c000c4 	movi	r7,3
   aeaac:	3980192e 	bgeu	r7,r6,aeb14 <memcmp+0x6c>
   aeab0:	2904b03a 	or	r2,r5,r4
   aeab4:	11c4703a 	and	r2,r2,r7
   aeab8:	10000f26 	beq	r2,zero,aeaf8 <memcmp+0x50>
   aeabc:	20c00003 	ldbu	r3,0(r4)
   aeac0:	28800003 	ldbu	r2,0(r5)
   aeac4:	1880151e 	bne	r3,r2,aeb1c <memcmp+0x74>
   aeac8:	31bfff84 	addi	r6,r6,-2
   aeacc:	01ffffc4 	movi	r7,-1
   aead0:	00000406 	br	aeae4 <memcmp+0x3c>
   aead4:	20c00003 	ldbu	r3,0(r4)
   aead8:	28800003 	ldbu	r2,0(r5)
   aeadc:	31bfffc4 	addi	r6,r6,-1
   aeae0:	18800e1e 	bne	r3,r2,aeb1c <memcmp+0x74>
   aeae4:	21000044 	addi	r4,r4,1
   aeae8:	29400044 	addi	r5,r5,1
   aeaec:	31fff91e 	bne	r6,r7,aead4 <memcmp+0x2c>
   aeaf0:	0005883a 	mov	r2,zero
   aeaf4:	f800283a 	ret
   aeaf8:	20c00017 	ldw	r3,0(r4)
   aeafc:	28800017 	ldw	r2,0(r5)
   aeb00:	1880041e 	bne	r3,r2,aeb14 <memcmp+0x6c>
   aeb04:	31bfff04 	addi	r6,r6,-4
   aeb08:	21000104 	addi	r4,r4,4
   aeb0c:	29400104 	addi	r5,r5,4
   aeb10:	39bff936 	bltu	r7,r6,aeaf8 <memcmp+0x50>
   aeb14:	303fe91e 	bne	r6,zero,aeabc <memcmp+0x14>
   aeb18:	003ff506 	br	aeaf0 <memcmp+0x48>
   aeb1c:	1885c83a 	sub	r2,r3,r2
   aeb20:	f800283a 	ret

000aeb24 <__register_exitproc>:
   aeb24:	defffa04 	addi	sp,sp,-24
   aeb28:	008002f4 	movhi	r2,11
   aeb2c:	1082a804 	addi	r2,r2,2720
   aeb30:	dc000315 	stw	r16,12(sp)
   aeb34:	14000017 	ldw	r16,0(r2)
   aeb38:	dc400415 	stw	r17,16(sp)
   aeb3c:	dfc00515 	stw	ra,20(sp)
   aeb40:	80805217 	ldw	r2,328(r16)
   aeb44:	2023883a 	mov	r17,r4
   aeb48:	10003e26 	beq	r2,zero,aec44 <__register_exitproc+0x120>
   aeb4c:	10c00117 	ldw	r3,4(r2)
   aeb50:	020007c4 	movi	r8,31
   aeb54:	40c0180e 	bge	r8,r3,aebb8 <__register_exitproc+0x94>
   aeb58:	00800034 	movhi	r2,0
   aeb5c:	10800004 	addi	r2,r2,0
   aeb60:	1000061e 	bne	r2,zero,aeb7c <__register_exitproc+0x58>
   aeb64:	00bfffc4 	movi	r2,-1
   aeb68:	dfc00517 	ldw	ra,20(sp)
   aeb6c:	dc400417 	ldw	r17,16(sp)
   aeb70:	dc000317 	ldw	r16,12(sp)
   aeb74:	dec00604 	addi	sp,sp,24
   aeb78:	f800283a 	ret
   aeb7c:	01006404 	movi	r4,400
   aeb80:	d9400015 	stw	r5,0(sp)
   aeb84:	d9800115 	stw	r6,4(sp)
   aeb88:	d9c00215 	stw	r7,8(sp)
   aeb8c:	00000000 	call	0 <__alt_mem_SDRAM_controller>
   aeb90:	d9400017 	ldw	r5,0(sp)
   aeb94:	d9800117 	ldw	r6,4(sp)
   aeb98:	d9c00217 	ldw	r7,8(sp)
   aeb9c:	103ff126 	beq	r2,zero,aeb64 <__register_exitproc+0x40>
   aeba0:	80c05217 	ldw	r3,328(r16)
   aeba4:	10000115 	stw	zero,4(r2)
   aeba8:	10c00015 	stw	r3,0(r2)
   aebac:	80805215 	stw	r2,328(r16)
   aebb0:	10006215 	stw	zero,392(r2)
   aebb4:	10006315 	stw	zero,396(r2)
   aebb8:	10c00117 	ldw	r3,4(r2)
   aebbc:	88000d1e 	bne	r17,zero,aebf4 <__register_exitproc+0xd0>
   aebc0:	19000084 	addi	r4,r3,2
   aebc4:	2109883a 	add	r4,r4,r4
   aebc8:	18c00044 	addi	r3,r3,1
   aebcc:	2109883a 	add	r4,r4,r4
   aebd0:	1109883a 	add	r4,r2,r4
   aebd4:	10c00115 	stw	r3,4(r2)
   aebd8:	0005883a 	mov	r2,zero
   aebdc:	21400015 	stw	r5,0(r4)
   aebe0:	dfc00517 	ldw	ra,20(sp)
   aebe4:	dc400417 	ldw	r17,16(sp)
   aebe8:	dc000317 	ldw	r16,12(sp)
   aebec:	dec00604 	addi	sp,sp,24
   aebf0:	f800283a 	ret
   aebf4:	02400044 	movi	r9,1
   aebf8:	12806217 	ldw	r10,392(r2)
   aebfc:	48d2983a 	sll	r9,r9,r3
   aec00:	19000804 	addi	r4,r3,32
   aec04:	18d1883a 	add	r8,r3,r3
   aec08:	2109883a 	add	r4,r4,r4
   aec0c:	4211883a 	add	r8,r8,r8
   aec10:	2109883a 	add	r4,r4,r4
   aec14:	1109883a 	add	r4,r2,r4
   aec18:	1211883a 	add	r8,r2,r8
   aec1c:	5254b03a 	or	r10,r10,r9
   aec20:	21c02215 	stw	r7,136(r4)
   aec24:	41802215 	stw	r6,136(r8)
   aec28:	12806215 	stw	r10,392(r2)
   aec2c:	01000084 	movi	r4,2
   aec30:	893fe31e 	bne	r17,r4,aebc0 <__register_exitproc+0x9c>
   aec34:	11006317 	ldw	r4,396(r2)
   aec38:	2252b03a 	or	r9,r4,r9
   aec3c:	12406315 	stw	r9,396(r2)
   aec40:	003fdf06 	br	aebc0 <__register_exitproc+0x9c>
   aec44:	008002f4 	movhi	r2,11
   aec48:	1089d604 	addi	r2,r2,10072
   aec4c:	80805215 	stw	r2,328(r16)
   aec50:	003fbe06 	br	aeb4c <__register_exitproc+0x28>
