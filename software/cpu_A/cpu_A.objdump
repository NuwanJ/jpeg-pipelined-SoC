
cpu_A.elf:     file format elf32-littlenios2
cpu_A.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00015044 memsz 0x00015044 flags r-x
    LOAD off    0x00016064 vaddr 0x00015064 paddr 0x00016b58 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x0001864c vaddr 0x0001864c paddr 0x0001864c align 2**12
         filesz 0x00000000 memsz 0x00000908 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014754  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000758  0001490c  0001490c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  00015064  00016b58  00016064  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000908  0001864c  0001864c  0001864c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00017b58  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000012f0  00000000  00000000  00017b80  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00035e68  00000000  00000000  00018e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d561  00000000  00000000  0004ecd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000f4da  00000000  00000000  0005c239  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000029b0  00000000  00000000  0006b714  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000041af  00000000  00000000  0006e0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00019949  00000000  00000000  00072273  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  0008bbbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  0008bc10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00090ff0  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  00090ff3  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00090ff8  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00090ff9  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00090ffa  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00090ffe  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00091002  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000006  00000000  00000000  00091006  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000006  00000000  00000000  0009100c  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000006  00000000  00000000  00091012  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000006  00000000  00000000  00091018  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001d  00000000  00000000  0009101e  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     001b94d0  00000000  00000000  0009103b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
0001490c l    d  .rodata	00000000 .rodata
00015064 l    d  .rwdata	00000000 .rwdata
0001864c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu_A_bsp//obj/HAL/src/crt0.o
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 encoder.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 readYUV.c
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 IOMap.c
00000000 l    df *ABS*	00000000 utility.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00002390 l     F .text	00000008 __fp_lock
00002398 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fscanf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00015064 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
000041e8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00004620 l     F .text	00000034 __sprint_r
00014a8a l     O .rodata	00000010 blanks.3515
00014a9a l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 vfscanf.c
00014ab2 l     O .rodata	00000022 basefix.3427
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00014bd5 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00007ec0 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00014d78 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00014ec0 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
00015878 l     O .rwdata	00000014 fpi.2015
00014edc l     O .rodata	00000028 tinytens
0001588c l     O .rwdata	00000014 fpinan.2051
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000e154 l     F .text	00000110 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
0000fc08 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010a04 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0001133c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00011458 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00011484 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00011584 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00011678 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00011764 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00011940 l     F .text	00000050 alt_get_errno
00011990 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00011bd8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00016b00 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00011e7c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011fbc l     F .text	00000038 alt_dev_reg
00015a48 l     O .rwdata	00001060 jtag_A
00016aa8 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000127e8 l     F .text	00000204 altera_avalon_jtag_uart_irq
000129ec l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00013028 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
00016b40 l     O .rwdata	00000004 hcinfo.2311
00016b34 l     O .rwdata	00000004 hcinfo.2324
00016b28 l     O .rwdata	00000004 hcinfo.2333
00016b1c l     O .rwdata	00000004 hcinfo.2346
00016b10 l     O .rwdata	00000004 hcinfo.2359
00016b04 l     O .rwdata	00000004 hcinfo.2385
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000139fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014198 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00001da8 g     F .text	00000030 readStatus_DE
0000b0c0 g     F .text	00000074 _mprec_log10
0000b1b0 g     F .text	00000084 __any_on
00009c94 g     F .text	00000064 _isatty_r
00014da8 g     O .rodata	00000028 __mprec_tinytens
00011888 g     F .text	00000078 alt_main
000111cc g     F .text	00000044 __ashldi3
00004150 g     F .text	00000084 _puts_r
00018654 g     O .bss	00000004 t
00018cc4 g     O .bss	00000100 alt_irq
00009e0c g     F .text	0000006c _lseek_r
00000738 g     F .text	00000030 SEND6
00012354 g     F .text	00000058 altera_avalon_fifo_write_almostfull
00016b58 g       *ABS*	00000000 __flash_rwdata_start
0000197c g     F .text	0000004c write_AE
00009718 g     F .text	00000098 __sflags
000104a8 g     F .text	0000005c __eqdf2
00018f54 g       *ABS*	00000000 __alt_heap_start
00004114 g     F .text	0000003c printf
00004530 g     F .text	0000005c __sseek
00002434 g     F .text	0000010c __sinit
00009d30 g     F .text	0000009c _setlocale_r
00001d18 g     F .text	00000044 read_DE
000023ac g     F .text	00000078 __sfmoreglue
0000e06c g     F .text	0000001c ungetc
00011920 g     F .text	00000020 __malloc_unlock
00013124 g     F .text	0000016c alt_hostfs_open
0000bb34 g     F .text	00001548 _strtod_r
000186c4 g     O .bss	00000080 CR
000007d0 g     F .text	000002c4 processLoop
0001868c g     O .bss	00000004 altera_avalon_timer_ts_freq
0000a058 g     F .text	0000018c memmove
000120d4 g     F .text	00000098 altera_avalon_fifo_init
00002424 g     F .text	00000010 _cleanup
00012404 g     F .text	00000058 altera_avalon_fifo_write_fifo
0000a1e4 g     F .text	000000a8 _Balloc
00001c64 g     F .text	0000004c write_CD
00001af0 g     F .text	00000038 init_BC
00000a94 g     F .text	00000030 jemalloc
00010560 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00018658 g     O .bss	00000004 read_format
00000000 g     F .entry	0000001c __reset
0001259c g     F .text	00000028 altera_avalon_fifo_read_backpressure
00000b24 g     F .text	00000030 SEND3
00000020 g       *ABS*	00000000 __flash_exceptions_start
00003344 g     F .text	00000068 _fstat_r
00018660 g     O .bss	00000004 errno
00007be8 g     F .text	00000024 __svfscanf
00010d64 g     F .text	0000002c __make_fp
00018680 g     O .bss	00000004 alt_argv
0001ead0 g       *ABS*	00000000 _gp
00011e4c g     F .text	00000030 usleep
000122a0 g     F .text	0000005c altera_avalon_fifo_clear_event
00002e50 g     F .text	0000003c fscanf
00001618 g     F .text	00000038 init_AB_1
00001c20 g     F .text	00000044 read_CD
000158c8 g     O .rwdata	00000180 alt_fd_list
0000155c g     F .text	00000044 read_AB_0
0001346c g     F .text	000000b8 alt_hostfs_seek
00013ba4 g     F .text	00000090 alt_find_dev
00003e60 g     F .text	00000140 memcpy
0000ea6c g     F .text	0000028c __hexnan
000023a0 g     F .text	0000000c _cleanup_r
000106e0 g     F .text	000000d4 __floatsidf
00001bb8 g     F .text	00000030 readStatus_BC
00013d48 g     F .text	00000084 alt_fs_reg
00014278 g     F .text	00000078 alt_io_redirect
00010628 g     F .text	0000005c __ltdf2
00001900 g     F .text	00000038 init_AE
0001490c g       *ABS*	00000000 __DTOR_END__
000041d4 g     F .text	00000014 puts
00009edc g     F .text	00000040 mbrtowc
00007b9c g     F .text	0000004c _vfscanf_r
0000b01c g     F .text	000000a4 __ratio
00012bec g     F .text	00000218 altera_avalon_jtag_uart_read
000036b4 g     F .text	00000014 malloc
000040e8 g     F .text	0000002c _printf_r
00010b24 g     F .text	00000008 __udivsi3
000115d4 g     F .text	000000a4 isatty
00009cf8 g     F .text	00000038 iswspace
00014df8 g     O .rodata	000000c8 __mprec_tens
000013a8 g     F .text	0000006c READ_B
00018744 g     O .bss	00000080 Y2
00009dcc g     F .text	0000000c __locale_charset
0000ee08 g     F .text	00000084 __fixunsdfsi
000144ac g     F .text	0000008c alt_icache_flush
00001ac0 g     F .text	00000030 readStatus_AF
0001866c g     O .bss	00000004 __malloc_top_pad
0000da28 g     F .text	00000024 strtoul
00016ae4 g     O .rwdata	00000004 __mb_cur_max
00009dd8 g     F .text	0000000c _localeconv_r
0000da4c g     F .text	00000394 _strtoull_r
0000a614 g     F .text	0000003c __i2b
000097b0 g     F .text	000004e4 __sfvwrite_r
000043f0 g     F .text	00000064 _sbrk_r
000015a0 g     F .text	00000048 write_AB_0
0000070c g     F .text	0000002c encodeMCU
00000b54 g     F .text	00000770 read_444_format
000187c4 g     O .bss	00000080 Temp
000132fc g     F .text	000000b8 alt_hostfs_read
00001ce0 g     F .text	00000038 init_DE
0000b234 g     F .text	0000006c _read_r
0001586c g     O .rwdata	0000000c __lc_ctype
00016af8 g     O .rwdata	00000004 alt_max_fd
00010fb4 g     F .text	00000104 __unpack_d
00002028 g     F .text	0000013c _fclose_r
00002360 g     F .text	00000030 fflush
00018668 g     O .bss	00000004 __malloc_max_sbrked_mem
0000ff5c g     F .text	00000054 __adddf3
0000ad90 g     F .text	00000148 __b2d
0000f4dc g     F .text	00000628 __umoddi3
00001840 g     F .text	00000044 read_AD
000117b4 g     F .text	000000d4 lseek
000019f8 g     F .text	00000038 init_AF
00016ad0 g     O .rwdata	00000004 _global_impure_ptr
0000b2a0 g     F .text	000005fc _realloc_r
00018f54 g       *ABS*	00000000 __bss_end
000140a8 g     F .text	000000f0 alt_iic_isr_register
00014388 g     F .text	00000104 alt_tick
00018bc4 g     O .bss	00000100 __hexdig
0000ee8c g     F .text	00000650 __udivdi3
00014dd0 g     O .rodata	00000028 __mprec_bigtens
0000a3f8 g     F .text	00000104 __s2b
00001a30 g     F .text	00000044 read_AF
00001694 g     F .text	0000004c write_AB_1
000108e8 g     F .text	0000011c __floatunsidf
0000ab30 g     F .text	00000058 __mcmp
00016ae0 g     O .rwdata	00000004 __ctype_ptr
0000264c g     F .text	00000018 __fp_lock_all
0001405c g     F .text	0000004c alt_ic_irq_enabled
00001454 g     F .text	0000001c FIFO_INIT
000142f0 g     F .text	00000098 alt_alarm_stop
0000d430 g     F .text	00000024 strtol
00018690 g     O .bss	00000004 alt_irq_active
00001884 g     F .text	0000004c write_AD
00013290 g     F .text	0000006c alt_hostfs_close
000000ec g     F .exceptions	000000cc alt_irq_handler
000158a0 g     O .rwdata	00000028 alt_dev_null
00010be0 g     F .text	000000c8 __unpack_f
000139e0 g     F .text	0000001c alt_dcache_flush_all
0000a4fc g     F .text	00000068 __hi0bits
00018844 g     O .bss	00000040 Lqt
000107b4 g     F .text	000000d4 __fixdfsi
0000d07c g     F .text	0000001c strtod
000122fc g     F .text	00000058 altera_avalon_fifo_write_ienable
00016b58 g       *ABS*	00000000 __ram_rwdata_end
00012210 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00001cb0 g     F .text	00000030 readStatus_CD
00016af0 g     O .rwdata	00000008 alt_dev_list
00011ecc g     F .text	000000f0 write
0000fb58 g     F .text	0000005c __gtsf2
00001e54 g     F .text	0000004c write_EF
00015064 g       *ABS*	00000000 __ram_rodata_end
000114d4 g     F .text	000000b0 fstat
00011188 g     F .text	00000044 __lshrdi3
00010684 g     F .text	0000005c __ledf2
00001938 g     F .text	00000044 read_AE
0000a8a8 g     F .text	0000012c __pow5mult
00018678 g     O .bss	00000004 __nlocale_changed
00010b2c g     F .text	00000008 __umodsi3
00018f54 g       *ABS*	00000000 end
00000af4 g     F .text	00000030 SEND2
00011210 g     F .text	0000012c __pack_f
00001dd8 g     F .text	00000038 init_EF
000016e0 g     F .text	00000030 readStatus_AB_1
00003320 g     F .text	00000024 fseek
00012728 g     F .text	000000c0 altera_avalon_jtag_uart_init
00000ac4 g     F .text	00000030 SEND1
0001223c g     F .text	0000003c altera_avalon_fifo_read_event
0001490c g       *ABS*	00000000 __CTOR_LIST__
00400000 g       *ABS*	00000000 __alt_stack_pointer
0001309c g     F .text	00000088 alt_avalon_timer_sc_init
00010b34 g     F .text	000000ac __clzsi2
00012e04 g     F .text	00000224 altera_avalon_jtag_uart_write
0001865c g     O .bss	00000004 input_fifo_wrclk_irq_event
0000263c g     F .text	00000004 __sfp_lock_acquire
000124c8 g     F .text	0000004c altera_avalon_fifo_read_fifo
00009f60 g     F .text	000000f8 memchr
00004654 g     F .text	00001e7c ___vfprintf_internal_r
0000b9cc g     F .text	00000058 _sprintf_r
00002b80 g     F .text	000002d0 _free_r
00014730 g     F .text	000001a0 __call_exitprocs
00018674 g     O .bss	00000004 __mlocale_changed
00016ad8 g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
00018694 g     O .bss	00000004 _alt_tick_rate
0000d454 g     F .text	00000330 _strtoll_r
000004d4 g     F .text	00000238 encode_image
0000a9d4 g     F .text	0000015c __lshift
00018698 g     O .bss	00000004 _alt_nticks
00011c28 g     F .text	000000f4 read
00012028 g     F .text	000000ac alt_sys_init
0000407c g     F .text	0000006c _open_r
00014600 g     F .text	00000130 __register_exitproc
0000a650 g     F .text	00000258 __multiply
00012a90 g     F .text	00000068 altera_avalon_jtag_uart_close
00002000 g     F .text	00000028 __mulsi3
00015064 g       *ABS*	00000000 __ram_rwdata_start
0001490c g       *ABS*	00000000 __ram_rodata_start
0001869c g     O .bss	00000028 __malloc_current_mallinfo
0000fb04 g     F .text	00000054 __eqsf2
0000aed8 g     F .text	00000144 __d2b
000012c4 g     F .text	0000006c INIT_B
00001ea0 g     F .text	00000030 readStatus_EF
00000224 g     F .text	00000030 SEND5
000125c4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000d784 g     F .text	000002a4 _strtoul_r
00013dcc g     F .text	000000d4 alt_get_fd
0001388c g     F .text	00000154 alt_busy_sleep
000110b8 g     F .text	000000d0 __fpcmp_parts_d
00007e5c g     F .text	00000064 _close_r
00014584 g     F .text	0000007c memcmp
00012684 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018f54 g       *ABS*	00000000 __alt_stack_base
000126d4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00001470 g     F .text	000000b4 print_status
00007ce8 g     F .text	00000174 __swsetup_r
0001216c g     F .text	0000003c altera_avalon_fifo_read_status
000102f4 g     F .text	000001b4 __divdf3
00002540 g     F .text	000000fc __sfp
0000b134 g     F .text	0000007c __copybits
00015464 g     O .rwdata	00000408 __malloc_av_
00002648 g     F .text	00000004 __sinit_lock_release
00010010 g     F .text	000002e4 __muldf3
00004454 g     F .text	00000054 __sread
00002a04 g     F .text	00000040 fread
00001650 g     F .text	00000044 read_AB_1
00012570 g     F .text	0000002c altera_avalon_fifo_read_other_info
00013c34 g     F .text	00000114 alt_find_file
00013a4c g     F .text	000000a0 alt_dev_llist_insert
00011900 g     F .text	00000020 __malloc_lock
00011d9c g     F .text	000000b0 sbrk
00002178 g     F .text	000001e8 _fflush_r
0000e088 g     F .text	000000cc _calloc_r
000027ac g     F .text	0000001c fopen
0001864c g       *ABS*	00000000 __bss_start
00002e8c g     F .text	00000020 _fscanf_r
00003fa0 g     F .text	000000dc memset
00000768 g     F .text	00000068 main
00018884 g     O .bss	00000080 ILqt
00018684 g     O .bss	00000004 alt_envp
00018664 g     O .bss	00000004 __malloc_max_total_mem
00018904 g     O .bss	00000080 Y4
00012624 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012278 g     F .text	00000028 altera_avalon_fifo_read_level
00001d5c g     F .text	0000004c write_DE
0000fbb4 g     F .text	00000054 __ltsf2
000027c8 g     F .text	0000023c _fread_r
00001e10 g     F .text	00000044 read_EF
0000458c g     F .text	00000008 __sclose
00400000 g       *ABS*	00000000 __alt_heap_limit
00002164 g     F .text	00000014 fclose
00001710 g     F .text	00000038 init_AB_2
00001524 g     F .text	00000038 init_AB_0
0000d1b8 g     F .text	00000278 _strtol_r
00010888 g     F .text	00000060 __truncdfsf2
00018dc4 g     O .bss	00000190 _atexit0
00001fa4 g     F .text	0000005c ledBlink
000080fc g     F .text	0000161c _dtoa_r
000036dc g     F .text	00000784 _malloc_r
00016afc g     O .rwdata	00000004 alt_errno
0000dde0 g     F .text	000000f0 __submore
000019c8 g     F .text	00000030 readStatus_AE
000033ac g     F .text	000000a8 _fwalk
00009f1c g     F .text	00000044 _mbtowc_r
00010a78 g     F .text	00000050 __divsi3
00014f20 g     O .rodata	00000014 __thenan_df
00002a44 g     F .text	0000013c _malloc_trim_r
0001490c g       *ABS*	00000000 __CTOR_END__
0000ba90 g     F .text	000000a4 strcmp
00001808 g     F .text	00000038 init_AD
0001490c g       *ABS*	00000000 __flash_rodata_start
00001a74 g     F .text	0000004c write_AF
0001490c g       *ABS*	00000000 __DTOR_LIST__
00001ed0 g     F .text	0000003c delay
00010504 g     F .text	0000005c __nedf2
00000000 g       *ABS*	00000000 __alt_mem_SDRAM_controller
00011ff4 g     F .text	00000034 alt_irq_init
0000178c g     F .text	0000004c write_AB_2
00011d1c g     F .text	00000080 alt_release_fd
0000ba24 g     F .text	0000006c sprintf
00014f34 g     O .rodata	00000100 __clz_tab
00018670 g     O .bss	00000004 _PathLocale
000015e8 g     F .text	00000030 readStatus_AB_0
0000d098 g     F .text	00000120 strtof
00014538 g     F .text	00000014 atexit
00007c7c g     F .text	0000006c _write_r
00009de4 g     F .text	0000001c setlocale
00018984 g     O .bss	00000080 CB
00001b28 g     F .text	00000044 read_BC
0000b9c4 g     F .text	00000008 nanf
00016ad4 g     O .rwdata	00000004 _impure_ptr
0001867c g     O .bss	00000004 alt_argc
00009e78 g     F .text	00000064 _mbrtowc_r
00018688 g     O .bss	00000004 altera_avalon_timer_ts_base
00013b48 g     F .text	0000005c _do_dtors
00002eac g     F .text	00000474 _fseek_r
00018a04 g     O .bss	00000040 Cqt
00001434 g     F .text	00000020 READ_FIFO
00004204 g     F .text	000001ec __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
0000ad30 g     F .text	00000060 __ulp
0000b89c g     F .text	00000038 __isinfd
00002664 g     F .text	00000018 __fp_unlock_all
00016ae8 g     O .rwdata	00000008 alt_fs_list
000133b4 g     F .text	000000b8 alt_hostfs_write
00001f0c g     F .text	00000098 ledUpdate
00000020 g       *ABS*	00000000 __ram_exceptions_start
00009e00 g     F .text	0000000c localeconv
0001864c g     O .bss	00000004 lcode
00012514 g     F .text	0000005c altera_avalon_fifo_write_other_info
00013ed0 g     F .text	00000050 alt_ic_isr_register
0000e264 g     F .text	00000090 __hexdig_init
000018d0 g     F .text	00000030 readStatus_AD
00016b58 g       *ABS*	00000000 _edata
00018f54 g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
00007c0c g     F .text	00000070 vfscanf
00012af8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00001748 g     F .text	00000044 read_AB_2
00013fbc g     F .text	000000a0 alt_ic_irq_disable
000044a8 g     F .text	00000088 __swrite
00016adc g     O .rwdata	00000004 __malloc_trim_threshold
0001448c g     F .text	00000020 altera_nios2_qsys_irq_init
0001454c g     F .text	00000038 exit
00018a44 g     O .bss	00000080 Y1
00003454 g     F .text	000000b8 _fwalk_reent
0000ab88 g     F .text	000001a8 __mdiff
00010ac8 g     F .text	0000005c __modsi3
000121a8 g     F .text	0000003c altera_avalon_fifo_read_ienable
00400000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00002640 g     F .text	00000004 __sfp_lock_release
0000b900 g     F .text	000000c4 __sccl
00001330 g     F .text	00000078 WRITE_B
00014ad4 g     O .rodata	00000101 _ctype_
00018ac4 g     O .bss	00000080 ICqt
00010ca8 g     F .text	000000bc __fpcmp_parts_f
0000267c g     F .text	00000130 _fopen_r
000148d0 g     F .text	0000003c _exit
0000b8d4 g     F .text	0000002c __isnand
0001374c g     F .text	00000140 alt_alarm_start
0000ecf8 g     F .text	00000110 __muldi3
000121e4 g     F .text	0000002c altera_avalon_fifo_read_almostfull
0000350c g     F .text	000001a8 __smakebuf_r
000001f4 g     F .text	00000030 SEND4
00004594 g     F .text	0000008c strlen
00011a80 g     F .text	00000158 open
0001245c g     F .text	0000006c altera_avalon_read_fifo
000105c4 g     F .text	00000064 __gedf2
00000254 g     F .text	00000280 initialization
0000e2f4 g     F .text	00000778 __gethex
00001be8 g     F .text	00000038 init_CD
00018650 g     O .bss	00000002 bitindex
00013ea0 g     F .text	00000030 alt_icache_flush_all
00001414 g     F .text	00000020 WRITE_FIFO
00016b4c g     O .rwdata	00000004 alt_priority_mask
00013f20 g     F .text	0000009c alt_ic_irq_enable
000064d0 g     F .text	00000024 __vfprintf_internal
000017d8 g     F .text	00000030 readStatus_AB_2
00001b6c g     F .text	0000004c write_BC
0000ffb0 g     F .text	00000060 __subdf3
0000a564 g     F .text	000000b0 __lo0bits
000064f4 g     F .text	000016a8 __svfscanf_r
000123ac g     F .text	00000058 altera_avalon_fifo_write_almostempty
00016b50 g     O .rwdata	00000008 alt_alarm_list
0000ded0 g     F .text	0000019c _ungetc_r
00013aec g     F .text	0000005c _do_ctors
00018b44 g     O .bss	00000080 Y3
0001138c g     F .text	000000cc close
000116e4 g     F .text	00000080 alt_load
00010d90 g     F .text	00000224 __pack_d
000036c8 g     F .text	00000014 free
00002644 g     F .text	00000004 __sinit_lock_acquire
0000a2b4 g     F .text	00000144 __multadd
0000a28c g     F .text	00000028 _Bfree
00013524 g     F .text	00000228 alt_hostfs_fstat



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001726 	beq	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00c000b4 	movhi	r3,2
 130:	18e33104 	addi	r3,r3,-29500
 134:	e0bffd17 	ldw	r2,-12(fp)
 138:	100490fa 	slli	r2,r2,3
 13c:	1885883a 	add	r2,r3,r2
 140:	10c00017 	ldw	r3,0(r2)
 144:	010000b4 	movhi	r4,2
 148:	21233104 	addi	r4,r4,-29500
 14c:	e0bffd17 	ldw	r2,-12(fp)
 150:	100490fa 	slli	r2,r2,3
 154:	2085883a 	add	r2,r4,r2
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	103fe31e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffc17 	ldw	r2,-16(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fde06 	br	11c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c01034 	movhi	sp,64
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c4:	d6bab414 	ori	gp,gp,60112
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1cc:	10a19314 	ori	r2,r2,34380

    movhi r3, %hi(__bss_end)
     1d0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d4:	18e3d514 	ori	r3,r3,36692

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	00116e40 	call	116e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	00118880 	call	11888 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <SEND4>:
int16_t	Temp [BLOCK_SIZE];
uint32_t lcode = 0;
uint16_t bitindex = 0;


void SEND4(int data){
     1f4:	defffd04 	addi	sp,sp,-12
     1f8:	dfc00215 	stw	ra,8(sp)
     1fc:	df000115 	stw	fp,4(sp)
     200:	df000104 	addi	fp,sp,4
     204:	e13fff15 	stw	r4,-4(fp)
	write_AD(&data);
     208:	e13fff04 	addi	r4,fp,-4
     20c:	00018840 	call	1884 <write_AD>
}
     210:	e037883a 	mov	sp,fp
     214:	dfc00117 	ldw	ra,4(sp)
     218:	df000017 	ldw	fp,0(sp)
     21c:	dec00204 	addi	sp,sp,8
     220:	f800283a 	ret

00000224 <SEND5>:
void SEND5(int data){
     224:	defffd04 	addi	sp,sp,-12
     228:	dfc00215 	stw	ra,8(sp)
     22c:	df000115 	stw	fp,4(sp)
     230:	df000104 	addi	fp,sp,4
     234:	e13fff15 	stw	r4,-4(fp)
	write_AE(&data);
     238:	e13fff04 	addi	r4,fp,-4
     23c:	000197c0 	call	197c <write_AE>
}
     240:	e037883a 	mov	sp,fp
     244:	dfc00117 	ldw	ra,4(sp)
     248:	df000017 	ldw	fp,0(sp)
     24c:	dec00204 	addi	sp,sp,8
     250:	f800283a 	ret

00000254 <initialization>:

void (*read_format) (JPEG_ENCODER_STRUCTURE *jpeg_encoder_structure, uint8_t *input_ptr);

void initialization(JPEG_ENCODER_STRUCTURE *jpeg, uint32_t image_format, uint32_t image_width, uint32_t image_height){
     254:	defff704 	addi	sp,sp,-36
     258:	dfc00815 	stw	ra,32(sp)
     25c:	df000715 	stw	fp,28(sp)
     260:	dc000615 	stw	r16,24(sp)
     264:	df000604 	addi	fp,sp,24
     268:	e13ffc15 	stw	r4,-16(fp)
     26c:	e17ffd15 	stw	r5,-12(fp)
     270:	e1bffe15 	stw	r6,-8(fp)
     274:	e1ffff15 	stw	r7,-4(fp)

	uint16_t mcu_width, mcu_height, bytes_per_pixel;

	/* 	if(image_format == FOUR_ZERO_ZERO || image_format == FOUR_FOUR_FOUR) */
	/* 	{ */
	jpeg->mcu_width = mcu_width = 8;
     278:	00800204 	movi	r2,8
     27c:	e0bffa0d 	sth	r2,-24(fp)
     280:	e0bffc17 	ldw	r2,-16(fp)
     284:	e0fffa0b 	ldhu	r3,-24(fp)
     288:	10c0000d 	sth	r3,0(r2)
	jpeg->mcu_height = mcu_height = 8;
     28c:	00800204 	movi	r2,8
     290:	e0bffa8d 	sth	r2,-22(fp)
     294:	e0bffc17 	ldw	r2,-16(fp)
     298:	e0fffa8b 	ldhu	r3,-22(fp)
     29c:	10c0008d 	sth	r3,2(r2)

	jpeg->horizontal_mcus =(uint16_t)((image_width + mcu_width - 1) >> 3);
     2a0:	e0fffa0b 	ldhu	r3,-24(fp)
     2a4:	e0bffe17 	ldw	r2,-8(fp)
     2a8:	1885883a 	add	r2,r3,r2
     2ac:	10bfffc4 	addi	r2,r2,-1
     2b0:	1004d0fa 	srli	r2,r2,3
     2b4:	1007883a 	mov	r3,r2
     2b8:	e0bffc17 	ldw	r2,-16(fp)
     2bc:	10c0010d 	sth	r3,4(r2)
	jpeg->vertical_mcus =(uint16_t)((image_height + mcu_height - 1) >> 3);
     2c0:	e0fffa8b 	ldhu	r3,-22(fp)
     2c4:	e0bfff17 	ldw	r2,-4(fp)
     2c8:	1885883a 	add	r2,r3,r2
     2cc:	10bfffc4 	addi	r2,r2,-1
     2d0:	1004d0fa 	srli	r2,r2,3
     2d4:	1007883a 	mov	r3,r2
     2d8:	e0bffc17 	ldw	r2,-16(fp)
     2dc:	10c0018d 	sth	r3,6(r2)
	/* 			bytes_per_pixel = 1; */
	/* 			read_format = read_400_format; */
	/* 		} */
	/* 		else */
	/* 		{ */
	bytes_per_pixel = 3;
     2e0:	008000c4 	movi	r2,3
     2e4:	e0bffb0d 	sth	r2,-20(fp)
	read_format = read_444_format;
     2e8:	00800034 	movhi	r2,0
     2ec:	1082d504 	addi	r2,r2,2900
     2f0:	d0a6e215 	stw	r2,-25720(gp)
	/* 			bytes_per_pixel = 2; */
	/* 			read_format = read_422_format; */
	/* 		} */
	/* 	} */

	jpeg->rows_in_bottom_mcus = (uint16_t) (image_height - (jpeg->vertical_mcus - 1) * mcu_height);
     2f4:	e0bfff17 	ldw	r2,-4(fp)
     2f8:	1021883a 	mov	r16,r2
     2fc:	e0bffc17 	ldw	r2,-16(fp)
     300:	1080018b 	ldhu	r2,6(r2)
     304:	10bfffcc 	andi	r2,r2,65535
     308:	10bfffc4 	addi	r2,r2,-1
     30c:	1007883a 	mov	r3,r2
     310:	e0bffa8b 	ldhu	r2,-22(fp)
     314:	1809883a 	mov	r4,r3
     318:	100b883a 	mov	r5,r2
     31c:	00020000 	call	2000 <__mulsi3>
     320:	8085c83a 	sub	r2,r16,r2
     324:	1007883a 	mov	r3,r2
     328:	e0bffc17 	ldw	r2,-16(fp)
     32c:	10c0028d 	sth	r3,10(r2)
	jpeg->cols_in_right_mcus = (uint16_t) (image_width - (jpeg->horizontal_mcus - 1) * mcu_width);
     330:	e0bffe17 	ldw	r2,-8(fp)
     334:	1021883a 	mov	r16,r2
     338:	e0bffc17 	ldw	r2,-16(fp)
     33c:	1080010b 	ldhu	r2,4(r2)
     340:	10bfffcc 	andi	r2,r2,65535
     344:	10bfffc4 	addi	r2,r2,-1
     348:	1007883a 	mov	r3,r2
     34c:	e0bffa0b 	ldhu	r2,-24(fp)
     350:	1809883a 	mov	r4,r3
     354:	100b883a 	mov	r5,r2
     358:	00020000 	call	2000 <__mulsi3>
     35c:	8085c83a 	sub	r2,r16,r2
     360:	1007883a 	mov	r3,r2
     364:	e0bffc17 	ldw	r2,-16(fp)
     368:	10c0020d 	sth	r3,8(r2)

	jpeg->length_minus_mcu_width = (uint16_t) ((image_width - mcu_width) * bytes_per_pixel);
     36c:	e0bffa0b 	ldhu	r2,-24(fp)
     370:	e0fffe17 	ldw	r3,-8(fp)
     374:	1885c83a 	sub	r2,r3,r2
     378:	1007883a 	mov	r3,r2
     37c:	e0bffb0b 	ldhu	r2,-20(fp)
     380:	1809883a 	mov	r4,r3
     384:	100b883a 	mov	r5,r2
     388:	00020000 	call	2000 <__mulsi3>
     38c:	1007883a 	mov	r3,r2
     390:	e0bffc17 	ldw	r2,-16(fp)
     394:	10c0040d 	sth	r3,16(r2)
	jpeg->length_minus_width = (uint16_t) ((image_width - jpeg->cols_in_right_mcus) * bytes_per_pixel);
     398:	e0bffc17 	ldw	r2,-16(fp)
     39c:	1080020b 	ldhu	r2,8(r2)
     3a0:	10bfffcc 	andi	r2,r2,65535
     3a4:	e0fffe17 	ldw	r3,-8(fp)
     3a8:	1885c83a 	sub	r2,r3,r2
     3ac:	1007883a 	mov	r3,r2
     3b0:	e0bffb0b 	ldhu	r2,-20(fp)
     3b4:	1809883a 	mov	r4,r3
     3b8:	100b883a 	mov	r5,r2
     3bc:	00020000 	call	2000 <__mulsi3>
     3c0:	1007883a 	mov	r3,r2
     3c4:	e0bffc17 	ldw	r2,-16(fp)
     3c8:	10c0048d 	sth	r3,18(r2)

	jpeg->mcu_width_size = (uint16_t) (mcu_width * bytes_per_pixel);
     3cc:	e0fffa0b 	ldhu	r3,-24(fp)
     3d0:	e0bffb0b 	ldhu	r2,-20(fp)
     3d4:	1809883a 	mov	r4,r3
     3d8:	100b883a 	mov	r5,r2
     3dc:	00020000 	call	2000 <__mulsi3>
     3e0:	1007883a 	mov	r3,r2
     3e4:	e0bffc17 	ldw	r2,-16(fp)
     3e8:	10c0058d 	sth	r3,22(r2)

	if (image_format != FOUR_TWO_ZERO){
     3ec:	e0bffd17 	ldw	r2,-12(fp)
     3f0:	10800060 	cmpeqi	r2,r2,1
     3f4:	1000151e 	bne	r2,zero,44c <initialization+0x1f8>
		jpeg->offset = (uint16_t) ((image_width * (mcu_height - 1) - (mcu_width - jpeg->cols_in_right_mcus)) * bytes_per_pixel);
     3f8:	e0bffa8b 	ldhu	r2,-22(fp)
     3fc:	10bfffc4 	addi	r2,r2,-1
     400:	1009883a 	mov	r4,r2
     404:	e17ffe17 	ldw	r5,-8(fp)
     408:	00020000 	call	2000 <__mulsi3>
     40c:	1007883a 	mov	r3,r2
     410:	e0bffc17 	ldw	r2,-16(fp)
     414:	1080020b 	ldhu	r2,8(r2)
     418:	113fffcc 	andi	r4,r2,65535
     41c:	e0bffa0b 	ldhu	r2,-24(fp)
     420:	2085c83a 	sub	r2,r4,r2
     424:	1885883a 	add	r2,r3,r2
     428:	1007883a 	mov	r3,r2
     42c:	e0bffb0b 	ldhu	r2,-20(fp)
     430:	1809883a 	mov	r4,r3
     434:	100b883a 	mov	r5,r2
     438:	00020000 	call	2000 <__mulsi3>
     43c:	1007883a 	mov	r3,r2
     440:	e0bffc17 	ldw	r2,-16(fp)
     444:	10c0060d 	sth	r3,24(r2)
     448:	00001606 	br	4a4 <initialization+0x250>
	}else{
		jpeg->offset = (uint16_t) ((image_width * ((mcu_height >> 1) - 1) - (mcu_width - jpeg->cols_in_right_mcus)) * bytes_per_pixel);
     44c:	e0bffa8b 	ldhu	r2,-22(fp)
     450:	1004d07a 	srli	r2,r2,1
     454:	10bfffcc 	andi	r2,r2,65535
     458:	10bfffc4 	addi	r2,r2,-1
     45c:	1009883a 	mov	r4,r2
     460:	e17ffe17 	ldw	r5,-8(fp)
     464:	00020000 	call	2000 <__mulsi3>
     468:	1007883a 	mov	r3,r2
     46c:	e0bffc17 	ldw	r2,-16(fp)
     470:	1080020b 	ldhu	r2,8(r2)
     474:	113fffcc 	andi	r4,r2,65535
     478:	e0bffa0b 	ldhu	r2,-24(fp)
     47c:	2085c83a 	sub	r2,r4,r2
     480:	1885883a 	add	r2,r3,r2
     484:	1007883a 	mov	r3,r2
     488:	e0bffb0b 	ldhu	r2,-20(fp)
     48c:	1809883a 	mov	r4,r3
     490:	100b883a 	mov	r5,r2
     494:	00020000 	call	2000 <__mulsi3>
     498:	1007883a 	mov	r3,r2
     49c:	e0bffc17 	ldw	r2,-16(fp)
     4a0:	10c0060d 	sth	r3,24(r2)
	}
	jpeg->ldc1 = 0;
     4a4:	e0bffc17 	ldw	r2,-16(fp)
     4a8:	1000068d 	sth	zero,26(r2)
	jpeg->ldc2 = 0;
     4ac:	e0bffc17 	ldw	r2,-16(fp)
     4b0:	1000070d 	sth	zero,28(r2)
	jpeg->ldc3 = 0;
     4b4:	e0bffc17 	ldw	r2,-16(fp)
     4b8:	1000078d 	sth	zero,30(r2)
}
     4bc:	e037883a 	mov	sp,fp
     4c0:	dfc00217 	ldw	ra,8(sp)
     4c4:	df000117 	ldw	fp,4(sp)
     4c8:	dc000017 	ldw	r16,0(sp)
     4cc:	dec00304 	addi	sp,sp,12
     4d0:	f800283a 	ret

000004d4 <encode_image>:

uint8_t* encode_image(uint8_t *input_ptr,uint8_t *output_ptr, uint32_t quality_factor, uint32_t image_format, uint32_t image_width, uint32_t image_height){
     4d4:	defff004 	addi	sp,sp,-64
     4d8:	dfc00f15 	stw	ra,60(sp)
     4dc:	df000e15 	stw	fp,56(sp)
     4e0:	df000e04 	addi	fp,sp,56
     4e4:	e13ffc15 	stw	r4,-16(fp)
     4e8:	e17ffd15 	stw	r5,-12(fp)
     4ec:	e1bffe15 	stw	r6,-8(fp)
     4f0:	e1ffff15 	stw	r7,-4(fp)

	uint16_t i, j;

	JPEG_ENCODER_STRUCTURE JpegStruct;
	JPEG_ENCODER_STRUCTURE *jpeg_encoder_structure = &JpegStruct;
     4f4:	e0bff404 	addi	r2,fp,-48
     4f8:	e0bff315 	stw	r2,-52(fp)

	if (image_format == RGB){
     4fc:	e0bfff17 	ldw	r2,-4(fp)
     500:	10800118 	cmpnei	r2,r2,4
     504:	1000021e 	bne	r2,zero,510 <encode_image+0x3c>
		image_format = FOUR_FOUR_FOUR;
     508:	008000c4 	movi	r2,3
     50c:	e0bfff15 	stw	r2,-4(fp)
		//RGB_2_444 (input_ptr, output_ptr, image_width, image_height);
	}

	/* Initialization of JPEG control structure */
	initialization(jpeg_encoder_structure,image_format,image_width,image_height);
     510:	e13ff317 	ldw	r4,-52(fp)
     514:	e17fff17 	ldw	r5,-4(fp)
     518:	e1800217 	ldw	r6,8(fp)
     51c:	e1c00317 	ldw	r7,12(fp)
     520:	00002540 	call	254 <initialization>

	/* Quantization Table Initialization */
	//initialize_quantization_tables (quality_factor);
	SEND4((jpeg_encoder_structure->vertical_mcus)*(jpeg_encoder_structure->horizontal_mcus));
     524:	e0bff317 	ldw	r2,-52(fp)
     528:	1080018b 	ldhu	r2,6(r2)
     52c:	10ffffcc 	andi	r3,r2,65535
     530:	e0bff317 	ldw	r2,-52(fp)
     534:	1080010b 	ldhu	r2,4(r2)
     538:	10bfffcc 	andi	r2,r2,65535
     53c:	1809883a 	mov	r4,r3
     540:	100b883a 	mov	r5,r2
     544:	00020000 	call	2000 <__mulsi3>
     548:	1009883a 	mov	r4,r2
     54c:	00001f40 	call	1f4 <SEND4>
	SEND4(quality_factor);
     550:	e0bffe17 	ldw	r2,-8(fp)
     554:	1009883a 	mov	r4,r2
     558:	00001f40 	call	1f4 <SEND4>

	/* Writing Marker Data */
	//output_ptr = write_markers (output_ptr, image_format, image_width, image_height);
	SEND5(image_width);
     55c:	e0800217 	ldw	r2,8(fp)
     560:	1009883a 	mov	r4,r2
     564:	00002240 	call	224 <SEND5>
	SEND5(image_height);
     568:	e0800317 	ldw	r2,12(fp)
     56c:	1009883a 	mov	r4,r2
     570:	00002240 	call	224 <SEND5>
	SEND5((jpeg_encoder_structure->vertical_mcus)*(jpeg_encoder_structure->horizontal_mcus));
     574:	e0bff317 	ldw	r2,-52(fp)
     578:	1080018b 	ldhu	r2,6(r2)
     57c:	10ffffcc 	andi	r3,r2,65535
     580:	e0bff317 	ldw	r2,-52(fp)
     584:	1080010b 	ldhu	r2,4(r2)
     588:	10bfffcc 	andi	r2,r2,65535
     58c:	1809883a 	mov	r4,r3
     590:	100b883a 	mov	r5,r2
     594:	00020000 	call	2000 <__mulsi3>
     598:	1009883a 	mov	r4,r2
     59c:	00002240 	call	224 <SEND5>

	//asm("dummy");
	for (i=1; i<=jpeg_encoder_structure->vertical_mcus; i++){
     5a0:	00800044 	movi	r2,1
     5a4:	e0bff20d 	sth	r2,-56(fp)
     5a8:	00004d06 	br	6e0 <encode_image+0x20c>

		if (i < jpeg_encoder_structure->vertical_mcus){
     5ac:	e0bff317 	ldw	r2,-52(fp)
     5b0:	1080018b 	ldhu	r2,6(r2)
     5b4:	10bfffcc 	andi	r2,r2,65535
     5b8:	e0fff20b 	ldhu	r3,-56(fp)
     5bc:	1880052e 	bgeu	r3,r2,5d4 <encode_image+0x100>
			jpeg_encoder_structure->rows = jpeg_encoder_structure->mcu_height;
     5c0:	e0bff317 	ldw	r2,-52(fp)
     5c4:	10c0008b 	ldhu	r3,2(r2)
     5c8:	e0bff317 	ldw	r2,-52(fp)
     5cc:	10c0030d 	sth	r3,12(r2)
     5d0:	00000406 	br	5e4 <encode_image+0x110>
		}else{
			jpeg_encoder_structure->rows = jpeg_encoder_structure->rows_in_bottom_mcus;
     5d4:	e0bff317 	ldw	r2,-52(fp)
     5d8:	10c0028b 	ldhu	r3,10(r2)
     5dc:	e0bff317 	ldw	r2,-52(fp)
     5e0:	10c0030d 	sth	r3,12(r2)
		}

		for (j=1; j<=jpeg_encoder_structure->horizontal_mcus; j++){
     5e4:	00800044 	movi	r2,1
     5e8:	e0bff28d 	sth	r2,-54(fp)
     5ec:	00002e06 	br	6a8 <encode_image+0x1d4>

			if (j < jpeg_encoder_structure->horizontal_mcus){
     5f0:	e0bff317 	ldw	r2,-52(fp)
     5f4:	1080010b 	ldhu	r2,4(r2)
     5f8:	10bfffcc 	andi	r2,r2,65535
     5fc:	e0fff28b 	ldhu	r3,-54(fp)
     600:	1880092e 	bgeu	r3,r2,628 <encode_image+0x154>
				jpeg_encoder_structure->cols = jpeg_encoder_structure->mcu_width;
     604:	e0bff317 	ldw	r2,-52(fp)
     608:	10c0000b 	ldhu	r3,0(r2)
     60c:	e0bff317 	ldw	r2,-52(fp)
     610:	10c0038d 	sth	r3,14(r2)
				jpeg_encoder_structure->incr = jpeg_encoder_structure->length_minus_mcu_width;
     614:	e0bff317 	ldw	r2,-52(fp)
     618:	10c0040b 	ldhu	r3,16(r2)
     61c:	e0bff317 	ldw	r2,-52(fp)
     620:	10c0050d 	sth	r3,20(r2)
     624:	00000806 	br	648 <encode_image+0x174>

			}else{
				jpeg_encoder_structure->cols = jpeg_encoder_structure->cols_in_right_mcus;
     628:	e0bff317 	ldw	r2,-52(fp)
     62c:	10c0020b 	ldhu	r3,8(r2)
     630:	e0bff317 	ldw	r2,-52(fp)
     634:	10c0038d 	sth	r3,14(r2)
				jpeg_encoder_structure->incr = jpeg_encoder_structure->length_minus_width;
     638:	e0bff317 	ldw	r2,-52(fp)
     63c:	10c0048b 	ldhu	r3,18(r2)
     640:	e0bff317 	ldw	r2,-52(fp)
     644:	10c0050d 	sth	r3,20(r2)
			}

			// Nuwan
			//read_format(jpeg_encoder_structure, input_ptr);
			printf("sending %d -> %d of %d\n", i, j, jpeg_encoder_structure->vertical_mcus);
     648:	e17ff20b 	ldhu	r5,-56(fp)
     64c:	e0fff28b 	ldhu	r3,-54(fp)
     650:	e0bff317 	ldw	r2,-52(fp)
     654:	1080018b 	ldhu	r2,6(r2)
     658:	10bfffcc 	andi	r2,r2,65535
     65c:	01000074 	movhi	r4,1
     660:	21124304 	addi	r4,r4,18700
     664:	180d883a 	mov	r6,r3
     668:	100f883a 	mov	r7,r2
     66c:	00041140 	call	4114 <printf>
			read_444_format(jpeg_encoder_structure, input_ptr);
     670:	e13ff317 	ldw	r4,-52(fp)
     674:	e17ffc17 	ldw	r5,-16(fp)
     678:	0000b540 	call	b54 <read_444_format>
			ledBlink(1);
     67c:	01000044 	movi	r4,1
     680:	0001fa40 	call	1fa4 <ledBlink>
			//--------

			/* Encode the data in MCU */
			//output_ptr = encodeMCU (jpeg_encoder_structure, image_format, output_ptr);

			input_ptr += jpeg_encoder_structure->mcu_width_size;
     684:	e0bff317 	ldw	r2,-52(fp)
     688:	1080058b 	ldhu	r2,22(r2)
     68c:	10bfffcc 	andi	r2,r2,65535
     690:	e0fffc17 	ldw	r3,-16(fp)
     694:	1885883a 	add	r2,r3,r2
     698:	e0bffc15 	stw	r2,-16(fp)
			jpeg_encoder_structure->rows = jpeg_encoder_structure->mcu_height;
		}else{
			jpeg_encoder_structure->rows = jpeg_encoder_structure->rows_in_bottom_mcus;
		}

		for (j=1; j<=jpeg_encoder_structure->horizontal_mcus; j++){
     69c:	e0bff28b 	ldhu	r2,-54(fp)
     6a0:	10800044 	addi	r2,r2,1
     6a4:	e0bff28d 	sth	r2,-54(fp)
     6a8:	e0bff317 	ldw	r2,-52(fp)
     6ac:	1080010b 	ldhu	r2,4(r2)
     6b0:	10ffffcc 	andi	r3,r2,65535
     6b4:	e0bff28b 	ldhu	r2,-54(fp)
     6b8:	18bfcd2e 	bgeu	r3,r2,5f0 <encode_image+0x11c>
			//output_ptr = encodeMCU (jpeg_encoder_structure, image_format, output_ptr);

			input_ptr += jpeg_encoder_structure->mcu_width_size;
		}

		input_ptr += jpeg_encoder_structure->offset;
     6bc:	e0bff317 	ldw	r2,-52(fp)
     6c0:	1080060b 	ldhu	r2,24(r2)
     6c4:	10bfffcc 	andi	r2,r2,65535
     6c8:	e0fffc17 	ldw	r3,-16(fp)
     6cc:	1885883a 	add	r2,r3,r2
     6d0:	e0bffc15 	stw	r2,-16(fp)
	SEND5(image_width);
	SEND5(image_height);
	SEND5((jpeg_encoder_structure->vertical_mcus)*(jpeg_encoder_structure->horizontal_mcus));

	//asm("dummy");
	for (i=1; i<=jpeg_encoder_structure->vertical_mcus; i++){
     6d4:	e0bff20b 	ldhu	r2,-56(fp)
     6d8:	10800044 	addi	r2,r2,1
     6dc:	e0bff20d 	sth	r2,-56(fp)
     6e0:	e0bff317 	ldw	r2,-52(fp)
     6e4:	1080018b 	ldhu	r2,6(r2)
     6e8:	10ffffcc 	andi	r3,r2,65535
     6ec:	e0bff20b 	ldhu	r2,-56(fp)
     6f0:	18bfae2e 	bgeu	r3,r2,5ac <encode_image+0xd8>
		input_ptr += jpeg_encoder_structure->offset;
	}

	/* Close Routine */
	//output_ptr = close_bitstream (output_ptr);
	return output_ptr;
     6f4:	e0bffd17 	ldw	r2,-12(fp)
}
     6f8:	e037883a 	mov	sp,fp
     6fc:	dfc00117 	ldw	ra,4(sp)
     700:	df000017 	ldw	fp,0(sp)
     704:	dec00204 	addi	sp,sp,8
     708:	f800283a 	ret

0000070c <encodeMCU>:

uint8_t* encodeMCU(JPEG_ENCODER_STRUCTURE *jpeg_encoder_structure, uint32_t image_format, uint8_t *output_ptr)
{
     70c:	defffc04 	addi	sp,sp,-16
     710:	df000315 	stw	fp,12(sp)
     714:	df000304 	addi	fp,sp,12
     718:	e13ffd15 	stw	r4,-12(fp)
     71c:	e17ffe15 	stw	r5,-8(fp)
     720:	e1bfff15 	stw	r6,-4(fp)
		//levelshift (CR);
		//DCT (CR);
		//quantization (CR, ICqt);
		//output_ptr = huffman (jpeg_encoder_structure, 3, output_ptr);
	}
	return output_ptr;
     724:	e0bfff17 	ldw	r2,-4(fp)
}
     728:	e037883a 	mov	sp,fp
     72c:	df000017 	ldw	fp,0(sp)
     730:	dec00104 	addi	sp,sp,4
     734:	f800283a 	ret

00000738 <SEND6>:
#include "encoder.h"

void processLoop();
void* jemalloc(size_t size);

void SEND6(int data){
     738:	defffd04 	addi	sp,sp,-12
     73c:	dfc00215 	stw	ra,8(sp)
     740:	df000115 	stw	fp,4(sp)
     744:	df000104 	addi	fp,sp,4
     748:	e13fff15 	stw	r4,-4(fp)
	write_AF(&data);
     74c:	e13fff04 	addi	r4,fp,-4
     750:	0001a740 	call	1a74 <write_AF>
}
     754:	e037883a 	mov	sp,fp
     758:	dfc00117 	ldw	ra,4(sp)
     75c:	df000017 	ldw	fp,0(sp)
     760:	dec00204 	addi	sp,sp,8
     764:	f800283a 	ret

00000768 <main>:

int main(int argc, char *argv[]){
     768:	defffc04 	addi	sp,sp,-16
     76c:	dfc00315 	stw	ra,12(sp)
     770:	df000215 	stw	fp,8(sp)
     774:	df000204 	addi	fp,sp,8
     778:	e13ffe15 	stw	r4,-8(fp)
     77c:	e17fff15 	stw	r5,-4(fp)
	delay(3000);
     780:	0102ee04 	movi	r4,3000
     784:	0001ed00 	call	1ed0 <delay>
	printf("Hardware JSoC_A begins\n\n");
     788:	01000074 	movhi	r4,1
     78c:	21124904 	addi	r4,r4,18724
     790:	00041d40 	call	41d4 <puts>

	init_AB_0();	// SEND
     794:	00015240 	call	1524 <init_AB_0>
	init_AB_1();	// SEND
     798:	00016180 	call	1618 <init_AB_1>
	init_AB_2();	// SEND
     79c:	00017100 	call	1710 <init_AB_2>
	init_AD();		// SEND
     7a0:	00018080 	call	1808 <init_AD>
	init_AE();		// SEND
     7a4:	00019000 	call	1900 <init_AE>
	init_AF();		// SEND6
     7a8:	00019f80 	call	19f8 <init_AF>

	ledBlink(1);
     7ac:	01000044 	movi	r4,1
     7b0:	0001fa40 	call	1fa4 <ledBlink>
	processLoop();
     7b4:	00007d00 	call	7d0 <processLoop>

	return 0;
     7b8:	0005883a 	mov	r2,zero
}
     7bc:	e037883a 	mov	sp,fp
     7c0:	dfc00117 	ldw	ra,4(sp)
     7c4:	df000017 	ldw	fp,0(sp)
     7c8:	dec00204 	addi	sp,sp,8
     7cc:	f800283a 	ret

000007d0 <processLoop>:

void processLoop(){
     7d0:	deffa604 	addi	sp,sp,-360
     7d4:	dfc05915 	stw	ra,356(sp)
     7d8:	df005815 	stw	fp,352(sp)
     7dc:	df005804 	addi	fp,sp,352

	uint8_t *output_ptr;
	//uint32_t quality_factor, image_format, image_width, image_height;
	int quality_factor, image_format, image_width, image_height; 	// Nuwan

	fp = fopen("/mnt/host/files/param.txt", "r");
     7e0:	01000074 	movhi	r4,1
     7e4:	21124f04 	addi	r4,r4,18748
     7e8:	01400074 	movhi	r5,1
     7ec:	29525604 	addi	r5,r5,18776
     7f0:	00027ac0 	call	27ac <fopen>
     7f4:	e0bfad15 	stw	r2,-332(fp)

	printf("File Open:\n");
     7f8:	01000074 	movhi	r4,1
     7fc:	21125704 	addi	r4,r4,18780
     800:	00041d40 	call	41d4 <puts>

	while (fscanf(fp, "%s", input_file_name) != EOF){
     804:	00008f06 	br	a44 <processLoop+0x274>
		input_file_name_ptr = input_file_name;
     808:	e0bfb104 	addi	r2,fp,-316
     80c:	e0bfaa15 	stw	r2,-344(fp)
		output_file_name_ptr = output_file_name;
     810:	e0bfd684 	addi	r2,fp,-166
     814:	e0bfae15 	stw	r2,-328(fp)

		ledBlink(1);
     818:	01000044 	movi	r4,1
     81c:	0001fa40 	call	1fa4 <ledBlink>
		printf("FileName: %s\n", input_file_name);
     820:	e0bfb104 	addi	r2,fp,-316
     824:	01000074 	movhi	r4,1
     828:	21125a04 	addi	r4,r4,18792
     82c:	100b883a 	mov	r5,r2
     830:	00041140 	call	4114 <printf>

		while(*input_file_name_ptr != '.'){
     834:	00000a06 	br	860 <processLoop+0x90>
			SEND6(*input_file_name_ptr);
     838:	e0bfaa17 	ldw	r2,-344(fp)
     83c:	10800003 	ldbu	r2,0(r2)
     840:	10803fcc 	andi	r2,r2,255
     844:	1080201c 	xori	r2,r2,128
     848:	10bfe004 	addi	r2,r2,-128
     84c:	1009883a 	mov	r4,r2
     850:	00007380 	call	738 <SEND6>
			input_file_name_ptr++;
     854:	e0bfaa17 	ldw	r2,-344(fp)
     858:	10800044 	addi	r2,r2,1
     85c:	e0bfaa15 	stw	r2,-344(fp)
		output_file_name_ptr = output_file_name;

		ledBlink(1);
		printf("FileName: %s\n", input_file_name);

		while(*input_file_name_ptr != '.'){
     860:	e0bfaa17 	ldw	r2,-344(fp)
     864:	10800003 	ldbu	r2,0(r2)
     868:	10803fcc 	andi	r2,r2,255
     86c:	1080201c 	xori	r2,r2,128
     870:	10bfe004 	addi	r2,r2,-128
     874:	10800b98 	cmpnei	r2,r2,46
     878:	103fef1e 	bne	r2,zero,838 <processLoop+0x68>
			SEND6(*input_file_name_ptr);
			input_file_name_ptr++;
		}
		ledBlink(1);
     87c:	01000044 	movi	r4,1
     880:	0001fa40 	call	1fa4 <ledBlink>
		SEND6('\0');
     884:	0009883a 	mov	r4,zero
     888:	00007380 	call	738 <SEND6>

		fscanf(fp, "%d", &quality_factor);	// 90
     88c:	e0bffc04 	addi	r2,fp,-16
     890:	e13fad17 	ldw	r4,-332(fp)
     894:	01400074 	movhi	r5,1
     898:	29525e04 	addi	r5,r5,18808
     89c:	100d883a 	mov	r6,r2
     8a0:	0002e500 	call	2e50 <fscanf>
		fscanf(fp, "%d", &image_format);		// 0
     8a4:	e0bffd04 	addi	r2,fp,-12
     8a8:	e13fad17 	ldw	r4,-332(fp)
     8ac:	01400074 	movhi	r5,1
     8b0:	29525e04 	addi	r5,r5,18808
     8b4:	100d883a 	mov	r6,r2
     8b8:	0002e500 	call	2e50 <fscanf>
		fscanf(fp, "%d", &image_width);		// 128
     8bc:	e0bffe04 	addi	r2,fp,-8
     8c0:	e13fad17 	ldw	r4,-332(fp)
     8c4:	01400074 	movhi	r5,1
     8c8:	29525e04 	addi	r5,r5,18808
     8cc:	100d883a 	mov	r6,r2
     8d0:	0002e500 	call	2e50 <fscanf>
		fscanf(fp, "%d", &image_height);		// 128
     8d4:	e0bfff04 	addi	r2,fp,-4
     8d8:	e13fad17 	ldw	r4,-332(fp)
     8dc:	01400074 	movhi	r5,1
     8e0:	29525e04 	addi	r5,r5,18808
     8e4:	100d883a 	mov	r6,r2
     8e8:	0002e500 	call	2e50 <fscanf>

		if (image_format == FOUR_ZERO_ZERO){
     8ec:	e0bffd17 	ldw	r2,-12(fp)
     8f0:	1000071e 	bne	r2,zero,910 <processLoop+0x140>
			image_size = image_width * image_height;
     8f4:	e0fffe17 	ldw	r3,-8(fp)
     8f8:	e0bfff17 	ldw	r2,-4(fp)
     8fc:	1809883a 	mov	r4,r3
     900:	100b883a 	mov	r5,r2
     904:	00020000 	call	2000 <__mulsi3>
     908:	e0bfab15 	stw	r2,-340(fp)
     90c:	00002406 	br	9a0 <processLoop+0x1d0>
		} else if (image_format == FOUR_TWO_ZERO){
     910:	e0bffd17 	ldw	r2,-12(fp)
     914:	10800058 	cmpnei	r2,r2,1
     918:	10000c1e 	bne	r2,zero,94c <processLoop+0x17c>
			image_size = (image_width * image_height * 3) >> 1;
     91c:	e0fffe17 	ldw	r3,-8(fp)
     920:	e0bfff17 	ldw	r2,-4(fp)
     924:	1809883a 	mov	r4,r3
     928:	100b883a 	mov	r5,r2
     92c:	00020000 	call	2000 <__mulsi3>
     930:	1007883a 	mov	r3,r2
     934:	1805883a 	mov	r2,r3
     938:	1085883a 	add	r2,r2,r2
     93c:	10c5883a 	add	r2,r2,r3
     940:	1005d07a 	srai	r2,r2,1
     944:	e0bfab15 	stw	r2,-340(fp)
     948:	00001506 	br	9a0 <processLoop+0x1d0>
		}else if (image_format == FOUR_TWO_TWO){
     94c:	e0bffd17 	ldw	r2,-12(fp)
     950:	10800098 	cmpnei	r2,r2,2
     954:	1000081e 	bne	r2,zero,978 <processLoop+0x1a8>
			image_size = image_width * image_height * 2;
     958:	e0fffe17 	ldw	r3,-8(fp)
     95c:	e0bfff17 	ldw	r2,-4(fp)
     960:	1809883a 	mov	r4,r3
     964:	100b883a 	mov	r5,r2
     968:	00020000 	call	2000 <__mulsi3>
     96c:	1085883a 	add	r2,r2,r2
     970:	e0bfab15 	stw	r2,-340(fp)
     974:	00000a06 	br	9a0 <processLoop+0x1d0>
		}else{
			image_size = image_width * image_height * 3;
     978:	e0fffe17 	ldw	r3,-8(fp)
     97c:	e0bfff17 	ldw	r2,-4(fp)
     980:	1809883a 	mov	r4,r3
     984:	100b883a 	mov	r5,r2
     988:	00020000 	call	2000 <__mulsi3>
     98c:	1007883a 	mov	r3,r2
     990:	1805883a 	mov	r2,r3
     994:	1085883a 	add	r2,r2,r2
     998:	10c5883a 	add	r2,r2,r3
     99c:	e0bfab15 	stw	r2,-340(fp)
		}

		printf("Quality: %d, width: %d, height: %d\n\n", quality_factor, image_width, image_height);
     9a0:	e17ffc17 	ldw	r5,-16(fp)
     9a4:	e0fffe17 	ldw	r3,-8(fp)
     9a8:	e0bfff17 	ldw	r2,-4(fp)
     9ac:	01000074 	movhi	r4,1
     9b0:	21125f04 	addi	r4,r4,18812
     9b4:	180d883a 	mov	r6,r3
     9b8:	100f883a 	mov	r7,r2
     9bc:	00041140 	call	4114 <printf>
		#define		FOUR_TWO_TWO			2
		#define		FOUR_FOUR_FOUR			3
		#define		RGB						4
		*/

		input=(uint8_t *)jemalloc(2500000*sizeof(uint8_t));
     9c0:	010009b4 	movhi	r4,38
     9c4:	21096804 	addi	r4,r4,9632
     9c8:	0000a940 	call	a94 <jemalloc>
     9cc:	e0bfaf15 	stw	r2,-324(fp)
		fpt = fopen(input_file_name, "rb");
     9d0:	e0bfb104 	addi	r2,fp,-316
     9d4:	1009883a 	mov	r4,r2
     9d8:	01400074 	movhi	r5,1
     9dc:	29526904 	addi	r5,r5,18852
     9e0:	00027ac0 	call	27ac <fopen>
     9e4:	e0bfb015 	stw	r2,-320(fp)
		fread(input, 1, image_size, fpt);
     9e8:	e13faf17 	ldw	r4,-324(fp)
     9ec:	01400044 	movi	r5,1
     9f0:	e1bfab17 	ldw	r6,-340(fp)
     9f4:	e1ffb017 	ldw	r7,-320(fp)
     9f8:	0002a040 	call	2a04 <fread>
		fclose(fpt);
     9fc:	e13fb017 	ldw	r4,-320(fp)
     a00:	00021640 	call	2164 <fclose>

		//output=(uint8_t *)jemalloc(250000*sizeof(uint8_t*));
		//output_ptr = output;

		output_ptr = encode_image(input, output_ptr, quality_factor, image_format, image_width, image_height);
     a04:	e0bffc17 	ldw	r2,-16(fp)
     a08:	1007883a 	mov	r3,r2
     a0c:	e0bffd17 	ldw	r2,-12(fp)
     a10:	e13ffe17 	ldw	r4,-8(fp)
     a14:	200b883a 	mov	r5,r4
     a18:	e13fff17 	ldw	r4,-4(fp)
     a1c:	d9400015 	stw	r5,0(sp)
     a20:	d9000115 	stw	r4,4(sp)
     a24:	e13faf17 	ldw	r4,-324(fp)
     a28:	e17fac17 	ldw	r5,-336(fp)
     a2c:	180d883a 	mov	r6,r3
     a30:	100f883a 	mov	r7,r2
     a34:	00004d40 	call	4d4 <encode_image>
     a38:	e0bfac15 	stw	r2,-336(fp)

		//fpt = fopen (output_file_name, "wb");
		//fwrite (output, 1, output_ptr - output, fpt);
		//fclose (fpt);
		free (input);
     a3c:	e13faf17 	ldw	r4,-324(fp)
     a40:	00036c80 	call	36c8 <free>

	fp = fopen("/mnt/host/files/param.txt", "r");

	printf("File Open:\n");

	while (fscanf(fp, "%s", input_file_name) != EOF){
     a44:	e0bfb104 	addi	r2,fp,-316
     a48:	e13fad17 	ldw	r4,-332(fp)
     a4c:	01400074 	movhi	r5,1
     a50:	29526a04 	addi	r5,r5,18856
     a54:	100d883a 	mov	r6,r2
     a58:	0002e500 	call	2e50 <fscanf>
     a5c:	10bfffd8 	cmpnei	r2,r2,-1
     a60:	103f691e 	bne	r2,zero,808 <processLoop+0x38>
		//xt_iss_profile_disable();
		//while(!ISDONE());
		//xt_iss_profile_enable();
	}

	SEND6(0);
     a64:	0009883a 	mov	r4,zero
     a68:	00007380 	call	738 <SEND6>
	fclose (fp);
     a6c:	e13fad17 	ldw	r4,-332(fp)
     a70:	00021640 	call	2164 <fclose>

	//while(1);
	printf("\n Done ! \n");
     a74:	01000074 	movhi	r4,1
     a78:	21126b04 	addi	r4,r4,18860
     a7c:	00041d40 	call	41d4 <puts>
}
     a80:	e037883a 	mov	sp,fp
     a84:	dfc00117 	ldw	ra,4(sp)
     a88:	df000017 	ldw	fp,0(sp)
     a8c:	dec00204 	addi	sp,sp,8
     a90:	f800283a 	ret

00000a94 <jemalloc>:

void* jemalloc(size_t size){
     a94:	defffd04 	addi	sp,sp,-12
     a98:	dfc00215 	stw	ra,8(sp)
     a9c:	df000115 	stw	fp,4(sp)
     aa0:	df000104 	addi	fp,sp,4
     aa4:	e13fff15 	stw	r4,-4(fp)
	return (malloc(size));
     aa8:	e13fff17 	ldw	r4,-4(fp)
     aac:	00036b40 	call	36b4 <malloc>
}
     ab0:	e037883a 	mov	sp,fp
     ab4:	dfc00117 	ldw	ra,4(sp)
     ab8:	df000017 	ldw	fp,0(sp)
     abc:	dec00204 	addi	sp,sp,8
     ac0:	f800283a 	ret

00000ac4 <SEND1>:
#include "src/IOMap.h"
#include "src/utility.h"

#include <stdint.h>

void SEND1(int data){
     ac4:	defffd04 	addi	sp,sp,-12
     ac8:	dfc00215 	stw	ra,8(sp)
     acc:	df000115 	stw	fp,4(sp)
     ad0:	df000104 	addi	fp,sp,4
     ad4:	e13fff15 	stw	r4,-4(fp)
	write_AB_0(&data);
     ad8:	e13fff04 	addi	r4,fp,-4
     adc:	00015a00 	call	15a0 <write_AB_0>
}
     ae0:	e037883a 	mov	sp,fp
     ae4:	dfc00117 	ldw	ra,4(sp)
     ae8:	df000017 	ldw	fp,0(sp)
     aec:	dec00204 	addi	sp,sp,8
     af0:	f800283a 	ret

00000af4 <SEND2>:
void SEND2(int data){
     af4:	defffd04 	addi	sp,sp,-12
     af8:	dfc00215 	stw	ra,8(sp)
     afc:	df000115 	stw	fp,4(sp)
     b00:	df000104 	addi	fp,sp,4
     b04:	e13fff15 	stw	r4,-4(fp)
	write_AB_1(&data);
     b08:	e13fff04 	addi	r4,fp,-4
     b0c:	00016940 	call	1694 <write_AB_1>
}
     b10:	e037883a 	mov	sp,fp
     b14:	dfc00117 	ldw	ra,4(sp)
     b18:	df000017 	ldw	fp,0(sp)
     b1c:	dec00204 	addi	sp,sp,8
     b20:	f800283a 	ret

00000b24 <SEND3>:
void SEND3(int data){
     b24:	defffd04 	addi	sp,sp,-12
     b28:	dfc00215 	stw	ra,8(sp)
     b2c:	df000115 	stw	fp,4(sp)
     b30:	df000104 	addi	fp,sp,4
     b34:	e13fff15 	stw	r4,-4(fp)
	write_AB_2(&data);
     b38:	e13fff04 	addi	r4,fp,-4
     b3c:	000178c0 	call	178c <write_AB_2>
}
     b40:	e037883a 	mov	sp,fp
     b44:	dfc00117 	ldw	ra,4(sp)
     b48:	df000017 	ldw	fp,0(sp)
     b4c:	dec00204 	addi	sp,sp,8
     b50:	f800283a 	ret

00000b54 <read_444_format>:
}
}
}
*/
void read_444_format(JPEG_ENCODER_STRUCTURE *jpeg_encoder_structure, uint8_t *input_ptr)
{
     b54:	defff304 	addi	sp,sp,-52
     b58:	dfc00c15 	stw	ra,48(sp)
     b5c:	df000b15 	stw	fp,44(sp)
     b60:	dc000a15 	stw	r16,40(sp)
     b64:	df000a04 	addi	fp,sp,40
     b68:	e13ffe15 	stw	r4,-8(fp)
     b6c:	e17fff15 	stw	r5,-4(fp)
	//int16_t *CR_Ptr = CR;

	uint8_t R, G, B;
	int32_t Y, Cb, Cr;

	uint16_t rows = jpeg_encoder_structure->rows;
     b70:	e0bffe17 	ldw	r2,-8(fp)
     b74:	1080030b 	ldhu	r2,12(r2)
     b78:	e0bffb0d 	sth	r2,-20(fp)
	uint16_t cols = jpeg_encoder_structure->cols;
     b7c:	e0bffe17 	ldw	r2,-8(fp)
     b80:	1080038b 	ldhu	r2,14(r2)
     b84:	e0bffb8d 	sth	r2,-18(fp)
	uint16_t incr = jpeg_encoder_structure->incr;
     b88:	e0bffe17 	ldw	r2,-8(fp)
     b8c:	1080050b 	ldhu	r2,20(r2)
     b90:	e0bffc0d 	sth	r2,-16(fp)

	//printf("write 444_format: begin\n");

	for (i=rows; i>0; i--){
     b94:	e0bffb0b 	ldhu	r2,-20(fp)
     b98:	e0bff615 	stw	r2,-40(fp)
     b9c:	0000d806 	br	f00 <read_444_format+0x3ac>
		for (j=cols; j>0; j--){
     ba0:	e0bffb8b 	ldhu	r2,-18(fp)
     ba4:	e0bff715 	stw	r2,-36(fp)
     ba8:	00006606 	br	d44 <read_444_format+0x1f0>

			R = *input_ptr++;
     bac:	e0bfff17 	ldw	r2,-4(fp)
     bb0:	10800003 	ldbu	r2,0(r2)
     bb4:	e0bffc85 	stb	r2,-14(fp)
     bb8:	e0bfff17 	ldw	r2,-4(fp)
     bbc:	10800044 	addi	r2,r2,1
     bc0:	e0bfff15 	stw	r2,-4(fp)
			G = *input_ptr++;
     bc4:	e0bfff17 	ldw	r2,-4(fp)
     bc8:	10800003 	ldbu	r2,0(r2)
     bcc:	e0bffcc5 	stb	r2,-13(fp)
     bd0:	e0bfff17 	ldw	r2,-4(fp)
     bd4:	10800044 	addi	r2,r2,1
     bd8:	e0bfff15 	stw	r2,-4(fp)
			B = *input_ptr++;
     bdc:	e0bfff17 	ldw	r2,-4(fp)
     be0:	10800003 	ldbu	r2,0(r2)
     be4:	e0bffd05 	stb	r2,-12(fp)
     be8:	e0bfff17 	ldw	r2,-4(fp)
     bec:	10800044 	addi	r2,r2,1
     bf0:	e0bfff15 	stw	r2,-4(fp)

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
     bf4:	e0bffc83 	ldbu	r2,-14(fp)
     bf8:	1009883a 	mov	r4,r2
     bfc:	01401344 	movi	r5,77
     c00:	00020000 	call	2000 <__mulsi3>
     c04:	1021883a 	mov	r16,r2
     c08:	e0bffcc3 	ldbu	r2,-13(fp)
     c0c:	1009883a 	mov	r4,r2
     c10:	01402584 	movi	r5,150
     c14:	00020000 	call	2000 <__mulsi3>
     c18:	80a1883a 	add	r16,r16,r2
     c1c:	e0bffd03 	ldbu	r2,-12(fp)
     c20:	1009883a 	mov	r4,r2
     c24:	01400744 	movi	r5,29
     c28:	00020000 	call	2000 <__mulsi3>
     c2c:	8085883a 	add	r2,r16,r2
     c30:	1005d23a 	srai	r2,r2,8
     c34:	e0bff815 	stw	r2,-32(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
     c38:	e0bffc83 	ldbu	r2,-14(fp)
     c3c:	1009883a 	mov	r4,r2
     c40:	017ff544 	movi	r5,-43
     c44:	00020000 	call	2000 <__mulsi3>
     c48:	1021883a 	mov	r16,r2
     c4c:	e0bffcc3 	ldbu	r2,-13(fp)
     c50:	1009883a 	mov	r4,r2
     c54:	017feac4 	movi	r5,-85
     c58:	00020000 	call	2000 <__mulsi3>
     c5c:	8087883a 	add	r3,r16,r2
     c60:	e0bffd03 	ldbu	r2,-12(fp)
     c64:	100491fa 	slli	r2,r2,7
     c68:	1885883a 	add	r2,r3,r2
     c6c:	1005d23a 	srai	r2,r2,8
     c70:	10802004 	addi	r2,r2,128
     c74:	e0bff915 	stw	r2,-28(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
     c78:	e0bffc83 	ldbu	r2,-14(fp)
     c7c:	102091fa 	slli	r16,r2,7
     c80:	e0bffcc3 	ldbu	r2,-13(fp)
     c84:	1009883a 	mov	r4,r2
     c88:	017fe544 	movi	r5,-107
     c8c:	00020000 	call	2000 <__mulsi3>
     c90:	80a1883a 	add	r16,r16,r2
     c94:	e0bffd03 	ldbu	r2,-12(fp)
     c98:	1009883a 	mov	r4,r2
     c9c:	017ffac4 	movi	r5,-21
     ca0:	00020000 	call	2000 <__mulsi3>
     ca4:	8085883a 	add	r2,r16,r2
     ca8:	1005d23a 	srai	r2,r2,8
     cac:	10802004 	addi	r2,r2,128
     cb0:	e0bffa15 	stw	r2,-24(fp)

			if (Y < 0){
     cb4:	e0bff817 	ldw	r2,-32(fp)
     cb8:	1000020e 	bge	r2,zero,cc4 <read_444_format+0x170>
				Y = 0;
     cbc:	e03ff815 	stw	zero,-32(fp)
     cc0:	00000506 	br	cd8 <read_444_format+0x184>
			} else if (Y > 255){
     cc4:	e0bff817 	ldw	r2,-32(fp)
     cc8:	10804010 	cmplti	r2,r2,256
     ccc:	1000021e 	bne	r2,zero,cd8 <read_444_format+0x184>
				Y = 255;
     cd0:	00803fc4 	movi	r2,255
     cd4:	e0bff815 	stw	r2,-32(fp)
			}

			if (Cb < 0){
     cd8:	e0bff917 	ldw	r2,-28(fp)
     cdc:	1000020e 	bge	r2,zero,ce8 <read_444_format+0x194>
				Cb = 0;
     ce0:	e03ff915 	stw	zero,-28(fp)
     ce4:	00000506 	br	cfc <read_444_format+0x1a8>
			} else if (Cb > 255){
     ce8:	e0bff917 	ldw	r2,-28(fp)
     cec:	10804010 	cmplti	r2,r2,256
     cf0:	1000021e 	bne	r2,zero,cfc <read_444_format+0x1a8>
				Cb = 255;
     cf4:	00803fc4 	movi	r2,255
     cf8:	e0bff915 	stw	r2,-28(fp)
			}

			if (Cr < 0){
     cfc:	e0bffa17 	ldw	r2,-24(fp)
     d00:	1000020e 	bge	r2,zero,d0c <read_444_format+0x1b8>
				Cr = 0;
     d04:	e03ffa15 	stw	zero,-24(fp)
     d08:	00000506 	br	d20 <read_444_format+0x1cc>
			} else if (Cr > 255){
     d0c:	e0bffa17 	ldw	r2,-24(fp)
     d10:	10804010 	cmplti	r2,r2,256
     d14:	1000021e 	bne	r2,zero,d20 <read_444_format+0x1cc>
				Cr = 255;
     d18:	00803fc4 	movi	r2,255
     d1c:	e0bffa15 	stw	r2,-24(fp)
			}

			SEND1(Y);
     d20:	e13ff817 	ldw	r4,-32(fp)
     d24:	0000ac40 	call	ac4 <SEND1>
			SEND2(Cb);
     d28:	e13ff917 	ldw	r4,-28(fp)
     d2c:	0000af40 	call	af4 <SEND2>
			SEND3(Cr);
     d30:	e13ffa17 	ldw	r4,-24(fp)
     d34:	0000b240 	call	b24 <SEND3>
	uint16_t incr = jpeg_encoder_structure->incr;

	//printf("write 444_format: begin\n");

	for (i=rows; i>0; i--){
		for (j=cols; j>0; j--){
     d38:	e0bff717 	ldw	r2,-36(fp)
     d3c:	10bfffc4 	addi	r2,r2,-1
     d40:	e0bff715 	stw	r2,-36(fp)
     d44:	e0bff717 	ldw	r2,-36(fp)
     d48:	00bf9816 	blt	zero,r2,bac <read_444_format+0x58>
			//#pragma flush

		}


		if ((j=(8-cols)) >0){
     d4c:	e0bffb8b 	ldhu	r2,-18(fp)
     d50:	00c00204 	movi	r3,8
     d54:	1885c83a 	sub	r2,r3,r2
     d58:	e0bff715 	stw	r2,-36(fp)
     d5c:	e0bff717 	ldw	r2,-36(fp)
     d60:	0080600e 	bge	zero,r2,ee4 <read_444_format+0x390>

			R = *(input_ptr-3);
     d64:	e0bfff17 	ldw	r2,-4(fp)
     d68:	10bfff43 	ldbu	r2,-3(r2)
     d6c:	e0bffc85 	stb	r2,-14(fp)
			G = *(input_ptr-2);
     d70:	e0bfff17 	ldw	r2,-4(fp)
     d74:	10bfff83 	ldbu	r2,-2(r2)
     d78:	e0bffcc5 	stb	r2,-13(fp)
			B = *(input_ptr-1);
     d7c:	e0bfff17 	ldw	r2,-4(fp)
     d80:	10bfffc3 	ldbu	r2,-1(r2)
     d84:	e0bffd05 	stb	r2,-12(fp)

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
     d88:	e0bffc83 	ldbu	r2,-14(fp)
     d8c:	1009883a 	mov	r4,r2
     d90:	01401344 	movi	r5,77
     d94:	00020000 	call	2000 <__mulsi3>
     d98:	1021883a 	mov	r16,r2
     d9c:	e0bffcc3 	ldbu	r2,-13(fp)
     da0:	1009883a 	mov	r4,r2
     da4:	01402584 	movi	r5,150
     da8:	00020000 	call	2000 <__mulsi3>
     dac:	80a1883a 	add	r16,r16,r2
     db0:	e0bffd03 	ldbu	r2,-12(fp)
     db4:	1009883a 	mov	r4,r2
     db8:	01400744 	movi	r5,29
     dbc:	00020000 	call	2000 <__mulsi3>
     dc0:	8085883a 	add	r2,r16,r2
     dc4:	1005d23a 	srai	r2,r2,8
     dc8:	e0bff815 	stw	r2,-32(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
     dcc:	e0bffc83 	ldbu	r2,-14(fp)
     dd0:	1009883a 	mov	r4,r2
     dd4:	017ff544 	movi	r5,-43
     dd8:	00020000 	call	2000 <__mulsi3>
     ddc:	1021883a 	mov	r16,r2
     de0:	e0bffcc3 	ldbu	r2,-13(fp)
     de4:	1009883a 	mov	r4,r2
     de8:	017feac4 	movi	r5,-85
     dec:	00020000 	call	2000 <__mulsi3>
     df0:	8087883a 	add	r3,r16,r2
     df4:	e0bffd03 	ldbu	r2,-12(fp)
     df8:	100491fa 	slli	r2,r2,7
     dfc:	1885883a 	add	r2,r3,r2
     e00:	1005d23a 	srai	r2,r2,8
     e04:	10802004 	addi	r2,r2,128
     e08:	e0bff915 	stw	r2,-28(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
     e0c:	e0bffc83 	ldbu	r2,-14(fp)
     e10:	102091fa 	slli	r16,r2,7
     e14:	e0bffcc3 	ldbu	r2,-13(fp)
     e18:	1009883a 	mov	r4,r2
     e1c:	017fe544 	movi	r5,-107
     e20:	00020000 	call	2000 <__mulsi3>
     e24:	80a1883a 	add	r16,r16,r2
     e28:	e0bffd03 	ldbu	r2,-12(fp)
     e2c:	1009883a 	mov	r4,r2
     e30:	017ffac4 	movi	r5,-21
     e34:	00020000 	call	2000 <__mulsi3>
     e38:	8085883a 	add	r2,r16,r2
     e3c:	1005d23a 	srai	r2,r2,8
     e40:	10802004 	addi	r2,r2,128
     e44:	e0bffa15 	stw	r2,-24(fp)

			if (Y < 0){
     e48:	e0bff817 	ldw	r2,-32(fp)
     e4c:	1000020e 	bge	r2,zero,e58 <read_444_format+0x304>
				Y = 0;
     e50:	e03ff815 	stw	zero,-32(fp)
     e54:	00000506 	br	e6c <read_444_format+0x318>
			}else if (Y > 255){
     e58:	e0bff817 	ldw	r2,-32(fp)
     e5c:	10804010 	cmplti	r2,r2,256
     e60:	1000021e 	bne	r2,zero,e6c <read_444_format+0x318>
				Y = 255;
     e64:	00803fc4 	movi	r2,255
     e68:	e0bff815 	stw	r2,-32(fp)
			}

			if (Cb < 0){
     e6c:	e0bff917 	ldw	r2,-28(fp)
     e70:	1000020e 	bge	r2,zero,e7c <read_444_format+0x328>
				Cb = 0;
     e74:	e03ff915 	stw	zero,-28(fp)
     e78:	00000506 	br	e90 <read_444_format+0x33c>
			}else if (Cb > 255){
     e7c:	e0bff917 	ldw	r2,-28(fp)
     e80:	10804010 	cmplti	r2,r2,256
     e84:	1000021e 	bne	r2,zero,e90 <read_444_format+0x33c>
				Cb = 255;
     e88:	00803fc4 	movi	r2,255
     e8c:	e0bff915 	stw	r2,-28(fp)
			}

			if (Cr < 0){
     e90:	e0bffa17 	ldw	r2,-24(fp)
     e94:	1000020e 	bge	r2,zero,ea0 <read_444_format+0x34c>
				Cr = 0;
     e98:	e03ffa15 	stw	zero,-24(fp)
			}else if (Cr > 255){
				Cr = 255;
			}
			for (; j>0; j--){
     e9c:	00000f06 	br	edc <read_444_format+0x388>
				Cb = 255;
			}

			if (Cr < 0){
				Cr = 0;
			}else if (Cr > 255){
     ea0:	e0bffa17 	ldw	r2,-24(fp)
     ea4:	10804010 	cmplti	r2,r2,256
     ea8:	10000c1e 	bne	r2,zero,edc <read_444_format+0x388>
				Cr = 255;
     eac:	00803fc4 	movi	r2,255
     eb0:	e0bffa15 	stw	r2,-24(fp)
			}
			for (; j>0; j--){
     eb4:	00000906 	br	edc <read_444_format+0x388>
				SEND1(Y);
     eb8:	e13ff817 	ldw	r4,-32(fp)
     ebc:	0000ac40 	call	ac4 <SEND1>
				SEND2(Cb);
     ec0:	e13ff917 	ldw	r4,-28(fp)
     ec4:	0000af40 	call	af4 <SEND2>
				SEND3(Cr);
     ec8:	e13ffa17 	ldw	r4,-24(fp)
     ecc:	0000b240 	call	b24 <SEND3>
			if (Cr < 0){
				Cr = 0;
			}else if (Cr > 255){
				Cr = 255;
			}
			for (; j>0; j--){
     ed0:	e0bff717 	ldw	r2,-36(fp)
     ed4:	10bfffc4 	addi	r2,r2,-1
     ed8:	e0bff715 	stw	r2,-36(fp)
     edc:	e0bff717 	ldw	r2,-36(fp)
     ee0:	00bff516 	blt	zero,r2,eb8 <read_444_format+0x364>
				SEND2(Cb);
				SEND3(Cr);
			}
		}

		input_ptr += incr;
     ee4:	e0bffc0b 	ldhu	r2,-16(fp)
     ee8:	e0ffff17 	ldw	r3,-4(fp)
     eec:	1885883a 	add	r2,r3,r2
     ef0:	e0bfff15 	stw	r2,-4(fp)
	uint16_t cols = jpeg_encoder_structure->cols;
	uint16_t incr = jpeg_encoder_structure->incr;

	//printf("write 444_format: begin\n");

	for (i=rows; i>0; i--){
     ef4:	e0bff617 	ldw	r2,-40(fp)
     ef8:	10bfffc4 	addi	r2,r2,-1
     efc:	e0bff615 	stw	r2,-40(fp)
     f00:	e0bff617 	ldw	r2,-40(fp)
     f04:	00bf2616 	blt	zero,r2,ba0 <read_444_format+0x4c>
		input_ptr += incr;
	}
	//ledBlink(1);
	//printf("write 444_format: half completed\n");

	input_ptr -= incr;
     f08:	e0bffc0b 	ldhu	r2,-16(fp)
     f0c:	0085c83a 	sub	r2,zero,r2
     f10:	e0ffff17 	ldw	r3,-4(fp)
     f14:	1885883a 	add	r2,r3,r2
     f18:	e0bfff15 	stw	r2,-4(fp)

	for (i=8-rows; i>0; i--){
     f1c:	e0bffb0b 	ldhu	r2,-20(fp)
     f20:	00c00204 	movi	r3,8
     f24:	1885c83a 	sub	r2,r3,r2
     f28:	e0bff615 	stw	r2,-40(fp)
     f2c:	0000dd06 	br	12a4 <read_444_format+0x750>
		for (j=cols*3; j>0; ){
     f30:	e0fffb8b 	ldhu	r3,-18(fp)
     f34:	1805883a 	mov	r2,r3
     f38:	1085883a 	add	r2,r2,r2
     f3c:	10c5883a 	add	r2,r2,r3
     f40:	e0bff715 	stw	r2,-36(fp)
     f44:	00006c06 	br	10f8 <read_444_format+0x5a4>
			R = *(input_ptr - (j--));
     f48:	e0bff717 	ldw	r2,-36(fp)
     f4c:	0085c83a 	sub	r2,zero,r2
     f50:	e0ffff17 	ldw	r3,-4(fp)
     f54:	1885883a 	add	r2,r3,r2
     f58:	10800003 	ldbu	r2,0(r2)
     f5c:	e0bffc85 	stb	r2,-14(fp)
     f60:	e0bff717 	ldw	r2,-36(fp)
     f64:	10bfffc4 	addi	r2,r2,-1
     f68:	e0bff715 	stw	r2,-36(fp)
			G = *(input_ptr - (j--));
     f6c:	e0bff717 	ldw	r2,-36(fp)
     f70:	0085c83a 	sub	r2,zero,r2
     f74:	e0ffff17 	ldw	r3,-4(fp)
     f78:	1885883a 	add	r2,r3,r2
     f7c:	10800003 	ldbu	r2,0(r2)
     f80:	e0bffcc5 	stb	r2,-13(fp)
     f84:	e0bff717 	ldw	r2,-36(fp)
     f88:	10bfffc4 	addi	r2,r2,-1
     f8c:	e0bff715 	stw	r2,-36(fp)
			B = *(input_ptr - (j--));
     f90:	e0bff717 	ldw	r2,-36(fp)
     f94:	0085c83a 	sub	r2,zero,r2
     f98:	e0ffff17 	ldw	r3,-4(fp)
     f9c:	1885883a 	add	r2,r3,r2
     fa0:	10800003 	ldbu	r2,0(r2)
     fa4:	e0bffd05 	stb	r2,-12(fp)
     fa8:	e0bff717 	ldw	r2,-36(fp)
     fac:	10bfffc4 	addi	r2,r2,-1
     fb0:	e0bff715 	stw	r2,-36(fp)

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
     fb4:	e0bffc83 	ldbu	r2,-14(fp)
     fb8:	1009883a 	mov	r4,r2
     fbc:	01401344 	movi	r5,77
     fc0:	00020000 	call	2000 <__mulsi3>
     fc4:	1021883a 	mov	r16,r2
     fc8:	e0bffcc3 	ldbu	r2,-13(fp)
     fcc:	1009883a 	mov	r4,r2
     fd0:	01402584 	movi	r5,150
     fd4:	00020000 	call	2000 <__mulsi3>
     fd8:	80a1883a 	add	r16,r16,r2
     fdc:	e0bffd03 	ldbu	r2,-12(fp)
     fe0:	1009883a 	mov	r4,r2
     fe4:	01400744 	movi	r5,29
     fe8:	00020000 	call	2000 <__mulsi3>
     fec:	8085883a 	add	r2,r16,r2
     ff0:	1005d23a 	srai	r2,r2,8
     ff4:	e0bff815 	stw	r2,-32(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
     ff8:	e0bffc83 	ldbu	r2,-14(fp)
     ffc:	1009883a 	mov	r4,r2
    1000:	017ff544 	movi	r5,-43
    1004:	00020000 	call	2000 <__mulsi3>
    1008:	1021883a 	mov	r16,r2
    100c:	e0bffcc3 	ldbu	r2,-13(fp)
    1010:	1009883a 	mov	r4,r2
    1014:	017feac4 	movi	r5,-85
    1018:	00020000 	call	2000 <__mulsi3>
    101c:	8087883a 	add	r3,r16,r2
    1020:	e0bffd03 	ldbu	r2,-12(fp)
    1024:	100491fa 	slli	r2,r2,7
    1028:	1885883a 	add	r2,r3,r2
    102c:	1005d23a 	srai	r2,r2,8
    1030:	10802004 	addi	r2,r2,128
    1034:	e0bff915 	stw	r2,-28(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
    1038:	e0bffc83 	ldbu	r2,-14(fp)
    103c:	102091fa 	slli	r16,r2,7
    1040:	e0bffcc3 	ldbu	r2,-13(fp)
    1044:	1009883a 	mov	r4,r2
    1048:	017fe544 	movi	r5,-107
    104c:	00020000 	call	2000 <__mulsi3>
    1050:	80a1883a 	add	r16,r16,r2
    1054:	e0bffd03 	ldbu	r2,-12(fp)
    1058:	1009883a 	mov	r4,r2
    105c:	017ffac4 	movi	r5,-21
    1060:	00020000 	call	2000 <__mulsi3>
    1064:	8085883a 	add	r2,r16,r2
    1068:	1005d23a 	srai	r2,r2,8
    106c:	10802004 	addi	r2,r2,128
    1070:	e0bffa15 	stw	r2,-24(fp)

			if (Y < 0){
    1074:	e0bff817 	ldw	r2,-32(fp)
    1078:	1000020e 	bge	r2,zero,1084 <read_444_format+0x530>
				Y = 0;
    107c:	e03ff815 	stw	zero,-32(fp)
    1080:	00000506 	br	1098 <read_444_format+0x544>
			}else if (Y > 255){
    1084:	e0bff817 	ldw	r2,-32(fp)
    1088:	10804010 	cmplti	r2,r2,256
    108c:	1000021e 	bne	r2,zero,1098 <read_444_format+0x544>
				Y = 255;
    1090:	00803fc4 	movi	r2,255
    1094:	e0bff815 	stw	r2,-32(fp)
			}

			if (Cb < 0){
    1098:	e0bff917 	ldw	r2,-28(fp)
    109c:	1000020e 	bge	r2,zero,10a8 <read_444_format+0x554>
				Cb = 0;
    10a0:	e03ff915 	stw	zero,-28(fp)
    10a4:	00000506 	br	10bc <read_444_format+0x568>
			}else if (Cb > 255){
    10a8:	e0bff917 	ldw	r2,-28(fp)
    10ac:	10804010 	cmplti	r2,r2,256
    10b0:	1000021e 	bne	r2,zero,10bc <read_444_format+0x568>
				Cb = 255;
    10b4:	00803fc4 	movi	r2,255
    10b8:	e0bff915 	stw	r2,-28(fp)
			}

			if (Cr < 0){
    10bc:	e0bffa17 	ldw	r2,-24(fp)
    10c0:	1000020e 	bge	r2,zero,10cc <read_444_format+0x578>
				Cr = 0;
    10c4:	e03ffa15 	stw	zero,-24(fp)
    10c8:	00000506 	br	10e0 <read_444_format+0x58c>
			}else if (Cr > 255){
    10cc:	e0bffa17 	ldw	r2,-24(fp)
    10d0:	10804010 	cmplti	r2,r2,256
    10d4:	1000021e 	bne	r2,zero,10e0 <read_444_format+0x58c>
				Cr = 255;
    10d8:	00803fc4 	movi	r2,255
    10dc:	e0bffa15 	stw	r2,-24(fp)
			}

			SEND1(Y);
    10e0:	e13ff817 	ldw	r4,-32(fp)
    10e4:	0000ac40 	call	ac4 <SEND1>
			SEND2(Cb);
    10e8:	e13ff917 	ldw	r4,-28(fp)
    10ec:	0000af40 	call	af4 <SEND2>
			SEND3(Cr);
    10f0:	e13ffa17 	ldw	r4,-24(fp)
    10f4:	0000b240 	call	b24 <SEND3>
	//printf("write 444_format: half completed\n");

	input_ptr -= incr;

	for (i=8-rows; i>0; i--){
		for (j=cols*3; j>0; ){
    10f8:	e0bff717 	ldw	r2,-36(fp)
    10fc:	00bf9216 	blt	zero,r2,f48 <read_444_format+0x3f4>
			SEND1(Y);
			SEND2(Cb);
			SEND3(Cr);
		}

		if ((j=(8-cols)) >0){
    1100:	e0bffb8b 	ldhu	r2,-18(fp)
    1104:	00c00204 	movi	r3,8
    1108:	1885c83a 	sub	r2,r3,r2
    110c:	e0bff715 	stw	r2,-36(fp)
    1110:	e0bff717 	ldw	r2,-36(fp)
    1114:	0080600e 	bge	zero,r2,1298 <read_444_format+0x744>

			R = *(input_ptr - 3);
    1118:	e0bfff17 	ldw	r2,-4(fp)
    111c:	10bfff43 	ldbu	r2,-3(r2)
    1120:	e0bffc85 	stb	r2,-14(fp)
			G = *(input_ptr - 2);
    1124:	e0bfff17 	ldw	r2,-4(fp)
    1128:	10bfff83 	ldbu	r2,-2(r2)
    112c:	e0bffcc5 	stb	r2,-13(fp)
			B = *(input_ptr - 1);
    1130:	e0bfff17 	ldw	r2,-4(fp)
    1134:	10bfffc3 	ldbu	r2,-1(r2)
    1138:	e0bffd05 	stb	r2,-12(fp)

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
    113c:	e0bffc83 	ldbu	r2,-14(fp)
    1140:	1009883a 	mov	r4,r2
    1144:	01401344 	movi	r5,77
    1148:	00020000 	call	2000 <__mulsi3>
    114c:	1021883a 	mov	r16,r2
    1150:	e0bffcc3 	ldbu	r2,-13(fp)
    1154:	1009883a 	mov	r4,r2
    1158:	01402584 	movi	r5,150
    115c:	00020000 	call	2000 <__mulsi3>
    1160:	80a1883a 	add	r16,r16,r2
    1164:	e0bffd03 	ldbu	r2,-12(fp)
    1168:	1009883a 	mov	r4,r2
    116c:	01400744 	movi	r5,29
    1170:	00020000 	call	2000 <__mulsi3>
    1174:	8085883a 	add	r2,r16,r2
    1178:	1005d23a 	srai	r2,r2,8
    117c:	e0bff815 	stw	r2,-32(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
    1180:	e0bffc83 	ldbu	r2,-14(fp)
    1184:	1009883a 	mov	r4,r2
    1188:	017ff544 	movi	r5,-43
    118c:	00020000 	call	2000 <__mulsi3>
    1190:	1021883a 	mov	r16,r2
    1194:	e0bffcc3 	ldbu	r2,-13(fp)
    1198:	1009883a 	mov	r4,r2
    119c:	017feac4 	movi	r5,-85
    11a0:	00020000 	call	2000 <__mulsi3>
    11a4:	8087883a 	add	r3,r16,r2
    11a8:	e0bffd03 	ldbu	r2,-12(fp)
    11ac:	100491fa 	slli	r2,r2,7
    11b0:	1885883a 	add	r2,r3,r2
    11b4:	1005d23a 	srai	r2,r2,8
    11b8:	10802004 	addi	r2,r2,128
    11bc:	e0bff915 	stw	r2,-28(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
    11c0:	e0bffc83 	ldbu	r2,-14(fp)
    11c4:	102091fa 	slli	r16,r2,7
    11c8:	e0bffcc3 	ldbu	r2,-13(fp)
    11cc:	1009883a 	mov	r4,r2
    11d0:	017fe544 	movi	r5,-107
    11d4:	00020000 	call	2000 <__mulsi3>
    11d8:	80a1883a 	add	r16,r16,r2
    11dc:	e0bffd03 	ldbu	r2,-12(fp)
    11e0:	1009883a 	mov	r4,r2
    11e4:	017ffac4 	movi	r5,-21
    11e8:	00020000 	call	2000 <__mulsi3>
    11ec:	8085883a 	add	r2,r16,r2
    11f0:	1005d23a 	srai	r2,r2,8
    11f4:	10802004 	addi	r2,r2,128
    11f8:	e0bffa15 	stw	r2,-24(fp)

			if (Y < 0){
    11fc:	e0bff817 	ldw	r2,-32(fp)
    1200:	1000020e 	bge	r2,zero,120c <read_444_format+0x6b8>
				Y = 0;
    1204:	e03ff815 	stw	zero,-32(fp)
    1208:	00000506 	br	1220 <read_444_format+0x6cc>
			}else if (Y > 255){
    120c:	e0bff817 	ldw	r2,-32(fp)
    1210:	10804010 	cmplti	r2,r2,256
    1214:	1000021e 	bne	r2,zero,1220 <read_444_format+0x6cc>
				Y = 255;
    1218:	00803fc4 	movi	r2,255
    121c:	e0bff815 	stw	r2,-32(fp)
			}

			if (Cb < 0){
    1220:	e0bff917 	ldw	r2,-28(fp)
    1224:	1000020e 	bge	r2,zero,1230 <read_444_format+0x6dc>
				Cb = 0;
    1228:	e03ff915 	stw	zero,-28(fp)
    122c:	00000506 	br	1244 <read_444_format+0x6f0>
			}else if (Cb > 255){
    1230:	e0bff917 	ldw	r2,-28(fp)
    1234:	10804010 	cmplti	r2,r2,256
    1238:	1000021e 	bne	r2,zero,1244 <read_444_format+0x6f0>
				Cb = 255;
    123c:	00803fc4 	movi	r2,255
    1240:	e0bff915 	stw	r2,-28(fp)
			}

			if (Cr < 0){
    1244:	e0bffa17 	ldw	r2,-24(fp)
    1248:	1000020e 	bge	r2,zero,1254 <read_444_format+0x700>
				Cr = 0;
    124c:	e03ffa15 	stw	zero,-24(fp)
			}else if (Cr > 255){
				Cr = 255;
			}

			for(; j>0; j--){
    1250:	00000f06 	br	1290 <read_444_format+0x73c>
				Cb = 255;
			}

			if (Cr < 0){
				Cr = 0;
			}else if (Cr > 255){
    1254:	e0bffa17 	ldw	r2,-24(fp)
    1258:	10804010 	cmplti	r2,r2,256
    125c:	10000c1e 	bne	r2,zero,1290 <read_444_format+0x73c>
				Cr = 255;
    1260:	00803fc4 	movi	r2,255
    1264:	e0bffa15 	stw	r2,-24(fp)
			}

			for(; j>0; j--){
    1268:	00000906 	br	1290 <read_444_format+0x73c>
				SEND1(Y);
    126c:	e13ff817 	ldw	r4,-32(fp)
    1270:	0000ac40 	call	ac4 <SEND1>
				SEND2(Cb);
    1274:	e13ff917 	ldw	r4,-28(fp)
    1278:	0000af40 	call	af4 <SEND2>
				SEND3(Cr);
    127c:	e13ffa17 	ldw	r4,-24(fp)
    1280:	0000b240 	call	b24 <SEND3>
				Cr = 0;
			}else if (Cr > 255){
				Cr = 255;
			}

			for(; j>0; j--){
    1284:	e0bff717 	ldw	r2,-36(fp)
    1288:	10bfffc4 	addi	r2,r2,-1
    128c:	e0bff715 	stw	r2,-36(fp)
    1290:	e0bff717 	ldw	r2,-36(fp)
    1294:	00bff516 	blt	zero,r2,126c <read_444_format+0x718>
	//ledBlink(1);
	//printf("write 444_format: half completed\n");

	input_ptr -= incr;

	for (i=8-rows; i>0; i--){
    1298:	e0bff617 	ldw	r2,-40(fp)
    129c:	10bfffc4 	addi	r2,r2,-1
    12a0:	e0bff615 	stw	r2,-40(fp)
    12a4:	e0bff617 	ldw	r2,-40(fp)
    12a8:	00bf2116 	blt	zero,r2,f30 <read_444_format+0x3dc>
*CB_Ptr++ = *(CB_Ptr - 8);
*CR_Ptr++ = *(CR_Ptr - 8);
}
}
*/
}
    12ac:	e037883a 	mov	sp,fp
    12b0:	dfc00217 	ldw	ra,8(sp)
    12b4:	df000117 	ldw	fp,4(sp)
    12b8:	dc000017 	ldw	r16,0(sp)
    12bc:	dec00304 	addi	sp,sp,12
    12c0:	f800283a 	ret

000012c4 <INIT_B>:
#include <stdlib.h>

//#include "sys/alt_timestamp.h"
#include "FIFO.h"

void INIT_B(uint32_t csrAddr, uint8_t id, uint8_t size){
    12c4:	defffa04 	addi	sp,sp,-24
    12c8:	dfc00515 	stw	ra,20(sp)
    12cc:	df000415 	stw	fp,16(sp)
    12d0:	df000404 	addi	fp,sp,16
    12d4:	e13ffd15 	stw	r4,-12(fp)
    12d8:	2807883a 	mov	r3,r5
    12dc:	3005883a 	mov	r2,r6
    12e0:	e0fffe05 	stb	r3,-8(fp)
    12e4:	e0bfff05 	stb	r2,-4(fp)

	//int resp = altera_avalon_fifo_init(csrAddr, 0, ALMOST_EMPTY, ALMOST_FULL);
	int resp = altera_avalon_fifo_init(csrAddr, 0, 2, size-5);
    12e8:	e0bfff03 	ldbu	r2,-4(fp)
    12ec:	10bffec4 	addi	r2,r2,-5
    12f0:	e13ffd17 	ldw	r4,-12(fp)
    12f4:	000b883a 	mov	r5,zero
    12f8:	01800084 	movi	r6,2
    12fc:	100f883a 	mov	r7,r2
    1300:	00120d40 	call	120d4 <altera_avalon_fifo_init>
    1304:	e0bffc15 	stw	r2,-16(fp)

	printf("FIFO %d Init\n", id);
    1308:	e0bffe03 	ldbu	r2,-8(fp)
    130c:	01000074 	movhi	r4,1
    1310:	21126e04 	addi	r4,r4,18872
    1314:	100b883a 	mov	r5,r2
    1318:	00041140 	call	4114 <printf>
	else if(resp == ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR)  printf("ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR\n\n");
	else if(resp == ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR)  printf("ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR\n\n");
	else printf("Unknown\n\n");
*/
	//print_status(csrAddr);
}
    131c:	e037883a 	mov	sp,fp
    1320:	dfc00117 	ldw	ra,4(sp)
    1324:	df000017 	ldw	fp,0(sp)
    1328:	dec00204 	addi	sp,sp,8
    132c:	f800283a 	ret

00001330 <WRITE_B>:

void WRITE_B(int *buffer, uint32_t writeAddr, uint32_t csrAddr, uint8_t size, uint8_t id){
    1330:	defff804 	addi	sp,sp,-32
    1334:	dfc00715 	stw	ra,28(sp)
    1338:	df000615 	stw	fp,24(sp)
    133c:	df000604 	addi	fp,sp,24
    1340:	e13ffb15 	stw	r4,-20(fp)
    1344:	e17ffc15 	stw	r5,-16(fp)
    1348:	e1bffd15 	stw	r6,-12(fp)
    134c:	3805883a 	mov	r2,r7
    1350:	e0c00217 	ldw	r3,8(fp)
    1354:	e0bffe05 	stb	r2,-8(fp)
    1358:	e0ffff05 	stb	r3,-4(fp)

	while(altera_avalon_fifo_read_level(csrAddr)>=size){
    135c:	0001883a 	nop
    1360:	00000106 	br	1368 <WRITE_B+0x38>
		continue;
    1364:	0001883a 	nop
	//print_status(csrAddr);
}

void WRITE_B(int *buffer, uint32_t writeAddr, uint32_t csrAddr, uint8_t size, uint8_t id){

	while(altera_avalon_fifo_read_level(csrAddr)>=size){
    1368:	e13ffd17 	ldw	r4,-12(fp)
    136c:	00122780 	call	12278 <altera_avalon_fifo_read_level>
    1370:	e0fffe03 	ldbu	r3,-8(fp)
    1374:	10fffb0e 	bge	r2,r3,1364 <WRITE_B+0x34>
		continue;
	}
	int resp = altera_avalon_fifo_write_fifo(writeAddr, csrAddr , *buffer);
    1378:	e0bffb17 	ldw	r2,-20(fp)
    137c:	10800017 	ldw	r2,0(r2)
    1380:	e13ffc17 	ldw	r4,-16(fp)
    1384:	e17ffd17 	ldw	r5,-12(fp)
    1388:	100d883a 	mov	r6,r2
    138c:	00124040 	call	12404 <altera_avalon_fifo_write_fifo>
    1390:	e0bffa15 	stw	r2,-24(fp)
	else if(resp== ALTERA_AVALON_FIFO_FULL) printf("resp: ALTERA_AVALON_FIFO_FULL\n");
	int level = altera_avalon_fifo_read_level(csrAddr);
	printf("%d > write %d to FIFO, resp=%d level=%d\n\n", id, (int)*buffer, resp, level);
	#endif

}
    1394:	e037883a 	mov	sp,fp
    1398:	dfc00117 	ldw	ra,4(sp)
    139c:	df000017 	ldw	fp,0(sp)
    13a0:	dec00204 	addi	sp,sp,8
    13a4:	f800283a 	ret

000013a8 <READ_B>:

void READ_B(int *buffer, uint32_t readAddr, uint32_t csrAddr, uint8_t id){
    13a8:	defff904 	addi	sp,sp,-28
    13ac:	dfc00615 	stw	ra,24(sp)
    13b0:	df000515 	stw	fp,20(sp)
    13b4:	df000504 	addi	fp,sp,20
    13b8:	e13ffc15 	stw	r4,-16(fp)
    13bc:	e17ffd15 	stw	r5,-12(fp)
    13c0:	e1bffe15 	stw	r6,-8(fp)
    13c4:	3805883a 	mov	r2,r7
    13c8:	e0bfff05 	stb	r2,-4(fp)

	while(altera_avalon_fifo_read_level(csrAddr)==0){
    13cc:	0001883a 	nop
    13d0:	00000106 	br	13d8 <READ_B+0x30>
		continue;
    13d4:	0001883a 	nop

}

void READ_B(int *buffer, uint32_t readAddr, uint32_t csrAddr, uint8_t id){

	while(altera_avalon_fifo_read_level(csrAddr)==0){
    13d8:	e13ffe17 	ldw	r4,-8(fp)
    13dc:	00122780 	call	12278 <altera_avalon_fifo_read_level>
    13e0:	103ffc26 	beq	r2,zero,13d4 <READ_B+0x2c>
		continue;
	}

	int resp = altera_avalon_fifo_read_fifo(readAddr, csrAddr);
    13e4:	e13ffd17 	ldw	r4,-12(fp)
    13e8:	e17ffe17 	ldw	r5,-8(fp)
    13ec:	00124c80 	call	124c8 <altera_avalon_fifo_read_fifo>
    13f0:	e0bffb15 	stw	r2,-20(fp)
	*buffer = resp;
    13f4:	e0bffc17 	ldw	r2,-16(fp)
    13f8:	e0fffb17 	ldw	r3,-20(fp)
    13fc:	10c00015 	stw	r3,0(r2)
	else if(resp== ALTERA_AVALON_FIFO_FULL) printf("ALTERA_AVALON_FIFO_FULL\n\n");
	int level = altera_avalon_fifo_read_level(csrAddr);
	printf("reading from FIFO, resp=%d level=%d\n", resp, level);
	#endif

}
    1400:	e037883a 	mov	sp,fp
    1404:	dfc00117 	ldw	ra,4(sp)
    1408:	df000017 	ldw	fp,0(sp)
    140c:	dec00204 	addi	sp,sp,8
    1410:	f800283a 	ret

00001414 <WRITE_FIFO>:



//------------------------------------------------------------------------------

void WRITE_FIFO(int *buffer){
    1414:	defffe04 	addi	sp,sp,-8
    1418:	df000115 	stw	fp,4(sp)
    141c:	df000104 	addi	fp,sp,4
    1420:	e13fff15 	stw	r4,-4(fp)
#endif

//printf("%lu \n",(unsigned long)((sw_timeB - sw_timeA)));
//t= t+(sw_timeB - sw_timeA);
*/
}
    1424:	e037883a 	mov	sp,fp
    1428:	df000017 	ldw	fp,0(sp)
    142c:	dec00104 	addi	sp,sp,4
    1430:	f800283a 	ret

00001434 <READ_FIFO>:

void READ_FIFO(int *buffer){
    1434:	defffe04 	addi	sp,sp,-8
    1438:	df000115 	stw	fp,4(sp)
    143c:	df000104 	addi	fp,sp,4
    1440:	e13fff15 	stw	r4,-4(fp)
#endif

//printf("%lu \n",(unsigned long)((sw_timeB - sw_timeA)));
//t= t+(sw_timeB - sw_timeA);
*/
}
    1444:	e037883a 	mov	sp,fp
    1448:	df000017 	ldw	fp,0(sp)
    144c:	dec00104 	addi	sp,sp,4
    1450:	f800283a 	ret

00001454 <FIFO_INIT>:

//Initialization
void FIFO_INIT(){
    1454:	deffff04 	addi	sp,sp,-4
    1458:	df000015 	stw	fp,0(sp)
    145c:	d839883a 	mov	fp,sp
	else if(resp == ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR)  printf("ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR\n\n");
	else printf("Unknown\n\n");

	print_status(INPUT_FIFO_IN_CSR_BASE);
	*/
}
    1460:	e037883a 	mov	sp,fp
    1464:	df000017 	ldw	fp,0(sp)
    1468:	dec00104 	addi	sp,sp,4
    146c:	f800283a 	ret

00001470 <print_status>:


volatile int input_fifo_wrclk_irq_event;

void print_status(alt_u32 control_base_address){
    1470:	defffd04 	addi	sp,sp,-12
    1474:	dfc00215 	stw	ra,8(sp)
    1478:	df000115 	stw	fp,4(sp)
    147c:	df000104 	addi	fp,sp,4
    1480:	e13fff15 	stw	r4,-4(fp)
	printf("--------------------------------------\n");
    1484:	01000074 	movhi	r4,1
    1488:	21127204 	addi	r4,r4,18888
    148c:	00041d40 	call	41d4 <puts>
	printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
    1490:	e13fff17 	ldw	r4,-4(fp)
    1494:	00122780 	call	12278 <altera_avalon_fifo_read_level>
    1498:	01000074 	movhi	r4,1
    149c:	21127c04 	addi	r4,r4,18928
    14a0:	100b883a 	mov	r5,r2
    14a4:	00041140 	call	4114 <printf>
	printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address, ALTERA_AVALON_FIFO_STATUS_ALL) );
    14a8:	e13fff17 	ldw	r4,-4(fp)
    14ac:	01400fc4 	movi	r5,63
    14b0:	001216c0 	call	1216c <altera_avalon_fifo_read_status>
    14b4:	01000074 	movhi	r4,1
    14b8:	21127f04 	addi	r4,r4,18940
    14bc:	100b883a 	mov	r5,r2
    14c0:	00041140 	call	4114 <printf>
	printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address, ALTERA_AVALON_FIFO_EVENT_ALL) );
    14c4:	e13fff17 	ldw	r4,-4(fp)
    14c8:	01400fc4 	movi	r5,63
    14cc:	001223c0 	call	1223c <altera_avalon_fifo_read_event>
    14d0:	01000074 	movhi	r4,1
    14d4:	21128304 	addi	r4,r4,18956
    14d8:	100b883a 	mov	r5,r2
    14dc:	00041140 	call	4114 <printf>
	//printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address, ALTERA_AVALON_FIFO_IENABLE_ALL) );
	printf("ALMOSTEMPTY = %u\n", altera_avalon_fifo_read_almostempty(control_base_address) );
    14e0:	e13fff17 	ldw	r4,-4(fp)
    14e4:	00122100 	call	12210 <altera_avalon_fifo_read_almostempty>
    14e8:	01000074 	movhi	r4,1
    14ec:	21128604 	addi	r4,r4,18968
    14f0:	100b883a 	mov	r5,r2
    14f4:	00041140 	call	4114 <printf>
	printf("ALMOSTFULL = %u\n\n", 	altera_avalon_fifo_read_almostfull(control_base_address));
    14f8:	e13fff17 	ldw	r4,-4(fp)
    14fc:	00121e40 	call	121e4 <altera_avalon_fifo_read_almostfull>
    1500:	01000074 	movhi	r4,1
    1504:	21128b04 	addi	r4,r4,18988
    1508:	100b883a 	mov	r5,r2
    150c:	00041140 	call	4114 <printf>
}
    1510:	e037883a 	mov	sp,fp
    1514:	dfc00117 	ldw	ra,4(sp)
    1518:	df000017 	ldw	fp,0(sp)
    151c:	dec00204 	addi	sp,sp,8
    1520:	f800283a 	ret

00001524 <init_AB_0>:
#include "FIFO.h"



// FIFO_AB_0 -------------------------------------------------------------------
void init_AB_0(){
    1524:	defffe04 	addi	sp,sp,-8
    1528:	dfc00115 	stw	ra,4(sp)
    152c:	df000015 	stw	fp,0(sp)
    1530:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AB_0_CSR, FIFO_AB_0_ID, FIFO_AB_0_SIZE);
    1534:	01020074 	movhi	r4,2049
    1538:	21042804 	addi	r4,r4,4256
    153c:	000b883a 	mov	r5,zero
    1540:	01801f44 	movi	r6,125
    1544:	00012c40 	call	12c4 <INIT_B>
}
    1548:	e037883a 	mov	sp,fp
    154c:	dfc00117 	ldw	ra,4(sp)
    1550:	df000017 	ldw	fp,0(sp)
    1554:	dec00204 	addi	sp,sp,8
    1558:	f800283a 	ret

0000155c <read_AB_0>:
int read_AB_0(){
    155c:	defffd04 	addi	sp,sp,-12
    1560:	dfc00215 	stw	ra,8(sp)
    1564:	df000115 	stw	fp,4(sp)
    1568:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AB_0_READ, FIFO_AB_0_CSR, FIFO_AB_0_ID);
    156c:	e13fff04 	addi	r4,fp,-4
    1570:	01420074 	movhi	r5,2049
    1574:	29445604 	addi	r5,r5,4440
    1578:	01820074 	movhi	r6,2049
    157c:	31842804 	addi	r6,r6,4256
    1580:	000f883a 	mov	r7,zero
    1584:	00013a80 	call	13a8 <READ_B>
   return val;
    1588:	e0bfff17 	ldw	r2,-4(fp)
}
    158c:	e037883a 	mov	sp,fp
    1590:	dfc00117 	ldw	ra,4(sp)
    1594:	df000017 	ldw	fp,0(sp)
    1598:	dec00204 	addi	sp,sp,8
    159c:	f800283a 	ret

000015a0 <write_AB_0>:
void write_AB_0(int *buffer){
    15a0:	defffc04 	addi	sp,sp,-16
    15a4:	dfc00315 	stw	ra,12(sp)
    15a8:	df000215 	stw	fp,8(sp)
    15ac:	df000204 	addi	fp,sp,8
    15b0:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AB_0_WRITE, FIFO_AB_0_CSR, FIFO_AB_0_SIZE, FIFO_AB_0_ID);
    15b4:	d8000015 	stw	zero,0(sp)
    15b8:	e13fff17 	ldw	r4,-4(fp)
    15bc:	01420074 	movhi	r5,2049
    15c0:	29445904 	addi	r5,r5,4452
    15c4:	01820074 	movhi	r6,2049
    15c8:	31842804 	addi	r6,r6,4256
    15cc:	01c01f44 	movi	r7,125
    15d0:	00013300 	call	1330 <WRITE_B>
}
    15d4:	e037883a 	mov	sp,fp
    15d8:	dfc00117 	ldw	ra,4(sp)
    15dc:	df000017 	ldw	fp,0(sp)
    15e0:	dec00204 	addi	sp,sp,8
    15e4:	f800283a 	ret

000015e8 <readStatus_AB_0>:
void readStatus_AB_0(){
    15e8:	defffe04 	addi	sp,sp,-8
    15ec:	dfc00115 	stw	ra,4(sp)
    15f0:	df000015 	stw	fp,0(sp)
    15f4:	d839883a 	mov	fp,sp
   print_status(FIFO_AB_0_CSR);
    15f8:	01020074 	movhi	r4,2049
    15fc:	21042804 	addi	r4,r4,4256
    1600:	00014700 	call	1470 <print_status>
}
    1604:	e037883a 	mov	sp,fp
    1608:	dfc00117 	ldw	ra,4(sp)
    160c:	df000017 	ldw	fp,0(sp)
    1610:	dec00204 	addi	sp,sp,8
    1614:	f800283a 	ret

00001618 <init_AB_1>:

// FIFO_AB_1 -------------------------------------------------------------------
void init_AB_1(){
    1618:	defffe04 	addi	sp,sp,-8
    161c:	dfc00115 	stw	ra,4(sp)
    1620:	df000015 	stw	fp,0(sp)
    1624:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AB_1_CSR, FIFO_AB_1_ID, FIFO_AB_1_SIZE);
    1628:	01020074 	movhi	r4,2049
    162c:	21042004 	addi	r4,r4,4224
    1630:	01400044 	movi	r5,1
    1634:	01801f44 	movi	r6,125
    1638:	00012c40 	call	12c4 <INIT_B>
}
    163c:	e037883a 	mov	sp,fp
    1640:	dfc00117 	ldw	ra,4(sp)
    1644:	df000017 	ldw	fp,0(sp)
    1648:	dec00204 	addi	sp,sp,8
    164c:	f800283a 	ret

00001650 <read_AB_1>:
int read_AB_1(){
    1650:	defffd04 	addi	sp,sp,-12
    1654:	dfc00215 	stw	ra,8(sp)
    1658:	df000115 	stw	fp,4(sp)
    165c:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AB_1_READ, FIFO_AB_1_CSR, FIFO_AB_1_ID);
    1660:	e13fff04 	addi	r4,fp,-4
    1664:	01420074 	movhi	r5,2049
    1668:	29445504 	addi	r5,r5,4436
    166c:	01820074 	movhi	r6,2049
    1670:	31842004 	addi	r6,r6,4224
    1674:	01c00044 	movi	r7,1
    1678:	00013a80 	call	13a8 <READ_B>
   return val;
    167c:	e0bfff17 	ldw	r2,-4(fp)
}
    1680:	e037883a 	mov	sp,fp
    1684:	dfc00117 	ldw	ra,4(sp)
    1688:	df000017 	ldw	fp,0(sp)
    168c:	dec00204 	addi	sp,sp,8
    1690:	f800283a 	ret

00001694 <write_AB_1>:
void write_AB_1(int *buffer){
    1694:	defffc04 	addi	sp,sp,-16
    1698:	dfc00315 	stw	ra,12(sp)
    169c:	df000215 	stw	fp,8(sp)
    16a0:	df000204 	addi	fp,sp,8
    16a4:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AB_1_WRITE, FIFO_AB_1_CSR, FIFO_AB_1_SIZE, FIFO_AB_1_ID);
    16a8:	00800044 	movi	r2,1
    16ac:	d8800015 	stw	r2,0(sp)
    16b0:	e13fff17 	ldw	r4,-4(fp)
    16b4:	01420074 	movhi	r5,2049
    16b8:	29445804 	addi	r5,r5,4448
    16bc:	01820074 	movhi	r6,2049
    16c0:	31842004 	addi	r6,r6,4224
    16c4:	01c01f44 	movi	r7,125
    16c8:	00013300 	call	1330 <WRITE_B>
}
    16cc:	e037883a 	mov	sp,fp
    16d0:	dfc00117 	ldw	ra,4(sp)
    16d4:	df000017 	ldw	fp,0(sp)
    16d8:	dec00204 	addi	sp,sp,8
    16dc:	f800283a 	ret

000016e0 <readStatus_AB_1>:
void readStatus_AB_1(){
    16e0:	defffe04 	addi	sp,sp,-8
    16e4:	dfc00115 	stw	ra,4(sp)
    16e8:	df000015 	stw	fp,0(sp)
    16ec:	d839883a 	mov	fp,sp
   print_status(FIFO_AB_1_CSR);
    16f0:	01020074 	movhi	r4,2049
    16f4:	21042004 	addi	r4,r4,4224
    16f8:	00014700 	call	1470 <print_status>
}
    16fc:	e037883a 	mov	sp,fp
    1700:	dfc00117 	ldw	ra,4(sp)
    1704:	df000017 	ldw	fp,0(sp)
    1708:	dec00204 	addi	sp,sp,8
    170c:	f800283a 	ret

00001710 <init_AB_2>:

// FIFO_AB_2 -------------------------------------------------------------------
void init_AB_2(){
    1710:	defffe04 	addi	sp,sp,-8
    1714:	dfc00115 	stw	ra,4(sp)
    1718:	df000015 	stw	fp,0(sp)
    171c:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AB_2_CSR, FIFO_AB_2_ID, FIFO_AB_2_SIZE);
    1720:	01020074 	movhi	r4,2049
    1724:	21041804 	addi	r4,r4,4192
    1728:	01400084 	movi	r5,2
    172c:	01801f44 	movi	r6,125
    1730:	00012c40 	call	12c4 <INIT_B>
}
    1734:	e037883a 	mov	sp,fp
    1738:	dfc00117 	ldw	ra,4(sp)
    173c:	df000017 	ldw	fp,0(sp)
    1740:	dec00204 	addi	sp,sp,8
    1744:	f800283a 	ret

00001748 <read_AB_2>:
int read_AB_2(){
    1748:	defffd04 	addi	sp,sp,-12
    174c:	dfc00215 	stw	ra,8(sp)
    1750:	df000115 	stw	fp,4(sp)
    1754:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AB_2_READ, FIFO_AB_2_CSR, FIFO_AB_2_ID);
    1758:	e13fff04 	addi	r4,fp,-4
    175c:	01420074 	movhi	r5,2049
    1760:	29445404 	addi	r5,r5,4432
    1764:	01820074 	movhi	r6,2049
    1768:	31841804 	addi	r6,r6,4192
    176c:	01c00084 	movi	r7,2
    1770:	00013a80 	call	13a8 <READ_B>
   return val;
    1774:	e0bfff17 	ldw	r2,-4(fp)
}
    1778:	e037883a 	mov	sp,fp
    177c:	dfc00117 	ldw	ra,4(sp)
    1780:	df000017 	ldw	fp,0(sp)
    1784:	dec00204 	addi	sp,sp,8
    1788:	f800283a 	ret

0000178c <write_AB_2>:
void write_AB_2(int *buffer){
    178c:	defffc04 	addi	sp,sp,-16
    1790:	dfc00315 	stw	ra,12(sp)
    1794:	df000215 	stw	fp,8(sp)
    1798:	df000204 	addi	fp,sp,8
    179c:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AB_2_WRITE, FIFO_AB_2_CSR, FIFO_AB_2_SIZE, FIFO_AB_2_ID);
    17a0:	00800084 	movi	r2,2
    17a4:	d8800015 	stw	r2,0(sp)
    17a8:	e13fff17 	ldw	r4,-4(fp)
    17ac:	01420074 	movhi	r5,2049
    17b0:	29445704 	addi	r5,r5,4444
    17b4:	01820074 	movhi	r6,2049
    17b8:	31841804 	addi	r6,r6,4192
    17bc:	01c01f44 	movi	r7,125
    17c0:	00013300 	call	1330 <WRITE_B>
}
    17c4:	e037883a 	mov	sp,fp
    17c8:	dfc00117 	ldw	ra,4(sp)
    17cc:	df000017 	ldw	fp,0(sp)
    17d0:	dec00204 	addi	sp,sp,8
    17d4:	f800283a 	ret

000017d8 <readStatus_AB_2>:
void readStatus_AB_2(){
    17d8:	defffe04 	addi	sp,sp,-8
    17dc:	dfc00115 	stw	ra,4(sp)
    17e0:	df000015 	stw	fp,0(sp)
    17e4:	d839883a 	mov	fp,sp
   print_status(FIFO_AB_2_CSR);
    17e8:	01020074 	movhi	r4,2049
    17ec:	21041804 	addi	r4,r4,4192
    17f0:	00014700 	call	1470 <print_status>
}
    17f4:	e037883a 	mov	sp,fp
    17f8:	dfc00117 	ldw	ra,4(sp)
    17fc:	df000017 	ldw	fp,0(sp)
    1800:	dec00204 	addi	sp,sp,8
    1804:	f800283a 	ret

00001808 <init_AD>:

// FIFO_AD -------------------------------------------------------------------
void init_AD(){
    1808:	defffe04 	addi	sp,sp,-8
    180c:	dfc00115 	stw	ra,4(sp)
    1810:	df000015 	stw	fp,0(sp)
    1814:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AD_CSR, FIFO_AD_ID, FIFO_AD_SIZE);
    1818:	01020074 	movhi	r4,2049
    181c:	21041004 	addi	r4,r4,4160
    1820:	014000c4 	movi	r5,3
    1824:	01800744 	movi	r6,29
    1828:	00012c40 	call	12c4 <INIT_B>
}
    182c:	e037883a 	mov	sp,fp
    1830:	dfc00117 	ldw	ra,4(sp)
    1834:	df000017 	ldw	fp,0(sp)
    1838:	dec00204 	addi	sp,sp,8
    183c:	f800283a 	ret

00001840 <read_AD>:
int read_AD(){
    1840:	defffd04 	addi	sp,sp,-12
    1844:	dfc00215 	stw	ra,8(sp)
    1848:	df000115 	stw	fp,4(sp)
    184c:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AD_READ, FIFO_AD_CSR, FIFO_AD_ID);
    1850:	e13fff04 	addi	r4,fp,-4
    1854:	01420074 	movhi	r5,2049
    1858:	29445204 	addi	r5,r5,4424
    185c:	01820074 	movhi	r6,2049
    1860:	31841004 	addi	r6,r6,4160
    1864:	01c000c4 	movi	r7,3
    1868:	00013a80 	call	13a8 <READ_B>
   return val;
    186c:	e0bfff17 	ldw	r2,-4(fp)
}
    1870:	e037883a 	mov	sp,fp
    1874:	dfc00117 	ldw	ra,4(sp)
    1878:	df000017 	ldw	fp,0(sp)
    187c:	dec00204 	addi	sp,sp,8
    1880:	f800283a 	ret

00001884 <write_AD>:
void write_AD(int *buffer){
    1884:	defffc04 	addi	sp,sp,-16
    1888:	dfc00315 	stw	ra,12(sp)
    188c:	df000215 	stw	fp,8(sp)
    1890:	df000204 	addi	fp,sp,8
    1894:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AD_WRITE, FIFO_AD_CSR, FIFO_AD_SIZE, FIFO_AD_ID);
    1898:	008000c4 	movi	r2,3
    189c:	d8800015 	stw	r2,0(sp)
    18a0:	e13fff17 	ldw	r4,-4(fp)
    18a4:	01420074 	movhi	r5,2049
    18a8:	29445304 	addi	r5,r5,4428
    18ac:	01820074 	movhi	r6,2049
    18b0:	31841004 	addi	r6,r6,4160
    18b4:	01c00744 	movi	r7,29
    18b8:	00013300 	call	1330 <WRITE_B>
}
    18bc:	e037883a 	mov	sp,fp
    18c0:	dfc00117 	ldw	ra,4(sp)
    18c4:	df000017 	ldw	fp,0(sp)
    18c8:	dec00204 	addi	sp,sp,8
    18cc:	f800283a 	ret

000018d0 <readStatus_AD>:
void readStatus_AD(){
    18d0:	defffe04 	addi	sp,sp,-8
    18d4:	dfc00115 	stw	ra,4(sp)
    18d8:	df000015 	stw	fp,0(sp)
    18dc:	d839883a 	mov	fp,sp
   print_status(FIFO_AD_CSR);
    18e0:	01020074 	movhi	r4,2049
    18e4:	21041004 	addi	r4,r4,4160
    18e8:	00014700 	call	1470 <print_status>
}
    18ec:	e037883a 	mov	sp,fp
    18f0:	dfc00117 	ldw	ra,4(sp)
    18f4:	df000017 	ldw	fp,0(sp)
    18f8:	dec00204 	addi	sp,sp,8
    18fc:	f800283a 	ret

00001900 <init_AE>:


// FIFO_AE -------------------------------------------------------------------
void init_AE(){
    1900:	defffe04 	addi	sp,sp,-8
    1904:	dfc00115 	stw	ra,4(sp)
    1908:	df000015 	stw	fp,0(sp)
    190c:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AE_CSR, FIFO_AE_ID, FIFO_AE_SIZE);
    1910:	01020074 	movhi	r4,2049
    1914:	21040804 	addi	r4,r4,4128
    1918:	01400104 	movi	r5,4
    191c:	01800744 	movi	r6,29
    1920:	00012c40 	call	12c4 <INIT_B>
}
    1924:	e037883a 	mov	sp,fp
    1928:	dfc00117 	ldw	ra,4(sp)
    192c:	df000017 	ldw	fp,0(sp)
    1930:	dec00204 	addi	sp,sp,8
    1934:	f800283a 	ret

00001938 <read_AE>:
int read_AE(){
    1938:	defffd04 	addi	sp,sp,-12
    193c:	dfc00215 	stw	ra,8(sp)
    1940:	df000115 	stw	fp,4(sp)
    1944:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AE_READ, FIFO_AE_CSR, FIFO_AE_ID);
    1948:	e13fff04 	addi	r4,fp,-4
    194c:	01420074 	movhi	r5,2049
    1950:	29445004 	addi	r5,r5,4416
    1954:	01820074 	movhi	r6,2049
    1958:	31840804 	addi	r6,r6,4128
    195c:	01c00104 	movi	r7,4
    1960:	00013a80 	call	13a8 <READ_B>
   return val;
    1964:	e0bfff17 	ldw	r2,-4(fp)
}
    1968:	e037883a 	mov	sp,fp
    196c:	dfc00117 	ldw	ra,4(sp)
    1970:	df000017 	ldw	fp,0(sp)
    1974:	dec00204 	addi	sp,sp,8
    1978:	f800283a 	ret

0000197c <write_AE>:
void write_AE(int *buffer){
    197c:	defffc04 	addi	sp,sp,-16
    1980:	dfc00315 	stw	ra,12(sp)
    1984:	df000215 	stw	fp,8(sp)
    1988:	df000204 	addi	fp,sp,8
    198c:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AE_WRITE, FIFO_AE_CSR, FIFO_AE_SIZE, FIFO_AE_ID);
    1990:	00800104 	movi	r2,4
    1994:	d8800015 	stw	r2,0(sp)
    1998:	e13fff17 	ldw	r4,-4(fp)
    199c:	01420074 	movhi	r5,2049
    19a0:	29445104 	addi	r5,r5,4420
    19a4:	01820074 	movhi	r6,2049
    19a8:	31840804 	addi	r6,r6,4128
    19ac:	01c00744 	movi	r7,29
    19b0:	00013300 	call	1330 <WRITE_B>
}
    19b4:	e037883a 	mov	sp,fp
    19b8:	dfc00117 	ldw	ra,4(sp)
    19bc:	df000017 	ldw	fp,0(sp)
    19c0:	dec00204 	addi	sp,sp,8
    19c4:	f800283a 	ret

000019c8 <readStatus_AE>:
void readStatus_AE(){
    19c8:	defffe04 	addi	sp,sp,-8
    19cc:	dfc00115 	stw	ra,4(sp)
    19d0:	df000015 	stw	fp,0(sp)
    19d4:	d839883a 	mov	fp,sp
   print_status(FIFO_AE_CSR);
    19d8:	01020074 	movhi	r4,2049
    19dc:	21040804 	addi	r4,r4,4128
    19e0:	00014700 	call	1470 <print_status>
}
    19e4:	e037883a 	mov	sp,fp
    19e8:	dfc00117 	ldw	ra,4(sp)
    19ec:	df000017 	ldw	fp,0(sp)
    19f0:	dec00204 	addi	sp,sp,8
    19f4:	f800283a 	ret

000019f8 <init_AF>:

// FIFO_AF -------------------------------------------------------------------
void init_AF(){
    19f8:	defffe04 	addi	sp,sp,-8
    19fc:	dfc00115 	stw	ra,4(sp)
    1a00:	df000015 	stw	fp,0(sp)
    1a04:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AF_CSR, FIFO_AF_ID, FIFO_AF_SIZE);
    1a08:	01020074 	movhi	r4,2049
    1a0c:	21040004 	addi	r4,r4,4096
    1a10:	01400144 	movi	r5,5
    1a14:	01800744 	movi	r6,29
    1a18:	00012c40 	call	12c4 <INIT_B>
}
    1a1c:	e037883a 	mov	sp,fp
    1a20:	dfc00117 	ldw	ra,4(sp)
    1a24:	df000017 	ldw	fp,0(sp)
    1a28:	dec00204 	addi	sp,sp,8
    1a2c:	f800283a 	ret

00001a30 <read_AF>:
int read_AF(){
    1a30:	defffd04 	addi	sp,sp,-12
    1a34:	dfc00215 	stw	ra,8(sp)
    1a38:	df000115 	stw	fp,4(sp)
    1a3c:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AF_READ, FIFO_AF_CSR, FIFO_AF_ID);
    1a40:	e13fff04 	addi	r4,fp,-4
    1a44:	01420074 	movhi	r5,2049
    1a48:	29444e04 	addi	r5,r5,4408
    1a4c:	01820074 	movhi	r6,2049
    1a50:	31840004 	addi	r6,r6,4096
    1a54:	01c00144 	movi	r7,5
    1a58:	00013a80 	call	13a8 <READ_B>
   return val;
    1a5c:	e0bfff17 	ldw	r2,-4(fp)
}
    1a60:	e037883a 	mov	sp,fp
    1a64:	dfc00117 	ldw	ra,4(sp)
    1a68:	df000017 	ldw	fp,0(sp)
    1a6c:	dec00204 	addi	sp,sp,8
    1a70:	f800283a 	ret

00001a74 <write_AF>:
void write_AF(int *buffer){
    1a74:	defffc04 	addi	sp,sp,-16
    1a78:	dfc00315 	stw	ra,12(sp)
    1a7c:	df000215 	stw	fp,8(sp)
    1a80:	df000204 	addi	fp,sp,8
    1a84:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AF_WRITE, FIFO_AF_CSR, FIFO_AF_SIZE, FIFO_AF_ID);
    1a88:	00800144 	movi	r2,5
    1a8c:	d8800015 	stw	r2,0(sp)
    1a90:	e13fff17 	ldw	r4,-4(fp)
    1a94:	01420074 	movhi	r5,2049
    1a98:	29444f04 	addi	r5,r5,4412
    1a9c:	01820074 	movhi	r6,2049
    1aa0:	31840004 	addi	r6,r6,4096
    1aa4:	01c00744 	movi	r7,29
    1aa8:	00013300 	call	1330 <WRITE_B>
}
    1aac:	e037883a 	mov	sp,fp
    1ab0:	dfc00117 	ldw	ra,4(sp)
    1ab4:	df000017 	ldw	fp,0(sp)
    1ab8:	dec00204 	addi	sp,sp,8
    1abc:	f800283a 	ret

00001ac0 <readStatus_AF>:
void readStatus_AF(){
    1ac0:	defffe04 	addi	sp,sp,-8
    1ac4:	dfc00115 	stw	ra,4(sp)
    1ac8:	df000015 	stw	fp,0(sp)
    1acc:	d839883a 	mov	fp,sp
   print_status(FIFO_AF_CSR);
    1ad0:	01020074 	movhi	r4,2049
    1ad4:	21040004 	addi	r4,r4,4096
    1ad8:	00014700 	call	1470 <print_status>
}
    1adc:	e037883a 	mov	sp,fp
    1ae0:	dfc00117 	ldw	ra,4(sp)
    1ae4:	df000017 	ldw	fp,0(sp)
    1ae8:	dec00204 	addi	sp,sp,8
    1aec:	f800283a 	ret

00001af0 <init_BC>:

// FIFO_BC -------------------------------------------------------------------
void init_BC(){
    1af0:	defffe04 	addi	sp,sp,-8
    1af4:	dfc00115 	stw	ra,4(sp)
    1af8:	df000015 	stw	fp,0(sp)
    1afc:	d839883a 	mov	fp,sp
   INIT_B(FIFO_BC_CSR, FIFO_BC_ID, FIFO_BC_SIZE);
    1b00:	01020074 	movhi	r4,2049
    1b04:	21040004 	addi	r4,r4,4096
    1b08:	01400184 	movi	r5,6
    1b0c:	01803f44 	movi	r6,253
    1b10:	00012c40 	call	12c4 <INIT_B>
}
    1b14:	e037883a 	mov	sp,fp
    1b18:	dfc00117 	ldw	ra,4(sp)
    1b1c:	df000017 	ldw	fp,0(sp)
    1b20:	dec00204 	addi	sp,sp,8
    1b24:	f800283a 	ret

00001b28 <read_BC>:
int read_BC(){
    1b28:	defffd04 	addi	sp,sp,-12
    1b2c:	dfc00215 	stw	ra,8(sp)
    1b30:	df000115 	stw	fp,4(sp)
    1b34:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_BC_READ, FIFO_BC_CSR, FIFO_BC_ID);
    1b38:	e13fff04 	addi	r4,fp,-4
    1b3c:	01420074 	movhi	r5,2049
    1b40:	29443604 	addi	r5,r5,4312
    1b44:	01820074 	movhi	r6,2049
    1b48:	31840004 	addi	r6,r6,4096
    1b4c:	01c00184 	movi	r7,6
    1b50:	00013a80 	call	13a8 <READ_B>
   return val;
    1b54:	e0bfff17 	ldw	r2,-4(fp)
}
    1b58:	e037883a 	mov	sp,fp
    1b5c:	dfc00117 	ldw	ra,4(sp)
    1b60:	df000017 	ldw	fp,0(sp)
    1b64:	dec00204 	addi	sp,sp,8
    1b68:	f800283a 	ret

00001b6c <write_BC>:
void write_BC(int *buffer){
    1b6c:	defffc04 	addi	sp,sp,-16
    1b70:	dfc00315 	stw	ra,12(sp)
    1b74:	df000215 	stw	fp,8(sp)
    1b78:	df000204 	addi	fp,sp,8
    1b7c:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_BC_WRITE, FIFO_BC_CSR, FIFO_BC_SIZE, FIFO_BC_ID);
    1b80:	00800184 	movi	r2,6
    1b84:	d8800015 	stw	r2,0(sp)
    1b88:	e13fff17 	ldw	r4,-4(fp)
    1b8c:	01420074 	movhi	r5,2049
    1b90:	29443704 	addi	r5,r5,4316
    1b94:	01820074 	movhi	r6,2049
    1b98:	31840004 	addi	r6,r6,4096
    1b9c:	01c03f44 	movi	r7,253
    1ba0:	00013300 	call	1330 <WRITE_B>
}
    1ba4:	e037883a 	mov	sp,fp
    1ba8:	dfc00117 	ldw	ra,4(sp)
    1bac:	df000017 	ldw	fp,0(sp)
    1bb0:	dec00204 	addi	sp,sp,8
    1bb4:	f800283a 	ret

00001bb8 <readStatus_BC>:
void readStatus_BC(){
    1bb8:	defffe04 	addi	sp,sp,-8
    1bbc:	dfc00115 	stw	ra,4(sp)
    1bc0:	df000015 	stw	fp,0(sp)
    1bc4:	d839883a 	mov	fp,sp
   print_status(FIFO_BC_CSR);
    1bc8:	01020074 	movhi	r4,2049
    1bcc:	21040004 	addi	r4,r4,4096
    1bd0:	00014700 	call	1470 <print_status>
}
    1bd4:	e037883a 	mov	sp,fp
    1bd8:	dfc00117 	ldw	ra,4(sp)
    1bdc:	df000017 	ldw	fp,0(sp)
    1be0:	dec00204 	addi	sp,sp,8
    1be4:	f800283a 	ret

00001be8 <init_CD>:

// FIFO_CD -------------------------------------------------------------------
void init_CD(){
    1be8:	defffe04 	addi	sp,sp,-8
    1bec:	dfc00115 	stw	ra,4(sp)
    1bf0:	df000015 	stw	fp,0(sp)
    1bf4:	d839883a 	mov	fp,sp
   INIT_B(FIFO_CD_CSR, FIFO_CD_ID, FIFO_CD_SIZE);
    1bf8:	01020074 	movhi	r4,2049
    1bfc:	21040804 	addi	r4,r4,4128
    1c00:	014001c4 	movi	r5,7
    1c04:	01803f44 	movi	r6,253
    1c08:	00012c40 	call	12c4 <INIT_B>
}
    1c0c:	e037883a 	mov	sp,fp
    1c10:	dfc00117 	ldw	ra,4(sp)
    1c14:	df000017 	ldw	fp,0(sp)
    1c18:	dec00204 	addi	sp,sp,8
    1c1c:	f800283a 	ret

00001c20 <read_CD>:
int read_CD(){
    1c20:	defffd04 	addi	sp,sp,-12
    1c24:	dfc00215 	stw	ra,8(sp)
    1c28:	df000115 	stw	fp,4(sp)
    1c2c:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_CD_READ, FIFO_CD_CSR, FIFO_CD_ID);
    1c30:	e13fff04 	addi	r4,fp,-4
    1c34:	01420074 	movhi	r5,2049
    1c38:	29442604 	addi	r5,r5,4248
    1c3c:	01820074 	movhi	r6,2049
    1c40:	31840804 	addi	r6,r6,4128
    1c44:	01c001c4 	movi	r7,7
    1c48:	00013a80 	call	13a8 <READ_B>
   return val;
    1c4c:	e0bfff17 	ldw	r2,-4(fp)
}
    1c50:	e037883a 	mov	sp,fp
    1c54:	dfc00117 	ldw	ra,4(sp)
    1c58:	df000017 	ldw	fp,0(sp)
    1c5c:	dec00204 	addi	sp,sp,8
    1c60:	f800283a 	ret

00001c64 <write_CD>:
void write_CD(int *buffer){
    1c64:	defffc04 	addi	sp,sp,-16
    1c68:	dfc00315 	stw	ra,12(sp)
    1c6c:	df000215 	stw	fp,8(sp)
    1c70:	df000204 	addi	fp,sp,8
    1c74:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_CD_WRITE, FIFO_CD_CSR, FIFO_CD_SIZE, FIFO_CD_ID);
    1c78:	008001c4 	movi	r2,7
    1c7c:	d8800015 	stw	r2,0(sp)
    1c80:	e13fff17 	ldw	r4,-4(fp)
    1c84:	01420074 	movhi	r5,2049
    1c88:	29442704 	addi	r5,r5,4252
    1c8c:	01820074 	movhi	r6,2049
    1c90:	31840804 	addi	r6,r6,4128
    1c94:	01c03f44 	movi	r7,253
    1c98:	00013300 	call	1330 <WRITE_B>
}
    1c9c:	e037883a 	mov	sp,fp
    1ca0:	dfc00117 	ldw	ra,4(sp)
    1ca4:	df000017 	ldw	fp,0(sp)
    1ca8:	dec00204 	addi	sp,sp,8
    1cac:	f800283a 	ret

00001cb0 <readStatus_CD>:
void readStatus_CD(){
    1cb0:	defffe04 	addi	sp,sp,-8
    1cb4:	dfc00115 	stw	ra,4(sp)
    1cb8:	df000015 	stw	fp,0(sp)
    1cbc:	d839883a 	mov	fp,sp
   print_status(FIFO_CD_CSR);
    1cc0:	01020074 	movhi	r4,2049
    1cc4:	21040804 	addi	r4,r4,4128
    1cc8:	00014700 	call	1470 <print_status>
}
    1ccc:	e037883a 	mov	sp,fp
    1cd0:	dfc00117 	ldw	ra,4(sp)
    1cd4:	df000017 	ldw	fp,0(sp)
    1cd8:	dec00204 	addi	sp,sp,8
    1cdc:	f800283a 	ret

00001ce0 <init_DE>:

// FIFO_DE -------------------------------------------------------------------
void init_DE(){
    1ce0:	defffe04 	addi	sp,sp,-8
    1ce4:	dfc00115 	stw	ra,4(sp)
    1ce8:	df000015 	stw	fp,0(sp)
    1cec:	d839883a 	mov	fp,sp
   INIT_B(FIFO_DE_CSR, FIFO_DE_ID, FIFO_DE_SIZE);
    1cf0:	01020074 	movhi	r4,2049
    1cf4:	21040004 	addi	r4,r4,4096
    1cf8:	01400204 	movi	r5,8
    1cfc:	01803f44 	movi	r6,253
    1d00:	00012c40 	call	12c4 <INIT_B>
}
    1d04:	e037883a 	mov	sp,fp
    1d08:	dfc00117 	ldw	ra,4(sp)
    1d0c:	df000017 	ldw	fp,0(sp)
    1d10:	dec00204 	addi	sp,sp,8
    1d14:	f800283a 	ret

00001d18 <read_DE>:
int read_DE(){
    1d18:	defffd04 	addi	sp,sp,-12
    1d1c:	dfc00215 	stw	ra,8(sp)
    1d20:	df000115 	stw	fp,4(sp)
    1d24:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_DE_READ, FIFO_DE_CSR, FIFO_DE_ID);
    1d28:	e13fff04 	addi	r4,fp,-4
    1d2c:	01420074 	movhi	r5,2049
    1d30:	29443004 	addi	r5,r5,4288
    1d34:	01820074 	movhi	r6,2049
    1d38:	31840004 	addi	r6,r6,4096
    1d3c:	01c00204 	movi	r7,8
    1d40:	00013a80 	call	13a8 <READ_B>
   return val;
    1d44:	e0bfff17 	ldw	r2,-4(fp)
}
    1d48:	e037883a 	mov	sp,fp
    1d4c:	dfc00117 	ldw	ra,4(sp)
    1d50:	df000017 	ldw	fp,0(sp)
    1d54:	dec00204 	addi	sp,sp,8
    1d58:	f800283a 	ret

00001d5c <write_DE>:
void write_DE(int *buffer){
    1d5c:	defffc04 	addi	sp,sp,-16
    1d60:	dfc00315 	stw	ra,12(sp)
    1d64:	df000215 	stw	fp,8(sp)
    1d68:	df000204 	addi	fp,sp,8
    1d6c:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_DE_WRITE, FIFO_DE_CSR, FIFO_DE_SIZE, FIFO_DE_ID);
    1d70:	00800204 	movi	r2,8
    1d74:	d8800015 	stw	r2,0(sp)
    1d78:	e13fff17 	ldw	r4,-4(fp)
    1d7c:	01420074 	movhi	r5,2049
    1d80:	29443104 	addi	r5,r5,4292
    1d84:	01820074 	movhi	r6,2049
    1d88:	31840004 	addi	r6,r6,4096
    1d8c:	01c03f44 	movi	r7,253
    1d90:	00013300 	call	1330 <WRITE_B>
}
    1d94:	e037883a 	mov	sp,fp
    1d98:	dfc00117 	ldw	ra,4(sp)
    1d9c:	df000017 	ldw	fp,0(sp)
    1da0:	dec00204 	addi	sp,sp,8
    1da4:	f800283a 	ret

00001da8 <readStatus_DE>:
void readStatus_DE(){
    1da8:	defffe04 	addi	sp,sp,-8
    1dac:	dfc00115 	stw	ra,4(sp)
    1db0:	df000015 	stw	fp,0(sp)
    1db4:	d839883a 	mov	fp,sp
   print_status(FIFO_DE_CSR);
    1db8:	01020074 	movhi	r4,2049
    1dbc:	21040004 	addi	r4,r4,4096
    1dc0:	00014700 	call	1470 <print_status>
}
    1dc4:	e037883a 	mov	sp,fp
    1dc8:	dfc00117 	ldw	ra,4(sp)
    1dcc:	df000017 	ldw	fp,0(sp)
    1dd0:	dec00204 	addi	sp,sp,8
    1dd4:	f800283a 	ret

00001dd8 <init_EF>:

// FIFO_EF -------------------------------------------------------------------
void init_EF(){
    1dd8:	defffe04 	addi	sp,sp,-8
    1ddc:	dfc00115 	stw	ra,4(sp)
    1de0:	df000015 	stw	fp,0(sp)
    1de4:	d839883a 	mov	fp,sp
   INIT_B(FIFO_EF_CSR, FIFO_EF_ID, FIFO_EF_SIZE);
    1de8:	01020074 	movhi	r4,2049
    1dec:	21041004 	addi	r4,r4,4160
    1df0:	01400244 	movi	r5,9
    1df4:	01803f44 	movi	r6,253
    1df8:	00012c40 	call	12c4 <INIT_B>
}
    1dfc:	e037883a 	mov	sp,fp
    1e00:	dfc00117 	ldw	ra,4(sp)
    1e04:	df000017 	ldw	fp,0(sp)
    1e08:	dec00204 	addi	sp,sp,8
    1e0c:	f800283a 	ret

00001e10 <read_EF>:
int read_EF(){
    1e10:	defffd04 	addi	sp,sp,-12
    1e14:	dfc00215 	stw	ra,8(sp)
    1e18:	df000115 	stw	fp,4(sp)
    1e1c:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_EF_READ, FIFO_EF_CSR, FIFO_EF_ID);
    1e20:	e13fff04 	addi	r4,fp,-4
    1e24:	01420074 	movhi	r5,2049
    1e28:	29442e04 	addi	r5,r5,4280
    1e2c:	01820074 	movhi	r6,2049
    1e30:	31841004 	addi	r6,r6,4160
    1e34:	01c00244 	movi	r7,9
    1e38:	00013a80 	call	13a8 <READ_B>
   return val;
    1e3c:	e0bfff17 	ldw	r2,-4(fp)
}
    1e40:	e037883a 	mov	sp,fp
    1e44:	dfc00117 	ldw	ra,4(sp)
    1e48:	df000017 	ldw	fp,0(sp)
    1e4c:	dec00204 	addi	sp,sp,8
    1e50:	f800283a 	ret

00001e54 <write_EF>:
void write_EF(int *buffer){
    1e54:	defffc04 	addi	sp,sp,-16
    1e58:	dfc00315 	stw	ra,12(sp)
    1e5c:	df000215 	stw	fp,8(sp)
    1e60:	df000204 	addi	fp,sp,8
    1e64:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_EF_WRITE, FIFO_EF_CSR, FIFO_EF_SIZE, FIFO_EF_ID);
    1e68:	00800244 	movi	r2,9
    1e6c:	d8800015 	stw	r2,0(sp)
    1e70:	e13fff17 	ldw	r4,-4(fp)
    1e74:	01420074 	movhi	r5,2049
    1e78:	29442f04 	addi	r5,r5,4284
    1e7c:	01820074 	movhi	r6,2049
    1e80:	31841004 	addi	r6,r6,4160
    1e84:	01c03f44 	movi	r7,253
    1e88:	00013300 	call	1330 <WRITE_B>
}
    1e8c:	e037883a 	mov	sp,fp
    1e90:	dfc00117 	ldw	ra,4(sp)
    1e94:	df000017 	ldw	fp,0(sp)
    1e98:	dec00204 	addi	sp,sp,8
    1e9c:	f800283a 	ret

00001ea0 <readStatus_EF>:
void readStatus_EF(){
    1ea0:	defffe04 	addi	sp,sp,-8
    1ea4:	dfc00115 	stw	ra,4(sp)
    1ea8:	df000015 	stw	fp,0(sp)
    1eac:	d839883a 	mov	fp,sp
   print_status(FIFO_EF_CSR);
    1eb0:	01020074 	movhi	r4,2049
    1eb4:	21041004 	addi	r4,r4,4160
    1eb8:	00014700 	call	1470 <print_status>
}
    1ebc:	e037883a 	mov	sp,fp
    1ec0:	dfc00117 	ldw	ra,4(sp)
    1ec4:	df000017 	ldw	fp,0(sp)
    1ec8:	dec00204 	addi	sp,sp,8
    1ecc:	f800283a 	ret

00001ed0 <delay>:

#include "./utility.h"
#include "./IOMap.h"


void delay(int ms){
    1ed0:	defffd04 	addi	sp,sp,-12
    1ed4:	dfc00215 	stw	ra,8(sp)
    1ed8:	df000115 	stw	fp,4(sp)
    1edc:	df000104 	addi	fp,sp,4
    1ee0:	e13fff15 	stw	r4,-4(fp)
	usleep(ms*1000);
    1ee4:	e13fff17 	ldw	r4,-4(fp)
    1ee8:	0140fa04 	movi	r5,1000
    1eec:	00020000 	call	2000 <__mulsi3>
    1ef0:	1009883a 	mov	r4,r2
    1ef4:	0011e4c0 	call	11e4c <usleep>
}
    1ef8:	e037883a 	mov	sp,fp
    1efc:	dfc00117 	ldw	ra,4(sp)
    1f00:	df000017 	ldw	fp,0(sp)
    1f04:	dec00204 	addi	sp,sp,8
    1f08:	f800283a 	ret

00001f0c <ledUpdate>:

void ledUpdate(uint8_t digit, uint8_t status){
    1f0c:	defffc04 	addi	sp,sp,-16
    1f10:	df000315 	stw	fp,12(sp)
    1f14:	df000304 	addi	fp,sp,12
    1f18:	2007883a 	mov	r3,r4
    1f1c:	2805883a 	mov	r2,r5
    1f20:	e0fffe05 	stb	r3,-8(fp)
    1f24:	e0bfff05 	stb	r2,-4(fp)
	uint8_t value =  (uint8_t)IORD_32DIRECT(LED_BASE, OFFSET);
    1f28:	00820074 	movhi	r2,2049
    1f2c:	10844004 	addi	r2,r2,4352
    1f30:	10800037 	ldwio	r2,0(r2)
    1f34:	e0bffd05 	stb	r2,-12(fp)

	if(status==1){
    1f38:	e0bfff03 	ldbu	r2,-4(fp)
    1f3c:	10800058 	cmpnei	r2,r2,1
    1f40:	1000081e 	bne	r2,zero,1f64 <ledUpdate+0x58>
		value = value | (1<<digit);
    1f44:	e0bffe03 	ldbu	r2,-8(fp)
    1f48:	00c00044 	movi	r3,1
    1f4c:	1884983a 	sll	r2,r3,r2
    1f50:	1007883a 	mov	r3,r2
    1f54:	e0bffd03 	ldbu	r2,-12(fp)
    1f58:	1884b03a 	or	r2,r3,r2
    1f5c:	e0bffd05 	stb	r2,-12(fp)
    1f60:	00000806 	br	1f84 <ledUpdate+0x78>
	}else{
		value = value & (~(1<<digit));
    1f64:	e0bffe03 	ldbu	r2,-8(fp)
    1f68:	00c00044 	movi	r3,1
    1f6c:	1884983a 	sll	r2,r3,r2
    1f70:	0084303a 	nor	r2,zero,r2
    1f74:	1007883a 	mov	r3,r2
    1f78:	e0bffd03 	ldbu	r2,-12(fp)
    1f7c:	1884703a 	and	r2,r3,r2
    1f80:	e0bffd05 	stb	r2,-12(fp)
	}
	IOWR_8DIRECT(LED_BASE,OFFSET,value);
    1f84:	e0fffd03 	ldbu	r3,-12(fp)
    1f88:	00820074 	movhi	r2,2049
    1f8c:	10844004 	addi	r2,r2,4352
    1f90:	10c00025 	stbio	r3,0(r2)
}
    1f94:	e037883a 	mov	sp,fp
    1f98:	df000017 	ldw	fp,0(sp)
    1f9c:	dec00104 	addi	sp,sp,4
    1fa0:	f800283a 	ret

00001fa4 <ledBlink>:

void ledBlink(uint8_t id){
    1fa4:	defffd04 	addi	sp,sp,-12
    1fa8:	dfc00215 	stw	ra,8(sp)
    1fac:	df000115 	stw	fp,4(sp)
    1fb0:	df000104 	addi	fp,sp,4
    1fb4:	2005883a 	mov	r2,r4
    1fb8:	e0bfff05 	stb	r2,-4(fp)
	ledUpdate(id,1);
    1fbc:	e0bfff03 	ldbu	r2,-4(fp)
    1fc0:	1009883a 	mov	r4,r2
    1fc4:	01400044 	movi	r5,1
    1fc8:	0001f0c0 	call	1f0c <ledUpdate>
	delay(200);
    1fcc:	01003204 	movi	r4,200
    1fd0:	0001ed00 	call	1ed0 <delay>
	ledUpdate(id,0);
    1fd4:	e0bfff03 	ldbu	r2,-4(fp)
    1fd8:	1009883a 	mov	r4,r2
    1fdc:	000b883a 	mov	r5,zero
    1fe0:	0001f0c0 	call	1f0c <ledUpdate>
	delay(50);
    1fe4:	01000c84 	movi	r4,50
    1fe8:	0001ed00 	call	1ed0 <delay>
}
    1fec:	e037883a 	mov	sp,fp
    1ff0:	dfc00117 	ldw	ra,4(sp)
    1ff4:	df000017 	ldw	fp,0(sp)
    1ff8:	dec00204 	addi	sp,sp,8
    1ffc:	f800283a 	ret

00002000 <__mulsi3>:
    2000:	0005883a 	mov	r2,zero
    2004:	20000726 	beq	r4,zero,2024 <__mulsi3+0x24>
    2008:	20c0004c 	andi	r3,r4,1
    200c:	2008d07a 	srli	r4,r4,1
    2010:	18000126 	beq	r3,zero,2018 <__mulsi3+0x18>
    2014:	1145883a 	add	r2,r2,r5
    2018:	294b883a 	add	r5,r5,r5
    201c:	203ffa1e 	bne	r4,zero,2008 <__mulsi3+0x8>
    2020:	f800283a 	ret
    2024:	f800283a 	ret

00002028 <_fclose_r>:
    2028:	defffc04 	addi	sp,sp,-16
    202c:	dc400115 	stw	r17,4(sp)
    2030:	dc000015 	stw	r16,0(sp)
    2034:	dfc00315 	stw	ra,12(sp)
    2038:	dc800215 	stw	r18,8(sp)
    203c:	2821883a 	mov	r16,r5
    2040:	2023883a 	mov	r17,r4
    2044:	28003426 	beq	r5,zero,2118 <_fclose_r+0xf0>
    2048:	000263c0 	call	263c <__sfp_lock_acquire>
    204c:	88000226 	beq	r17,zero,2058 <_fclose_r+0x30>
    2050:	88800e17 	ldw	r2,56(r17)
    2054:	10003826 	beq	r2,zero,2138 <_fclose_r+0x110>
    2058:	8080030f 	ldh	r2,12(r16)
    205c:	10002526 	beq	r2,zero,20f4 <_fclose_r+0xcc>
    2060:	8809883a 	mov	r4,r17
    2064:	800b883a 	mov	r5,r16
    2068:	00021780 	call	2178 <_fflush_r>
    206c:	1025883a 	mov	r18,r2
    2070:	80800b17 	ldw	r2,44(r16)
    2074:	10000426 	beq	r2,zero,2088 <_fclose_r+0x60>
    2078:	81400717 	ldw	r5,28(r16)
    207c:	8809883a 	mov	r4,r17
    2080:	103ee83a 	callr	r2
    2084:	10003516 	blt	r2,zero,215c <_fclose_r+0x134>
    2088:	8080030b 	ldhu	r2,12(r16)
    208c:	1080200c 	andi	r2,r2,128
    2090:	10bfffcc 	andi	r2,r2,65535
    2094:	10a0001c 	xori	r2,r2,32768
    2098:	10a00004 	addi	r2,r2,-32768
    209c:	10002b1e 	bne	r2,zero,214c <_fclose_r+0x124>
    20a0:	81400c17 	ldw	r5,48(r16)
    20a4:	28000526 	beq	r5,zero,20bc <_fclose_r+0x94>
    20a8:	80801004 	addi	r2,r16,64
    20ac:	28800226 	beq	r5,r2,20b8 <_fclose_r+0x90>
    20b0:	8809883a 	mov	r4,r17
    20b4:	0002b800 	call	2b80 <_free_r>
    20b8:	80000c15 	stw	zero,48(r16)
    20bc:	81401117 	ldw	r5,68(r16)
    20c0:	28000326 	beq	r5,zero,20d0 <_fclose_r+0xa8>
    20c4:	8809883a 	mov	r4,r17
    20c8:	0002b800 	call	2b80 <_free_r>
    20cc:	80001115 	stw	zero,68(r16)
    20d0:	8000030d 	sth	zero,12(r16)
    20d4:	00026400 	call	2640 <__sfp_lock_release>
    20d8:	9005883a 	mov	r2,r18
    20dc:	dfc00317 	ldw	ra,12(sp)
    20e0:	dc800217 	ldw	r18,8(sp)
    20e4:	dc400117 	ldw	r17,4(sp)
    20e8:	dc000017 	ldw	r16,0(sp)
    20ec:	dec00404 	addi	sp,sp,16
    20f0:	f800283a 	ret
    20f4:	00026400 	call	2640 <__sfp_lock_release>
    20f8:	0025883a 	mov	r18,zero
    20fc:	9005883a 	mov	r2,r18
    2100:	dfc00317 	ldw	ra,12(sp)
    2104:	dc800217 	ldw	r18,8(sp)
    2108:	dc400117 	ldw	r17,4(sp)
    210c:	dc000017 	ldw	r16,0(sp)
    2110:	dec00404 	addi	sp,sp,16
    2114:	f800283a 	ret
    2118:	0025883a 	mov	r18,zero
    211c:	9005883a 	mov	r2,r18
    2120:	dfc00317 	ldw	ra,12(sp)
    2124:	dc800217 	ldw	r18,8(sp)
    2128:	dc400117 	ldw	r17,4(sp)
    212c:	dc000017 	ldw	r16,0(sp)
    2130:	dec00404 	addi	sp,sp,16
    2134:	f800283a 	ret
    2138:	8809883a 	mov	r4,r17
    213c:	00024340 	call	2434 <__sinit>
    2140:	8080030f 	ldh	r2,12(r16)
    2144:	103fc61e 	bne	r2,zero,2060 <_fclose_r+0x38>
    2148:	003fea06 	br	20f4 <_fclose_r+0xcc>
    214c:	81400417 	ldw	r5,16(r16)
    2150:	8809883a 	mov	r4,r17
    2154:	0002b800 	call	2b80 <_free_r>
    2158:	003fd106 	br	20a0 <_fclose_r+0x78>
    215c:	04bfffc4 	movi	r18,-1
    2160:	003fc906 	br	2088 <_fclose_r+0x60>

00002164 <fclose>:
    2164:	00800074 	movhi	r2,1
    2168:	109ab504 	addi	r2,r2,27348
    216c:	200b883a 	mov	r5,r4
    2170:	11000017 	ldw	r4,0(r2)
    2174:	00020281 	jmpi	2028 <_fclose_r>

00002178 <_fflush_r>:
    2178:	defffb04 	addi	sp,sp,-20
    217c:	dcc00315 	stw	r19,12(sp)
    2180:	dc400115 	stw	r17,4(sp)
    2184:	dfc00415 	stw	ra,16(sp)
    2188:	dc800215 	stw	r18,8(sp)
    218c:	dc000015 	stw	r16,0(sp)
    2190:	2027883a 	mov	r19,r4
    2194:	2823883a 	mov	r17,r5
    2198:	20000226 	beq	r4,zero,21a4 <_fflush_r+0x2c>
    219c:	20800e17 	ldw	r2,56(r4)
    21a0:	10005726 	beq	r2,zero,2300 <_fflush_r+0x188>
    21a4:	8880030b 	ldhu	r2,12(r17)
    21a8:	10c0020c 	andi	r3,r2,8
    21ac:	18ffffcc 	andi	r3,r3,65535
    21b0:	18e0001c 	xori	r3,r3,32768
    21b4:	18e00004 	addi	r3,r3,-32768
    21b8:	1800311e 	bne	r3,zero,2280 <_fflush_r+0x108>
    21bc:	89000117 	ldw	r4,4(r17)
    21c0:	10c20014 	ori	r3,r2,2048
    21c4:	88c0030d 	sth	r3,12(r17)
    21c8:	180b883a 	mov	r5,r3
    21cc:	0100520e 	bge	zero,r4,2318 <_fflush_r+0x1a0>
    21d0:	88c00a17 	ldw	r3,40(r17)
    21d4:	18002226 	beq	r3,zero,2260 <_fflush_r+0xe8>
    21d8:	1084000c 	andi	r2,r2,4096
    21dc:	10bfffcc 	andi	r2,r2,65535
    21e0:	10a0001c 	xori	r2,r2,32768
    21e4:	10a00004 	addi	r2,r2,-32768
    21e8:	10004e26 	beq	r2,zero,2324 <_fflush_r+0x1ac>
    21ec:	8c001417 	ldw	r16,80(r17)
    21f0:	2940010c 	andi	r5,r5,4
    21f4:	297fffcc 	andi	r5,r5,65535
    21f8:	2960001c 	xori	r5,r5,32768
    21fc:	29600004 	addi	r5,r5,-32768
    2200:	28000626 	beq	r5,zero,221c <_fflush_r+0xa4>
    2204:	89000117 	ldw	r4,4(r17)
    2208:	88800c17 	ldw	r2,48(r17)
    220c:	8121c83a 	sub	r16,r16,r4
    2210:	10000226 	beq	r2,zero,221c <_fflush_r+0xa4>
    2214:	88800f17 	ldw	r2,60(r17)
    2218:	80a1c83a 	sub	r16,r16,r2
    221c:	89400717 	ldw	r5,28(r17)
    2220:	9809883a 	mov	r4,r19
    2224:	800d883a 	mov	r6,r16
    2228:	000f883a 	mov	r7,zero
    222c:	183ee83a 	callr	r3
    2230:	8080281e 	bne	r16,r2,22d4 <_fflush_r+0x15c>
    2234:	8880030b 	ldhu	r2,12(r17)
    2238:	88c00417 	ldw	r3,16(r17)
    223c:	88000115 	stw	zero,4(r17)
    2240:	113dffcc 	andi	r4,r2,63487
    2244:	1084000c 	andi	r2,r2,4096
    2248:	10bfffcc 	andi	r2,r2,65535
    224c:	10a0001c 	xori	r2,r2,32768
    2250:	8900030d 	sth	r4,12(r17)
    2254:	88c00015 	stw	r3,0(r17)
    2258:	10a00004 	addi	r2,r2,-32768
    225c:	10002c1e 	bne	r2,zero,2310 <_fflush_r+0x198>
    2260:	0005883a 	mov	r2,zero
    2264:	dfc00417 	ldw	ra,16(sp)
    2268:	dcc00317 	ldw	r19,12(sp)
    226c:	dc800217 	ldw	r18,8(sp)
    2270:	dc400117 	ldw	r17,4(sp)
    2274:	dc000017 	ldw	r16,0(sp)
    2278:	dec00504 	addi	sp,sp,20
    227c:	f800283a 	ret
    2280:	8c800417 	ldw	r18,16(r17)
    2284:	903ff626 	beq	r18,zero,2260 <_fflush_r+0xe8>
    2288:	8c000017 	ldw	r16,0(r17)
    228c:	108000cc 	andi	r2,r2,3
    2290:	8c800015 	stw	r18,0(r17)
    2294:	84a1c83a 	sub	r16,r16,r18
    2298:	10001b1e 	bne	r2,zero,2308 <_fflush_r+0x190>
    229c:	88800517 	ldw	r2,20(r17)
    22a0:	88800215 	stw	r2,8(r17)
    22a4:	04000316 	blt	zero,r16,22b4 <_fflush_r+0x13c>
    22a8:	003fed06 	br	2260 <_fflush_r+0xe8>
    22ac:	90a5883a 	add	r18,r18,r2
    22b0:	043feb0e 	bge	zero,r16,2260 <_fflush_r+0xe8>
    22b4:	88800917 	ldw	r2,36(r17)
    22b8:	89400717 	ldw	r5,28(r17)
    22bc:	800f883a 	mov	r7,r16
    22c0:	900d883a 	mov	r6,r18
    22c4:	9809883a 	mov	r4,r19
    22c8:	103ee83a 	callr	r2
    22cc:	80a1c83a 	sub	r16,r16,r2
    22d0:	00bff616 	blt	zero,r2,22ac <_fflush_r+0x134>
    22d4:	88c0030b 	ldhu	r3,12(r17)
    22d8:	00bfffc4 	movi	r2,-1
    22dc:	18c01014 	ori	r3,r3,64
    22e0:	88c0030d 	sth	r3,12(r17)
    22e4:	dfc00417 	ldw	ra,16(sp)
    22e8:	dcc00317 	ldw	r19,12(sp)
    22ec:	dc800217 	ldw	r18,8(sp)
    22f0:	dc400117 	ldw	r17,4(sp)
    22f4:	dc000017 	ldw	r16,0(sp)
    22f8:	dec00504 	addi	sp,sp,20
    22fc:	f800283a 	ret
    2300:	00024340 	call	2434 <__sinit>
    2304:	003fa706 	br	21a4 <_fflush_r+0x2c>
    2308:	0005883a 	mov	r2,zero
    230c:	003fe406 	br	22a0 <_fflush_r+0x128>
    2310:	8c001415 	stw	r16,80(r17)
    2314:	003fd206 	br	2260 <_fflush_r+0xe8>
    2318:	88c00f17 	ldw	r3,60(r17)
    231c:	00ffac16 	blt	zero,r3,21d0 <_fflush_r+0x58>
    2320:	003fcf06 	br	2260 <_fflush_r+0xe8>
    2324:	89400717 	ldw	r5,28(r17)
    2328:	9809883a 	mov	r4,r19
    232c:	000d883a 	mov	r6,zero
    2330:	01c00044 	movi	r7,1
    2334:	183ee83a 	callr	r3
    2338:	1021883a 	mov	r16,r2
    233c:	00bfffc4 	movi	r2,-1
    2340:	80800326 	beq	r16,r2,2350 <_fflush_r+0x1d8>
    2344:	8940030b 	ldhu	r5,12(r17)
    2348:	88c00a17 	ldw	r3,40(r17)
    234c:	003fa806 	br	21f0 <_fflush_r+0x78>
    2350:	98c00017 	ldw	r3,0(r19)
    2354:	00800744 	movi	r2,29
    2358:	18bfde1e 	bne	r3,r2,22d4 <_fflush_r+0x15c>
    235c:	003fc006 	br	2260 <_fflush_r+0xe8>

00002360 <fflush>:
    2360:	200b883a 	mov	r5,r4
    2364:	20000426 	beq	r4,zero,2378 <fflush+0x18>
    2368:	00800074 	movhi	r2,1
    236c:	109ab504 	addi	r2,r2,27348
    2370:	11000017 	ldw	r4,0(r2)
    2374:	00021781 	jmpi	2178 <_fflush_r>
    2378:	00800074 	movhi	r2,1
    237c:	109ab404 	addi	r2,r2,27344
    2380:	11000017 	ldw	r4,0(r2)
    2384:	01400034 	movhi	r5,0
    2388:	29485e04 	addi	r5,r5,8568
    238c:	00034541 	jmpi	3454 <_fwalk_reent>

00002390 <__fp_lock>:
    2390:	0005883a 	mov	r2,zero
    2394:	f800283a 	ret

00002398 <__fp_unlock>:
    2398:	0005883a 	mov	r2,zero
    239c:	f800283a 	ret

000023a0 <_cleanup_r>:
    23a0:	01400034 	movhi	r5,0
    23a4:	29485904 	addi	r5,r5,8548
    23a8:	00033ac1 	jmpi	33ac <_fwalk>

000023ac <__sfmoreglue>:
    23ac:	defffc04 	addi	sp,sp,-16
    23b0:	dc800215 	stw	r18,8(sp)
    23b4:	2825883a 	mov	r18,r5
    23b8:	dc000015 	stw	r16,0(sp)
    23bc:	01401704 	movi	r5,92
    23c0:	2021883a 	mov	r16,r4
    23c4:	9009883a 	mov	r4,r18
    23c8:	dfc00315 	stw	ra,12(sp)
    23cc:	dc400115 	stw	r17,4(sp)
    23d0:	00020000 	call	2000 <__mulsi3>
    23d4:	8009883a 	mov	r4,r16
    23d8:	11400304 	addi	r5,r2,12
    23dc:	1023883a 	mov	r17,r2
    23e0:	00036dc0 	call	36dc <_malloc_r>
    23e4:	1021883a 	mov	r16,r2
    23e8:	10000726 	beq	r2,zero,2408 <__sfmoreglue+0x5c>
    23ec:	11000304 	addi	r4,r2,12
    23f0:	10000015 	stw	zero,0(r2)
    23f4:	14800115 	stw	r18,4(r2)
    23f8:	11000215 	stw	r4,8(r2)
    23fc:	000b883a 	mov	r5,zero
    2400:	880d883a 	mov	r6,r17
    2404:	0003fa00 	call	3fa0 <memset>
    2408:	8005883a 	mov	r2,r16
    240c:	dfc00317 	ldw	ra,12(sp)
    2410:	dc800217 	ldw	r18,8(sp)
    2414:	dc400117 	ldw	r17,4(sp)
    2418:	dc000017 	ldw	r16,0(sp)
    241c:	dec00404 	addi	sp,sp,16
    2420:	f800283a 	ret

00002424 <_cleanup>:
    2424:	00800074 	movhi	r2,1
    2428:	109ab404 	addi	r2,r2,27344
    242c:	11000017 	ldw	r4,0(r2)
    2430:	00023a01 	jmpi	23a0 <_cleanup_r>

00002434 <__sinit>:
    2434:	20800e17 	ldw	r2,56(r4)
    2438:	1000401e 	bne	r2,zero,253c <__sinit+0x108>
    243c:	21400117 	ldw	r5,4(r4)
    2440:	01800034 	movhi	r6,0
    2444:	3188e804 	addi	r6,r6,9120
    2448:	20c00217 	ldw	r3,8(r4)
    244c:	21800f15 	stw	r6,60(r4)
    2450:	2080bb04 	addi	r2,r4,748
    2454:	02400044 	movi	r9,1
    2458:	018000c4 	movi	r6,3
    245c:	2180b915 	stw	r6,740(r4)
    2460:	2080ba15 	stw	r2,744(r4)
    2464:	22400e15 	stw	r9,56(r4)
    2468:	20800317 	ldw	r2,12(r4)
    246c:	2000b815 	stw	zero,736(r4)
    2470:	02000034 	movhi	r8,0
    2474:	42111504 	addi	r8,r8,17492
    2478:	01c00034 	movhi	r7,0
    247c:	39d12a04 	addi	r7,r7,17576
    2480:	01800034 	movhi	r6,0
    2484:	31914c04 	addi	r6,r6,17712
    2488:	01000034 	movhi	r4,0
    248c:	21116304 	addi	r4,r4,17804
    2490:	02800104 	movi	r10,4
    2494:	28000015 	stw	zero,0(r5)
    2498:	28000115 	stw	zero,4(r5)
    249c:	28000215 	stw	zero,8(r5)
    24a0:	2a80030d 	sth	r10,12(r5)
    24a4:	2800038d 	sth	zero,14(r5)
    24a8:	28000415 	stw	zero,16(r5)
    24ac:	28000515 	stw	zero,20(r5)
    24b0:	28000615 	stw	zero,24(r5)
    24b4:	29400715 	stw	r5,28(r5)
    24b8:	2a000815 	stw	r8,32(r5)
    24bc:	29c00915 	stw	r7,36(r5)
    24c0:	29800a15 	stw	r6,40(r5)
    24c4:	29000b15 	stw	r4,44(r5)
    24c8:	01400284 	movi	r5,10
    24cc:	18000015 	stw	zero,0(r3)
    24d0:	18000115 	stw	zero,4(r3)
    24d4:	18000215 	stw	zero,8(r3)
    24d8:	1940030d 	sth	r5,12(r3)
    24dc:	1a40038d 	sth	r9,14(r3)
    24e0:	18000415 	stw	zero,16(r3)
    24e4:	18000515 	stw	zero,20(r3)
    24e8:	18000615 	stw	zero,24(r3)
    24ec:	18c00715 	stw	r3,28(r3)
    24f0:	1a000815 	stw	r8,32(r3)
    24f4:	19c00915 	stw	r7,36(r3)
    24f8:	19800a15 	stw	r6,40(r3)
    24fc:	19000b15 	stw	r4,44(r3)
    2500:	00c00484 	movi	r3,18
    2504:	10c0030d 	sth	r3,12(r2)
    2508:	00c00084 	movi	r3,2
    250c:	10000015 	stw	zero,0(r2)
    2510:	10000115 	stw	zero,4(r2)
    2514:	10000215 	stw	zero,8(r2)
    2518:	10c0038d 	sth	r3,14(r2)
    251c:	10000415 	stw	zero,16(r2)
    2520:	10000515 	stw	zero,20(r2)
    2524:	10000615 	stw	zero,24(r2)
    2528:	10800715 	stw	r2,28(r2)
    252c:	12000815 	stw	r8,32(r2)
    2530:	11c00915 	stw	r7,36(r2)
    2534:	11800a15 	stw	r6,40(r2)
    2538:	11000b15 	stw	r4,44(r2)
    253c:	f800283a 	ret

00002540 <__sfp>:
    2540:	defffc04 	addi	sp,sp,-16
    2544:	00800074 	movhi	r2,1
    2548:	109ab404 	addi	r2,r2,27344
    254c:	dc400115 	stw	r17,4(sp)
    2550:	14400017 	ldw	r17,0(r2)
    2554:	dc800215 	stw	r18,8(sp)
    2558:	dfc00315 	stw	ra,12(sp)
    255c:	88800e17 	ldw	r2,56(r17)
    2560:	dc000015 	stw	r16,0(sp)
    2564:	2025883a 	mov	r18,r4
    2568:	10002826 	beq	r2,zero,260c <__sfp+0xcc>
    256c:	8c40b804 	addi	r17,r17,736
    2570:	043fffc4 	movi	r16,-1
    2574:	89400117 	ldw	r5,4(r17)
    2578:	88800217 	ldw	r2,8(r17)
    257c:	297fffc4 	addi	r5,r5,-1
    2580:	28000a16 	blt	r5,zero,25ac <__sfp+0x6c>
    2584:	10c0030f 	ldh	r3,12(r2)
    2588:	18000c26 	beq	r3,zero,25bc <__sfp+0x7c>
    258c:	10c01a04 	addi	r3,r2,104
    2590:	00000206 	br	259c <__sfp+0x5c>
    2594:	19bfe90f 	ldh	r6,-92(r3)
    2598:	30000826 	beq	r6,zero,25bc <__sfp+0x7c>
    259c:	297fffc4 	addi	r5,r5,-1
    25a0:	18bffd04 	addi	r2,r3,-12
    25a4:	18c01704 	addi	r3,r3,92
    25a8:	2c3ffa1e 	bne	r5,r16,2594 <__sfp+0x54>
    25ac:	88800017 	ldw	r2,0(r17)
    25b0:	10001926 	beq	r2,zero,2618 <__sfp+0xd8>
    25b4:	1023883a 	mov	r17,r2
    25b8:	003fee06 	br	2574 <__sfp+0x34>
    25bc:	00ffffc4 	movi	r3,-1
    25c0:	10c0038d 	sth	r3,14(r2)
    25c4:	00c00044 	movi	r3,1
    25c8:	10c0030d 	sth	r3,12(r2)
    25cc:	10000015 	stw	zero,0(r2)
    25d0:	10000215 	stw	zero,8(r2)
    25d4:	10000115 	stw	zero,4(r2)
    25d8:	10000415 	stw	zero,16(r2)
    25dc:	10000515 	stw	zero,20(r2)
    25e0:	10000615 	stw	zero,24(r2)
    25e4:	10000c15 	stw	zero,48(r2)
    25e8:	10000d15 	stw	zero,52(r2)
    25ec:	10001115 	stw	zero,68(r2)
    25f0:	10001215 	stw	zero,72(r2)
    25f4:	dfc00317 	ldw	ra,12(sp)
    25f8:	dc800217 	ldw	r18,8(sp)
    25fc:	dc400117 	ldw	r17,4(sp)
    2600:	dc000017 	ldw	r16,0(sp)
    2604:	dec00404 	addi	sp,sp,16
    2608:	f800283a 	ret
    260c:	8809883a 	mov	r4,r17
    2610:	00024340 	call	2434 <__sinit>
    2614:	003fd506 	br	256c <__sfp+0x2c>
    2618:	9009883a 	mov	r4,r18
    261c:	01400104 	movi	r5,4
    2620:	00023ac0 	call	23ac <__sfmoreglue>
    2624:	88800015 	stw	r2,0(r17)
    2628:	103fe21e 	bne	r2,zero,25b4 <__sfp+0x74>
    262c:	00800304 	movi	r2,12
    2630:	90800015 	stw	r2,0(r18)
    2634:	0005883a 	mov	r2,zero
    2638:	003fee06 	br	25f4 <__sfp+0xb4>

0000263c <__sfp_lock_acquire>:
    263c:	f800283a 	ret

00002640 <__sfp_lock_release>:
    2640:	f800283a 	ret

00002644 <__sinit_lock_acquire>:
    2644:	f800283a 	ret

00002648 <__sinit_lock_release>:
    2648:	f800283a 	ret

0000264c <__fp_lock_all>:
    264c:	00800074 	movhi	r2,1
    2650:	109ab504 	addi	r2,r2,27348
    2654:	11000017 	ldw	r4,0(r2)
    2658:	01400034 	movhi	r5,0
    265c:	2948e404 	addi	r5,r5,9104
    2660:	00033ac1 	jmpi	33ac <_fwalk>

00002664 <__fp_unlock_all>:
    2664:	00800074 	movhi	r2,1
    2668:	109ab504 	addi	r2,r2,27348
    266c:	11000017 	ldw	r4,0(r2)
    2670:	01400034 	movhi	r5,0
    2674:	2948e604 	addi	r5,r5,9112
    2678:	00033ac1 	jmpi	33ac <_fwalk>

0000267c <_fopen_r>:
    267c:	defffa04 	addi	sp,sp,-24
    2680:	dcc00415 	stw	r19,16(sp)
    2684:	2827883a 	mov	r19,r5
    2688:	300b883a 	mov	r5,r6
    268c:	d80d883a 	mov	r6,sp
    2690:	dc800315 	stw	r18,12(sp)
    2694:	dc400215 	stw	r17,8(sp)
    2698:	dfc00515 	stw	ra,20(sp)
    269c:	dc000115 	stw	r16,4(sp)
    26a0:	2025883a 	mov	r18,r4
    26a4:	00097180 	call	9718 <__sflags>
    26a8:	1023883a 	mov	r17,r2
    26ac:	10002926 	beq	r2,zero,2754 <_fopen_r+0xd8>
    26b0:	9009883a 	mov	r4,r18
    26b4:	00025400 	call	2540 <__sfp>
    26b8:	1021883a 	mov	r16,r2
    26bc:	10002526 	beq	r2,zero,2754 <_fopen_r+0xd8>
    26c0:	d9800017 	ldw	r6,0(sp)
    26c4:	9009883a 	mov	r4,r18
    26c8:	980b883a 	mov	r5,r19
    26cc:	01c06d84 	movi	r7,438
    26d0:	000407c0 	call	407c <_open_r>
    26d4:	10001c16 	blt	r2,zero,2748 <_fopen_r+0xcc>
    26d8:	8080038d 	sth	r2,14(r16)
    26dc:	00800034 	movhi	r2,0
    26e0:	10911504 	addi	r2,r2,17492
    26e4:	80800815 	stw	r2,32(r16)
    26e8:	00800034 	movhi	r2,0
    26ec:	10912a04 	addi	r2,r2,17576
    26f0:	80800915 	stw	r2,36(r16)
    26f4:	00800034 	movhi	r2,0
    26f8:	10914c04 	addi	r2,r2,17712
    26fc:	88c0400c 	andi	r3,r17,256
    2700:	80800a15 	stw	r2,40(r16)
    2704:	00800034 	movhi	r2,0
    2708:	10916304 	addi	r2,r2,17804
    270c:	80800b15 	stw	r2,44(r16)
    2710:	18bfffcc 	andi	r2,r3,65535
    2714:	10a0001c 	xori	r2,r2,32768
    2718:	8440030d 	sth	r17,12(r16)
    271c:	84000715 	stw	r16,28(r16)
    2720:	10a00004 	addi	r2,r2,-32768
    2724:	1000141e 	bne	r2,zero,2778 <_fopen_r+0xfc>
    2728:	8005883a 	mov	r2,r16
    272c:	dfc00517 	ldw	ra,20(sp)
    2730:	dcc00417 	ldw	r19,16(sp)
    2734:	dc800317 	ldw	r18,12(sp)
    2738:	dc400217 	ldw	r17,8(sp)
    273c:	dc000117 	ldw	r16,4(sp)
    2740:	dec00604 	addi	sp,sp,24
    2744:	f800283a 	ret
    2748:	000263c0 	call	263c <__sfp_lock_acquire>
    274c:	8000030d 	sth	zero,12(r16)
    2750:	00026400 	call	2640 <__sfp_lock_release>
    2754:	0021883a 	mov	r16,zero
    2758:	8005883a 	mov	r2,r16
    275c:	dfc00517 	ldw	ra,20(sp)
    2760:	dcc00417 	ldw	r19,16(sp)
    2764:	dc800317 	ldw	r18,12(sp)
    2768:	dc400217 	ldw	r17,8(sp)
    276c:	dc000117 	ldw	r16,4(sp)
    2770:	dec00604 	addi	sp,sp,24
    2774:	f800283a 	ret
    2778:	9009883a 	mov	r4,r18
    277c:	800b883a 	mov	r5,r16
    2780:	000d883a 	mov	r6,zero
    2784:	01c00084 	movi	r7,2
    2788:	0002eac0 	call	2eac <_fseek_r>
    278c:	8005883a 	mov	r2,r16
    2790:	dfc00517 	ldw	ra,20(sp)
    2794:	dcc00417 	ldw	r19,16(sp)
    2798:	dc800317 	ldw	r18,12(sp)
    279c:	dc400217 	ldw	r17,8(sp)
    27a0:	dc000117 	ldw	r16,4(sp)
    27a4:	dec00604 	addi	sp,sp,24
    27a8:	f800283a 	ret

000027ac <fopen>:
    27ac:	00c00074 	movhi	r3,1
    27b0:	18dab504 	addi	r3,r3,27348
    27b4:	2005883a 	mov	r2,r4
    27b8:	19000017 	ldw	r4,0(r3)
    27bc:	280d883a 	mov	r6,r5
    27c0:	100b883a 	mov	r5,r2
    27c4:	000267c1 	jmpi	267c <_fopen_r>

000027c8 <_fread_r>:
    27c8:	defff504 	addi	sp,sp,-44
    27cc:	dd000515 	stw	r20,20(sp)
    27d0:	dcc00415 	stw	r19,16(sp)
    27d4:	2029883a 	mov	r20,r4
    27d8:	2827883a 	mov	r19,r5
    27dc:	3809883a 	mov	r4,r7
    27e0:	300b883a 	mov	r5,r6
    27e4:	ddc00815 	stw	r23,32(sp)
    27e8:	dd800715 	stw	r22,28(sp)
    27ec:	dd400615 	stw	r21,24(sp)
    27f0:	dc000115 	stw	r16,4(sp)
    27f4:	dfc00a15 	stw	ra,40(sp)
    27f8:	df000915 	stw	fp,36(sp)
    27fc:	dc800315 	stw	r18,12(sp)
    2800:	dc400215 	stw	r17,8(sp)
    2804:	302f883a 	mov	r23,r6
    2808:	382b883a 	mov	r21,r7
    280c:	00020000 	call	2000 <__mulsi3>
    2810:	102d883a 	mov	r22,r2
    2814:	dc000b17 	ldw	r16,44(sp)
    2818:	10002e26 	beq	r2,zero,28d4 <_fread_r+0x10c>
    281c:	a0000226 	beq	r20,zero,2828 <_fread_r+0x60>
    2820:	a0800e17 	ldw	r2,56(r20)
    2824:	10006726 	beq	r2,zero,29c4 <_fread_r+0x1fc>
    2828:	84400117 	ldw	r17,4(r16)
    282c:	88002b16 	blt	r17,zero,28dc <_fread_r+0x114>
    2830:	8080030b 	ldhu	r2,12(r16)
    2834:	8807883a 	mov	r3,r17
    2838:	1080008c 	andi	r2,r2,2
    283c:	10bfffcc 	andi	r2,r2,65535
    2840:	10a0001c 	xori	r2,r2,32768
    2844:	10a00004 	addi	r2,r2,-32768
    2848:	10002d1e 	bne	r2,zero,2900 <_fread_r+0x138>
    284c:	b025883a 	mov	r18,r22
    2850:	00000106 	br	2858 <_fread_r+0x90>
    2854:	84400117 	ldw	r17,4(r16)
    2858:	9809883a 	mov	r4,r19
    285c:	880d883a 	mov	r6,r17
    2860:	81400017 	ldw	r5,0(r16)
    2864:	8c805c2e 	bgeu	r17,r18,29d8 <_fread_r+0x210>
    2868:	0003e600 	call	3e60 <memcpy>
    286c:	80800017 	ldw	r2,0(r16)
    2870:	9c67883a 	add	r19,r19,r17
    2874:	9465c83a 	sub	r18,r18,r17
    2878:	1463883a 	add	r17,r2,r17
    287c:	a009883a 	mov	r4,r20
    2880:	800b883a 	mov	r5,r16
    2884:	84400015 	stw	r17,0(r16)
    2888:	00042040 	call	4204 <__srefill_r>
    288c:	103ff126 	beq	r2,zero,2854 <_fread_r+0x8c>
    2890:	b489c83a 	sub	r4,r22,r18
    2894:	b80b883a 	mov	r5,r23
    2898:	0010b240 	call	10b24 <__udivsi3>
    289c:	102b883a 	mov	r21,r2
    28a0:	a805883a 	mov	r2,r21
    28a4:	dfc00a17 	ldw	ra,40(sp)
    28a8:	df000917 	ldw	fp,36(sp)
    28ac:	ddc00817 	ldw	r23,32(sp)
    28b0:	dd800717 	ldw	r22,28(sp)
    28b4:	dd400617 	ldw	r21,24(sp)
    28b8:	dd000517 	ldw	r20,20(sp)
    28bc:	dcc00417 	ldw	r19,16(sp)
    28c0:	dc800317 	ldw	r18,12(sp)
    28c4:	dc400217 	ldw	r17,8(sp)
    28c8:	dc000117 	ldw	r16,4(sp)
    28cc:	dec00b04 	addi	sp,sp,44
    28d0:	f800283a 	ret
    28d4:	002b883a 	mov	r21,zero
    28d8:	003ff106 	br	28a0 <_fread_r+0xd8>
    28dc:	8080030b 	ldhu	r2,12(r16)
    28e0:	80000115 	stw	zero,4(r16)
    28e4:	0007883a 	mov	r3,zero
    28e8:	1080008c 	andi	r2,r2,2
    28ec:	10bfffcc 	andi	r2,r2,65535
    28f0:	10a0001c 	xori	r2,r2,32768
    28f4:	10a00004 	addi	r2,r2,-32768
    28f8:	0023883a 	mov	r17,zero
    28fc:	103fd326 	beq	r2,zero,284c <_fread_r+0x84>
    2900:	1823883a 	mov	r17,r3
    2904:	b0c0012e 	bgeu	r22,r3,290c <_fread_r+0x144>
    2908:	b023883a 	mov	r17,r22
    290c:	81400017 	ldw	r5,0(r16)
    2910:	9809883a 	mov	r4,r19
    2914:	880d883a 	mov	r6,r17
    2918:	0003e600 	call	3e60 <memcpy>
    291c:	80800117 	ldw	r2,4(r16)
    2920:	84800017 	ldw	r18,0(r16)
    2924:	81400c17 	ldw	r5,48(r16)
    2928:	1445c83a 	sub	r2,r2,r17
    292c:	9465883a 	add	r18,r18,r17
    2930:	84800015 	stw	r18,0(r16)
    2934:	80800115 	stw	r2,4(r16)
    2938:	9c67883a 	add	r19,r19,r17
    293c:	b463c83a 	sub	r17,r22,r17
    2940:	28002e26 	beq	r5,zero,29fc <_fread_r+0x234>
    2944:	883fd626 	beq	r17,zero,28a0 <_fread_r+0xd8>
    2948:	80801004 	addi	r2,r16,64
    294c:	28800326 	beq	r5,r2,295c <_fread_r+0x194>
    2950:	a009883a 	mov	r4,r20
    2954:	0002b800 	call	2b80 <_free_r>
    2958:	84800017 	ldw	r18,0(r16)
    295c:	80000c15 	stw	zero,48(r16)
    2960:	80c00517 	ldw	r3,20(r16)
    2964:	87000417 	ldw	fp,16(r16)
    2968:	d8c00015 	stw	r3,0(sp)
    296c:	00000106 	br	2974 <_fread_r+0x1ac>
    2970:	883fcb26 	beq	r17,zero,28a0 <_fread_r+0xd8>
    2974:	84c00415 	stw	r19,16(r16)
    2978:	84400515 	stw	r17,20(r16)
    297c:	84c00015 	stw	r19,0(r16)
    2980:	a009883a 	mov	r4,r20
    2984:	800b883a 	mov	r5,r16
    2988:	00042040 	call	4204 <__srefill_r>
    298c:	d8c00017 	ldw	r3,0(sp)
    2990:	81000117 	ldw	r4,4(r16)
    2994:	87000415 	stw	fp,16(r16)
    2998:	80c00515 	stw	r3,20(r16)
    299c:	84800015 	stw	r18,0(r16)
    29a0:	80000115 	stw	zero,4(r16)
    29a4:	8923c83a 	sub	r17,r17,r4
    29a8:	9927883a 	add	r19,r19,r4
    29ac:	103ff026 	beq	r2,zero,2970 <_fread_r+0x1a8>
    29b0:	b449c83a 	sub	r4,r22,r17
    29b4:	b80b883a 	mov	r5,r23
    29b8:	0010b240 	call	10b24 <__udivsi3>
    29bc:	102b883a 	mov	r21,r2
    29c0:	003fb706 	br	28a0 <_fread_r+0xd8>
    29c4:	a009883a 	mov	r4,r20
    29c8:	00024340 	call	2434 <__sinit>
    29cc:	84400117 	ldw	r17,4(r16)
    29d0:	883f970e 	bge	r17,zero,2830 <_fread_r+0x68>
    29d4:	003fc106 	br	28dc <_fread_r+0x114>
    29d8:	900d883a 	mov	r6,r18
    29dc:	0003e600 	call	3e60 <memcpy>
    29e0:	80800117 	ldw	r2,4(r16)
    29e4:	80c00017 	ldw	r3,0(r16)
    29e8:	1485c83a 	sub	r2,r2,r18
    29ec:	1ca5883a 	add	r18,r3,r18
    29f0:	80800115 	stw	r2,4(r16)
    29f4:	84800015 	stw	r18,0(r16)
    29f8:	003fa906 	br	28a0 <_fread_r+0xd8>
    29fc:	883fd81e 	bne	r17,zero,2960 <_fread_r+0x198>
    2a00:	003fa706 	br	28a0 <_fread_r+0xd8>

00002a04 <fread>:
    2a04:	00800074 	movhi	r2,1
    2a08:	109ab504 	addi	r2,r2,27348
    2a0c:	2011883a 	mov	r8,r4
    2a10:	11000017 	ldw	r4,0(r2)
    2a14:	defffe04 	addi	sp,sp,-8
    2a18:	2807883a 	mov	r3,r5
    2a1c:	3005883a 	mov	r2,r6
    2a20:	d9c00015 	stw	r7,0(sp)
    2a24:	400b883a 	mov	r5,r8
    2a28:	180d883a 	mov	r6,r3
    2a2c:	100f883a 	mov	r7,r2
    2a30:	dfc00115 	stw	ra,4(sp)
    2a34:	00027c80 	call	27c8 <_fread_r>
    2a38:	dfc00117 	ldw	ra,4(sp)
    2a3c:	dec00204 	addi	sp,sp,8
    2a40:	f800283a 	ret

00002a44 <_malloc_trim_r>:
    2a44:	defffb04 	addi	sp,sp,-20
    2a48:	dcc00315 	stw	r19,12(sp)
    2a4c:	dc800215 	stw	r18,8(sp)
    2a50:	dc400115 	stw	r17,4(sp)
    2a54:	dc000015 	stw	r16,0(sp)
    2a58:	2827883a 	mov	r19,r5
    2a5c:	dfc00415 	stw	ra,16(sp)
    2a60:	04400074 	movhi	r17,1
    2a64:	8c551904 	addi	r17,r17,21604
    2a68:	2021883a 	mov	r16,r4
    2a6c:	00119000 	call	11900 <__malloc_lock>
    2a70:	88800217 	ldw	r2,8(r17)
    2a74:	14800117 	ldw	r18,4(r2)
    2a78:	00bfff04 	movi	r2,-4
    2a7c:	90a4703a 	and	r18,r18,r2
    2a80:	9083fbc4 	addi	r2,r18,4079
    2a84:	14e7c83a 	sub	r19,r2,r19
    2a88:	9826d33a 	srli	r19,r19,12
    2a8c:	0083ffc4 	movi	r2,4095
    2a90:	9cffffc4 	addi	r19,r19,-1
    2a94:	9826933a 	slli	r19,r19,12
    2a98:	14c0060e 	bge	r2,r19,2ab4 <_malloc_trim_r+0x70>
    2a9c:	8009883a 	mov	r4,r16
    2aa0:	000b883a 	mov	r5,zero
    2aa4:	00043f00 	call	43f0 <_sbrk_r>
    2aa8:	88c00217 	ldw	r3,8(r17)
    2aac:	1c87883a 	add	r3,r3,r18
    2ab0:	10c00a26 	beq	r2,r3,2adc <_malloc_trim_r+0x98>
    2ab4:	8009883a 	mov	r4,r16
    2ab8:	00119200 	call	11920 <__malloc_unlock>
    2abc:	0005883a 	mov	r2,zero
    2ac0:	dfc00417 	ldw	ra,16(sp)
    2ac4:	dcc00317 	ldw	r19,12(sp)
    2ac8:	dc800217 	ldw	r18,8(sp)
    2acc:	dc400117 	ldw	r17,4(sp)
    2ad0:	dc000017 	ldw	r16,0(sp)
    2ad4:	dec00504 	addi	sp,sp,20
    2ad8:	f800283a 	ret
    2adc:	8009883a 	mov	r4,r16
    2ae0:	04cbc83a 	sub	r5,zero,r19
    2ae4:	00043f00 	call	43f0 <_sbrk_r>
    2ae8:	00ffffc4 	movi	r3,-1
    2aec:	10c01326 	beq	r2,r3,2b3c <_malloc_trim_r+0xf8>
    2af0:	008000b4 	movhi	r2,2
    2af4:	10a1a704 	addi	r2,r2,-31076
    2af8:	11000017 	ldw	r4,0(r2)
    2afc:	88c00217 	ldw	r3,8(r17)
    2b00:	94e5c83a 	sub	r18,r18,r19
    2b04:	94800054 	ori	r18,r18,1
    2b08:	24e7c83a 	sub	r19,r4,r19
    2b0c:	1c800115 	stw	r18,4(r3)
    2b10:	8009883a 	mov	r4,r16
    2b14:	14c00015 	stw	r19,0(r2)
    2b18:	00119200 	call	11920 <__malloc_unlock>
    2b1c:	00800044 	movi	r2,1
    2b20:	dfc00417 	ldw	ra,16(sp)
    2b24:	dcc00317 	ldw	r19,12(sp)
    2b28:	dc800217 	ldw	r18,8(sp)
    2b2c:	dc400117 	ldw	r17,4(sp)
    2b30:	dc000017 	ldw	r16,0(sp)
    2b34:	dec00504 	addi	sp,sp,20
    2b38:	f800283a 	ret
    2b3c:	8009883a 	mov	r4,r16
    2b40:	000b883a 	mov	r5,zero
    2b44:	00043f00 	call	43f0 <_sbrk_r>
    2b48:	88c00217 	ldw	r3,8(r17)
    2b4c:	014003c4 	movi	r5,15
    2b50:	10c9c83a 	sub	r4,r2,r3
    2b54:	293fd70e 	bge	r5,r4,2ab4 <_malloc_trim_r+0x70>
    2b58:	01400074 	movhi	r5,1
    2b5c:	295ab604 	addi	r5,r5,27352
    2b60:	29400017 	ldw	r5,0(r5)
    2b64:	21000054 	ori	r4,r4,1
    2b68:	19000115 	stw	r4,4(r3)
    2b6c:	1145c83a 	sub	r2,r2,r5
    2b70:	014000b4 	movhi	r5,2
    2b74:	2961a704 	addi	r5,r5,-31076
    2b78:	28800015 	stw	r2,0(r5)
    2b7c:	003fcd06 	br	2ab4 <_malloc_trim_r+0x70>

00002b80 <_free_r>:
    2b80:	defffd04 	addi	sp,sp,-12
    2b84:	dc400115 	stw	r17,4(sp)
    2b88:	dc000015 	stw	r16,0(sp)
    2b8c:	dfc00215 	stw	ra,8(sp)
    2b90:	2821883a 	mov	r16,r5
    2b94:	2023883a 	mov	r17,r4
    2b98:	28004b26 	beq	r5,zero,2cc8 <_free_r+0x148>
    2b9c:	00119000 	call	11900 <__malloc_lock>
    2ba0:	823fff17 	ldw	r8,-4(r16)
    2ba4:	00bfff84 	movi	r2,-2
    2ba8:	81bffe04 	addi	r6,r16,-8
    2bac:	4084703a 	and	r2,r8,r2
    2bb0:	3087883a 	add	r3,r6,r2
    2bb4:	01400074 	movhi	r5,1
    2bb8:	29551904 	addi	r5,r5,21604
    2bbc:	1a400117 	ldw	r9,4(r3)
    2bc0:	29000217 	ldw	r4,8(r5)
    2bc4:	01ffff04 	movi	r7,-4
    2bc8:	49ce703a 	and	r7,r9,r7
    2bcc:	20c06526 	beq	r4,r3,2d64 <_free_r+0x1e4>
    2bd0:	19c00115 	stw	r7,4(r3)
    2bd4:	4200004c 	andi	r8,r8,1
    2bd8:	40003026 	beq	r8,zero,2c9c <_free_r+0x11c>
    2bdc:	0009883a 	mov	r4,zero
    2be0:	19d1883a 	add	r8,r3,r7
    2be4:	42000117 	ldw	r8,4(r8)
    2be8:	4200004c 	andi	r8,r8,1
    2bec:	4000061e 	bne	r8,zero,2c08 <_free_r+0x88>
    2bf0:	11c5883a 	add	r2,r2,r7
    2bf4:	19c00217 	ldw	r7,8(r3)
    2bf8:	20004e26 	beq	r4,zero,2d34 <_free_r+0x1b4>
    2bfc:	18c00317 	ldw	r3,12(r3)
    2c00:	38c00315 	stw	r3,12(r7)
    2c04:	19c00215 	stw	r7,8(r3)
    2c08:	11c00054 	ori	r7,r2,1
    2c0c:	3087883a 	add	r3,r6,r2
    2c10:	31c00115 	stw	r7,4(r6)
    2c14:	18800015 	stw	r2,0(r3)
    2c18:	20001a1e 	bne	r4,zero,2c84 <_free_r+0x104>
    2c1c:	00c07fc4 	movi	r3,511
    2c20:	18802e2e 	bgeu	r3,r2,2cdc <_free_r+0x15c>
    2c24:	1006d27a 	srli	r3,r2,9
    2c28:	01000104 	movi	r4,4
    2c2c:	20c06636 	bltu	r4,r3,2dc8 <_free_r+0x248>
    2c30:	1008d1ba 	srli	r4,r2,6
    2c34:	21000e04 	addi	r4,r4,56
    2c38:	210f883a 	add	r7,r4,r4
    2c3c:	39cf883a 	add	r7,r7,r7
    2c40:	39cf883a 	add	r7,r7,r7
    2c44:	29cf883a 	add	r7,r5,r7
    2c48:	38c00217 	ldw	r3,8(r7)
    2c4c:	01400074 	movhi	r5,1
    2c50:	29551904 	addi	r5,r5,21604
    2c54:	19c06126 	beq	r3,r7,2ddc <_free_r+0x25c>
    2c58:	013fff04 	movi	r4,-4
    2c5c:	19400117 	ldw	r5,4(r3)
    2c60:	290a703a 	and	r5,r5,r4
    2c64:	1140022e 	bgeu	r2,r5,2c70 <_free_r+0xf0>
    2c68:	18c00217 	ldw	r3,8(r3)
    2c6c:	38fffb1e 	bne	r7,r3,2c5c <_free_r+0xdc>
    2c70:	18800317 	ldw	r2,12(r3)
    2c74:	30800315 	stw	r2,12(r6)
    2c78:	30c00215 	stw	r3,8(r6)
    2c7c:	11800215 	stw	r6,8(r2)
    2c80:	19800315 	stw	r6,12(r3)
    2c84:	8809883a 	mov	r4,r17
    2c88:	dfc00217 	ldw	ra,8(sp)
    2c8c:	dc400117 	ldw	r17,4(sp)
    2c90:	dc000017 	ldw	r16,0(sp)
    2c94:	dec00304 	addi	sp,sp,12
    2c98:	00119201 	jmpi	11920 <__malloc_unlock>
    2c9c:	813ffe17 	ldw	r4,-8(r16)
    2ca0:	2a400204 	addi	r9,r5,8
    2ca4:	310dc83a 	sub	r6,r6,r4
    2ca8:	32000217 	ldw	r8,8(r6)
    2cac:	1105883a 	add	r2,r2,r4
    2cb0:	42404326 	beq	r8,r9,2dc0 <_free_r+0x240>
    2cb4:	32400317 	ldw	r9,12(r6)
    2cb8:	0009883a 	mov	r4,zero
    2cbc:	42400315 	stw	r9,12(r8)
    2cc0:	4a000215 	stw	r8,8(r9)
    2cc4:	003fc606 	br	2be0 <_free_r+0x60>
    2cc8:	dfc00217 	ldw	ra,8(sp)
    2ccc:	dc400117 	ldw	r17,4(sp)
    2cd0:	dc000017 	ldw	r16,0(sp)
    2cd4:	dec00304 	addi	sp,sp,12
    2cd8:	f800283a 	ret
    2cdc:	1004d0fa 	srli	r2,r2,3
    2ce0:	02000044 	movi	r8,1
    2ce4:	29c00117 	ldw	r7,4(r5)
    2ce8:	1087883a 	add	r3,r2,r2
    2cec:	18c7883a 	add	r3,r3,r3
    2cf0:	1005d0ba 	srai	r2,r2,2
    2cf4:	18c7883a 	add	r3,r3,r3
    2cf8:	28c7883a 	add	r3,r5,r3
    2cfc:	19000217 	ldw	r4,8(r3)
    2d00:	4084983a 	sll	r2,r8,r2
    2d04:	30c00315 	stw	r3,12(r6)
    2d08:	31000215 	stw	r4,8(r6)
    2d0c:	11c4b03a 	or	r2,r2,r7
    2d10:	21800315 	stw	r6,12(r4)
    2d14:	8809883a 	mov	r4,r17
    2d18:	28800115 	stw	r2,4(r5)
    2d1c:	19800215 	stw	r6,8(r3)
    2d20:	dfc00217 	ldw	ra,8(sp)
    2d24:	dc400117 	ldw	r17,4(sp)
    2d28:	dc000017 	ldw	r16,0(sp)
    2d2c:	dec00304 	addi	sp,sp,12
    2d30:	00119201 	jmpi	11920 <__malloc_unlock>
    2d34:	02000074 	movhi	r8,1
    2d38:	42151b04 	addi	r8,r8,21612
    2d3c:	3a3faf1e 	bne	r7,r8,2bfc <_free_r+0x7c>
    2d40:	29800515 	stw	r6,20(r5)
    2d44:	29800415 	stw	r6,16(r5)
    2d48:	11000054 	ori	r4,r2,1
    2d4c:	3087883a 	add	r3,r6,r2
    2d50:	31c00315 	stw	r7,12(r6)
    2d54:	31c00215 	stw	r7,8(r6)
    2d58:	31000115 	stw	r4,4(r6)
    2d5c:	18800015 	stw	r2,0(r3)
    2d60:	003fc806 	br	2c84 <_free_r+0x104>
    2d64:	4200004c 	andi	r8,r8,1
    2d68:	3885883a 	add	r2,r7,r2
    2d6c:	4000071e 	bne	r8,zero,2d8c <_free_r+0x20c>
    2d70:	81fffe17 	ldw	r7,-8(r16)
    2d74:	31cdc83a 	sub	r6,r6,r7
    2d78:	30c00317 	ldw	r3,12(r6)
    2d7c:	31000217 	ldw	r4,8(r6)
    2d80:	11c5883a 	add	r2,r2,r7
    2d84:	20c00315 	stw	r3,12(r4)
    2d88:	19000215 	stw	r4,8(r3)
    2d8c:	00c00074 	movhi	r3,1
    2d90:	18dab704 	addi	r3,r3,27356
    2d94:	18c00017 	ldw	r3,0(r3)
    2d98:	11000054 	ori	r4,r2,1
    2d9c:	31000115 	stw	r4,4(r6)
    2da0:	29800215 	stw	r6,8(r5)
    2da4:	10ffb736 	bltu	r2,r3,2c84 <_free_r+0x104>
    2da8:	008000b4 	movhi	r2,2
    2dac:	10a19b04 	addi	r2,r2,-31124
    2db0:	11400017 	ldw	r5,0(r2)
    2db4:	8809883a 	mov	r4,r17
    2db8:	0002a440 	call	2a44 <_malloc_trim_r>
    2dbc:	003fb106 	br	2c84 <_free_r+0x104>
    2dc0:	01000044 	movi	r4,1
    2dc4:	003f8606 	br	2be0 <_free_r+0x60>
    2dc8:	01000504 	movi	r4,20
    2dcc:	20c00b36 	bltu	r4,r3,2dfc <_free_r+0x27c>
    2dd0:	190016c4 	addi	r4,r3,91
    2dd4:	210f883a 	add	r7,r4,r4
    2dd8:	003f9806 	br	2c3c <_free_r+0xbc>
    2ddc:	2009d0ba 	srai	r4,r4,2
    2de0:	00800044 	movi	r2,1
    2de4:	29c00117 	ldw	r7,4(r5)
    2de8:	1108983a 	sll	r4,r2,r4
    2dec:	1805883a 	mov	r2,r3
    2df0:	21c8b03a 	or	r4,r4,r7
    2df4:	29000115 	stw	r4,4(r5)
    2df8:	003f9e06 	br	2c74 <_free_r+0xf4>
    2dfc:	01001504 	movi	r4,84
    2e00:	20c00436 	bltu	r4,r3,2e14 <_free_r+0x294>
    2e04:	1008d33a 	srli	r4,r2,12
    2e08:	21001b84 	addi	r4,r4,110
    2e0c:	210f883a 	add	r7,r4,r4
    2e10:	003f8a06 	br	2c3c <_free_r+0xbc>
    2e14:	01005504 	movi	r4,340
    2e18:	20c00436 	bltu	r4,r3,2e2c <_free_r+0x2ac>
    2e1c:	1008d3fa 	srli	r4,r2,15
    2e20:	21001dc4 	addi	r4,r4,119
    2e24:	210f883a 	add	r7,r4,r4
    2e28:	003f8406 	br	2c3c <_free_r+0xbc>
    2e2c:	01015504 	movi	r4,1364
    2e30:	20c00436 	bltu	r4,r3,2e44 <_free_r+0x2c4>
    2e34:	1008d4ba 	srli	r4,r2,18
    2e38:	21001f04 	addi	r4,r4,124
    2e3c:	210f883a 	add	r7,r4,r4
    2e40:	003f7e06 	br	2c3c <_free_r+0xbc>
    2e44:	01c03f04 	movi	r7,252
    2e48:	01001f84 	movi	r4,126
    2e4c:	003f7b06 	br	2c3c <_free_r+0xbc>

00002e50 <fscanf>:
    2e50:	defffd04 	addi	sp,sp,-12
    2e54:	2005883a 	mov	r2,r4
    2e58:	dfc00015 	stw	ra,0(sp)
    2e5c:	d9800115 	stw	r6,4(sp)
    2e60:	d9c00215 	stw	r7,8(sp)
    2e64:	00c00074 	movhi	r3,1
    2e68:	18dab504 	addi	r3,r3,27348
    2e6c:	19000017 	ldw	r4,0(r3)
    2e70:	280d883a 	mov	r6,r5
    2e74:	d9c00104 	addi	r7,sp,4
    2e78:	100b883a 	mov	r5,r2
    2e7c:	00064f40 	call	64f4 <__svfscanf_r>
    2e80:	dfc00017 	ldw	ra,0(sp)
    2e84:	dec00304 	addi	sp,sp,12
    2e88:	f800283a 	ret

00002e8c <_fscanf_r>:
    2e8c:	defffe04 	addi	sp,sp,-8
    2e90:	dfc00015 	stw	ra,0(sp)
    2e94:	d9c00115 	stw	r7,4(sp)
    2e98:	d9c00104 	addi	r7,sp,4
    2e9c:	00064f40 	call	64f4 <__svfscanf_r>
    2ea0:	dfc00017 	ldw	ra,0(sp)
    2ea4:	dec00204 	addi	sp,sp,8
    2ea8:	f800283a 	ret

00002eac <_fseek_r>:
    2eac:	deffe804 	addi	sp,sp,-96
    2eb0:	dd001315 	stw	r20,76(sp)
    2eb4:	dc801115 	stw	r18,68(sp)
    2eb8:	dc401015 	stw	r17,64(sp)
    2ebc:	dc000f15 	stw	r16,60(sp)
    2ec0:	dfc01715 	stw	ra,92(sp)
    2ec4:	ddc01615 	stw	r23,88(sp)
    2ec8:	dd801515 	stw	r22,84(sp)
    2ecc:	dd401415 	stw	r21,80(sp)
    2ed0:	dcc01215 	stw	r19,72(sp)
    2ed4:	2023883a 	mov	r17,r4
    2ed8:	2821883a 	mov	r16,r5
    2edc:	3029883a 	mov	r20,r6
    2ee0:	3825883a 	mov	r18,r7
    2ee4:	20000226 	beq	r4,zero,2ef0 <_fseek_r+0x44>
    2ee8:	20800e17 	ldw	r2,56(r4)
    2eec:	10006226 	beq	r2,zero,3078 <_fseek_r+0x1cc>
    2ef0:	80c0030b 	ldhu	r3,12(r16)
    2ef4:	00804204 	movi	r2,264
    2ef8:	18c0420c 	andi	r3,r3,264
    2efc:	18806326 	beq	r3,r2,308c <_fseek_r+0x1e0>
    2f00:	84c00a17 	ldw	r19,40(r16)
    2f04:	98010226 	beq	r19,zero,3310 <_fseek_r+0x464>
    2f08:	00800044 	movi	r2,1
    2f0c:	90803d26 	beq	r18,r2,3004 <_fseek_r+0x158>
    2f10:	00800084 	movi	r2,2
    2f14:	90800126 	beq	r18,r2,2f1c <_fseek_r+0x70>
    2f18:	90002c1e 	bne	r18,zero,2fcc <_fseek_r+0x120>
    2f1c:	80800417 	ldw	r2,16(r16)
    2f20:	002d883a 	mov	r22,zero
    2f24:	002b883a 	mov	r21,zero
    2f28:	1000e526 	beq	r2,zero,32c0 <_fseek_r+0x414>
    2f2c:	80c0030b 	ldhu	r3,12(r16)
    2f30:	1882068c 	andi	r2,r3,2074
    2f34:	1809883a 	mov	r4,r3
    2f38:	10000a1e 	bne	r2,zero,2f64 <_fseek_r+0xb8>
    2f3c:	1881000c 	andi	r2,r3,1024
    2f40:	10bfffcc 	andi	r2,r2,65535
    2f44:	10a0001c 	xori	r2,r2,32768
    2f48:	10a00004 	addi	r2,r2,-32768
    2f4c:	1000631e 	bne	r2,zero,30dc <_fseek_r+0x230>
    2f50:	00800034 	movhi	r2,0
    2f54:	10914c04 	addi	r2,r2,17712
    2f58:	98805026 	beq	r19,r2,309c <_fseek_r+0x1f0>
    2f5c:	18c20014 	ori	r3,r3,2048
    2f60:	80c0030d 	sth	r3,12(r16)
    2f64:	8809883a 	mov	r4,r17
    2f68:	800b883a 	mov	r5,r16
    2f6c:	00021780 	call	2178 <_fflush_r>
    2f70:	1000181e 	bne	r2,zero,2fd4 <_fseek_r+0x128>
    2f74:	81400717 	ldw	r5,28(r16)
    2f78:	8809883a 	mov	r4,r17
    2f7c:	a00d883a 	mov	r6,r20
    2f80:	900f883a 	mov	r7,r18
    2f84:	983ee83a 	callr	r19
    2f88:	00ffffc4 	movi	r3,-1
    2f8c:	10c01126 	beq	r2,r3,2fd4 <_fseek_r+0x128>
    2f90:	81400c17 	ldw	r5,48(r16)
    2f94:	28000526 	beq	r5,zero,2fac <_fseek_r+0x100>
    2f98:	80801004 	addi	r2,r16,64
    2f9c:	28800226 	beq	r5,r2,2fa8 <_fseek_r+0xfc>
    2fa0:	8809883a 	mov	r4,r17
    2fa4:	0002b800 	call	2b80 <_free_r>
    2fa8:	80000c15 	stw	zero,48(r16)
    2fac:	8080030b 	ldhu	r2,12(r16)
    2fb0:	80c00417 	ldw	r3,16(r16)
    2fb4:	80000115 	stw	zero,4(r16)
    2fb8:	10bdf7cc 	andi	r2,r2,63455
    2fbc:	8080030d 	sth	r2,12(r16)
    2fc0:	80c00015 	stw	r3,0(r16)
    2fc4:	0005883a 	mov	r2,zero
    2fc8:	00000306 	br	2fd8 <_fseek_r+0x12c>
    2fcc:	00800584 	movi	r2,22
    2fd0:	88800015 	stw	r2,0(r17)
    2fd4:	00bfffc4 	movi	r2,-1
    2fd8:	dfc01717 	ldw	ra,92(sp)
    2fdc:	ddc01617 	ldw	r23,88(sp)
    2fe0:	dd801517 	ldw	r22,84(sp)
    2fe4:	dd401417 	ldw	r21,80(sp)
    2fe8:	dd001317 	ldw	r20,76(sp)
    2fec:	dcc01217 	ldw	r19,72(sp)
    2ff0:	dc801117 	ldw	r18,68(sp)
    2ff4:	dc401017 	ldw	r17,64(sp)
    2ff8:	dc000f17 	ldw	r16,60(sp)
    2ffc:	dec01804 	addi	sp,sp,96
    3000:	f800283a 	ret
    3004:	8809883a 	mov	r4,r17
    3008:	800b883a 	mov	r5,r16
    300c:	00021780 	call	2178 <_fflush_r>
    3010:	8080030b 	ldhu	r2,12(r16)
    3014:	10c4000c 	andi	r3,r2,4096
    3018:	18ffffcc 	andi	r3,r3,65535
    301c:	18e0001c 	xori	r3,r3,32768
    3020:	18e00004 	addi	r3,r3,-32768
    3024:	18007d26 	beq	r3,zero,321c <_fseek_r+0x370>
    3028:	85401417 	ldw	r21,80(r16)
    302c:	10c0010c 	andi	r3,r2,4
    3030:	18ffffcc 	andi	r3,r3,65535
    3034:	18e0001c 	xori	r3,r3,32768
    3038:	18e00004 	addi	r3,r3,-32768
    303c:	18005f1e 	bne	r3,zero,31bc <_fseek_r+0x310>
    3040:	1080020c 	andi	r2,r2,8
    3044:	10bfffcc 	andi	r2,r2,65535
    3048:	10a0001c 	xori	r2,r2,32768
    304c:	10a00004 	addi	r2,r2,-32768
    3050:	10007026 	beq	r2,zero,3214 <_fseek_r+0x368>
    3054:	80c00017 	ldw	r3,0(r16)
    3058:	80800417 	ldw	r2,16(r16)
    305c:	18000226 	beq	r3,zero,3068 <_fseek_r+0x1bc>
    3060:	1887c83a 	sub	r3,r3,r2
    3064:	a8eb883a 	add	r21,r21,r3
    3068:	a569883a 	add	r20,r20,r21
    306c:	05800044 	movi	r22,1
    3070:	0025883a 	mov	r18,zero
    3074:	003fac06 	br	2f28 <_fseek_r+0x7c>
    3078:	00024340 	call	2434 <__sinit>
    307c:	80c0030b 	ldhu	r3,12(r16)
    3080:	00804204 	movi	r2,264
    3084:	18c0420c 	andi	r3,r3,264
    3088:	18bf9d1e 	bne	r3,r2,2f00 <_fseek_r+0x54>
    308c:	8809883a 	mov	r4,r17
    3090:	800b883a 	mov	r5,r16
    3094:	00021780 	call	2178 <_fflush_r>
    3098:	003f9906 	br	2f00 <_fseek_r+0x54>
    309c:	8140038f 	ldh	r5,14(r16)
    30a0:	283fae16 	blt	r5,zero,2f5c <_fseek_r+0xb0>
    30a4:	8809883a 	mov	r4,r17
    30a8:	d80d883a 	mov	r6,sp
    30ac:	00033440 	call	3344 <_fstat_r>
    30b0:	1000741e 	bne	r2,zero,3284 <_fseek_r+0x3d8>
    30b4:	d8c00117 	ldw	r3,4(sp)
    30b8:	00a00014 	movui	r2,32768
    30bc:	18fc000c 	andi	r3,r3,61440
    30c0:	1880701e 	bne	r3,r2,3284 <_fseek_r+0x3d8>
    30c4:	8100030b 	ldhu	r4,12(r16)
    30c8:	00810004 	movi	r2,1024
    30cc:	80801315 	stw	r2,76(r16)
    30d0:	2084b03a 	or	r2,r4,r2
    30d4:	1009883a 	mov	r4,r2
    30d8:	8080030d 	sth	r2,12(r16)
    30dc:	90003f1e 	bne	r18,zero,31dc <_fseek_r+0x330>
    30e0:	a02f883a 	mov	r23,r20
    30e4:	b000461e 	bne	r22,zero,3200 <_fseek_r+0x354>
    30e8:	2084000c 	andi	r2,r4,4096
    30ec:	10bfffcc 	andi	r2,r2,65535
    30f0:	10a0001c 	xori	r2,r2,32768
    30f4:	10a00004 	addi	r2,r2,-32768
    30f8:	10007526 	beq	r2,zero,32d0 <_fseek_r+0x424>
    30fc:	80801417 	ldw	r2,80(r16)
    3100:	80c00117 	ldw	r3,4(r16)
    3104:	81400c17 	ldw	r5,48(r16)
    3108:	10ebc83a 	sub	r21,r2,r3
    310c:	28007926 	beq	r5,zero,32f4 <_fseek_r+0x448>
    3110:	81c00f17 	ldw	r7,60(r16)
    3114:	a9ebc83a 	sub	r21,r21,r7
    3118:	80800e17 	ldw	r2,56(r16)
    311c:	81800417 	ldw	r6,16(r16)
    3120:	a8eb883a 	add	r21,r21,r3
    3124:	1185c83a 	sub	r2,r2,r6
    3128:	a8abc83a 	sub	r21,r21,r2
    312c:	3885883a 	add	r2,r7,r2
    3130:	2208000c 	andi	r8,r4,8192
    3134:	423fffcc 	andi	r8,r8,65535
    3138:	4220001c 	xori	r8,r8,32768
    313c:	42200004 	addi	r8,r8,-32768
    3140:	4000031e 	bne	r8,zero,3150 <_fseek_r+0x2a4>
    3144:	bd400216 	blt	r23,r21,3150 <_fseek_r+0x2a4>
    3148:	a887883a 	add	r3,r21,r2
    314c:	b8c03d36 	bltu	r23,r3,3244 <_fseek_r+0x398>
    3150:	85401317 	ldw	r21,76(r16)
    3154:	81400717 	ldw	r5,28(r16)
    3158:	8809883a 	mov	r4,r17
    315c:	056bc83a 	sub	r21,zero,r21
    3160:	bd6a703a 	and	r21,r23,r21
    3164:	a80d883a 	mov	r6,r21
    3168:	000f883a 	mov	r7,zero
    316c:	983ee83a 	callr	r19
    3170:	00ffffc4 	movi	r3,-1
    3174:	10ff7b26 	beq	r2,r3,2f64 <_fseek_r+0xb8>
    3178:	80800417 	ldw	r2,16(r16)
    317c:	81400c17 	ldw	r5,48(r16)
    3180:	80000115 	stw	zero,4(r16)
    3184:	80800015 	stw	r2,0(r16)
    3188:	28000526 	beq	r5,zero,31a0 <_fseek_r+0x2f4>
    318c:	80801004 	addi	r2,r16,64
    3190:	28800226 	beq	r5,r2,319c <_fseek_r+0x2f0>
    3194:	8809883a 	mov	r4,r17
    3198:	0002b800 	call	2b80 <_free_r>
    319c:	80000c15 	stw	zero,48(r16)
    31a0:	8080030b 	ldhu	r2,12(r16)
    31a4:	bd6fc83a 	sub	r23,r23,r21
    31a8:	10bff7cc 	andi	r2,r2,65503
    31ac:	8080030d 	sth	r2,12(r16)
    31b0:	b800361e 	bne	r23,zero,328c <_fseek_r+0x3e0>
    31b4:	0005883a 	mov	r2,zero
    31b8:	003f8706 	br	2fd8 <_fseek_r+0x12c>
    31bc:	80c00117 	ldw	r3,4(r16)
    31c0:	80800c17 	ldw	r2,48(r16)
    31c4:	a8ebc83a 	sub	r21,r21,r3
    31c8:	10001226 	beq	r2,zero,3214 <_fseek_r+0x368>
    31cc:	80c00f17 	ldw	r3,60(r16)
    31d0:	80800417 	ldw	r2,16(r16)
    31d4:	a8ebc83a 	sub	r21,r21,r3
    31d8:	003fa306 	br	3068 <_fseek_r+0x1bc>
    31dc:	8140038f 	ldh	r5,14(r16)
    31e0:	8809883a 	mov	r4,r17
    31e4:	d80d883a 	mov	r6,sp
    31e8:	00033440 	call	3344 <_fstat_r>
    31ec:	103f5d1e 	bne	r2,zero,2f64 <_fseek_r+0xb8>
    31f0:	ddc00417 	ldw	r23,16(sp)
    31f4:	8100030b 	ldhu	r4,12(r16)
    31f8:	a5ef883a 	add	r23,r20,r23
    31fc:	b03fba26 	beq	r22,zero,30e8 <_fseek_r+0x23c>
    3200:	81400c17 	ldw	r5,48(r16)
    3204:	80c00117 	ldw	r3,4(r16)
    3208:	28003a26 	beq	r5,zero,32f4 <_fseek_r+0x448>
    320c:	81c00f17 	ldw	r7,60(r16)
    3210:	003fc106 	br	3118 <_fseek_r+0x26c>
    3214:	80800417 	ldw	r2,16(r16)
    3218:	003f9306 	br	3068 <_fseek_r+0x1bc>
    321c:	81400717 	ldw	r5,28(r16)
    3220:	8809883a 	mov	r4,r17
    3224:	000d883a 	mov	r6,zero
    3228:	900f883a 	mov	r7,r18
    322c:	983ee83a 	callr	r19
    3230:	102b883a 	mov	r21,r2
    3234:	00bfffc4 	movi	r2,-1
    3238:	a8bf6626 	beq	r21,r2,2fd4 <_fseek_r+0x128>
    323c:	8080030b 	ldhu	r2,12(r16)
    3240:	003f7a06 	br	302c <_fseek_r+0x180>
    3244:	bd6bc83a 	sub	r21,r23,r21
    3248:	354d883a 	add	r6,r6,r21
    324c:	1545c83a 	sub	r2,r2,r21
    3250:	81800015 	stw	r6,0(r16)
    3254:	80800115 	stw	r2,4(r16)
    3258:	28000626 	beq	r5,zero,3274 <_fseek_r+0x3c8>
    325c:	80801004 	addi	r2,r16,64
    3260:	28800326 	beq	r5,r2,3270 <_fseek_r+0x3c4>
    3264:	8809883a 	mov	r4,r17
    3268:	0002b800 	call	2b80 <_free_r>
    326c:	8100030b 	ldhu	r4,12(r16)
    3270:	80000c15 	stw	zero,48(r16)
    3274:	213ff7cc 	andi	r4,r4,65503
    3278:	8100030d 	sth	r4,12(r16)
    327c:	0005883a 	mov	r2,zero
    3280:	003f5506 	br	2fd8 <_fseek_r+0x12c>
    3284:	80c0030b 	ldhu	r3,12(r16)
    3288:	003f3406 	br	2f5c <_fseek_r+0xb0>
    328c:	8809883a 	mov	r4,r17
    3290:	800b883a 	mov	r5,r16
    3294:	00042040 	call	4204 <__srefill_r>
    3298:	103f321e 	bne	r2,zero,2f64 <_fseek_r+0xb8>
    329c:	80800117 	ldw	r2,4(r16)
    32a0:	15ff3036 	bltu	r2,r23,2f64 <_fseek_r+0xb8>
    32a4:	80c00017 	ldw	r3,0(r16)
    32a8:	15c5c83a 	sub	r2,r2,r23
    32ac:	80800115 	stw	r2,4(r16)
    32b0:	1def883a 	add	r23,r3,r23
    32b4:	85c00015 	stw	r23,0(r16)
    32b8:	0005883a 	mov	r2,zero
    32bc:	003f4606 	br	2fd8 <_fseek_r+0x12c>
    32c0:	8809883a 	mov	r4,r17
    32c4:	800b883a 	mov	r5,r16
    32c8:	000350c0 	call	350c <__smakebuf_r>
    32cc:	003f1706 	br	2f2c <_fseek_r+0x80>
    32d0:	81400717 	ldw	r5,28(r16)
    32d4:	8809883a 	mov	r4,r17
    32d8:	000d883a 	mov	r6,zero
    32dc:	01c00044 	movi	r7,1
    32e0:	983ee83a 	callr	r19
    32e4:	00ffffc4 	movi	r3,-1
    32e8:	10ff1e26 	beq	r2,r3,2f64 <_fseek_r+0xb8>
    32ec:	8100030b 	ldhu	r4,12(r16)
    32f0:	003f8306 	br	3100 <_fseek_r+0x254>
    32f4:	80800017 	ldw	r2,0(r16)
    32f8:	81800417 	ldw	r6,16(r16)
    32fc:	000b883a 	mov	r5,zero
    3300:	1185c83a 	sub	r2,r2,r6
    3304:	a8abc83a 	sub	r21,r21,r2
    3308:	1885883a 	add	r2,r3,r2
    330c:	003f8806 	br	3130 <_fseek_r+0x284>
    3310:	00800744 	movi	r2,29
    3314:	88800015 	stw	r2,0(r17)
    3318:	00bfffc4 	movi	r2,-1
    331c:	003f2e06 	br	2fd8 <_fseek_r+0x12c>

00003320 <fseek>:
    3320:	00800074 	movhi	r2,1
    3324:	109ab504 	addi	r2,r2,27348
    3328:	2007883a 	mov	r3,r4
    332c:	11000017 	ldw	r4,0(r2)
    3330:	2805883a 	mov	r2,r5
    3334:	300f883a 	mov	r7,r6
    3338:	180b883a 	mov	r5,r3
    333c:	100d883a 	mov	r6,r2
    3340:	0002eac1 	jmpi	2eac <_fseek_r>

00003344 <_fstat_r>:
    3344:	defffd04 	addi	sp,sp,-12
    3348:	dc400115 	stw	r17,4(sp)
    334c:	dc000015 	stw	r16,0(sp)
    3350:	2023883a 	mov	r17,r4
    3354:	040000b4 	movhi	r16,2
    3358:	84219804 	addi	r16,r16,-31136
    335c:	2809883a 	mov	r4,r5
    3360:	300b883a 	mov	r5,r6
    3364:	dfc00215 	stw	ra,8(sp)
    3368:	80000015 	stw	zero,0(r16)
    336c:	00114d40 	call	114d4 <fstat>
    3370:	00ffffc4 	movi	r3,-1
    3374:	10c00526 	beq	r2,r3,338c <_fstat_r+0x48>
    3378:	dfc00217 	ldw	ra,8(sp)
    337c:	dc400117 	ldw	r17,4(sp)
    3380:	dc000017 	ldw	r16,0(sp)
    3384:	dec00304 	addi	sp,sp,12
    3388:	f800283a 	ret
    338c:	80c00017 	ldw	r3,0(r16)
    3390:	183ff926 	beq	r3,zero,3378 <_fstat_r+0x34>
    3394:	88c00015 	stw	r3,0(r17)
    3398:	dfc00217 	ldw	ra,8(sp)
    339c:	dc400117 	ldw	r17,4(sp)
    33a0:	dc000017 	ldw	r16,0(sp)
    33a4:	dec00304 	addi	sp,sp,12
    33a8:	f800283a 	ret

000033ac <_fwalk>:
    33ac:	defff904 	addi	sp,sp,-28
    33b0:	dcc00315 	stw	r19,12(sp)
    33b4:	24c0b804 	addi	r19,r4,736
    33b8:	dd400515 	stw	r21,20(sp)
    33bc:	dd000415 	stw	r20,16(sp)
    33c0:	dfc00615 	stw	ra,24(sp)
    33c4:	dc800215 	stw	r18,8(sp)
    33c8:	dc400115 	stw	r17,4(sp)
    33cc:	dc000015 	stw	r16,0(sp)
    33d0:	282b883a 	mov	r21,r5
    33d4:	0029883a 	mov	r20,zero
    33d8:	000263c0 	call	263c <__sfp_lock_acquire>
    33dc:	98001226 	beq	r19,zero,3428 <_fwalk+0x7c>
    33e0:	04bfffc4 	movi	r18,-1
    33e4:	9c400117 	ldw	r17,4(r19)
    33e8:	9c000217 	ldw	r16,8(r19)
    33ec:	8c7fffc4 	addi	r17,r17,-1
    33f0:	88000b16 	blt	r17,zero,3420 <_fwalk+0x74>
    33f4:	84000304 	addi	r16,r16,12
    33f8:	80c0000f 	ldh	r3,0(r16)
    33fc:	8c7fffc4 	addi	r17,r17,-1
    3400:	813ffd04 	addi	r4,r16,-12
    3404:	18000426 	beq	r3,zero,3418 <_fwalk+0x6c>
    3408:	80c0008f 	ldh	r3,2(r16)
    340c:	1c800226 	beq	r3,r18,3418 <_fwalk+0x6c>
    3410:	a83ee83a 	callr	r21
    3414:	a0a8b03a 	or	r20,r20,r2
    3418:	84001704 	addi	r16,r16,92
    341c:	8cbff61e 	bne	r17,r18,33f8 <_fwalk+0x4c>
    3420:	9cc00017 	ldw	r19,0(r19)
    3424:	983fef1e 	bne	r19,zero,33e4 <_fwalk+0x38>
    3428:	00026400 	call	2640 <__sfp_lock_release>
    342c:	a005883a 	mov	r2,r20
    3430:	dfc00617 	ldw	ra,24(sp)
    3434:	dd400517 	ldw	r21,20(sp)
    3438:	dd000417 	ldw	r20,16(sp)
    343c:	dcc00317 	ldw	r19,12(sp)
    3440:	dc800217 	ldw	r18,8(sp)
    3444:	dc400117 	ldw	r17,4(sp)
    3448:	dc000017 	ldw	r16,0(sp)
    344c:	dec00704 	addi	sp,sp,28
    3450:	f800283a 	ret

00003454 <_fwalk_reent>:
    3454:	defff804 	addi	sp,sp,-32
    3458:	dcc00315 	stw	r19,12(sp)
    345c:	24c0b804 	addi	r19,r4,736
    3460:	dd800615 	stw	r22,24(sp)
    3464:	dd400515 	stw	r21,20(sp)
    3468:	dd000415 	stw	r20,16(sp)
    346c:	dfc00715 	stw	ra,28(sp)
    3470:	dc800215 	stw	r18,8(sp)
    3474:	dc400115 	stw	r17,4(sp)
    3478:	dc000015 	stw	r16,0(sp)
    347c:	2029883a 	mov	r20,r4
    3480:	282b883a 	mov	r21,r5
    3484:	002d883a 	mov	r22,zero
    3488:	000263c0 	call	263c <__sfp_lock_acquire>
    348c:	98001326 	beq	r19,zero,34dc <_fwalk_reent+0x88>
    3490:	04bfffc4 	movi	r18,-1
    3494:	9c400117 	ldw	r17,4(r19)
    3498:	9c000217 	ldw	r16,8(r19)
    349c:	8c7fffc4 	addi	r17,r17,-1
    34a0:	88000c16 	blt	r17,zero,34d4 <_fwalk_reent+0x80>
    34a4:	84000304 	addi	r16,r16,12
    34a8:	80c0000f 	ldh	r3,0(r16)
    34ac:	8c7fffc4 	addi	r17,r17,-1
    34b0:	817ffd04 	addi	r5,r16,-12
    34b4:	18000526 	beq	r3,zero,34cc <_fwalk_reent+0x78>
    34b8:	80c0008f 	ldh	r3,2(r16)
    34bc:	a009883a 	mov	r4,r20
    34c0:	1c800226 	beq	r3,r18,34cc <_fwalk_reent+0x78>
    34c4:	a83ee83a 	callr	r21
    34c8:	b0acb03a 	or	r22,r22,r2
    34cc:	84001704 	addi	r16,r16,92
    34d0:	8cbff51e 	bne	r17,r18,34a8 <_fwalk_reent+0x54>
    34d4:	9cc00017 	ldw	r19,0(r19)
    34d8:	983fee1e 	bne	r19,zero,3494 <_fwalk_reent+0x40>
    34dc:	00026400 	call	2640 <__sfp_lock_release>
    34e0:	b005883a 	mov	r2,r22
    34e4:	dfc00717 	ldw	ra,28(sp)
    34e8:	dd800617 	ldw	r22,24(sp)
    34ec:	dd400517 	ldw	r21,20(sp)
    34f0:	dd000417 	ldw	r20,16(sp)
    34f4:	dcc00317 	ldw	r19,12(sp)
    34f8:	dc800217 	ldw	r18,8(sp)
    34fc:	dc400117 	ldw	r17,4(sp)
    3500:	dc000017 	ldw	r16,0(sp)
    3504:	dec00804 	addi	sp,sp,32
    3508:	f800283a 	ret

0000350c <__smakebuf_r>:
    350c:	2880030b 	ldhu	r2,12(r5)
    3510:	deffed04 	addi	sp,sp,-76
    3514:	dc401015 	stw	r17,64(sp)
    3518:	10c0008c 	andi	r3,r2,2
    351c:	18ffffcc 	andi	r3,r3,65535
    3520:	18e0001c 	xori	r3,r3,32768
    3524:	dc000f15 	stw	r16,60(sp)
    3528:	dfc01215 	stw	ra,72(sp)
    352c:	dc801115 	stw	r18,68(sp)
    3530:	18e00004 	addi	r3,r3,-32768
    3534:	2821883a 	mov	r16,r5
    3538:	2023883a 	mov	r17,r4
    353c:	1800381e 	bne	r3,zero,3620 <__smakebuf_r+0x114>
    3540:	2940038f 	ldh	r5,14(r5)
    3544:	28002d16 	blt	r5,zero,35fc <__smakebuf_r+0xf0>
    3548:	d80d883a 	mov	r6,sp
    354c:	00033440 	call	3344 <_fstat_r>
    3550:	10002916 	blt	r2,zero,35f8 <__smakebuf_r+0xec>
    3554:	d8800117 	ldw	r2,4(sp)
    3558:	00e00014 	movui	r3,32768
    355c:	10bc000c 	andi	r2,r2,61440
    3560:	10c03c26 	beq	r2,r3,3654 <__smakebuf_r+0x148>
    3564:	80c0030b 	ldhu	r3,12(r16)
    3568:	18c20014 	ori	r3,r3,2048
    356c:	80c0030d 	sth	r3,12(r16)
    3570:	00c80004 	movi	r3,8192
    3574:	10c00c1e 	bne	r2,r3,35a8 <__smakebuf_r+0x9c>
    3578:	8140038f 	ldh	r5,14(r16)
    357c:	8809883a 	mov	r4,r17
    3580:	0009c940 	call	9c94 <_isatty_r>
    3584:	10000826 	beq	r2,zero,35a8 <__smakebuf_r+0x9c>
    3588:	80c0030b 	ldhu	r3,12(r16)
    358c:	808010c4 	addi	r2,r16,67
    3590:	80800015 	stw	r2,0(r16)
    3594:	18c00054 	ori	r3,r3,1
    3598:	80800415 	stw	r2,16(r16)
    359c:	00800044 	movi	r2,1
    35a0:	80c0030d 	sth	r3,12(r16)
    35a4:	80800515 	stw	r2,20(r16)
    35a8:	04810004 	movi	r18,1024
    35ac:	8809883a 	mov	r4,r17
    35b0:	900b883a 	mov	r5,r18
    35b4:	00036dc0 	call	36dc <_malloc_r>
    35b8:	10003026 	beq	r2,zero,367c <__smakebuf_r+0x170>
    35bc:	80c0030b 	ldhu	r3,12(r16)
    35c0:	01000034 	movhi	r4,0
    35c4:	2108e804 	addi	r4,r4,9120
    35c8:	89000f15 	stw	r4,60(r17)
    35cc:	18c02014 	ori	r3,r3,128
    35d0:	80c0030d 	sth	r3,12(r16)
    35d4:	80800015 	stw	r2,0(r16)
    35d8:	80800415 	stw	r2,16(r16)
    35dc:	84800515 	stw	r18,20(r16)
    35e0:	dfc01217 	ldw	ra,72(sp)
    35e4:	dc801117 	ldw	r18,68(sp)
    35e8:	dc401017 	ldw	r17,64(sp)
    35ec:	dc000f17 	ldw	r16,60(sp)
    35f0:	dec01304 	addi	sp,sp,76
    35f4:	f800283a 	ret
    35f8:	8080030b 	ldhu	r2,12(r16)
    35fc:	10c0200c 	andi	r3,r2,128
    3600:	18ffffcc 	andi	r3,r3,65535
    3604:	18e0001c 	xori	r3,r3,32768
    3608:	18e00004 	addi	r3,r3,-32768
    360c:	18000f1e 	bne	r3,zero,364c <__smakebuf_r+0x140>
    3610:	04810004 	movi	r18,1024
    3614:	10820014 	ori	r2,r2,2048
    3618:	8080030d 	sth	r2,12(r16)
    361c:	003fe306 	br	35ac <__smakebuf_r+0xa0>
    3620:	288010c4 	addi	r2,r5,67
    3624:	28800015 	stw	r2,0(r5)
    3628:	28800415 	stw	r2,16(r5)
    362c:	00800044 	movi	r2,1
    3630:	28800515 	stw	r2,20(r5)
    3634:	dfc01217 	ldw	ra,72(sp)
    3638:	dc801117 	ldw	r18,68(sp)
    363c:	dc401017 	ldw	r17,64(sp)
    3640:	dc000f17 	ldw	r16,60(sp)
    3644:	dec01304 	addi	sp,sp,76
    3648:	f800283a 	ret
    364c:	04801004 	movi	r18,64
    3650:	003ff006 	br	3614 <__smakebuf_r+0x108>
    3654:	81000a17 	ldw	r4,40(r16)
    3658:	00c00034 	movhi	r3,0
    365c:	18d14c04 	addi	r3,r3,17712
    3660:	20ffc01e 	bne	r4,r3,3564 <__smakebuf_r+0x58>
    3664:	8080030b 	ldhu	r2,12(r16)
    3668:	00c10004 	movi	r3,1024
    366c:	80c01315 	stw	r3,76(r16)
    3670:	10c4b03a 	or	r2,r2,r3
    3674:	8080030d 	sth	r2,12(r16)
    3678:	003fcb06 	br	35a8 <__smakebuf_r+0x9c>
    367c:	8080030b 	ldhu	r2,12(r16)
    3680:	10c0800c 	andi	r3,r2,512
    3684:	18ffffcc 	andi	r3,r3,65535
    3688:	18e0001c 	xori	r3,r3,32768
    368c:	18e00004 	addi	r3,r3,-32768
    3690:	183fd31e 	bne	r3,zero,35e0 <__smakebuf_r+0xd4>
    3694:	10800094 	ori	r2,r2,2
    3698:	80c010c4 	addi	r3,r16,67
    369c:	8080030d 	sth	r2,12(r16)
    36a0:	00800044 	movi	r2,1
    36a4:	80c00015 	stw	r3,0(r16)
    36a8:	80c00415 	stw	r3,16(r16)
    36ac:	80800515 	stw	r2,20(r16)
    36b0:	003fcb06 	br	35e0 <__smakebuf_r+0xd4>

000036b4 <malloc>:
    36b4:	00800074 	movhi	r2,1
    36b8:	109ab504 	addi	r2,r2,27348
    36bc:	200b883a 	mov	r5,r4
    36c0:	11000017 	ldw	r4,0(r2)
    36c4:	00036dc1 	jmpi	36dc <_malloc_r>

000036c8 <free>:
    36c8:	00800074 	movhi	r2,1
    36cc:	109ab504 	addi	r2,r2,27348
    36d0:	200b883a 	mov	r5,r4
    36d4:	11000017 	ldw	r4,0(r2)
    36d8:	0002b801 	jmpi	2b80 <_free_r>

000036dc <_malloc_r>:
    36dc:	defff604 	addi	sp,sp,-40
    36e0:	dc800215 	stw	r18,8(sp)
    36e4:	dfc00915 	stw	ra,36(sp)
    36e8:	df000815 	stw	fp,32(sp)
    36ec:	ddc00715 	stw	r23,28(sp)
    36f0:	dd800615 	stw	r22,24(sp)
    36f4:	dd400515 	stw	r21,20(sp)
    36f8:	dd000415 	stw	r20,16(sp)
    36fc:	dcc00315 	stw	r19,12(sp)
    3700:	dc400115 	stw	r17,4(sp)
    3704:	dc000015 	stw	r16,0(sp)
    3708:	288002c4 	addi	r2,r5,11
    370c:	00c00584 	movi	r3,22
    3710:	2025883a 	mov	r18,r4
    3714:	18802b2e 	bgeu	r3,r2,37c4 <_malloc_r+0xe8>
    3718:	047ffe04 	movi	r17,-8
    371c:	1462703a 	and	r17,r2,r17
    3720:	88002a16 	blt	r17,zero,37cc <_malloc_r+0xf0>
    3724:	89402936 	bltu	r17,r5,37cc <_malloc_r+0xf0>
    3728:	9009883a 	mov	r4,r18
    372c:	00119000 	call	11900 <__malloc_lock>
    3730:	00807dc4 	movi	r2,503
    3734:	14402936 	bltu	r2,r17,37dc <_malloc_r+0x100>
    3738:	8808d0fa 	srli	r4,r17,3
    373c:	04c00074 	movhi	r19,1
    3740:	9cd51904 	addi	r19,r19,21604
    3744:	2105883a 	add	r2,r4,r4
    3748:	1085883a 	add	r2,r2,r2
    374c:	1085883a 	add	r2,r2,r2
    3750:	9885883a 	add	r2,r19,r2
    3754:	14000317 	ldw	r16,12(r2)
    3758:	80815526 	beq	r16,r2,3cb0 <_malloc_r+0x5d4>
    375c:	81000117 	ldw	r4,4(r16)
    3760:	00bfff04 	movi	r2,-4
    3764:	80c00317 	ldw	r3,12(r16)
    3768:	2084703a 	and	r2,r4,r2
    376c:	8085883a 	add	r2,r16,r2
    3770:	11800117 	ldw	r6,4(r2)
    3774:	81400217 	ldw	r5,8(r16)
    3778:	9009883a 	mov	r4,r18
    377c:	31800054 	ori	r6,r6,1
    3780:	11800115 	stw	r6,4(r2)
    3784:	28c00315 	stw	r3,12(r5)
    3788:	19400215 	stw	r5,8(r3)
    378c:	00119200 	call	11920 <__malloc_unlock>
    3790:	80800204 	addi	r2,r16,8
    3794:	dfc00917 	ldw	ra,36(sp)
    3798:	df000817 	ldw	fp,32(sp)
    379c:	ddc00717 	ldw	r23,28(sp)
    37a0:	dd800617 	ldw	r22,24(sp)
    37a4:	dd400517 	ldw	r21,20(sp)
    37a8:	dd000417 	ldw	r20,16(sp)
    37ac:	dcc00317 	ldw	r19,12(sp)
    37b0:	dc800217 	ldw	r18,8(sp)
    37b4:	dc400117 	ldw	r17,4(sp)
    37b8:	dc000017 	ldw	r16,0(sp)
    37bc:	dec00a04 	addi	sp,sp,40
    37c0:	f800283a 	ret
    37c4:	04400404 	movi	r17,16
    37c8:	897fd72e 	bgeu	r17,r5,3728 <_malloc_r+0x4c>
    37cc:	00800304 	movi	r2,12
    37d0:	90800015 	stw	r2,0(r18)
    37d4:	0005883a 	mov	r2,zero
    37d8:	003fee06 	br	3794 <_malloc_r+0xb8>
    37dc:	8808d27a 	srli	r4,r17,9
    37e0:	20007126 	beq	r4,zero,39a8 <_malloc_r+0x2cc>
    37e4:	00800104 	movi	r2,4
    37e8:	1100eb36 	bltu	r2,r4,3b98 <_malloc_r+0x4bc>
    37ec:	8808d1ba 	srli	r4,r17,6
    37f0:	21000e04 	addi	r4,r4,56
    37f4:	210b883a 	add	r5,r4,r4
    37f8:	294b883a 	add	r5,r5,r5
    37fc:	294b883a 	add	r5,r5,r5
    3800:	04c00074 	movhi	r19,1
    3804:	9cd51904 	addi	r19,r19,21604
    3808:	994b883a 	add	r5,r19,r5
    380c:	2c000317 	ldw	r16,12(r5)
    3810:	2c000e26 	beq	r5,r16,384c <_malloc_r+0x170>
    3814:	80c00117 	ldw	r3,4(r16)
    3818:	01ffff04 	movi	r7,-4
    381c:	018003c4 	movi	r6,15
    3820:	19c6703a 	and	r3,r3,r7
    3824:	1c45c83a 	sub	r2,r3,r17
    3828:	30800716 	blt	r6,r2,3848 <_malloc_r+0x16c>
    382c:	1000610e 	bge	r2,zero,39b4 <_malloc_r+0x2d8>
    3830:	84000317 	ldw	r16,12(r16)
    3834:	2c000526 	beq	r5,r16,384c <_malloc_r+0x170>
    3838:	80c00117 	ldw	r3,4(r16)
    383c:	19c6703a 	and	r3,r3,r7
    3840:	1c45c83a 	sub	r2,r3,r17
    3844:	30bff90e 	bge	r6,r2,382c <_malloc_r+0x150>
    3848:	213fffc4 	addi	r4,r4,-1
    384c:	21000044 	addi	r4,r4,1
    3850:	9c000417 	ldw	r16,16(r19)
    3854:	00c00074 	movhi	r3,1
    3858:	18d51904 	addi	r3,r3,21604
    385c:	1a400204 	addi	r9,r3,8
    3860:	8240ff26 	beq	r16,r9,3c60 <_malloc_r+0x584>
    3864:	81400117 	ldw	r5,4(r16)
    3868:	00bfff04 	movi	r2,-4
    386c:	018003c4 	movi	r6,15
    3870:	2884703a 	and	r2,r5,r2
    3874:	144bc83a 	sub	r5,r2,r17
    3878:	3140ea16 	blt	r6,r5,3c24 <_malloc_r+0x548>
    387c:	1a400515 	stw	r9,20(r3)
    3880:	1a400415 	stw	r9,16(r3)
    3884:	2800570e 	bge	r5,zero,39e4 <_malloc_r+0x308>
    3888:	01407fc4 	movi	r5,511
    388c:	2880ca36 	bltu	r5,r2,3bb8 <_malloc_r+0x4dc>
    3890:	1004d0fa 	srli	r2,r2,3
    3894:	02000044 	movi	r8,1
    3898:	19c00117 	ldw	r7,4(r3)
    389c:	108b883a 	add	r5,r2,r2
    38a0:	294b883a 	add	r5,r5,r5
    38a4:	1005d0ba 	srai	r2,r2,2
    38a8:	294b883a 	add	r5,r5,r5
    38ac:	28cb883a 	add	r5,r5,r3
    38b0:	29800217 	ldw	r6,8(r5)
    38b4:	4084983a 	sll	r2,r8,r2
    38b8:	81400315 	stw	r5,12(r16)
    38bc:	81800215 	stw	r6,8(r16)
    38c0:	11c4b03a 	or	r2,r2,r7
    38c4:	18800115 	stw	r2,4(r3)
    38c8:	2c000215 	stw	r16,8(r5)
    38cc:	34000315 	stw	r16,12(r6)
    38d0:	200bd0ba 	srai	r5,r4,2
    38d4:	00c00044 	movi	r3,1
    38d8:	194a983a 	sll	r5,r3,r5
    38dc:	11404936 	bltu	r2,r5,3a04 <_malloc_r+0x328>
    38e0:	1146703a 	and	r3,r2,r5
    38e4:	18000a1e 	bne	r3,zero,3910 <_malloc_r+0x234>
    38e8:	00ffff04 	movi	r3,-4
    38ec:	294b883a 	add	r5,r5,r5
    38f0:	20c8703a 	and	r4,r4,r3
    38f4:	1146703a 	and	r3,r2,r5
    38f8:	21000104 	addi	r4,r4,4
    38fc:	1800041e 	bne	r3,zero,3910 <_malloc_r+0x234>
    3900:	294b883a 	add	r5,r5,r5
    3904:	1146703a 	and	r3,r2,r5
    3908:	21000104 	addi	r4,r4,4
    390c:	183ffc26 	beq	r3,zero,3900 <_malloc_r+0x224>
    3910:	023fff04 	movi	r8,-4
    3914:	01c003c4 	movi	r7,15
    3918:	2105883a 	add	r2,r4,r4
    391c:	1085883a 	add	r2,r2,r2
    3920:	1085883a 	add	r2,r2,r2
    3924:	9899883a 	add	r12,r19,r2
    3928:	62800304 	addi	r10,r12,12
    392c:	2017883a 	mov	r11,r4
    3930:	54000017 	ldw	r16,0(r10)
    3934:	51bffd04 	addi	r6,r10,-12
    3938:	8180041e 	bne	r16,r6,394c <_malloc_r+0x270>
    393c:	0000ca06 	br	3c68 <_malloc_r+0x58c>
    3940:	10001c0e 	bge	r2,zero,39b4 <_malloc_r+0x2d8>
    3944:	84000317 	ldw	r16,12(r16)
    3948:	8180c726 	beq	r16,r6,3c68 <_malloc_r+0x58c>
    394c:	80c00117 	ldw	r3,4(r16)
    3950:	1a06703a 	and	r3,r3,r8
    3954:	1c45c83a 	sub	r2,r3,r17
    3958:	38bff90e 	bge	r7,r2,3940 <_malloc_r+0x264>
    395c:	81000317 	ldw	r4,12(r16)
    3960:	81400217 	ldw	r5,8(r16)
    3964:	8447883a 	add	r3,r16,r17
    3968:	8c400054 	ori	r17,r17,1
    396c:	29000315 	stw	r4,12(r5)
    3970:	21400215 	stw	r5,8(r4)
    3974:	84400115 	stw	r17,4(r16)
    3978:	1889883a 	add	r4,r3,r2
    397c:	11400054 	ori	r5,r2,1
    3980:	98c00515 	stw	r3,20(r19)
    3984:	98c00415 	stw	r3,16(r19)
    3988:	20800015 	stw	r2,0(r4)
    398c:	1a400315 	stw	r9,12(r3)
    3990:	1a400215 	stw	r9,8(r3)
    3994:	19400115 	stw	r5,4(r3)
    3998:	9009883a 	mov	r4,r18
    399c:	00119200 	call	11920 <__malloc_unlock>
    39a0:	80800204 	addi	r2,r16,8
    39a4:	003f7b06 	br	3794 <_malloc_r+0xb8>
    39a8:	8808d0fa 	srli	r4,r17,3
    39ac:	210b883a 	add	r5,r4,r4
    39b0:	003f9106 	br	37f8 <_malloc_r+0x11c>
    39b4:	80c7883a 	add	r3,r16,r3
    39b8:	19400117 	ldw	r5,4(r3)
    39bc:	80800317 	ldw	r2,12(r16)
    39c0:	81000217 	ldw	r4,8(r16)
    39c4:	29400054 	ori	r5,r5,1
    39c8:	19400115 	stw	r5,4(r3)
    39cc:	20800315 	stw	r2,12(r4)
    39d0:	11000215 	stw	r4,8(r2)
    39d4:	9009883a 	mov	r4,r18
    39d8:	00119200 	call	11920 <__malloc_unlock>
    39dc:	80800204 	addi	r2,r16,8
    39e0:	003f6c06 	br	3794 <_malloc_r+0xb8>
    39e4:	8085883a 	add	r2,r16,r2
    39e8:	10c00117 	ldw	r3,4(r2)
    39ec:	9009883a 	mov	r4,r18
    39f0:	18c00054 	ori	r3,r3,1
    39f4:	10c00115 	stw	r3,4(r2)
    39f8:	00119200 	call	11920 <__malloc_unlock>
    39fc:	80800204 	addi	r2,r16,8
    3a00:	003f6406 	br	3794 <_malloc_r+0xb8>
    3a04:	9c000217 	ldw	r16,8(r19)
    3a08:	00bfff04 	movi	r2,-4
    3a0c:	85400117 	ldw	r21,4(r16)
    3a10:	a8aa703a 	and	r21,r21,r2
    3a14:	ac400336 	bltu	r21,r17,3a24 <_malloc_r+0x348>
    3a18:	ac45c83a 	sub	r2,r21,r17
    3a1c:	00c003c4 	movi	r3,15
    3a20:	18805316 	blt	r3,r2,3b70 <_malloc_r+0x494>
    3a24:	d5e6e717 	ldw	r23,-25700(gp)
    3a28:	d0e00217 	ldw	r3,-32760(gp)
    3a2c:	00bfffc4 	movi	r2,-1
    3a30:	8579883a 	add	fp,r16,r21
    3a34:	8def883a 	add	r23,r17,r23
    3a38:	1880d226 	beq	r3,r2,3d84 <_malloc_r+0x6a8>
    3a3c:	bdc403c4 	addi	r23,r23,4111
    3a40:	00bc0004 	movi	r2,-4096
    3a44:	b8ae703a 	and	r23,r23,r2
    3a48:	9009883a 	mov	r4,r18
    3a4c:	b80b883a 	mov	r5,r23
    3a50:	00043f00 	call	43f0 <_sbrk_r>
    3a54:	1029883a 	mov	r20,r2
    3a58:	00bfffc4 	movi	r2,-1
    3a5c:	a080d126 	beq	r20,r2,3da4 <_malloc_r+0x6c8>
    3a60:	a7009f36 	bltu	r20,fp,3ce0 <_malloc_r+0x604>
    3a64:	058000b4 	movhi	r22,2
    3a68:	b5a1a704 	addi	r22,r22,-31076
    3a6c:	b0800017 	ldw	r2,0(r22)
    3a70:	b885883a 	add	r2,r23,r2
    3a74:	b0800015 	stw	r2,0(r22)
    3a78:	e500cf26 	beq	fp,r20,3db8 <_malloc_r+0x6dc>
    3a7c:	d1200217 	ldw	r4,-32760(gp)
    3a80:	00ffffc4 	movi	r3,-1
    3a84:	20c0e026 	beq	r4,r3,3e08 <_malloc_r+0x72c>
    3a88:	a739c83a 	sub	fp,r20,fp
    3a8c:	1705883a 	add	r2,r2,fp
    3a90:	b0800015 	stw	r2,0(r22)
    3a94:	a08001cc 	andi	r2,r20,7
    3a98:	1000a526 	beq	r2,zero,3d30 <_malloc_r+0x654>
    3a9c:	a0a9c83a 	sub	r20,r20,r2
    3aa0:	00c40204 	movi	r3,4104
    3aa4:	a5000204 	addi	r20,r20,8
    3aa8:	1885c83a 	sub	r2,r3,r2
    3aac:	a5c7883a 	add	r3,r20,r23
    3ab0:	18c3ffcc 	andi	r3,r3,4095
    3ab4:	10efc83a 	sub	r23,r2,r3
    3ab8:	9009883a 	mov	r4,r18
    3abc:	b80b883a 	mov	r5,r23
    3ac0:	00043f00 	call	43f0 <_sbrk_r>
    3ac4:	00ffffc4 	movi	r3,-1
    3ac8:	10c0cc26 	beq	r2,r3,3dfc <_malloc_r+0x720>
    3acc:	1505c83a 	sub	r2,r2,r20
    3ad0:	b887883a 	add	r3,r23,r2
    3ad4:	18c00054 	ori	r3,r3,1
    3ad8:	b0800017 	ldw	r2,0(r22)
    3adc:	9d000215 	stw	r20,8(r19)
    3ae0:	a0c00115 	stw	r3,4(r20)
    3ae4:	b885883a 	add	r2,r23,r2
    3ae8:	b0800015 	stw	r2,0(r22)
    3aec:	84c00e26 	beq	r16,r19,3b28 <_malloc_r+0x44c>
    3af0:	00c003c4 	movi	r3,15
    3af4:	1d40902e 	bgeu	r3,r21,3d38 <_malloc_r+0x65c>
    3af8:	ad7ffd04 	addi	r21,r21,-12
    3afc:	013ffe04 	movi	r4,-8
    3b00:	a908703a 	and	r4,r21,r4
    3b04:	810b883a 	add	r5,r16,r4
    3b08:	01800144 	movi	r6,5
    3b0c:	29800115 	stw	r6,4(r5)
    3b10:	29800215 	stw	r6,8(r5)
    3b14:	81400117 	ldw	r5,4(r16)
    3b18:	2940004c 	andi	r5,r5,1
    3b1c:	214ab03a 	or	r5,r4,r5
    3b20:	81400115 	stw	r5,4(r16)
    3b24:	1900ae36 	bltu	r3,r4,3de0 <_malloc_r+0x704>
    3b28:	d0e6e617 	ldw	r3,-25704(gp)
    3b2c:	1880012e 	bgeu	r3,r2,3b34 <_malloc_r+0x458>
    3b30:	d0a6e615 	stw	r2,-25704(gp)
    3b34:	d0e6e517 	ldw	r3,-25708(gp)
    3b38:	9c000217 	ldw	r16,8(r19)
    3b3c:	1880012e 	bgeu	r3,r2,3b44 <_malloc_r+0x468>
    3b40:	d0a6e515 	stw	r2,-25708(gp)
    3b44:	80c00117 	ldw	r3,4(r16)
    3b48:	00bfff04 	movi	r2,-4
    3b4c:	1886703a 	and	r3,r3,r2
    3b50:	1c45c83a 	sub	r2,r3,r17
    3b54:	1c400236 	bltu	r3,r17,3b60 <_malloc_r+0x484>
    3b58:	00c003c4 	movi	r3,15
    3b5c:	18800416 	blt	r3,r2,3b70 <_malloc_r+0x494>
    3b60:	9009883a 	mov	r4,r18
    3b64:	00119200 	call	11920 <__malloc_unlock>
    3b68:	0005883a 	mov	r2,zero
    3b6c:	003f0906 	br	3794 <_malloc_r+0xb8>
    3b70:	88c00054 	ori	r3,r17,1
    3b74:	10800054 	ori	r2,r2,1
    3b78:	80c00115 	stw	r3,4(r16)
    3b7c:	8463883a 	add	r17,r16,r17
    3b80:	88800115 	stw	r2,4(r17)
    3b84:	9009883a 	mov	r4,r18
    3b88:	9c400215 	stw	r17,8(r19)
    3b8c:	00119200 	call	11920 <__malloc_unlock>
    3b90:	80800204 	addi	r2,r16,8
    3b94:	003eff06 	br	3794 <_malloc_r+0xb8>
    3b98:	00800504 	movi	r2,20
    3b9c:	1100492e 	bgeu	r2,r4,3cc4 <_malloc_r+0x5e8>
    3ba0:	00801504 	movi	r2,84
    3ba4:	11005c36 	bltu	r2,r4,3d18 <_malloc_r+0x63c>
    3ba8:	8808d33a 	srli	r4,r17,12
    3bac:	21001b84 	addi	r4,r4,110
    3bb0:	210b883a 	add	r5,r4,r4
    3bb4:	003f1006 	br	37f8 <_malloc_r+0x11c>
    3bb8:	1006d27a 	srli	r3,r2,9
    3bbc:	01400104 	movi	r5,4
    3bc0:	28c0432e 	bgeu	r5,r3,3cd0 <_malloc_r+0x5f4>
    3bc4:	01400504 	movi	r5,20
    3bc8:	28c07036 	bltu	r5,r3,3d8c <_malloc_r+0x6b0>
    3bcc:	194016c4 	addi	r5,r3,91
    3bd0:	294d883a 	add	r6,r5,r5
    3bd4:	318d883a 	add	r6,r6,r6
    3bd8:	318d883a 	add	r6,r6,r6
    3bdc:	998d883a 	add	r6,r19,r6
    3be0:	30c00217 	ldw	r3,8(r6)
    3be4:	01c00074 	movhi	r7,1
    3be8:	39d51904 	addi	r7,r7,21604
    3bec:	19805726 	beq	r3,r6,3d4c <_malloc_r+0x670>
    3bf0:	01ffff04 	movi	r7,-4
    3bf4:	19400117 	ldw	r5,4(r3)
    3bf8:	29ca703a 	and	r5,r5,r7
    3bfc:	1140022e 	bgeu	r2,r5,3c08 <_malloc_r+0x52c>
    3c00:	18c00217 	ldw	r3,8(r3)
    3c04:	30fffb1e 	bne	r6,r3,3bf4 <_malloc_r+0x518>
    3c08:	19400317 	ldw	r5,12(r3)
    3c0c:	98800117 	ldw	r2,4(r19)
    3c10:	81400315 	stw	r5,12(r16)
    3c14:	80c00215 	stw	r3,8(r16)
    3c18:	2c000215 	stw	r16,8(r5)
    3c1c:	1c000315 	stw	r16,12(r3)
    3c20:	003f2b06 	br	38d0 <_malloc_r+0x1f4>
    3c24:	8445883a 	add	r2,r16,r17
    3c28:	8c400054 	ori	r17,r17,1
    3c2c:	18800515 	stw	r2,20(r3)
    3c30:	18800415 	stw	r2,16(r3)
    3c34:	29000054 	ori	r4,r5,1
    3c38:	1147883a 	add	r3,r2,r5
    3c3c:	84400115 	stw	r17,4(r16)
    3c40:	11000115 	stw	r4,4(r2)
    3c44:	12400315 	stw	r9,12(r2)
    3c48:	12400215 	stw	r9,8(r2)
    3c4c:	19400015 	stw	r5,0(r3)
    3c50:	9009883a 	mov	r4,r18
    3c54:	00119200 	call	11920 <__malloc_unlock>
    3c58:	80800204 	addi	r2,r16,8
    3c5c:	003ecd06 	br	3794 <_malloc_r+0xb8>
    3c60:	18800117 	ldw	r2,4(r3)
    3c64:	003f1a06 	br	38d0 <_malloc_r+0x1f4>
    3c68:	5ac00044 	addi	r11,r11,1
    3c6c:	588000cc 	andi	r2,r11,3
    3c70:	52800204 	addi	r10,r10,8
    3c74:	103f2e1e 	bne	r2,zero,3930 <_malloc_r+0x254>
    3c78:	20c000cc 	andi	r3,r4,3
    3c7c:	60bffe04 	addi	r2,r12,-8
    3c80:	18006f26 	beq	r3,zero,3e40 <_malloc_r+0x764>
    3c84:	63000017 	ldw	r12,0(r12)
    3c88:	213fffc4 	addi	r4,r4,-1
    3c8c:	60bffa26 	beq	r12,r2,3c78 <_malloc_r+0x59c>
    3c90:	98800117 	ldw	r2,4(r19)
    3c94:	294b883a 	add	r5,r5,r5
    3c98:	117f5a36 	bltu	r2,r5,3a04 <_malloc_r+0x328>
    3c9c:	283f5926 	beq	r5,zero,3a04 <_malloc_r+0x328>
    3ca0:	1146703a 	and	r3,r2,r5
    3ca4:	18001626 	beq	r3,zero,3d00 <_malloc_r+0x624>
    3ca8:	5809883a 	mov	r4,r11
    3cac:	003f1a06 	br	3918 <_malloc_r+0x23c>
    3cb0:	80800204 	addi	r2,r16,8
    3cb4:	84000517 	ldw	r16,20(r16)
    3cb8:	143ea81e 	bne	r2,r16,375c <_malloc_r+0x80>
    3cbc:	21000084 	addi	r4,r4,2
    3cc0:	003ee306 	br	3850 <_malloc_r+0x174>
    3cc4:	210016c4 	addi	r4,r4,91
    3cc8:	210b883a 	add	r5,r4,r4
    3ccc:	003eca06 	br	37f8 <_malloc_r+0x11c>
    3cd0:	100ad1ba 	srli	r5,r2,6
    3cd4:	29400e04 	addi	r5,r5,56
    3cd8:	294d883a 	add	r6,r5,r5
    3cdc:	003fbd06 	br	3bd4 <_malloc_r+0x4f8>
    3ce0:	84ff6026 	beq	r16,r19,3a64 <_malloc_r+0x388>
    3ce4:	00800074 	movhi	r2,1
    3ce8:	10951904 	addi	r2,r2,21604
    3cec:	14000217 	ldw	r16,8(r2)
    3cf0:	00bfff04 	movi	r2,-4
    3cf4:	80c00117 	ldw	r3,4(r16)
    3cf8:	1886703a 	and	r3,r3,r2
    3cfc:	003f9406 	br	3b50 <_malloc_r+0x474>
    3d00:	294b883a 	add	r5,r5,r5
    3d04:	1146703a 	and	r3,r2,r5
    3d08:	5ac00104 	addi	r11,r11,4
    3d0c:	183ffc26 	beq	r3,zero,3d00 <_malloc_r+0x624>
    3d10:	5809883a 	mov	r4,r11
    3d14:	003f0006 	br	3918 <_malloc_r+0x23c>
    3d18:	00805504 	movi	r2,340
    3d1c:	11001336 	bltu	r2,r4,3d6c <_malloc_r+0x690>
    3d20:	8808d3fa 	srli	r4,r17,15
    3d24:	21001dc4 	addi	r4,r4,119
    3d28:	210b883a 	add	r5,r4,r4
    3d2c:	003eb206 	br	37f8 <_malloc_r+0x11c>
    3d30:	00840004 	movi	r2,4096
    3d34:	003f5d06 	br	3aac <_malloc_r+0x3d0>
    3d38:	00800044 	movi	r2,1
    3d3c:	a0800115 	stw	r2,4(r20)
    3d40:	a021883a 	mov	r16,r20
    3d44:	0007883a 	mov	r3,zero
    3d48:	003f8106 	br	3b50 <_malloc_r+0x474>
    3d4c:	280bd0ba 	srai	r5,r5,2
    3d50:	01800044 	movi	r6,1
    3d54:	38800117 	ldw	r2,4(r7)
    3d58:	314c983a 	sll	r6,r6,r5
    3d5c:	180b883a 	mov	r5,r3
    3d60:	3084b03a 	or	r2,r6,r2
    3d64:	38800115 	stw	r2,4(r7)
    3d68:	003fa906 	br	3c10 <_malloc_r+0x534>
    3d6c:	00815504 	movi	r2,1364
    3d70:	11001836 	bltu	r2,r4,3dd4 <_malloc_r+0x6f8>
    3d74:	8808d4ba 	srli	r4,r17,18
    3d78:	21001f04 	addi	r4,r4,124
    3d7c:	210b883a 	add	r5,r4,r4
    3d80:	003e9d06 	br	37f8 <_malloc_r+0x11c>
    3d84:	bdc00404 	addi	r23,r23,16
    3d88:	003f2f06 	br	3a48 <_malloc_r+0x36c>
    3d8c:	01401504 	movi	r5,84
    3d90:	28c01f36 	bltu	r5,r3,3e10 <_malloc_r+0x734>
    3d94:	100ad33a 	srli	r5,r2,12
    3d98:	29401b84 	addi	r5,r5,110
    3d9c:	294d883a 	add	r6,r5,r5
    3da0:	003f8c06 	br	3bd4 <_malloc_r+0x4f8>
    3da4:	9c000217 	ldw	r16,8(r19)
    3da8:	00bfff04 	movi	r2,-4
    3dac:	80c00117 	ldw	r3,4(r16)
    3db0:	1886703a 	and	r3,r3,r2
    3db4:	003f6606 	br	3b50 <_malloc_r+0x474>
    3db8:	e0c3ffcc 	andi	r3,fp,4095
    3dbc:	183f2f1e 	bne	r3,zero,3a7c <_malloc_r+0x3a0>
    3dc0:	98c00217 	ldw	r3,8(r19)
    3dc4:	bd49883a 	add	r4,r23,r21
    3dc8:	21000054 	ori	r4,r4,1
    3dcc:	19000115 	stw	r4,4(r3)
    3dd0:	003f5506 	br	3b28 <_malloc_r+0x44c>
    3dd4:	01403f04 	movi	r5,252
    3dd8:	01001f84 	movi	r4,126
    3ddc:	003e8606 	br	37f8 <_malloc_r+0x11c>
    3de0:	9009883a 	mov	r4,r18
    3de4:	81400204 	addi	r5,r16,8
    3de8:	0002b800 	call	2b80 <_free_r>
    3dec:	008000b4 	movhi	r2,2
    3df0:	10a1a704 	addi	r2,r2,-31076
    3df4:	10800017 	ldw	r2,0(r2)
    3df8:	003f4b06 	br	3b28 <_malloc_r+0x44c>
    3dfc:	00c00044 	movi	r3,1
    3e00:	002f883a 	mov	r23,zero
    3e04:	003f3406 	br	3ad8 <_malloc_r+0x3fc>
    3e08:	d5200215 	stw	r20,-32760(gp)
    3e0c:	003f2106 	br	3a94 <_malloc_r+0x3b8>
    3e10:	01405504 	movi	r5,340
    3e14:	28c00436 	bltu	r5,r3,3e28 <_malloc_r+0x74c>
    3e18:	100ad3fa 	srli	r5,r2,15
    3e1c:	29401dc4 	addi	r5,r5,119
    3e20:	294d883a 	add	r6,r5,r5
    3e24:	003f6b06 	br	3bd4 <_malloc_r+0x4f8>
    3e28:	01415504 	movi	r5,1364
    3e2c:	28c00936 	bltu	r5,r3,3e54 <_malloc_r+0x778>
    3e30:	100ad4ba 	srli	r5,r2,18
    3e34:	29401f04 	addi	r5,r5,124
    3e38:	294d883a 	add	r6,r5,r5
    3e3c:	003f6506 	br	3bd4 <_malloc_r+0x4f8>
    3e40:	98800117 	ldw	r2,4(r19)
    3e44:	0146303a 	nor	r3,zero,r5
    3e48:	1884703a 	and	r2,r3,r2
    3e4c:	98800115 	stw	r2,4(r19)
    3e50:	003f9006 	br	3c94 <_malloc_r+0x5b8>
    3e54:	01803f04 	movi	r6,252
    3e58:	01401f84 	movi	r5,126
    3e5c:	003f5d06 	br	3bd4 <_malloc_r+0x4f8>

00003e60 <memcpy>:
    3e60:	defffb04 	addi	sp,sp,-20
    3e64:	dc000015 	stw	r16,0(sp)
    3e68:	dfc00415 	stw	ra,16(sp)
    3e6c:	dcc00315 	stw	r19,12(sp)
    3e70:	dc800215 	stw	r18,8(sp)
    3e74:	dc400115 	stw	r17,4(sp)
    3e78:	00c003c4 	movi	r3,15
    3e7c:	2021883a 	mov	r16,r4
    3e80:	3005883a 	mov	r2,r6
    3e84:	1980032e 	bgeu	r3,r6,3e94 <memcpy+0x34>
    3e88:	2906b03a 	or	r3,r5,r4
    3e8c:	18c000cc 	andi	r3,r3,3
    3e90:	18001026 	beq	r3,zero,3ed4 <memcpy+0x74>
    3e94:	8007883a 	mov	r3,r16
    3e98:	288f883a 	add	r7,r5,r2
    3e9c:	10000526 	beq	r2,zero,3eb4 <memcpy+0x54>
    3ea0:	29800003 	ldbu	r6,0(r5)
    3ea4:	18c00044 	addi	r3,r3,1
    3ea8:	29400044 	addi	r5,r5,1
    3eac:	19bfffc5 	stb	r6,-1(r3)
    3eb0:	29fffb1e 	bne	r5,r7,3ea0 <memcpy+0x40>
    3eb4:	8005883a 	mov	r2,r16
    3eb8:	dfc00417 	ldw	ra,16(sp)
    3ebc:	dcc00317 	ldw	r19,12(sp)
    3ec0:	dc800217 	ldw	r18,8(sp)
    3ec4:	dc400117 	ldw	r17,4(sp)
    3ec8:	dc000017 	ldw	r16,0(sp)
    3ecc:	dec00504 	addi	sp,sp,20
    3ed0:	f800283a 	ret
    3ed4:	32bffc04 	addi	r10,r6,-16
    3ed8:	5014d13a 	srli	r10,r10,4
    3edc:	20800404 	addi	r2,r4,16
    3ee0:	2007883a 	mov	r3,r4
    3ee4:	5008913a 	slli	r4,r10,4
    3ee8:	280f883a 	mov	r7,r5
    3eec:	1105883a 	add	r2,r2,r4
    3ef0:	3a000017 	ldw	r8,0(r7)
    3ef4:	18c00404 	addi	r3,r3,16
    3ef8:	39c00404 	addi	r7,r7,16
    3efc:	1a3ffc15 	stw	r8,-16(r3)
    3f00:	3a3ffd17 	ldw	r8,-12(r7)
    3f04:	1a3ffd15 	stw	r8,-12(r3)
    3f08:	3a3ffe17 	ldw	r8,-8(r7)
    3f0c:	1a3ffe15 	stw	r8,-8(r3)
    3f10:	3a3fff17 	ldw	r8,-4(r7)
    3f14:	1a3fff15 	stw	r8,-4(r3)
    3f18:	18bff51e 	bne	r3,r2,3ef0 <memcpy+0x90>
    3f1c:	52800044 	addi	r10,r10,1
    3f20:	5014913a 	slli	r10,r10,4
    3f24:	308003cc 	andi	r2,r6,15
    3f28:	010000c4 	movi	r4,3
    3f2c:	8287883a 	add	r3,r16,r10
    3f30:	2a95883a 	add	r10,r5,r10
    3f34:	2080182e 	bgeu	r4,r2,3f98 <memcpy+0x138>
    3f38:	147fff04 	addi	r17,r2,-4
    3f3c:	8808d0ba 	srli	r4,r17,2
    3f40:	1a400104 	addi	r9,r3,4
    3f44:	180d883a 	mov	r6,r3
    3f48:	2105883a 	add	r2,r4,r4
    3f4c:	1085883a 	add	r2,r2,r2
    3f50:	4893883a 	add	r9,r9,r2
    3f54:	500f883a 	mov	r7,r10
    3f58:	3a000017 	ldw	r8,0(r7)
    3f5c:	31800104 	addi	r6,r6,4
    3f60:	39c00104 	addi	r7,r7,4
    3f64:	323fff15 	stw	r8,-4(r6)
    3f68:	327ffb1e 	bne	r6,r9,3f58 <memcpy+0xf8>
    3f6c:	20800044 	addi	r2,r4,1
    3f70:	1085883a 	add	r2,r2,r2
    3f74:	1085883a 	add	r2,r2,r2
    3f78:	017fff04 	movi	r5,-4
    3f7c:	18a5883a 	add	r18,r3,r2
    3f80:	50a7883a 	add	r19,r10,r2
    3f84:	00020000 	call	2000 <__mulsi3>
    3f88:	1445883a 	add	r2,r2,r17
    3f8c:	980b883a 	mov	r5,r19
    3f90:	9007883a 	mov	r3,r18
    3f94:	003fc006 	br	3e98 <memcpy+0x38>
    3f98:	500b883a 	mov	r5,r10
    3f9c:	003fbe06 	br	3e98 <memcpy+0x38>

00003fa0 <memset>:
    3fa0:	00c000c4 	movi	r3,3
    3fa4:	2005883a 	mov	r2,r4
    3fa8:	29403fcc 	andi	r5,r5,255
    3fac:	19802d2e 	bgeu	r3,r6,4064 <memset+0xc4>
    3fb0:	20c6703a 	and	r3,r4,r3
    3fb4:	18002e1e 	bne	r3,zero,4070 <memset+0xd0>
    3fb8:	2806923a 	slli	r3,r5,8
    3fbc:	010003c4 	movi	r4,15
    3fc0:	3011883a 	mov	r8,r6
    3fc4:	1946b03a 	or	r3,r3,r5
    3fc8:	180e943a 	slli	r7,r3,16
    3fcc:	38ceb03a 	or	r7,r7,r3
    3fd0:	1007883a 	mov	r3,r2
    3fd4:	21800f2e 	bgeu	r4,r6,4014 <memset+0x74>
    3fd8:	19c00015 	stw	r7,0(r3)
    3fdc:	19c00115 	stw	r7,4(r3)
    3fe0:	19c00215 	stw	r7,8(r3)
    3fe4:	19c00315 	stw	r7,12(r3)
    3fe8:	423ffc04 	addi	r8,r8,-16
    3fec:	18c00404 	addi	r3,r3,16
    3ff0:	223ff936 	bltu	r4,r8,3fd8 <memset+0x38>
    3ff4:	30fffc04 	addi	r3,r6,-16
    3ff8:	1806d13a 	srli	r3,r3,4
    3ffc:	318003cc 	andi	r6,r6,15
    4000:	010000c4 	movi	r4,3
    4004:	18c00044 	addi	r3,r3,1
    4008:	1806913a 	slli	r3,r3,4
    400c:	10c7883a 	add	r3,r2,r3
    4010:	21800e2e 	bgeu	r4,r6,404c <memset+0xac>
    4014:	1813883a 	mov	r9,r3
    4018:	3011883a 	mov	r8,r6
    401c:	010000c4 	movi	r4,3
    4020:	49c00015 	stw	r7,0(r9)
    4024:	423fff04 	addi	r8,r8,-4
    4028:	4a400104 	addi	r9,r9,4
    402c:	223ffc36 	bltu	r4,r8,4020 <memset+0x80>
    4030:	313fff04 	addi	r4,r6,-4
    4034:	2008d0ba 	srli	r4,r4,2
    4038:	318000cc 	andi	r6,r6,3
    403c:	21000044 	addi	r4,r4,1
    4040:	2109883a 	add	r4,r4,r4
    4044:	2109883a 	add	r4,r4,r4
    4048:	1907883a 	add	r3,r3,r4
    404c:	30000a26 	beq	r6,zero,4078 <memset+0xd8>
    4050:	198d883a 	add	r6,r3,r6
    4054:	19400005 	stb	r5,0(r3)
    4058:	18c00044 	addi	r3,r3,1
    405c:	19bffd1e 	bne	r3,r6,4054 <memset+0xb4>
    4060:	f800283a 	ret
    4064:	2007883a 	mov	r3,r4
    4068:	303ff91e 	bne	r6,zero,4050 <memset+0xb0>
    406c:	00000206 	br	4078 <memset+0xd8>
    4070:	2007883a 	mov	r3,r4
    4074:	003ff606 	br	4050 <memset+0xb0>
    4078:	f800283a 	ret

0000407c <_open_r>:
    407c:	defffd04 	addi	sp,sp,-12
    4080:	dc400115 	stw	r17,4(sp)
    4084:	dc000015 	stw	r16,0(sp)
    4088:	2023883a 	mov	r17,r4
    408c:	040000b4 	movhi	r16,2
    4090:	84219804 	addi	r16,r16,-31136
    4094:	2809883a 	mov	r4,r5
    4098:	300b883a 	mov	r5,r6
    409c:	380d883a 	mov	r6,r7
    40a0:	dfc00215 	stw	ra,8(sp)
    40a4:	80000015 	stw	zero,0(r16)
    40a8:	0011a800 	call	11a80 <open>
    40ac:	00ffffc4 	movi	r3,-1
    40b0:	10c00526 	beq	r2,r3,40c8 <_open_r+0x4c>
    40b4:	dfc00217 	ldw	ra,8(sp)
    40b8:	dc400117 	ldw	r17,4(sp)
    40bc:	dc000017 	ldw	r16,0(sp)
    40c0:	dec00304 	addi	sp,sp,12
    40c4:	f800283a 	ret
    40c8:	80c00017 	ldw	r3,0(r16)
    40cc:	183ff926 	beq	r3,zero,40b4 <_open_r+0x38>
    40d0:	88c00015 	stw	r3,0(r17)
    40d4:	dfc00217 	ldw	ra,8(sp)
    40d8:	dc400117 	ldw	r17,4(sp)
    40dc:	dc000017 	ldw	r16,0(sp)
    40e0:	dec00304 	addi	sp,sp,12
    40e4:	f800283a 	ret

000040e8 <_printf_r>:
    40e8:	defffd04 	addi	sp,sp,-12
    40ec:	dfc00015 	stw	ra,0(sp)
    40f0:	d9800115 	stw	r6,4(sp)
    40f4:	d9c00215 	stw	r7,8(sp)
    40f8:	280d883a 	mov	r6,r5
    40fc:	21400217 	ldw	r5,8(r4)
    4100:	d9c00104 	addi	r7,sp,4
    4104:	00046540 	call	4654 <___vfprintf_internal_r>
    4108:	dfc00017 	ldw	ra,0(sp)
    410c:	dec00304 	addi	sp,sp,12
    4110:	f800283a 	ret

00004114 <printf>:
    4114:	defffc04 	addi	sp,sp,-16
    4118:	dfc00015 	stw	ra,0(sp)
    411c:	d9400115 	stw	r5,4(sp)
    4120:	d9800215 	stw	r6,8(sp)
    4124:	d9c00315 	stw	r7,12(sp)
    4128:	00800074 	movhi	r2,1
    412c:	109ab504 	addi	r2,r2,27348
    4130:	10800017 	ldw	r2,0(r2)
    4134:	200b883a 	mov	r5,r4
    4138:	d9800104 	addi	r6,sp,4
    413c:	11000217 	ldw	r4,8(r2)
    4140:	00064d00 	call	64d0 <__vfprintf_internal>
    4144:	dfc00017 	ldw	ra,0(sp)
    4148:	dec00404 	addi	sp,sp,16
    414c:	f800283a 	ret

00004150 <_puts_r>:
    4150:	defff604 	addi	sp,sp,-40
    4154:	dc400815 	stw	r17,32(sp)
    4158:	2023883a 	mov	r17,r4
    415c:	2809883a 	mov	r4,r5
    4160:	dc000715 	stw	r16,28(sp)
    4164:	dfc00915 	stw	ra,36(sp)
    4168:	2821883a 	mov	r16,r5
    416c:	00045940 	call	4594 <strlen>
    4170:	10c00044 	addi	r3,r2,1
    4174:	d8800115 	stw	r2,4(sp)
    4178:	89400217 	ldw	r5,8(r17)
    417c:	00800074 	movhi	r2,1
    4180:	10929104 	addi	r2,r2,19012
    4184:	d8800215 	stw	r2,8(sp)
    4188:	00800044 	movi	r2,1
    418c:	d8800315 	stw	r2,12(sp)
    4190:	8809883a 	mov	r4,r17
    4194:	00800084 	movi	r2,2
    4198:	d9800404 	addi	r6,sp,16
    419c:	dc000015 	stw	r16,0(sp)
    41a0:	d8c00615 	stw	r3,24(sp)
    41a4:	dec00415 	stw	sp,16(sp)
    41a8:	d8800515 	stw	r2,20(sp)
    41ac:	00097b00 	call	97b0 <__sfvwrite_r>
    41b0:	1000061e 	bne	r2,zero,41cc <_puts_r+0x7c>
    41b4:	00800284 	movi	r2,10
    41b8:	dfc00917 	ldw	ra,36(sp)
    41bc:	dc400817 	ldw	r17,32(sp)
    41c0:	dc000717 	ldw	r16,28(sp)
    41c4:	dec00a04 	addi	sp,sp,40
    41c8:	f800283a 	ret
    41cc:	00bfffc4 	movi	r2,-1
    41d0:	003ff906 	br	41b8 <_puts_r+0x68>

000041d4 <puts>:
    41d4:	00800074 	movhi	r2,1
    41d8:	109ab504 	addi	r2,r2,27348
    41dc:	200b883a 	mov	r5,r4
    41e0:	11000017 	ldw	r4,0(r2)
    41e4:	00041501 	jmpi	4150 <_puts_r>

000041e8 <lflush>:
    41e8:	20c0030b 	ldhu	r3,12(r4)
    41ec:	00800244 	movi	r2,9
    41f0:	18c0024c 	andi	r3,r3,9
    41f4:	18800226 	beq	r3,r2,4200 <lflush+0x18>
    41f8:	0005883a 	mov	r2,zero
    41fc:	f800283a 	ret
    4200:	00023601 	jmpi	2360 <fflush>

00004204 <__srefill_r>:
    4204:	defffd04 	addi	sp,sp,-12
    4208:	dc400115 	stw	r17,4(sp)
    420c:	dc000015 	stw	r16,0(sp)
    4210:	dfc00215 	stw	ra,8(sp)
    4214:	2023883a 	mov	r17,r4
    4218:	2821883a 	mov	r16,r5
    421c:	20000226 	beq	r4,zero,4228 <__srefill_r+0x24>
    4220:	20800e17 	ldw	r2,56(r4)
    4224:	10004426 	beq	r2,zero,4338 <__srefill_r+0x134>
    4228:	8080030b 	ldhu	r2,12(r16)
    422c:	80000115 	stw	zero,4(r16)
    4230:	10c0080c 	andi	r3,r2,32
    4234:	18ffffcc 	andi	r3,r3,65535
    4238:	18e0001c 	xori	r3,r3,32768
    423c:	18e00004 	addi	r3,r3,-32768
    4240:	1800371e 	bne	r3,zero,4320 <__srefill_r+0x11c>
    4244:	10c0010c 	andi	r3,r2,4
    4248:	18ffffcc 	andi	r3,r3,65535
    424c:	18e0001c 	xori	r3,r3,32768
    4250:	18e00004 	addi	r3,r3,-32768
    4254:	18002226 	beq	r3,zero,42e0 <__srefill_r+0xdc>
    4258:	81400c17 	ldw	r5,48(r16)
    425c:	28000826 	beq	r5,zero,4280 <__srefill_r+0x7c>
    4260:	80801004 	addi	r2,r16,64
    4264:	28800226 	beq	r5,r2,4270 <__srefill_r+0x6c>
    4268:	8809883a 	mov	r4,r17
    426c:	0002b800 	call	2b80 <_free_r>
    4270:	80800f17 	ldw	r2,60(r16)
    4274:	80000c15 	stw	zero,48(r16)
    4278:	80800115 	stw	r2,4(r16)
    427c:	1000401e 	bne	r2,zero,4380 <__srefill_r+0x17c>
    4280:	80800417 	ldw	r2,16(r16)
    4284:	10005026 	beq	r2,zero,43c8 <__srefill_r+0x1c4>
    4288:	8080030b 	ldhu	r2,12(r16)
    428c:	108000cc 	andi	r2,r2,3
    4290:	10002b1e 	bne	r2,zero,4340 <__srefill_r+0x13c>
    4294:	81800417 	ldw	r6,16(r16)
    4298:	80800817 	ldw	r2,32(r16)
    429c:	81400717 	ldw	r5,28(r16)
    42a0:	81c00517 	ldw	r7,20(r16)
    42a4:	8809883a 	mov	r4,r17
    42a8:	81800015 	stw	r6,0(r16)
    42ac:	103ee83a 	callr	r2
    42b0:	8100030b 	ldhu	r4,12(r16)
    42b4:	00f7ffc4 	movi	r3,-8193
    42b8:	80800115 	stw	r2,4(r16)
    42bc:	20c6703a 	and	r3,r4,r3
    42c0:	80c0030d 	sth	r3,12(r16)
    42c4:	0080130e 	bge	zero,r2,4314 <__srefill_r+0x110>
    42c8:	0005883a 	mov	r2,zero
    42cc:	dfc00217 	ldw	ra,8(sp)
    42d0:	dc400117 	ldw	r17,4(sp)
    42d4:	dc000017 	ldw	r16,0(sp)
    42d8:	dec00304 	addi	sp,sp,12
    42dc:	f800283a 	ret
    42e0:	10c0040c 	andi	r3,r2,16
    42e4:	18ffffcc 	andi	r3,r3,65535
    42e8:	18e0001c 	xori	r3,r3,32768
    42ec:	18e00004 	addi	r3,r3,-32768
    42f0:	18003926 	beq	r3,zero,43d8 <__srefill_r+0x1d4>
    42f4:	10c0020c 	andi	r3,r2,8
    42f8:	18ffffcc 	andi	r3,r3,65535
    42fc:	18e0001c 	xori	r3,r3,32768
    4300:	18e00004 	addi	r3,r3,-32768
    4304:	1800261e 	bne	r3,zero,43a0 <__srefill_r+0x19c>
    4308:	10800114 	ori	r2,r2,4
    430c:	8080030d 	sth	r2,12(r16)
    4310:	003fdb06 	br	4280 <__srefill_r+0x7c>
    4314:	1000111e 	bne	r2,zero,435c <__srefill_r+0x158>
    4318:	18c00814 	ori	r3,r3,32
    431c:	80c0030d 	sth	r3,12(r16)
    4320:	00bfffc4 	movi	r2,-1
    4324:	dfc00217 	ldw	ra,8(sp)
    4328:	dc400117 	ldw	r17,4(sp)
    432c:	dc000017 	ldw	r16,0(sp)
    4330:	dec00304 	addi	sp,sp,12
    4334:	f800283a 	ret
    4338:	00024340 	call	2434 <__sinit>
    433c:	003fba06 	br	4228 <__srefill_r+0x24>
    4340:	00800074 	movhi	r2,1
    4344:	109ab404 	addi	r2,r2,27344
    4348:	11000017 	ldw	r4,0(r2)
    434c:	01400034 	movhi	r5,0
    4350:	29507a04 	addi	r5,r5,16872
    4354:	00033ac0 	call	33ac <_fwalk>
    4358:	003fce06 	br	4294 <__srefill_r+0x90>
    435c:	18c01014 	ori	r3,r3,64
    4360:	00bfffc4 	movi	r2,-1
    4364:	80000115 	stw	zero,4(r16)
    4368:	80c0030d 	sth	r3,12(r16)
    436c:	dfc00217 	ldw	ra,8(sp)
    4370:	dc400117 	ldw	r17,4(sp)
    4374:	dc000017 	ldw	r16,0(sp)
    4378:	dec00304 	addi	sp,sp,12
    437c:	f800283a 	ret
    4380:	80c00e17 	ldw	r3,56(r16)
    4384:	0005883a 	mov	r2,zero
    4388:	80c00015 	stw	r3,0(r16)
    438c:	dfc00217 	ldw	ra,8(sp)
    4390:	dc400117 	ldw	r17,4(sp)
    4394:	dc000017 	ldw	r16,0(sp)
    4398:	dec00304 	addi	sp,sp,12
    439c:	f800283a 	ret
    43a0:	8809883a 	mov	r4,r17
    43a4:	800b883a 	mov	r5,r16
    43a8:	00021780 	call	2178 <_fflush_r>
    43ac:	103fdc1e 	bne	r2,zero,4320 <__srefill_r+0x11c>
    43b0:	8080030b 	ldhu	r2,12(r16)
    43b4:	00fffdc4 	movi	r3,-9
    43b8:	80000215 	stw	zero,8(r16)
    43bc:	1884703a 	and	r2,r3,r2
    43c0:	80000615 	stw	zero,24(r16)
    43c4:	003fd006 	br	4308 <__srefill_r+0x104>
    43c8:	8809883a 	mov	r4,r17
    43cc:	800b883a 	mov	r5,r16
    43d0:	000350c0 	call	350c <__smakebuf_r>
    43d4:	003fac06 	br	4288 <__srefill_r+0x84>
    43d8:	00c00244 	movi	r3,9
    43dc:	10801014 	ori	r2,r2,64
    43e0:	88c00015 	stw	r3,0(r17)
    43e4:	8080030d 	sth	r2,12(r16)
    43e8:	00bfffc4 	movi	r2,-1
    43ec:	003fb706 	br	42cc <__srefill_r+0xc8>

000043f0 <_sbrk_r>:
    43f0:	defffd04 	addi	sp,sp,-12
    43f4:	dc400115 	stw	r17,4(sp)
    43f8:	dc000015 	stw	r16,0(sp)
    43fc:	2023883a 	mov	r17,r4
    4400:	040000b4 	movhi	r16,2
    4404:	84219804 	addi	r16,r16,-31136
    4408:	2809883a 	mov	r4,r5
    440c:	dfc00215 	stw	ra,8(sp)
    4410:	80000015 	stw	zero,0(r16)
    4414:	0011d9c0 	call	11d9c <sbrk>
    4418:	00ffffc4 	movi	r3,-1
    441c:	10c00526 	beq	r2,r3,4434 <_sbrk_r+0x44>
    4420:	dfc00217 	ldw	ra,8(sp)
    4424:	dc400117 	ldw	r17,4(sp)
    4428:	dc000017 	ldw	r16,0(sp)
    442c:	dec00304 	addi	sp,sp,12
    4430:	f800283a 	ret
    4434:	80c00017 	ldw	r3,0(r16)
    4438:	183ff926 	beq	r3,zero,4420 <_sbrk_r+0x30>
    443c:	88c00015 	stw	r3,0(r17)
    4440:	dfc00217 	ldw	ra,8(sp)
    4444:	dc400117 	ldw	r17,4(sp)
    4448:	dc000017 	ldw	r16,0(sp)
    444c:	dec00304 	addi	sp,sp,12
    4450:	f800283a 	ret

00004454 <__sread>:
    4454:	defffe04 	addi	sp,sp,-8
    4458:	dc000015 	stw	r16,0(sp)
    445c:	2821883a 	mov	r16,r5
    4460:	2940038f 	ldh	r5,14(r5)
    4464:	dfc00115 	stw	ra,4(sp)
    4468:	000b2340 	call	b234 <_read_r>
    446c:	10000716 	blt	r2,zero,448c <__sread+0x38>
    4470:	80c01417 	ldw	r3,80(r16)
    4474:	1887883a 	add	r3,r3,r2
    4478:	80c01415 	stw	r3,80(r16)
    447c:	dfc00117 	ldw	ra,4(sp)
    4480:	dc000017 	ldw	r16,0(sp)
    4484:	dec00204 	addi	sp,sp,8
    4488:	f800283a 	ret
    448c:	80c0030b 	ldhu	r3,12(r16)
    4490:	18fbffcc 	andi	r3,r3,61439
    4494:	80c0030d 	sth	r3,12(r16)
    4498:	dfc00117 	ldw	ra,4(sp)
    449c:	dc000017 	ldw	r16,0(sp)
    44a0:	dec00204 	addi	sp,sp,8
    44a4:	f800283a 	ret

000044a8 <__swrite>:
    44a8:	2880030b 	ldhu	r2,12(r5)
    44ac:	defffb04 	addi	sp,sp,-20
    44b0:	dcc00315 	stw	r19,12(sp)
    44b4:	10c0400c 	andi	r3,r2,256
    44b8:	18ffffcc 	andi	r3,r3,65535
    44bc:	18e0001c 	xori	r3,r3,32768
    44c0:	dc800215 	stw	r18,8(sp)
    44c4:	dc400115 	stw	r17,4(sp)
    44c8:	dc000015 	stw	r16,0(sp)
    44cc:	dfc00415 	stw	ra,16(sp)
    44d0:	18e00004 	addi	r3,r3,-32768
    44d4:	2821883a 	mov	r16,r5
    44d8:	2027883a 	mov	r19,r4
    44dc:	3025883a 	mov	r18,r6
    44e0:	3823883a 	mov	r17,r7
    44e4:	18000526 	beq	r3,zero,44fc <__swrite+0x54>
    44e8:	2940038f 	ldh	r5,14(r5)
    44ec:	000d883a 	mov	r6,zero
    44f0:	01c00084 	movi	r7,2
    44f4:	0009e0c0 	call	9e0c <_lseek_r>
    44f8:	8080030b 	ldhu	r2,12(r16)
    44fc:	8140038f 	ldh	r5,14(r16)
    4500:	10bbffcc 	andi	r2,r2,61439
    4504:	9809883a 	mov	r4,r19
    4508:	900d883a 	mov	r6,r18
    450c:	880f883a 	mov	r7,r17
    4510:	8080030d 	sth	r2,12(r16)
    4514:	dfc00417 	ldw	ra,16(sp)
    4518:	dcc00317 	ldw	r19,12(sp)
    451c:	dc800217 	ldw	r18,8(sp)
    4520:	dc400117 	ldw	r17,4(sp)
    4524:	dc000017 	ldw	r16,0(sp)
    4528:	dec00504 	addi	sp,sp,20
    452c:	0007c7c1 	jmpi	7c7c <_write_r>

00004530 <__sseek>:
    4530:	defffe04 	addi	sp,sp,-8
    4534:	dc000015 	stw	r16,0(sp)
    4538:	2821883a 	mov	r16,r5
    453c:	2940038f 	ldh	r5,14(r5)
    4540:	dfc00115 	stw	ra,4(sp)
    4544:	0009e0c0 	call	9e0c <_lseek_r>
    4548:	00ffffc4 	movi	r3,-1
    454c:	10c00826 	beq	r2,r3,4570 <__sseek+0x40>
    4550:	80c0030b 	ldhu	r3,12(r16)
    4554:	80801415 	stw	r2,80(r16)
    4558:	18c40014 	ori	r3,r3,4096
    455c:	80c0030d 	sth	r3,12(r16)
    4560:	dfc00117 	ldw	ra,4(sp)
    4564:	dc000017 	ldw	r16,0(sp)
    4568:	dec00204 	addi	sp,sp,8
    456c:	f800283a 	ret
    4570:	80c0030b 	ldhu	r3,12(r16)
    4574:	18fbffcc 	andi	r3,r3,61439
    4578:	80c0030d 	sth	r3,12(r16)
    457c:	dfc00117 	ldw	ra,4(sp)
    4580:	dc000017 	ldw	r16,0(sp)
    4584:	dec00204 	addi	sp,sp,8
    4588:	f800283a 	ret

0000458c <__sclose>:
    458c:	2940038f 	ldh	r5,14(r5)
    4590:	0007e5c1 	jmpi	7e5c <_close_r>

00004594 <strlen>:
    4594:	208000cc 	andi	r2,r4,3
    4598:	10001f1e 	bne	r2,zero,4618 <strlen+0x84>
    459c:	20800017 	ldw	r2,0(r4)
    45a0:	01ffbff4 	movhi	r7,65279
    45a4:	39ffbfc4 	addi	r7,r7,-257
    45a8:	01a02074 	movhi	r6,32897
    45ac:	31a02004 	addi	r6,r6,-32640
    45b0:	11c7883a 	add	r3,r2,r7
    45b4:	0084303a 	nor	r2,zero,r2
    45b8:	1886703a 	and	r3,r3,r2
    45bc:	1986703a 	and	r3,r3,r6
    45c0:	2005883a 	mov	r2,r4
    45c4:	1800101e 	bne	r3,zero,4608 <strlen+0x74>
    45c8:	10800104 	addi	r2,r2,4
    45cc:	10c00017 	ldw	r3,0(r2)
    45d0:	19cb883a 	add	r5,r3,r7
    45d4:	00c6303a 	nor	r3,zero,r3
    45d8:	28c6703a 	and	r3,r5,r3
    45dc:	1986703a 	and	r3,r3,r6
    45e0:	1800091e 	bne	r3,zero,4608 <strlen+0x74>
    45e4:	10800104 	addi	r2,r2,4
    45e8:	10c00017 	ldw	r3,0(r2)
    45ec:	19cb883a 	add	r5,r3,r7
    45f0:	00c6303a 	nor	r3,zero,r3
    45f4:	28c6703a 	and	r3,r5,r3
    45f8:	1986703a 	and	r3,r3,r6
    45fc:	183ff226 	beq	r3,zero,45c8 <strlen+0x34>
    4600:	00000106 	br	4608 <strlen+0x74>
    4604:	10800044 	addi	r2,r2,1
    4608:	10c00007 	ldb	r3,0(r2)
    460c:	183ffd1e 	bne	r3,zero,4604 <strlen+0x70>
    4610:	1105c83a 	sub	r2,r2,r4
    4614:	f800283a 	ret
    4618:	2005883a 	mov	r2,r4
    461c:	003ffa06 	br	4608 <strlen+0x74>

00004620 <__sprint_r>:
    4620:	30800217 	ldw	r2,8(r6)
    4624:	defffe04 	addi	sp,sp,-8
    4628:	dc000015 	stw	r16,0(sp)
    462c:	dfc00115 	stw	ra,4(sp)
    4630:	3021883a 	mov	r16,r6
    4634:	10000226 	beq	r2,zero,4640 <__sprint_r+0x20>
    4638:	00097b00 	call	97b0 <__sfvwrite_r>
    463c:	80000215 	stw	zero,8(r16)
    4640:	80000115 	stw	zero,4(r16)
    4644:	dfc00117 	ldw	ra,4(sp)
    4648:	dc000017 	ldw	r16,0(sp)
    464c:	dec00204 	addi	sp,sp,8
    4650:	f800283a 	ret

00004654 <___vfprintf_internal_r>:
    4654:	defeb904 	addi	sp,sp,-1308
    4658:	dc013d15 	stw	r16,1268(sp)
    465c:	d9013015 	stw	r4,1216(sp)
    4660:	dfc14615 	stw	ra,1304(sp)
    4664:	df014515 	stw	fp,1300(sp)
    4668:	ddc14415 	stw	r23,1296(sp)
    466c:	dd814315 	stw	r22,1292(sp)
    4670:	dd414215 	stw	r21,1288(sp)
    4674:	dd014115 	stw	r20,1284(sp)
    4678:	dcc14015 	stw	r19,1280(sp)
    467c:	dc813f15 	stw	r18,1276(sp)
    4680:	dc413e15 	stw	r17,1272(sp)
    4684:	d9412915 	stw	r5,1188(sp)
    4688:	3021883a 	mov	r16,r6
    468c:	d9c12d15 	stw	r7,1204(sp)
    4690:	0009dd80 	call	9dd8 <_localeconv_r>
    4694:	10800017 	ldw	r2,0(r2)
    4698:	d9013017 	ldw	r4,1216(sp)
    469c:	d8013315 	stw	zero,1228(sp)
    46a0:	d8813715 	stw	r2,1244(sp)
    46a4:	d8013415 	stw	zero,1232(sp)
    46a8:	20000226 	beq	r4,zero,46b4 <___vfprintf_internal_r+0x60>
    46ac:	20800e17 	ldw	r2,56(r4)
    46b0:	10014b26 	beq	r2,zero,4be0 <___vfprintf_internal_r+0x58c>
    46b4:	d8c12917 	ldw	r3,1188(sp)
    46b8:	1880030b 	ldhu	r2,12(r3)
    46bc:	10c0020c 	andi	r3,r2,8
    46c0:	18ffffcc 	andi	r3,r3,65535
    46c4:	18e0001c 	xori	r3,r3,32768
    46c8:	18e00004 	addi	r3,r3,-32768
    46cc:	1800ed26 	beq	r3,zero,4a84 <___vfprintf_internal_r+0x430>
    46d0:	d9012917 	ldw	r4,1188(sp)
    46d4:	20c00417 	ldw	r3,16(r4)
    46d8:	1800ea26 	beq	r3,zero,4a84 <___vfprintf_internal_r+0x430>
    46dc:	1100068c 	andi	r4,r2,26
    46e0:	00c00284 	movi	r3,10
    46e4:	20c0f026 	beq	r4,r3,4aa8 <___vfprintf_internal_r+0x454>
    46e8:	d9010dc4 	addi	r4,sp,1079
    46ec:	d8810e04 	addi	r2,sp,1080
    46f0:	dc413017 	ldw	r17,1216(sp)
    46f4:	d8c00404 	addi	r3,sp,16
    46f8:	d9012615 	stw	r4,1176(sp)
    46fc:	1109c83a 	sub	r4,r2,r4
    4700:	d8812715 	stw	r2,1180(sp)
    4704:	d8c11b15 	stw	r3,1132(sp)
    4708:	d8011d15 	stw	zero,1140(sp)
    470c:	d8011c15 	stw	zero,1136(sp)
    4710:	802b883a 	mov	r21,r16
    4714:	d8013215 	stw	zero,1224(sp)
    4718:	d8013615 	stw	zero,1240(sp)
    471c:	d8013515 	stw	zero,1236(sp)
    4720:	d8012c15 	stw	zero,1200(sp)
    4724:	1813883a 	mov	r9,r3
    4728:	d9013915 	stw	r4,1252(sp)
    472c:	a8800007 	ldb	r2,0(r21)
    4730:	1002f326 	beq	r2,zero,5300 <___vfprintf_internal_r+0xcac>
    4734:	00c00944 	movi	r3,37
    4738:	a825883a 	mov	r18,r21
    473c:	10c0021e 	bne	r2,r3,4748 <___vfprintf_internal_r+0xf4>
    4740:	00001406 	br	4794 <___vfprintf_internal_r+0x140>
    4744:	10c00326 	beq	r2,r3,4754 <___vfprintf_internal_r+0x100>
    4748:	94800044 	addi	r18,r18,1
    474c:	90800007 	ldb	r2,0(r18)
    4750:	103ffc1e 	bne	r2,zero,4744 <___vfprintf_internal_r+0xf0>
    4754:	9561c83a 	sub	r16,r18,r21
    4758:	80000e26 	beq	r16,zero,4794 <___vfprintf_internal_r+0x140>
    475c:	da011d17 	ldw	r8,1140(sp)
    4760:	d8c11c17 	ldw	r3,1136(sp)
    4764:	4d400015 	stw	r21,0(r9)
    4768:	4c000115 	stw	r16,4(r9)
    476c:	4411883a 	add	r8,r8,r16
    4770:	18c00044 	addi	r3,r3,1
    4774:	da011d15 	stw	r8,1140(sp)
    4778:	d8c11c15 	stw	r3,1136(sp)
    477c:	008001c4 	movi	r2,7
    4780:	10c11016 	blt	r2,r3,4bc4 <___vfprintf_internal_r+0x570>
    4784:	4a400204 	addi	r9,r9,8
    4788:	d8812c17 	ldw	r2,1200(sp)
    478c:	1405883a 	add	r2,r2,r16
    4790:	d8812c15 	stw	r2,1200(sp)
    4794:	90800007 	ldb	r2,0(r18)
    4798:	1000ee26 	beq	r2,zero,4b54 <___vfprintf_internal_r+0x500>
    479c:	95400044 	addi	r21,r18,1
    47a0:	94800047 	ldb	r18,1(r18)
    47a4:	073fffc4 	movi	fp,-1
    47a8:	e007883a 	mov	r3,fp
    47ac:	d8012585 	stb	zero,1174(sp)
    47b0:	d8012e15 	stw	zero,1208(sp)
    47b4:	0021883a 	mov	r16,zero
    47b8:	05001604 	movi	r20,88
    47bc:	04c00244 	movi	r19,9
    47c0:	4839883a 	mov	fp,r9
    47c4:	ad400044 	addi	r21,r21,1
    47c8:	90bff804 	addi	r2,r18,-32
    47cc:	a080462e 	bgeu	r20,r2,48e8 <___vfprintf_internal_r+0x294>
    47d0:	e013883a 	mov	r9,fp
    47d4:	9000df26 	beq	r18,zero,4b54 <___vfprintf_internal_r+0x500>
    47d8:	00c00044 	movi	r3,1
    47dc:	d8c12815 	stw	r3,1184(sp)
    47e0:	dc810405 	stb	r18,1040(sp)
    47e4:	d8012585 	stb	zero,1174(sp)
    47e8:	d8c12b15 	stw	r3,1196(sp)
    47ec:	dcc10404 	addi	r19,sp,1040
    47f0:	d8013115 	stw	zero,1220(sp)
    47f4:	80c0008c 	andi	r3,r16,2
    47f8:	d8c12a15 	stw	r3,1192(sp)
    47fc:	18000326 	beq	r3,zero,480c <___vfprintf_internal_r+0x1b8>
    4800:	d8c12817 	ldw	r3,1184(sp)
    4804:	18c00084 	addi	r3,r3,2
    4808:	d8c12815 	stw	r3,1184(sp)
    480c:	80c0210c 	andi	r3,r16,132
    4810:	d8c12f15 	stw	r3,1212(sp)
    4814:	1802251e 	bne	r3,zero,50ac <___vfprintf_internal_r+0xa58>
    4818:	d9012e17 	ldw	r4,1208(sp)
    481c:	d8c12817 	ldw	r3,1184(sp)
    4820:	20edc83a 	sub	r22,r4,r3
    4824:	0582210e 	bge	zero,r22,50ac <___vfprintf_internal_r+0xa58>
    4828:	02800404 	movi	r10,16
    482c:	da011d17 	ldw	r8,1140(sp)
    4830:	d8c11c17 	ldw	r3,1136(sp)
    4834:	05c00074 	movhi	r23,1
    4838:	bdd2a284 	addi	r23,r23,19082
    483c:	5580200e 	bge	r10,r22,48c0 <___vfprintf_internal_r+0x26c>
    4840:	dc813815 	stw	r18,1248(sp)
    4844:	5039883a 	mov	fp,r10
    4848:	b825883a 	mov	r18,r23
    484c:	050001c4 	movi	r20,7
    4850:	b02f883a 	mov	r23,r22
    4854:	802d883a 	mov	r22,r16
    4858:	dc012917 	ldw	r16,1188(sp)
    485c:	00000306 	br	486c <___vfprintf_internal_r+0x218>
    4860:	bdfffc04 	addi	r23,r23,-16
    4864:	4a400204 	addi	r9,r9,8
    4868:	e5c0110e 	bge	fp,r23,48b0 <___vfprintf_internal_r+0x25c>
    486c:	4c800015 	stw	r18,0(r9)
    4870:	4f000115 	stw	fp,4(r9)
    4874:	42000404 	addi	r8,r8,16
    4878:	18c00044 	addi	r3,r3,1
    487c:	da011d15 	stw	r8,1140(sp)
    4880:	d8c11c15 	stw	r3,1136(sp)
    4884:	a0fff60e 	bge	r20,r3,4860 <___vfprintf_internal_r+0x20c>
    4888:	8809883a 	mov	r4,r17
    488c:	800b883a 	mov	r5,r16
    4890:	d9811b04 	addi	r6,sp,1132
    4894:	00046200 	call	4620 <__sprint_r>
    4898:	1000b41e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    489c:	bdfffc04 	addi	r23,r23,-16
    48a0:	da011d17 	ldw	r8,1140(sp)
    48a4:	d8c11c17 	ldw	r3,1136(sp)
    48a8:	da400404 	addi	r9,sp,16
    48ac:	e5ffef16 	blt	fp,r23,486c <___vfprintf_internal_r+0x218>
    48b0:	b021883a 	mov	r16,r22
    48b4:	b82d883a 	mov	r22,r23
    48b8:	902f883a 	mov	r23,r18
    48bc:	dc813817 	ldw	r18,1248(sp)
    48c0:	4dc00015 	stw	r23,0(r9)
    48c4:	4d800115 	stw	r22,4(r9)
    48c8:	4591883a 	add	r8,r8,r22
    48cc:	18c00044 	addi	r3,r3,1
    48d0:	da011d15 	stw	r8,1140(sp)
    48d4:	d8c11c15 	stw	r3,1136(sp)
    48d8:	008001c4 	movi	r2,7
    48dc:	10c3fe16 	blt	r2,r3,58d8 <___vfprintf_internal_r+0x1284>
    48e0:	4a400204 	addi	r9,r9,8
    48e4:	0001f306 	br	50b4 <___vfprintf_internal_r+0xa60>
    48e8:	1085883a 	add	r2,r2,r2
    48ec:	1085883a 	add	r2,r2,r2
    48f0:	01000034 	movhi	r4,0
    48f4:	21124104 	addi	r4,r4,18692
    48f8:	1105883a 	add	r2,r2,r4
    48fc:	10800017 	ldw	r2,0(r2)
    4900:	1000683a 	jmp	r2
    4904:	00004fe0 	cmpeqi	zero,zero,319
    4908:	000047d0 	cmplti	zero,zero,287
    490c:	000047d0 	cmplti	zero,zero,287
    4910:	00004ff8 	rdprs	zero,zero,319
    4914:	000047d0 	cmplti	zero,zero,287
    4918:	000047d0 	cmplti	zero,zero,287
    491c:	000047d0 	cmplti	zero,zero,287
    4920:	000047d0 	cmplti	zero,zero,287
    4924:	000047d0 	cmplti	zero,zero,287
    4928:	000047d0 	cmplti	zero,zero,287
    492c:	00004eb0 	cmpltui	zero,zero,314
    4930:	00005044 	movi	zero,321
    4934:	000047d0 	cmplti	zero,zero,287
    4938:	00004a78 	rdprs	zero,zero,297
    493c:	00004e18 	cmpnei	zero,zero,312
    4940:	000047d0 	cmplti	zero,zero,287
    4944:	00005004 	movi	zero,320
    4948:	00005010 	cmplti	zero,zero,320
    494c:	00005010 	cmplti	zero,zero,320
    4950:	00005010 	cmplti	zero,zero,320
    4954:	00005010 	cmplti	zero,zero,320
    4958:	00005010 	cmplti	zero,zero,320
    495c:	00005010 	cmplti	zero,zero,320
    4960:	00005010 	cmplti	zero,zero,320
    4964:	00005010 	cmplti	zero,zero,320
    4968:	00005010 	cmplti	zero,zero,320
    496c:	000047d0 	cmplti	zero,zero,287
    4970:	000047d0 	cmplti	zero,zero,287
    4974:	000047d0 	cmplti	zero,zero,287
    4978:	000047d0 	cmplti	zero,zero,287
    497c:	000047d0 	cmplti	zero,zero,287
    4980:	000047d0 	cmplti	zero,zero,287
    4984:	000047d0 	cmplti	zero,zero,287
    4988:	000047d0 	cmplti	zero,zero,287
    498c:	000047d0 	cmplti	zero,zero,287
    4990:	000047d0 	cmplti	zero,zero,287
    4994:	00004be8 	cmpgeui	zero,zero,303
    4998:	00004ca8 	cmpgeui	zero,zero,306
    499c:	000047d0 	cmplti	zero,zero,287
    49a0:	00004ca8 	cmpgeui	zero,zero,306
    49a4:	000047d0 	cmplti	zero,zero,287
    49a8:	000047d0 	cmplti	zero,zero,287
    49ac:	000047d0 	cmplti	zero,zero,287
    49b0:	000047d0 	cmplti	zero,zero,287
    49b4:	00004d3c 	xorhi	zero,zero,308
    49b8:	000047d0 	cmplti	zero,zero,287
    49bc:	000047d0 	cmplti	zero,zero,287
    49c0:	00004d48 	cmpgei	zero,zero,309
    49c4:	000047d0 	cmplti	zero,zero,287
    49c8:	000047d0 	cmplti	zero,zero,287
    49cc:	000047d0 	cmplti	zero,zero,287
    49d0:	000047d0 	cmplti	zero,zero,287
    49d4:	000047d0 	cmplti	zero,zero,287
    49d8:	00004d80 	call	4d8 <encode_image+0x4>
    49dc:	000047d0 	cmplti	zero,zero,287
    49e0:	000047d0 	cmplti	zero,zero,287
    49e4:	00004dbc 	xorhi	zero,zero,310
    49e8:	000047d0 	cmplti	zero,zero,287
    49ec:	000047d0 	cmplti	zero,zero,287
    49f0:	000047d0 	cmplti	zero,zero,287
    49f4:	000047d0 	cmplti	zero,zero,287
    49f8:	000047d0 	cmplti	zero,zero,287
    49fc:	000047d0 	cmplti	zero,zero,287
    4a00:	000047d0 	cmplti	zero,zero,287
    4a04:	000047d0 	cmplti	zero,zero,287
    4a08:	000047d0 	cmplti	zero,zero,287
    4a0c:	000047d0 	cmplti	zero,zero,287
    4a10:	00005054 	movui	zero,321
    4a14:	00005088 	cmpgei	zero,zero,322
    4a18:	00004ca8 	cmpgeui	zero,zero,306
    4a1c:	00004ca8 	cmpgeui	zero,zero,306
    4a20:	00004ca8 	cmpgeui	zero,zero,306
    4a24:	00004fd4 	movui	zero,319
    4a28:	00005088 	cmpgei	zero,zero,322
    4a2c:	000047d0 	cmplti	zero,zero,287
    4a30:	000047d0 	cmplti	zero,zero,287
    4a34:	00004e60 	cmpeqi	zero,zero,313
    4a38:	000047d0 	cmplti	zero,zero,287
    4a3c:	00004e78 	rdprs	zero,zero,313
    4a40:	00005094 	movui	zero,322
    4a44:	00004ed8 	cmpnei	zero,zero,315
    4a48:	00004f28 	cmpgeui	zero,zero,316
    4a4c:	000047d0 	cmplti	zero,zero,287
    4a50:	00004f34 	movhi	zero,316
    4a54:	000047d0 	cmplti	zero,zero,287
    4a58:	000050a0 	cmpeqi	zero,zero,322
    4a5c:	000047d0 	cmplti	zero,zero,287
    4a60:	000047d0 	cmplti	zero,zero,287
    4a64:	00004f98 	cmpnei	zero,zero,318
    4a68:	d9012e17 	ldw	r4,1208(sp)
    4a6c:	d8812d15 	stw	r2,1204(sp)
    4a70:	0109c83a 	sub	r4,zero,r4
    4a74:	d9012e15 	stw	r4,1208(sp)
    4a78:	84000114 	ori	r16,r16,4
    4a7c:	ac800007 	ldb	r18,0(r21)
    4a80:	003f5006 	br	47c4 <___vfprintf_internal_r+0x170>
    4a84:	d9013017 	ldw	r4,1216(sp)
    4a88:	d9412917 	ldw	r5,1188(sp)
    4a8c:	0007ce80 	call	7ce8 <__swsetup_r>
    4a90:	10003d1e 	bne	r2,zero,4b88 <___vfprintf_internal_r+0x534>
    4a94:	d8c12917 	ldw	r3,1188(sp)
    4a98:	1880030b 	ldhu	r2,12(r3)
    4a9c:	00c00284 	movi	r3,10
    4aa0:	1100068c 	andi	r4,r2,26
    4aa4:	20ff101e 	bne	r4,r3,46e8 <___vfprintf_internal_r+0x94>
    4aa8:	d9012917 	ldw	r4,1188(sp)
    4aac:	20c0038b 	ldhu	r3,14(r4)
    4ab0:	193fffcc 	andi	r4,r3,65535
    4ab4:	2120001c 	xori	r4,r4,32768
    4ab8:	21200004 	addi	r4,r4,-32768
    4abc:	203f0a16 	blt	r4,zero,46e8 <___vfprintf_internal_r+0x94>
    4ac0:	d9012917 	ldw	r4,1188(sp)
    4ac4:	d9c12d17 	ldw	r7,1204(sp)
    4ac8:	10bfff4c 	andi	r2,r2,65533
    4acc:	22800717 	ldw	r10,28(r4)
    4ad0:	22400917 	ldw	r9,36(r4)
    4ad4:	d9013017 	ldw	r4,1216(sp)
    4ad8:	02010004 	movi	r8,1024
    4adc:	d881070d 	sth	r2,1052(sp)
    4ae0:	d9410404 	addi	r5,sp,1040
    4ae4:	d8800404 	addi	r2,sp,16
    4ae8:	800d883a 	mov	r6,r16
    4aec:	d8c1078d 	sth	r3,1054(sp)
    4af0:	da810b15 	stw	r10,1068(sp)
    4af4:	da410d15 	stw	r9,1076(sp)
    4af8:	d8810415 	stw	r2,1040(sp)
    4afc:	d8810815 	stw	r2,1056(sp)
    4b00:	da010615 	stw	r8,1048(sp)
    4b04:	da010915 	stw	r8,1060(sp)
    4b08:	d8010a15 	stw	zero,1064(sp)
    4b0c:	00046540 	call	4654 <___vfprintf_internal_r>
    4b10:	d8812c15 	stw	r2,1200(sp)
    4b14:	10000416 	blt	r2,zero,4b28 <___vfprintf_internal_r+0x4d4>
    4b18:	d9013017 	ldw	r4,1216(sp)
    4b1c:	d9410404 	addi	r5,sp,1040
    4b20:	00021780 	call	2178 <_fflush_r>
    4b24:	1006501e 	bne	r2,zero,6468 <___vfprintf_internal_r+0x1e14>
    4b28:	d881070b 	ldhu	r2,1052(sp)
    4b2c:	1080100c 	andi	r2,r2,64
    4b30:	10bfffcc 	andi	r2,r2,65535
    4b34:	10a0001c 	xori	r2,r2,32768
    4b38:	10a00004 	addi	r2,r2,-32768
    4b3c:	10001426 	beq	r2,zero,4b90 <___vfprintf_internal_r+0x53c>
    4b40:	d8c12917 	ldw	r3,1188(sp)
    4b44:	1880030b 	ldhu	r2,12(r3)
    4b48:	10801014 	ori	r2,r2,64
    4b4c:	1880030d 	sth	r2,12(r3)
    4b50:	00000f06 	br	4b90 <___vfprintf_internal_r+0x53c>
    4b54:	d8811d17 	ldw	r2,1140(sp)
    4b58:	10000426 	beq	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    4b5c:	d9013017 	ldw	r4,1216(sp)
    4b60:	d9412917 	ldw	r5,1188(sp)
    4b64:	d9811b04 	addi	r6,sp,1132
    4b68:	00046200 	call	4620 <__sprint_r>
    4b6c:	d8c12917 	ldw	r3,1188(sp)
    4b70:	1880030b 	ldhu	r2,12(r3)
    4b74:	1080100c 	andi	r2,r2,64
    4b78:	10bfffcc 	andi	r2,r2,65535
    4b7c:	10a0001c 	xori	r2,r2,32768
    4b80:	10a00004 	addi	r2,r2,-32768
    4b84:	10000226 	beq	r2,zero,4b90 <___vfprintf_internal_r+0x53c>
    4b88:	00bfffc4 	movi	r2,-1
    4b8c:	d8812c15 	stw	r2,1200(sp)
    4b90:	d8812c17 	ldw	r2,1200(sp)
    4b94:	dfc14617 	ldw	ra,1304(sp)
    4b98:	df014517 	ldw	fp,1300(sp)
    4b9c:	ddc14417 	ldw	r23,1296(sp)
    4ba0:	dd814317 	ldw	r22,1292(sp)
    4ba4:	dd414217 	ldw	r21,1288(sp)
    4ba8:	dd014117 	ldw	r20,1284(sp)
    4bac:	dcc14017 	ldw	r19,1280(sp)
    4bb0:	dc813f17 	ldw	r18,1276(sp)
    4bb4:	dc413e17 	ldw	r17,1272(sp)
    4bb8:	dc013d17 	ldw	r16,1268(sp)
    4bbc:	dec14704 	addi	sp,sp,1308
    4bc0:	f800283a 	ret
    4bc4:	d9412917 	ldw	r5,1188(sp)
    4bc8:	8809883a 	mov	r4,r17
    4bcc:	d9811b04 	addi	r6,sp,1132
    4bd0:	00046200 	call	4620 <__sprint_r>
    4bd4:	103fe51e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    4bd8:	da400404 	addi	r9,sp,16
    4bdc:	003eea06 	br	4788 <___vfprintf_internal_r+0x134>
    4be0:	00024340 	call	2434 <__sinit>
    4be4:	003eb306 	br	46b4 <___vfprintf_internal_r+0x60>
    4be8:	e013883a 	mov	r9,fp
    4bec:	84000414 	ori	r16,r16,16
    4bf0:	1839883a 	mov	fp,r3
    4bf4:	8080080c 	andi	r2,r16,32
    4bf8:	10034426 	beq	r2,zero,590c <___vfprintf_internal_r+0x12b8>
    4bfc:	d8c12d17 	ldw	r3,1204(sp)
    4c00:	18800117 	ldw	r2,4(r3)
    4c04:	1dc00017 	ldw	r23,0(r3)
    4c08:	18c00204 	addi	r3,r3,8
    4c0c:	d8c12d15 	stw	r3,1204(sp)
    4c10:	102d883a 	mov	r22,r2
    4c14:	1003020e 	bge	r2,zero,5820 <___vfprintf_internal_r+0x11cc>
    4c18:	05efc83a 	sub	r23,zero,r23
    4c1c:	b804c03a 	cmpne	r2,r23,zero
    4c20:	05adc83a 	sub	r22,zero,r22
    4c24:	b0adc83a 	sub	r22,r22,r2
    4c28:	00800b44 	movi	r2,45
    4c2c:	d8812585 	stb	r2,1174(sp)
    4c30:	00c00044 	movi	r3,1
    4c34:	bd84b03a 	or	r2,r23,r22
    4c38:	e0000216 	blt	fp,zero,4c44 <___vfprintf_internal_r+0x5f0>
    4c3c:	013fdfc4 	movi	r4,-129
    4c40:	8120703a 	and	r16,r16,r4
    4c44:	1001cc1e 	bne	r2,zero,5378 <___vfprintf_internal_r+0xd24>
    4c48:	e001cb1e 	bne	fp,zero,5378 <___vfprintf_internal_r+0xd24>
    4c4c:	18c03fcc 	andi	r3,r3,255
    4c50:	1802ca1e 	bne	r3,zero,577c <___vfprintf_internal_r+0x1128>
    4c54:	8080004c 	andi	r2,r16,1
    4c58:	1002c826 	beq	r2,zero,577c <___vfprintf_internal_r+0x1128>
    4c5c:	d8c13917 	ldw	r3,1252(sp)
    4c60:	00800c04 	movi	r2,48
    4c64:	d8810dc5 	stb	r2,1079(sp)
    4c68:	d8c12b15 	stw	r3,1196(sp)
    4c6c:	dcc10dc4 	addi	r19,sp,1079
    4c70:	d8812b17 	ldw	r2,1196(sp)
    4c74:	d8812815 	stw	r2,1184(sp)
    4c78:	1700010e 	bge	r2,fp,4c80 <___vfprintf_internal_r+0x62c>
    4c7c:	df012815 	stw	fp,1184(sp)
    4c80:	d8812583 	ldbu	r2,1174(sp)
    4c84:	df013115 	stw	fp,1220(sp)
    4c88:	10803fcc 	andi	r2,r2,255
    4c8c:	1080201c 	xori	r2,r2,128
    4c90:	10bfe004 	addi	r2,r2,-128
    4c94:	103ed726 	beq	r2,zero,47f4 <___vfprintf_internal_r+0x1a0>
    4c98:	d8c12817 	ldw	r3,1184(sp)
    4c9c:	18c00044 	addi	r3,r3,1
    4ca0:	d8c12815 	stw	r3,1184(sp)
    4ca4:	003ed306 	br	47f4 <___vfprintf_internal_r+0x1a0>
    4ca8:	8080020c 	andi	r2,r16,8
    4cac:	e013883a 	mov	r9,fp
    4cb0:	1839883a 	mov	fp,r3
    4cb4:	1003a626 	beq	r2,zero,5b50 <___vfprintf_internal_r+0x14fc>
    4cb8:	d9012d17 	ldw	r4,1204(sp)
    4cbc:	25800017 	ldw	r22,0(r4)
    4cc0:	25000117 	ldw	r20,4(r4)
    4cc4:	21000204 	addi	r4,r4,8
    4cc8:	d9012d15 	stw	r4,1204(sp)
    4ccc:	dd813315 	stw	r22,1228(sp)
    4cd0:	dd013415 	stw	r20,1232(sp)
    4cd4:	b009883a 	mov	r4,r22
    4cd8:	a00b883a 	mov	r5,r20
    4cdc:	da413c15 	stw	r9,1264(sp)
    4ce0:	000b89c0 	call	b89c <__isinfd>
    4ce4:	da413c17 	ldw	r9,1264(sp)
    4ce8:	b009883a 	mov	r4,r22
    4cec:	a00b883a 	mov	r5,r20
    4cf0:	10041d26 	beq	r2,zero,5d68 <___vfprintf_internal_r+0x1714>
    4cf4:	000d883a 	mov	r6,zero
    4cf8:	000f883a 	mov	r7,zero
    4cfc:	00106280 	call	10628 <__ltdf2>
    4d00:	da413c17 	ldw	r9,1264(sp)
    4d04:	1004da16 	blt	r2,zero,6070 <___vfprintf_internal_r+0x1a1c>
    4d08:	d8812583 	ldbu	r2,1174(sp)
    4d0c:	00c011c4 	movi	r3,71
    4d10:	1c83d116 	blt	r3,r18,5c58 <___vfprintf_internal_r+0x1604>
    4d14:	04c00074 	movhi	r19,1
    4d18:	9cd29204 	addi	r19,r19,19016
    4d1c:	00c000c4 	movi	r3,3
    4d20:	d8c12815 	stw	r3,1184(sp)
    4d24:	00ffdfc4 	movi	r3,-129
    4d28:	80e0703a 	and	r16,r16,r3
    4d2c:	d8c12817 	ldw	r3,1184(sp)
    4d30:	d8013115 	stw	zero,1220(sp)
    4d34:	d8c12b15 	stw	r3,1196(sp)
    4d38:	003fd306 	br	4c88 <___vfprintf_internal_r+0x634>
    4d3c:	84000214 	ori	r16,r16,8
    4d40:	ac800007 	ldb	r18,0(r21)
    4d44:	003e9f06 	br	47c4 <___vfprintf_internal_r+0x170>
    4d48:	e013883a 	mov	r9,fp
    4d4c:	84000414 	ori	r16,r16,16
    4d50:	1839883a 	mov	fp,r3
    4d54:	8080080c 	andi	r2,r16,32
    4d58:	10031d26 	beq	r2,zero,59d0 <___vfprintf_internal_r+0x137c>
    4d5c:	d8812d17 	ldw	r2,1204(sp)
    4d60:	0007883a 	mov	r3,zero
    4d64:	15c00017 	ldw	r23,0(r2)
    4d68:	15800117 	ldw	r22,4(r2)
    4d6c:	10800204 	addi	r2,r2,8
    4d70:	d8812d15 	stw	r2,1204(sp)
    4d74:	d8012585 	stb	zero,1174(sp)
    4d78:	bd84b03a 	or	r2,r23,r22
    4d7c:	003fae06 	br	4c38 <___vfprintf_internal_r+0x5e4>
    4d80:	e013883a 	mov	r9,fp
    4d84:	84000414 	ori	r16,r16,16
    4d88:	1839883a 	mov	fp,r3
    4d8c:	8080080c 	andi	r2,r16,32
    4d90:	1002e726 	beq	r2,zero,5930 <___vfprintf_internal_r+0x12dc>
    4d94:	d8c12d17 	ldw	r3,1204(sp)
    4d98:	d9012d17 	ldw	r4,1204(sp)
    4d9c:	1dc00017 	ldw	r23,0(r3)
    4da0:	1d800117 	ldw	r22,4(r3)
    4da4:	21000204 	addi	r4,r4,8
    4da8:	00c00044 	movi	r3,1
    4dac:	d9012d15 	stw	r4,1204(sp)
    4db0:	bd84b03a 	or	r2,r23,r22
    4db4:	d8012585 	stb	zero,1174(sp)
    4db8:	003f9f06 	br	4c38 <___vfprintf_internal_r+0x5e4>
    4dbc:	e013883a 	mov	r9,fp
    4dc0:	1839883a 	mov	fp,r3
    4dc4:	00c00074 	movhi	r3,1
    4dc8:	18d29604 	addi	r3,r3,19032
    4dcc:	d8c13615 	stw	r3,1240(sp)
    4dd0:	8080080c 	andi	r2,r16,32
    4dd4:	10007726 	beq	r2,zero,4fb4 <___vfprintf_internal_r+0x960>
    4dd8:	d9012d17 	ldw	r4,1204(sp)
    4ddc:	25c00017 	ldw	r23,0(r4)
    4de0:	25800117 	ldw	r22,4(r4)
    4de4:	21000204 	addi	r4,r4,8
    4de8:	d9012d15 	stw	r4,1204(sp)
    4dec:	8080004c 	andi	r2,r16,1
    4df0:	1002c226 	beq	r2,zero,58fc <___vfprintf_internal_r+0x12a8>
    4df4:	bd84b03a 	or	r2,r23,r22
    4df8:	10035d26 	beq	r2,zero,5b70 <___vfprintf_internal_r+0x151c>
    4dfc:	00c00c04 	movi	r3,48
    4e00:	d8c12505 	stb	r3,1172(sp)
    4e04:	dc812545 	stb	r18,1173(sp)
    4e08:	84000094 	ori	r16,r16,2
    4e0c:	00c00084 	movi	r3,2
    4e10:	d8012585 	stb	zero,1174(sp)
    4e14:	003f8806 	br	4c38 <___vfprintf_internal_r+0x5e4>
    4e18:	ac800007 	ldb	r18,0(r21)
    4e1c:	00c00a84 	movi	r3,42
    4e20:	adc00044 	addi	r23,r21,1
    4e24:	90c57526 	beq	r18,r3,63fc <___vfprintf_internal_r+0x1da8>
    4e28:	95bff404 	addi	r22,r18,-48
    4e2c:	0009883a 	mov	r4,zero
    4e30:	9d84ff36 	bltu	r19,r22,6230 <___vfprintf_internal_r+0x1bdc>
    4e34:	01400284 	movi	r5,10
    4e38:	00020000 	call	2000 <__mulsi3>
    4e3c:	bc800007 	ldb	r18,0(r23)
    4e40:	b089883a 	add	r4,r22,r2
    4e44:	bdc00044 	addi	r23,r23,1
    4e48:	95bff404 	addi	r22,r18,-48
    4e4c:	9dbff92e 	bgeu	r19,r22,4e34 <___vfprintf_internal_r+0x7e0>
    4e50:	2007883a 	mov	r3,r4
    4e54:	20044316 	blt	r4,zero,5f64 <___vfprintf_internal_r+0x1910>
    4e58:	b82b883a 	mov	r21,r23
    4e5c:	003e5a06 	br	47c8 <___vfprintf_internal_r+0x174>
    4e60:	ac800007 	ldb	r18,0(r21)
    4e64:	01001b04 	movi	r4,108
    4e68:	a805883a 	mov	r2,r21
    4e6c:	91045526 	beq	r18,r4,5fc4 <___vfprintf_internal_r+0x1970>
    4e70:	84000414 	ori	r16,r16,16
    4e74:	003e5306 	br	47c4 <___vfprintf_internal_r+0x170>
    4e78:	8080080c 	andi	r2,r16,32
    4e7c:	e013883a 	mov	r9,fp
    4e80:	10034026 	beq	r2,zero,5b84 <___vfprintf_internal_r+0x1530>
    4e84:	d9012d17 	ldw	r4,1204(sp)
    4e88:	20800017 	ldw	r2,0(r4)
    4e8c:	d9012c17 	ldw	r4,1200(sp)
    4e90:	2007d7fa 	srai	r3,r4,31
    4e94:	d9012d17 	ldw	r4,1204(sp)
    4e98:	10c00115 	stw	r3,4(r2)
    4e9c:	21000104 	addi	r4,r4,4
    4ea0:	d9012d15 	stw	r4,1204(sp)
    4ea4:	d9012c17 	ldw	r4,1200(sp)
    4ea8:	11000015 	stw	r4,0(r2)
    4eac:	003e1f06 	br	472c <___vfprintf_internal_r+0xd8>
    4eb0:	d9012d17 	ldw	r4,1204(sp)
    4eb4:	21000017 	ldw	r4,0(r4)
    4eb8:	d9012e15 	stw	r4,1208(sp)
    4ebc:	d9012d17 	ldw	r4,1204(sp)
    4ec0:	20800104 	addi	r2,r4,4
    4ec4:	d9012e17 	ldw	r4,1208(sp)
    4ec8:	203ee716 	blt	r4,zero,4a68 <___vfprintf_internal_r+0x414>
    4ecc:	d8812d15 	stw	r2,1204(sp)
    4ed0:	ac800007 	ldb	r18,0(r21)
    4ed4:	003e3b06 	br	47c4 <___vfprintf_internal_r+0x170>
    4ed8:	e013883a 	mov	r9,fp
    4edc:	1839883a 	mov	fp,r3
    4ee0:	d8c12d17 	ldw	r3,1204(sp)
    4ee4:	00800c04 	movi	r2,48
    4ee8:	01000074 	movhi	r4,1
    4eec:	21129b04 	addi	r4,r4,19052
    4ef0:	1dc00017 	ldw	r23,0(r3)
    4ef4:	18c00104 	addi	r3,r3,4
    4ef8:	d8812505 	stb	r2,1172(sp)
    4efc:	00801e04 	movi	r2,120
    4f00:	d8812545 	stb	r2,1173(sp)
    4f04:	d8c12d15 	stw	r3,1204(sp)
    4f08:	002d883a 	mov	r22,zero
    4f0c:	84000094 	ori	r16,r16,2
    4f10:	d9013615 	stw	r4,1240(sp)
    4f14:	00c00084 	movi	r3,2
    4f18:	04801e04 	movi	r18,120
    4f1c:	b805883a 	mov	r2,r23
    4f20:	d8012585 	stb	zero,1174(sp)
    4f24:	003f4406 	br	4c38 <___vfprintf_internal_r+0x5e4>
    4f28:	84000814 	ori	r16,r16,32
    4f2c:	ac800007 	ldb	r18,0(r21)
    4f30:	003e2406 	br	47c4 <___vfprintf_internal_r+0x170>
    4f34:	d8812d17 	ldw	r2,1204(sp)
    4f38:	d8012585 	stb	zero,1174(sp)
    4f3c:	e013883a 	mov	r9,fp
    4f40:	14c00017 	ldw	r19,0(r2)
    4f44:	1839883a 	mov	fp,r3
    4f48:	15c00104 	addi	r23,r2,4
    4f4c:	98045526 	beq	r19,zero,60a4 <___vfprintf_internal_r+0x1a50>
    4f50:	9809883a 	mov	r4,r19
    4f54:	18043116 	blt	r3,zero,601c <___vfprintf_internal_r+0x19c8>
    4f58:	000b883a 	mov	r5,zero
    4f5c:	180d883a 	mov	r6,r3
    4f60:	da413c15 	stw	r9,1264(sp)
    4f64:	0009f600 	call	9f60 <memchr>
    4f68:	da413c17 	ldw	r9,1264(sp)
    4f6c:	10047a26 	beq	r2,zero,6158 <___vfprintf_internal_r+0x1b04>
    4f70:	14c5c83a 	sub	r2,r2,r19
    4f74:	d8812b15 	stw	r2,1196(sp)
    4f78:	e083d40e 	bge	fp,r2,5ecc <___vfprintf_internal_r+0x1878>
    4f7c:	df012815 	stw	fp,1184(sp)
    4f80:	e004e416 	blt	fp,zero,6314 <___vfprintf_internal_r+0x1cc0>
    4f84:	d8812583 	ldbu	r2,1174(sp)
    4f88:	df012b15 	stw	fp,1196(sp)
    4f8c:	ddc12d15 	stw	r23,1204(sp)
    4f90:	d8013115 	stw	zero,1220(sp)
    4f94:	003f3c06 	br	4c88 <___vfprintf_internal_r+0x634>
    4f98:	00800074 	movhi	r2,1
    4f9c:	10929b04 	addi	r2,r2,19052
    4fa0:	d8813615 	stw	r2,1240(sp)
    4fa4:	8080080c 	andi	r2,r16,32
    4fa8:	e013883a 	mov	r9,fp
    4fac:	1839883a 	mov	fp,r3
    4fb0:	103f891e 	bne	r2,zero,4dd8 <___vfprintf_internal_r+0x784>
    4fb4:	8080040c 	andi	r2,r16,16
    4fb8:	1002c326 	beq	r2,zero,5ac8 <___vfprintf_internal_r+0x1474>
    4fbc:	d8812d17 	ldw	r2,1204(sp)
    4fc0:	002d883a 	mov	r22,zero
    4fc4:	15c00017 	ldw	r23,0(r2)
    4fc8:	10800104 	addi	r2,r2,4
    4fcc:	d8812d15 	stw	r2,1204(sp)
    4fd0:	003f8606 	br	4dec <___vfprintf_internal_r+0x798>
    4fd4:	84001014 	ori	r16,r16,64
    4fd8:	ac800007 	ldb	r18,0(r21)
    4fdc:	003df906 	br	47c4 <___vfprintf_internal_r+0x170>
    4fe0:	d8812587 	ldb	r2,1174(sp)
    4fe4:	1002e51e 	bne	r2,zero,5b7c <___vfprintf_internal_r+0x1528>
    4fe8:	00800804 	movi	r2,32
    4fec:	d8812585 	stb	r2,1174(sp)
    4ff0:	ac800007 	ldb	r18,0(r21)
    4ff4:	003df306 	br	47c4 <___vfprintf_internal_r+0x170>
    4ff8:	84000054 	ori	r16,r16,1
    4ffc:	ac800007 	ldb	r18,0(r21)
    5000:	003df006 	br	47c4 <___vfprintf_internal_r+0x170>
    5004:	84002014 	ori	r16,r16,128
    5008:	ac800007 	ldb	r18,0(r21)
    500c:	003ded06 	br	47c4 <___vfprintf_internal_r+0x170>
    5010:	0009883a 	mov	r4,zero
    5014:	95bff404 	addi	r22,r18,-48
    5018:	182f883a 	mov	r23,r3
    501c:	01400284 	movi	r5,10
    5020:	00020000 	call	2000 <__mulsi3>
    5024:	ac800007 	ldb	r18,0(r21)
    5028:	1589883a 	add	r4,r2,r22
    502c:	ad400044 	addi	r21,r21,1
    5030:	95bff404 	addi	r22,r18,-48
    5034:	9dbff92e 	bgeu	r19,r22,501c <___vfprintf_internal_r+0x9c8>
    5038:	b807883a 	mov	r3,r23
    503c:	d9012e15 	stw	r4,1208(sp)
    5040:	003de106 	br	47c8 <___vfprintf_internal_r+0x174>
    5044:	00800ac4 	movi	r2,43
    5048:	d8812585 	stb	r2,1174(sp)
    504c:	ac800007 	ldb	r18,0(r21)
    5050:	003ddc06 	br	47c4 <___vfprintf_internal_r+0x170>
    5054:	d8c12d17 	ldw	r3,1204(sp)
    5058:	d9012d17 	ldw	r4,1204(sp)
    505c:	e013883a 	mov	r9,fp
    5060:	18800017 	ldw	r2,0(r3)
    5064:	21000104 	addi	r4,r4,4
    5068:	00c00044 	movi	r3,1
    506c:	d8c12815 	stw	r3,1184(sp)
    5070:	d8012585 	stb	zero,1174(sp)
    5074:	d8810405 	stb	r2,1040(sp)
    5078:	d9012d15 	stw	r4,1204(sp)
    507c:	d8c12b15 	stw	r3,1196(sp)
    5080:	dcc10404 	addi	r19,sp,1040
    5084:	003dda06 	br	47f0 <___vfprintf_internal_r+0x19c>
    5088:	e013883a 	mov	r9,fp
    508c:	1839883a 	mov	fp,r3
    5090:	003ed806 	br	4bf4 <___vfprintf_internal_r+0x5a0>
    5094:	e013883a 	mov	r9,fp
    5098:	1839883a 	mov	fp,r3
    509c:	003f2d06 	br	4d54 <___vfprintf_internal_r+0x700>
    50a0:	e013883a 	mov	r9,fp
    50a4:	1839883a 	mov	fp,r3
    50a8:	003f3806 	br	4d8c <___vfprintf_internal_r+0x738>
    50ac:	da011d17 	ldw	r8,1140(sp)
    50b0:	d8c11c17 	ldw	r3,1136(sp)
    50b4:	d8812587 	ldb	r2,1174(sp)
    50b8:	10000b26 	beq	r2,zero,50e8 <___vfprintf_internal_r+0xa94>
    50bc:	d8812584 	addi	r2,sp,1174
    50c0:	48800015 	stw	r2,0(r9)
    50c4:	00800044 	movi	r2,1
    50c8:	48800115 	stw	r2,4(r9)
    50cc:	4091883a 	add	r8,r8,r2
    50d0:	1887883a 	add	r3,r3,r2
    50d4:	da011d15 	stw	r8,1140(sp)
    50d8:	d8c11c15 	stw	r3,1136(sp)
    50dc:	008001c4 	movi	r2,7
    50e0:	10c18e16 	blt	r2,r3,571c <___vfprintf_internal_r+0x10c8>
    50e4:	4a400204 	addi	r9,r9,8
    50e8:	d9012a17 	ldw	r4,1192(sp)
    50ec:	20000b26 	beq	r4,zero,511c <___vfprintf_internal_r+0xac8>
    50f0:	d8812504 	addi	r2,sp,1172
    50f4:	48800015 	stw	r2,0(r9)
    50f8:	00800084 	movi	r2,2
    50fc:	48800115 	stw	r2,4(r9)
    5100:	4091883a 	add	r8,r8,r2
    5104:	18c00044 	addi	r3,r3,1
    5108:	da011d15 	stw	r8,1140(sp)
    510c:	d8c11c15 	stw	r3,1136(sp)
    5110:	008001c4 	movi	r2,7
    5114:	10c17816 	blt	r2,r3,56f8 <___vfprintf_internal_r+0x10a4>
    5118:	4a400204 	addi	r9,r9,8
    511c:	d9012f17 	ldw	r4,1212(sp)
    5120:	00802004 	movi	r2,128
    5124:	2080fc26 	beq	r4,r2,5518 <___vfprintf_internal_r+0xec4>
    5128:	d8813117 	ldw	r2,1220(sp)
    512c:	d9012b17 	ldw	r4,1196(sp)
    5130:	112fc83a 	sub	r23,r2,r4
    5134:	05c02a0e 	bge	zero,r23,51e0 <___vfprintf_internal_r+0xb8c>
    5138:	07000404 	movi	fp,16
    513c:	05000074 	movhi	r20,1
    5140:	a512a684 	addi	r20,r20,19098
    5144:	e5c01d0e 	bge	fp,r23,51bc <___vfprintf_internal_r+0xb68>
    5148:	dc812a15 	stw	r18,1192(sp)
    514c:	058001c4 	movi	r22,7
    5150:	a025883a 	mov	r18,r20
    5154:	8029883a 	mov	r20,r16
    5158:	dc012917 	ldw	r16,1188(sp)
    515c:	00000306 	br	516c <___vfprintf_internal_r+0xb18>
    5160:	bdfffc04 	addi	r23,r23,-16
    5164:	4a400204 	addi	r9,r9,8
    5168:	e5c0110e 	bge	fp,r23,51b0 <___vfprintf_internal_r+0xb5c>
    516c:	4c800015 	stw	r18,0(r9)
    5170:	4f000115 	stw	fp,4(r9)
    5174:	42000404 	addi	r8,r8,16
    5178:	18c00044 	addi	r3,r3,1
    517c:	da011d15 	stw	r8,1140(sp)
    5180:	d8c11c15 	stw	r3,1136(sp)
    5184:	b0fff60e 	bge	r22,r3,5160 <___vfprintf_internal_r+0xb0c>
    5188:	8809883a 	mov	r4,r17
    518c:	800b883a 	mov	r5,r16
    5190:	d9811b04 	addi	r6,sp,1132
    5194:	00046200 	call	4620 <__sprint_r>
    5198:	103e741e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    519c:	bdfffc04 	addi	r23,r23,-16
    51a0:	da011d17 	ldw	r8,1140(sp)
    51a4:	d8c11c17 	ldw	r3,1136(sp)
    51a8:	da400404 	addi	r9,sp,16
    51ac:	e5ffef16 	blt	fp,r23,516c <___vfprintf_internal_r+0xb18>
    51b0:	a021883a 	mov	r16,r20
    51b4:	9029883a 	mov	r20,r18
    51b8:	dc812a17 	ldw	r18,1192(sp)
    51bc:	4d000015 	stw	r20,0(r9)
    51c0:	4dc00115 	stw	r23,4(r9)
    51c4:	45d1883a 	add	r8,r8,r23
    51c8:	18c00044 	addi	r3,r3,1
    51cc:	da011d15 	stw	r8,1140(sp)
    51d0:	d8c11c15 	stw	r3,1136(sp)
    51d4:	008001c4 	movi	r2,7
    51d8:	10c13e16 	blt	r2,r3,56d4 <___vfprintf_internal_r+0x1080>
    51dc:	4a400204 	addi	r9,r9,8
    51e0:	8080400c 	andi	r2,r16,256
    51e4:	1000831e 	bne	r2,zero,53f4 <___vfprintf_internal_r+0xda0>
    51e8:	d8812b17 	ldw	r2,1196(sp)
    51ec:	4cc00015 	stw	r19,0(r9)
    51f0:	48800115 	stw	r2,4(r9)
    51f4:	4091883a 	add	r8,r8,r2
    51f8:	18c00044 	addi	r3,r3,1
    51fc:	da011d15 	stw	r8,1140(sp)
    5200:	d8c11c15 	stw	r3,1136(sp)
    5204:	008001c4 	movi	r2,7
    5208:	10c05316 	blt	r2,r3,5358 <___vfprintf_internal_r+0xd04>
    520c:	4a400204 	addi	r9,r9,8
    5210:	8400010c 	andi	r16,r16,4
    5214:	80002e26 	beq	r16,zero,52d0 <___vfprintf_internal_r+0xc7c>
    5218:	d8812e17 	ldw	r2,1208(sp)
    521c:	d8c12817 	ldw	r3,1184(sp)
    5220:	10e1c83a 	sub	r16,r2,r3
    5224:	04002a0e 	bge	zero,r16,52d0 <___vfprintf_internal_r+0xc7c>
    5228:	04800404 	movi	r18,16
    522c:	d8c11c17 	ldw	r3,1136(sp)
    5230:	05c00074 	movhi	r23,1
    5234:	bdd2a284 	addi	r23,r23,19082
    5238:	9400170e 	bge	r18,r16,5298 <___vfprintf_internal_r+0xc44>
    523c:	04c001c4 	movi	r19,7
    5240:	dd012917 	ldw	r20,1188(sp)
    5244:	00000306 	br	5254 <___vfprintf_internal_r+0xc00>
    5248:	843ffc04 	addi	r16,r16,-16
    524c:	4a400204 	addi	r9,r9,8
    5250:	9400110e 	bge	r18,r16,5298 <___vfprintf_internal_r+0xc44>
    5254:	4dc00015 	stw	r23,0(r9)
    5258:	4c800115 	stw	r18,4(r9)
    525c:	42000404 	addi	r8,r8,16
    5260:	18c00044 	addi	r3,r3,1
    5264:	da011d15 	stw	r8,1140(sp)
    5268:	d8c11c15 	stw	r3,1136(sp)
    526c:	98fff60e 	bge	r19,r3,5248 <___vfprintf_internal_r+0xbf4>
    5270:	8809883a 	mov	r4,r17
    5274:	a00b883a 	mov	r5,r20
    5278:	d9811b04 	addi	r6,sp,1132
    527c:	00046200 	call	4620 <__sprint_r>
    5280:	103e3a1e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    5284:	843ffc04 	addi	r16,r16,-16
    5288:	da011d17 	ldw	r8,1140(sp)
    528c:	d8c11c17 	ldw	r3,1136(sp)
    5290:	da400404 	addi	r9,sp,16
    5294:	943fef16 	blt	r18,r16,5254 <___vfprintf_internal_r+0xc00>
    5298:	4dc00015 	stw	r23,0(r9)
    529c:	4c000115 	stw	r16,4(r9)
    52a0:	8211883a 	add	r8,r16,r8
    52a4:	18c00044 	addi	r3,r3,1
    52a8:	da011d15 	stw	r8,1140(sp)
    52ac:	d8c11c15 	stw	r3,1136(sp)
    52b0:	008001c4 	movi	r2,7
    52b4:	10c0060e 	bge	r2,r3,52d0 <___vfprintf_internal_r+0xc7c>
    52b8:	d9412917 	ldw	r5,1188(sp)
    52bc:	8809883a 	mov	r4,r17
    52c0:	d9811b04 	addi	r6,sp,1132
    52c4:	00046200 	call	4620 <__sprint_r>
    52c8:	103e281e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    52cc:	da011d17 	ldw	r8,1140(sp)
    52d0:	dd012817 	ldw	r20,1184(sp)
    52d4:	d9012e17 	ldw	r4,1208(sp)
    52d8:	a100010e 	bge	r20,r4,52e0 <___vfprintf_internal_r+0xc8c>
    52dc:	2029883a 	mov	r20,r4
    52e0:	d8812c17 	ldw	r2,1200(sp)
    52e4:	1505883a 	add	r2,r2,r20
    52e8:	d8812c15 	stw	r2,1200(sp)
    52ec:	4000b91e 	bne	r8,zero,55d4 <___vfprintf_internal_r+0xf80>
    52f0:	d8011c15 	stw	zero,1136(sp)
    52f4:	a8800007 	ldb	r2,0(r21)
    52f8:	da400404 	addi	r9,sp,16
    52fc:	103d0d1e 	bne	r2,zero,4734 <___vfprintf_internal_r+0xe0>
    5300:	a825883a 	mov	r18,r21
    5304:	003d2306 	br	4794 <___vfprintf_internal_r+0x140>
    5308:	d9412917 	ldw	r5,1188(sp)
    530c:	8809883a 	mov	r4,r17
    5310:	d9811b04 	addi	r6,sp,1132
    5314:	00046200 	call	4620 <__sprint_r>
    5318:	103e141e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    531c:	da011d17 	ldw	r8,1140(sp)
    5320:	da400404 	addi	r9,sp,16
    5324:	8080004c 	andi	r2,r16,1
    5328:	103fb926 	beq	r2,zero,5210 <___vfprintf_internal_r+0xbbc>
    532c:	d8c11c17 	ldw	r3,1136(sp)
    5330:	d9013717 	ldw	r4,1244(sp)
    5334:	00800044 	movi	r2,1
    5338:	48800115 	stw	r2,4(r9)
    533c:	49000015 	stw	r4,0(r9)
    5340:	4091883a 	add	r8,r8,r2
    5344:	1887883a 	add	r3,r3,r2
    5348:	da011d15 	stw	r8,1140(sp)
    534c:	d8c11c15 	stw	r3,1136(sp)
    5350:	008001c4 	movi	r2,7
    5354:	10ffad0e 	bge	r2,r3,520c <___vfprintf_internal_r+0xbb8>
    5358:	d9412917 	ldw	r5,1188(sp)
    535c:	8809883a 	mov	r4,r17
    5360:	d9811b04 	addi	r6,sp,1132
    5364:	00046200 	call	4620 <__sprint_r>
    5368:	103e001e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    536c:	da400404 	addi	r9,sp,16
    5370:	da011d17 	ldw	r8,1140(sp)
    5374:	003fa606 	br	5210 <___vfprintf_internal_r+0xbbc>
    5378:	18803fcc 	andi	r2,r3,255
    537c:	00c00044 	movi	r3,1
    5380:	10c10126 	beq	r2,r3,5788 <___vfprintf_internal_r+0x1134>
    5384:	00c00084 	movi	r3,2
    5388:	10c0ed26 	beq	r2,r3,5740 <___vfprintf_internal_r+0x10ec>
    538c:	d8c10dc4 	addi	r3,sp,1079
    5390:	b808d0fa 	srli	r4,r23,3
    5394:	b00a977a 	slli	r5,r22,29
    5398:	b02cd0fa 	srli	r22,r22,3
    539c:	bdc001cc 	andi	r23,r23,7
    53a0:	b8800c04 	addi	r2,r23,48
    53a4:	292eb03a 	or	r23,r5,r4
    53a8:	18800005 	stb	r2,0(r3)
    53ac:	bd88b03a 	or	r4,r23,r22
    53b0:	1827883a 	mov	r19,r3
    53b4:	18ffffc4 	addi	r3,r3,-1
    53b8:	203ff51e 	bne	r4,zero,5390 <___vfprintf_internal_r+0xd3c>
    53bc:	8100004c 	andi	r4,r16,1
    53c0:	980b883a 	mov	r5,r19
    53c4:	20000726 	beq	r4,zero,53e4 <___vfprintf_internal_r+0xd90>
    53c8:	10803fcc 	andi	r2,r2,255
    53cc:	1080201c 	xori	r2,r2,128
    53d0:	10bfe004 	addi	r2,r2,-128
    53d4:	01000c04 	movi	r4,48
    53d8:	11000226 	beq	r2,r4,53e4 <___vfprintf_internal_r+0xd90>
    53dc:	1827883a 	mov	r19,r3
    53e0:	293fffc5 	stb	r4,-1(r5)
    53e4:	d8812717 	ldw	r2,1180(sp)
    53e8:	14c5c83a 	sub	r2,r2,r19
    53ec:	d8812b15 	stw	r2,1196(sp)
    53f0:	003e1f06 	br	4c70 <___vfprintf_internal_r+0x61c>
    53f4:	00801944 	movi	r2,101
    53f8:	14807c0e 	bge	r2,r18,55ec <___vfprintf_internal_r+0xf98>
    53fc:	d9013317 	ldw	r4,1228(sp)
    5400:	d9413417 	ldw	r5,1232(sp)
    5404:	000d883a 	mov	r6,zero
    5408:	000f883a 	mov	r7,zero
    540c:	d8c13b15 	stw	r3,1260(sp)
    5410:	da013a15 	stw	r8,1256(sp)
    5414:	da413c15 	stw	r9,1264(sp)
    5418:	00104a80 	call	104a8 <__eqdf2>
    541c:	d8c13b17 	ldw	r3,1260(sp)
    5420:	da013a17 	ldw	r8,1256(sp)
    5424:	da413c17 	ldw	r9,1264(sp)
    5428:	1001001e 	bne	r2,zero,582c <___vfprintf_internal_r+0x11d8>
    542c:	00800074 	movhi	r2,1
    5430:	1092a204 	addi	r2,r2,19080
    5434:	48800015 	stw	r2,0(r9)
    5438:	00800044 	movi	r2,1
    543c:	48800115 	stw	r2,4(r9)
    5440:	4091883a 	add	r8,r8,r2
    5444:	1887883a 	add	r3,r3,r2
    5448:	da011d15 	stw	r8,1140(sp)
    544c:	d8c11c15 	stw	r3,1136(sp)
    5450:	008001c4 	movi	r2,7
    5454:	10c20316 	blt	r2,r3,5c64 <___vfprintf_internal_r+0x1610>
    5458:	4a400204 	addi	r9,r9,8
    545c:	d8812417 	ldw	r2,1168(sp)
    5460:	d8c13217 	ldw	r3,1224(sp)
    5464:	10c00216 	blt	r2,r3,5470 <___vfprintf_internal_r+0xe1c>
    5468:	8080004c 	andi	r2,r16,1
    546c:	103f6826 	beq	r2,zero,5210 <___vfprintf_internal_r+0xbbc>
    5470:	d8c11c17 	ldw	r3,1136(sp)
    5474:	d9013717 	ldw	r4,1244(sp)
    5478:	00800044 	movi	r2,1
    547c:	48800115 	stw	r2,4(r9)
    5480:	49000015 	stw	r4,0(r9)
    5484:	4091883a 	add	r8,r8,r2
    5488:	1887883a 	add	r3,r3,r2
    548c:	da011d15 	stw	r8,1140(sp)
    5490:	d8c11c15 	stw	r3,1136(sp)
    5494:	008001c4 	movi	r2,7
    5498:	10c2ce16 	blt	r2,r3,5fd4 <___vfprintf_internal_r+0x1980>
    549c:	4a400204 	addi	r9,r9,8
    54a0:	d8813217 	ldw	r2,1224(sp)
    54a4:	14bfffc4 	addi	r18,r2,-1
    54a8:	04bf590e 	bge	zero,r18,5210 <___vfprintf_internal_r+0xbbc>
    54ac:	04c00404 	movi	r19,16
    54b0:	d8c11c17 	ldw	r3,1136(sp)
    54b4:	05000074 	movhi	r20,1
    54b8:	a512a684 	addi	r20,r20,19098
    54bc:	9c818a0e 	bge	r19,r18,5ae8 <___vfprintf_internal_r+0x1494>
    54c0:	058001c4 	movi	r22,7
    54c4:	ddc12917 	ldw	r23,1188(sp)
    54c8:	00000306 	br	54d8 <___vfprintf_internal_r+0xe84>
    54cc:	4a400204 	addi	r9,r9,8
    54d0:	94bffc04 	addi	r18,r18,-16
    54d4:	9c81840e 	bge	r19,r18,5ae8 <___vfprintf_internal_r+0x1494>
    54d8:	4d000015 	stw	r20,0(r9)
    54dc:	4cc00115 	stw	r19,4(r9)
    54e0:	42000404 	addi	r8,r8,16
    54e4:	18c00044 	addi	r3,r3,1
    54e8:	da011d15 	stw	r8,1140(sp)
    54ec:	d8c11c15 	stw	r3,1136(sp)
    54f0:	b0fff60e 	bge	r22,r3,54cc <___vfprintf_internal_r+0xe78>
    54f4:	8809883a 	mov	r4,r17
    54f8:	b80b883a 	mov	r5,r23
    54fc:	d9811b04 	addi	r6,sp,1132
    5500:	00046200 	call	4620 <__sprint_r>
    5504:	103d991e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    5508:	da011d17 	ldw	r8,1140(sp)
    550c:	d8c11c17 	ldw	r3,1136(sp)
    5510:	da400404 	addi	r9,sp,16
    5514:	003fee06 	br	54d0 <___vfprintf_internal_r+0xe7c>
    5518:	d8812e17 	ldw	r2,1208(sp)
    551c:	d9012817 	ldw	r4,1184(sp)
    5520:	112fc83a 	sub	r23,r2,r4
    5524:	05ff000e 	bge	zero,r23,5128 <___vfprintf_internal_r+0xad4>
    5528:	07000404 	movi	fp,16
    552c:	05000074 	movhi	r20,1
    5530:	a512a684 	addi	r20,r20,19098
    5534:	e5c01d0e 	bge	fp,r23,55ac <___vfprintf_internal_r+0xf58>
    5538:	dc812a15 	stw	r18,1192(sp)
    553c:	058001c4 	movi	r22,7
    5540:	a025883a 	mov	r18,r20
    5544:	8029883a 	mov	r20,r16
    5548:	dc012917 	ldw	r16,1188(sp)
    554c:	00000306 	br	555c <___vfprintf_internal_r+0xf08>
    5550:	bdfffc04 	addi	r23,r23,-16
    5554:	4a400204 	addi	r9,r9,8
    5558:	e5c0110e 	bge	fp,r23,55a0 <___vfprintf_internal_r+0xf4c>
    555c:	4c800015 	stw	r18,0(r9)
    5560:	4f000115 	stw	fp,4(r9)
    5564:	42000404 	addi	r8,r8,16
    5568:	18c00044 	addi	r3,r3,1
    556c:	da011d15 	stw	r8,1140(sp)
    5570:	d8c11c15 	stw	r3,1136(sp)
    5574:	b0fff60e 	bge	r22,r3,5550 <___vfprintf_internal_r+0xefc>
    5578:	8809883a 	mov	r4,r17
    557c:	800b883a 	mov	r5,r16
    5580:	d9811b04 	addi	r6,sp,1132
    5584:	00046200 	call	4620 <__sprint_r>
    5588:	103d781e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    558c:	bdfffc04 	addi	r23,r23,-16
    5590:	da011d17 	ldw	r8,1140(sp)
    5594:	d8c11c17 	ldw	r3,1136(sp)
    5598:	da400404 	addi	r9,sp,16
    559c:	e5ffef16 	blt	fp,r23,555c <___vfprintf_internal_r+0xf08>
    55a0:	a021883a 	mov	r16,r20
    55a4:	9029883a 	mov	r20,r18
    55a8:	dc812a17 	ldw	r18,1192(sp)
    55ac:	4d000015 	stw	r20,0(r9)
    55b0:	4dc00115 	stw	r23,4(r9)
    55b4:	45d1883a 	add	r8,r8,r23
    55b8:	18c00044 	addi	r3,r3,1
    55bc:	da011d15 	stw	r8,1140(sp)
    55c0:	d8c11c15 	stw	r3,1136(sp)
    55c4:	008001c4 	movi	r2,7
    55c8:	10c13616 	blt	r2,r3,5aa4 <___vfprintf_internal_r+0x1450>
    55cc:	4a400204 	addi	r9,r9,8
    55d0:	003ed506 	br	5128 <___vfprintf_internal_r+0xad4>
    55d4:	d9412917 	ldw	r5,1188(sp)
    55d8:	8809883a 	mov	r4,r17
    55dc:	d9811b04 	addi	r6,sp,1132
    55e0:	00046200 	call	4620 <__sprint_r>
    55e4:	103f4226 	beq	r2,zero,52f0 <___vfprintf_internal_r+0xc9c>
    55e8:	003d6006 	br	4b6c <___vfprintf_internal_r+0x518>
    55ec:	d9013217 	ldw	r4,1224(sp)
    55f0:	00800044 	movi	r2,1
    55f4:	4cc00015 	stw	r19,0(r9)
    55f8:	1101000e 	bge	r2,r4,59fc <___vfprintf_internal_r+0x13a8>
    55fc:	00800044 	movi	r2,1
    5600:	48800115 	stw	r2,4(r9)
    5604:	4091883a 	add	r8,r8,r2
    5608:	1887883a 	add	r3,r3,r2
    560c:	da011d15 	stw	r8,1140(sp)
    5610:	d8c11c15 	stw	r3,1136(sp)
    5614:	008001c4 	movi	r2,7
    5618:	10c10c16 	blt	r2,r3,5a4c <___vfprintf_internal_r+0x13f8>
    561c:	4a400204 	addi	r9,r9,8
    5620:	d8813717 	ldw	r2,1244(sp)
    5624:	48800015 	stw	r2,0(r9)
    5628:	00800044 	movi	r2,1
    562c:	48800115 	stw	r2,4(r9)
    5630:	4091883a 	add	r8,r8,r2
    5634:	1887883a 	add	r3,r3,r2
    5638:	da011d15 	stw	r8,1140(sp)
    563c:	d8c11c15 	stw	r3,1136(sp)
    5640:	008001c4 	movi	r2,7
    5644:	10c10a16 	blt	r2,r3,5a70 <___vfprintf_internal_r+0x141c>
    5648:	4c800204 	addi	r18,r9,8
    564c:	d9013317 	ldw	r4,1228(sp)
    5650:	d9413417 	ldw	r5,1232(sp)
    5654:	000d883a 	mov	r6,zero
    5658:	000f883a 	mov	r7,zero
    565c:	d8c13b15 	stw	r3,1260(sp)
    5660:	da013a15 	stw	r8,1256(sp)
    5664:	00105040 	call	10504 <__nedf2>
    5668:	d8c13b17 	ldw	r3,1260(sp)
    566c:	da013a17 	ldw	r8,1256(sp)
    5670:	1000ba26 	beq	r2,zero,595c <___vfprintf_internal_r+0x1308>
    5674:	d9013217 	ldw	r4,1224(sp)
    5678:	9cc00044 	addi	r19,r19,1
    567c:	94c00015 	stw	r19,0(r18)
    5680:	20bfffc4 	addi	r2,r4,-1
    5684:	90800115 	stw	r2,4(r18)
    5688:	4091883a 	add	r8,r8,r2
    568c:	18c00044 	addi	r3,r3,1
    5690:	da011d15 	stw	r8,1140(sp)
    5694:	d8c11c15 	stw	r3,1136(sp)
    5698:	008001c4 	movi	r2,7
    569c:	10c0e216 	blt	r2,r3,5a28 <___vfprintf_internal_r+0x13d4>
    56a0:	94800204 	addi	r18,r18,8
    56a4:	d9013517 	ldw	r4,1236(sp)
    56a8:	d8811fc4 	addi	r2,sp,1151
    56ac:	90800015 	stw	r2,0(r18)
    56b0:	91000115 	stw	r4,4(r18)
    56b4:	4111883a 	add	r8,r8,r4
    56b8:	18c00044 	addi	r3,r3,1
    56bc:	da011d15 	stw	r8,1140(sp)
    56c0:	d8c11c15 	stw	r3,1136(sp)
    56c4:	008001c4 	movi	r2,7
    56c8:	10ff2316 	blt	r2,r3,5358 <___vfprintf_internal_r+0xd04>
    56cc:	92400204 	addi	r9,r18,8
    56d0:	003ecf06 	br	5210 <___vfprintf_internal_r+0xbbc>
    56d4:	d9412917 	ldw	r5,1188(sp)
    56d8:	8809883a 	mov	r4,r17
    56dc:	d9811b04 	addi	r6,sp,1132
    56e0:	00046200 	call	4620 <__sprint_r>
    56e4:	103d211e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    56e8:	da011d17 	ldw	r8,1140(sp)
    56ec:	d8c11c17 	ldw	r3,1136(sp)
    56f0:	da400404 	addi	r9,sp,16
    56f4:	003eba06 	br	51e0 <___vfprintf_internal_r+0xb8c>
    56f8:	d9412917 	ldw	r5,1188(sp)
    56fc:	8809883a 	mov	r4,r17
    5700:	d9811b04 	addi	r6,sp,1132
    5704:	00046200 	call	4620 <__sprint_r>
    5708:	103d181e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    570c:	da011d17 	ldw	r8,1140(sp)
    5710:	d8c11c17 	ldw	r3,1136(sp)
    5714:	da400404 	addi	r9,sp,16
    5718:	003e8006 	br	511c <___vfprintf_internal_r+0xac8>
    571c:	d9412917 	ldw	r5,1188(sp)
    5720:	8809883a 	mov	r4,r17
    5724:	d9811b04 	addi	r6,sp,1132
    5728:	00046200 	call	4620 <__sprint_r>
    572c:	103d0f1e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    5730:	da011d17 	ldw	r8,1140(sp)
    5734:	d8c11c17 	ldw	r3,1136(sp)
    5738:	da400404 	addi	r9,sp,16
    573c:	003e6a06 	br	50e8 <___vfprintf_internal_r+0xa94>
    5740:	d9413617 	ldw	r5,1240(sp)
    5744:	d8810dc4 	addi	r2,sp,1079
    5748:	b8c003cc 	andi	r3,r23,15
    574c:	b008973a 	slli	r4,r22,28
    5750:	28c7883a 	add	r3,r5,r3
    5754:	b82ed13a 	srli	r23,r23,4
    5758:	18c00003 	ldbu	r3,0(r3)
    575c:	b02cd13a 	srli	r22,r22,4
    5760:	25eeb03a 	or	r23,r4,r23
    5764:	10c00005 	stb	r3,0(r2)
    5768:	bd86b03a 	or	r3,r23,r22
    576c:	1027883a 	mov	r19,r2
    5770:	10bfffc4 	addi	r2,r2,-1
    5774:	183ff41e 	bne	r3,zero,5748 <___vfprintf_internal_r+0x10f4>
    5778:	003f1a06 	br	53e4 <___vfprintf_internal_r+0xd90>
    577c:	d8012b15 	stw	zero,1196(sp)
    5780:	dcc10e04 	addi	r19,sp,1080
    5784:	003d3a06 	br	4c70 <___vfprintf_internal_r+0x61c>
    5788:	b0025426 	beq	r22,zero,60dc <___vfprintf_internal_r+0x1a88>
    578c:	b807883a 	mov	r3,r23
    5790:	d8810dc4 	addi	r2,sp,1079
    5794:	882f883a 	mov	r23,r17
    5798:	04c00244 	movi	r19,9
    579c:	8023883a 	mov	r17,r16
    57a0:	da412815 	stw	r9,1184(sp)
    57a4:	1821883a 	mov	r16,r3
    57a8:	8009883a 	mov	r4,r16
    57ac:	b00b883a 	mov	r5,r22
    57b0:	01800284 	movi	r6,10
    57b4:	000f883a 	mov	r7,zero
    57b8:	1029883a 	mov	r20,r2
    57bc:	000f4dc0 	call	f4dc <__umoddi3>
    57c0:	10800c04 	addi	r2,r2,48
    57c4:	8009883a 	mov	r4,r16
    57c8:	b00b883a 	mov	r5,r22
    57cc:	a0800005 	stb	r2,0(r20)
    57d0:	01800284 	movi	r6,10
    57d4:	000f883a 	mov	r7,zero
    57d8:	000ee8c0 	call	ee8c <__udivdi3>
    57dc:	1021883a 	mov	r16,r2
    57e0:	182d883a 	mov	r22,r3
    57e4:	a0bfffc4 	addi	r2,r20,-1
    57e8:	183fef1e 	bne	r3,zero,57a8 <___vfprintf_internal_r+0x1154>
    57ec:	9c3fee36 	bltu	r19,r16,57a8 <___vfprintf_internal_r+0x1154>
    57f0:	da412817 	ldw	r9,1184(sp)
    57f4:	8005883a 	mov	r2,r16
    57f8:	8821883a 	mov	r16,r17
    57fc:	b823883a 	mov	r17,r23
    5800:	102f883a 	mov	r23,r2
    5804:	d8812717 	ldw	r2,1180(sp)
    5808:	a4ffffc4 	addi	r19,r20,-1
    580c:	bdc00c04 	addi	r23,r23,48
    5810:	14c5c83a 	sub	r2,r2,r19
    5814:	a5ffffc5 	stb	r23,-1(r20)
    5818:	d8812b15 	stw	r2,1196(sp)
    581c:	003d1406 	br	4c70 <___vfprintf_internal_r+0x61c>
    5820:	00c00044 	movi	r3,1
    5824:	bd84b03a 	or	r2,r23,r22
    5828:	003d0306 	br	4c38 <___vfprintf_internal_r+0x5e4>
    582c:	dc812417 	ldw	r18,1168(sp)
    5830:	0481140e 	bge	zero,r18,5c84 <___vfprintf_internal_r+0x1630>
    5834:	d9013217 	ldw	r4,1224(sp)
    5838:	4cc00015 	stw	r19,0(r9)
    583c:	9100ec16 	blt	r18,r4,5bf0 <___vfprintf_internal_r+0x159c>
    5840:	49000115 	stw	r4,4(r9)
    5844:	4111883a 	add	r8,r8,r4
    5848:	18c00044 	addi	r3,r3,1
    584c:	da011d15 	stw	r8,1140(sp)
    5850:	d8c11c15 	stw	r3,1136(sp)
    5854:	008001c4 	movi	r2,7
    5858:	10c23616 	blt	r2,r3,6134 <___vfprintf_internal_r+0x1ae0>
    585c:	4a400204 	addi	r9,r9,8
    5860:	d8813217 	ldw	r2,1224(sp)
    5864:	90a5c83a 	sub	r18,r18,r2
    5868:	04beae0e 	bge	zero,r18,5324 <___vfprintf_internal_r+0xcd0>
    586c:	04c00404 	movi	r19,16
    5870:	d8c11c17 	ldw	r3,1136(sp)
    5874:	05000074 	movhi	r20,1
    5878:	a512a684 	addi	r20,r20,19098
    587c:	9c81dd0e 	bge	r19,r18,5ff4 <___vfprintf_internal_r+0x19a0>
    5880:	058001c4 	movi	r22,7
    5884:	ddc12917 	ldw	r23,1188(sp)
    5888:	00000306 	br	5898 <___vfprintf_internal_r+0x1244>
    588c:	4a400204 	addi	r9,r9,8
    5890:	94bffc04 	addi	r18,r18,-16
    5894:	9c81d70e 	bge	r19,r18,5ff4 <___vfprintf_internal_r+0x19a0>
    5898:	4d000015 	stw	r20,0(r9)
    589c:	4cc00115 	stw	r19,4(r9)
    58a0:	42000404 	addi	r8,r8,16
    58a4:	18c00044 	addi	r3,r3,1
    58a8:	da011d15 	stw	r8,1140(sp)
    58ac:	d8c11c15 	stw	r3,1136(sp)
    58b0:	b0fff60e 	bge	r22,r3,588c <___vfprintf_internal_r+0x1238>
    58b4:	8809883a 	mov	r4,r17
    58b8:	b80b883a 	mov	r5,r23
    58bc:	d9811b04 	addi	r6,sp,1132
    58c0:	00046200 	call	4620 <__sprint_r>
    58c4:	103ca91e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    58c8:	da011d17 	ldw	r8,1140(sp)
    58cc:	d8c11c17 	ldw	r3,1136(sp)
    58d0:	da400404 	addi	r9,sp,16
    58d4:	003fee06 	br	5890 <___vfprintf_internal_r+0x123c>
    58d8:	d9412917 	ldw	r5,1188(sp)
    58dc:	8809883a 	mov	r4,r17
    58e0:	d9811b04 	addi	r6,sp,1132
    58e4:	00046200 	call	4620 <__sprint_r>
    58e8:	103ca01e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    58ec:	da011d17 	ldw	r8,1140(sp)
    58f0:	d8c11c17 	ldw	r3,1136(sp)
    58f4:	da400404 	addi	r9,sp,16
    58f8:	003dee06 	br	50b4 <___vfprintf_internal_r+0xa60>
    58fc:	00c00084 	movi	r3,2
    5900:	bd84b03a 	or	r2,r23,r22
    5904:	d8012585 	stb	zero,1174(sp)
    5908:	003ccb06 	br	4c38 <___vfprintf_internal_r+0x5e4>
    590c:	8080040c 	andi	r2,r16,16
    5910:	1000ae26 	beq	r2,zero,5bcc <___vfprintf_internal_r+0x1578>
    5914:	d9012d17 	ldw	r4,1204(sp)
    5918:	25c00017 	ldw	r23,0(r4)
    591c:	21000104 	addi	r4,r4,4
    5920:	d9012d15 	stw	r4,1204(sp)
    5924:	b82dd7fa 	srai	r22,r23,31
    5928:	b005883a 	mov	r2,r22
    592c:	003cb906 	br	4c14 <___vfprintf_internal_r+0x5c0>
    5930:	8080040c 	andi	r2,r16,16
    5934:	10007026 	beq	r2,zero,5af8 <___vfprintf_internal_r+0x14a4>
    5938:	d8812d17 	ldw	r2,1204(sp)
    593c:	002d883a 	mov	r22,zero
    5940:	00c00044 	movi	r3,1
    5944:	15c00017 	ldw	r23,0(r2)
    5948:	10800104 	addi	r2,r2,4
    594c:	d8812d15 	stw	r2,1204(sp)
    5950:	d8012585 	stb	zero,1174(sp)
    5954:	b805883a 	mov	r2,r23
    5958:	003cb706 	br	4c38 <___vfprintf_internal_r+0x5e4>
    595c:	d8813217 	ldw	r2,1224(sp)
    5960:	14ffffc4 	addi	r19,r2,-1
    5964:	04ff4f0e 	bge	zero,r19,56a4 <___vfprintf_internal_r+0x1050>
    5968:	05800404 	movi	r22,16
    596c:	05000074 	movhi	r20,1
    5970:	a512a684 	addi	r20,r20,19098
    5974:	b4c0470e 	bge	r22,r19,5a94 <___vfprintf_internal_r+0x1440>
    5978:	05c001c4 	movi	r23,7
    597c:	df012917 	ldw	fp,1188(sp)
    5980:	00000306 	br	5990 <___vfprintf_internal_r+0x133c>
    5984:	94800204 	addi	r18,r18,8
    5988:	9cfffc04 	addi	r19,r19,-16
    598c:	b4c0410e 	bge	r22,r19,5a94 <___vfprintf_internal_r+0x1440>
    5990:	95000015 	stw	r20,0(r18)
    5994:	95800115 	stw	r22,4(r18)
    5998:	42000404 	addi	r8,r8,16
    599c:	18c00044 	addi	r3,r3,1
    59a0:	da011d15 	stw	r8,1140(sp)
    59a4:	d8c11c15 	stw	r3,1136(sp)
    59a8:	b8fff60e 	bge	r23,r3,5984 <___vfprintf_internal_r+0x1330>
    59ac:	8809883a 	mov	r4,r17
    59b0:	e00b883a 	mov	r5,fp
    59b4:	d9811b04 	addi	r6,sp,1132
    59b8:	00046200 	call	4620 <__sprint_r>
    59bc:	103c6b1e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    59c0:	da011d17 	ldw	r8,1140(sp)
    59c4:	d8c11c17 	ldw	r3,1136(sp)
    59c8:	dc800404 	addi	r18,sp,16
    59cc:	003fee06 	br	5988 <___vfprintf_internal_r+0x1334>
    59d0:	8080040c 	andi	r2,r16,16
    59d4:	10005326 	beq	r2,zero,5b24 <___vfprintf_internal_r+0x14d0>
    59d8:	d8c12d17 	ldw	r3,1204(sp)
    59dc:	002d883a 	mov	r22,zero
    59e0:	1dc00017 	ldw	r23,0(r3)
    59e4:	18c00104 	addi	r3,r3,4
    59e8:	d8c12d15 	stw	r3,1204(sp)
    59ec:	b805883a 	mov	r2,r23
    59f0:	0007883a 	mov	r3,zero
    59f4:	d8012585 	stb	zero,1174(sp)
    59f8:	003c8f06 	br	4c38 <___vfprintf_internal_r+0x5e4>
    59fc:	8088703a 	and	r4,r16,r2
    5a00:	203efe1e 	bne	r4,zero,55fc <___vfprintf_internal_r+0xfa8>
    5a04:	48800115 	stw	r2,4(r9)
    5a08:	42000044 	addi	r8,r8,1
    5a0c:	18c00044 	addi	r3,r3,1
    5a10:	da011d15 	stw	r8,1140(sp)
    5a14:	d8c11c15 	stw	r3,1136(sp)
    5a18:	008001c4 	movi	r2,7
    5a1c:	10c00216 	blt	r2,r3,5a28 <___vfprintf_internal_r+0x13d4>
    5a20:	4c800204 	addi	r18,r9,8
    5a24:	003f1f06 	br	56a4 <___vfprintf_internal_r+0x1050>
    5a28:	d9412917 	ldw	r5,1188(sp)
    5a2c:	8809883a 	mov	r4,r17
    5a30:	d9811b04 	addi	r6,sp,1132
    5a34:	00046200 	call	4620 <__sprint_r>
    5a38:	103c4c1e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    5a3c:	dc800404 	addi	r18,sp,16
    5a40:	da011d17 	ldw	r8,1140(sp)
    5a44:	d8c11c17 	ldw	r3,1136(sp)
    5a48:	003f1606 	br	56a4 <___vfprintf_internal_r+0x1050>
    5a4c:	d9412917 	ldw	r5,1188(sp)
    5a50:	8809883a 	mov	r4,r17
    5a54:	d9811b04 	addi	r6,sp,1132
    5a58:	00046200 	call	4620 <__sprint_r>
    5a5c:	103c431e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    5a60:	da011d17 	ldw	r8,1140(sp)
    5a64:	d8c11c17 	ldw	r3,1136(sp)
    5a68:	da400404 	addi	r9,sp,16
    5a6c:	003eec06 	br	5620 <___vfprintf_internal_r+0xfcc>
    5a70:	d9412917 	ldw	r5,1188(sp)
    5a74:	8809883a 	mov	r4,r17
    5a78:	d9811b04 	addi	r6,sp,1132
    5a7c:	00046200 	call	4620 <__sprint_r>
    5a80:	103c3a1e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    5a84:	da011d17 	ldw	r8,1140(sp)
    5a88:	d8c11c17 	ldw	r3,1136(sp)
    5a8c:	dc800404 	addi	r18,sp,16
    5a90:	003eee06 	br	564c <___vfprintf_internal_r+0xff8>
    5a94:	95000015 	stw	r20,0(r18)
    5a98:	94c00115 	stw	r19,4(r18)
    5a9c:	44d1883a 	add	r8,r8,r19
    5aa0:	003efa06 	br	568c <___vfprintf_internal_r+0x1038>
    5aa4:	d9412917 	ldw	r5,1188(sp)
    5aa8:	8809883a 	mov	r4,r17
    5aac:	d9811b04 	addi	r6,sp,1132
    5ab0:	00046200 	call	4620 <__sprint_r>
    5ab4:	103c2d1e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    5ab8:	da011d17 	ldw	r8,1140(sp)
    5abc:	d8c11c17 	ldw	r3,1136(sp)
    5ac0:	da400404 	addi	r9,sp,16
    5ac4:	003d9806 	br	5128 <___vfprintf_internal_r+0xad4>
    5ac8:	8080100c 	andi	r2,r16,64
    5acc:	10011626 	beq	r2,zero,5f28 <___vfprintf_internal_r+0x18d4>
    5ad0:	d8c12d17 	ldw	r3,1204(sp)
    5ad4:	002d883a 	mov	r22,zero
    5ad8:	1dc0000b 	ldhu	r23,0(r3)
    5adc:	18c00104 	addi	r3,r3,4
    5ae0:	d8c12d15 	stw	r3,1204(sp)
    5ae4:	003cc106 	br	4dec <___vfprintf_internal_r+0x798>
    5ae8:	4d000015 	stw	r20,0(r9)
    5aec:	4c800115 	stw	r18,4(r9)
    5af0:	4491883a 	add	r8,r8,r18
    5af4:	003dc006 	br	51f8 <___vfprintf_internal_r+0xba4>
    5af8:	8080100c 	andi	r2,r16,64
    5afc:	10010126 	beq	r2,zero,5f04 <___vfprintf_internal_r+0x18b0>
    5b00:	d8c12d17 	ldw	r3,1204(sp)
    5b04:	002d883a 	mov	r22,zero
    5b08:	1dc0000b 	ldhu	r23,0(r3)
    5b0c:	18c00104 	addi	r3,r3,4
    5b10:	d8c12d15 	stw	r3,1204(sp)
    5b14:	b805883a 	mov	r2,r23
    5b18:	00c00044 	movi	r3,1
    5b1c:	d8012585 	stb	zero,1174(sp)
    5b20:	003c4506 	br	4c38 <___vfprintf_internal_r+0x5e4>
    5b24:	8080100c 	andi	r2,r16,64
    5b28:	10010526 	beq	r2,zero,5f40 <___vfprintf_internal_r+0x18ec>
    5b2c:	d9012d17 	ldw	r4,1204(sp)
    5b30:	002d883a 	mov	r22,zero
    5b34:	0007883a 	mov	r3,zero
    5b38:	25c0000b 	ldhu	r23,0(r4)
    5b3c:	21000104 	addi	r4,r4,4
    5b40:	d9012d15 	stw	r4,1204(sp)
    5b44:	b805883a 	mov	r2,r23
    5b48:	d8012585 	stb	zero,1174(sp)
    5b4c:	003c3a06 	br	4c38 <___vfprintf_internal_r+0x5e4>
    5b50:	d8812d17 	ldw	r2,1204(sp)
    5b54:	15800017 	ldw	r22,0(r2)
    5b58:	15000117 	ldw	r20,4(r2)
    5b5c:	10800204 	addi	r2,r2,8
    5b60:	d8812d15 	stw	r2,1204(sp)
    5b64:	dd813315 	stw	r22,1228(sp)
    5b68:	dd013415 	stw	r20,1232(sp)
    5b6c:	003c5906 	br	4cd4 <___vfprintf_internal_r+0x680>
    5b70:	00c00084 	movi	r3,2
    5b74:	d8012585 	stb	zero,1174(sp)
    5b78:	003c2f06 	br	4c38 <___vfprintf_internal_r+0x5e4>
    5b7c:	ac800007 	ldb	r18,0(r21)
    5b80:	003b1006 	br	47c4 <___vfprintf_internal_r+0x170>
    5b84:	8080040c 	andi	r2,r16,16
    5b88:	1000091e 	bne	r2,zero,5bb0 <___vfprintf_internal_r+0x155c>
    5b8c:	8400100c 	andi	r16,r16,64
    5b90:	80000726 	beq	r16,zero,5bb0 <___vfprintf_internal_r+0x155c>
    5b94:	d8c12d17 	ldw	r3,1204(sp)
    5b98:	d9012c17 	ldw	r4,1200(sp)
    5b9c:	18800017 	ldw	r2,0(r3)
    5ba0:	18c00104 	addi	r3,r3,4
    5ba4:	d8c12d15 	stw	r3,1204(sp)
    5ba8:	1100000d 	sth	r4,0(r2)
    5bac:	003adf06 	br	472c <___vfprintf_internal_r+0xd8>
    5bb0:	d8c12d17 	ldw	r3,1204(sp)
    5bb4:	d9012c17 	ldw	r4,1200(sp)
    5bb8:	18800017 	ldw	r2,0(r3)
    5bbc:	18c00104 	addi	r3,r3,4
    5bc0:	d8c12d15 	stw	r3,1204(sp)
    5bc4:	11000015 	stw	r4,0(r2)
    5bc8:	003ad806 	br	472c <___vfprintf_internal_r+0xd8>
    5bcc:	8080100c 	andi	r2,r16,64
    5bd0:	1000c526 	beq	r2,zero,5ee8 <___vfprintf_internal_r+0x1894>
    5bd4:	d8812d17 	ldw	r2,1204(sp)
    5bd8:	15c0000f 	ldh	r23,0(r2)
    5bdc:	10800104 	addi	r2,r2,4
    5be0:	d8812d15 	stw	r2,1204(sp)
    5be4:	b82dd7fa 	srai	r22,r23,31
    5be8:	b005883a 	mov	r2,r22
    5bec:	003c0906 	br	4c14 <___vfprintf_internal_r+0x5c0>
    5bf0:	4c800115 	stw	r18,4(r9)
    5bf4:	9211883a 	add	r8,r18,r8
    5bf8:	18c00044 	addi	r3,r3,1
    5bfc:	da011d15 	stw	r8,1140(sp)
    5c00:	d8c11c15 	stw	r3,1136(sp)
    5c04:	008001c4 	movi	r2,7
    5c08:	10c14016 	blt	r2,r3,610c <___vfprintf_internal_r+0x1ab8>
    5c0c:	4a400204 	addi	r9,r9,8
    5c10:	d8813717 	ldw	r2,1244(sp)
    5c14:	9ca7883a 	add	r19,r19,r18
    5c18:	48800015 	stw	r2,0(r9)
    5c1c:	00800044 	movi	r2,1
    5c20:	48800115 	stw	r2,4(r9)
    5c24:	4091883a 	add	r8,r8,r2
    5c28:	1887883a 	add	r3,r3,r2
    5c2c:	da011d15 	stw	r8,1140(sp)
    5c30:	d8c11c15 	stw	r3,1136(sp)
    5c34:	008001c4 	movi	r2,7
    5c38:	10c12c16 	blt	r2,r3,60ec <___vfprintf_internal_r+0x1a98>
    5c3c:	4a400204 	addi	r9,r9,8
    5c40:	d9013217 	ldw	r4,1224(sp)
    5c44:	da011d17 	ldw	r8,1140(sp)
    5c48:	d8c11c17 	ldw	r3,1136(sp)
    5c4c:	24a5c83a 	sub	r18,r4,r18
    5c50:	4cc00015 	stw	r19,0(r9)
    5c54:	003fa506 	br	5aec <___vfprintf_internal_r+0x1498>
    5c58:	04c00074 	movhi	r19,1
    5c5c:	9cd29304 	addi	r19,r19,19020
    5c60:	003c2e06 	br	4d1c <___vfprintf_internal_r+0x6c8>
    5c64:	d9412917 	ldw	r5,1188(sp)
    5c68:	8809883a 	mov	r4,r17
    5c6c:	d9811b04 	addi	r6,sp,1132
    5c70:	00046200 	call	4620 <__sprint_r>
    5c74:	103bbd1e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    5c78:	da011d17 	ldw	r8,1140(sp)
    5c7c:	da400404 	addi	r9,sp,16
    5c80:	003df606 	br	545c <___vfprintf_internal_r+0xe08>
    5c84:	00800074 	movhi	r2,1
    5c88:	1092a204 	addi	r2,r2,19080
    5c8c:	48800015 	stw	r2,0(r9)
    5c90:	00800044 	movi	r2,1
    5c94:	48800115 	stw	r2,4(r9)
    5c98:	4091883a 	add	r8,r8,r2
    5c9c:	1887883a 	add	r3,r3,r2
    5ca0:	da011d15 	stw	r8,1140(sp)
    5ca4:	d8c11c15 	stw	r3,1136(sp)
    5ca8:	008001c4 	movi	r2,7
    5cac:	10c0bc16 	blt	r2,r3,5fa0 <___vfprintf_internal_r+0x194c>
    5cb0:	4a400204 	addi	r9,r9,8
    5cb4:	9000041e 	bne	r18,zero,5cc8 <___vfprintf_internal_r+0x1674>
    5cb8:	d8c13217 	ldw	r3,1224(sp)
    5cbc:	1800021e 	bne	r3,zero,5cc8 <___vfprintf_internal_r+0x1674>
    5cc0:	8080004c 	andi	r2,r16,1
    5cc4:	103d5226 	beq	r2,zero,5210 <___vfprintf_internal_r+0xbbc>
    5cc8:	d8c11c17 	ldw	r3,1136(sp)
    5ccc:	d9013717 	ldw	r4,1244(sp)
    5cd0:	00800044 	movi	r2,1
    5cd4:	48800115 	stw	r2,4(r9)
    5cd8:	49000015 	stw	r4,0(r9)
    5cdc:	4091883a 	add	r8,r8,r2
    5ce0:	1887883a 	add	r3,r3,r2
    5ce4:	da011d15 	stw	r8,1140(sp)
    5ce8:	d8c11c15 	stw	r3,1136(sp)
    5cec:	008001c4 	movi	r2,7
    5cf0:	10c14516 	blt	r2,r3,6208 <___vfprintf_internal_r+0x1bb4>
    5cf4:	4a400204 	addi	r9,r9,8
    5cf8:	04a5c83a 	sub	r18,zero,r18
    5cfc:	0480d70e 	bge	zero,r18,605c <___vfprintf_internal_r+0x1a08>
    5d00:	05800404 	movi	r22,16
    5d04:	05000074 	movhi	r20,1
    5d08:	a512a684 	addi	r20,r20,19098
    5d0c:	b480db0e 	bge	r22,r18,607c <___vfprintf_internal_r+0x1a28>
    5d10:	05c001c4 	movi	r23,7
    5d14:	df012917 	ldw	fp,1188(sp)
    5d18:	00000306 	br	5d28 <___vfprintf_internal_r+0x16d4>
    5d1c:	4a400204 	addi	r9,r9,8
    5d20:	94bffc04 	addi	r18,r18,-16
    5d24:	b480d50e 	bge	r22,r18,607c <___vfprintf_internal_r+0x1a28>
    5d28:	4d000015 	stw	r20,0(r9)
    5d2c:	4d800115 	stw	r22,4(r9)
    5d30:	42000404 	addi	r8,r8,16
    5d34:	18c00044 	addi	r3,r3,1
    5d38:	da011d15 	stw	r8,1140(sp)
    5d3c:	d8c11c15 	stw	r3,1136(sp)
    5d40:	b8fff60e 	bge	r23,r3,5d1c <___vfprintf_internal_r+0x16c8>
    5d44:	8809883a 	mov	r4,r17
    5d48:	e00b883a 	mov	r5,fp
    5d4c:	d9811b04 	addi	r6,sp,1132
    5d50:	00046200 	call	4620 <__sprint_r>
    5d54:	103b851e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    5d58:	da011d17 	ldw	r8,1140(sp)
    5d5c:	d8c11c17 	ldw	r3,1136(sp)
    5d60:	da400404 	addi	r9,sp,16
    5d64:	003fee06 	br	5d20 <___vfprintf_internal_r+0x16cc>
    5d68:	da413c15 	stw	r9,1264(sp)
    5d6c:	000b8d40 	call	b8d4 <__isnand>
    5d70:	da413c17 	ldw	r9,1264(sp)
    5d74:	10007e1e 	bne	r2,zero,5f70 <___vfprintf_internal_r+0x191c>
    5d78:	00bfffc4 	movi	r2,-1
    5d7c:	e0816a26 	beq	fp,r2,6328 <___vfprintf_internal_r+0x1cd4>
    5d80:	008019c4 	movi	r2,103
    5d84:	90816526 	beq	r18,r2,631c <___vfprintf_internal_r+0x1cc8>
    5d88:	008011c4 	movi	r2,71
    5d8c:	90816326 	beq	r18,r2,631c <___vfprintf_internal_r+0x1cc8>
    5d90:	80c04014 	ori	r3,r16,256
    5d94:	d8c12a15 	stw	r3,1192(sp)
    5d98:	a0016516 	blt	r20,zero,6330 <___vfprintf_internal_r+0x1cdc>
    5d9c:	d8012f05 	stb	zero,1212(sp)
    5da0:	00801984 	movi	r2,102
    5da4:	9080f226 	beq	r18,r2,6170 <___vfprintf_internal_r+0x1b1c>
    5da8:	00801184 	movi	r2,70
    5dac:	9080f026 	beq	r18,r2,6170 <___vfprintf_internal_r+0x1b1c>
    5db0:	00801944 	movi	r2,101
    5db4:	90818d26 	beq	r18,r2,63ec <___vfprintf_internal_r+0x1d98>
    5db8:	00801144 	movi	r2,69
    5dbc:	90818b26 	beq	r18,r2,63ec <___vfprintf_internal_r+0x1d98>
    5dc0:	e02f883a 	mov	r23,fp
    5dc4:	d8812404 	addi	r2,sp,1168
    5dc8:	d8800115 	stw	r2,4(sp)
    5dcc:	d8812304 	addi	r2,sp,1164
    5dd0:	d8800215 	stw	r2,8(sp)
    5dd4:	d8812204 	addi	r2,sp,1160
    5dd8:	ddc00015 	stw	r23,0(sp)
    5ddc:	d8800315 	stw	r2,12(sp)
    5de0:	8809883a 	mov	r4,r17
    5de4:	b00b883a 	mov	r5,r22
    5de8:	a00d883a 	mov	r6,r20
    5dec:	01c00084 	movi	r7,2
    5df0:	da413c15 	stw	r9,1264(sp)
    5df4:	00080fc0 	call	80fc <_dtoa_r>
    5df8:	1027883a 	mov	r19,r2
    5dfc:	008019c4 	movi	r2,103
    5e00:	da413c17 	ldw	r9,1264(sp)
    5e04:	9081951e 	bne	r18,r2,645c <___vfprintf_internal_r+0x1e08>
    5e08:	8080004c 	andi	r2,r16,1
    5e0c:	10017926 	beq	r2,zero,63f4 <___vfprintf_internal_r+0x1da0>
    5e10:	00801184 	movi	r2,70
    5e14:	9dc7883a 	add	r3,r19,r23
    5e18:	9080e626 	beq	r18,r2,61b4 <___vfprintf_internal_r+0x1b60>
    5e1c:	b009883a 	mov	r4,r22
    5e20:	a00b883a 	mov	r5,r20
    5e24:	000d883a 	mov	r6,zero
    5e28:	000f883a 	mov	r7,zero
    5e2c:	d8c13b15 	stw	r3,1260(sp)
    5e30:	da413c15 	stw	r9,1264(sp)
    5e34:	00104a80 	call	104a8 <__eqdf2>
    5e38:	d8c13b17 	ldw	r3,1260(sp)
    5e3c:	da413c17 	ldw	r9,1264(sp)
    5e40:	10000726 	beq	r2,zero,5e60 <___vfprintf_internal_r+0x180c>
    5e44:	d8812217 	ldw	r2,1160(sp)
    5e48:	10c18a2e 	bgeu	r2,r3,6474 <___vfprintf_internal_r+0x1e20>
    5e4c:	01000c04 	movi	r4,48
    5e50:	11000005 	stb	r4,0(r2)
    5e54:	10800044 	addi	r2,r2,1
    5e58:	d8812215 	stw	r2,1160(sp)
    5e5c:	10fffc1e 	bne	r2,r3,5e50 <___vfprintf_internal_r+0x17fc>
    5e60:	1cc7c83a 	sub	r3,r3,r19
    5e64:	d8c13215 	stw	r3,1224(sp)
    5e68:	008019c4 	movi	r2,103
    5e6c:	9080fa26 	beq	r18,r2,6258 <___vfprintf_internal_r+0x1c04>
    5e70:	008011c4 	movi	r2,71
    5e74:	9080f826 	beq	r18,r2,6258 <___vfprintf_internal_r+0x1c04>
    5e78:	00801984 	movi	r2,102
    5e7c:	90818e1e 	bne	r18,r2,64b8 <___vfprintf_internal_r+0x1e64>
    5e80:	d8812417 	ldw	r2,1168(sp)
    5e84:	d8812b15 	stw	r2,1196(sp)
    5e88:	00817c0e 	bge	zero,r2,647c <___vfprintf_internal_r+0x1e28>
    5e8c:	e000021e 	bne	fp,zero,5e98 <___vfprintf_internal_r+0x1844>
    5e90:	8400004c 	andi	r16,r16,1
    5e94:	80000426 	beq	r16,zero,5ea8 <___vfprintf_internal_r+0x1854>
    5e98:	d8812b17 	ldw	r2,1196(sp)
    5e9c:	e2000044 	addi	r8,fp,1
    5ea0:	1205883a 	add	r2,r2,r8
    5ea4:	d8812b15 	stw	r2,1196(sp)
    5ea8:	d8812815 	stw	r2,1184(sp)
    5eac:	10010b16 	blt	r2,zero,62dc <___vfprintf_internal_r+0x1c88>
    5eb0:	ddc12f07 	ldb	r23,1212(sp)
    5eb4:	b800e426 	beq	r23,zero,6248 <___vfprintf_internal_r+0x1bf4>
    5eb8:	00800b44 	movi	r2,45
    5ebc:	d8812585 	stb	r2,1174(sp)
    5ec0:	dc012a17 	ldw	r16,1192(sp)
    5ec4:	d8013115 	stw	zero,1220(sp)
    5ec8:	003b7306 	br	4c98 <___vfprintf_internal_r+0x644>
    5ecc:	d8812b17 	ldw	r2,1196(sp)
    5ed0:	d8812815 	stw	r2,1184(sp)
    5ed4:	10005716 	blt	r2,zero,6034 <___vfprintf_internal_r+0x19e0>
    5ed8:	d8812583 	ldbu	r2,1174(sp)
    5edc:	ddc12d15 	stw	r23,1204(sp)
    5ee0:	d8013115 	stw	zero,1220(sp)
    5ee4:	003b6806 	br	4c88 <___vfprintf_internal_r+0x634>
    5ee8:	d8c12d17 	ldw	r3,1204(sp)
    5eec:	1dc00017 	ldw	r23,0(r3)
    5ef0:	18c00104 	addi	r3,r3,4
    5ef4:	d8c12d15 	stw	r3,1204(sp)
    5ef8:	b82dd7fa 	srai	r22,r23,31
    5efc:	b005883a 	mov	r2,r22
    5f00:	003b4406 	br	4c14 <___vfprintf_internal_r+0x5c0>
    5f04:	d9012d17 	ldw	r4,1204(sp)
    5f08:	002d883a 	mov	r22,zero
    5f0c:	00c00044 	movi	r3,1
    5f10:	25c00017 	ldw	r23,0(r4)
    5f14:	21000104 	addi	r4,r4,4
    5f18:	d9012d15 	stw	r4,1204(sp)
    5f1c:	b805883a 	mov	r2,r23
    5f20:	d8012585 	stb	zero,1174(sp)
    5f24:	003b4406 	br	4c38 <___vfprintf_internal_r+0x5e4>
    5f28:	d9012d17 	ldw	r4,1204(sp)
    5f2c:	002d883a 	mov	r22,zero
    5f30:	25c00017 	ldw	r23,0(r4)
    5f34:	21000104 	addi	r4,r4,4
    5f38:	d9012d15 	stw	r4,1204(sp)
    5f3c:	003bab06 	br	4dec <___vfprintf_internal_r+0x798>
    5f40:	d8812d17 	ldw	r2,1204(sp)
    5f44:	002d883a 	mov	r22,zero
    5f48:	0007883a 	mov	r3,zero
    5f4c:	15c00017 	ldw	r23,0(r2)
    5f50:	10800104 	addi	r2,r2,4
    5f54:	d8812d15 	stw	r2,1204(sp)
    5f58:	d8012585 	stb	zero,1174(sp)
    5f5c:	b805883a 	mov	r2,r23
    5f60:	003b3506 	br	4c38 <___vfprintf_internal_r+0x5e4>
    5f64:	00ffffc4 	movi	r3,-1
    5f68:	b82b883a 	mov	r21,r23
    5f6c:	003a1606 	br	47c8 <___vfprintf_internal_r+0x174>
    5f70:	008011c4 	movi	r2,71
    5f74:	1480b116 	blt	r2,r18,623c <___vfprintf_internal_r+0x1be8>
    5f78:	04c00074 	movhi	r19,1
    5f7c:	9cd29404 	addi	r19,r19,19024
    5f80:	00c000c4 	movi	r3,3
    5f84:	00bfdfc4 	movi	r2,-129
    5f88:	80a0703a 	and	r16,r16,r2
    5f8c:	d8c12815 	stw	r3,1184(sp)
    5f90:	d8812583 	ldbu	r2,1174(sp)
    5f94:	d8c12b15 	stw	r3,1196(sp)
    5f98:	d8013115 	stw	zero,1220(sp)
    5f9c:	003b3a06 	br	4c88 <___vfprintf_internal_r+0x634>
    5fa0:	d9412917 	ldw	r5,1188(sp)
    5fa4:	8809883a 	mov	r4,r17
    5fa8:	d9811b04 	addi	r6,sp,1132
    5fac:	00046200 	call	4620 <__sprint_r>
    5fb0:	103aee1e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    5fb4:	dc812417 	ldw	r18,1168(sp)
    5fb8:	da011d17 	ldw	r8,1140(sp)
    5fbc:	da400404 	addi	r9,sp,16
    5fc0:	003f3c06 	br	5cb4 <___vfprintf_internal_r+0x1660>
    5fc4:	ad400044 	addi	r21,r21,1
    5fc8:	84000814 	ori	r16,r16,32
    5fcc:	14800047 	ldb	r18,1(r2)
    5fd0:	0039fc06 	br	47c4 <___vfprintf_internal_r+0x170>
    5fd4:	d9412917 	ldw	r5,1188(sp)
    5fd8:	8809883a 	mov	r4,r17
    5fdc:	d9811b04 	addi	r6,sp,1132
    5fe0:	00046200 	call	4620 <__sprint_r>
    5fe4:	103ae11e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    5fe8:	da011d17 	ldw	r8,1140(sp)
    5fec:	da400404 	addi	r9,sp,16
    5ff0:	003d2b06 	br	54a0 <___vfprintf_internal_r+0xe4c>
    5ff4:	4d000015 	stw	r20,0(r9)
    5ff8:	4c800115 	stw	r18,4(r9)
    5ffc:	4491883a 	add	r8,r8,r18
    6000:	18c00044 	addi	r3,r3,1
    6004:	da011d15 	stw	r8,1140(sp)
    6008:	d8c11c15 	stw	r3,1136(sp)
    600c:	008001c4 	movi	r2,7
    6010:	10fcbd16 	blt	r2,r3,5308 <___vfprintf_internal_r+0xcb4>
    6014:	4a400204 	addi	r9,r9,8
    6018:	003cc206 	br	5324 <___vfprintf_internal_r+0xcd0>
    601c:	da413c15 	stw	r9,1264(sp)
    6020:	00045940 	call	4594 <strlen>
    6024:	d8812b15 	stw	r2,1196(sp)
    6028:	d8812815 	stw	r2,1184(sp)
    602c:	da413c17 	ldw	r9,1264(sp)
    6030:	103fa90e 	bge	r2,zero,5ed8 <___vfprintf_internal_r+0x1884>
    6034:	d8012815 	stw	zero,1184(sp)
    6038:	003fa706 	br	5ed8 <___vfprintf_internal_r+0x1884>
    603c:	d9412917 	ldw	r5,1188(sp)
    6040:	8809883a 	mov	r4,r17
    6044:	d9811b04 	addi	r6,sp,1132
    6048:	00046200 	call	4620 <__sprint_r>
    604c:	103ac71e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    6050:	da011d17 	ldw	r8,1140(sp)
    6054:	d8c11c17 	ldw	r3,1136(sp)
    6058:	da400404 	addi	r9,sp,16
    605c:	d8813217 	ldw	r2,1224(sp)
    6060:	4cc00015 	stw	r19,0(r9)
    6064:	48800115 	stw	r2,4(r9)
    6068:	4091883a 	add	r8,r8,r2
    606c:	003c6206 	br	51f8 <___vfprintf_internal_r+0xba4>
    6070:	00800b44 	movi	r2,45
    6074:	d8812585 	stb	r2,1174(sp)
    6078:	003b2406 	br	4d0c <___vfprintf_internal_r+0x6b8>
    607c:	4d000015 	stw	r20,0(r9)
    6080:	4c800115 	stw	r18,4(r9)
    6084:	4491883a 	add	r8,r8,r18
    6088:	18c00044 	addi	r3,r3,1
    608c:	da011d15 	stw	r8,1140(sp)
    6090:	d8c11c15 	stw	r3,1136(sp)
    6094:	008001c4 	movi	r2,7
    6098:	10ffe816 	blt	r2,r3,603c <___vfprintf_internal_r+0x19e8>
    609c:	4a400204 	addi	r9,r9,8
    60a0:	003fee06 	br	605c <___vfprintf_internal_r+0x1a08>
    60a4:	d8c12b15 	stw	r3,1196(sp)
    60a8:	00800184 	movi	r2,6
    60ac:	10c0062e 	bgeu	r2,r3,60c8 <___vfprintf_internal_r+0x1a74>
    60b0:	d8812b15 	stw	r2,1196(sp)
    60b4:	d8812815 	stw	r2,1184(sp)
    60b8:	ddc12d15 	stw	r23,1204(sp)
    60bc:	04c00074 	movhi	r19,1
    60c0:	9cd2a004 	addi	r19,r19,19072
    60c4:	0039ca06 	br	47f0 <___vfprintf_internal_r+0x19c>
    60c8:	d8812b17 	ldw	r2,1196(sp)
    60cc:	d8812815 	stw	r2,1184(sp)
    60d0:	103ff90e 	bge	r2,zero,60b8 <___vfprintf_internal_r+0x1a64>
    60d4:	d8012815 	stw	zero,1184(sp)
    60d8:	003ff706 	br	60b8 <___vfprintf_internal_r+0x1a64>
    60dc:	00800244 	movi	r2,9
    60e0:	15fdaa36 	bltu	r2,r23,578c <___vfprintf_internal_r+0x1138>
    60e4:	dd010e04 	addi	r20,sp,1080
    60e8:	003dc606 	br	5804 <___vfprintf_internal_r+0x11b0>
    60ec:	d9412917 	ldw	r5,1188(sp)
    60f0:	8809883a 	mov	r4,r17
    60f4:	d9811b04 	addi	r6,sp,1132
    60f8:	00046200 	call	4620 <__sprint_r>
    60fc:	103a9b1e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    6100:	dc812417 	ldw	r18,1168(sp)
    6104:	da400404 	addi	r9,sp,16
    6108:	003ecd06 	br	5c40 <___vfprintf_internal_r+0x15ec>
    610c:	d9412917 	ldw	r5,1188(sp)
    6110:	8809883a 	mov	r4,r17
    6114:	d9811b04 	addi	r6,sp,1132
    6118:	00046200 	call	4620 <__sprint_r>
    611c:	103a931e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    6120:	dc812417 	ldw	r18,1168(sp)
    6124:	da011d17 	ldw	r8,1140(sp)
    6128:	d8c11c17 	ldw	r3,1136(sp)
    612c:	da400404 	addi	r9,sp,16
    6130:	003eb706 	br	5c10 <___vfprintf_internal_r+0x15bc>
    6134:	d9412917 	ldw	r5,1188(sp)
    6138:	8809883a 	mov	r4,r17
    613c:	d9811b04 	addi	r6,sp,1132
    6140:	00046200 	call	4620 <__sprint_r>
    6144:	103a891e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    6148:	dc812417 	ldw	r18,1168(sp)
    614c:	da011d17 	ldw	r8,1140(sp)
    6150:	da400404 	addi	r9,sp,16
    6154:	003dc206 	br	5860 <___vfprintf_internal_r+0x120c>
    6158:	df012815 	stw	fp,1184(sp)
    615c:	d8812583 	ldbu	r2,1174(sp)
    6160:	df012b15 	stw	fp,1196(sp)
    6164:	ddc12d15 	stw	r23,1204(sp)
    6168:	d8013115 	stw	zero,1220(sp)
    616c:	003ac606 	br	4c88 <___vfprintf_internal_r+0x634>
    6170:	d8812404 	addi	r2,sp,1168
    6174:	d8800115 	stw	r2,4(sp)
    6178:	d8812304 	addi	r2,sp,1164
    617c:	d8800215 	stw	r2,8(sp)
    6180:	d8812204 	addi	r2,sp,1160
    6184:	df000015 	stw	fp,0(sp)
    6188:	d8800315 	stw	r2,12(sp)
    618c:	8809883a 	mov	r4,r17
    6190:	b00b883a 	mov	r5,r22
    6194:	a00d883a 	mov	r6,r20
    6198:	01c000c4 	movi	r7,3
    619c:	da413c15 	stw	r9,1264(sp)
    61a0:	00080fc0 	call	80fc <_dtoa_r>
    61a4:	da413c17 	ldw	r9,1264(sp)
    61a8:	1027883a 	mov	r19,r2
    61ac:	1707883a 	add	r3,r2,fp
    61b0:	e02f883a 	mov	r23,fp
    61b4:	99000007 	ldb	r4,0(r19)
    61b8:	00800c04 	movi	r2,48
    61bc:	20800326 	beq	r4,r2,61cc <___vfprintf_internal_r+0x1b78>
    61c0:	da812417 	ldw	r10,1168(sp)
    61c4:	1a87883a 	add	r3,r3,r10
    61c8:	003f1406 	br	5e1c <___vfprintf_internal_r+0x17c8>
    61cc:	b009883a 	mov	r4,r22
    61d0:	a00b883a 	mov	r5,r20
    61d4:	000d883a 	mov	r6,zero
    61d8:	000f883a 	mov	r7,zero
    61dc:	d8c13b15 	stw	r3,1260(sp)
    61e0:	da413c15 	stw	r9,1264(sp)
    61e4:	00105040 	call	10504 <__nedf2>
    61e8:	d8c13b17 	ldw	r3,1260(sp)
    61ec:	da413c17 	ldw	r9,1264(sp)
    61f0:	103ff326 	beq	r2,zero,61c0 <___vfprintf_internal_r+0x1b6c>
    61f4:	00800044 	movi	r2,1
    61f8:	15d5c83a 	sub	r10,r2,r23
    61fc:	da812415 	stw	r10,1168(sp)
    6200:	1a87883a 	add	r3,r3,r10
    6204:	003f0506 	br	5e1c <___vfprintf_internal_r+0x17c8>
    6208:	d9412917 	ldw	r5,1188(sp)
    620c:	8809883a 	mov	r4,r17
    6210:	d9811b04 	addi	r6,sp,1132
    6214:	00046200 	call	4620 <__sprint_r>
    6218:	103a541e 	bne	r2,zero,4b6c <___vfprintf_internal_r+0x518>
    621c:	dc812417 	ldw	r18,1168(sp)
    6220:	da011d17 	ldw	r8,1140(sp)
    6224:	d8c11c17 	ldw	r3,1136(sp)
    6228:	da400404 	addi	r9,sp,16
    622c:	003eb206 	br	5cf8 <___vfprintf_internal_r+0x16a4>
    6230:	b82b883a 	mov	r21,r23
    6234:	0007883a 	mov	r3,zero
    6238:	00396306 	br	47c8 <___vfprintf_internal_r+0x174>
    623c:	04c00074 	movhi	r19,1
    6240:	9cd29504 	addi	r19,r19,19028
    6244:	003f4e06 	br	5f80 <___vfprintf_internal_r+0x192c>
    6248:	d8812583 	ldbu	r2,1174(sp)
    624c:	dc012a17 	ldw	r16,1192(sp)
    6250:	d8013115 	stw	zero,1220(sp)
    6254:	003a8c06 	br	4c88 <___vfprintf_internal_r+0x634>
    6258:	d8812417 	ldw	r2,1168(sp)
    625c:	d8812b15 	stw	r2,1196(sp)
    6260:	1029883a 	mov	r20,r2
    6264:	00bfff44 	movi	r2,-3
    6268:	a0800116 	blt	r20,r2,6270 <___vfprintf_internal_r+0x1c1c>
    626c:	e5001d0e 	bge	fp,r20,62e4 <___vfprintf_internal_r+0x1c90>
    6270:	94bfff84 	addi	r18,r18,-2
    6274:	a53fffc4 	addi	r20,r20,-1
    6278:	dd012415 	stw	r20,1168(sp)
    627c:	dc811fc5 	stb	r18,1151(sp)
    6280:	a0007216 	blt	r20,zero,644c <___vfprintf_internal_r+0x1df8>
    6284:	00800ac4 	movi	r2,43
    6288:	d8812005 	stb	r2,1152(sp)
    628c:	00800244 	movi	r2,9
    6290:	15003516 	blt	r2,r20,6368 <___vfprintf_internal_r+0x1d14>
    6294:	00800c04 	movi	r2,48
    6298:	a5000c04 	addi	r20,r20,48
    629c:	d8812045 	stb	r2,1153(sp)
    62a0:	dd012085 	stb	r20,1154(sp)
    62a4:	d8c120c4 	addi	r3,sp,1155
    62a8:	d8811fc4 	addi	r2,sp,1151
    62ac:	1885c83a 	sub	r2,r3,r2
    62b0:	d8c13217 	ldw	r3,1224(sp)
    62b4:	d8813515 	stw	r2,1236(sp)
    62b8:	1885883a 	add	r2,r3,r2
    62bc:	d8812b15 	stw	r2,1196(sp)
    62c0:	00800044 	movi	r2,1
    62c4:	10c0580e 	bge	r2,r3,6428 <___vfprintf_internal_r+0x1dd4>
    62c8:	d8812b17 	ldw	r2,1196(sp)
    62cc:	10800044 	addi	r2,r2,1
    62d0:	d8812b15 	stw	r2,1196(sp)
    62d4:	d8812815 	stw	r2,1184(sp)
    62d8:	103ef50e 	bge	r2,zero,5eb0 <___vfprintf_internal_r+0x185c>
    62dc:	d8012815 	stw	zero,1184(sp)
    62e0:	003ef306 	br	5eb0 <___vfprintf_internal_r+0x185c>
    62e4:	d8812b17 	ldw	r2,1196(sp)
    62e8:	d8c13217 	ldw	r3,1224(sp)
    62ec:	10c01416 	blt	r2,r3,6340 <___vfprintf_internal_r+0x1cec>
    62f0:	8400004c 	andi	r16,r16,1
    62f4:	80000326 	beq	r16,zero,6304 <___vfprintf_internal_r+0x1cb0>
    62f8:	d8812b17 	ldw	r2,1196(sp)
    62fc:	10800044 	addi	r2,r2,1
    6300:	d8812b15 	stw	r2,1196(sp)
    6304:	d8812815 	stw	r2,1184(sp)
    6308:	10001416 	blt	r2,zero,635c <___vfprintf_internal_r+0x1d08>
    630c:	048019c4 	movi	r18,103
    6310:	003ee706 	br	5eb0 <___vfprintf_internal_r+0x185c>
    6314:	d8012815 	stw	zero,1184(sp)
    6318:	003b1a06 	br	4f84 <___vfprintf_internal_r+0x930>
    631c:	e03e9c1e 	bne	fp,zero,5d90 <___vfprintf_internal_r+0x173c>
    6320:	07000044 	movi	fp,1
    6324:	003e9a06 	br	5d90 <___vfprintf_internal_r+0x173c>
    6328:	07000184 	movi	fp,6
    632c:	003e9806 	br	5d90 <___vfprintf_internal_r+0x173c>
    6330:	00c00b44 	movi	r3,45
    6334:	a520003c 	xorhi	r20,r20,32768
    6338:	d8c12f05 	stb	r3,1212(sp)
    633c:	003e9806 	br	5da0 <___vfprintf_internal_r+0x174c>
    6340:	05003f0e 	bge	zero,r20,6440 <___vfprintf_internal_r+0x1dec>
    6344:	05000044 	movi	r20,1
    6348:	d8c13217 	ldw	r3,1224(sp)
    634c:	a0e9883a 	add	r20,r20,r3
    6350:	dd012b15 	stw	r20,1196(sp)
    6354:	dd012815 	stw	r20,1184(sp)
    6358:	a03fec0e 	bge	r20,zero,630c <___vfprintf_internal_r+0x1cb8>
    635c:	d8012815 	stw	zero,1184(sp)
    6360:	048019c4 	movi	r18,103
    6364:	003ed206 	br	5eb0 <___vfprintf_internal_r+0x185c>
    6368:	d8c11f84 	addi	r3,sp,1150
    636c:	102f883a 	mov	r23,r2
    6370:	4839883a 	mov	fp,r9
    6374:	a009883a 	mov	r4,r20
    6378:	01400284 	movi	r5,10
    637c:	182d883a 	mov	r22,r3
    6380:	0010ac80 	call	10ac8 <__modsi3>
    6384:	10800c04 	addi	r2,r2,48
    6388:	a009883a 	mov	r4,r20
    638c:	b0800005 	stb	r2,0(r22)
    6390:	01400284 	movi	r5,10
    6394:	0010a780 	call	10a78 <__divsi3>
    6398:	1029883a 	mov	r20,r2
    639c:	b0ffffc4 	addi	r3,r22,-1
    63a0:	b8bff416 	blt	r23,r2,6374 <___vfprintf_internal_r+0x1d20>
    63a4:	11400c04 	addi	r5,r2,48
    63a8:	b17fffc5 	stb	r5,-1(r22)
    63ac:	d8811fc4 	addi	r2,sp,1151
    63b0:	e013883a 	mov	r9,fp
    63b4:	18803e2e 	bgeu	r3,r2,64b0 <___vfprintf_internal_r+0x1e5c>
    63b8:	b007883a 	mov	r3,r22
    63bc:	d9012044 	addi	r4,sp,1153
    63c0:	00000206 	br	63cc <___vfprintf_internal_r+0x1d78>
    63c4:	19400003 	ldbu	r5,0(r3)
    63c8:	18c00044 	addi	r3,r3,1
    63cc:	21400005 	stb	r5,0(r4)
    63d0:	21000044 	addi	r4,r4,1
    63d4:	10fffb1e 	bne	r2,r3,63c4 <___vfprintf_internal_r+0x1d70>
    63d8:	d8c12004 	addi	r3,sp,1152
    63dc:	1d87c83a 	sub	r3,r3,r22
    63e0:	d9012044 	addi	r4,sp,1153
    63e4:	20c7883a 	add	r3,r4,r3
    63e8:	003fb006 	br	62ac <___vfprintf_internal_r+0x1c58>
    63ec:	e5c00044 	addi	r23,fp,1
    63f0:	003e7406 	br	5dc4 <___vfprintf_internal_r+0x1770>
    63f4:	d8c12217 	ldw	r3,1160(sp)
    63f8:	003e9906 	br	5e60 <___vfprintf_internal_r+0x180c>
    63fc:	d9012d17 	ldw	r4,1204(sp)
    6400:	ac800043 	ldbu	r18,1(r21)
    6404:	b82b883a 	mov	r21,r23
    6408:	20c00017 	ldw	r3,0(r4)
    640c:	20800104 	addi	r2,r4,4
    6410:	d8812d15 	stw	r2,1204(sp)
    6414:	18002116 	blt	r3,zero,649c <___vfprintf_internal_r+0x1e48>
    6418:	94803fcc 	andi	r18,r18,255
    641c:	9480201c 	xori	r18,r18,128
    6420:	94bfe004 	addi	r18,r18,-128
    6424:	0038e706 	br	47c4 <___vfprintf_internal_r+0x170>
    6428:	80a0703a 	and	r16,r16,r2
    642c:	803fa61e 	bne	r16,zero,62c8 <___vfprintf_internal_r+0x1c74>
    6430:	d8812b17 	ldw	r2,1196(sp)
    6434:	d8812815 	stw	r2,1184(sp)
    6438:	103e9d0e 	bge	r2,zero,5eb0 <___vfprintf_internal_r+0x185c>
    643c:	003fa706 	br	62dc <___vfprintf_internal_r+0x1c88>
    6440:	00800084 	movi	r2,2
    6444:	1529c83a 	sub	r20,r2,r20
    6448:	003fbf06 	br	6348 <___vfprintf_internal_r+0x1cf4>
    644c:	00800b44 	movi	r2,45
    6450:	0529c83a 	sub	r20,zero,r20
    6454:	d8812005 	stb	r2,1152(sp)
    6458:	003f8c06 	br	628c <___vfprintf_internal_r+0x1c38>
    645c:	008011c4 	movi	r2,71
    6460:	90be6926 	beq	r18,r2,5e08 <___vfprintf_internal_r+0x17b4>
    6464:	003e6a06 	br	5e10 <___vfprintf_internal_r+0x17bc>
    6468:	00bfffc4 	movi	r2,-1
    646c:	d8812c15 	stw	r2,1200(sp)
    6470:	0039ad06 	br	4b28 <___vfprintf_internal_r+0x4d4>
    6474:	1007883a 	mov	r3,r2
    6478:	003e7906 	br	5e60 <___vfprintf_internal_r+0x180c>
    647c:	e000021e 	bne	fp,zero,6488 <___vfprintf_internal_r+0x1e34>
    6480:	8400004c 	andi	r16,r16,1
    6484:	80000e26 	beq	r16,zero,64c0 <___vfprintf_internal_r+0x1e6c>
    6488:	e7000084 	addi	fp,fp,2
    648c:	df012b15 	stw	fp,1196(sp)
    6490:	df012815 	stw	fp,1184(sp)
    6494:	e03e860e 	bge	fp,zero,5eb0 <___vfprintf_internal_r+0x185c>
    6498:	003f9006 	br	62dc <___vfprintf_internal_r+0x1c88>
    649c:	94803fcc 	andi	r18,r18,255
    64a0:	9480201c 	xori	r18,r18,128
    64a4:	00ffffc4 	movi	r3,-1
    64a8:	94bfe004 	addi	r18,r18,-128
    64ac:	0038c506 	br	47c4 <___vfprintf_internal_r+0x170>
    64b0:	d8c12044 	addi	r3,sp,1153
    64b4:	003f7d06 	br	62ac <___vfprintf_internal_r+0x1c58>
    64b8:	dd012417 	ldw	r20,1168(sp)
    64bc:	003f6d06 	br	6274 <___vfprintf_internal_r+0x1c20>
    64c0:	00c00044 	movi	r3,1
    64c4:	d8c12815 	stw	r3,1184(sp)
    64c8:	d8c12b15 	stw	r3,1196(sp)
    64cc:	003e7806 	br	5eb0 <___vfprintf_internal_r+0x185c>

000064d0 <__vfprintf_internal>:
    64d0:	00800074 	movhi	r2,1
    64d4:	109ab504 	addi	r2,r2,27348
    64d8:	2007883a 	mov	r3,r4
    64dc:	11000017 	ldw	r4,0(r2)
    64e0:	2805883a 	mov	r2,r5
    64e4:	300f883a 	mov	r7,r6
    64e8:	180b883a 	mov	r5,r3
    64ec:	100d883a 	mov	r6,r2
    64f0:	00046541 	jmpi	4654 <___vfprintf_internal_r>

000064f4 <__svfscanf_r>:
    64f4:	deff4c04 	addi	sp,sp,-720
    64f8:	ddc0b115 	stw	r23,708(sp)
    64fc:	dd00ae15 	stw	r20,696(sp)
    6500:	dcc0ad15 	stw	r19,692(sp)
    6504:	dc80ac15 	stw	r18,688(sp)
    6508:	dc40ab15 	stw	r17,684(sp)
    650c:	dc00aa15 	stw	r16,680(sp)
    6510:	dfc0b315 	stw	ra,716(sp)
    6514:	df00b215 	stw	fp,712(sp)
    6518:	dd80b015 	stw	r22,704(sp)
    651c:	dd40af15 	stw	r21,700(sp)
    6520:	30800007 	ldb	r2,0(r6)
    6524:	002f883a 	mov	r23,zero
    6528:	d9c09c15 	stw	r7,624(sp)
    652c:	d800a015 	stw	zero,640(sp)
    6530:	d8009f15 	stw	zero,636(sp)
    6534:	d8009e15 	stw	zero,632(sp)
    6538:	d8809b15 	stw	r2,620(sp)
    653c:	2023883a 	mov	r17,r4
    6540:	04800074 	movhi	r18,1
    6544:	949ab804 	addi	r18,r18,27360
    6548:	b829883a 	mov	r20,r23
    654c:	2827883a 	mov	r19,r5
    6550:	34000044 	addi	r16,r6,1
    6554:	10002426 	beq	r2,zero,65e8 <__svfscanf_r+0xf4>
    6558:	95400017 	ldw	r21,0(r18)
    655c:	a887883a 	add	r3,r21,r2
    6560:	18c00003 	ldbu	r3,0(r3)
    6564:	18c0020c 	andi	r3,r3,8
    6568:	18c03fcc 	andi	r3,r3,255
    656c:	18c0201c 	xori	r3,r3,128
    6570:	18ffe004 	addi	r3,r3,-128
    6574:	18002926 	beq	r3,zero,661c <__svfscanf_r+0x128>
    6578:	98800117 	ldw	r2,4(r19)
    657c:	0080110e 	bge	zero,r2,65c4 <__svfscanf_r+0xd0>
    6580:	98c00017 	ldw	r3,0(r19)
    6584:	91000017 	ldw	r4,0(r18)
    6588:	18800003 	ldbu	r2,0(r3)
    658c:	2085883a 	add	r2,r4,r2
    6590:	10800003 	ldbu	r2,0(r2)
    6594:	1080020c 	andi	r2,r2,8
    6598:	10803fcc 	andi	r2,r2,255
    659c:	1080201c 	xori	r2,r2,128
    65a0:	10bfe004 	addi	r2,r2,-128
    65a4:	10000b26 	beq	r2,zero,65d4 <__svfscanf_r+0xe0>
    65a8:	98800117 	ldw	r2,4(r19)
    65ac:	18c00044 	addi	r3,r3,1
    65b0:	98c00015 	stw	r3,0(r19)
    65b4:	10bfffc4 	addi	r2,r2,-1
    65b8:	98800115 	stw	r2,4(r19)
    65bc:	a5000044 	addi	r20,r20,1
    65c0:	00bfef16 	blt	zero,r2,6580 <__svfscanf_r+0x8c>
    65c4:	8809883a 	mov	r4,r17
    65c8:	980b883a 	mov	r5,r19
    65cc:	00042040 	call	4204 <__srefill_r>
    65d0:	103feb26 	beq	r2,zero,6580 <__svfscanf_r+0x8c>
    65d4:	800d883a 	mov	r6,r16
    65d8:	30800007 	ldb	r2,0(r6)
    65dc:	34000044 	addi	r16,r6,1
    65e0:	d8809b15 	stw	r2,620(sp)
    65e4:	103fdc1e 	bne	r2,zero,6558 <__svfscanf_r+0x64>
    65e8:	d8809e17 	ldw	r2,632(sp)
    65ec:	dfc0b317 	ldw	ra,716(sp)
    65f0:	df00b217 	ldw	fp,712(sp)
    65f4:	ddc0b117 	ldw	r23,708(sp)
    65f8:	dd80b017 	ldw	r22,704(sp)
    65fc:	dd40af17 	ldw	r21,700(sp)
    6600:	dd00ae17 	ldw	r20,696(sp)
    6604:	dcc0ad17 	ldw	r19,692(sp)
    6608:	dc80ac17 	ldw	r18,688(sp)
    660c:	dc40ab17 	ldw	r17,684(sp)
    6610:	dc00aa17 	ldw	r16,680(sp)
    6614:	dec0b404 	addi	sp,sp,720
    6618:	f800283a 	ret
    661c:	00c00944 	movi	r3,37
    6620:	10c00e26 	beq	r2,r3,665c <__svfscanf_r+0x168>
    6624:	98800117 	ldw	r2,4(r19)
    6628:	0080e40e 	bge	zero,r2,69bc <__svfscanf_r+0x4c8>
    662c:	98800017 	ldw	r2,0(r19)
    6630:	80ffffc7 	ldb	r3,-1(r16)
    6634:	11000003 	ldbu	r4,0(r2)
    6638:	20ffeb1e 	bne	r4,r3,65e8 <__svfscanf_r+0xf4>
    663c:	98c00117 	ldw	r3,4(r19)
    6640:	10800044 	addi	r2,r2,1
    6644:	98800015 	stw	r2,0(r19)
    6648:	18bfffc4 	addi	r2,r3,-1
    664c:	98800115 	stw	r2,4(r19)
    6650:	a5000044 	addi	r20,r20,1
    6654:	800d883a 	mov	r6,r16
    6658:	003fdf06 	br	65d8 <__svfscanf_r+0xe4>
    665c:	0039883a 	mov	fp,zero
    6660:	35c00043 	ldbu	r23,1(r6)
    6664:	002d883a 	mov	r22,zero
    6668:	00c01e04 	movi	r3,120
    666c:	01801b04 	movi	r6,108
    6670:	e009883a 	mov	r4,fp
    6674:	b8803fcc 	andi	r2,r23,255
    6678:	87000044 	addi	fp,r16,1
    667c:	18804f2e 	bgeu	r3,r2,67bc <__svfscanf_r+0x2c8>
    6680:	bdc03fcc 	andi	r23,r23,255
    6684:	bdc0201c 	xori	r23,r23,128
    6688:	bdffe004 	addi	r23,r23,-128
    668c:	adeb883a 	add	r21,r21,r23
    6690:	a8800003 	ldbu	r2,0(r21)
    6694:	df009d15 	stw	fp,628(sp)
    6698:	2039883a 	mov	fp,r4
    669c:	1080004c 	andi	r2,r2,1
    66a0:	1002d926 	beq	r2,zero,7208 <__svfscanf_r+0xd14>
    66a4:	b5800054 	ori	r22,r22,1
    66a8:	00800074 	movhi	r2,1
    66ac:	10b46e04 	addi	r2,r2,-11848
    66b0:	00c00284 	movi	r3,10
    66b4:	d880a015 	stw	r2,640(sp)
    66b8:	d8c09f15 	stw	r3,636(sp)
    66bc:	040000c4 	movi	r16,3
    66c0:	98800117 	ldw	r2,4(r19)
    66c4:	0081bd0e 	bge	zero,r2,6dbc <__svfscanf_r+0x8c8>
    66c8:	b080100c 	andi	r2,r22,64
    66cc:	1000ce26 	beq	r2,zero,6a08 <__svfscanf_r+0x514>
    66d0:	00800084 	movi	r2,2
    66d4:	80818426 	beq	r16,r2,6ce8 <__svfscanf_r+0x7f4>
    66d8:	1400f716 	blt	r2,r16,6ab8 <__svfscanf_r+0x5c4>
    66dc:	00800044 	movi	r2,1
    66e0:	8080dc26 	beq	r16,r2,6a54 <__svfscanf_r+0x560>
    66e4:	e000011e 	bne	fp,zero,66ec <__svfscanf_r+0x1f8>
    66e8:	07000044 	movi	fp,1
    66ec:	b080004c 	andi	r2,r22,1
    66f0:	10022826 	beq	r2,zero,6f94 <__svfscanf_r+0xaa0>
    66f4:	b5c0040c 	andi	r23,r22,16
    66f8:	b804601e 	bne	r23,zero,787c <__svfscanf_r+0x1388>
    66fc:	d8c09c17 	ldw	r3,624(sp)
    6700:	1d800017 	ldw	r22,0(r3)
    6704:	18c00104 	addi	r3,r3,4
    6708:	d8c09c15 	stw	r3,624(sp)
    670c:	0021883a 	mov	r16,zero
    6710:	dd409904 	addi	r21,sp,612
    6714:	01000074 	movhi	r4,1
    6718:	211ab904 	addi	r4,r4,27364
    671c:	20800017 	ldw	r2,0(r4)
    6720:	8080aa26 	beq	r16,r2,69cc <__svfscanf_r+0x4d8>
    6724:	98800017 	ldw	r2,0(r19)
    6728:	9a000117 	ldw	r8,4(r19)
    672c:	d9400104 	addi	r5,sp,4
    6730:	11c00003 	ldbu	r7,0(r2)
    6734:	423fffc4 	addi	r8,r8,-1
    6738:	10800044 	addi	r2,r2,1
    673c:	2c07883a 	add	r3,r5,r16
    6740:	a809883a 	mov	r4,r21
    6744:	000b883a 	mov	r5,zero
    6748:	01800204 	movi	r6,8
    674c:	9a000115 	stw	r8,4(r19)
    6750:	98800015 	stw	r2,0(r19)
    6754:	19c00005 	stb	r7,0(r3)
    6758:	84000044 	addi	r16,r16,1
    675c:	0003fa00 	call	3fa0 <memset>
    6760:	8809883a 	mov	r4,r17
    6764:	dd400015 	stw	r21,0(sp)
    6768:	b00b883a 	mov	r5,r22
    676c:	d9800104 	addi	r6,sp,4
    6770:	800f883a 	mov	r7,r16
    6774:	0009e780 	call	9e78 <_mbrtowc_r>
    6778:	00ffffc4 	movi	r3,-1
    677c:	10c09326 	beq	r2,r3,69cc <__svfscanf_r+0x4d8>
    6780:	1003281e 	bne	r2,zero,7424 <__svfscanf_r+0xf30>
    6784:	b800011e 	bne	r23,zero,678c <__svfscanf_r+0x298>
    6788:	b0000015 	stw	zero,0(r22)
    678c:	a429883a 	add	r20,r20,r16
    6790:	e73fffc4 	addi	fp,fp,-1
    6794:	b803281e 	bne	r23,zero,7438 <__svfscanf_r+0xf44>
    6798:	b5800104 	addi	r22,r22,4
    679c:	0021883a 	mov	r16,zero
    67a0:	98800117 	ldw	r2,4(r19)
    67a4:	00820b0e 	bge	zero,r2,6fd4 <__svfscanf_r+0xae0>
    67a8:	e03fda1e 	bne	fp,zero,6714 <__svfscanf_r+0x220>
    67ac:	b8012226 	beq	r23,zero,6c38 <__svfscanf_r+0x744>
    67b0:	dc009d17 	ldw	r16,628(sp)
    67b4:	800d883a 	mov	r6,r16
    67b8:	003f8706 	br	65d8 <__svfscanf_r+0xe4>
    67bc:	1085883a 	add	r2,r2,r2
    67c0:	1085883a 	add	r2,r2,r2
    67c4:	01400034 	movhi	r5,0
    67c8:	2959f604 	addi	r5,r5,26584
    67cc:	1145883a 	add	r2,r2,r5
    67d0:	10800017 	ldw	r2,0(r2)
    67d4:	1000683a 	jmp	r2
    67d8:	000069ec 	andhi	zero,zero,423
    67dc:	00006680 	call	668 <encode_image+0x194>
    67e0:	00006680 	call	668 <encode_image+0x194>
    67e4:	00006680 	call	668 <encode_image+0x194>
    67e8:	00006680 	call	668 <encode_image+0x194>
    67ec:	00006680 	call	668 <encode_image+0x194>
    67f0:	00006680 	call	668 <encode_image+0x194>
    67f4:	00006680 	call	668 <encode_image+0x194>
    67f8:	00006680 	call	668 <encode_image+0x194>
    67fc:	00006680 	call	668 <encode_image+0x194>
    6800:	00006680 	call	668 <encode_image+0x194>
    6804:	00006680 	call	668 <encode_image+0x194>
    6808:	00006680 	call	668 <encode_image+0x194>
    680c:	00006680 	call	668 <encode_image+0x194>
    6810:	00006680 	call	668 <encode_image+0x194>
    6814:	00006680 	call	668 <encode_image+0x194>
    6818:	00006680 	call	668 <encode_image+0x194>
    681c:	00006680 	call	668 <encode_image+0x194>
    6820:	00006680 	call	668 <encode_image+0x194>
    6824:	00006680 	call	668 <encode_image+0x194>
    6828:	00006680 	call	668 <encode_image+0x194>
    682c:	00006680 	call	668 <encode_image+0x194>
    6830:	00006680 	call	668 <encode_image+0x194>
    6834:	00006680 	call	668 <encode_image+0x194>
    6838:	00006680 	call	668 <encode_image+0x194>
    683c:	00006680 	call	668 <encode_image+0x194>
    6840:	00006680 	call	668 <encode_image+0x194>
    6844:	00006680 	call	668 <encode_image+0x194>
    6848:	00006680 	call	668 <encode_image+0x194>
    684c:	00006680 	call	668 <encode_image+0x194>
    6850:	00006680 	call	668 <encode_image+0x194>
    6854:	00006680 	call	668 <encode_image+0x194>
    6858:	00006680 	call	668 <encode_image+0x194>
    685c:	00006680 	call	668 <encode_image+0x194>
    6860:	00006680 	call	668 <encode_image+0x194>
    6864:	00006680 	call	668 <encode_image+0x194>
    6868:	00006680 	call	668 <encode_image+0x194>
    686c:	000072bc 	xorhi	zero,zero,458
    6870:	00006680 	call	668 <encode_image+0x194>
    6874:	00006680 	call	668 <encode_image+0x194>
    6878:	00006680 	call	668 <encode_image+0x194>
    687c:	00006680 	call	668 <encode_image+0x194>
    6880:	000072c8 	cmpgei	zero,zero,459
    6884:	00006680 	call	668 <encode_image+0x194>
    6888:	00006680 	call	668 <encode_image+0x194>
    688c:	00006680 	call	668 <encode_image+0x194>
    6890:	00006680 	call	668 <encode_image+0x194>
    6894:	00006680 	call	668 <encode_image+0x194>
    6898:	00007258 	cmpnei	zero,zero,457
    689c:	00007258 	cmpnei	zero,zero,457
    68a0:	00007258 	cmpnei	zero,zero,457
    68a4:	00007258 	cmpnei	zero,zero,457
    68a8:	00007258 	cmpnei	zero,zero,457
    68ac:	00007258 	cmpnei	zero,zero,457
    68b0:	00007258 	cmpnei	zero,zero,457
    68b4:	00007258 	cmpnei	zero,zero,457
    68b8:	00007258 	cmpnei	zero,zero,457
    68bc:	00007258 	cmpnei	zero,zero,457
    68c0:	00006680 	call	668 <encode_image+0x194>
    68c4:	00006680 	call	668 <encode_image+0x194>
    68c8:	00006680 	call	668 <encode_image+0x194>
    68cc:	00006680 	call	668 <encode_image+0x194>
    68d0:	00006680 	call	668 <encode_image+0x194>
    68d4:	00006680 	call	668 <encode_image+0x194>
    68d8:	00006680 	call	668 <encode_image+0x194>
    68dc:	00006680 	call	668 <encode_image+0x194>
    68e0:	00006680 	call	668 <encode_image+0x194>
    68e4:	00006680 	call	668 <encode_image+0x194>
    68e8:	00007290 	cmplti	zero,zero,458
    68ec:	0000729c 	xori	zero,zero,458
    68f0:	00006680 	call	668 <encode_image+0x194>
    68f4:	0000729c 	xori	zero,zero,458
    68f8:	00006680 	call	668 <encode_image+0x194>
    68fc:	00006680 	call	668 <encode_image+0x194>
    6900:	00006680 	call	668 <encode_image+0x194>
    6904:	00006680 	call	668 <encode_image+0x194>
    6908:	000072ac 	andhi	zero,zero,458
    690c:	00006680 	call	668 <encode_image+0x194>
    6910:	00006680 	call	668 <encode_image+0x194>
    6914:	000072d8 	cmpnei	zero,zero,459
    6918:	00006680 	call	668 <encode_image+0x194>
    691c:	00006680 	call	668 <encode_image+0x194>
    6920:	00006680 	call	668 <encode_image+0x194>
    6924:	00006680 	call	668 <encode_image+0x194>
    6928:	00006680 	call	668 <encode_image+0x194>
    692c:	00006680 	call	668 <encode_image+0x194>
    6930:	00006680 	call	668 <encode_image+0x194>
    6934:	00006680 	call	668 <encode_image+0x194>
    6938:	00007300 	call	730 <encodeMCU+0x24>
    693c:	00006680 	call	668 <encode_image+0x194>
    6940:	00006680 	call	668 <encode_image+0x194>
    6944:	00007328 	cmpgeui	zero,zero,460
    6948:	00006680 	call	668 <encode_image+0x194>
    694c:	00006680 	call	668 <encode_image+0x194>
    6950:	00006680 	call	668 <encode_image+0x194>
    6954:	00006680 	call	668 <encode_image+0x194>
    6958:	00006680 	call	668 <encode_image+0x194>
    695c:	00006680 	call	668 <encode_image+0x194>
    6960:	00006680 	call	668 <encode_image+0x194>
    6964:	0000734c 	andi	zero,zero,461
    6968:	00007360 	cmpeqi	zero,zero,461
    696c:	0000729c 	xori	zero,zero,458
    6970:	0000729c 	xori	zero,zero,458
    6974:	0000729c 	xori	zero,zero,458
    6978:	0000736c 	andhi	zero,zero,461
    697c:	0000737c 	xorhi	zero,zero,461
    6980:	00006680 	call	668 <encode_image+0x194>
    6984:	00006680 	call	668 <encode_image+0x194>
    6988:	0000739c 	xori	zero,zero,462
    698c:	00006680 	call	668 <encode_image+0x194>
    6990:	000073bc 	xorhi	zero,zero,462
    6994:	000073f0 	cmpltui	zero,zero,463
    6998:	000073fc 	xorhi	zero,zero,463
    699c:	00006680 	call	668 <encode_image+0x194>
    69a0:	00006680 	call	668 <encode_image+0x194>
    69a4:	00007224 	muli	zero,zero,456
    69a8:	00006680 	call	668 <encode_image+0x194>
    69ac:	00007234 	movhi	zero,456
    69b0:	00006680 	call	668 <encode_image+0x194>
    69b4:	00006680 	call	668 <encode_image+0x194>
    69b8:	00007300 	call	730 <encodeMCU+0x24>
    69bc:	8809883a 	mov	r4,r17
    69c0:	980b883a 	mov	r5,r19
    69c4:	00042040 	call	4204 <__srefill_r>
    69c8:	103f1826 	beq	r2,zero,662c <__svfscanf_r+0x138>
    69cc:	d8809e17 	ldw	r2,632(sp)
    69d0:	10000626 	beq	r2,zero,69ec <__svfscanf_r+0x4f8>
    69d4:	9880030b 	ldhu	r2,12(r19)
    69d8:	1080100c 	andi	r2,r2,64
    69dc:	10bfffcc 	andi	r2,r2,65535
    69e0:	10a0001c 	xori	r2,r2,32768
    69e4:	10a00004 	addi	r2,r2,-32768
    69e8:	103eff26 	beq	r2,zero,65e8 <__svfscanf_r+0xf4>
    69ec:	00bfffc4 	movi	r2,-1
    69f0:	d8809e15 	stw	r2,632(sp)
    69f4:	003efc06 	br	65e8 <__svfscanf_r+0xf4>
    69f8:	8809883a 	mov	r4,r17
    69fc:	980b883a 	mov	r5,r19
    6a00:	00042040 	call	4204 <__srefill_r>
    6a04:	103ff11e 	bne	r2,zero,69cc <__svfscanf_r+0x4d8>
    6a08:	91400017 	ldw	r5,0(r18)
    6a0c:	98800017 	ldw	r2,0(r19)
    6a10:	00000206 	br	6a1c <__svfscanf_r+0x528>
    6a14:	10800044 	addi	r2,r2,1
    6a18:	98800015 	stw	r2,0(r19)
    6a1c:	10c00003 	ldbu	r3,0(r2)
    6a20:	28c7883a 	add	r3,r5,r3
    6a24:	18c00003 	ldbu	r3,0(r3)
    6a28:	18c0020c 	andi	r3,r3,8
    6a2c:	18c03fcc 	andi	r3,r3,255
    6a30:	18c0201c 	xori	r3,r3,128
    6a34:	18ffe004 	addi	r3,r3,-128
    6a38:	183f2526 	beq	r3,zero,66d0 <__svfscanf_r+0x1dc>
    6a3c:	98c00117 	ldw	r3,4(r19)
    6a40:	a5000044 	addi	r20,r20,1
    6a44:	18ffffc4 	addi	r3,r3,-1
    6a48:	98c00115 	stw	r3,4(r19)
    6a4c:	00fff116 	blt	zero,r3,6a14 <__svfscanf_r+0x520>
    6a50:	003fe906 	br	69f8 <__svfscanf_r+0x504>
    6a54:	e000011e 	bne	fp,zero,6a5c <__svfscanf_r+0x568>
    6a58:	073fffc4 	movi	fp,-1
    6a5c:	b580040c 	andi	r22,r22,16
    6a60:	b0016826 	beq	r22,zero,7004 <__svfscanf_r+0xb10>
    6a64:	98800017 	ldw	r2,0(r19)
    6a68:	0021883a 	mov	r16,zero
    6a6c:	dd805884 	addi	r22,sp,354
    6a70:	10c00003 	ldbu	r3,0(r2)
    6a74:	b0c7883a 	add	r3,r22,r3
    6a78:	18c00007 	ldb	r3,0(r3)
    6a7c:	18039726 	beq	r3,zero,78dc <__svfscanf_r+0x13e8>
    6a80:	98c00117 	ldw	r3,4(r19)
    6a84:	10800044 	addi	r2,r2,1
    6a88:	84000044 	addi	r16,r16,1
    6a8c:	18ffffc4 	addi	r3,r3,-1
    6a90:	98c00115 	stw	r3,4(r19)
    6a94:	98800015 	stw	r2,0(r19)
    6a98:	e4008f26 	beq	fp,r16,6cd8 <__svfscanf_r+0x7e4>
    6a9c:	00fff416 	blt	zero,r3,6a70 <__svfscanf_r+0x57c>
    6aa0:	8809883a 	mov	r4,r17
    6aa4:	980b883a 	mov	r5,r19
    6aa8:	00042040 	call	4204 <__srefill_r>
    6aac:	10008a1e 	bne	r2,zero,6cd8 <__svfscanf_r+0x7e4>
    6ab0:	98800017 	ldw	r2,0(r19)
    6ab4:	003fee06 	br	6a70 <__svfscanf_r+0x57c>
    6ab8:	008000c4 	movi	r2,3
    6abc:	80806426 	beq	r16,r2,6c50 <__svfscanf_r+0x75c>
    6ac0:	00800104 	movi	r2,4
    6ac4:	80bf071e 	bne	r16,r2,66e4 <__svfscanf_r+0x1f0>
    6ac8:	e0bfffc4 	addi	r2,fp,-1
    6acc:	01005704 	movi	r4,348
    6ad0:	20814736 	bltu	r4,r2,6ff0 <__svfscanf_r+0xafc>
    6ad4:	0017883a 	mov	r11,zero
    6ad8:	b581e014 	ori	r22,r22,1920
    6adc:	0021883a 	mov	r16,zero
    6ae0:	d800a115 	stw	zero,644(sp)
    6ae4:	d800a315 	stw	zero,652(sp)
    6ae8:	002b883a 	mov	r21,zero
    6aec:	d800a215 	stw	zero,648(sp)
    6af0:	ddc00104 	addi	r23,sp,4
    6af4:	000d883a 	mov	r6,zero
    6af8:	00c01384 	movi	r3,78
    6afc:	03810004 	movi	r14,1024
    6b00:	033e1fc4 	movi	r12,-1921
    6b04:	03ff5fc4 	movi	r15,-641
    6b08:	99c00017 	ldw	r7,0(r19)
    6b0c:	39400003 	ldbu	r5,0(r7)
    6b10:	28bff544 	addi	r2,r5,-43
    6b14:	10803fcc 	andi	r2,r2,255
    6b18:	1880c82e 	bgeu	r3,r2,6e3c <__svfscanf_r+0x948>
    6b1c:	a8000226 	beq	r21,zero,6b28 <__svfscanf_r+0x634>
    6b20:	00bfbfc4 	movi	r2,-257
    6b24:	b0ac703a 	and	r22,r22,r2
    6b28:	31bfffc4 	addi	r6,r6,-1
    6b2c:	00800044 	movi	r2,1
    6b30:	1184092e 	bgeu	r2,r6,7b58 <__svfscanf_r+0x1664>
    6b34:	80803fcc 	andi	r2,r16,255
    6b38:	1080201c 	xori	r2,r2,128
    6b3c:	10bfe004 	addi	r2,r2,-128
    6b40:	10ffffc4 	addi	r3,r2,-1
    6b44:	01000184 	movi	r4,6
    6b48:	20c01036 	bltu	r4,r3,6b8c <__svfscanf_r+0x698>
    6b4c:	00c00084 	movi	r3,2
    6b50:	1883f50e 	bge	r3,r2,7b28 <__svfscanf_r+0x1634>
    6b54:	00c000c4 	movi	r3,3
    6b58:	10c00c26 	beq	r2,r3,6b8c <__svfscanf_r+0x698>
    6b5c:	843fff04 	addi	r16,r16,-4
    6b60:	84003fcc 	andi	r16,r16,255
    6b64:	0438303a 	nor	fp,zero,r16
    6b68:	bf39883a 	add	fp,r23,fp
    6b6c:	bdffffc4 	addi	r23,r23,-1
    6b70:	b9400007 	ldb	r5,0(r23)
    6b74:	8809883a 	mov	r4,r17
    6b78:	980d883a 	mov	r6,r19
    6b7c:	000ded00 	call	ded0 <_ungetc_r>
    6b80:	bf3ffa1e 	bne	r23,fp,6b6c <__svfscanf_r+0x678>
    6b84:	a27fffc4 	addi	r9,r20,-1
    6b88:	4c29c83a 	sub	r20,r9,r16
    6b8c:	b080400c 	andi	r2,r22,256
    6b90:	10001326 	beq	r2,zero,6be0 <__svfscanf_r+0x6ec>
    6b94:	b081000c 	andi	r2,r22,1024
    6b98:	1003d21e 	bne	r2,zero,7ae4 <__svfscanf_r+0x15f0>
    6b9c:	b97fffc7 	ldb	r5,-1(r23)
    6ba0:	00801944 	movi	r2,101
    6ba4:	bc3fffc4 	addi	r16,r23,-1
    6ba8:	a53fffc4 	addi	r20,r20,-1
    6bac:	28800826 	beq	r5,r2,6bd0 <__svfscanf_r+0x6dc>
    6bb0:	00801144 	movi	r2,69
    6bb4:	28800626 	beq	r5,r2,6bd0 <__svfscanf_r+0x6dc>
    6bb8:	8809883a 	mov	r4,r17
    6bbc:	980d883a 	mov	r6,r19
    6bc0:	000ded00 	call	ded0 <_ungetc_r>
    6bc4:	b97fff87 	ldb	r5,-2(r23)
    6bc8:	bc3fff84 	addi	r16,r23,-2
    6bcc:	a53fffc4 	addi	r20,r20,-1
    6bd0:	8809883a 	mov	r4,r17
    6bd4:	980d883a 	mov	r6,r19
    6bd8:	000ded00 	call	ded0 <_ungetc_r>
    6bdc:	802f883a 	mov	r23,r16
    6be0:	b080040c 	andi	r2,r22,16
    6be4:	103ef21e 	bne	r2,zero,67b0 <__svfscanf_r+0x2bc>
    6be8:	b8000005 	stb	zero,0(r23)
    6bec:	b0c1800c 	andi	r3,r22,1536
    6bf0:	00810004 	movi	r2,1024
    6bf4:	18837726 	beq	r3,r2,79d4 <__svfscanf_r+0x14e0>
    6bf8:	d8c0a317 	ldw	r3,652(sp)
    6bfc:	1803601e 	bne	r3,zero,7980 <__svfscanf_r+0x148c>
    6c00:	8809883a 	mov	r4,r17
    6c04:	d9400104 	addi	r5,sp,4
    6c08:	000d883a 	mov	r6,zero
    6c0c:	000bb340 	call	bb34 <_strtod_r>
    6c10:	102b883a 	mov	r21,r2
    6c14:	b080004c 	andi	r2,r22,1
    6c18:	182f883a 	mov	r23,r3
    6c1c:	10031f26 	beq	r2,zero,789c <__svfscanf_r+0x13a8>
    6c20:	d9409c17 	ldw	r5,624(sp)
    6c24:	28800017 	ldw	r2,0(r5)
    6c28:	29400104 	addi	r5,r5,4
    6c2c:	d9409c15 	stw	r5,624(sp)
    6c30:	15400015 	stw	r21,0(r2)
    6c34:	10c00115 	stw	r3,4(r2)
    6c38:	d8809e17 	ldw	r2,632(sp)
    6c3c:	dc009d17 	ldw	r16,628(sp)
    6c40:	10800044 	addi	r2,r2,1
    6c44:	d8809e15 	stw	r2,632(sp)
    6c48:	800d883a 	mov	r6,r16
    6c4c:	003e6206 	br	65d8 <__svfscanf_r+0xe4>
    6c50:	e0bfffc4 	addi	r2,fp,-1
    6c54:	01005704 	movi	r4,348
    6c58:	2080e82e 	bgeu	r4,r2,6ffc <__svfscanf_r+0xb08>
    6c5c:	e0ffa8c4 	addi	r3,fp,-349
    6c60:	07005744 	movi	fp,349
    6c64:	da409f17 	ldw	r9,636(sp)
    6c68:	b5836014 	ori	r22,r22,3456
    6c6c:	0021883a 	mov	r16,zero
    6c70:	dd400104 	addi	r21,sp,4
    6c74:	05c01344 	movi	r23,77
    6c78:	01c08004 	movi	r7,512
    6c7c:	01bf7fc4 	movi	r6,-513
    6c80:	9a000017 	ldw	r8,0(r19)
    6c84:	41400003 	ldbu	r5,0(r8)
    6c88:	28bff544 	addi	r2,r5,-43
    6c8c:	10803fcc 	andi	r2,r2,255
    6c90:	b881eb2e 	bgeu	r23,r2,7440 <__svfscanf_r+0xf4c>
    6c94:	da409f15 	stw	r9,636(sp)
    6c98:	b080400c 	andi	r2,r22,256
    6c9c:	10000926 	beq	r2,zero,6cc4 <__svfscanf_r+0x7d0>
    6ca0:	d9400104 	addi	r5,sp,4
    6ca4:	2d40052e 	bgeu	r5,r21,6cbc <__svfscanf_r+0x7c8>
    6ca8:	a97fffc7 	ldb	r5,-1(r21)
    6cac:	8809883a 	mov	r4,r17
    6cb0:	980d883a 	mov	r6,r19
    6cb4:	ad7fffc4 	addi	r21,r21,-1
    6cb8:	000ded00 	call	ded0 <_ungetc_r>
    6cbc:	d8800104 	addi	r2,sp,4
    6cc0:	157e4926 	beq	r2,r21,65e8 <__svfscanf_r+0xf4>
    6cc4:	b080040c 	andi	r2,r22,16
    6cc8:	1002ac26 	beq	r2,zero,777c <__svfscanf_r+0x1288>
    6ccc:	d8c00104 	addi	r3,sp,4
    6cd0:	a8ebc83a 	sub	r21,r21,r3
    6cd4:	ac21883a 	add	r16,r21,r16
    6cd8:	a429883a 	add	r20,r20,r16
    6cdc:	dc009d17 	ldw	r16,628(sp)
    6ce0:	800d883a 	mov	r6,r16
    6ce4:	003e3c06 	br	65d8 <__svfscanf_r+0xe4>
    6ce8:	e000011e 	bne	fp,zero,6cf0 <__svfscanf_r+0x7fc>
    6cec:	073fffc4 	movi	fp,-1
    6cf0:	b080004c 	andi	r2,r22,1
    6cf4:	b580040c 	andi	r22,r22,16
    6cf8:	10003526 	beq	r2,zero,6dd0 <__svfscanf_r+0x8dc>
    6cfc:	b002dd1e 	bne	r22,zero,7874 <__svfscanf_r+0x1380>
    6d00:	d8c09c17 	ldw	r3,624(sp)
    6d04:	1d400017 	ldw	r21,0(r3)
    6d08:	18c00104 	addi	r3,r3,4
    6d0c:	d8c09c15 	stw	r3,624(sp)
    6d10:	0021883a 	mov	r16,zero
    6d14:	ddc09904 	addi	r23,sp,612
    6d18:	98c00017 	ldw	r3,0(r19)
    6d1c:	91400017 	ldw	r5,0(r18)
    6d20:	18800003 	ldbu	r2,0(r3)
    6d24:	11003fcc 	andi	r4,r2,255
    6d28:	2909883a 	add	r4,r5,r4
    6d2c:	21000003 	ldbu	r4,0(r4)
    6d30:	2100020c 	andi	r4,r4,8
    6d34:	21003fcc 	andi	r4,r4,255
    6d38:	2100201c 	xori	r4,r4,128
    6d3c:	213fe004 	addi	r4,r4,-128
    6d40:	2002731e 	bne	r4,zero,7710 <__svfscanf_r+0x121c>
    6d44:	e0027226 	beq	fp,zero,7710 <__svfscanf_r+0x121c>
    6d48:	01400074 	movhi	r5,1
    6d4c:	295ab904 	addi	r5,r5,27364
    6d50:	29000017 	ldw	r4,0(r5)
    6d54:	813f1d26 	beq	r16,r4,69cc <__svfscanf_r+0x4d8>
    6d58:	9a000117 	ldw	r8,4(r19)
    6d5c:	18c00044 	addi	r3,r3,1
    6d60:	d9000104 	addi	r4,sp,4
    6d64:	423fffc4 	addi	r8,r8,-1
    6d68:	240f883a 	add	r7,r4,r16
    6d6c:	000b883a 	mov	r5,zero
    6d70:	b809883a 	mov	r4,r23
    6d74:	01800204 	movi	r6,8
    6d78:	9a000115 	stw	r8,4(r19)
    6d7c:	98c00015 	stw	r3,0(r19)
    6d80:	38800005 	stb	r2,0(r7)
    6d84:	84000044 	addi	r16,r16,1
    6d88:	0003fa00 	call	3fa0 <memset>
    6d8c:	a80b883a 	mov	r5,r21
    6d90:	8809883a 	mov	r4,r17
    6d94:	ddc00015 	stw	r23,0(sp)
    6d98:	d9800104 	addi	r6,sp,4
    6d9c:	800f883a 	mov	r7,r16
    6da0:	0009e780 	call	9e78 <_mbrtowc_r>
    6da4:	017fffc4 	movi	r5,-1
    6da8:	117f0826 	beq	r2,r5,69cc <__svfscanf_r+0x4d8>
    6dac:	1002de1e 	bne	r2,zero,7928 <__svfscanf_r+0x1434>
    6db0:	a8000015 	stw	zero,0(r21)
    6db4:	0009883a 	mov	r4,zero
    6db8:	0002de06 	br	7934 <__svfscanf_r+0x1440>
    6dbc:	8809883a 	mov	r4,r17
    6dc0:	980b883a 	mov	r5,r19
    6dc4:	00042040 	call	4204 <__srefill_r>
    6dc8:	103e3f26 	beq	r2,zero,66c8 <__svfscanf_r+0x1d4>
    6dcc:	003eff06 	br	69cc <__svfscanf_r+0x4d8>
    6dd0:	b0027e26 	beq	r22,zero,77cc <__svfscanf_r+0x12d8>
    6dd4:	91400017 	ldw	r5,0(r18)
    6dd8:	98800017 	ldw	r2,0(r19)
    6ddc:	0021883a 	mov	r16,zero
    6de0:	10c00003 	ldbu	r3,0(r2)
    6de4:	28c7883a 	add	r3,r5,r3
    6de8:	18c00003 	ldbu	r3,0(r3)
    6dec:	18c0020c 	andi	r3,r3,8
    6df0:	18c03fcc 	andi	r3,r3,255
    6df4:	18c0201c 	xori	r3,r3,128
    6df8:	18ffe004 	addi	r3,r3,-128
    6dfc:	183fb61e 	bne	r3,zero,6cd8 <__svfscanf_r+0x7e4>
    6e00:	98c00117 	ldw	r3,4(r19)
    6e04:	10800044 	addi	r2,r2,1
    6e08:	84000044 	addi	r16,r16,1
    6e0c:	18ffffc4 	addi	r3,r3,-1
    6e10:	98c00115 	stw	r3,4(r19)
    6e14:	98800015 	stw	r2,0(r19)
    6e18:	e43faf26 	beq	fp,r16,6cd8 <__svfscanf_r+0x7e4>
    6e1c:	00fff016 	blt	zero,r3,6de0 <__svfscanf_r+0x8ec>
    6e20:	8809883a 	mov	r4,r17
    6e24:	980b883a 	mov	r5,r19
    6e28:	00042040 	call	4204 <__srefill_r>
    6e2c:	103faa1e 	bne	r2,zero,6cd8 <__svfscanf_r+0x7e4>
    6e30:	91400017 	ldw	r5,0(r18)
    6e34:	98800017 	ldw	r2,0(r19)
    6e38:	003fe906 	br	6de0 <__svfscanf_r+0x8ec>
    6e3c:	1085883a 	add	r2,r2,r2
    6e40:	1085883a 	add	r2,r2,r2
    6e44:	01000034 	movhi	r4,0
    6e48:	211b9604 	addi	r4,r4,28248
    6e4c:	1105883a 	add	r2,r2,r4
    6e50:	10800017 	ldw	r2,0(r2)
    6e54:	1000683a 	jmp	r2
    6e58:	000070f8 	rdprs	zero,zero,451
    6e5c:	00006b1c 	xori	zero,zero,428
    6e60:	000070f8 	rdprs	zero,zero,451
    6e64:	000070e4 	muli	zero,zero,451
    6e68:	00006b1c 	xori	zero,zero,428
    6e6c:	000070c0 	call	70c <encodeMCU>
    6e70:	00007074 	movhi	zero,449
    6e74:	00007074 	movhi	zero,449
    6e78:	00007074 	movhi	zero,449
    6e7c:	00007074 	movhi	zero,449
    6e80:	00007074 	movhi	zero,449
    6e84:	00007074 	movhi	zero,449
    6e88:	00007074 	movhi	zero,449
    6e8c:	00007074 	movhi	zero,449
    6e90:	00007074 	movhi	zero,449
    6e94:	00006b1c 	xori	zero,zero,428
    6e98:	00006b1c 	xori	zero,zero,428
    6e9c:	00006b1c 	xori	zero,zero,428
    6ea0:	00006b1c 	xori	zero,zero,428
    6ea4:	00006b1c 	xori	zero,zero,428
    6ea8:	00006b1c 	xori	zero,zero,428
    6eac:	00006b1c 	xori	zero,zero,428
    6eb0:	000071dc 	xori	zero,zero,455
    6eb4:	00006b1c 	xori	zero,zero,428
    6eb8:	00006b1c 	xori	zero,zero,428
    6ebc:	00006b1c 	xori	zero,zero,428
    6ec0:	000071a0 	cmpeqi	zero,zero,454
    6ec4:	000071ec 	andhi	zero,zero,455
    6ec8:	00006b1c 	xori	zero,zero,428
    6ecc:	00006b1c 	xori	zero,zero,428
    6ed0:	00007178 	rdprs	zero,zero,453
    6ed4:	00006b1c 	xori	zero,zero,428
    6ed8:	00006b1c 	xori	zero,zero,428
    6edc:	00006b1c 	xori	zero,zero,428
    6ee0:	00006b1c 	xori	zero,zero,428
    6ee4:	00007144 	movi	zero,453
    6ee8:	00006b1c 	xori	zero,zero,428
    6eec:	00006b1c 	xori	zero,zero,428
    6ef0:	00006b1c 	xori	zero,zero,428
    6ef4:	00006b1c 	xori	zero,zero,428
    6ef8:	00006b1c 	xori	zero,zero,428
    6efc:	00007128 	cmpgeui	zero,zero,452
    6f00:	00006b1c 	xori	zero,zero,428
    6f04:	00006b1c 	xori	zero,zero,428
    6f08:	00006b1c 	xori	zero,zero,428
    6f0c:	00006b1c 	xori	zero,zero,428
    6f10:	0000710c 	andi	zero,zero,452
    6f14:	00006b1c 	xori	zero,zero,428
    6f18:	00006b1c 	xori	zero,zero,428
    6f1c:	00006b1c 	xori	zero,zero,428
    6f20:	00006b1c 	xori	zero,zero,428
    6f24:	00006b1c 	xori	zero,zero,428
    6f28:	00006b1c 	xori	zero,zero,428
    6f2c:	00006b1c 	xori	zero,zero,428
    6f30:	000071dc 	xori	zero,zero,455
    6f34:	00006b1c 	xori	zero,zero,428
    6f38:	00006b1c 	xori	zero,zero,428
    6f3c:	00006b1c 	xori	zero,zero,428
    6f40:	000071a0 	cmpeqi	zero,zero,454
    6f44:	000071ec 	andhi	zero,zero,455
    6f48:	00006b1c 	xori	zero,zero,428
    6f4c:	00006b1c 	xori	zero,zero,428
    6f50:	00007178 	rdprs	zero,zero,453
    6f54:	00006b1c 	xori	zero,zero,428
    6f58:	00006b1c 	xori	zero,zero,428
    6f5c:	00006b1c 	xori	zero,zero,428
    6f60:	00006b1c 	xori	zero,zero,428
    6f64:	00007144 	movi	zero,453
    6f68:	00006b1c 	xori	zero,zero,428
    6f6c:	00006b1c 	xori	zero,zero,428
    6f70:	00006b1c 	xori	zero,zero,428
    6f74:	00006b1c 	xori	zero,zero,428
    6f78:	00006b1c 	xori	zero,zero,428
    6f7c:	00007128 	cmpgeui	zero,zero,452
    6f80:	00006b1c 	xori	zero,zero,428
    6f84:	00006b1c 	xori	zero,zero,428
    6f88:	00006b1c 	xori	zero,zero,428
    6f8c:	00006b1c 	xori	zero,zero,428
    6f90:	0000710c 	andi	zero,zero,452
    6f94:	b580040c 	andi	r22,r22,16
    6f98:	b0025226 	beq	r22,zero,78e4 <__svfscanf_r+0x13f0>
    6f9c:	0021883a 	mov	r16,zero
    6fa0:	98800117 	ldw	r2,4(r19)
    6fa4:	17026f0e 	bge	r2,fp,7964 <__svfscanf_r+0x1470>
    6fa8:	98c00017 	ldw	r3,0(r19)
    6fac:	8809883a 	mov	r4,r17
    6fb0:	980b883a 	mov	r5,r19
    6fb4:	1887883a 	add	r3,r3,r2
    6fb8:	98c00015 	stw	r3,0(r19)
    6fbc:	80a1883a 	add	r16,r16,r2
    6fc0:	e0b9c83a 	sub	fp,fp,r2
    6fc4:	00042040 	call	4204 <__srefill_r>
    6fc8:	103ff526 	beq	r2,zero,6fa0 <__svfscanf_r+0xaac>
    6fcc:	803f421e 	bne	r16,zero,6cd8 <__svfscanf_r+0x7e4>
    6fd0:	003e7e06 	br	69cc <__svfscanf_r+0x4d8>
    6fd4:	8809883a 	mov	r4,r17
    6fd8:	980b883a 	mov	r5,r19
    6fdc:	00042040 	call	4204 <__srefill_r>
    6fe0:	103df126 	beq	r2,zero,67a8 <__svfscanf_r+0x2b4>
    6fe4:	803e791e 	bne	r16,zero,69cc <__svfscanf_r+0x4d8>
    6fe8:	b83f1326 	beq	r23,zero,6c38 <__svfscanf_r+0x744>
    6fec:	003df006 	br	67b0 <__svfscanf_r+0x2bc>
    6ff0:	e2ffa8c4 	addi	r11,fp,-349
    6ff4:	07005744 	movi	fp,349
    6ff8:	003eb706 	br	6ad8 <__svfscanf_r+0x5e4>
    6ffc:	0007883a 	mov	r3,zero
    7000:	003f1806 	br	6c64 <__svfscanf_r+0x770>
    7004:	d8c09c17 	ldw	r3,624(sp)
    7008:	98800017 	ldw	r2,0(r19)
    700c:	dd805884 	addi	r22,sp,354
    7010:	1c000017 	ldw	r16,0(r3)
    7014:	1dc00104 	addi	r23,r3,4
    7018:	802b883a 	mov	r21,r16
    701c:	10c00003 	ldbu	r3,0(r2)
    7020:	b0c7883a 	add	r3,r22,r3
    7024:	18c00007 	ldb	r3,0(r3)
    7028:	1801c226 	beq	r3,zero,7734 <__svfscanf_r+0x1240>
    702c:	98c00117 	ldw	r3,4(r19)
    7030:	10800044 	addi	r2,r2,1
    7034:	ad400044 	addi	r21,r21,1
    7038:	18ffffc4 	addi	r3,r3,-1
    703c:	98c00115 	stw	r3,4(r19)
    7040:	10ffffc3 	ldbu	r3,-1(r2)
    7044:	e73fffc4 	addi	fp,fp,-1
    7048:	a8ffffc5 	stb	r3,-1(r21)
    704c:	98800015 	stw	r2,0(r19)
    7050:	e001b826 	beq	fp,zero,7734 <__svfscanf_r+0x1240>
    7054:	98c00117 	ldw	r3,4(r19)
    7058:	00fff016 	blt	zero,r3,701c <__svfscanf_r+0xb28>
    705c:	8809883a 	mov	r4,r17
    7060:	980b883a 	mov	r5,r19
    7064:	00042040 	call	4204 <__srefill_r>
    7068:	1001b11e 	bne	r2,zero,7730 <__svfscanf_r+0x123c>
    706c:	98800017 	ldw	r2,0(r19)
    7070:	003fea06 	br	701c <__svfscanf_r+0xb28>
    7074:	80803fcc 	andi	r2,r16,255
    7078:	1080201c 	xori	r2,r2,128
    707c:	10bfe004 	addi	r2,r2,-128
    7080:	3085883a 	add	r2,r6,r2
    7084:	103ea51e 	bne	r2,zero,6b1c <__svfscanf_r+0x628>
    7088:	00bf9fc4 	movi	r2,-385
    708c:	b0ac703a 	and	r22,r22,r2
    7090:	b9400005 	stb	r5,0(r23)
    7094:	bdc00044 	addi	r23,r23,1
    7098:	98800117 	ldw	r2,4(r19)
    709c:	e73fffc4 	addi	fp,fp,-1
    70a0:	a5000044 	addi	r20,r20,1
    70a4:	10bfffc4 	addi	r2,r2,-1
    70a8:	98800115 	stw	r2,4(r19)
    70ac:	00816d0e 	bge	zero,r2,7664 <__svfscanf_r+0x1170>
    70b0:	39c00044 	addi	r7,r7,1
    70b4:	99c00015 	stw	r7,0(r19)
    70b8:	e03e931e 	bne	fp,zero,6b08 <__svfscanf_r+0x614>
    70bc:	003e9706 	br	6b1c <__svfscanf_r+0x628>
    70c0:	b080400c 	andi	r2,r22,256
    70c4:	103feb26 	beq	r2,zero,7074 <__svfscanf_r+0xb80>
    70c8:	00bfdfc4 	movi	r2,-129
    70cc:	b0ac703a 	and	r22,r22,r2
    70d0:	ad400044 	addi	r21,r21,1
    70d4:	583ff026 	beq	r11,zero,7098 <__svfscanf_r+0xba4>
    70d8:	5affffc4 	addi	r11,r11,-1
    70dc:	e7000044 	addi	fp,fp,1
    70e0:	003fed06 	br	7098 <__svfscanf_r+0xba4>
    70e4:	b080800c 	andi	r2,r22,512
    70e8:	103e8c26 	beq	r2,zero,6b1c <__svfscanf_r+0x628>
    70ec:	b3ec703a 	and	r22,r22,r15
    70f0:	dd40a215 	stw	r21,648(sp)
    70f4:	003fe606 	br	7090 <__svfscanf_r+0xb9c>
    70f8:	b080200c 	andi	r2,r22,128
    70fc:	103e8726 	beq	r2,zero,6b1c <__svfscanf_r+0x628>
    7100:	00bfdfc4 	movi	r2,-129
    7104:	b0ac703a 	and	r22,r22,r2
    7108:	003fe106 	br	7090 <__svfscanf_r+0xb9c>
    710c:	81003fcc 	andi	r4,r16,255
    7110:	2100201c 	xori	r4,r4,128
    7114:	213fe004 	addi	r4,r4,-128
    7118:	008001c4 	movi	r2,7
    711c:	20be7f1e 	bne	r4,r2,6b1c <__svfscanf_r+0x628>
    7120:	04000204 	movi	r16,8
    7124:	003fda06 	br	7090 <__svfscanf_r+0xb9c>
    7128:	81003fcc 	andi	r4,r16,255
    712c:	2100201c 	xori	r4,r4,128
    7130:	213fe004 	addi	r4,r4,-128
    7134:	00800184 	movi	r2,6
    7138:	20be781e 	bne	r4,r2,6b1c <__svfscanf_r+0x628>
    713c:	040001c4 	movi	r16,7
    7140:	003fd306 	br	7090 <__svfscanf_r+0xb9c>
    7144:	3001891e 	bne	r6,zero,776c <__svfscanf_r+0x1278>
    7148:	b101c00c 	andi	r4,r22,1792
    714c:	0081c004 	movi	r2,1792
    7150:	20821d26 	beq	r4,r2,79c8 <__svfscanf_r+0x14d4>
    7154:	80803fcc 	andi	r2,r16,255
    7158:	1080201c 	xori	r2,r2,128
    715c:	10bfe004 	addi	r2,r2,-128
    7160:	01000044 	movi	r4,1
    7164:	11000226 	beq	r2,r4,7170 <__svfscanf_r+0xc7c>
    7168:	01000104 	movi	r4,4
    716c:	113e6b1e 	bne	r2,r4,6b1c <__svfscanf_r+0x628>
    7170:	84000044 	addi	r16,r16,1
    7174:	003fc606 	br	7090 <__svfscanf_r+0xb9c>
    7178:	80803fcc 	andi	r2,r16,255
    717c:	1080201c 	xori	r2,r2,128
    7180:	10bfe004 	addi	r2,r2,-128
    7184:	1001731e 	bne	r2,zero,7754 <__svfscanf_r+0x1260>
    7188:	b101c00c 	andi	r4,r22,1792
    718c:	0081c004 	movi	r2,1792
    7190:	20be621e 	bne	r4,r2,6b1c <__svfscanf_r+0x628>
    7194:	b32c703a 	and	r22,r22,r12
    7198:	04000044 	movi	r16,1
    719c:	003fbc06 	br	7090 <__svfscanf_r+0xb9c>
    71a0:	b081400c 	andi	r2,r22,1280
    71a4:	13800326 	beq	r2,r14,71b4 <__svfscanf_r+0xcc0>
    71a8:	b081000c 	andi	r2,r22,1024
    71ac:	103e5b26 	beq	r2,zero,6b1c <__svfscanf_r+0x628>
    71b0:	a83e5d26 	beq	r21,zero,6b28 <__svfscanf_r+0x634>
    71b4:	b080800c 	andi	r2,r22,512
    71b8:	1000041e 	bne	r2,zero,71cc <__svfscanf_r+0xcd8>
    71bc:	d880a217 	ldw	r2,648(sp)
    71c0:	ddc0a115 	stw	r23,644(sp)
    71c4:	a8abc83a 	sub	r21,r21,r2
    71c8:	dd40a315 	stw	r21,652(sp)
    71cc:	b32c703a 	and	r22,r22,r12
    71d0:	b5806014 	ori	r22,r22,384
    71d4:	002b883a 	mov	r21,zero
    71d8:	003fad06 	br	7090 <__svfscanf_r+0xb9c>
    71dc:	00800044 	movi	r2,1
    71e0:	30be4e1e 	bne	r6,r2,6b1c <__svfscanf_r+0x628>
    71e4:	01800084 	movi	r6,2
    71e8:	003fa906 	br	7090 <__svfscanf_r+0xb9c>
    71ec:	81003fcc 	andi	r4,r16,255
    71f0:	2100201c 	xori	r4,r4,128
    71f4:	213fe004 	addi	r4,r4,-128
    71f8:	00800084 	movi	r2,2
    71fc:	20be471e 	bne	r4,r2,6b1c <__svfscanf_r+0x628>
    7200:	040000c4 	movi	r16,3
    7204:	003fa206 	br	7090 <__svfscanf_r+0xb9c>
    7208:	01400074 	movhi	r5,1
    720c:	29746e04 	addi	r5,r5,-11848
    7210:	00800284 	movi	r2,10
    7214:	d940a015 	stw	r5,640(sp)
    7218:	d8809f15 	stw	r2,636(sp)
    721c:	040000c4 	movi	r16,3
    7220:	003d2706 	br	66c0 <__svfscanf_r+0x1cc>
    7224:	df009d15 	stw	fp,628(sp)
    7228:	04000084 	movi	r16,2
    722c:	2039883a 	mov	fp,r4
    7230:	003d2306 	br	66c0 <__svfscanf_r+0x1cc>
    7234:	00800074 	movhi	r2,1
    7238:	10b5e104 	addi	r2,r2,-10364
    723c:	00c00284 	movi	r3,10
    7240:	df009d15 	stw	fp,628(sp)
    7244:	d880a015 	stw	r2,640(sp)
    7248:	2039883a 	mov	fp,r4
    724c:	d8c09f15 	stw	r3,636(sp)
    7250:	040000c4 	movi	r16,3
    7254:	003d1a06 	br	66c0 <__svfscanf_r+0x1cc>
    7258:	bdc03fcc 	andi	r23,r23,255
    725c:	01400284 	movi	r5,10
    7260:	bdc0201c 	xori	r23,r23,128
    7264:	d8c0a815 	stw	r3,672(sp)
    7268:	d980a915 	stw	r6,676(sp)
    726c:	bdffe004 	addi	r23,r23,-128
    7270:	00020000 	call	2000 <__mulsi3>
    7274:	15c5883a 	add	r2,r2,r23
    7278:	113ff404 	addi	r4,r2,-48
    727c:	85c00043 	ldbu	r23,1(r16)
    7280:	d8c0a817 	ldw	r3,672(sp)
    7284:	e021883a 	mov	r16,fp
    7288:	d980a917 	ldw	r6,676(sp)
    728c:	003cf906 	br	6674 <__svfscanf_r+0x180>
    7290:	df009d15 	stw	fp,628(sp)
    7294:	2039883a 	mov	fp,r4
    7298:	003d0206 	br	66a4 <__svfscanf_r+0x1b0>
    729c:	df009d15 	stw	fp,628(sp)
    72a0:	04000104 	movi	r16,4
    72a4:	2039883a 	mov	fp,r4
    72a8:	003d0506 	br	66c0 <__svfscanf_r+0x1cc>
    72ac:	85c00043 	ldbu	r23,1(r16)
    72b0:	b5800094 	ori	r22,r22,2
    72b4:	e021883a 	mov	r16,fp
    72b8:	003cee06 	br	6674 <__svfscanf_r+0x180>
    72bc:	df009d15 	stw	fp,628(sp)
    72c0:	e021883a 	mov	r16,fp
    72c4:	003cd706 	br	6624 <__svfscanf_r+0x130>
    72c8:	85c00043 	ldbu	r23,1(r16)
    72cc:	b5800414 	ori	r22,r22,16
    72d0:	e021883a 	mov	r16,fp
    72d4:	003ce706 	br	6674 <__svfscanf_r+0x180>
    72d8:	df009d15 	stw	fp,628(sp)
    72dc:	b5800054 	ori	r22,r22,1
    72e0:	2039883a 	mov	fp,r4
    72e4:	01000074 	movhi	r4,1
    72e8:	2135e104 	addi	r4,r4,-10364
    72ec:	01400204 	movi	r5,8
    72f0:	d900a015 	stw	r4,640(sp)
    72f4:	d9409f15 	stw	r5,636(sp)
    72f8:	040000c4 	movi	r16,3
    72fc:	003cf006 	br	66c0 <__svfscanf_r+0x1cc>
    7300:	df009d15 	stw	fp,628(sp)
    7304:	01400404 	movi	r5,16
    7308:	2039883a 	mov	fp,r4
    730c:	01000074 	movhi	r4,1
    7310:	2135e104 	addi	r4,r4,-10364
    7314:	b5808014 	ori	r22,r22,512
    7318:	d900a015 	stw	r4,640(sp)
    731c:	d9409f15 	stw	r5,636(sp)
    7320:	040000c4 	movi	r16,3
    7324:	003ce606 	br	66c0 <__svfscanf_r+0x1cc>
    7328:	df009d15 	stw	fp,628(sp)
    732c:	d9409d17 	ldw	r5,628(sp)
    7330:	2039883a 	mov	fp,r4
    7334:	d9005884 	addi	r4,sp,354
    7338:	000b9000 	call	b900 <__sccl>
    733c:	d8809d15 	stw	r2,628(sp)
    7340:	b5801014 	ori	r22,r22,64
    7344:	04000044 	movi	r16,1
    7348:	003cdd06 	br	66c0 <__svfscanf_r+0x1cc>
    734c:	df009d15 	stw	fp,628(sp)
    7350:	b5801014 	ori	r22,r22,64
    7354:	2039883a 	mov	fp,r4
    7358:	0021883a 	mov	r16,zero
    735c:	003cd806 	br	66c0 <__svfscanf_r+0x1cc>
    7360:	df009d15 	stw	fp,628(sp)
    7364:	2039883a 	mov	fp,r4
    7368:	003ccf06 	br	66a8 <__svfscanf_r+0x1b4>
    736c:	85c00043 	ldbu	r23,1(r16)
    7370:	b5800114 	ori	r22,r22,4
    7374:	e021883a 	mov	r16,fp
    7378:	003cbe06 	br	6674 <__svfscanf_r+0x180>
    737c:	df009d15 	stw	fp,628(sp)
    7380:	2039883a 	mov	fp,r4
    7384:	01000074 	movhi	r4,1
    7388:	21346e04 	addi	r4,r4,-11848
    738c:	d900a015 	stw	r4,640(sp)
    7390:	d8009f15 	stw	zero,636(sp)
    7394:	040000c4 	movi	r16,3
    7398:	003cc906 	br	66c0 <__svfscanf_r+0x1cc>
    739c:	85c00043 	ldbu	r23,1(r16)
    73a0:	b8803fcc 	andi	r2,r23,255
    73a4:	1080201c 	xori	r2,r2,128
    73a8:	10bfe004 	addi	r2,r2,-128
    73ac:	11818f26 	beq	r2,r6,79ec <__svfscanf_r+0x14f8>
    73b0:	b5800054 	ori	r22,r22,1
    73b4:	e021883a 	mov	r16,fp
    73b8:	003cae06 	br	6674 <__svfscanf_r+0x180>
    73bc:	df009d15 	stw	fp,628(sp)
    73c0:	b080040c 	andi	r2,r22,16
    73c4:	103cfa1e 	bne	r2,zero,67b0 <__svfscanf_r+0x2bc>
    73c8:	b080010c 	andi	r2,r22,4
    73cc:	10018b26 	beq	r2,zero,79fc <__svfscanf_r+0x1508>
    73d0:	d9009c17 	ldw	r4,624(sp)
    73d4:	e021883a 	mov	r16,fp
    73d8:	800d883a 	mov	r6,r16
    73dc:	20800017 	ldw	r2,0(r4)
    73e0:	21000104 	addi	r4,r4,4
    73e4:	d9009c15 	stw	r4,624(sp)
    73e8:	1500000d 	sth	r20,0(r2)
    73ec:	003c7a06 	br	65d8 <__svfscanf_r+0xe4>
    73f0:	df009d15 	stw	fp,628(sp)
    73f4:	2039883a 	mov	fp,r4
    73f8:	003fba06 	br	72e4 <__svfscanf_r+0xdf0>
    73fc:	00800074 	movhi	r2,1
    7400:	10b5e104 	addi	r2,r2,-10364
    7404:	00c00404 	movi	r3,16
    7408:	df009d15 	stw	fp,628(sp)
    740c:	b5808814 	ori	r22,r22,544
    7410:	2039883a 	mov	fp,r4
    7414:	d880a015 	stw	r2,640(sp)
    7418:	d8c09f15 	stw	r3,636(sp)
    741c:	040000c4 	movi	r16,3
    7420:	003ca706 	br	66c0 <__svfscanf_r+0x1cc>
    7424:	013fff84 	movi	r4,-2
    7428:	113cdd26 	beq	r2,r4,67a0 <__svfscanf_r+0x2ac>
    742c:	a429883a 	add	r20,r20,r16
    7430:	e73fffc4 	addi	fp,fp,-1
    7434:	b83cd826 	beq	r23,zero,6798 <__svfscanf_r+0x2a4>
    7438:	0021883a 	mov	r16,zero
    743c:	003cd806 	br	67a0 <__svfscanf_r+0x2ac>
    7440:	1085883a 	add	r2,r2,r2
    7444:	1085883a 	add	r2,r2,r2
    7448:	01000034 	movhi	r4,0
    744c:	211d1704 	addi	r4,r4,29788
    7450:	1105883a 	add	r2,r2,r4
    7454:	10800017 	ldw	r2,0(r2)
    7458:	1000683a 	jmp	r2
    745c:	00007650 	cmplti	zero,zero,473
    7460:	00006c94 	movui	zero,434
    7464:	00007650 	cmplti	zero,zero,473
    7468:	00006c94 	movui	zero,434
    746c:	00006c94 	movui	zero,434
    7470:	00007628 	cmpgeui	zero,zero,472
    7474:	00007608 	cmpgei	zero,zero,472
    7478:	00007608 	cmpgei	zero,zero,472
    747c:	00007608 	cmpgei	zero,zero,472
    7480:	00007608 	cmpgei	zero,zero,472
    7484:	00007608 	cmpgei	zero,zero,472
    7488:	00007608 	cmpgei	zero,zero,472
    748c:	00007608 	cmpgei	zero,zero,472
    7490:	000075e8 	cmpgeui	zero,zero,471
    7494:	000075e8 	cmpgeui	zero,zero,471
    7498:	00006c94 	movui	zero,434
    749c:	00006c94 	movui	zero,434
    74a0:	00006c94 	movui	zero,434
    74a4:	00006c94 	movui	zero,434
    74a8:	00006c94 	movui	zero,434
    74ac:	00006c94 	movui	zero,434
    74b0:	00006c94 	movui	zero,434
    74b4:	000075d4 	movui	zero,471
    74b8:	000075d4 	movui	zero,471
    74bc:	000075d4 	movui	zero,471
    74c0:	000075d4 	movui	zero,471
    74c4:	000075d4 	movui	zero,471
    74c8:	000075d4 	movui	zero,471
    74cc:	00006c94 	movui	zero,434
    74d0:	00006c94 	movui	zero,434
    74d4:	00006c94 	movui	zero,434
    74d8:	00006c94 	movui	zero,434
    74dc:	00006c94 	movui	zero,434
    74e0:	00006c94 	movui	zero,434
    74e4:	00006c94 	movui	zero,434
    74e8:	00006c94 	movui	zero,434
    74ec:	00006c94 	movui	zero,434
    74f0:	00006c94 	movui	zero,434
    74f4:	00006c94 	movui	zero,434
    74f8:	00006c94 	movui	zero,434
    74fc:	00006c94 	movui	zero,434
    7500:	00006c94 	movui	zero,434
    7504:	00006c94 	movui	zero,434
    7508:	00006c94 	movui	zero,434
    750c:	00006c94 	movui	zero,434
    7510:	00007594 	movui	zero,470
    7514:	00006c94 	movui	zero,434
    7518:	00006c94 	movui	zero,434
    751c:	00006c94 	movui	zero,434
    7520:	00006c94 	movui	zero,434
    7524:	00006c94 	movui	zero,434
    7528:	00006c94 	movui	zero,434
    752c:	00006c94 	movui	zero,434
    7530:	00006c94 	movui	zero,434
    7534:	000075d4 	movui	zero,471
    7538:	000075d4 	movui	zero,471
    753c:	000075d4 	movui	zero,471
    7540:	000075d4 	movui	zero,471
    7544:	000075d4 	movui	zero,471
    7548:	000075d4 	movui	zero,471
    754c:	00006c94 	movui	zero,434
    7550:	00006c94 	movui	zero,434
    7554:	00006c94 	movui	zero,434
    7558:	00006c94 	movui	zero,434
    755c:	00006c94 	movui	zero,434
    7560:	00006c94 	movui	zero,434
    7564:	00006c94 	movui	zero,434
    7568:	00006c94 	movui	zero,434
    756c:	00006c94 	movui	zero,434
    7570:	00006c94 	movui	zero,434
    7574:	00006c94 	movui	zero,434
    7578:	00006c94 	movui	zero,434
    757c:	00006c94 	movui	zero,434
    7580:	00006c94 	movui	zero,434
    7584:	00006c94 	movui	zero,434
    7588:	00006c94 	movui	zero,434
    758c:	00006c94 	movui	zero,434
    7590:	00007594 	movui	zero,470
    7594:	b081800c 	andi	r2,r22,1536
    7598:	11fdbe1e 	bne	r2,r7,6c94 <__svfscanf_r+0x7a0>
    759c:	b1ac703a 	and	r22,r22,r6
    75a0:	b5814014 	ori	r22,r22,1280
    75a4:	02400404 	movi	r9,16
    75a8:	a9400005 	stb	r5,0(r21)
    75ac:	ad400044 	addi	r21,r21,1
    75b0:	98800117 	ldw	r2,4(r19)
    75b4:	10bfffc4 	addi	r2,r2,-1
    75b8:	98800115 	stw	r2,4(r19)
    75bc:	00803b0e 	bge	zero,r2,76ac <__svfscanf_r+0x11b8>
    75c0:	42000044 	addi	r8,r8,1
    75c4:	9a000015 	stw	r8,0(r19)
    75c8:	e73fffc4 	addi	fp,fp,-1
    75cc:	e03dac1e 	bne	fp,zero,6c80 <__svfscanf_r+0x78c>
    75d0:	003db006 	br	6c94 <__svfscanf_r+0x7a0>
    75d4:	00800284 	movi	r2,10
    75d8:	127dae0e 	bge	r2,r9,6c94 <__svfscanf_r+0x7a0>
    75dc:	00bd1fc4 	movi	r2,-2945
    75e0:	b0ac703a 	and	r22,r22,r2
    75e4:	003ff006 	br	75a8 <__svfscanf_r+0x10b4>
    75e8:	4a53883a 	add	r9,r9,r9
    75ec:	01000074 	movhi	r4,1
    75f0:	2112ac84 	addi	r4,r4,19122
    75f4:	2245883a 	add	r2,r4,r9
    75f8:	1240000f 	ldh	r9,0(r2)
    75fc:	00800204 	movi	r2,8
    7600:	127ff616 	blt	r2,r9,75dc <__svfscanf_r+0x10e8>
    7604:	003da306 	br	6c94 <__svfscanf_r+0x7a0>
    7608:	4a53883a 	add	r9,r9,r9
    760c:	01000074 	movhi	r4,1
    7610:	2112ac84 	addi	r4,r4,19122
    7614:	2245883a 	add	r2,r4,r9
    7618:	1240000f 	ldh	r9,0(r2)
    761c:	00bd1fc4 	movi	r2,-2945
    7620:	b0ac703a 	and	r22,r22,r2
    7624:	003fe006 	br	75a8 <__svfscanf_r+0x10b4>
    7628:	b082000c 	andi	r2,r22,2048
    762c:	103fde26 	beq	r2,zero,75a8 <__svfscanf_r+0x10b4>
    7630:	4800021e 	bne	r9,zero,763c <__svfscanf_r+0x1148>
    7634:	b5808014 	ori	r22,r22,512
    7638:	02400204 	movi	r9,8
    763c:	b081000c 	andi	r2,r22,1024
    7640:	10009f26 	beq	r2,zero,78c0 <__svfscanf_r+0x13cc>
    7644:	00be9fc4 	movi	r2,-1409
    7648:	b0ac703a 	and	r22,r22,r2
    764c:	003fd606 	br	75a8 <__svfscanf_r+0x10b4>
    7650:	b080200c 	andi	r2,r22,128
    7654:	103d8f26 	beq	r2,zero,6c94 <__svfscanf_r+0x7a0>
    7658:	00bfdfc4 	movi	r2,-129
    765c:	b0ac703a 	and	r22,r22,r2
    7660:	003fd106 	br	75a8 <__svfscanf_r+0x10b4>
    7664:	8809883a 	mov	r4,r17
    7668:	980b883a 	mov	r5,r19
    766c:	d8c0a815 	stw	r3,672(sp)
    7670:	d980a915 	stw	r6,676(sp)
    7674:	dac0a715 	stw	r11,668(sp)
    7678:	db00a515 	stw	r12,660(sp)
    767c:	db80a415 	stw	r14,656(sp)
    7680:	dbc0a615 	stw	r15,664(sp)
    7684:	00042040 	call	4204 <__srefill_r>
    7688:	d8c0a817 	ldw	r3,672(sp)
    768c:	d980a917 	ldw	r6,676(sp)
    7690:	dac0a717 	ldw	r11,668(sp)
    7694:	db00a517 	ldw	r12,660(sp)
    7698:	db80a417 	ldw	r14,656(sp)
    769c:	dbc0a617 	ldw	r15,664(sp)
    76a0:	103d1e1e 	bne	r2,zero,6b1c <__svfscanf_r+0x628>
    76a4:	e03d181e 	bne	fp,zero,6b08 <__svfscanf_r+0x614>
    76a8:	003d1c06 	br	6b1c <__svfscanf_r+0x628>
    76ac:	8809883a 	mov	r4,r17
    76b0:	980b883a 	mov	r5,r19
    76b4:	d8c0a815 	stw	r3,672(sp)
    76b8:	d980a915 	stw	r6,676(sp)
    76bc:	d9c0a415 	stw	r7,656(sp)
    76c0:	da40a515 	stw	r9,660(sp)
    76c4:	00042040 	call	4204 <__srefill_r>
    76c8:	d8c0a817 	ldw	r3,672(sp)
    76cc:	d980a917 	ldw	r6,676(sp)
    76d0:	d9c0a417 	ldw	r7,656(sp)
    76d4:	da40a517 	ldw	r9,660(sp)
    76d8:	103fbb26 	beq	r2,zero,75c8 <__svfscanf_r+0x10d4>
    76dc:	003d6d06 	br	6c94 <__svfscanf_r+0x7a0>
    76e0:	a429883a 	add	r20,r20,r16
    76e4:	e73fffc4 	addi	fp,fp,-1
    76e8:	b000fc1e 	bne	r22,zero,7adc <__svfscanf_r+0x15e8>
    76ec:	ad400104 	addi	r21,r21,4
    76f0:	0021883a 	mov	r16,zero
    76f4:	98800117 	ldw	r2,4(r19)
    76f8:	00bd8716 	blt	zero,r2,6d18 <__svfscanf_r+0x824>
    76fc:	8809883a 	mov	r4,r17
    7700:	980b883a 	mov	r5,r19
    7704:	00042040 	call	4204 <__srefill_r>
    7708:	103d8326 	beq	r2,zero,6d18 <__svfscanf_r+0x824>
    770c:	803caf1e 	bne	r16,zero,69cc <__svfscanf_r+0x4d8>
    7710:	b03c271e 	bne	r22,zero,67b0 <__svfscanf_r+0x2bc>
    7714:	d8809e17 	ldw	r2,632(sp)
    7718:	dc009d17 	ldw	r16,628(sp)
    771c:	a8000015 	stw	zero,0(r21)
    7720:	10800044 	addi	r2,r2,1
    7724:	d8809e15 	stw	r2,632(sp)
    7728:	800d883a 	mov	r6,r16
    772c:	003baa06 	br	65d8 <__svfscanf_r+0xe4>
    7730:	857ca626 	beq	r16,r21,69cc <__svfscanf_r+0x4d8>
    7734:	ac21c83a 	sub	r16,r21,r16
    7738:	803bab26 	beq	r16,zero,65e8 <__svfscanf_r+0xf4>
    773c:	d8809e17 	ldw	r2,632(sp)
    7740:	a8000005 	stb	zero,0(r21)
    7744:	ddc09c15 	stw	r23,624(sp)
    7748:	10800044 	addi	r2,r2,1
    774c:	d8809e15 	stw	r2,632(sp)
    7750:	003d6106 	br	6cd8 <__svfscanf_r+0x7e4>
    7754:	010000c4 	movi	r4,3
    7758:	113e8526 	beq	r2,r4,7170 <__svfscanf_r+0xc7c>
    775c:	01000144 	movi	r4,5
    7760:	113cee1e 	bne	r2,r4,6b1c <__svfscanf_r+0x628>
    7764:	84000044 	addi	r16,r16,1
    7768:	003e4906 	br	7090 <__svfscanf_r+0xb9c>
    776c:	00800084 	movi	r2,2
    7770:	30be781e 	bne	r6,r2,7154 <__svfscanf_r+0xc60>
    7774:	018000c4 	movi	r6,3
    7778:	003e4506 	br	7090 <__svfscanf_r+0xb9c>
    777c:	d8c0a017 	ldw	r3,640(sp)
    7780:	d9c09f17 	ldw	r7,636(sp)
    7784:	8809883a 	mov	r4,r17
    7788:	d9400104 	addi	r5,sp,4
    778c:	000d883a 	mov	r6,zero
    7790:	a8000005 	stb	zero,0(r21)
    7794:	183ee83a 	callr	r3
    7798:	b0c0080c 	andi	r3,r22,32
    779c:	1800391e 	bne	r3,zero,7884 <__svfscanf_r+0x1390>
    77a0:	b0c0010c 	andi	r3,r22,4
    77a4:	1800ac26 	beq	r3,zero,7a58 <__svfscanf_r+0x1564>
    77a8:	d9409c17 	ldw	r5,624(sp)
    77ac:	28c00017 	ldw	r3,0(r5)
    77b0:	29400104 	addi	r5,r5,4
    77b4:	d9409c15 	stw	r5,624(sp)
    77b8:	1880000d 	sth	r2,0(r3)
    77bc:	d8809e17 	ldw	r2,632(sp)
    77c0:	10800044 	addi	r2,r2,1
    77c4:	d8809e15 	stw	r2,632(sp)
    77c8:	003d4006 	br	6ccc <__svfscanf_r+0x7d8>
    77cc:	d8c09c17 	ldw	r3,624(sp)
    77d0:	98800017 	ldw	r2,0(r19)
    77d4:	1d400017 	ldw	r21,0(r3)
    77d8:	1d800104 	addi	r22,r3,4
    77dc:	a821883a 	mov	r16,r21
    77e0:	10c00003 	ldbu	r3,0(r2)
    77e4:	91400017 	ldw	r5,0(r18)
    77e8:	28c7883a 	add	r3,r5,r3
    77ec:	18c00003 	ldbu	r3,0(r3)
    77f0:	18c0020c 	andi	r3,r3,8
    77f4:	18c03fcc 	andi	r3,r3,255
    77f8:	18c0201c 	xori	r3,r3,128
    77fc:	18ffe004 	addi	r3,r3,-128
    7800:	1800121e 	bne	r3,zero,784c <__svfscanf_r+0x1358>
    7804:	98c00117 	ldw	r3,4(r19)
    7808:	10800044 	addi	r2,r2,1
    780c:	84000044 	addi	r16,r16,1
    7810:	18ffffc4 	addi	r3,r3,-1
    7814:	98c00115 	stw	r3,4(r19)
    7818:	10ffffc3 	ldbu	r3,-1(r2)
    781c:	e73fffc4 	addi	fp,fp,-1
    7820:	80ffffc5 	stb	r3,-1(r16)
    7824:	98800015 	stw	r2,0(r19)
    7828:	e0000826 	beq	fp,zero,784c <__svfscanf_r+0x1358>
    782c:	98c00117 	ldw	r3,4(r19)
    7830:	00ffeb16 	blt	zero,r3,77e0 <__svfscanf_r+0x12ec>
    7834:	8809883a 	mov	r4,r17
    7838:	980b883a 	mov	r5,r19
    783c:	00042040 	call	4204 <__srefill_r>
    7840:	1000021e 	bne	r2,zero,784c <__svfscanf_r+0x1358>
    7844:	98800017 	ldw	r2,0(r19)
    7848:	003fe506 	br	77e0 <__svfscanf_r+0x12ec>
    784c:	d8809e17 	ldw	r2,632(sp)
    7850:	856bc83a 	sub	r21,r16,r21
    7854:	80000005 	stb	zero,0(r16)
    7858:	dc009d17 	ldw	r16,628(sp)
    785c:	10800044 	addi	r2,r2,1
    7860:	a569883a 	add	r20,r20,r21
    7864:	d8809e15 	stw	r2,632(sp)
    7868:	dd809c15 	stw	r22,624(sp)
    786c:	800d883a 	mov	r6,r16
    7870:	003b5906 	br	65d8 <__svfscanf_r+0xe4>
    7874:	dd409b04 	addi	r21,sp,620
    7878:	003d2506 	br	6d10 <__svfscanf_r+0x81c>
    787c:	002d883a 	mov	r22,zero
    7880:	003ba206 	br	670c <__svfscanf_r+0x218>
    7884:	d9009c17 	ldw	r4,624(sp)
    7888:	20c00017 	ldw	r3,0(r4)
    788c:	21000104 	addi	r4,r4,4
    7890:	d9009c15 	stw	r4,624(sp)
    7894:	18800015 	stw	r2,0(r3)
    7898:	003fc806 	br	77bc <__svfscanf_r+0x12c8>
    789c:	b280008c 	andi	r10,r22,2
    78a0:	50008126 	beq	r10,zero,7aa8 <__svfscanf_r+0x15b4>
    78a4:	d8c09c17 	ldw	r3,624(sp)
    78a8:	18800017 	ldw	r2,0(r3)
    78ac:	18c00104 	addi	r3,r3,4
    78b0:	d8c09c15 	stw	r3,624(sp)
    78b4:	15400015 	stw	r21,0(r2)
    78b8:	15c00115 	stw	r23,4(r2)
    78bc:	003cde06 	br	6c38 <__svfscanf_r+0x744>
    78c0:	00bf1fc4 	movi	r2,-897
    78c4:	b0ac703a 	and	r22,r22,r2
    78c8:	18000226 	beq	r3,zero,78d4 <__svfscanf_r+0x13e0>
    78cc:	18ffffc4 	addi	r3,r3,-1
    78d0:	e7000044 	addi	fp,fp,1
    78d4:	84000044 	addi	r16,r16,1
    78d8:	003f3506 	br	75b0 <__svfscanf_r+0x10bc>
    78dc:	803cfe1e 	bne	r16,zero,6cd8 <__svfscanf_r+0x7e4>
    78e0:	003b4106 	br	65e8 <__svfscanf_r+0xf4>
    78e4:	d8c09c17 	ldw	r3,624(sp)
    78e8:	01400044 	movi	r5,1
    78ec:	e00d883a 	mov	r6,fp
    78f0:	19000017 	ldw	r4,0(r3)
    78f4:	980f883a 	mov	r7,r19
    78f8:	0002a040 	call	2a04 <fread>
    78fc:	d9009c17 	ldw	r4,624(sp)
    7900:	20c00104 	addi	r3,r4,4
    7904:	103c3126 	beq	r2,zero,69cc <__svfscanf_r+0x4d8>
    7908:	1529883a 	add	r20,r2,r20
    790c:	d8809e17 	ldw	r2,632(sp)
    7910:	dc009d17 	ldw	r16,628(sp)
    7914:	d8c09c15 	stw	r3,624(sp)
    7918:	10800044 	addi	r2,r2,1
    791c:	d8809e15 	stw	r2,632(sp)
    7920:	800d883a 	mov	r6,r16
    7924:	003b2c06 	br	65d8 <__svfscanf_r+0xe4>
    7928:	00ffff84 	movi	r3,-2
    792c:	10ff7126 	beq	r2,r3,76f4 <__svfscanf_r+0x1200>
    7930:	a9000017 	ldw	r4,0(r21)
    7934:	0009cf80 	call	9cf8 <iswspace>
    7938:	103f6926 	beq	r2,zero,76e0 <__svfscanf_r+0x11ec>
    793c:	803f7426 	beq	r16,zero,7710 <__svfscanf_r+0x121c>
    7940:	843fffc4 	addi	r16,r16,-1
    7944:	d9000104 	addi	r4,sp,4
    7948:	2405883a 	add	r2,r4,r16
    794c:	11400003 	ldbu	r5,0(r2)
    7950:	8809883a 	mov	r4,r17
    7954:	980d883a 	mov	r6,r19
    7958:	000ded00 	call	ded0 <_ungetc_r>
    795c:	803ff81e 	bne	r16,zero,7940 <__svfscanf_r+0x144c>
    7960:	003f6b06 	br	7710 <__svfscanf_r+0x121c>
    7964:	99000017 	ldw	r4,0(r19)
    7968:	1705c83a 	sub	r2,r2,fp
    796c:	8721883a 	add	r16,r16,fp
    7970:	2707883a 	add	r3,r4,fp
    7974:	98800115 	stw	r2,4(r19)
    7978:	98c00015 	stw	r3,0(r19)
    797c:	003cd606 	br	6cd8 <__svfscanf_r+0x7e4>
    7980:	d880a117 	ldw	r2,644(sp)
    7984:	000d883a 	mov	r6,zero
    7988:	8809883a 	mov	r4,r17
    798c:	11400044 	addi	r5,r2,1
    7990:	01c00284 	movi	r7,10
    7994:	000d1b80 	call	d1b8 <_strtol_r>
    7998:	d8c0a317 	ldw	r3,652(sp)
    799c:	10cdc83a 	sub	r6,r2,r3
    79a0:	d900a117 	ldw	r4,644(sp)
    79a4:	d88055c4 	addi	r2,sp,343
    79a8:	20800236 	bltu	r4,r2,79b4 <__svfscanf_r+0x14c0>
    79ac:	d9005584 	addi	r4,sp,342
    79b0:	d900a115 	stw	r4,644(sp)
    79b4:	d900a117 	ldw	r4,644(sp)
    79b8:	01400074 	movhi	r5,1
    79bc:	2952ab04 	addi	r5,r5,19116
    79c0:	000ba240 	call	ba24 <sprintf>
    79c4:	003c8e06 	br	6c00 <__svfscanf_r+0x70c>
    79c8:	b32c703a 	and	r22,r22,r12
    79cc:	01800044 	movi	r6,1
    79d0:	003daf06 	br	7090 <__svfscanf_r+0xb9c>
    79d4:	d8c0a217 	ldw	r3,648(sp)
    79d8:	a8ebc83a 	sub	r21,r21,r3
    79dc:	054dc83a 	sub	r6,zero,r21
    79e0:	a83c8726 	beq	r21,zero,6c00 <__svfscanf_r+0x70c>
    79e4:	ddc0a115 	stw	r23,644(sp)
    79e8:	003fed06 	br	79a0 <__svfscanf_r+0x14ac>
    79ec:	85c00083 	ldbu	r23,2(r16)
    79f0:	b5800094 	ori	r22,r22,2
    79f4:	84000084 	addi	r16,r16,2
    79f8:	003b1e06 	br	6674 <__svfscanf_r+0x180>
    79fc:	b080004c 	andi	r2,r22,1
    7a00:	10000d1e 	bne	r2,zero,7a38 <__svfscanf_r+0x1544>
    7a04:	b580008c 	andi	r22,r22,2
    7a08:	b0000b26 	beq	r22,zero,7a38 <__svfscanf_r+0x1544>
    7a0c:	d8c09c17 	ldw	r3,624(sp)
    7a10:	d9009c17 	ldw	r4,624(sp)
    7a14:	dc009d17 	ldw	r16,628(sp)
    7a18:	18800017 	ldw	r2,0(r3)
    7a1c:	a007d7fa 	srai	r3,r20,31
    7a20:	21000104 	addi	r4,r4,4
    7a24:	15000015 	stw	r20,0(r2)
    7a28:	10c00115 	stw	r3,4(r2)
    7a2c:	d9009c15 	stw	r4,624(sp)
    7a30:	800d883a 	mov	r6,r16
    7a34:	003ae806 	br	65d8 <__svfscanf_r+0xe4>
    7a38:	d9409c17 	ldw	r5,624(sp)
    7a3c:	dc009d17 	ldw	r16,628(sp)
    7a40:	28800017 	ldw	r2,0(r5)
    7a44:	29400104 	addi	r5,r5,4
    7a48:	d9409c15 	stw	r5,624(sp)
    7a4c:	15000015 	stw	r20,0(r2)
    7a50:	800d883a 	mov	r6,r16
    7a54:	003ae006 	br	65d8 <__svfscanf_r+0xe4>
    7a58:	b0c0004c 	andi	r3,r22,1
    7a5c:	183f891e 	bne	r3,zero,7884 <__svfscanf_r+0x1390>
    7a60:	b580008c 	andi	r22,r22,2
    7a64:	b03f8726 	beq	r22,zero,7884 <__svfscanf_r+0x1390>
    7a68:	d940a017 	ldw	r5,640(sp)
    7a6c:	00800074 	movhi	r2,1
    7a70:	10b5e104 	addi	r2,r2,-10364
    7a74:	8809883a 	mov	r4,r17
    7a78:	28802626 	beq	r5,r2,7b14 <__svfscanf_r+0x1620>
    7a7c:	d9c09f17 	ldw	r7,636(sp)
    7a80:	d9400104 	addi	r5,sp,4
    7a84:	000d883a 	mov	r6,zero
    7a88:	000d4540 	call	d454 <_strtoll_r>
    7a8c:	d9409c17 	ldw	r5,624(sp)
    7a90:	29000017 	ldw	r4,0(r5)
    7a94:	29400104 	addi	r5,r5,4
    7a98:	d9409c15 	stw	r5,624(sp)
    7a9c:	20800015 	stw	r2,0(r4)
    7aa0:	20c00115 	stw	r3,4(r4)
    7aa4:	003f4506 	br	77bc <__svfscanf_r+0x12c8>
    7aa8:	d8809c17 	ldw	r2,624(sp)
    7aac:	a809883a 	mov	r4,r21
    7ab0:	180b883a 	mov	r5,r3
    7ab4:	14000104 	addi	r16,r2,4
    7ab8:	15800017 	ldw	r22,0(r2)
    7abc:	000b8d40 	call	b8d4 <__isnand>
    7ac0:	1000311e 	bne	r2,zero,7b88 <__svfscanf_r+0x1694>
    7ac4:	a809883a 	mov	r4,r21
    7ac8:	b80b883a 	mov	r5,r23
    7acc:	00108880 	call	10888 <__truncdfsf2>
    7ad0:	b0800015 	stw	r2,0(r22)
    7ad4:	dc009c15 	stw	r16,624(sp)
    7ad8:	003c5706 	br	6c38 <__svfscanf_r+0x744>
    7adc:	0021883a 	mov	r16,zero
    7ae0:	003f0406 	br	76f4 <__svfscanf_r+0x1200>
    7ae4:	d9400104 	addi	r5,sp,4
    7ae8:	9821883a 	mov	r16,r19
    7aec:	2dfabe2e 	bgeu	r5,r23,65e8 <__svfscanf_r+0xf4>
    7af0:	bcbfffc4 	addi	r18,r23,-1
    7af4:	dcc000c4 	addi	r19,sp,3
    7af8:	91400007 	ldb	r5,0(r18)
    7afc:	8809883a 	mov	r4,r17
    7b00:	94bfffc4 	addi	r18,r18,-1
    7b04:	800d883a 	mov	r6,r16
    7b08:	000ded00 	call	ded0 <_ungetc_r>
    7b0c:	94fffa1e 	bne	r18,r19,7af8 <__svfscanf_r+0x1604>
    7b10:	003ab506 	br	65e8 <__svfscanf_r+0xf4>
    7b14:	d9c09f17 	ldw	r7,636(sp)
    7b18:	d9400104 	addi	r5,sp,4
    7b1c:	000d883a 	mov	r6,zero
    7b20:	000da4c0 	call	da4c <_strtoull_r>
    7b24:	003fd906 	br	7a8c <__svfscanf_r+0x1598>
    7b28:	d9000104 	addi	r4,sp,4
    7b2c:	9821883a 	mov	r16,r19
    7b30:	25faad2e 	bgeu	r4,r23,65e8 <__svfscanf_r+0xf4>
    7b34:	bcbfffc4 	addi	r18,r23,-1
    7b38:	dcc000c4 	addi	r19,sp,3
    7b3c:	91400007 	ldb	r5,0(r18)
    7b40:	8809883a 	mov	r4,r17
    7b44:	94bfffc4 	addi	r18,r18,-1
    7b48:	800d883a 	mov	r6,r16
    7b4c:	000ded00 	call	ded0 <_ungetc_r>
    7b50:	94fffa1e 	bne	r18,r19,7b3c <__svfscanf_r+0x1648>
    7b54:	003aa406 	br	65e8 <__svfscanf_r+0xf4>
    7b58:	d8c00104 	addi	r3,sp,4
    7b5c:	9821883a 	mov	r16,r19
    7b60:	1dfaa12e 	bgeu	r3,r23,65e8 <__svfscanf_r+0xf4>
    7b64:	bcbfffc4 	addi	r18,r23,-1
    7b68:	dcc000c4 	addi	r19,sp,3
    7b6c:	91400007 	ldb	r5,0(r18)
    7b70:	8809883a 	mov	r4,r17
    7b74:	94bfffc4 	addi	r18,r18,-1
    7b78:	800d883a 	mov	r6,r16
    7b7c:	000ded00 	call	ded0 <_ungetc_r>
    7b80:	94fffa1e 	bne	r18,r19,7b6c <__svfscanf_r+0x1678>
    7b84:	003a9806 	br	65e8 <__svfscanf_r+0xf4>
    7b88:	0009883a 	mov	r4,zero
    7b8c:	000b9c40 	call	b9c4 <nanf>
    7b90:	b0800015 	stw	r2,0(r22)
    7b94:	dc009c15 	stw	r16,624(sp)
    7b98:	003c2706 	br	6c38 <__svfscanf_r+0x744>

00007b9c <_vfscanf_r>:
    7b9c:	defffb04 	addi	sp,sp,-20
    7ba0:	dc000315 	stw	r16,12(sp)
    7ba4:	dfc00415 	stw	ra,16(sp)
    7ba8:	2021883a 	mov	r16,r4
    7bac:	20000926 	beq	r4,zero,7bd4 <_vfscanf_r+0x38>
    7bb0:	20800e17 	ldw	r2,56(r4)
    7bb4:	1000071e 	bne	r2,zero,7bd4 <_vfscanf_r+0x38>
    7bb8:	d9400015 	stw	r5,0(sp)
    7bbc:	d9800115 	stw	r6,4(sp)
    7bc0:	d9c00215 	stw	r7,8(sp)
    7bc4:	00024340 	call	2434 <__sinit>
    7bc8:	d9c00217 	ldw	r7,8(sp)
    7bcc:	d9800117 	ldw	r6,4(sp)
    7bd0:	d9400017 	ldw	r5,0(sp)
    7bd4:	8009883a 	mov	r4,r16
    7bd8:	dfc00417 	ldw	ra,16(sp)
    7bdc:	dc000317 	ldw	r16,12(sp)
    7be0:	dec00504 	addi	sp,sp,20
    7be4:	00064f41 	jmpi	64f4 <__svfscanf_r>

00007be8 <__svfscanf>:
    7be8:	00800074 	movhi	r2,1
    7bec:	109ab504 	addi	r2,r2,27348
    7bf0:	2007883a 	mov	r3,r4
    7bf4:	11000017 	ldw	r4,0(r2)
    7bf8:	2805883a 	mov	r2,r5
    7bfc:	300f883a 	mov	r7,r6
    7c00:	180b883a 	mov	r5,r3
    7c04:	100d883a 	mov	r6,r2
    7c08:	00064f41 	jmpi	64f4 <__svfscanf_r>

00007c0c <vfscanf>:
    7c0c:	defffb04 	addi	sp,sp,-20
    7c10:	dc000115 	stw	r16,4(sp)
    7c14:	04000074 	movhi	r16,1
    7c18:	841ab504 	addi	r16,r16,27348
    7c1c:	80800017 	ldw	r2,0(r16)
    7c20:	dc800315 	stw	r18,12(sp)
    7c24:	dc400215 	stw	r17,8(sp)
    7c28:	dfc00415 	stw	ra,16(sp)
    7c2c:	2025883a 	mov	r18,r4
    7c30:	2823883a 	mov	r17,r5
    7c34:	300f883a 	mov	r7,r6
    7c38:	10000726 	beq	r2,zero,7c58 <vfscanf+0x4c>
    7c3c:	10c00e17 	ldw	r3,56(r2)
    7c40:	1800051e 	bne	r3,zero,7c58 <vfscanf+0x4c>
    7c44:	1009883a 	mov	r4,r2
    7c48:	d9800015 	stw	r6,0(sp)
    7c4c:	00024340 	call	2434 <__sinit>
    7c50:	80800017 	ldw	r2,0(r16)
    7c54:	d9c00017 	ldw	r7,0(sp)
    7c58:	1009883a 	mov	r4,r2
    7c5c:	900b883a 	mov	r5,r18
    7c60:	880d883a 	mov	r6,r17
    7c64:	dfc00417 	ldw	ra,16(sp)
    7c68:	dc800317 	ldw	r18,12(sp)
    7c6c:	dc400217 	ldw	r17,8(sp)
    7c70:	dc000117 	ldw	r16,4(sp)
    7c74:	dec00504 	addi	sp,sp,20
    7c78:	00064f41 	jmpi	64f4 <__svfscanf_r>

00007c7c <_write_r>:
    7c7c:	defffd04 	addi	sp,sp,-12
    7c80:	dc400115 	stw	r17,4(sp)
    7c84:	dc000015 	stw	r16,0(sp)
    7c88:	2023883a 	mov	r17,r4
    7c8c:	040000b4 	movhi	r16,2
    7c90:	84219804 	addi	r16,r16,-31136
    7c94:	2809883a 	mov	r4,r5
    7c98:	300b883a 	mov	r5,r6
    7c9c:	380d883a 	mov	r6,r7
    7ca0:	dfc00215 	stw	ra,8(sp)
    7ca4:	80000015 	stw	zero,0(r16)
    7ca8:	0011ecc0 	call	11ecc <write>
    7cac:	00ffffc4 	movi	r3,-1
    7cb0:	10c00526 	beq	r2,r3,7cc8 <_write_r+0x4c>
    7cb4:	dfc00217 	ldw	ra,8(sp)
    7cb8:	dc400117 	ldw	r17,4(sp)
    7cbc:	dc000017 	ldw	r16,0(sp)
    7cc0:	dec00304 	addi	sp,sp,12
    7cc4:	f800283a 	ret
    7cc8:	80c00017 	ldw	r3,0(r16)
    7ccc:	183ff926 	beq	r3,zero,7cb4 <_write_r+0x38>
    7cd0:	88c00015 	stw	r3,0(r17)
    7cd4:	dfc00217 	ldw	ra,8(sp)
    7cd8:	dc400117 	ldw	r17,4(sp)
    7cdc:	dc000017 	ldw	r16,0(sp)
    7ce0:	dec00304 	addi	sp,sp,12
    7ce4:	f800283a 	ret

00007ce8 <__swsetup_r>:
    7ce8:	00800074 	movhi	r2,1
    7cec:	109ab504 	addi	r2,r2,27348
    7cf0:	10800017 	ldw	r2,0(r2)
    7cf4:	defffd04 	addi	sp,sp,-12
    7cf8:	dc400115 	stw	r17,4(sp)
    7cfc:	dc000015 	stw	r16,0(sp)
    7d00:	dfc00215 	stw	ra,8(sp)
    7d04:	2023883a 	mov	r17,r4
    7d08:	2821883a 	mov	r16,r5
    7d0c:	10000226 	beq	r2,zero,7d18 <__swsetup_r+0x30>
    7d10:	10c00e17 	ldw	r3,56(r2)
    7d14:	18003d26 	beq	r3,zero,7e0c <__swsetup_r+0x124>
    7d18:	8080030b 	ldhu	r2,12(r16)
    7d1c:	10c0020c 	andi	r3,r2,8
    7d20:	18ffffcc 	andi	r3,r3,65535
    7d24:	18e0001c 	xori	r3,r3,32768
    7d28:	18e00004 	addi	r3,r3,-32768
    7d2c:	18001226 	beq	r3,zero,7d78 <__swsetup_r+0x90>
    7d30:	80c00417 	ldw	r3,16(r16)
    7d34:	18001f26 	beq	r3,zero,7db4 <__swsetup_r+0xcc>
    7d38:	1100004c 	andi	r4,r2,1
    7d3c:	2000261e 	bne	r4,zero,7dd8 <__swsetup_r+0xf0>
    7d40:	1080008c 	andi	r2,r2,2
    7d44:	10bfffcc 	andi	r2,r2,65535
    7d48:	10a0001c 	xori	r2,r2,32768
    7d4c:	10a00004 	addi	r2,r2,-32768
    7d50:	1000311e 	bne	r2,zero,7e18 <__swsetup_r+0x130>
    7d54:	80800517 	ldw	r2,20(r16)
    7d58:	80800215 	stw	r2,8(r16)
    7d5c:	18002326 	beq	r3,zero,7dec <__swsetup_r+0x104>
    7d60:	0005883a 	mov	r2,zero
    7d64:	dfc00217 	ldw	ra,8(sp)
    7d68:	dc400117 	ldw	r17,4(sp)
    7d6c:	dc000017 	ldw	r16,0(sp)
    7d70:	dec00304 	addi	sp,sp,12
    7d74:	f800283a 	ret
    7d78:	10c0040c 	andi	r3,r2,16
    7d7c:	18ffffcc 	andi	r3,r3,65535
    7d80:	18e0001c 	xori	r3,r3,32768
    7d84:	18e00004 	addi	r3,r3,-32768
    7d88:	18001e26 	beq	r3,zero,7e04 <__swsetup_r+0x11c>
    7d8c:	10c0010c 	andi	r3,r2,4
    7d90:	18ffffcc 	andi	r3,r3,65535
    7d94:	18e0001c 	xori	r3,r3,32768
    7d98:	18e00004 	addi	r3,r3,-32768
    7d9c:	1800211e 	bne	r3,zero,7e24 <__swsetup_r+0x13c>
    7da0:	80c00417 	ldw	r3,16(r16)
    7da4:	11400214 	ori	r5,r2,8
    7da8:	8140030d 	sth	r5,12(r16)
    7dac:	2805883a 	mov	r2,r5
    7db0:	183fe11e 	bne	r3,zero,7d38 <__swsetup_r+0x50>
    7db4:	1140a00c 	andi	r5,r2,640
    7db8:	01008004 	movi	r4,512
    7dbc:	293fde26 	beq	r5,r4,7d38 <__swsetup_r+0x50>
    7dc0:	8809883a 	mov	r4,r17
    7dc4:	800b883a 	mov	r5,r16
    7dc8:	000350c0 	call	350c <__smakebuf_r>
    7dcc:	8080030b 	ldhu	r2,12(r16)
    7dd0:	80c00417 	ldw	r3,16(r16)
    7dd4:	003fd806 	br	7d38 <__swsetup_r+0x50>
    7dd8:	80800517 	ldw	r2,20(r16)
    7ddc:	80000215 	stw	zero,8(r16)
    7de0:	0085c83a 	sub	r2,zero,r2
    7de4:	80800615 	stw	r2,24(r16)
    7de8:	183fdd1e 	bne	r3,zero,7d60 <__swsetup_r+0x78>
    7dec:	8080030b 	ldhu	r2,12(r16)
    7df0:	1080200c 	andi	r2,r2,128
    7df4:	10bfffcc 	andi	r2,r2,65535
    7df8:	10a0001c 	xori	r2,r2,32768
    7dfc:	10a00004 	addi	r2,r2,-32768
    7e00:	103fd826 	beq	r2,zero,7d64 <__swsetup_r+0x7c>
    7e04:	00bfffc4 	movi	r2,-1
    7e08:	003fd606 	br	7d64 <__swsetup_r+0x7c>
    7e0c:	1009883a 	mov	r4,r2
    7e10:	00024340 	call	2434 <__sinit>
    7e14:	003fc006 	br	7d18 <__swsetup_r+0x30>
    7e18:	0005883a 	mov	r2,zero
    7e1c:	80800215 	stw	r2,8(r16)
    7e20:	003fce06 	br	7d5c <__swsetup_r+0x74>
    7e24:	81400c17 	ldw	r5,48(r16)
    7e28:	28000626 	beq	r5,zero,7e44 <__swsetup_r+0x15c>
    7e2c:	80c01004 	addi	r3,r16,64
    7e30:	28c00326 	beq	r5,r3,7e40 <__swsetup_r+0x158>
    7e34:	8809883a 	mov	r4,r17
    7e38:	0002b800 	call	2b80 <_free_r>
    7e3c:	8080030b 	ldhu	r2,12(r16)
    7e40:	80000c15 	stw	zero,48(r16)
    7e44:	80c00417 	ldw	r3,16(r16)
    7e48:	013ff6c4 	movi	r4,-37
    7e4c:	2084703a 	and	r2,r4,r2
    7e50:	80000115 	stw	zero,4(r16)
    7e54:	80c00015 	stw	r3,0(r16)
    7e58:	003fd206 	br	7da4 <__swsetup_r+0xbc>

00007e5c <_close_r>:
    7e5c:	defffd04 	addi	sp,sp,-12
    7e60:	dc400115 	stw	r17,4(sp)
    7e64:	dc000015 	stw	r16,0(sp)
    7e68:	2023883a 	mov	r17,r4
    7e6c:	040000b4 	movhi	r16,2
    7e70:	84219804 	addi	r16,r16,-31136
    7e74:	2809883a 	mov	r4,r5
    7e78:	dfc00215 	stw	ra,8(sp)
    7e7c:	80000015 	stw	zero,0(r16)
    7e80:	001138c0 	call	1138c <close>
    7e84:	00ffffc4 	movi	r3,-1
    7e88:	10c00526 	beq	r2,r3,7ea0 <_close_r+0x44>
    7e8c:	dfc00217 	ldw	ra,8(sp)
    7e90:	dc400117 	ldw	r17,4(sp)
    7e94:	dc000017 	ldw	r16,0(sp)
    7e98:	dec00304 	addi	sp,sp,12
    7e9c:	f800283a 	ret
    7ea0:	80c00017 	ldw	r3,0(r16)
    7ea4:	183ff926 	beq	r3,zero,7e8c <_close_r+0x30>
    7ea8:	88c00015 	stw	r3,0(r17)
    7eac:	dfc00217 	ldw	ra,8(sp)
    7eb0:	dc400117 	ldw	r17,4(sp)
    7eb4:	dc000017 	ldw	r16,0(sp)
    7eb8:	dec00304 	addi	sp,sp,12
    7ebc:	f800283a 	ret

00007ec0 <quorem>:
    7ec0:	defff204 	addi	sp,sp,-56
    7ec4:	dd000815 	stw	r20,32(sp)
    7ec8:	20800417 	ldw	r2,16(r4)
    7ecc:	2d000417 	ldw	r20,16(r5)
    7ed0:	dcc00715 	stw	r19,28(sp)
    7ed4:	dfc00d15 	stw	ra,52(sp)
    7ed8:	df000c15 	stw	fp,48(sp)
    7edc:	ddc00b15 	stw	r23,44(sp)
    7ee0:	dd800a15 	stw	r22,40(sp)
    7ee4:	dd400915 	stw	r21,36(sp)
    7ee8:	dc800615 	stw	r18,24(sp)
    7eec:	dc400515 	stw	r17,20(sp)
    7ef0:	dc000415 	stw	r16,16(sp)
    7ef4:	d9400015 	stw	r5,0(sp)
    7ef8:	2027883a 	mov	r19,r4
    7efc:	15007d16 	blt	r2,r20,80f4 <quorem+0x234>
    7f00:	a0800104 	addi	r2,r20,4
    7f04:	1085883a 	add	r2,r2,r2
    7f08:	1085883a 	add	r2,r2,r2
    7f0c:	28ad883a 	add	r22,r5,r2
    7f10:	2085883a 	add	r2,r4,r2
    7f14:	10800017 	ldw	r2,0(r2)
    7f18:	b1400017 	ldw	r5,0(r22)
    7f1c:	a53fffc4 	addi	r20,r20,-1
    7f20:	1009883a 	mov	r4,r2
    7f24:	29400044 	addi	r5,r5,1
    7f28:	d8800115 	stw	r2,4(sp)
    7f2c:	0010b240 	call	10b24 <__udivsi3>
    7f30:	1025883a 	mov	r18,r2
    7f34:	d8800017 	ldw	r2,0(sp)
    7f38:	9f000504 	addi	fp,r19,20
    7f3c:	14000504 	addi	r16,r2,20
    7f40:	90003626 	beq	r18,zero,801c <quorem+0x15c>
    7f44:	802b883a 	mov	r21,r16
    7f48:	e023883a 	mov	r17,fp
    7f4c:	0007883a 	mov	r3,zero
    7f50:	002f883a 	mov	r23,zero
    7f54:	a9800017 	ldw	r6,0(r21)
    7f58:	900b883a 	mov	r5,r18
    7f5c:	d8c00315 	stw	r3,12(sp)
    7f60:	313fffcc 	andi	r4,r6,65535
    7f64:	d9800215 	stw	r6,8(sp)
    7f68:	00020000 	call	2000 <__mulsi3>
    7f6c:	d9800217 	ldw	r6,8(sp)
    7f70:	d8c00317 	ldw	r3,12(sp)
    7f74:	900b883a 	mov	r5,r18
    7f78:	3008d43a 	srli	r4,r6,16
    7f7c:	1887883a 	add	r3,r3,r2
    7f80:	d8c00315 	stw	r3,12(sp)
    7f84:	00020000 	call	2000 <__mulsi3>
    7f88:	89400017 	ldw	r5,0(r17)
    7f8c:	d8c00317 	ldw	r3,12(sp)
    7f90:	ad400104 	addi	r21,r21,4
    7f94:	293fffcc 	andi	r4,r5,65535
    7f98:	1810d43a 	srli	r8,r3,16
    7f9c:	25c9883a 	add	r4,r4,r23
    7fa0:	18ffffcc 	andi	r3,r3,65535
    7fa4:	20c9c83a 	sub	r4,r4,r3
    7fa8:	280cd43a 	srli	r6,r5,16
    7fac:	4085883a 	add	r2,r8,r2
    7fb0:	2007d43a 	srai	r3,r4,16
    7fb4:	117fffcc 	andi	r5,r2,65535
    7fb8:	314bc83a 	sub	r5,r6,r5
    7fbc:	28cb883a 	add	r5,r5,r3
    7fc0:	8940008d 	sth	r5,2(r17)
    7fc4:	8900000d 	sth	r4,0(r17)
    7fc8:	1006d43a 	srli	r3,r2,16
    7fcc:	282fd43a 	srai	r23,r5,16
    7fd0:	8c400104 	addi	r17,r17,4
    7fd4:	b57fdf2e 	bgeu	r22,r21,7f54 <quorem+0x94>
    7fd8:	d8c00117 	ldw	r3,4(sp)
    7fdc:	18000f1e 	bne	r3,zero,801c <quorem+0x15c>
    7fe0:	a0800144 	addi	r2,r20,5
    7fe4:	1085883a 	add	r2,r2,r2
    7fe8:	1085883a 	add	r2,r2,r2
    7fec:	9887883a 	add	r3,r19,r2
    7ff0:	18bfff04 	addi	r2,r3,-4
    7ff4:	e080082e 	bgeu	fp,r2,8018 <quorem+0x158>
    7ff8:	18ffff17 	ldw	r3,-4(r3)
    7ffc:	18000326 	beq	r3,zero,800c <quorem+0x14c>
    8000:	00000506 	br	8018 <quorem+0x158>
    8004:	10c00017 	ldw	r3,0(r2)
    8008:	1800031e 	bne	r3,zero,8018 <quorem+0x158>
    800c:	10bfff04 	addi	r2,r2,-4
    8010:	a53fffc4 	addi	r20,r20,-1
    8014:	e0bffb36 	bltu	fp,r2,8004 <quorem+0x144>
    8018:	9d000415 	stw	r20,16(r19)
    801c:	d9400017 	ldw	r5,0(sp)
    8020:	9809883a 	mov	r4,r19
    8024:	000ab300 	call	ab30 <__mcmp>
    8028:	10002516 	blt	r2,zero,80c0 <quorem+0x200>
    802c:	94800044 	addi	r18,r18,1
    8030:	e007883a 	mov	r3,fp
    8034:	000d883a 	mov	r6,zero
    8038:	18800017 	ldw	r2,0(r3)
    803c:	82000017 	ldw	r8,0(r16)
    8040:	84000104 	addi	r16,r16,4
    8044:	11ffffcc 	andi	r7,r2,65535
    8048:	413fffcc 	andi	r4,r8,65535
    804c:	398d883a 	add	r6,r7,r6
    8050:	310fc83a 	sub	r7,r6,r4
    8054:	4010d43a 	srli	r8,r8,16
    8058:	100cd43a 	srli	r6,r2,16
    805c:	3809d43a 	srai	r4,r7,16
    8060:	19c0000d 	sth	r7,0(r3)
    8064:	320dc83a 	sub	r6,r6,r8
    8068:	310d883a 	add	r6,r6,r4
    806c:	1980008d 	sth	r6,2(r3)
    8070:	300dd43a 	srai	r6,r6,16
    8074:	18c00104 	addi	r3,r3,4
    8078:	b43fef2e 	bgeu	r22,r16,8038 <quorem+0x178>
    807c:	a0800144 	addi	r2,r20,5
    8080:	1085883a 	add	r2,r2,r2
    8084:	1085883a 	add	r2,r2,r2
    8088:	9885883a 	add	r2,r19,r2
    808c:	10c00017 	ldw	r3,0(r2)
    8090:	18000b1e 	bne	r3,zero,80c0 <quorem+0x200>
    8094:	10ffff04 	addi	r3,r2,-4
    8098:	e0c0082e 	bgeu	fp,r3,80bc <quorem+0x1fc>
    809c:	10bfff17 	ldw	r2,-4(r2)
    80a0:	10000326 	beq	r2,zero,80b0 <quorem+0x1f0>
    80a4:	00000506 	br	80bc <quorem+0x1fc>
    80a8:	18800017 	ldw	r2,0(r3)
    80ac:	1000031e 	bne	r2,zero,80bc <quorem+0x1fc>
    80b0:	18ffff04 	addi	r3,r3,-4
    80b4:	a53fffc4 	addi	r20,r20,-1
    80b8:	e0fffb36 	bltu	fp,r3,80a8 <quorem+0x1e8>
    80bc:	9d000415 	stw	r20,16(r19)
    80c0:	9005883a 	mov	r2,r18
    80c4:	dfc00d17 	ldw	ra,52(sp)
    80c8:	df000c17 	ldw	fp,48(sp)
    80cc:	ddc00b17 	ldw	r23,44(sp)
    80d0:	dd800a17 	ldw	r22,40(sp)
    80d4:	dd400917 	ldw	r21,36(sp)
    80d8:	dd000817 	ldw	r20,32(sp)
    80dc:	dcc00717 	ldw	r19,28(sp)
    80e0:	dc800617 	ldw	r18,24(sp)
    80e4:	dc400517 	ldw	r17,20(sp)
    80e8:	dc000417 	ldw	r16,16(sp)
    80ec:	dec00e04 	addi	sp,sp,56
    80f0:	f800283a 	ret
    80f4:	0005883a 	mov	r2,zero
    80f8:	003ff206 	br	80c4 <quorem+0x204>

000080fc <_dtoa_r>:
    80fc:	20801017 	ldw	r2,64(r4)
    8100:	deffdf04 	addi	sp,sp,-132
    8104:	dcc01a15 	stw	r19,104(sp)
    8108:	dc801915 	stw	r18,100(sp)
    810c:	dc401815 	stw	r17,96(sp)
    8110:	dc001715 	stw	r16,92(sp)
    8114:	dfc02015 	stw	ra,128(sp)
    8118:	df001f15 	stw	fp,124(sp)
    811c:	ddc01e15 	stw	r23,120(sp)
    8120:	dd801d15 	stw	r22,116(sp)
    8124:	dd401c15 	stw	r21,112(sp)
    8128:	dd001b15 	stw	r20,108(sp)
    812c:	d9400315 	stw	r5,12(sp)
    8130:	d9c00415 	stw	r7,16(sp)
    8134:	2021883a 	mov	r16,r4
    8138:	3025883a 	mov	r18,r6
    813c:	dcc02317 	ldw	r19,140(sp)
    8140:	3023883a 	mov	r17,r6
    8144:	10000826 	beq	r2,zero,8168 <_dtoa_r+0x6c>
    8148:	20c01117 	ldw	r3,68(r4)
    814c:	01800044 	movi	r6,1
    8150:	100b883a 	mov	r5,r2
    8154:	30cc983a 	sll	r6,r6,r3
    8158:	10c00115 	stw	r3,4(r2)
    815c:	11800215 	stw	r6,8(r2)
    8160:	000a28c0 	call	a28c <_Bfree>
    8164:	80001015 	stw	zero,64(r16)
    8168:	90002f16 	blt	r18,zero,8228 <_dtoa_r+0x12c>
    816c:	98000015 	stw	zero,0(r19)
    8170:	90dffc2c 	andhi	r3,r18,32752
    8174:	009ffc34 	movhi	r2,32752
    8178:	18801c26 	beq	r3,r2,81ec <_dtoa_r+0xf0>
    817c:	d9000317 	ldw	r4,12(sp)
    8180:	880b883a 	mov	r5,r17
    8184:	000d883a 	mov	r6,zero
    8188:	000f883a 	mov	r7,zero
    818c:	00104a80 	call	104a8 <__eqdf2>
    8190:	10002c1e 	bne	r2,zero,8244 <_dtoa_r+0x148>
    8194:	d9002217 	ldw	r4,136(sp)
    8198:	d9c02417 	ldw	r7,144(sp)
    819c:	00800044 	movi	r2,1
    81a0:	20800015 	stw	r2,0(r4)
    81a4:	38019426 	beq	r7,zero,87f8 <_dtoa_r+0x6fc>
    81a8:	00800074 	movhi	r2,1
    81ac:	1092a244 	addi	r2,r2,19081
    81b0:	38800015 	stw	r2,0(r7)
    81b4:	15ffffc4 	addi	r23,r2,-1
    81b8:	b805883a 	mov	r2,r23
    81bc:	dfc02017 	ldw	ra,128(sp)
    81c0:	df001f17 	ldw	fp,124(sp)
    81c4:	ddc01e17 	ldw	r23,120(sp)
    81c8:	dd801d17 	ldw	r22,116(sp)
    81cc:	dd401c17 	ldw	r21,112(sp)
    81d0:	dd001b17 	ldw	r20,108(sp)
    81d4:	dcc01a17 	ldw	r19,104(sp)
    81d8:	dc801917 	ldw	r18,100(sp)
    81dc:	dc401817 	ldw	r17,96(sp)
    81e0:	dc001717 	ldw	r16,92(sp)
    81e4:	dec02104 	addi	sp,sp,132
    81e8:	f800283a 	ret
    81ec:	d8c02217 	ldw	r3,136(sp)
    81f0:	d9000317 	ldw	r4,12(sp)
    81f4:	0089c3c4 	movi	r2,9999
    81f8:	18800015 	stw	r2,0(r3)
    81fc:	20016c26 	beq	r4,zero,87b0 <_dtoa_r+0x6b4>
    8200:	05c00074 	movhi	r23,1
    8204:	bdd35904 	addi	r23,r23,19812
    8208:	d9c02417 	ldw	r7,144(sp)
    820c:	383fea26 	beq	r7,zero,81b8 <_dtoa_r+0xbc>
    8210:	b88000c7 	ldb	r2,3(r23)
    8214:	10016d1e 	bne	r2,zero,87cc <_dtoa_r+0x6d0>
    8218:	b88000c4 	addi	r2,r23,3
    821c:	d8c02417 	ldw	r3,144(sp)
    8220:	18800015 	stw	r2,0(r3)
    8224:	003fe406 	br	81b8 <_dtoa_r+0xbc>
    8228:	04600034 	movhi	r17,32768
    822c:	8c7fffc4 	addi	r17,r17,-1
    8230:	9462703a 	and	r17,r18,r17
    8234:	00800044 	movi	r2,1
    8238:	98800015 	stw	r2,0(r19)
    823c:	8825883a 	mov	r18,r17
    8240:	003fcb06 	br	8170 <_dtoa_r+0x74>
    8244:	d9400317 	ldw	r5,12(sp)
    8248:	9028d53a 	srli	r20,r18,20
    824c:	d8800204 	addi	r2,sp,8
    8250:	d8800015 	stw	r2,0(sp)
    8254:	8009883a 	mov	r4,r16
    8258:	880d883a 	mov	r6,r17
    825c:	d9c00104 	addi	r7,sp,4
    8260:	000aed80 	call	aed8 <__d2b>
    8264:	a501ffcc 	andi	r20,r20,2047
    8268:	1039883a 	mov	fp,r2
    826c:	a001591e 	bne	r20,zero,87d4 <_dtoa_r+0x6d8>
    8270:	dd400217 	ldw	r21,8(sp)
    8274:	dd000117 	ldw	r20,4(sp)
    8278:	00befbc4 	movi	r2,-1041
    827c:	ad29883a 	add	r20,r21,r20
    8280:	a082d216 	blt	r20,r2,8dcc <_dtoa_r+0xcd0>
    8284:	d8c00317 	ldw	r3,12(sp)
    8288:	013f0384 	movi	r4,-1010
    828c:	2509c83a 	sub	r4,r4,r20
    8290:	a0810484 	addi	r2,r20,1042
    8294:	9124983a 	sll	r18,r18,r4
    8298:	1884d83a 	srl	r2,r3,r2
    829c:	9088b03a 	or	r4,r18,r2
    82a0:	00108e80 	call	108e8 <__floatunsidf>
    82a4:	1009883a 	mov	r4,r2
    82a8:	017f8434 	movhi	r5,65040
    82ac:	00800044 	movi	r2,1
    82b0:	194b883a 	add	r5,r3,r5
    82b4:	a53fffc4 	addi	r20,r20,-1
    82b8:	d8800f15 	stw	r2,60(sp)
    82bc:	000d883a 	mov	r6,zero
    82c0:	01cffe34 	movhi	r7,16376
    82c4:	000ffb00 	call	ffb0 <__subdf3>
    82c8:	1009883a 	mov	r4,r2
    82cc:	180b883a 	mov	r5,r3
    82d0:	0198dbf4 	movhi	r6,25455
    82d4:	3190d844 	addi	r6,r6,17249
    82d8:	01cff4f4 	movhi	r7,16339
    82dc:	39e1e9c4 	addi	r7,r7,-30809
    82e0:	00100100 	call	10010 <__muldf3>
    82e4:	180b883a 	mov	r5,r3
    82e8:	01a2d874 	movhi	r6,35681
    82ec:	31b22cc4 	addi	r6,r6,-14157
    82f0:	01cff1f4 	movhi	r7,16327
    82f4:	39e28a04 	addi	r7,r7,-30168
    82f8:	1009883a 	mov	r4,r2
    82fc:	000ff5c0 	call	ff5c <__adddf3>
    8300:	a009883a 	mov	r4,r20
    8304:	1027883a 	mov	r19,r2
    8308:	1825883a 	mov	r18,r3
    830c:	00106e00 	call	106e0 <__floatsidf>
    8310:	1009883a 	mov	r4,r2
    8314:	180b883a 	mov	r5,r3
    8318:	019427f4 	movhi	r6,20639
    831c:	319e7ec4 	addi	r6,r6,31227
    8320:	01cff4f4 	movhi	r7,16339
    8324:	39d104c4 	addi	r7,r7,17427
    8328:	00100100 	call	10010 <__muldf3>
    832c:	9809883a 	mov	r4,r19
    8330:	900b883a 	mov	r5,r18
    8334:	100d883a 	mov	r6,r2
    8338:	180f883a 	mov	r7,r3
    833c:	000ff5c0 	call	ff5c <__adddf3>
    8340:	1009883a 	mov	r4,r2
    8344:	180b883a 	mov	r5,r3
    8348:	1027883a 	mov	r19,r2
    834c:	1825883a 	mov	r18,r3
    8350:	00107b40 	call	107b4 <__fixdfsi>
    8354:	9809883a 	mov	r4,r19
    8358:	900b883a 	mov	r5,r18
    835c:	000d883a 	mov	r6,zero
    8360:	000f883a 	mov	r7,zero
    8364:	d8800615 	stw	r2,24(sp)
    8368:	00106280 	call	10628 <__ltdf2>
    836c:	10027e16 	blt	r2,zero,8d68 <_dtoa_r+0xc6c>
    8370:	d8c00617 	ldw	r3,24(sp)
    8374:	00800584 	movi	r2,22
    8378:	10c26c36 	bltu	r2,r3,8d2c <_dtoa_r+0xc30>
    837c:	180490fa 	slli	r2,r3,3
    8380:	00c00074 	movhi	r3,1
    8384:	18d37e04 	addi	r3,r3,19960
    8388:	d9800317 	ldw	r6,12(sp)
    838c:	1885883a 	add	r2,r3,r2
    8390:	11000017 	ldw	r4,0(r2)
    8394:	11400117 	ldw	r5,4(r2)
    8398:	880f883a 	mov	r7,r17
    839c:	00105600 	call	10560 <__gtdf2>
    83a0:	00828f0e 	bge	zero,r2,8de0 <_dtoa_r+0xce4>
    83a4:	d8800617 	ldw	r2,24(sp)
    83a8:	d8000d15 	stw	zero,52(sp)
    83ac:	10bfffc4 	addi	r2,r2,-1
    83b0:	d8800615 	stw	r2,24(sp)
    83b4:	ad29c83a 	sub	r20,r21,r20
    83b8:	a53fffc4 	addi	r20,r20,-1
    83bc:	a0026616 	blt	r20,zero,8d58 <_dtoa_r+0xc5c>
    83c0:	dd000715 	stw	r20,28(sp)
    83c4:	d8000815 	stw	zero,32(sp)
    83c8:	d8800617 	ldw	r2,24(sp)
    83cc:	10025a16 	blt	r2,zero,8d38 <_dtoa_r+0xc3c>
    83d0:	d8c00717 	ldw	r3,28(sp)
    83d4:	d8800b15 	stw	r2,44(sp)
    83d8:	d8000a15 	stw	zero,40(sp)
    83dc:	1887883a 	add	r3,r3,r2
    83e0:	d8c00715 	stw	r3,28(sp)
    83e4:	d9c00417 	ldw	r7,16(sp)
    83e8:	00800244 	movi	r2,9
    83ec:	11c10536 	bltu	r2,r7,8804 <_dtoa_r+0x708>
    83f0:	00800144 	movi	r2,5
    83f4:	11c4c60e 	bge	r2,r7,9710 <_dtoa_r+0x1614>
    83f8:	39ffff04 	addi	r7,r7,-4
    83fc:	d9c00415 	stw	r7,16(sp)
    8400:	0027883a 	mov	r19,zero
    8404:	d9c00417 	ldw	r7,16(sp)
    8408:	008000c4 	movi	r2,3
    840c:	3883a226 	beq	r7,r2,9298 <_dtoa_r+0x119c>
    8410:	11c2bc16 	blt	r2,r7,8f04 <_dtoa_r+0xe08>
    8414:	00800084 	movi	r2,2
    8418:	3880fb1e 	bne	r7,r2,8808 <_dtoa_r+0x70c>
    841c:	d8000c15 	stw	zero,48(sp)
    8420:	d9002117 	ldw	r4,132(sp)
    8424:	0103ae0e 	bge	zero,r4,92e0 <_dtoa_r+0x11e4>
    8428:	2025883a 	mov	r18,r4
    842c:	d9000e15 	stw	r4,56(sp)
    8430:	d9000915 	stw	r4,36(sp)
    8434:	80001115 	stw	zero,68(r16)
    8438:	008005c4 	movi	r2,23
    843c:	1484b22e 	bgeu	r2,r18,9708 <_dtoa_r+0x160c>
    8440:	00c00044 	movi	r3,1
    8444:	00800104 	movi	r2,4
    8448:	1085883a 	add	r2,r2,r2
    844c:	11000504 	addi	r4,r2,20
    8450:	180b883a 	mov	r5,r3
    8454:	18c00044 	addi	r3,r3,1
    8458:	913ffb2e 	bgeu	r18,r4,8448 <_dtoa_r+0x34c>
    845c:	81401115 	stw	r5,68(r16)
    8460:	8009883a 	mov	r4,r16
    8464:	000a1e40 	call	a1e4 <_Balloc>
    8468:	102f883a 	mov	r23,r2
    846c:	80801015 	stw	r2,64(r16)
    8470:	00800384 	movi	r2,14
    8474:	1480f036 	bltu	r2,r18,8838 <_dtoa_r+0x73c>
    8478:	9800ef26 	beq	r19,zero,8838 <_dtoa_r+0x73c>
    847c:	d8800617 	ldw	r2,24(sp)
    8480:	00839c0e 	bge	zero,r2,92f4 <_dtoa_r+0x11f8>
    8484:	d8c00617 	ldw	r3,24(sp)
    8488:	108003cc 	andi	r2,r2,15
    848c:	100490fa 	slli	r2,r2,3
    8490:	182bd13a 	srai	r21,r3,4
    8494:	00c00074 	movhi	r3,1
    8498:	18d37e04 	addi	r3,r3,19960
    849c:	1885883a 	add	r2,r3,r2
    84a0:	a8c0040c 	andi	r3,r21,16
    84a4:	12800017 	ldw	r10,0(r2)
    84a8:	15800117 	ldw	r22,4(r2)
    84ac:	18038726 	beq	r3,zero,92cc <_dtoa_r+0x11d0>
    84b0:	00800074 	movhi	r2,1
    84b4:	10937404 	addi	r2,r2,19920
    84b8:	11800817 	ldw	r6,32(r2)
    84bc:	11c00917 	ldw	r7,36(r2)
    84c0:	d9000317 	ldw	r4,12(sp)
    84c4:	880b883a 	mov	r5,r17
    84c8:	da801515 	stw	r10,84(sp)
    84cc:	00102f40 	call	102f4 <__divdf3>
    84d0:	da801517 	ldw	r10,84(sp)
    84d4:	d8801015 	stw	r2,64(sp)
    84d8:	1829883a 	mov	r20,r3
    84dc:	ad4003cc 	andi	r21,r21,15
    84e0:	048000c4 	movi	r18,3
    84e4:	a8001126 	beq	r21,zero,852c <_dtoa_r+0x430>
    84e8:	04c00074 	movhi	r19,1
    84ec:	9cd37404 	addi	r19,r19,19920
    84f0:	5005883a 	mov	r2,r10
    84f4:	b007883a 	mov	r3,r22
    84f8:	a980004c 	andi	r6,r21,1
    84fc:	1009883a 	mov	r4,r2
    8500:	a82bd07a 	srai	r21,r21,1
    8504:	180b883a 	mov	r5,r3
    8508:	30000426 	beq	r6,zero,851c <_dtoa_r+0x420>
    850c:	99800017 	ldw	r6,0(r19)
    8510:	99c00117 	ldw	r7,4(r19)
    8514:	94800044 	addi	r18,r18,1
    8518:	00100100 	call	10010 <__muldf3>
    851c:	9cc00204 	addi	r19,r19,8
    8520:	a83ff51e 	bne	r21,zero,84f8 <_dtoa_r+0x3fc>
    8524:	1015883a 	mov	r10,r2
    8528:	182d883a 	mov	r22,r3
    852c:	d9001017 	ldw	r4,64(sp)
    8530:	a00b883a 	mov	r5,r20
    8534:	500d883a 	mov	r6,r10
    8538:	b00f883a 	mov	r7,r22
    853c:	00102f40 	call	102f4 <__divdf3>
    8540:	1027883a 	mov	r19,r2
    8544:	1829883a 	mov	r20,r3
    8548:	d8c00d17 	ldw	r3,52(sp)
    854c:	18000626 	beq	r3,zero,8568 <_dtoa_r+0x46c>
    8550:	9809883a 	mov	r4,r19
    8554:	a00b883a 	mov	r5,r20
    8558:	000d883a 	mov	r6,zero
    855c:	01cffc34 	movhi	r7,16368
    8560:	00106280 	call	10628 <__ltdf2>
    8564:	10040e16 	blt	r2,zero,95a0 <_dtoa_r+0x14a4>
    8568:	9009883a 	mov	r4,r18
    856c:	00106e00 	call	106e0 <__floatsidf>
    8570:	1009883a 	mov	r4,r2
    8574:	180b883a 	mov	r5,r3
    8578:	980d883a 	mov	r6,r19
    857c:	a00f883a 	mov	r7,r20
    8580:	00100100 	call	10010 <__muldf3>
    8584:	1009883a 	mov	r4,r2
    8588:	180b883a 	mov	r5,r3
    858c:	000d883a 	mov	r6,zero
    8590:	01d00734 	movhi	r7,16412
    8594:	000ff5c0 	call	ff5c <__adddf3>
    8598:	057f3034 	movhi	r21,64704
    859c:	1d6b883a 	add	r21,r3,r21
    85a0:	d8c00917 	ldw	r3,36(sp)
    85a4:	1025883a 	mov	r18,r2
    85a8:	18031f26 	beq	r3,zero,9228 <_dtoa_r+0x112c>
    85ac:	d8800617 	ldw	r2,24(sp)
    85b0:	dac00917 	ldw	r11,36(sp)
    85b4:	d8801315 	stw	r2,76(sp)
    85b8:	d8c00c17 	ldw	r3,48(sp)
    85bc:	18039026 	beq	r3,zero,9400 <_dtoa_r+0x1304>
    85c0:	58bfffc4 	addi	r2,r11,-1
    85c4:	100490fa 	slli	r2,r2,3
    85c8:	00c00074 	movhi	r3,1
    85cc:	18d37e04 	addi	r3,r3,19960
    85d0:	0009883a 	mov	r4,zero
    85d4:	1885883a 	add	r2,r3,r2
    85d8:	11800017 	ldw	r6,0(r2)
    85dc:	11c00117 	ldw	r7,4(r2)
    85e0:	014ff834 	movhi	r5,16352
    85e4:	dac01615 	stw	r11,88(sp)
    85e8:	00102f40 	call	102f4 <__divdf3>
    85ec:	900d883a 	mov	r6,r18
    85f0:	a80f883a 	mov	r7,r21
    85f4:	1009883a 	mov	r4,r2
    85f8:	180b883a 	mov	r5,r3
    85fc:	000ffb00 	call	ffb0 <__subdf3>
    8600:	a00b883a 	mov	r5,r20
    8604:	9809883a 	mov	r4,r19
    8608:	182b883a 	mov	r21,r3
    860c:	d8801015 	stw	r2,64(sp)
    8610:	00107b40 	call	107b4 <__fixdfsi>
    8614:	1009883a 	mov	r4,r2
    8618:	d8801515 	stw	r2,84(sp)
    861c:	00106e00 	call	106e0 <__floatsidf>
    8620:	9809883a 	mov	r4,r19
    8624:	a00b883a 	mov	r5,r20
    8628:	100d883a 	mov	r6,r2
    862c:	180f883a 	mov	r7,r3
    8630:	000ffb00 	call	ffb0 <__subdf3>
    8634:	da401517 	ldw	r9,84(sp)
    8638:	d9001017 	ldw	r4,64(sp)
    863c:	a80b883a 	mov	r5,r21
    8640:	4d000c04 	addi	r20,r9,48
    8644:	bd000005 	stb	r20,0(r23)
    8648:	100d883a 	mov	r6,r2
    864c:	180f883a 	mov	r7,r3
    8650:	bd800044 	addi	r22,r23,1
    8654:	1025883a 	mov	r18,r2
    8658:	1827883a 	mov	r19,r3
    865c:	00105600 	call	10560 <__gtdf2>
    8660:	00842216 	blt	zero,r2,96ec <_dtoa_r+0x15f0>
    8664:	0009883a 	mov	r4,zero
    8668:	014ffc34 	movhi	r5,16368
    866c:	900d883a 	mov	r6,r18
    8670:	980f883a 	mov	r7,r19
    8674:	000ffb00 	call	ffb0 <__subdf3>
    8678:	d9001017 	ldw	r4,64(sp)
    867c:	a80b883a 	mov	r5,r21
    8680:	100d883a 	mov	r6,r2
    8684:	180f883a 	mov	r7,r3
    8688:	00105600 	call	10560 <__gtdf2>
    868c:	dac01617 	ldw	r11,88(sp)
    8690:	00841316 	blt	zero,r2,96e0 <_dtoa_r+0x15e4>
    8694:	00800044 	movi	r2,1
    8698:	12c0670e 	bge	r2,r11,8838 <_dtoa_r+0x73c>
    869c:	bad7883a 	add	r11,r23,r11
    86a0:	df001115 	stw	fp,68(sp)
    86a4:	dc401215 	stw	r17,72(sp)
    86a8:	5839883a 	mov	fp,r11
    86ac:	dc401017 	ldw	r17,64(sp)
    86b0:	00000806 	br	86d4 <_dtoa_r+0x5d8>
    86b4:	000ffb00 	call	ffb0 <__subdf3>
    86b8:	1009883a 	mov	r4,r2
    86bc:	180b883a 	mov	r5,r3
    86c0:	880d883a 	mov	r6,r17
    86c4:	a80f883a 	mov	r7,r21
    86c8:	00106280 	call	10628 <__ltdf2>
    86cc:	1003ee16 	blt	r2,zero,9688 <_dtoa_r+0x158c>
    86d0:	b703f126 	beq	r22,fp,9698 <_dtoa_r+0x159c>
    86d4:	8809883a 	mov	r4,r17
    86d8:	a80b883a 	mov	r5,r21
    86dc:	000d883a 	mov	r6,zero
    86e0:	01d00934 	movhi	r7,16420
    86e4:	00100100 	call	10010 <__muldf3>
    86e8:	000d883a 	mov	r6,zero
    86ec:	01d00934 	movhi	r7,16420
    86f0:	9009883a 	mov	r4,r18
    86f4:	980b883a 	mov	r5,r19
    86f8:	1023883a 	mov	r17,r2
    86fc:	182b883a 	mov	r21,r3
    8700:	00100100 	call	10010 <__muldf3>
    8704:	180b883a 	mov	r5,r3
    8708:	1009883a 	mov	r4,r2
    870c:	1825883a 	mov	r18,r3
    8710:	1027883a 	mov	r19,r2
    8714:	00107b40 	call	107b4 <__fixdfsi>
    8718:	1009883a 	mov	r4,r2
    871c:	1029883a 	mov	r20,r2
    8720:	00106e00 	call	106e0 <__floatsidf>
    8724:	9809883a 	mov	r4,r19
    8728:	900b883a 	mov	r5,r18
    872c:	100d883a 	mov	r6,r2
    8730:	180f883a 	mov	r7,r3
    8734:	000ffb00 	call	ffb0 <__subdf3>
    8738:	a5000c04 	addi	r20,r20,48
    873c:	b5000005 	stb	r20,0(r22)
    8740:	1009883a 	mov	r4,r2
    8744:	180b883a 	mov	r5,r3
    8748:	880d883a 	mov	r6,r17
    874c:	a80f883a 	mov	r7,r21
    8750:	1025883a 	mov	r18,r2
    8754:	1827883a 	mov	r19,r3
    8758:	00106280 	call	10628 <__ltdf2>
    875c:	b5800044 	addi	r22,r22,1
    8760:	0009883a 	mov	r4,zero
    8764:	014ffc34 	movhi	r5,16368
    8768:	900d883a 	mov	r6,r18
    876c:	980f883a 	mov	r7,r19
    8770:	103fd00e 	bge	r2,zero,86b4 <_dtoa_r+0x5b8>
    8774:	d9001317 	ldw	r4,76(sp)
    8778:	df001117 	ldw	fp,68(sp)
    877c:	d9000615 	stw	r4,24(sp)
    8780:	8009883a 	mov	r4,r16
    8784:	e00b883a 	mov	r5,fp
    8788:	000a28c0 	call	a28c <_Bfree>
    878c:	d9c00617 	ldw	r7,24(sp)
    8790:	d8c02217 	ldw	r3,136(sp)
    8794:	d9002417 	ldw	r4,144(sp)
    8798:	b0000005 	stb	zero,0(r22)
    879c:	38800044 	addi	r2,r7,1
    87a0:	18800015 	stw	r2,0(r3)
    87a4:	203e8426 	beq	r4,zero,81b8 <_dtoa_r+0xbc>
    87a8:	25800015 	stw	r22,0(r4)
    87ac:	003e8206 	br	81b8 <_dtoa_r+0xbc>
    87b0:	00800434 	movhi	r2,16
    87b4:	10bfffc4 	addi	r2,r2,-1
    87b8:	90a4703a 	and	r18,r18,r2
    87bc:	903e901e 	bne	r18,zero,8200 <_dtoa_r+0x104>
    87c0:	05c00074 	movhi	r23,1
    87c4:	bdd35604 	addi	r23,r23,19800
    87c8:	003e8f06 	br	8208 <_dtoa_r+0x10c>
    87cc:	b8800204 	addi	r2,r23,8
    87d0:	003e9206 	br	821c <_dtoa_r+0x120>
    87d4:	01400434 	movhi	r5,16
    87d8:	297fffc4 	addi	r5,r5,-1
    87dc:	894a703a 	and	r5,r17,r5
    87e0:	d9000317 	ldw	r4,12(sp)
    87e4:	294ffc34 	orhi	r5,r5,16368
    87e8:	a53f0044 	addi	r20,r20,-1023
    87ec:	dd400217 	ldw	r21,8(sp)
    87f0:	d8000f15 	stw	zero,60(sp)
    87f4:	003eb106 	br	82bc <_dtoa_r+0x1c0>
    87f8:	05c00074 	movhi	r23,1
    87fc:	bdd2a204 	addi	r23,r23,19080
    8800:	003e6d06 	br	81b8 <_dtoa_r+0xbc>
    8804:	d8000415 	stw	zero,16(sp)
    8808:	80001115 	stw	zero,68(r16)
    880c:	8009883a 	mov	r4,r16
    8810:	000b883a 	mov	r5,zero
    8814:	000a1e40 	call	a1e4 <_Balloc>
    8818:	01ffffc4 	movi	r7,-1
    881c:	102f883a 	mov	r23,r2
    8820:	80801015 	stw	r2,64(r16)
    8824:	00800044 	movi	r2,1
    8828:	d9c00915 	stw	r7,36(sp)
    882c:	d8002115 	stw	zero,132(sp)
    8830:	d9c00e15 	stw	r7,56(sp)
    8834:	d8800c15 	stw	r2,48(sp)
    8838:	d8800117 	ldw	r2,4(sp)
    883c:	10008b16 	blt	r2,zero,8a6c <_dtoa_r+0x970>
    8840:	d9000617 	ldw	r4,24(sp)
    8844:	00c00384 	movi	r3,14
    8848:	19008816 	blt	r3,r4,8a6c <_dtoa_r+0x970>
    884c:	200490fa 	slli	r2,r4,3
    8850:	d9c02117 	ldw	r7,132(sp)
    8854:	00c00074 	movhi	r3,1
    8858:	18d37e04 	addi	r3,r3,19960
    885c:	1885883a 	add	r2,r3,r2
    8860:	14800017 	ldw	r18,0(r2)
    8864:	14c00117 	ldw	r19,4(r2)
    8868:	3801c916 	blt	r7,zero,8f90 <_dtoa_r+0xe94>
    886c:	d9000317 	ldw	r4,12(sp)
    8870:	900d883a 	mov	r6,r18
    8874:	980f883a 	mov	r7,r19
    8878:	880b883a 	mov	r5,r17
    887c:	00102f40 	call	102f4 <__divdf3>
    8880:	180b883a 	mov	r5,r3
    8884:	1009883a 	mov	r4,r2
    8888:	00107b40 	call	107b4 <__fixdfsi>
    888c:	1009883a 	mov	r4,r2
    8890:	102b883a 	mov	r21,r2
    8894:	00106e00 	call	106e0 <__floatsidf>
    8898:	1009883a 	mov	r4,r2
    889c:	180b883a 	mov	r5,r3
    88a0:	900d883a 	mov	r6,r18
    88a4:	980f883a 	mov	r7,r19
    88a8:	00100100 	call	10010 <__muldf3>
    88ac:	d9000317 	ldw	r4,12(sp)
    88b0:	880b883a 	mov	r5,r17
    88b4:	100d883a 	mov	r6,r2
    88b8:	180f883a 	mov	r7,r3
    88bc:	000ffb00 	call	ffb0 <__subdf3>
    88c0:	d9c00917 	ldw	r7,36(sp)
    88c4:	1009883a 	mov	r4,r2
    88c8:	a8800c04 	addi	r2,r21,48
    88cc:	b8800005 	stb	r2,0(r23)
    88d0:	01800044 	movi	r6,1
    88d4:	180b883a 	mov	r5,r3
    88d8:	2005883a 	mov	r2,r4
    88dc:	bd800044 	addi	r22,r23,1
    88e0:	39803726 	beq	r7,r6,89c0 <_dtoa_r+0x8c4>
    88e4:	000d883a 	mov	r6,zero
    88e8:	01d00934 	movhi	r7,16420
    88ec:	00100100 	call	10010 <__muldf3>
    88f0:	1009883a 	mov	r4,r2
    88f4:	180b883a 	mov	r5,r3
    88f8:	000d883a 	mov	r6,zero
    88fc:	000f883a 	mov	r7,zero
    8900:	1029883a 	mov	r20,r2
    8904:	1823883a 	mov	r17,r3
    8908:	00104a80 	call	104a8 <__eqdf2>
    890c:	103f9c26 	beq	r2,zero,8780 <_dtoa_r+0x684>
    8910:	dd400917 	ldw	r21,36(sp)
    8914:	dc000415 	stw	r16,16(sp)
    8918:	00000906 	br	8940 <_dtoa_r+0x844>
    891c:	00100100 	call	10010 <__muldf3>
    8920:	1009883a 	mov	r4,r2
    8924:	180b883a 	mov	r5,r3
    8928:	000d883a 	mov	r6,zero
    892c:	000f883a 	mov	r7,zero
    8930:	1029883a 	mov	r20,r2
    8934:	1823883a 	mov	r17,r3
    8938:	00104a80 	call	104a8 <__eqdf2>
    893c:	10022926 	beq	r2,zero,91e4 <_dtoa_r+0x10e8>
    8940:	900d883a 	mov	r6,r18
    8944:	980f883a 	mov	r7,r19
    8948:	a009883a 	mov	r4,r20
    894c:	880b883a 	mov	r5,r17
    8950:	00102f40 	call	102f4 <__divdf3>
    8954:	180b883a 	mov	r5,r3
    8958:	1009883a 	mov	r4,r2
    895c:	00107b40 	call	107b4 <__fixdfsi>
    8960:	1009883a 	mov	r4,r2
    8964:	1021883a 	mov	r16,r2
    8968:	00106e00 	call	106e0 <__floatsidf>
    896c:	1009883a 	mov	r4,r2
    8970:	180b883a 	mov	r5,r3
    8974:	900d883a 	mov	r6,r18
    8978:	980f883a 	mov	r7,r19
    897c:	00100100 	call	10010 <__muldf3>
    8980:	a009883a 	mov	r4,r20
    8984:	880b883a 	mov	r5,r17
    8988:	100d883a 	mov	r6,r2
    898c:	180f883a 	mov	r7,r3
    8990:	000ffb00 	call	ffb0 <__subdf3>
    8994:	82400c04 	addi	r9,r16,48
    8998:	b2400005 	stb	r9,0(r22)
    899c:	b5800044 	addi	r22,r22,1
    89a0:	b5d3c83a 	sub	r9,r22,r23
    89a4:	000d883a 	mov	r6,zero
    89a8:	01d00934 	movhi	r7,16420
    89ac:	1009883a 	mov	r4,r2
    89b0:	180b883a 	mov	r5,r3
    89b4:	aa7fd91e 	bne	r21,r9,891c <_dtoa_r+0x820>
    89b8:	802b883a 	mov	r21,r16
    89bc:	dc000417 	ldw	r16,16(sp)
    89c0:	1009883a 	mov	r4,r2
    89c4:	180b883a 	mov	r5,r3
    89c8:	100d883a 	mov	r6,r2
    89cc:	180f883a 	mov	r7,r3
    89d0:	000ff5c0 	call	ff5c <__adddf3>
    89d4:	9009883a 	mov	r4,r18
    89d8:	980b883a 	mov	r5,r19
    89dc:	100d883a 	mov	r6,r2
    89e0:	180f883a 	mov	r7,r3
    89e4:	1023883a 	mov	r17,r2
    89e8:	1829883a 	mov	r20,r3
    89ec:	00106280 	call	10628 <__ltdf2>
    89f0:	10000816 	blt	r2,zero,8a14 <_dtoa_r+0x918>
    89f4:	9009883a 	mov	r4,r18
    89f8:	980b883a 	mov	r5,r19
    89fc:	880d883a 	mov	r6,r17
    8a00:	a00f883a 	mov	r7,r20
    8a04:	00104a80 	call	104a8 <__eqdf2>
    8a08:	103f5d1e 	bne	r2,zero,8780 <_dtoa_r+0x684>
    8a0c:	ad40004c 	andi	r21,r21,1
    8a10:	a83f5b26 	beq	r21,zero,8780 <_dtoa_r+0x684>
    8a14:	b53fffc3 	ldbu	r20,-1(r22)
    8a18:	b0ffff84 	addi	r3,r22,-2
    8a1c:	01400e44 	movi	r5,57
    8a20:	00000306 	br	8a30 <_dtoa_r+0x934>
    8a24:	1d000003 	ldbu	r20,0(r3)
    8a28:	102d883a 	mov	r22,r2
    8a2c:	18ffffc4 	addi	r3,r3,-1
    8a30:	a1003fcc 	andi	r4,r20,255
    8a34:	2100201c 	xori	r4,r4,128
    8a38:	213fe004 	addi	r4,r4,-128
    8a3c:	b0bfffc4 	addi	r2,r22,-1
    8a40:	2142ca1e 	bne	r4,r5,956c <_dtoa_r+0x1470>
    8a44:	b8bff71e 	bne	r23,r2,8a24 <_dtoa_r+0x928>
    8a48:	d8800617 	ldw	r2,24(sp)
    8a4c:	05000c44 	movi	r20,49
    8a50:	10800044 	addi	r2,r2,1
    8a54:	d8800615 	stw	r2,24(sp)
    8a58:	00800c04 	movi	r2,48
    8a5c:	b8800005 	stb	r2,0(r23)
    8a60:	b805883a 	mov	r2,r23
    8a64:	15000005 	stb	r20,0(r2)
    8a68:	003f4506 	br	8780 <_dtoa_r+0x684>
    8a6c:	d9c00c17 	ldw	r7,48(sp)
    8a70:	3800c926 	beq	r7,zero,8d98 <_dtoa_r+0xc9c>
    8a74:	d9c00417 	ldw	r7,16(sp)
    8a78:	00c00044 	movi	r3,1
    8a7c:	19c16c0e 	bge	r3,r7,9030 <_dtoa_r+0xf34>
    8a80:	d9000917 	ldw	r4,36(sp)
    8a84:	d9c00a17 	ldw	r7,40(sp)
    8a88:	24ffffc4 	addi	r19,r4,-1
    8a8c:	3cc20716 	blt	r7,r19,92ac <_dtoa_r+0x11b0>
    8a90:	3ce7c83a 	sub	r19,r7,r19
    8a94:	d9c00917 	ldw	r7,36(sp)
    8a98:	3802ae16 	blt	r7,zero,9554 <_dtoa_r+0x1458>
    8a9c:	dc800817 	ldw	r18,32(sp)
    8aa0:	d8800917 	ldw	r2,36(sp)
    8aa4:	d8c00817 	ldw	r3,32(sp)
    8aa8:	d9c00717 	ldw	r7,28(sp)
    8aac:	8009883a 	mov	r4,r16
    8ab0:	1887883a 	add	r3,r3,r2
    8ab4:	388f883a 	add	r7,r7,r2
    8ab8:	01400044 	movi	r5,1
    8abc:	d8c00815 	stw	r3,32(sp)
    8ac0:	d9c00715 	stw	r7,28(sp)
    8ac4:	000a6140 	call	a614 <__i2b>
    8ac8:	102b883a 	mov	r21,r2
    8acc:	90000a26 	beq	r18,zero,8af8 <_dtoa_r+0x9fc>
    8ad0:	d8800717 	ldw	r2,28(sp)
    8ad4:	0080080e 	bge	zero,r2,8af8 <_dtoa_r+0x9fc>
    8ad8:	90812b16 	blt	r18,r2,8f88 <_dtoa_r+0xe8c>
    8adc:	d8c00817 	ldw	r3,32(sp)
    8ae0:	d9000717 	ldw	r4,28(sp)
    8ae4:	90a5c83a 	sub	r18,r18,r2
    8ae8:	1887c83a 	sub	r3,r3,r2
    8aec:	2089c83a 	sub	r4,r4,r2
    8af0:	d8c00815 	stw	r3,32(sp)
    8af4:	d9000715 	stw	r4,28(sp)
    8af8:	d9c00a17 	ldw	r7,40(sp)
    8afc:	01c0140e 	bge	zero,r7,8b50 <_dtoa_r+0xa54>
    8b00:	d8800c17 	ldw	r2,48(sp)
    8b04:	1001de26 	beq	r2,zero,9280 <_dtoa_r+0x1184>
    8b08:	04c00e0e 	bge	zero,r19,8b44 <_dtoa_r+0xa48>
    8b0c:	a80b883a 	mov	r5,r21
    8b10:	8009883a 	mov	r4,r16
    8b14:	980d883a 	mov	r6,r19
    8b18:	000a8a80 	call	a8a8 <__pow5mult>
    8b1c:	e00d883a 	mov	r6,fp
    8b20:	8009883a 	mov	r4,r16
    8b24:	100b883a 	mov	r5,r2
    8b28:	102b883a 	mov	r21,r2
    8b2c:	000a6500 	call	a650 <__multiply>
    8b30:	1029883a 	mov	r20,r2
    8b34:	e00b883a 	mov	r5,fp
    8b38:	8009883a 	mov	r4,r16
    8b3c:	000a28c0 	call	a28c <_Bfree>
    8b40:	a039883a 	mov	fp,r20
    8b44:	d8c00a17 	ldw	r3,40(sp)
    8b48:	1ccdc83a 	sub	r6,r3,r19
    8b4c:	3001291e 	bne	r6,zero,8ff4 <_dtoa_r+0xef8>
    8b50:	8009883a 	mov	r4,r16
    8b54:	01400044 	movi	r5,1
    8b58:	000a6140 	call	a614 <__i2b>
    8b5c:	d9000b17 	ldw	r4,44(sp)
    8b60:	1029883a 	mov	r20,r2
    8b64:	0100050e 	bge	zero,r4,8b7c <_dtoa_r+0xa80>
    8b68:	d9800b17 	ldw	r6,44(sp)
    8b6c:	8009883a 	mov	r4,r16
    8b70:	100b883a 	mov	r5,r2
    8b74:	000a8a80 	call	a8a8 <__pow5mult>
    8b78:	1029883a 	mov	r20,r2
    8b7c:	d9c00417 	ldw	r7,16(sp)
    8b80:	00800044 	movi	r2,1
    8b84:	11c0f00e 	bge	r2,r7,8f48 <_dtoa_r+0xe4c>
    8b88:	0023883a 	mov	r17,zero
    8b8c:	d8800b17 	ldw	r2,44(sp)
    8b90:	1001741e 	bne	r2,zero,9164 <_dtoa_r+0x1068>
    8b94:	00800044 	movi	r2,1
    8b98:	d8c00717 	ldw	r3,28(sp)
    8b9c:	10c5883a 	add	r2,r2,r3
    8ba0:	108007cc 	andi	r2,r2,31
    8ba4:	10008026 	beq	r2,zero,8da8 <_dtoa_r+0xcac>
    8ba8:	01000804 	movi	r4,32
    8bac:	2089c83a 	sub	r4,r4,r2
    8bb0:	00c00104 	movi	r3,4
    8bb4:	1902d00e 	bge	r3,r4,96f8 <_dtoa_r+0x15fc>
    8bb8:	d9000817 	ldw	r4,32(sp)
    8bbc:	d9c00717 	ldw	r7,28(sp)
    8bc0:	00c00704 	movi	r3,28
    8bc4:	1885c83a 	sub	r2,r3,r2
    8bc8:	2089883a 	add	r4,r4,r2
    8bcc:	388f883a 	add	r7,r7,r2
    8bd0:	d9000815 	stw	r4,32(sp)
    8bd4:	90a5883a 	add	r18,r18,r2
    8bd8:	d9c00715 	stw	r7,28(sp)
    8bdc:	d9c00817 	ldw	r7,32(sp)
    8be0:	01c0050e 	bge	zero,r7,8bf8 <_dtoa_r+0xafc>
    8be4:	e00b883a 	mov	r5,fp
    8be8:	8009883a 	mov	r4,r16
    8bec:	380d883a 	mov	r6,r7
    8bf0:	000a9d40 	call	a9d4 <__lshift>
    8bf4:	1039883a 	mov	fp,r2
    8bf8:	d8800717 	ldw	r2,28(sp)
    8bfc:	0080050e 	bge	zero,r2,8c14 <_dtoa_r+0xb18>
    8c00:	a00b883a 	mov	r5,r20
    8c04:	8009883a 	mov	r4,r16
    8c08:	100d883a 	mov	r6,r2
    8c0c:	000a9d40 	call	a9d4 <__lshift>
    8c10:	1029883a 	mov	r20,r2
    8c14:	d8c00d17 	ldw	r3,52(sp)
    8c18:	1801401e 	bne	r3,zero,911c <_dtoa_r+0x1020>
    8c1c:	d8800917 	ldw	r2,36(sp)
    8c20:	00815a0e 	bge	zero,r2,918c <_dtoa_r+0x1090>
    8c24:	d8c00c17 	ldw	r3,48(sp)
    8c28:	18006f1e 	bne	r3,zero,8de8 <_dtoa_r+0xcec>
    8c2c:	b823883a 	mov	r17,r23
    8c30:	dc800917 	ldw	r18,36(sp)
    8c34:	00000206 	br	8c40 <_dtoa_r+0xb44>
    8c38:	000a2b40 	call	a2b4 <__multadd>
    8c3c:	1039883a 	mov	fp,r2
    8c40:	e009883a 	mov	r4,fp
    8c44:	a00b883a 	mov	r5,r20
    8c48:	0007ec00 	call	7ec0 <quorem>
    8c4c:	10800c04 	addi	r2,r2,48
    8c50:	88800005 	stb	r2,0(r17)
    8c54:	8c400044 	addi	r17,r17,1
    8c58:	8dc7c83a 	sub	r3,r17,r23
    8c5c:	8009883a 	mov	r4,r16
    8c60:	e00b883a 	mov	r5,fp
    8c64:	01800284 	movi	r6,10
    8c68:	000f883a 	mov	r7,zero
    8c6c:	1cbff216 	blt	r3,r18,8c38 <_dtoa_r+0xb3c>
    8c70:	dd800917 	ldw	r22,36(sp)
    8c74:	1007883a 	mov	r3,r2
    8c78:	05823a0e 	bge	zero,r22,9564 <_dtoa_r+0x1468>
    8c7c:	bdad883a 	add	r22,r23,r22
    8c80:	0023883a 	mov	r17,zero
    8c84:	e00b883a 	mov	r5,fp
    8c88:	01800044 	movi	r6,1
    8c8c:	8009883a 	mov	r4,r16
    8c90:	d8c01515 	stw	r3,84(sp)
    8c94:	000a9d40 	call	a9d4 <__lshift>
    8c98:	1009883a 	mov	r4,r2
    8c9c:	a00b883a 	mov	r5,r20
    8ca0:	1039883a 	mov	fp,r2
    8ca4:	000ab300 	call	ab30 <__mcmp>
    8ca8:	d8c01517 	ldw	r3,84(sp)
    8cac:	0080d60e 	bge	zero,r2,9008 <_dtoa_r+0xf0c>
    8cb0:	b13fffc3 	ldbu	r4,-1(r22)
    8cb4:	b0ffff84 	addi	r3,r22,-2
    8cb8:	01800e44 	movi	r6,57
    8cbc:	00000306 	br	8ccc <_dtoa_r+0xbd0>
    8cc0:	19000003 	ldbu	r4,0(r3)
    8cc4:	102d883a 	mov	r22,r2
    8cc8:	18ffffc4 	addi	r3,r3,-1
    8ccc:	21403fcc 	andi	r5,r4,255
    8cd0:	2940201c 	xori	r5,r5,128
    8cd4:	297fe004 	addi	r5,r5,-128
    8cd8:	b0bfffc4 	addi	r2,r22,-1
    8cdc:	2981a71e 	bne	r5,r6,937c <_dtoa_r+0x1280>
    8ce0:	b8bff71e 	bne	r23,r2,8cc0 <_dtoa_r+0xbc4>
    8ce4:	d8800617 	ldw	r2,24(sp)
    8ce8:	10800044 	addi	r2,r2,1
    8cec:	d8800615 	stw	r2,24(sp)
    8cf0:	00800c44 	movi	r2,49
    8cf4:	b8800005 	stb	r2,0(r23)
    8cf8:	8009883a 	mov	r4,r16
    8cfc:	a00b883a 	mov	r5,r20
    8d00:	000a28c0 	call	a28c <_Bfree>
    8d04:	a83e9e26 	beq	r21,zero,8780 <_dtoa_r+0x684>
    8d08:	88000426 	beq	r17,zero,8d1c <_dtoa_r+0xc20>
    8d0c:	8d400326 	beq	r17,r21,8d1c <_dtoa_r+0xc20>
    8d10:	8009883a 	mov	r4,r16
    8d14:	880b883a 	mov	r5,r17
    8d18:	000a28c0 	call	a28c <_Bfree>
    8d1c:	8009883a 	mov	r4,r16
    8d20:	a80b883a 	mov	r5,r21
    8d24:	000a28c0 	call	a28c <_Bfree>
    8d28:	003e9506 	br	8780 <_dtoa_r+0x684>
    8d2c:	00c00044 	movi	r3,1
    8d30:	d8c00d15 	stw	r3,52(sp)
    8d34:	003d9f06 	br	83b4 <_dtoa_r+0x2b8>
    8d38:	d9000817 	ldw	r4,32(sp)
    8d3c:	d8800617 	ldw	r2,24(sp)
    8d40:	d8000b15 	stw	zero,44(sp)
    8d44:	2089c83a 	sub	r4,r4,r2
    8d48:	0087c83a 	sub	r3,zero,r2
    8d4c:	d9000815 	stw	r4,32(sp)
    8d50:	d8c00a15 	stw	r3,40(sp)
    8d54:	003da306 	br	83e4 <_dtoa_r+0x2e8>
    8d58:	0529c83a 	sub	r20,zero,r20
    8d5c:	dd000815 	stw	r20,32(sp)
    8d60:	d8000715 	stw	zero,28(sp)
    8d64:	003d9806 	br	83c8 <_dtoa_r+0x2cc>
    8d68:	d9000617 	ldw	r4,24(sp)
    8d6c:	00106e00 	call	106e0 <__floatsidf>
    8d70:	1009883a 	mov	r4,r2
    8d74:	180b883a 	mov	r5,r3
    8d78:	980d883a 	mov	r6,r19
    8d7c:	900f883a 	mov	r7,r18
    8d80:	00105040 	call	10504 <__nedf2>
    8d84:	103d7a26 	beq	r2,zero,8370 <_dtoa_r+0x274>
    8d88:	d8800617 	ldw	r2,24(sp)
    8d8c:	10bfffc4 	addi	r2,r2,-1
    8d90:	d8800615 	stw	r2,24(sp)
    8d94:	003d7606 	br	8370 <_dtoa_r+0x274>
    8d98:	dcc00a17 	ldw	r19,40(sp)
    8d9c:	dc800817 	ldw	r18,32(sp)
    8da0:	002b883a 	mov	r21,zero
    8da4:	003f4906 	br	8acc <_dtoa_r+0x9d0>
    8da8:	00800704 	movi	r2,28
    8dac:	d8c00817 	ldw	r3,32(sp)
    8db0:	d9000717 	ldw	r4,28(sp)
    8db4:	90a5883a 	add	r18,r18,r2
    8db8:	1887883a 	add	r3,r3,r2
    8dbc:	2089883a 	add	r4,r4,r2
    8dc0:	d8c00815 	stw	r3,32(sp)
    8dc4:	d9000715 	stw	r4,28(sp)
    8dc8:	003f8406 	br	8bdc <_dtoa_r+0xae0>
    8dcc:	d9c00317 	ldw	r7,12(sp)
    8dd0:	013efb84 	movi	r4,-1042
    8dd4:	2509c83a 	sub	r4,r4,r20
    8dd8:	3908983a 	sll	r4,r7,r4
    8ddc:	003d3006 	br	82a0 <_dtoa_r+0x1a4>
    8de0:	d8000d15 	stw	zero,52(sp)
    8de4:	003d7306 	br	83b4 <_dtoa_r+0x2b8>
    8de8:	0480050e 	bge	zero,r18,8e00 <_dtoa_r+0xd04>
    8dec:	a80b883a 	mov	r5,r21
    8df0:	8009883a 	mov	r4,r16
    8df4:	900d883a 	mov	r6,r18
    8df8:	000a9d40 	call	a9d4 <__lshift>
    8dfc:	102b883a 	mov	r21,r2
    8e00:	8801611e 	bne	r17,zero,9388 <_dtoa_r+0x128c>
    8e04:	a827883a 	mov	r19,r21
    8e08:	d8c00317 	ldw	r3,12(sp)
    8e0c:	d9000917 	ldw	r4,36(sp)
    8e10:	b8bfffc4 	addi	r2,r23,-1
    8e14:	18c0004c 	andi	r3,r3,1
    8e18:	1105883a 	add	r2,r2,r4
    8e1c:	b825883a 	mov	r18,r23
    8e20:	d8800515 	stw	r2,20(sp)
    8e24:	a823883a 	mov	r17,r21
    8e28:	d8c00315 	stw	r3,12(sp)
    8e2c:	ddc00715 	stw	r23,28(sp)
    8e30:	e009883a 	mov	r4,fp
    8e34:	a00b883a 	mov	r5,r20
    8e38:	0007ec00 	call	7ec0 <quorem>
    8e3c:	e009883a 	mov	r4,fp
    8e40:	880b883a 	mov	r5,r17
    8e44:	102d883a 	mov	r22,r2
    8e48:	000ab300 	call	ab30 <__mcmp>
    8e4c:	980d883a 	mov	r6,r19
    8e50:	8009883a 	mov	r4,r16
    8e54:	a00b883a 	mov	r5,r20
    8e58:	102b883a 	mov	r21,r2
    8e5c:	000ab880 	call	ab88 <__mdiff>
    8e60:	100d883a 	mov	r6,r2
    8e64:	10800317 	ldw	r2,12(r2)
    8e68:	b5c00c04 	addi	r23,r22,48
    8e6c:	10008c26 	beq	r2,zero,90a0 <_dtoa_r+0xfa4>
    8e70:	8009883a 	mov	r4,r16
    8e74:	300b883a 	mov	r5,r6
    8e78:	000a28c0 	call	a28c <_Bfree>
    8e7c:	00800044 	movi	r2,1
    8e80:	a8007116 	blt	r21,zero,9048 <_dtoa_r+0xf4c>
    8e84:	a800041e 	bne	r21,zero,8e98 <_dtoa_r+0xd9c>
    8e88:	d9c00417 	ldw	r7,16(sp)
    8e8c:	3800021e 	bne	r7,zero,8e98 <_dtoa_r+0xd9c>
    8e90:	d8c00317 	ldw	r3,12(sp)
    8e94:	18006c26 	beq	r3,zero,9048 <_dtoa_r+0xf4c>
    8e98:	00814c16 	blt	zero,r2,93cc <_dtoa_r+0x12d0>
    8e9c:	d8c00517 	ldw	r3,20(sp)
    8ea0:	95400044 	addi	r21,r18,1
    8ea4:	95c00005 	stb	r23,0(r18)
    8ea8:	a82d883a 	mov	r22,r21
    8eac:	90c14d26 	beq	r18,r3,93e4 <_dtoa_r+0x12e8>
    8eb0:	e00b883a 	mov	r5,fp
    8eb4:	8009883a 	mov	r4,r16
    8eb8:	01800284 	movi	r6,10
    8ebc:	000f883a 	mov	r7,zero
    8ec0:	000a2b40 	call	a2b4 <__multadd>
    8ec4:	1039883a 	mov	fp,r2
    8ec8:	8cc08b26 	beq	r17,r19,90f8 <_dtoa_r+0xffc>
    8ecc:	880b883a 	mov	r5,r17
    8ed0:	01800284 	movi	r6,10
    8ed4:	000f883a 	mov	r7,zero
    8ed8:	8009883a 	mov	r4,r16
    8edc:	000a2b40 	call	a2b4 <__multadd>
    8ee0:	980b883a 	mov	r5,r19
    8ee4:	8009883a 	mov	r4,r16
    8ee8:	01800284 	movi	r6,10
    8eec:	000f883a 	mov	r7,zero
    8ef0:	1023883a 	mov	r17,r2
    8ef4:	000a2b40 	call	a2b4 <__multadd>
    8ef8:	1027883a 	mov	r19,r2
    8efc:	a825883a 	mov	r18,r21
    8f00:	003fcb06 	br	8e30 <_dtoa_r+0xd34>
    8f04:	d9c00417 	ldw	r7,16(sp)
    8f08:	00800104 	movi	r2,4
    8f0c:	3880e426 	beq	r7,r2,92a0 <_dtoa_r+0x11a4>
    8f10:	00800144 	movi	r2,5
    8f14:	38be3c1e 	bne	r7,r2,8808 <_dtoa_r+0x70c>
    8f18:	00c00044 	movi	r3,1
    8f1c:	d8c00c15 	stw	r3,48(sp)
    8f20:	d9c02117 	ldw	r7,132(sp)
    8f24:	d8800617 	ldw	r2,24(sp)
    8f28:	388f883a 	add	r7,r7,r2
    8f2c:	3c800044 	addi	r18,r7,1
    8f30:	d9c00e15 	stw	r7,56(sp)
    8f34:	dc800915 	stw	r18,36(sp)
    8f38:	04bd3e16 	blt	zero,r18,8434 <_dtoa_r+0x338>
    8f3c:	80001115 	stw	zero,68(r16)
    8f40:	000b883a 	mov	r5,zero
    8f44:	003d4606 	br	8460 <_dtoa_r+0x364>
    8f48:	d8c00317 	ldw	r3,12(sp)
    8f4c:	183f0e1e 	bne	r3,zero,8b88 <_dtoa_r+0xa8c>
    8f50:	00c00434 	movhi	r3,16
    8f54:	18ffffc4 	addi	r3,r3,-1
    8f58:	88c6703a 	and	r3,r17,r3
    8f5c:	183f0a1e 	bne	r3,zero,8b88 <_dtoa_r+0xa8c>
    8f60:	8c5ffc2c 	andhi	r17,r17,32752
    8f64:	883f0826 	beq	r17,zero,8b88 <_dtoa_r+0xa8c>
    8f68:	d9000817 	ldw	r4,32(sp)
    8f6c:	d9c00717 	ldw	r7,28(sp)
    8f70:	1023883a 	mov	r17,r2
    8f74:	2089883a 	add	r4,r4,r2
    8f78:	388f883a 	add	r7,r7,r2
    8f7c:	d9000815 	stw	r4,32(sp)
    8f80:	d9c00715 	stw	r7,28(sp)
    8f84:	003f0106 	br	8b8c <_dtoa_r+0xa90>
    8f88:	9005883a 	mov	r2,r18
    8f8c:	003ed306 	br	8adc <_dtoa_r+0x9e0>
    8f90:	d8800917 	ldw	r2,36(sp)
    8f94:	00be3516 	blt	zero,r2,886c <_dtoa_r+0x770>
    8f98:	1000b61e 	bne	r2,zero,9274 <_dtoa_r+0x1178>
    8f9c:	9009883a 	mov	r4,r18
    8fa0:	980b883a 	mov	r5,r19
    8fa4:	000d883a 	mov	r6,zero
    8fa8:	01d00534 	movhi	r7,16404
    8fac:	00100100 	call	10010 <__muldf3>
    8fb0:	d9800317 	ldw	r6,12(sp)
    8fb4:	1009883a 	mov	r4,r2
    8fb8:	180b883a 	mov	r5,r3
    8fbc:	880f883a 	mov	r7,r17
    8fc0:	00105c40 	call	105c4 <__gedf2>
    8fc4:	0029883a 	mov	r20,zero
    8fc8:	002b883a 	mov	r21,zero
    8fcc:	10007e16 	blt	r2,zero,91c8 <_dtoa_r+0x10cc>
    8fd0:	d8802117 	ldw	r2,132(sp)
    8fd4:	b82d883a 	mov	r22,r23
    8fd8:	0084303a 	nor	r2,zero,r2
    8fdc:	d8800615 	stw	r2,24(sp)
    8fe0:	8009883a 	mov	r4,r16
    8fe4:	a00b883a 	mov	r5,r20
    8fe8:	000a28c0 	call	a28c <_Bfree>
    8fec:	a83f4b1e 	bne	r21,zero,8d1c <_dtoa_r+0xc20>
    8ff0:	003de306 	br	8780 <_dtoa_r+0x684>
    8ff4:	e00b883a 	mov	r5,fp
    8ff8:	8009883a 	mov	r4,r16
    8ffc:	000a8a80 	call	a8a8 <__pow5mult>
    9000:	1039883a 	mov	fp,r2
    9004:	003ed206 	br	8b50 <_dtoa_r+0xa54>
    9008:	1000021e 	bne	r2,zero,9014 <_dtoa_r+0xf18>
    900c:	18c0004c 	andi	r3,r3,1
    9010:	183f271e 	bne	r3,zero,8cb0 <_dtoa_r+0xbb4>
    9014:	01000c04 	movi	r4,48
    9018:	00000106 	br	9020 <_dtoa_r+0xf24>
    901c:	102d883a 	mov	r22,r2
    9020:	b0bfffc4 	addi	r2,r22,-1
    9024:	10c00007 	ldb	r3,0(r2)
    9028:	193ffc26 	beq	r3,r4,901c <_dtoa_r+0xf20>
    902c:	003f3206 	br	8cf8 <_dtoa_r+0xbfc>
    9030:	d8c00f17 	ldw	r3,60(sp)
    9034:	18015026 	beq	r3,zero,9578 <_dtoa_r+0x147c>
    9038:	10810cc4 	addi	r2,r2,1075
    903c:	dcc00a17 	ldw	r19,40(sp)
    9040:	dc800817 	ldw	r18,32(sp)
    9044:	003e9706 	br	8aa4 <_dtoa_r+0x9a8>
    9048:	b807883a 	mov	r3,r23
    904c:	182b883a 	mov	r21,r3
    9050:	ddc00717 	ldw	r23,28(sp)
    9054:	00800e0e 	bge	zero,r2,9090 <_dtoa_r+0xf94>
    9058:	e00b883a 	mov	r5,fp
    905c:	01800044 	movi	r6,1
    9060:	8009883a 	mov	r4,r16
    9064:	d8c01515 	stw	r3,84(sp)
    9068:	000a9d40 	call	a9d4 <__lshift>
    906c:	1009883a 	mov	r4,r2
    9070:	a00b883a 	mov	r5,r20
    9074:	1039883a 	mov	fp,r2
    9078:	000ab300 	call	ab30 <__mcmp>
    907c:	d8c01517 	ldw	r3,84(sp)
    9080:	0081880e 	bge	zero,r2,96a4 <_dtoa_r+0x15a8>
    9084:	00800e44 	movi	r2,57
    9088:	b0c00c44 	addi	r3,r22,49
    908c:	a8816326 	beq	r21,r2,961c <_dtoa_r+0x1520>
    9090:	90c00005 	stb	r3,0(r18)
    9094:	95800044 	addi	r22,r18,1
    9098:	982b883a 	mov	r21,r19
    909c:	003f1606 	br	8cf8 <_dtoa_r+0xbfc>
    90a0:	300b883a 	mov	r5,r6
    90a4:	e009883a 	mov	r4,fp
    90a8:	d9801515 	stw	r6,84(sp)
    90ac:	000ab300 	call	ab30 <__mcmp>
    90b0:	d9801517 	ldw	r6,84(sp)
    90b4:	8009883a 	mov	r4,r16
    90b8:	d8801515 	stw	r2,84(sp)
    90bc:	300b883a 	mov	r5,r6
    90c0:	000a28c0 	call	a28c <_Bfree>
    90c4:	d8801517 	ldw	r2,84(sp)
    90c8:	103f6d1e 	bne	r2,zero,8e80 <_dtoa_r+0xd84>
    90cc:	d9c00417 	ldw	r7,16(sp)
    90d0:	383f6b1e 	bne	r7,zero,8e80 <_dtoa_r+0xd84>
    90d4:	d8c00317 	ldw	r3,12(sp)
    90d8:	183f691e 	bne	r3,zero,8e80 <_dtoa_r+0xd84>
    90dc:	b807883a 	mov	r3,r23
    90e0:	00800e44 	movi	r2,57
    90e4:	ddc00717 	ldw	r23,28(sp)
    90e8:	18814c26 	beq	r3,r2,961c <_dtoa_r+0x1520>
    90ec:	057fe80e 	bge	zero,r21,9090 <_dtoa_r+0xf94>
    90f0:	b0c00c44 	addi	r3,r22,49
    90f4:	003fe606 	br	9090 <_dtoa_r+0xf94>
    90f8:	880b883a 	mov	r5,r17
    90fc:	8009883a 	mov	r4,r16
    9100:	01800284 	movi	r6,10
    9104:	000f883a 	mov	r7,zero
    9108:	000a2b40 	call	a2b4 <__multadd>
    910c:	1023883a 	mov	r17,r2
    9110:	1027883a 	mov	r19,r2
    9114:	a825883a 	mov	r18,r21
    9118:	003f4506 	br	8e30 <_dtoa_r+0xd34>
    911c:	e009883a 	mov	r4,fp
    9120:	a00b883a 	mov	r5,r20
    9124:	000ab300 	call	ab30 <__mcmp>
    9128:	103ebc0e 	bge	r2,zero,8c1c <_dtoa_r+0xb20>
    912c:	e00b883a 	mov	r5,fp
    9130:	8009883a 	mov	r4,r16
    9134:	01800284 	movi	r6,10
    9138:	000f883a 	mov	r7,zero
    913c:	000a2b40 	call	a2b4 <__multadd>
    9140:	1039883a 	mov	fp,r2
    9144:	d8800617 	ldw	r2,24(sp)
    9148:	d8c00c17 	ldw	r3,48(sp)
    914c:	10bfffc4 	addi	r2,r2,-1
    9150:	d8800615 	stw	r2,24(sp)
    9154:	1801571e 	bne	r3,zero,96b4 <_dtoa_r+0x15b8>
    9158:	d9c00e17 	ldw	r7,56(sp)
    915c:	d9c00915 	stw	r7,36(sp)
    9160:	003eae06 	br	8c1c <_dtoa_r+0xb20>
    9164:	a0800417 	ldw	r2,16(r20)
    9168:	10800104 	addi	r2,r2,4
    916c:	1085883a 	add	r2,r2,r2
    9170:	1085883a 	add	r2,r2,r2
    9174:	a085883a 	add	r2,r20,r2
    9178:	11000017 	ldw	r4,0(r2)
    917c:	000a4fc0 	call	a4fc <__hi0bits>
    9180:	00c00804 	movi	r3,32
    9184:	1885c83a 	sub	r2,r3,r2
    9188:	003e8306 	br	8b98 <_dtoa_r+0xa9c>
    918c:	d9c00417 	ldw	r7,16(sp)
    9190:	00800084 	movi	r2,2
    9194:	11fea30e 	bge	r2,r7,8c24 <_dtoa_r+0xb28>
    9198:	d8800917 	ldw	r2,36(sp)
    919c:	103f8c1e 	bne	r2,zero,8fd0 <_dtoa_r+0xed4>
    91a0:	a00b883a 	mov	r5,r20
    91a4:	8009883a 	mov	r4,r16
    91a8:	01800144 	movi	r6,5
    91ac:	000f883a 	mov	r7,zero
    91b0:	000a2b40 	call	a2b4 <__multadd>
    91b4:	e009883a 	mov	r4,fp
    91b8:	100b883a 	mov	r5,r2
    91bc:	1029883a 	mov	r20,r2
    91c0:	000ab300 	call	ab30 <__mcmp>
    91c4:	00bf820e 	bge	zero,r2,8fd0 <_dtoa_r+0xed4>
    91c8:	00800c44 	movi	r2,49
    91cc:	b8800005 	stb	r2,0(r23)
    91d0:	d8800617 	ldw	r2,24(sp)
    91d4:	bd800044 	addi	r22,r23,1
    91d8:	10800044 	addi	r2,r2,1
    91dc:	d8800615 	stw	r2,24(sp)
    91e0:	003f7f06 	br	8fe0 <_dtoa_r+0xee4>
    91e4:	dc000417 	ldw	r16,16(sp)
    91e8:	003d6506 	br	8780 <_dtoa_r+0x684>
    91ec:	9009883a 	mov	r4,r18
    91f0:	00106e00 	call	106e0 <__floatsidf>
    91f4:	1009883a 	mov	r4,r2
    91f8:	180b883a 	mov	r5,r3
    91fc:	980d883a 	mov	r6,r19
    9200:	a00f883a 	mov	r7,r20
    9204:	00100100 	call	10010 <__muldf3>
    9208:	1009883a 	mov	r4,r2
    920c:	180b883a 	mov	r5,r3
    9210:	000d883a 	mov	r6,zero
    9214:	01d00734 	movhi	r7,16412
    9218:	000ff5c0 	call	ff5c <__adddf3>
    921c:	057f3034 	movhi	r21,64704
    9220:	1025883a 	mov	r18,r2
    9224:	1d6b883a 	add	r21,r3,r21
    9228:	9809883a 	mov	r4,r19
    922c:	a00b883a 	mov	r5,r20
    9230:	000d883a 	mov	r6,zero
    9234:	01d00534 	movhi	r7,16404
    9238:	000ffb00 	call	ffb0 <__subdf3>
    923c:	1009883a 	mov	r4,r2
    9240:	180b883a 	mov	r5,r3
    9244:	900d883a 	mov	r6,r18
    9248:	a80f883a 	mov	r7,r21
    924c:	1027883a 	mov	r19,r2
    9250:	1829883a 	mov	r20,r3
    9254:	00105600 	call	10560 <__gtdf2>
    9258:	00806616 	blt	zero,r2,93f4 <_dtoa_r+0x12f8>
    925c:	a9e0003c 	xorhi	r7,r21,32768
    9260:	9809883a 	mov	r4,r19
    9264:	a00b883a 	mov	r5,r20
    9268:	900d883a 	mov	r6,r18
    926c:	00106280 	call	10628 <__ltdf2>
    9270:	103d710e 	bge	r2,zero,8838 <_dtoa_r+0x73c>
    9274:	0029883a 	mov	r20,zero
    9278:	002b883a 	mov	r21,zero
    927c:	003f5406 	br	8fd0 <_dtoa_r+0xed4>
    9280:	d9800a17 	ldw	r6,40(sp)
    9284:	e00b883a 	mov	r5,fp
    9288:	8009883a 	mov	r4,r16
    928c:	000a8a80 	call	a8a8 <__pow5mult>
    9290:	1039883a 	mov	fp,r2
    9294:	003e2e06 	br	8b50 <_dtoa_r+0xa54>
    9298:	d8000c15 	stw	zero,48(sp)
    929c:	003f2006 	br	8f20 <_dtoa_r+0xe24>
    92a0:	00800044 	movi	r2,1
    92a4:	d8800c15 	stw	r2,48(sp)
    92a8:	003c5d06 	br	8420 <_dtoa_r+0x324>
    92ac:	d8c00a17 	ldw	r3,40(sp)
    92b0:	d9000b17 	ldw	r4,44(sp)
    92b4:	dcc00a15 	stw	r19,40(sp)
    92b8:	98c5c83a 	sub	r2,r19,r3
    92bc:	2089883a 	add	r4,r4,r2
    92c0:	d9000b15 	stw	r4,44(sp)
    92c4:	0027883a 	mov	r19,zero
    92c8:	003df206 	br	8a94 <_dtoa_r+0x998>
    92cc:	d9000317 	ldw	r4,12(sp)
    92d0:	8829883a 	mov	r20,r17
    92d4:	04800084 	movi	r18,2
    92d8:	d9001015 	stw	r4,64(sp)
    92dc:	003c8106 	br	84e4 <_dtoa_r+0x3e8>
    92e0:	04800044 	movi	r18,1
    92e4:	dc800e15 	stw	r18,56(sp)
    92e8:	dc800915 	stw	r18,36(sp)
    92ec:	dc802115 	stw	r18,132(sp)
    92f0:	003f1206 	br	8f3c <_dtoa_r+0xe40>
    92f4:	d8800617 	ldw	r2,24(sp)
    92f8:	00abc83a 	sub	r21,zero,r2
    92fc:	a800a426 	beq	r21,zero,9590 <_dtoa_r+0x1494>
    9300:	a88003cc 	andi	r2,r21,15
    9304:	100490fa 	slli	r2,r2,3
    9308:	00c00074 	movhi	r3,1
    930c:	18d37e04 	addi	r3,r3,19960
    9310:	d9000317 	ldw	r4,12(sp)
    9314:	1885883a 	add	r2,r3,r2
    9318:	11800017 	ldw	r6,0(r2)
    931c:	11c00117 	ldw	r7,4(r2)
    9320:	a82bd13a 	srai	r21,r21,4
    9324:	880b883a 	mov	r5,r17
    9328:	00100100 	call	10010 <__muldf3>
    932c:	1027883a 	mov	r19,r2
    9330:	1829883a 	mov	r20,r3
    9334:	a800e826 	beq	r21,zero,96d8 <_dtoa_r+0x15dc>
    9338:	05800074 	movhi	r22,1
    933c:	b5937404 	addi	r22,r22,19920
    9340:	04800084 	movi	r18,2
    9344:	a980004c 	andi	r6,r21,1
    9348:	1009883a 	mov	r4,r2
    934c:	a82bd07a 	srai	r21,r21,1
    9350:	180b883a 	mov	r5,r3
    9354:	30000426 	beq	r6,zero,9368 <_dtoa_r+0x126c>
    9358:	b1800017 	ldw	r6,0(r22)
    935c:	b1c00117 	ldw	r7,4(r22)
    9360:	94800044 	addi	r18,r18,1
    9364:	00100100 	call	10010 <__muldf3>
    9368:	b5800204 	addi	r22,r22,8
    936c:	a83ff51e 	bne	r21,zero,9344 <_dtoa_r+0x1248>
    9370:	1027883a 	mov	r19,r2
    9374:	1829883a 	mov	r20,r3
    9378:	003c7306 	br	8548 <_dtoa_r+0x44c>
    937c:	21000044 	addi	r4,r4,1
    9380:	11000005 	stb	r4,0(r2)
    9384:	003e5c06 	br	8cf8 <_dtoa_r+0xbfc>
    9388:	a9400117 	ldw	r5,4(r21)
    938c:	8009883a 	mov	r4,r16
    9390:	000a1e40 	call	a1e4 <_Balloc>
    9394:	a9800417 	ldw	r6,16(r21)
    9398:	11000304 	addi	r4,r2,12
    939c:	a9400304 	addi	r5,r21,12
    93a0:	31800084 	addi	r6,r6,2
    93a4:	318d883a 	add	r6,r6,r6
    93a8:	318d883a 	add	r6,r6,r6
    93ac:	1023883a 	mov	r17,r2
    93b0:	0003e600 	call	3e60 <memcpy>
    93b4:	8009883a 	mov	r4,r16
    93b8:	880b883a 	mov	r5,r17
    93bc:	01800044 	movi	r6,1
    93c0:	000a9d40 	call	a9d4 <__lshift>
    93c4:	1027883a 	mov	r19,r2
    93c8:	003e8f06 	br	8e08 <_dtoa_r+0xd0c>
    93cc:	b807883a 	mov	r3,r23
    93d0:	00800e44 	movi	r2,57
    93d4:	ddc00717 	ldw	r23,28(sp)
    93d8:	18809026 	beq	r3,r2,961c <_dtoa_r+0x1520>
    93dc:	18c00044 	addi	r3,r3,1
    93e0:	003f2b06 	br	9090 <_dtoa_r+0xf94>
    93e4:	b807883a 	mov	r3,r23
    93e8:	982b883a 	mov	r21,r19
    93ec:	ddc00717 	ldw	r23,28(sp)
    93f0:	003e2406 	br	8c84 <_dtoa_r+0xb88>
    93f4:	0029883a 	mov	r20,zero
    93f8:	002b883a 	mov	r21,zero
    93fc:	003f7206 	br	91c8 <_dtoa_r+0x10cc>
    9400:	593fffc4 	addi	r4,r11,-1
    9404:	200490fa 	slli	r2,r4,3
    9408:	00c00074 	movhi	r3,1
    940c:	18d37e04 	addi	r3,r3,19960
    9410:	d9001015 	stw	r4,64(sp)
    9414:	1885883a 	add	r2,r3,r2
    9418:	11000017 	ldw	r4,0(r2)
    941c:	11400117 	ldw	r5,4(r2)
    9420:	900d883a 	mov	r6,r18
    9424:	a80f883a 	mov	r7,r21
    9428:	dac01615 	stw	r11,88(sp)
    942c:	00100100 	call	10010 <__muldf3>
    9430:	a00b883a 	mov	r5,r20
    9434:	9809883a 	mov	r4,r19
    9438:	d8c01215 	stw	r3,72(sp)
    943c:	d8801115 	stw	r2,68(sp)
    9440:	00107b40 	call	107b4 <__fixdfsi>
    9444:	1009883a 	mov	r4,r2
    9448:	1025883a 	mov	r18,r2
    944c:	00106e00 	call	106e0 <__floatsidf>
    9450:	9809883a 	mov	r4,r19
    9454:	a00b883a 	mov	r5,r20
    9458:	100d883a 	mov	r6,r2
    945c:	180f883a 	mov	r7,r3
    9460:	94800c04 	addi	r18,r18,48
    9464:	000ffb00 	call	ffb0 <__subdf3>
    9468:	bc800005 	stb	r18,0(r23)
    946c:	dac01617 	ldw	r11,88(sp)
    9470:	102b883a 	mov	r21,r2
    9474:	00800044 	movi	r2,1
    9478:	bd800044 	addi	r22,r23,1
    947c:	1815883a 	mov	r10,r3
    9480:	58802226 	beq	r11,r2,950c <_dtoa_r+0x1410>
    9484:	bad7883a 	add	r11,r23,r11
    9488:	dc001415 	stw	r16,80(sp)
    948c:	a805883a 	mov	r2,r21
    9490:	b027883a 	mov	r19,r22
    9494:	5821883a 	mov	r16,r11
    9498:	882b883a 	mov	r21,r17
    949c:	000d883a 	mov	r6,zero
    94a0:	01d00934 	movhi	r7,16420
    94a4:	1009883a 	mov	r4,r2
    94a8:	180b883a 	mov	r5,r3
    94ac:	00100100 	call	10010 <__muldf3>
    94b0:	180b883a 	mov	r5,r3
    94b4:	1009883a 	mov	r4,r2
    94b8:	1829883a 	mov	r20,r3
    94bc:	1023883a 	mov	r17,r2
    94c0:	00107b40 	call	107b4 <__fixdfsi>
    94c4:	1009883a 	mov	r4,r2
    94c8:	1025883a 	mov	r18,r2
    94cc:	00106e00 	call	106e0 <__floatsidf>
    94d0:	8809883a 	mov	r4,r17
    94d4:	a00b883a 	mov	r5,r20
    94d8:	100d883a 	mov	r6,r2
    94dc:	180f883a 	mov	r7,r3
    94e0:	94800c04 	addi	r18,r18,48
    94e4:	000ffb00 	call	ffb0 <__subdf3>
    94e8:	9cc00044 	addi	r19,r19,1
    94ec:	9cbfffc5 	stb	r18,-1(r19)
    94f0:	9c3fea1e 	bne	r19,r16,949c <_dtoa_r+0x13a0>
    94f4:	1815883a 	mov	r10,r3
    94f8:	d8c01017 	ldw	r3,64(sp)
    94fc:	dc001417 	ldw	r16,80(sp)
    9500:	a823883a 	mov	r17,r21
    9504:	b0ed883a 	add	r22,r22,r3
    9508:	102b883a 	mov	r21,r2
    950c:	d9001117 	ldw	r4,68(sp)
    9510:	d9401217 	ldw	r5,72(sp)
    9514:	000d883a 	mov	r6,zero
    9518:	01cff834 	movhi	r7,16352
    951c:	da801515 	stw	r10,84(sp)
    9520:	000ff5c0 	call	ff5c <__adddf3>
    9524:	da801517 	ldw	r10,84(sp)
    9528:	1009883a 	mov	r4,r2
    952c:	180b883a 	mov	r5,r3
    9530:	500f883a 	mov	r7,r10
    9534:	a80d883a 	mov	r6,r21
    9538:	00106280 	call	10628 <__ltdf2>
    953c:	da801517 	ldw	r10,84(sp)
    9540:	10003b0e 	bge	r2,zero,9630 <_dtoa_r+0x1534>
    9544:	d9c01317 	ldw	r7,76(sp)
    9548:	b53fffc3 	ldbu	r20,-1(r22)
    954c:	d9c00615 	stw	r7,24(sp)
    9550:	003d3106 	br	8a18 <_dtoa_r+0x91c>
    9554:	d8800817 	ldw	r2,32(sp)
    9558:	11e5c83a 	sub	r18,r2,r7
    955c:	0005883a 	mov	r2,zero
    9560:	003d5006 	br	8aa4 <_dtoa_r+0x9a8>
    9564:	05800044 	movi	r22,1
    9568:	003dc406 	br	8c7c <_dtoa_r+0xb80>
    956c:	a5000044 	addi	r20,r20,1
    9570:	15000005 	stb	r20,0(r2)
    9574:	003c8206 	br	8780 <_dtoa_r+0x684>
    9578:	d8800217 	ldw	r2,8(sp)
    957c:	00c00d84 	movi	r3,54
    9580:	dcc00a17 	ldw	r19,40(sp)
    9584:	1885c83a 	sub	r2,r3,r2
    9588:	dc800817 	ldw	r18,32(sp)
    958c:	003d4506 	br	8aa4 <_dtoa_r+0x9a8>
    9590:	dcc00317 	ldw	r19,12(sp)
    9594:	8829883a 	mov	r20,r17
    9598:	04800084 	movi	r18,2
    959c:	003bea06 	br	8548 <_dtoa_r+0x44c>
    95a0:	d9000917 	ldw	r4,36(sp)
    95a4:	203f1126 	beq	r4,zero,91ec <_dtoa_r+0x10f0>
    95a8:	d9c00e17 	ldw	r7,56(sp)
    95ac:	01fca20e 	bge	zero,r7,8838 <_dtoa_r+0x73c>
    95b0:	a00b883a 	mov	r5,r20
    95b4:	9809883a 	mov	r4,r19
    95b8:	000d883a 	mov	r6,zero
    95bc:	01d00934 	movhi	r7,16420
    95c0:	00100100 	call	10010 <__muldf3>
    95c4:	91000044 	addi	r4,r18,1
    95c8:	1027883a 	mov	r19,r2
    95cc:	1829883a 	mov	r20,r3
    95d0:	00106e00 	call	106e0 <__floatsidf>
    95d4:	9809883a 	mov	r4,r19
    95d8:	a00b883a 	mov	r5,r20
    95dc:	100d883a 	mov	r6,r2
    95e0:	180f883a 	mov	r7,r3
    95e4:	00100100 	call	10010 <__muldf3>
    95e8:	1009883a 	mov	r4,r2
    95ec:	180b883a 	mov	r5,r3
    95f0:	000d883a 	mov	r6,zero
    95f4:	01d00734 	movhi	r7,16412
    95f8:	000ff5c0 	call	ff5c <__adddf3>
    95fc:	1025883a 	mov	r18,r2
    9600:	d8800617 	ldw	r2,24(sp)
    9604:	057f3034 	movhi	r21,64704
    9608:	1d6b883a 	add	r21,r3,r21
    960c:	10bfffc4 	addi	r2,r2,-1
    9610:	d8801315 	stw	r2,76(sp)
    9614:	dac00e17 	ldw	r11,56(sp)
    9618:	003be706 	br	85b8 <_dtoa_r+0x4bc>
    961c:	01000e44 	movi	r4,57
    9620:	91000005 	stb	r4,0(r18)
    9624:	95800044 	addi	r22,r18,1
    9628:	982b883a 	mov	r21,r19
    962c:	003da106 	br	8cb4 <_dtoa_r+0xbb8>
    9630:	d9801117 	ldw	r6,68(sp)
    9634:	d9c01217 	ldw	r7,72(sp)
    9638:	0009883a 	mov	r4,zero
    963c:	014ff834 	movhi	r5,16352
    9640:	da801515 	stw	r10,84(sp)
    9644:	000ffb00 	call	ffb0 <__subdf3>
    9648:	da801517 	ldw	r10,84(sp)
    964c:	1009883a 	mov	r4,r2
    9650:	180b883a 	mov	r5,r3
    9654:	a80d883a 	mov	r6,r21
    9658:	500f883a 	mov	r7,r10
    965c:	00105600 	call	10560 <__gtdf2>
    9660:	00bc750e 	bge	zero,r2,8838 <_dtoa_r+0x73c>
    9664:	01000c04 	movi	r4,48
    9668:	00000106 	br	9670 <_dtoa_r+0x1574>
    966c:	102d883a 	mov	r22,r2
    9670:	b0bfffc4 	addi	r2,r22,-1
    9674:	10c00007 	ldb	r3,0(r2)
    9678:	193ffc26 	beq	r3,r4,966c <_dtoa_r+0x1570>
    967c:	d8801317 	ldw	r2,76(sp)
    9680:	d8800615 	stw	r2,24(sp)
    9684:	003c3e06 	br	8780 <_dtoa_r+0x684>
    9688:	d9001317 	ldw	r4,76(sp)
    968c:	df001117 	ldw	fp,68(sp)
    9690:	d9000615 	stw	r4,24(sp)
    9694:	003ce006 	br	8a18 <_dtoa_r+0x91c>
    9698:	df001117 	ldw	fp,68(sp)
    969c:	dc401217 	ldw	r17,72(sp)
    96a0:	003c6506 	br	8838 <_dtoa_r+0x73c>
    96a4:	103e7a1e 	bne	r2,zero,9090 <_dtoa_r+0xf94>
    96a8:	1880004c 	andi	r2,r3,1
    96ac:	103e7826 	beq	r2,zero,9090 <_dtoa_r+0xf94>
    96b0:	003e7406 	br	9084 <_dtoa_r+0xf88>
    96b4:	8009883a 	mov	r4,r16
    96b8:	a80b883a 	mov	r5,r21
    96bc:	01800284 	movi	r6,10
    96c0:	000f883a 	mov	r7,zero
    96c4:	000a2b40 	call	a2b4 <__multadd>
    96c8:	d9000e17 	ldw	r4,56(sp)
    96cc:	102b883a 	mov	r21,r2
    96d0:	d9000915 	stw	r4,36(sp)
    96d4:	003d5106 	br	8c1c <_dtoa_r+0xb20>
    96d8:	04800084 	movi	r18,2
    96dc:	003b9a06 	br	8548 <_dtoa_r+0x44c>
    96e0:	d8c01317 	ldw	r3,76(sp)
    96e4:	d8c00615 	stw	r3,24(sp)
    96e8:	003ccb06 	br	8a18 <_dtoa_r+0x91c>
    96ec:	d8c01317 	ldw	r3,76(sp)
    96f0:	d8c00615 	stw	r3,24(sp)
    96f4:	003c2206 	br	8780 <_dtoa_r+0x684>
    96f8:	20fd3826 	beq	r4,r3,8bdc <_dtoa_r+0xae0>
    96fc:	00c00f04 	movi	r3,60
    9700:	1885c83a 	sub	r2,r3,r2
    9704:	003da906 	br	8dac <_dtoa_r+0xcb0>
    9708:	000b883a 	mov	r5,zero
    970c:	003b5406 	br	8460 <_dtoa_r+0x364>
    9710:	04c00044 	movi	r19,1
    9714:	003b3b06 	br	8404 <_dtoa_r+0x308>

00009718 <__sflags>:
    9718:	28800007 	ldb	r2,0(r5)
    971c:	00c01c84 	movi	r3,114
    9720:	10c01826 	beq	r2,r3,9784 <__sflags+0x6c>
    9724:	00c01dc4 	movi	r3,119
    9728:	10c01226 	beq	r2,r3,9774 <__sflags+0x5c>
    972c:	00c01844 	movi	r3,97
    9730:	10c00426 	beq	r2,r3,9744 <__sflags+0x2c>
    9734:	00800584 	movi	r2,22
    9738:	20800015 	stw	r2,0(r4)
    973c:	0005883a 	mov	r2,zero
    9740:	f800283a 	ret
    9744:	01c08204 	movi	r7,520
    9748:	01000044 	movi	r4,1
    974c:	00804204 	movi	r2,264
    9750:	28c00047 	ldb	r3,1(r5)
    9754:	18000426 	beq	r3,zero,9768 <__sflags+0x50>
    9758:	02000ac4 	movi	r8,43
    975c:	1a000d26 	beq	r3,r8,9794 <__sflags+0x7c>
    9760:	28c00087 	ldb	r3,2(r5)
    9764:	1a000b26 	beq	r3,r8,9794 <__sflags+0x7c>
    9768:	21c8b03a 	or	r4,r4,r7
    976c:	31000015 	stw	r4,0(r6)
    9770:	f800283a 	ret
    9774:	01c18004 	movi	r7,1536
    9778:	01000044 	movi	r4,1
    977c:	00800204 	movi	r2,8
    9780:	003ff306 	br	9750 <__sflags+0x38>
    9784:	000f883a 	mov	r7,zero
    9788:	0009883a 	mov	r4,zero
    978c:	00800104 	movi	r2,4
    9790:	003fef06 	br	9750 <__sflags+0x38>
    9794:	00fff8c4 	movi	r3,-29
    9798:	01000084 	movi	r4,2
    979c:	10c4703a 	and	r2,r2,r3
    97a0:	21c8b03a 	or	r4,r4,r7
    97a4:	10800414 	ori	r2,r2,16
    97a8:	31000015 	stw	r4,0(r6)
    97ac:	f800283a 	ret

000097b0 <__sfvwrite_r>:
    97b0:	30800217 	ldw	r2,8(r6)
    97b4:	defff504 	addi	sp,sp,-44
    97b8:	dd400615 	stw	r21,24(sp)
    97bc:	dd000515 	stw	r20,20(sp)
    97c0:	dc000115 	stw	r16,4(sp)
    97c4:	dfc00a15 	stw	ra,40(sp)
    97c8:	df000915 	stw	fp,36(sp)
    97cc:	ddc00815 	stw	r23,32(sp)
    97d0:	dd800715 	stw	r22,28(sp)
    97d4:	dcc00415 	stw	r19,16(sp)
    97d8:	dc800315 	stw	r18,12(sp)
    97dc:	dc400215 	stw	r17,8(sp)
    97e0:	3029883a 	mov	r20,r6
    97e4:	202b883a 	mov	r21,r4
    97e8:	2821883a 	mov	r16,r5
    97ec:	10002126 	beq	r2,zero,9874 <__sfvwrite_r+0xc4>
    97f0:	2880030b 	ldhu	r2,12(r5)
    97f4:	10c0020c 	andi	r3,r2,8
    97f8:	18ffffcc 	andi	r3,r3,65535
    97fc:	18e0001c 	xori	r3,r3,32768
    9800:	18e00004 	addi	r3,r3,-32768
    9804:	18002826 	beq	r3,zero,98a8 <__sfvwrite_r+0xf8>
    9808:	28c00417 	ldw	r3,16(r5)
    980c:	18002626 	beq	r3,zero,98a8 <__sfvwrite_r+0xf8>
    9810:	10c0008c 	andi	r3,r2,2
    9814:	18ffffcc 	andi	r3,r3,65535
    9818:	18e0001c 	xori	r3,r3,32768
    981c:	18e00004 	addi	r3,r3,-32768
    9820:	a4400017 	ldw	r17,0(r20)
    9824:	18002b26 	beq	r3,zero,98d4 <__sfvwrite_r+0x124>
    9828:	0027883a 	mov	r19,zero
    982c:	0025883a 	mov	r18,zero
    9830:	05810004 	movi	r22,1024
    9834:	980d883a 	mov	r6,r19
    9838:	a809883a 	mov	r4,r21
    983c:	90004f26 	beq	r18,zero,997c <__sfvwrite_r+0x1cc>
    9840:	900f883a 	mov	r7,r18
    9844:	81400717 	ldw	r5,28(r16)
    9848:	b480012e 	bgeu	r22,r18,9850 <__sfvwrite_r+0xa0>
    984c:	01c10004 	movi	r7,1024
    9850:	80800917 	ldw	r2,36(r16)
    9854:	103ee83a 	callr	r2
    9858:	0080540e 	bge	zero,r2,99ac <__sfvwrite_r+0x1fc>
    985c:	a0c00217 	ldw	r3,8(r20)
    9860:	98a7883a 	add	r19,r19,r2
    9864:	90a5c83a 	sub	r18,r18,r2
    9868:	1885c83a 	sub	r2,r3,r2
    986c:	a0800215 	stw	r2,8(r20)
    9870:	103ff01e 	bne	r2,zero,9834 <__sfvwrite_r+0x84>
    9874:	0005883a 	mov	r2,zero
    9878:	dfc00a17 	ldw	ra,40(sp)
    987c:	df000917 	ldw	fp,36(sp)
    9880:	ddc00817 	ldw	r23,32(sp)
    9884:	dd800717 	ldw	r22,28(sp)
    9888:	dd400617 	ldw	r21,24(sp)
    988c:	dd000517 	ldw	r20,20(sp)
    9890:	dcc00417 	ldw	r19,16(sp)
    9894:	dc800317 	ldw	r18,12(sp)
    9898:	dc400217 	ldw	r17,8(sp)
    989c:	dc000117 	ldw	r16,4(sp)
    98a0:	dec00b04 	addi	sp,sp,44
    98a4:	f800283a 	ret
    98a8:	a809883a 	mov	r4,r21
    98ac:	800b883a 	mov	r5,r16
    98b0:	0007ce80 	call	7ce8 <__swsetup_r>
    98b4:	1000f01e 	bne	r2,zero,9c78 <__sfvwrite_r+0x4c8>
    98b8:	8080030b 	ldhu	r2,12(r16)
    98bc:	a4400017 	ldw	r17,0(r20)
    98c0:	10c0008c 	andi	r3,r2,2
    98c4:	18ffffcc 	andi	r3,r3,65535
    98c8:	18e0001c 	xori	r3,r3,32768
    98cc:	18e00004 	addi	r3,r3,-32768
    98d0:	183fd51e 	bne	r3,zero,9828 <__sfvwrite_r+0x78>
    98d4:	10c0004c 	andi	r3,r2,1
    98d8:	002d883a 	mov	r22,zero
    98dc:	1800381e 	bne	r3,zero,99c0 <__sfvwrite_r+0x210>
    98e0:	0025883a 	mov	r18,zero
    98e4:	90002126 	beq	r18,zero,996c <__sfvwrite_r+0x1bc>
    98e8:	10c0800c 	andi	r3,r2,512
    98ec:	18ffffcc 	andi	r3,r3,65535
    98f0:	18e0001c 	xori	r3,r3,32768
    98f4:	18e00004 	addi	r3,r3,-32768
    98f8:	84c00217 	ldw	r19,8(r16)
    98fc:	18006b26 	beq	r3,zero,9aac <__sfvwrite_r+0x2fc>
    9900:	980f883a 	mov	r7,r19
    9904:	94c08636 	bltu	r18,r19,9b20 <__sfvwrite_r+0x370>
    9908:	10c1200c 	andi	r3,r2,1152
    990c:	18009f1e 	bne	r3,zero,9b8c <__sfvwrite_r+0x3dc>
    9910:	81000017 	ldw	r4,0(r16)
    9914:	982f883a 	mov	r23,r19
    9918:	9039883a 	mov	fp,r18
    991c:	9027883a 	mov	r19,r18
    9920:	380d883a 	mov	r6,r7
    9924:	b00b883a 	mov	r5,r22
    9928:	d9c00015 	stw	r7,0(sp)
    992c:	000a0580 	call	a058 <memmove>
    9930:	d9c00017 	ldw	r7,0(sp)
    9934:	81000217 	ldw	r4,8(r16)
    9938:	80800017 	ldw	r2,0(r16)
    993c:	25efc83a 	sub	r23,r4,r23
    9940:	11cf883a 	add	r7,r2,r7
    9944:	85c00215 	stw	r23,8(r16)
    9948:	81c00015 	stw	r7,0(r16)
    994c:	a0800217 	ldw	r2,8(r20)
    9950:	b72d883a 	add	r22,r22,fp
    9954:	9725c83a 	sub	r18,r18,fp
    9958:	14e7c83a 	sub	r19,r2,r19
    995c:	a4c00215 	stw	r19,8(r20)
    9960:	983fc426 	beq	r19,zero,9874 <__sfvwrite_r+0xc4>
    9964:	8080030b 	ldhu	r2,12(r16)
    9968:	903fdf1e 	bne	r18,zero,98e8 <__sfvwrite_r+0x138>
    996c:	8d800017 	ldw	r22,0(r17)
    9970:	8c800117 	ldw	r18,4(r17)
    9974:	8c400204 	addi	r17,r17,8
    9978:	003fda06 	br	98e4 <__sfvwrite_r+0x134>
    997c:	8cc00017 	ldw	r19,0(r17)
    9980:	8c800117 	ldw	r18,4(r17)
    9984:	8c400204 	addi	r17,r17,8
    9988:	003faa06 	br	9834 <__sfvwrite_r+0x84>
    998c:	000b2a00 	call	b2a0 <_realloc_r>
    9990:	102f883a 	mov	r23,r2
    9994:	10009f1e 	bne	r2,zero,9c14 <__sfvwrite_r+0x464>
    9998:	81400417 	ldw	r5,16(r16)
    999c:	a809883a 	mov	r4,r21
    99a0:	0002b800 	call	2b80 <_free_r>
    99a4:	00800304 	movi	r2,12
    99a8:	a8800015 	stw	r2,0(r21)
    99ac:	80c0030b 	ldhu	r3,12(r16)
    99b0:	00bfffc4 	movi	r2,-1
    99b4:	18c01014 	ori	r3,r3,64
    99b8:	80c0030d 	sth	r3,12(r16)
    99bc:	003fae06 	br	9878 <__sfvwrite_r+0xc8>
    99c0:	0007883a 	mov	r3,zero
    99c4:	0039883a 	mov	fp,zero
    99c8:	0025883a 	mov	r18,zero
    99cc:	90001e26 	beq	r18,zero,9a48 <__sfvwrite_r+0x298>
    99d0:	18006526 	beq	r3,zero,9b68 <__sfvwrite_r+0x3b8>
    99d4:	b02f883a 	mov	r23,r22
    99d8:	9580012e 	bgeu	r18,r22,99e0 <__sfvwrite_r+0x230>
    99dc:	902f883a 	mov	r23,r18
    99e0:	81000017 	ldw	r4,0(r16)
    99e4:	80800417 	ldw	r2,16(r16)
    99e8:	84c00217 	ldw	r19,8(r16)
    99ec:	81c00517 	ldw	r7,20(r16)
    99f0:	1100022e 	bgeu	r2,r4,99fc <__sfvwrite_r+0x24c>
    99f4:	99e7883a 	add	r19,r19,r7
    99f8:	9dc01816 	blt	r19,r23,9a5c <__sfvwrite_r+0x2ac>
    99fc:	b9c03b16 	blt	r23,r7,9aec <__sfvwrite_r+0x33c>
    9a00:	80800917 	ldw	r2,36(r16)
    9a04:	81400717 	ldw	r5,28(r16)
    9a08:	a809883a 	mov	r4,r21
    9a0c:	d8c00015 	stw	r3,0(sp)
    9a10:	e00d883a 	mov	r6,fp
    9a14:	103ee83a 	callr	r2
    9a18:	1027883a 	mov	r19,r2
    9a1c:	d8c00017 	ldw	r3,0(sp)
    9a20:	00bfe20e 	bge	zero,r2,99ac <__sfvwrite_r+0x1fc>
    9a24:	b4edc83a 	sub	r22,r22,r19
    9a28:	b0001a26 	beq	r22,zero,9a94 <__sfvwrite_r+0x2e4>
    9a2c:	a0800217 	ldw	r2,8(r20)
    9a30:	e4f9883a 	add	fp,fp,r19
    9a34:	94e5c83a 	sub	r18,r18,r19
    9a38:	14e7c83a 	sub	r19,r2,r19
    9a3c:	a4c00215 	stw	r19,8(r20)
    9a40:	983f8c26 	beq	r19,zero,9874 <__sfvwrite_r+0xc4>
    9a44:	903fe21e 	bne	r18,zero,99d0 <__sfvwrite_r+0x220>
    9a48:	8f000017 	ldw	fp,0(r17)
    9a4c:	8c800117 	ldw	r18,4(r17)
    9a50:	0007883a 	mov	r3,zero
    9a54:	8c400204 	addi	r17,r17,8
    9a58:	003fdc06 	br	99cc <__sfvwrite_r+0x21c>
    9a5c:	e00b883a 	mov	r5,fp
    9a60:	980d883a 	mov	r6,r19
    9a64:	d8c00015 	stw	r3,0(sp)
    9a68:	000a0580 	call	a058 <memmove>
    9a6c:	80800017 	ldw	r2,0(r16)
    9a70:	a809883a 	mov	r4,r21
    9a74:	800b883a 	mov	r5,r16
    9a78:	14c5883a 	add	r2,r2,r19
    9a7c:	80800015 	stw	r2,0(r16)
    9a80:	00021780 	call	2178 <_fflush_r>
    9a84:	d8c00017 	ldw	r3,0(sp)
    9a88:	103fc81e 	bne	r2,zero,99ac <__sfvwrite_r+0x1fc>
    9a8c:	b4edc83a 	sub	r22,r22,r19
    9a90:	b03fe61e 	bne	r22,zero,9a2c <__sfvwrite_r+0x27c>
    9a94:	a809883a 	mov	r4,r21
    9a98:	800b883a 	mov	r5,r16
    9a9c:	00021780 	call	2178 <_fflush_r>
    9aa0:	103fc21e 	bne	r2,zero,99ac <__sfvwrite_r+0x1fc>
    9aa4:	0007883a 	mov	r3,zero
    9aa8:	003fe006 	br	9a2c <__sfvwrite_r+0x27c>
    9aac:	81000017 	ldw	r4,0(r16)
    9ab0:	80800417 	ldw	r2,16(r16)
    9ab4:	1100022e 	bgeu	r2,r4,9ac0 <__sfvwrite_r+0x310>
    9ab8:	9839883a 	mov	fp,r19
    9abc:	9c806036 	bltu	r19,r18,9c40 <__sfvwrite_r+0x490>
    9ac0:	81c00517 	ldw	r7,20(r16)
    9ac4:	91c01c36 	bltu	r18,r7,9b38 <__sfvwrite_r+0x388>
    9ac8:	80800917 	ldw	r2,36(r16)
    9acc:	81400717 	ldw	r5,28(r16)
    9ad0:	a809883a 	mov	r4,r21
    9ad4:	b00d883a 	mov	r6,r22
    9ad8:	103ee83a 	callr	r2
    9adc:	1027883a 	mov	r19,r2
    9ae0:	00bfb20e 	bge	zero,r2,99ac <__sfvwrite_r+0x1fc>
    9ae4:	1039883a 	mov	fp,r2
    9ae8:	003f9806 	br	994c <__sfvwrite_r+0x19c>
    9aec:	b80d883a 	mov	r6,r23
    9af0:	e00b883a 	mov	r5,fp
    9af4:	d8c00015 	stw	r3,0(sp)
    9af8:	000a0580 	call	a058 <memmove>
    9afc:	80800217 	ldw	r2,8(r16)
    9b00:	81000017 	ldw	r4,0(r16)
    9b04:	b827883a 	mov	r19,r23
    9b08:	15c5c83a 	sub	r2,r2,r23
    9b0c:	25ef883a 	add	r23,r4,r23
    9b10:	80800215 	stw	r2,8(r16)
    9b14:	85c00015 	stw	r23,0(r16)
    9b18:	d8c00017 	ldw	r3,0(sp)
    9b1c:	003fc106 	br	9a24 <__sfvwrite_r+0x274>
    9b20:	81000017 	ldw	r4,0(r16)
    9b24:	902f883a 	mov	r23,r18
    9b28:	9039883a 	mov	fp,r18
    9b2c:	9027883a 	mov	r19,r18
    9b30:	900f883a 	mov	r7,r18
    9b34:	003f7a06 	br	9920 <__sfvwrite_r+0x170>
    9b38:	b00b883a 	mov	r5,r22
    9b3c:	900d883a 	mov	r6,r18
    9b40:	000a0580 	call	a058 <memmove>
    9b44:	80c00217 	ldw	r3,8(r16)
    9b48:	80800017 	ldw	r2,0(r16)
    9b4c:	9027883a 	mov	r19,r18
    9b50:	1c87c83a 	sub	r3,r3,r18
    9b54:	1485883a 	add	r2,r2,r18
    9b58:	80c00215 	stw	r3,8(r16)
    9b5c:	80800015 	stw	r2,0(r16)
    9b60:	9039883a 	mov	fp,r18
    9b64:	003f7906 	br	994c <__sfvwrite_r+0x19c>
    9b68:	e009883a 	mov	r4,fp
    9b6c:	01400284 	movi	r5,10
    9b70:	900d883a 	mov	r6,r18
    9b74:	0009f600 	call	9f60 <memchr>
    9b78:	10003c26 	beq	r2,zero,9c6c <__sfvwrite_r+0x4bc>
    9b7c:	15800044 	addi	r22,r2,1
    9b80:	b72dc83a 	sub	r22,r22,fp
    9b84:	00c00044 	movi	r3,1
    9b88:	003f9206 	br	99d4 <__sfvwrite_r+0x224>
    9b8c:	81000517 	ldw	r4,20(r16)
    9b90:	81400417 	ldw	r5,16(r16)
    9b94:	80c00017 	ldw	r3,0(r16)
    9b98:	210d883a 	add	r6,r4,r4
    9b9c:	3109883a 	add	r4,r6,r4
    9ba0:	2026d7fa 	srli	r19,r4,31
    9ba4:	1979c83a 	sub	fp,r3,r5
    9ba8:	e1800044 	addi	r6,fp,1
    9bac:	9909883a 	add	r4,r19,r4
    9bb0:	2027d07a 	srai	r19,r4,1
    9bb4:	3489883a 	add	r4,r6,r18
    9bb8:	980d883a 	mov	r6,r19
    9bbc:	9900022e 	bgeu	r19,r4,9bc8 <__sfvwrite_r+0x418>
    9bc0:	2027883a 	mov	r19,r4
    9bc4:	200d883a 	mov	r6,r4
    9bc8:	1081000c 	andi	r2,r2,1024
    9bcc:	10bfffcc 	andi	r2,r2,65535
    9bd0:	10a0001c 	xori	r2,r2,32768
    9bd4:	10a00004 	addi	r2,r2,-32768
    9bd8:	a809883a 	mov	r4,r21
    9bdc:	103f6b26 	beq	r2,zero,998c <__sfvwrite_r+0x1dc>
    9be0:	300b883a 	mov	r5,r6
    9be4:	00036dc0 	call	36dc <_malloc_r>
    9be8:	102f883a 	mov	r23,r2
    9bec:	103f6d26 	beq	r2,zero,99a4 <__sfvwrite_r+0x1f4>
    9bf0:	81400417 	ldw	r5,16(r16)
    9bf4:	1009883a 	mov	r4,r2
    9bf8:	e00d883a 	mov	r6,fp
    9bfc:	0003e600 	call	3e60 <memcpy>
    9c00:	8080030b 	ldhu	r2,12(r16)
    9c04:	00fedfc4 	movi	r3,-1153
    9c08:	10c4703a 	and	r2,r2,r3
    9c0c:	10802014 	ori	r2,r2,128
    9c10:	8080030d 	sth	r2,12(r16)
    9c14:	bf09883a 	add	r4,r23,fp
    9c18:	9f07c83a 	sub	r3,r19,fp
    9c1c:	85c00415 	stw	r23,16(r16)
    9c20:	84c00515 	stw	r19,20(r16)
    9c24:	81000015 	stw	r4,0(r16)
    9c28:	902f883a 	mov	r23,r18
    9c2c:	80c00215 	stw	r3,8(r16)
    9c30:	9039883a 	mov	fp,r18
    9c34:	9027883a 	mov	r19,r18
    9c38:	900f883a 	mov	r7,r18
    9c3c:	003f3806 	br	9920 <__sfvwrite_r+0x170>
    9c40:	b00b883a 	mov	r5,r22
    9c44:	980d883a 	mov	r6,r19
    9c48:	000a0580 	call	a058 <memmove>
    9c4c:	80800017 	ldw	r2,0(r16)
    9c50:	a809883a 	mov	r4,r21
    9c54:	800b883a 	mov	r5,r16
    9c58:	14c5883a 	add	r2,r2,r19
    9c5c:	80800015 	stw	r2,0(r16)
    9c60:	00021780 	call	2178 <_fflush_r>
    9c64:	103f3926 	beq	r2,zero,994c <__sfvwrite_r+0x19c>
    9c68:	003f5006 	br	99ac <__sfvwrite_r+0x1fc>
    9c6c:	95800044 	addi	r22,r18,1
    9c70:	00c00044 	movi	r3,1
    9c74:	003f5706 	br	99d4 <__sfvwrite_r+0x224>
    9c78:	80c0030b 	ldhu	r3,12(r16)
    9c7c:	00bfffc4 	movi	r2,-1
    9c80:	18c01014 	ori	r3,r3,64
    9c84:	80c0030d 	sth	r3,12(r16)
    9c88:	00c00244 	movi	r3,9
    9c8c:	a8c00015 	stw	r3,0(r21)
    9c90:	003ef906 	br	9878 <__sfvwrite_r+0xc8>

00009c94 <_isatty_r>:
    9c94:	defffd04 	addi	sp,sp,-12
    9c98:	dc400115 	stw	r17,4(sp)
    9c9c:	dc000015 	stw	r16,0(sp)
    9ca0:	2023883a 	mov	r17,r4
    9ca4:	040000b4 	movhi	r16,2
    9ca8:	84219804 	addi	r16,r16,-31136
    9cac:	2809883a 	mov	r4,r5
    9cb0:	dfc00215 	stw	ra,8(sp)
    9cb4:	80000015 	stw	zero,0(r16)
    9cb8:	00115d40 	call	115d4 <isatty>
    9cbc:	00ffffc4 	movi	r3,-1
    9cc0:	10c00526 	beq	r2,r3,9cd8 <_isatty_r+0x44>
    9cc4:	dfc00217 	ldw	ra,8(sp)
    9cc8:	dc400117 	ldw	r17,4(sp)
    9ccc:	dc000017 	ldw	r16,0(sp)
    9cd0:	dec00304 	addi	sp,sp,12
    9cd4:	f800283a 	ret
    9cd8:	80c00017 	ldw	r3,0(r16)
    9cdc:	183ff926 	beq	r3,zero,9cc4 <_isatty_r+0x30>
    9ce0:	88c00015 	stw	r3,0(r17)
    9ce4:	dfc00217 	ldw	ra,8(sp)
    9ce8:	dc400117 	ldw	r17,4(sp)
    9cec:	dc000017 	ldw	r16,0(sp)
    9cf0:	dec00304 	addi	sp,sp,12
    9cf4:	f800283a 	ret

00009cf8 <iswspace>:
    9cf8:	00803fc4 	movi	r2,255
    9cfc:	11000a36 	bltu	r2,r4,9d28 <iswspace+0x30>
    9d00:	00800074 	movhi	r2,1
    9d04:	109ab804 	addi	r2,r2,27360
    9d08:	10800017 	ldw	r2,0(r2)
    9d0c:	1109883a 	add	r4,r2,r4
    9d10:	20800003 	ldbu	r2,0(r4)
    9d14:	1080020c 	andi	r2,r2,8
    9d18:	10803fcc 	andi	r2,r2,255
    9d1c:	1080201c 	xori	r2,r2,128
    9d20:	10bfe004 	addi	r2,r2,-128
    9d24:	f800283a 	ret
    9d28:	0005883a 	mov	r2,zero
    9d2c:	f800283a 	ret

00009d30 <_setlocale_r>:
    9d30:	defffc04 	addi	sp,sp,-16
    9d34:	dc800215 	stw	r18,8(sp)
    9d38:	dc400115 	stw	r17,4(sp)
    9d3c:	dc000015 	stw	r16,0(sp)
    9d40:	dfc00315 	stw	ra,12(sp)
    9d44:	3021883a 	mov	r16,r6
    9d48:	2023883a 	mov	r17,r4
    9d4c:	2825883a 	mov	r18,r5
    9d50:	30001626 	beq	r6,zero,9dac <_setlocale_r+0x7c>
    9d54:	3009883a 	mov	r4,r6
    9d58:	01400074 	movhi	r5,1
    9d5c:	29529004 	addi	r5,r5,19008
    9d60:	000ba900 	call	ba90 <strcmp>
    9d64:	10000a1e 	bne	r2,zero,9d90 <_setlocale_r+0x60>
    9d68:	8c800c15 	stw	r18,48(r17)
    9d6c:	8c000d15 	stw	r16,52(r17)
    9d70:	00800074 	movhi	r2,1
    9d74:	10929004 	addi	r2,r2,19008
    9d78:	dfc00317 	ldw	ra,12(sp)
    9d7c:	dc800217 	ldw	r18,8(sp)
    9d80:	dc400117 	ldw	r17,4(sp)
    9d84:	dc000017 	ldw	r16,0(sp)
    9d88:	dec00404 	addi	sp,sp,16
    9d8c:	f800283a 	ret
    9d90:	8009883a 	mov	r4,r16
    9d94:	01400074 	movhi	r5,1
    9d98:	29529a04 	addi	r5,r5,19048
    9d9c:	000ba900 	call	ba90 <strcmp>
    9da0:	103ff126 	beq	r2,zero,9d68 <_setlocale_r+0x38>
    9da4:	0005883a 	mov	r2,zero
    9da8:	003ff306 	br	9d78 <_setlocale_r+0x48>
    9dac:	00800074 	movhi	r2,1
    9db0:	10929004 	addi	r2,r2,19008
    9db4:	dfc00317 	ldw	ra,12(sp)
    9db8:	dc800217 	ldw	r18,8(sp)
    9dbc:	dc400117 	ldw	r17,4(sp)
    9dc0:	dc000017 	ldw	r16,0(sp)
    9dc4:	dec00404 	addi	sp,sp,16
    9dc8:	f800283a 	ret

00009dcc <__locale_charset>:
    9dcc:	00800074 	movhi	r2,1
    9dd0:	10935a04 	addi	r2,r2,19816
    9dd4:	f800283a 	ret

00009dd8 <_localeconv_r>:
    9dd8:	00800074 	movhi	r2,1
    9ddc:	10935e04 	addi	r2,r2,19832
    9de0:	f800283a 	ret

00009de4 <setlocale>:
    9de4:	00c00074 	movhi	r3,1
    9de8:	18dab504 	addi	r3,r3,27348
    9dec:	2005883a 	mov	r2,r4
    9df0:	19000017 	ldw	r4,0(r3)
    9df4:	280d883a 	mov	r6,r5
    9df8:	100b883a 	mov	r5,r2
    9dfc:	0009d301 	jmpi	9d30 <_setlocale_r>

00009e00 <localeconv>:
    9e00:	00800074 	movhi	r2,1
    9e04:	10935e04 	addi	r2,r2,19832
    9e08:	f800283a 	ret

00009e0c <_lseek_r>:
    9e0c:	defffd04 	addi	sp,sp,-12
    9e10:	dc400115 	stw	r17,4(sp)
    9e14:	dc000015 	stw	r16,0(sp)
    9e18:	2023883a 	mov	r17,r4
    9e1c:	040000b4 	movhi	r16,2
    9e20:	84219804 	addi	r16,r16,-31136
    9e24:	2809883a 	mov	r4,r5
    9e28:	300b883a 	mov	r5,r6
    9e2c:	380d883a 	mov	r6,r7
    9e30:	dfc00215 	stw	ra,8(sp)
    9e34:	80000015 	stw	zero,0(r16)
    9e38:	00117b40 	call	117b4 <lseek>
    9e3c:	00ffffc4 	movi	r3,-1
    9e40:	10c00526 	beq	r2,r3,9e58 <_lseek_r+0x4c>
    9e44:	dfc00217 	ldw	ra,8(sp)
    9e48:	dc400117 	ldw	r17,4(sp)
    9e4c:	dc000017 	ldw	r16,0(sp)
    9e50:	dec00304 	addi	sp,sp,12
    9e54:	f800283a 	ret
    9e58:	80c00017 	ldw	r3,0(r16)
    9e5c:	183ff926 	beq	r3,zero,9e44 <_lseek_r+0x38>
    9e60:	88c00015 	stw	r3,0(r17)
    9e64:	dfc00217 	ldw	ra,8(sp)
    9e68:	dc400117 	ldw	r17,4(sp)
    9e6c:	dc000017 	ldw	r16,0(sp)
    9e70:	dec00304 	addi	sp,sp,12
    9e74:	f800283a 	ret

00009e78 <_mbrtowc_r>:
    9e78:	defffc04 	addi	sp,sp,-16
    9e7c:	dc000115 	stw	r16,4(sp)
    9e80:	dc000417 	ldw	r16,16(sp)
    9e84:	dc400215 	stw	r17,8(sp)
    9e88:	dfc00315 	stw	ra,12(sp)
    9e8c:	dc000015 	stw	r16,0(sp)
    9e90:	2023883a 	mov	r17,r4
    9e94:	30000b26 	beq	r6,zero,9ec4 <_mbrtowc_r+0x4c>
    9e98:	0009f1c0 	call	9f1c <_mbtowc_r>
    9e9c:	00ffffc4 	movi	r3,-1
    9ea0:	10c0031e 	bne	r2,r3,9eb0 <_mbrtowc_r+0x38>
    9ea4:	80000015 	stw	zero,0(r16)
    9ea8:	00c02284 	movi	r3,138
    9eac:	88c00015 	stw	r3,0(r17)
    9eb0:	dfc00317 	ldw	ra,12(sp)
    9eb4:	dc400217 	ldw	r17,8(sp)
    9eb8:	dc000117 	ldw	r16,4(sp)
    9ebc:	dec00404 	addi	sp,sp,16
    9ec0:	f800283a 	ret
    9ec4:	000b883a 	mov	r5,zero
    9ec8:	01800074 	movhi	r6,1
    9ecc:	31929a04 	addi	r6,r6,19048
    9ed0:	01c00044 	movi	r7,1
    9ed4:	0009f1c0 	call	9f1c <_mbtowc_r>
    9ed8:	003ff006 	br	9e9c <_mbrtowc_r+0x24>

00009edc <mbrtowc>:
    9edc:	00800074 	movhi	r2,1
    9ee0:	109ab504 	addi	r2,r2,27348
    9ee4:	2011883a 	mov	r8,r4
    9ee8:	11000017 	ldw	r4,0(r2)
    9eec:	defffe04 	addi	sp,sp,-8
    9ef0:	2807883a 	mov	r3,r5
    9ef4:	3005883a 	mov	r2,r6
    9ef8:	d9c00015 	stw	r7,0(sp)
    9efc:	400b883a 	mov	r5,r8
    9f00:	180d883a 	mov	r6,r3
    9f04:	100f883a 	mov	r7,r2
    9f08:	dfc00115 	stw	ra,4(sp)
    9f0c:	0009e780 	call	9e78 <_mbrtowc_r>
    9f10:	dfc00117 	ldw	ra,4(sp)
    9f14:	dec00204 	addi	sp,sp,8
    9f18:	f800283a 	ret

00009f1c <_mbtowc_r>:
    9f1c:	deffff04 	addi	sp,sp,-4
    9f20:	28000826 	beq	r5,zero,9f44 <_mbtowc_r+0x28>
    9f24:	30000926 	beq	r6,zero,9f4c <_mbtowc_r+0x30>
    9f28:	38000b26 	beq	r7,zero,9f58 <_mbtowc_r+0x3c>
    9f2c:	30800003 	ldbu	r2,0(r6)
    9f30:	28800015 	stw	r2,0(r5)
    9f34:	30800003 	ldbu	r2,0(r6)
    9f38:	1004c03a 	cmpne	r2,r2,zero
    9f3c:	dec00104 	addi	sp,sp,4
    9f40:	f800283a 	ret
    9f44:	d80b883a 	mov	r5,sp
    9f48:	303ff71e 	bne	r6,zero,9f28 <_mbtowc_r+0xc>
    9f4c:	0005883a 	mov	r2,zero
    9f50:	dec00104 	addi	sp,sp,4
    9f54:	f800283a 	ret
    9f58:	00bfff84 	movi	r2,-2
    9f5c:	003ff706 	br	9f3c <_mbtowc_r+0x20>

00009f60 <memchr>:
    9f60:	008000c4 	movi	r2,3
    9f64:	29403fcc 	andi	r5,r5,255
    9f68:	1180282e 	bgeu	r2,r6,a00c <memchr+0xac>
    9f6c:	2086703a 	and	r3,r4,r2
    9f70:	1800351e 	bne	r3,zero,a048 <memchr+0xe8>
    9f74:	2816923a 	slli	r11,r5,8
    9f78:	2093883a 	add	r9,r4,r2
    9f7c:	22000084 	addi	r8,r4,2
    9f80:	5957883a 	add	r11,r11,r5
    9f84:	5816923a 	slli	r11,r11,8
    9f88:	20c00044 	addi	r3,r4,1
    9f8c:	037fbff4 	movhi	r13,65279
    9f90:	6b7fbfc4 	addi	r13,r13,-257
    9f94:	5957883a 	add	r11,r11,r5
    9f98:	5816923a 	slli	r11,r11,8
    9f9c:	03202074 	movhi	r12,32897
    9fa0:	63202004 	addi	r12,r12,-32640
    9fa4:	101d883a 	mov	r14,r2
    9fa8:	5957883a 	add	r11,r11,r5
    9fac:	21c00017 	ldw	r7,0(r4)
    9fb0:	31bfff04 	addi	r6,r6,-4
    9fb4:	1805883a 	mov	r2,r3
    9fb8:	3acef03a 	xor	r7,r7,r11
    9fbc:	3b55883a 	add	r10,r7,r13
    9fc0:	01ce303a 	nor	r7,zero,r7
    9fc4:	51ce703a 	and	r7,r10,r7
    9fc8:	3b0e703a 	and	r7,r7,r12
    9fcc:	38000a26 	beq	r7,zero,9ff8 <memchr+0x98>
    9fd0:	21c00003 	ldbu	r7,0(r4)
    9fd4:	39401e26 	beq	r7,r5,a050 <memchr+0xf0>
    9fd8:	19c00003 	ldbu	r7,0(r3)
    9fdc:	39401926 	beq	r7,r5,a044 <memchr+0xe4>
    9fe0:	41c00003 	ldbu	r7,0(r8)
    9fe4:	4005883a 	mov	r2,r8
    9fe8:	39401626 	beq	r7,r5,a044 <memchr+0xe4>
    9fec:	49c00003 	ldbu	r7,0(r9)
    9ff0:	4805883a 	mov	r2,r9
    9ff4:	39401326 	beq	r7,r5,a044 <memchr+0xe4>
    9ff8:	21000104 	addi	r4,r4,4
    9ffc:	4a400104 	addi	r9,r9,4
    a000:	42000104 	addi	r8,r8,4
    a004:	18c00104 	addi	r3,r3,4
    a008:	71bfe836 	bltu	r14,r6,9fac <memchr+0x4c>
    a00c:	2005883a 	mov	r2,r4
    a010:	30000a26 	beq	r6,zero,a03c <memchr+0xdc>
    a014:	10c00003 	ldbu	r3,0(r2)
    a018:	19400a26 	beq	r3,r5,a044 <memchr+0xe4>
    a01c:	10c00044 	addi	r3,r2,1
    a020:	118d883a 	add	r6,r2,r6
    a024:	00000306 	br	a034 <memchr+0xd4>
    a028:	11000003 	ldbu	r4,0(r2)
    a02c:	18c00044 	addi	r3,r3,1
    a030:	21400426 	beq	r4,r5,a044 <memchr+0xe4>
    a034:	1805883a 	mov	r2,r3
    a038:	19bffb1e 	bne	r3,r6,a028 <memchr+0xc8>
    a03c:	0005883a 	mov	r2,zero
    a040:	f800283a 	ret
    a044:	f800283a 	ret
    a048:	2005883a 	mov	r2,r4
    a04c:	003ff106 	br	a014 <memchr+0xb4>
    a050:	2005883a 	mov	r2,r4
    a054:	f800283a 	ret

0000a058 <memmove>:
    a058:	defffb04 	addi	sp,sp,-20
    a05c:	dc000015 	stw	r16,0(sp)
    a060:	dfc00415 	stw	ra,16(sp)
    a064:	dcc00315 	stw	r19,12(sp)
    a068:	dc800215 	stw	r18,8(sp)
    a06c:	dc400115 	stw	r17,4(sp)
    a070:	2021883a 	mov	r16,r4
    a074:	300f883a 	mov	r7,r6
    a078:	2900122e 	bgeu	r5,r4,a0c4 <memmove+0x6c>
    a07c:	2987883a 	add	r3,r5,r6
    a080:	20c0102e 	bgeu	r4,r3,a0c4 <memmove+0x6c>
    a084:	218b883a 	add	r5,r4,r6
    a088:	1989c83a 	sub	r4,r3,r6
    a08c:	30000526 	beq	r6,zero,a0a4 <memmove+0x4c>
    a090:	18ffffc4 	addi	r3,r3,-1
    a094:	18800003 	ldbu	r2,0(r3)
    a098:	297fffc4 	addi	r5,r5,-1
    a09c:	28800005 	stb	r2,0(r5)
    a0a0:	193ffb1e 	bne	r3,r4,a090 <memmove+0x38>
    a0a4:	8005883a 	mov	r2,r16
    a0a8:	dfc00417 	ldw	ra,16(sp)
    a0ac:	dcc00317 	ldw	r19,12(sp)
    a0b0:	dc800217 	ldw	r18,8(sp)
    a0b4:	dc400117 	ldw	r17,4(sp)
    a0b8:	dc000017 	ldw	r16,0(sp)
    a0bc:	dec00504 	addi	sp,sp,20
    a0c0:	f800283a 	ret
    a0c4:	008003c4 	movi	r2,15
    a0c8:	1180422e 	bgeu	r2,r6,a1d4 <memmove+0x17c>
    a0cc:	2c04b03a 	or	r2,r5,r16
    a0d0:	108000cc 	andi	r2,r2,3
    a0d4:	10003f1e 	bne	r2,zero,a1d4 <memmove+0x17c>
    a0d8:	32bffc04 	addi	r10,r6,-16
    a0dc:	5014d13a 	srli	r10,r10,4
    a0e0:	81000404 	addi	r4,r16,16
    a0e4:	8007883a 	mov	r3,r16
    a0e8:	5004913a 	slli	r2,r10,4
    a0ec:	280f883a 	mov	r7,r5
    a0f0:	2089883a 	add	r4,r4,r2
    a0f4:	38800017 	ldw	r2,0(r7)
    a0f8:	18c00404 	addi	r3,r3,16
    a0fc:	39c00404 	addi	r7,r7,16
    a100:	18bffc15 	stw	r2,-16(r3)
    a104:	38bffd17 	ldw	r2,-12(r7)
    a108:	18bffd15 	stw	r2,-12(r3)
    a10c:	38bffe17 	ldw	r2,-8(r7)
    a110:	18bffe15 	stw	r2,-8(r3)
    a114:	38bfff17 	ldw	r2,-4(r7)
    a118:	18bfff15 	stw	r2,-4(r3)
    a11c:	193ff51e 	bne	r3,r4,a0f4 <memmove+0x9c>
    a120:	52800044 	addi	r10,r10,1
    a124:	5014913a 	slli	r10,r10,4
    a128:	31c003cc 	andi	r7,r6,15
    a12c:	008000c4 	movi	r2,3
    a130:	8287883a 	add	r3,r16,r10
    a134:	2a95883a 	add	r10,r5,r10
    a138:	11c0282e 	bgeu	r2,r7,a1dc <memmove+0x184>
    a13c:	3c7fff04 	addi	r17,r7,-4
    a140:	8808d0ba 	srli	r4,r17,2
    a144:	1a400104 	addi	r9,r3,4
    a148:	180d883a 	mov	r6,r3
    a14c:	2105883a 	add	r2,r4,r4
    a150:	1085883a 	add	r2,r2,r2
    a154:	4893883a 	add	r9,r9,r2
    a158:	5005883a 	mov	r2,r10
    a15c:	12000017 	ldw	r8,0(r2)
    a160:	31800104 	addi	r6,r6,4
    a164:	10800104 	addi	r2,r2,4
    a168:	323fff15 	stw	r8,-4(r6)
    a16c:	327ffb1e 	bne	r6,r9,a15c <memmove+0x104>
    a170:	20800044 	addi	r2,r4,1
    a174:	1085883a 	add	r2,r2,r2
    a178:	1085883a 	add	r2,r2,r2
    a17c:	017fff04 	movi	r5,-4
    a180:	18a5883a 	add	r18,r3,r2
    a184:	50a7883a 	add	r19,r10,r2
    a188:	00020000 	call	2000 <__mulsi3>
    a18c:	144f883a 	add	r7,r2,r17
    a190:	980b883a 	mov	r5,r19
    a194:	9007883a 	mov	r3,r18
    a198:	383fc226 	beq	r7,zero,a0a4 <memmove+0x4c>
    a19c:	19cf883a 	add	r7,r3,r7
    a1a0:	29800003 	ldbu	r6,0(r5)
    a1a4:	18c00044 	addi	r3,r3,1
    a1a8:	29400044 	addi	r5,r5,1
    a1ac:	19bfffc5 	stb	r6,-1(r3)
    a1b0:	19fffb1e 	bne	r3,r7,a1a0 <memmove+0x148>
    a1b4:	8005883a 	mov	r2,r16
    a1b8:	dfc00417 	ldw	ra,16(sp)
    a1bc:	dcc00317 	ldw	r19,12(sp)
    a1c0:	dc800217 	ldw	r18,8(sp)
    a1c4:	dc400117 	ldw	r17,4(sp)
    a1c8:	dc000017 	ldw	r16,0(sp)
    a1cc:	dec00504 	addi	sp,sp,20
    a1d0:	f800283a 	ret
    a1d4:	8007883a 	mov	r3,r16
    a1d8:	003fef06 	br	a198 <memmove+0x140>
    a1dc:	500b883a 	mov	r5,r10
    a1e0:	003fed06 	br	a198 <memmove+0x140>

0000a1e4 <_Balloc>:
    a1e4:	20801317 	ldw	r2,76(r4)
    a1e8:	defffc04 	addi	sp,sp,-16
    a1ec:	dc400115 	stw	r17,4(sp)
    a1f0:	dc000015 	stw	r16,0(sp)
    a1f4:	dfc00315 	stw	ra,12(sp)
    a1f8:	dc800215 	stw	r18,8(sp)
    a1fc:	2023883a 	mov	r17,r4
    a200:	2821883a 	mov	r16,r5
    a204:	10000f26 	beq	r2,zero,a244 <_Balloc+0x60>
    a208:	8407883a 	add	r3,r16,r16
    a20c:	18c7883a 	add	r3,r3,r3
    a210:	10c7883a 	add	r3,r2,r3
    a214:	18800017 	ldw	r2,0(r3)
    a218:	10001126 	beq	r2,zero,a260 <_Balloc+0x7c>
    a21c:	11000017 	ldw	r4,0(r2)
    a220:	19000015 	stw	r4,0(r3)
    a224:	10000415 	stw	zero,16(r2)
    a228:	10000315 	stw	zero,12(r2)
    a22c:	dfc00317 	ldw	ra,12(sp)
    a230:	dc800217 	ldw	r18,8(sp)
    a234:	dc400117 	ldw	r17,4(sp)
    a238:	dc000017 	ldw	r16,0(sp)
    a23c:	dec00404 	addi	sp,sp,16
    a240:	f800283a 	ret
    a244:	01400104 	movi	r5,4
    a248:	01800404 	movi	r6,16
    a24c:	000e0880 	call	e088 <_calloc_r>
    a250:	88801315 	stw	r2,76(r17)
    a254:	103fec1e 	bne	r2,zero,a208 <_Balloc+0x24>
    a258:	0005883a 	mov	r2,zero
    a25c:	003ff306 	br	a22c <_Balloc+0x48>
    a260:	01400044 	movi	r5,1
    a264:	2c24983a 	sll	r18,r5,r16
    a268:	8809883a 	mov	r4,r17
    a26c:	91800144 	addi	r6,r18,5
    a270:	318d883a 	add	r6,r6,r6
    a274:	318d883a 	add	r6,r6,r6
    a278:	000e0880 	call	e088 <_calloc_r>
    a27c:	103ff626 	beq	r2,zero,a258 <_Balloc+0x74>
    a280:	14000115 	stw	r16,4(r2)
    a284:	14800215 	stw	r18,8(r2)
    a288:	003fe606 	br	a224 <_Balloc+0x40>

0000a28c <_Bfree>:
    a28c:	28000826 	beq	r5,zero,a2b0 <_Bfree+0x24>
    a290:	28c00117 	ldw	r3,4(r5)
    a294:	20801317 	ldw	r2,76(r4)
    a298:	18c7883a 	add	r3,r3,r3
    a29c:	18c7883a 	add	r3,r3,r3
    a2a0:	10c5883a 	add	r2,r2,r3
    a2a4:	10c00017 	ldw	r3,0(r2)
    a2a8:	28c00015 	stw	r3,0(r5)
    a2ac:	11400015 	stw	r5,0(r2)
    a2b0:	f800283a 	ret

0000a2b4 <__multadd>:
    a2b4:	defff604 	addi	sp,sp,-40
    a2b8:	dd400515 	stw	r21,20(sp)
    a2bc:	2d400417 	ldw	r21,16(r5)
    a2c0:	df000815 	stw	fp,32(sp)
    a2c4:	ddc00715 	stw	r23,28(sp)
    a2c8:	dd800615 	stw	r22,24(sp)
    a2cc:	dd000415 	stw	r20,16(sp)
    a2d0:	dc400115 	stw	r17,4(sp)
    a2d4:	dc000015 	stw	r16,0(sp)
    a2d8:	dfc00915 	stw	ra,36(sp)
    a2dc:	dcc00315 	stw	r19,12(sp)
    a2e0:	dc800215 	stw	r18,8(sp)
    a2e4:	282d883a 	mov	r22,r5
    a2e8:	202f883a 	mov	r23,r4
    a2ec:	3029883a 	mov	r20,r6
    a2f0:	3839883a 	mov	fp,r7
    a2f4:	2c000504 	addi	r16,r5,20
    a2f8:	0023883a 	mov	r17,zero
    a2fc:	84c00017 	ldw	r19,0(r16)
    a300:	a00b883a 	mov	r5,r20
    a304:	8c400044 	addi	r17,r17,1
    a308:	993fffcc 	andi	r4,r19,65535
    a30c:	00020000 	call	2000 <__mulsi3>
    a310:	1725883a 	add	r18,r2,fp
    a314:	9808d43a 	srli	r4,r19,16
    a318:	9026d43a 	srli	r19,r18,16
    a31c:	a00b883a 	mov	r5,r20
    a320:	00020000 	call	2000 <__mulsi3>
    a324:	988f883a 	add	r7,r19,r2
    a328:	3804943a 	slli	r2,r7,16
    a32c:	94bfffcc 	andi	r18,r18,65535
    a330:	3838d43a 	srli	fp,r7,16
    a334:	14a5883a 	add	r18,r2,r18
    a338:	84800015 	stw	r18,0(r16)
    a33c:	84000104 	addi	r16,r16,4
    a340:	8d7fee16 	blt	r17,r21,a2fc <__multadd+0x48>
    a344:	e0000926 	beq	fp,zero,a36c <__multadd+0xb8>
    a348:	b0800217 	ldw	r2,8(r22)
    a34c:	a880140e 	bge	r21,r2,a3a0 <__multadd+0xec>
    a350:	a8800144 	addi	r2,r21,5
    a354:	1085883a 	add	r2,r2,r2
    a358:	1085883a 	add	r2,r2,r2
    a35c:	b085883a 	add	r2,r22,r2
    a360:	ad400044 	addi	r21,r21,1
    a364:	17000015 	stw	fp,0(r2)
    a368:	b5400415 	stw	r21,16(r22)
    a36c:	b005883a 	mov	r2,r22
    a370:	dfc00917 	ldw	ra,36(sp)
    a374:	df000817 	ldw	fp,32(sp)
    a378:	ddc00717 	ldw	r23,28(sp)
    a37c:	dd800617 	ldw	r22,24(sp)
    a380:	dd400517 	ldw	r21,20(sp)
    a384:	dd000417 	ldw	r20,16(sp)
    a388:	dcc00317 	ldw	r19,12(sp)
    a38c:	dc800217 	ldw	r18,8(sp)
    a390:	dc400117 	ldw	r17,4(sp)
    a394:	dc000017 	ldw	r16,0(sp)
    a398:	dec00a04 	addi	sp,sp,40
    a39c:	f800283a 	ret
    a3a0:	b1400117 	ldw	r5,4(r22)
    a3a4:	b809883a 	mov	r4,r23
    a3a8:	29400044 	addi	r5,r5,1
    a3ac:	000a1e40 	call	a1e4 <_Balloc>
    a3b0:	b1800417 	ldw	r6,16(r22)
    a3b4:	b1400304 	addi	r5,r22,12
    a3b8:	11000304 	addi	r4,r2,12
    a3bc:	31800084 	addi	r6,r6,2
    a3c0:	318d883a 	add	r6,r6,r6
    a3c4:	318d883a 	add	r6,r6,r6
    a3c8:	1021883a 	mov	r16,r2
    a3cc:	0003e600 	call	3e60 <memcpy>
    a3d0:	b0c00117 	ldw	r3,4(r22)
    a3d4:	b8801317 	ldw	r2,76(r23)
    a3d8:	18c7883a 	add	r3,r3,r3
    a3dc:	18c7883a 	add	r3,r3,r3
    a3e0:	10c5883a 	add	r2,r2,r3
    a3e4:	10c00017 	ldw	r3,0(r2)
    a3e8:	b0c00015 	stw	r3,0(r22)
    a3ec:	15800015 	stw	r22,0(r2)
    a3f0:	802d883a 	mov	r22,r16
    a3f4:	003fd606 	br	a350 <__multadd+0x9c>

0000a3f8 <__s2b>:
    a3f8:	defff904 	addi	sp,sp,-28
    a3fc:	dd000415 	stw	r20,16(sp)
    a400:	dc400115 	stw	r17,4(sp)
    a404:	2829883a 	mov	r20,r5
    a408:	2023883a 	mov	r17,r4
    a40c:	01400244 	movi	r5,9
    a410:	39000204 	addi	r4,r7,8
    a414:	dcc00315 	stw	r19,12(sp)
    a418:	dc800215 	stw	r18,8(sp)
    a41c:	dfc00615 	stw	ra,24(sp)
    a420:	dd400515 	stw	r21,20(sp)
    a424:	dc000015 	stw	r16,0(sp)
    a428:	3825883a 	mov	r18,r7
    a42c:	3027883a 	mov	r19,r6
    a430:	0010a780 	call	10a78 <__divsi3>
    a434:	00c00044 	movi	r3,1
    a438:	000b883a 	mov	r5,zero
    a43c:	1880030e 	bge	r3,r2,a44c <__s2b+0x54>
    a440:	18c7883a 	add	r3,r3,r3
    a444:	29400044 	addi	r5,r5,1
    a448:	18bffd16 	blt	r3,r2,a440 <__s2b+0x48>
    a44c:	8809883a 	mov	r4,r17
    a450:	000a1e40 	call	a1e4 <_Balloc>
    a454:	d8c00717 	ldw	r3,28(sp)
    a458:	10c00515 	stw	r3,20(r2)
    a45c:	00c00044 	movi	r3,1
    a460:	10c00415 	stw	r3,16(r2)
    a464:	00c00244 	movi	r3,9
    a468:	1cc0210e 	bge	r3,r19,a4f0 <__s2b+0xf8>
    a46c:	a0eb883a 	add	r21,r20,r3
    a470:	a821883a 	mov	r16,r21
    a474:	a4e9883a 	add	r20,r20,r19
    a478:	81c00007 	ldb	r7,0(r16)
    a47c:	8809883a 	mov	r4,r17
    a480:	84000044 	addi	r16,r16,1
    a484:	100b883a 	mov	r5,r2
    a488:	01800284 	movi	r6,10
    a48c:	39fff404 	addi	r7,r7,-48
    a490:	000a2b40 	call	a2b4 <__multadd>
    a494:	853ff81e 	bne	r16,r20,a478 <__s2b+0x80>
    a498:	ace1883a 	add	r16,r21,r19
    a49c:	843ffe04 	addi	r16,r16,-8
    a4a0:	9c800a0e 	bge	r19,r18,a4cc <__s2b+0xd4>
    a4a4:	94e5c83a 	sub	r18,r18,r19
    a4a8:	84a5883a 	add	r18,r16,r18
    a4ac:	81c00007 	ldb	r7,0(r16)
    a4b0:	8809883a 	mov	r4,r17
    a4b4:	84000044 	addi	r16,r16,1
    a4b8:	100b883a 	mov	r5,r2
    a4bc:	01800284 	movi	r6,10
    a4c0:	39fff404 	addi	r7,r7,-48
    a4c4:	000a2b40 	call	a2b4 <__multadd>
    a4c8:	84bff81e 	bne	r16,r18,a4ac <__s2b+0xb4>
    a4cc:	dfc00617 	ldw	ra,24(sp)
    a4d0:	dd400517 	ldw	r21,20(sp)
    a4d4:	dd000417 	ldw	r20,16(sp)
    a4d8:	dcc00317 	ldw	r19,12(sp)
    a4dc:	dc800217 	ldw	r18,8(sp)
    a4e0:	dc400117 	ldw	r17,4(sp)
    a4e4:	dc000017 	ldw	r16,0(sp)
    a4e8:	dec00704 	addi	sp,sp,28
    a4ec:	f800283a 	ret
    a4f0:	a4000284 	addi	r16,r20,10
    a4f4:	1827883a 	mov	r19,r3
    a4f8:	003fe906 	br	a4a0 <__s2b+0xa8>

0000a4fc <__hi0bits>:
    a4fc:	20bfffec 	andhi	r2,r4,65535
    a500:	1000141e 	bne	r2,zero,a554 <__hi0bits+0x58>
    a504:	2008943a 	slli	r4,r4,16
    a508:	00800404 	movi	r2,16
    a50c:	20ffc02c 	andhi	r3,r4,65280
    a510:	1800021e 	bne	r3,zero,a51c <__hi0bits+0x20>
    a514:	2008923a 	slli	r4,r4,8
    a518:	10800204 	addi	r2,r2,8
    a51c:	20fc002c 	andhi	r3,r4,61440
    a520:	1800021e 	bne	r3,zero,a52c <__hi0bits+0x30>
    a524:	2008913a 	slli	r4,r4,4
    a528:	10800104 	addi	r2,r2,4
    a52c:	20f0002c 	andhi	r3,r4,49152
    a530:	1800031e 	bne	r3,zero,a540 <__hi0bits+0x44>
    a534:	2109883a 	add	r4,r4,r4
    a538:	10800084 	addi	r2,r2,2
    a53c:	2109883a 	add	r4,r4,r4
    a540:	20000316 	blt	r4,zero,a550 <__hi0bits+0x54>
    a544:	2110002c 	andhi	r4,r4,16384
    a548:	2000041e 	bne	r4,zero,a55c <__hi0bits+0x60>
    a54c:	00800804 	movi	r2,32
    a550:	f800283a 	ret
    a554:	0005883a 	mov	r2,zero
    a558:	003fec06 	br	a50c <__hi0bits+0x10>
    a55c:	10800044 	addi	r2,r2,1
    a560:	f800283a 	ret

0000a564 <__lo0bits>:
    a564:	20c00017 	ldw	r3,0(r4)
    a568:	188001cc 	andi	r2,r3,7
    a56c:	10000826 	beq	r2,zero,a590 <__lo0bits+0x2c>
    a570:	1880004c 	andi	r2,r3,1
    a574:	1000211e 	bne	r2,zero,a5fc <__lo0bits+0x98>
    a578:	1880008c 	andi	r2,r3,2
    a57c:	1000211e 	bne	r2,zero,a604 <__lo0bits+0xa0>
    a580:	1806d0ba 	srli	r3,r3,2
    a584:	00800084 	movi	r2,2
    a588:	20c00015 	stw	r3,0(r4)
    a58c:	f800283a 	ret
    a590:	18bfffcc 	andi	r2,r3,65535
    a594:	10001326 	beq	r2,zero,a5e4 <__lo0bits+0x80>
    a598:	0005883a 	mov	r2,zero
    a59c:	19403fcc 	andi	r5,r3,255
    a5a0:	2800021e 	bne	r5,zero,a5ac <__lo0bits+0x48>
    a5a4:	1806d23a 	srli	r3,r3,8
    a5a8:	10800204 	addi	r2,r2,8
    a5ac:	194003cc 	andi	r5,r3,15
    a5b0:	2800021e 	bne	r5,zero,a5bc <__lo0bits+0x58>
    a5b4:	1806d13a 	srli	r3,r3,4
    a5b8:	10800104 	addi	r2,r2,4
    a5bc:	194000cc 	andi	r5,r3,3
    a5c0:	2800021e 	bne	r5,zero,a5cc <__lo0bits+0x68>
    a5c4:	1806d0ba 	srli	r3,r3,2
    a5c8:	10800084 	addi	r2,r2,2
    a5cc:	1940004c 	andi	r5,r3,1
    a5d0:	2800081e 	bne	r5,zero,a5f4 <__lo0bits+0x90>
    a5d4:	1806d07a 	srli	r3,r3,1
    a5d8:	1800051e 	bne	r3,zero,a5f0 <__lo0bits+0x8c>
    a5dc:	00800804 	movi	r2,32
    a5e0:	f800283a 	ret
    a5e4:	1806d43a 	srli	r3,r3,16
    a5e8:	00800404 	movi	r2,16
    a5ec:	003feb06 	br	a59c <__lo0bits+0x38>
    a5f0:	10800044 	addi	r2,r2,1
    a5f4:	20c00015 	stw	r3,0(r4)
    a5f8:	f800283a 	ret
    a5fc:	0005883a 	mov	r2,zero
    a600:	f800283a 	ret
    a604:	1806d07a 	srli	r3,r3,1
    a608:	00800044 	movi	r2,1
    a60c:	20c00015 	stw	r3,0(r4)
    a610:	f800283a 	ret

0000a614 <__i2b>:
    a614:	defffd04 	addi	sp,sp,-12
    a618:	dc000015 	stw	r16,0(sp)
    a61c:	04000044 	movi	r16,1
    a620:	dc400115 	stw	r17,4(sp)
    a624:	2823883a 	mov	r17,r5
    a628:	800b883a 	mov	r5,r16
    a62c:	dfc00215 	stw	ra,8(sp)
    a630:	000a1e40 	call	a1e4 <_Balloc>
    a634:	14400515 	stw	r17,20(r2)
    a638:	14000415 	stw	r16,16(r2)
    a63c:	dfc00217 	ldw	ra,8(sp)
    a640:	dc400117 	ldw	r17,4(sp)
    a644:	dc000017 	ldw	r16,0(sp)
    a648:	dec00304 	addi	sp,sp,12
    a64c:	f800283a 	ret

0000a650 <__multiply>:
    a650:	defff004 	addi	sp,sp,-64
    a654:	dc800815 	stw	r18,32(sp)
    a658:	dc400715 	stw	r17,28(sp)
    a65c:	34800417 	ldw	r18,16(r6)
    a660:	2c400417 	ldw	r17,16(r5)
    a664:	ddc00d15 	stw	r23,52(sp)
    a668:	dc000615 	stw	r16,24(sp)
    a66c:	dfc00f15 	stw	ra,60(sp)
    a670:	df000e15 	stw	fp,56(sp)
    a674:	dd800c15 	stw	r22,48(sp)
    a678:	dd400b15 	stw	r21,44(sp)
    a67c:	dd000a15 	stw	r20,40(sp)
    a680:	dcc00915 	stw	r19,36(sp)
    a684:	2821883a 	mov	r16,r5
    a688:	302f883a 	mov	r23,r6
    a68c:	8c80050e 	bge	r17,r18,a6a4 <__multiply+0x54>
    a690:	8807883a 	mov	r3,r17
    a694:	3021883a 	mov	r16,r6
    a698:	9023883a 	mov	r17,r18
    a69c:	282f883a 	mov	r23,r5
    a6a0:	1825883a 	mov	r18,r3
    a6a4:	80800217 	ldw	r2,8(r16)
    a6a8:	8c87883a 	add	r3,r17,r18
    a6ac:	d8c00115 	stw	r3,4(sp)
    a6b0:	81400117 	ldw	r5,4(r16)
    a6b4:	10c0010e 	bge	r2,r3,a6bc <__multiply+0x6c>
    a6b8:	29400044 	addi	r5,r5,1
    a6bc:	000a1e40 	call	a1e4 <_Balloc>
    a6c0:	d8c00117 	ldw	r3,4(sp)
    a6c4:	d8800515 	stw	r2,20(sp)
    a6c8:	14c00504 	addi	r19,r2,20
    a6cc:	1d400144 	addi	r21,r3,5
    a6d0:	ad6b883a 	add	r21,r21,r21
    a6d4:	ad6b883a 	add	r21,r21,r21
    a6d8:	156b883a 	add	r21,r2,r21
    a6dc:	dd400215 	stw	r21,8(sp)
    a6e0:	9805883a 	mov	r2,r19
    a6e4:	9d40042e 	bgeu	r19,r21,a6f8 <__multiply+0xa8>
    a6e8:	d8c00217 	ldw	r3,8(sp)
    a6ec:	10000015 	stw	zero,0(r2)
    a6f0:	10800104 	addi	r2,r2,4
    a6f4:	10fffc36 	bltu	r2,r3,a6e8 <__multiply+0x98>
    a6f8:	94800144 	addi	r18,r18,5
    a6fc:	94a5883a 	add	r18,r18,r18
    a700:	94ad883a 	add	r22,r18,r18
    a704:	8c400144 	addi	r17,r17,5
    a708:	8c63883a 	add	r17,r17,r17
    a70c:	bdad883a 	add	r22,r23,r22
    a710:	80c00504 	addi	r3,r16,20
    a714:	8c63883a 	add	r17,r17,r17
    a718:	bc800504 	addi	r18,r23,20
    a71c:	dd800315 	stw	r22,12(sp)
    a720:	d8c00415 	stw	r3,16(sp)
    a724:	dcc00015 	stw	r19,0(sp)
    a728:	8463883a 	add	r17,r16,r17
    a72c:	9580412e 	bgeu	r18,r22,a834 <__multiply+0x1e4>
    a730:	90800017 	ldw	r2,0(r18)
    a734:	173fffcc 	andi	fp,r2,65535
    a738:	e0001a26 	beq	fp,zero,a7a4 <__multiply+0x154>
    a73c:	dd000017 	ldw	r20,0(sp)
    a740:	dd800417 	ldw	r22,16(sp)
    a744:	002b883a 	mov	r21,zero
    a748:	b4c00017 	ldw	r19,0(r22)
    a74c:	a4000017 	ldw	r16,0(r20)
    a750:	e00b883a 	mov	r5,fp
    a754:	993fffcc 	andi	r4,r19,65535
    a758:	00020000 	call	2000 <__mulsi3>
    a75c:	9808d43a 	srli	r4,r19,16
    a760:	817fffcc 	andi	r5,r16,65535
    a764:	1145883a 	add	r2,r2,r5
    a768:	e00b883a 	mov	r5,fp
    a76c:	1567883a 	add	r19,r2,r21
    a770:	8020d43a 	srli	r16,r16,16
    a774:	00020000 	call	2000 <__mulsi3>
    a778:	9808d43a 	srli	r4,r19,16
    a77c:	1405883a 	add	r2,r2,r16
    a780:	a4c0000d 	sth	r19,0(r20)
    a784:	110f883a 	add	r7,r2,r4
    a788:	a1c0008d 	sth	r7,2(r20)
    a78c:	b5800104 	addi	r22,r22,4
    a790:	382ad43a 	srli	r21,r7,16
    a794:	a5000104 	addi	r20,r20,4
    a798:	b47feb36 	bltu	r22,r17,a748 <__multiply+0xf8>
    a79c:	a5400015 	stw	r21,0(r20)
    a7a0:	90800017 	ldw	r2,0(r18)
    a7a4:	1038d43a 	srli	fp,r2,16
    a7a8:	e0001c26 	beq	fp,zero,a81c <__multiply+0x1cc>
    a7ac:	d8c00017 	ldw	r3,0(sp)
    a7b0:	dd000417 	ldw	r20,16(sp)
    a7b4:	002b883a 	mov	r21,zero
    a7b8:	1d800017 	ldw	r22,0(r3)
    a7bc:	182f883a 	mov	r23,r3
    a7c0:	b021883a 	mov	r16,r22
    a7c4:	a4c00017 	ldw	r19,0(r20)
    a7c8:	8020d43a 	srli	r16,r16,16
    a7cc:	e00b883a 	mov	r5,fp
    a7d0:	993fffcc 	andi	r4,r19,65535
    a7d4:	00020000 	call	2000 <__mulsi3>
    a7d8:	1405883a 	add	r2,r2,r16
    a7dc:	9808d43a 	srli	r4,r19,16
    a7e0:	156b883a 	add	r21,r2,r21
    a7e4:	bdc00104 	addi	r23,r23,4
    a7e8:	bdbfff0d 	sth	r22,-4(r23)
    a7ec:	bd7fff8d 	sth	r21,-2(r23)
    a7f0:	bc000017 	ldw	r16,0(r23)
    a7f4:	e00b883a 	mov	r5,fp
    a7f8:	00020000 	call	2000 <__mulsi3>
    a7fc:	a80ed43a 	srli	r7,r21,16
    a800:	813fffcc 	andi	r4,r16,65535
    a804:	2085883a 	add	r2,r4,r2
    a808:	11ed883a 	add	r22,r2,r7
    a80c:	a5000104 	addi	r20,r20,4
    a810:	b02ad43a 	srli	r21,r22,16
    a814:	a47feb36 	bltu	r20,r17,a7c4 <__multiply+0x174>
    a818:	bd800015 	stw	r22,0(r23)
    a81c:	d8c00017 	ldw	r3,0(sp)
    a820:	94800104 	addi	r18,r18,4
    a824:	18c00104 	addi	r3,r3,4
    a828:	d8c00015 	stw	r3,0(sp)
    a82c:	d8c00317 	ldw	r3,12(sp)
    a830:	90ffbf36 	bltu	r18,r3,a730 <__multiply+0xe0>
    a834:	d8c00117 	ldw	r3,4(sp)
    a838:	00c00c0e 	bge	zero,r3,a86c <__multiply+0x21c>
    a83c:	d8c00217 	ldw	r3,8(sp)
    a840:	18bfff17 	ldw	r2,-4(r3)
    a844:	1d7fff04 	addi	r21,r3,-4
    a848:	10000326 	beq	r2,zero,a858 <__multiply+0x208>
    a84c:	00000706 	br	a86c <__multiply+0x21c>
    a850:	a8800017 	ldw	r2,0(r21)
    a854:	1000051e 	bne	r2,zero,a86c <__multiply+0x21c>
    a858:	d8c00117 	ldw	r3,4(sp)
    a85c:	ad7fff04 	addi	r21,r21,-4
    a860:	18ffffc4 	addi	r3,r3,-1
    a864:	d8c00115 	stw	r3,4(sp)
    a868:	183ff91e 	bne	r3,zero,a850 <__multiply+0x200>
    a86c:	d8800517 	ldw	r2,20(sp)
    a870:	d8c00117 	ldw	r3,4(sp)
    a874:	10c00415 	stw	r3,16(r2)
    a878:	dfc00f17 	ldw	ra,60(sp)
    a87c:	df000e17 	ldw	fp,56(sp)
    a880:	ddc00d17 	ldw	r23,52(sp)
    a884:	dd800c17 	ldw	r22,48(sp)
    a888:	dd400b17 	ldw	r21,44(sp)
    a88c:	dd000a17 	ldw	r20,40(sp)
    a890:	dcc00917 	ldw	r19,36(sp)
    a894:	dc800817 	ldw	r18,32(sp)
    a898:	dc400717 	ldw	r17,28(sp)
    a89c:	dc000617 	ldw	r16,24(sp)
    a8a0:	dec01004 	addi	sp,sp,64
    a8a4:	f800283a 	ret

0000a8a8 <__pow5mult>:
    a8a8:	defffb04 	addi	sp,sp,-20
    a8ac:	dcc00315 	stw	r19,12(sp)
    a8b0:	dc800215 	stw	r18,8(sp)
    a8b4:	dc000015 	stw	r16,0(sp)
    a8b8:	dfc00415 	stw	ra,16(sp)
    a8bc:	dc400115 	stw	r17,4(sp)
    a8c0:	308000cc 	andi	r2,r6,3
    a8c4:	3021883a 	mov	r16,r6
    a8c8:	2027883a 	mov	r19,r4
    a8cc:	2825883a 	mov	r18,r5
    a8d0:	10002e1e 	bne	r2,zero,a98c <__pow5mult+0xe4>
    a8d4:	8021d0ba 	srai	r16,r16,2
    a8d8:	80001a26 	beq	r16,zero,a944 <__pow5mult+0x9c>
    a8dc:	9c401217 	ldw	r17,72(r19)
    a8e0:	8800061e 	bne	r17,zero,a8fc <__pow5mult+0x54>
    a8e4:	00003406 	br	a9b8 <__pow5mult+0x110>
    a8e8:	8021d07a 	srai	r16,r16,1
    a8ec:	80001526 	beq	r16,zero,a944 <__pow5mult+0x9c>
    a8f0:	88c00017 	ldw	r3,0(r17)
    a8f4:	18001b26 	beq	r3,zero,a964 <__pow5mult+0xbc>
    a8f8:	1823883a 	mov	r17,r3
    a8fc:	80c0004c 	andi	r3,r16,1
    a900:	183ff926 	beq	r3,zero,a8e8 <__pow5mult+0x40>
    a904:	900b883a 	mov	r5,r18
    a908:	880d883a 	mov	r6,r17
    a90c:	9809883a 	mov	r4,r19
    a910:	000a6500 	call	a650 <__multiply>
    a914:	90001b26 	beq	r18,zero,a984 <__pow5mult+0xdc>
    a918:	91000117 	ldw	r4,4(r18)
    a91c:	98c01317 	ldw	r3,76(r19)
    a920:	8021d07a 	srai	r16,r16,1
    a924:	2109883a 	add	r4,r4,r4
    a928:	2109883a 	add	r4,r4,r4
    a92c:	1907883a 	add	r3,r3,r4
    a930:	19000017 	ldw	r4,0(r3)
    a934:	91000015 	stw	r4,0(r18)
    a938:	1c800015 	stw	r18,0(r3)
    a93c:	1025883a 	mov	r18,r2
    a940:	803feb1e 	bne	r16,zero,a8f0 <__pow5mult+0x48>
    a944:	9005883a 	mov	r2,r18
    a948:	dfc00417 	ldw	ra,16(sp)
    a94c:	dcc00317 	ldw	r19,12(sp)
    a950:	dc800217 	ldw	r18,8(sp)
    a954:	dc400117 	ldw	r17,4(sp)
    a958:	dc000017 	ldw	r16,0(sp)
    a95c:	dec00504 	addi	sp,sp,20
    a960:	f800283a 	ret
    a964:	880b883a 	mov	r5,r17
    a968:	880d883a 	mov	r6,r17
    a96c:	9809883a 	mov	r4,r19
    a970:	000a6500 	call	a650 <__multiply>
    a974:	88800015 	stw	r2,0(r17)
    a978:	10000015 	stw	zero,0(r2)
    a97c:	1023883a 	mov	r17,r2
    a980:	003fde06 	br	a8fc <__pow5mult+0x54>
    a984:	1025883a 	mov	r18,r2
    a988:	003fd706 	br	a8e8 <__pow5mult+0x40>
    a98c:	10bfffc4 	addi	r2,r2,-1
    a990:	1085883a 	add	r2,r2,r2
    a994:	00c00074 	movhi	r3,1
    a998:	18d3b004 	addi	r3,r3,20160
    a99c:	1085883a 	add	r2,r2,r2
    a9a0:	1885883a 	add	r2,r3,r2
    a9a4:	11800017 	ldw	r6,0(r2)
    a9a8:	000f883a 	mov	r7,zero
    a9ac:	000a2b40 	call	a2b4 <__multadd>
    a9b0:	1025883a 	mov	r18,r2
    a9b4:	003fc706 	br	a8d4 <__pow5mult+0x2c>
    a9b8:	9809883a 	mov	r4,r19
    a9bc:	01409c44 	movi	r5,625
    a9c0:	000a6140 	call	a614 <__i2b>
    a9c4:	98801215 	stw	r2,72(r19)
    a9c8:	1023883a 	mov	r17,r2
    a9cc:	10000015 	stw	zero,0(r2)
    a9d0:	003fca06 	br	a8fc <__pow5mult+0x54>

0000a9d4 <__lshift>:
    a9d4:	defff904 	addi	sp,sp,-28
    a9d8:	dd400515 	stw	r21,20(sp)
    a9dc:	dc400115 	stw	r17,4(sp)
    a9e0:	2d400417 	ldw	r21,16(r5)
    a9e4:	3023d17a 	srai	r17,r6,5
    a9e8:	28800217 	ldw	r2,8(r5)
    a9ec:	dd000415 	stw	r20,16(sp)
    a9f0:	8d6b883a 	add	r21,r17,r21
    a9f4:	dcc00315 	stw	r19,12(sp)
    a9f8:	dc800215 	stw	r18,8(sp)
    a9fc:	dc000015 	stw	r16,0(sp)
    aa00:	dfc00615 	stw	ra,24(sp)
    aa04:	ac000044 	addi	r16,r21,1
    aa08:	2825883a 	mov	r18,r5
    aa0c:	3029883a 	mov	r20,r6
    aa10:	2027883a 	mov	r19,r4
    aa14:	29400117 	ldw	r5,4(r5)
    aa18:	1400030e 	bge	r2,r16,aa28 <__lshift+0x54>
    aa1c:	1085883a 	add	r2,r2,r2
    aa20:	29400044 	addi	r5,r5,1
    aa24:	143ffd16 	blt	r2,r16,aa1c <__lshift+0x48>
    aa28:	9809883a 	mov	r4,r19
    aa2c:	000a1e40 	call	a1e4 <_Balloc>
    aa30:	10c00504 	addi	r3,r2,20
    aa34:	0440090e 	bge	zero,r17,aa5c <__lshift+0x88>
    aa38:	000f883a 	mov	r7,zero
    aa3c:	18000015 	stw	zero,0(r3)
    aa40:	39c00044 	addi	r7,r7,1
    aa44:	18c00104 	addi	r3,r3,4
    aa48:	3c7ffc1e 	bne	r7,r17,aa3c <__lshift+0x68>
    aa4c:	38c00144 	addi	r3,r7,5
    aa50:	18c7883a 	add	r3,r3,r3
    aa54:	18c7883a 	add	r3,r3,r3
    aa58:	10c7883a 	add	r3,r2,r3
    aa5c:	92000417 	ldw	r8,16(r18)
    aa60:	a18007cc 	andi	r6,r20,31
    aa64:	91c00504 	addi	r7,r18,20
    aa68:	42000144 	addi	r8,r8,5
    aa6c:	4211883a 	add	r8,r8,r8
    aa70:	4211883a 	add	r8,r8,r8
    aa74:	9211883a 	add	r8,r18,r8
    aa78:	30002226 	beq	r6,zero,ab04 <__lshift+0x130>
    aa7c:	02800804 	movi	r10,32
    aa80:	5195c83a 	sub	r10,r10,r6
    aa84:	000b883a 	mov	r5,zero
    aa88:	3a400017 	ldw	r9,0(r7)
    aa8c:	18c00104 	addi	r3,r3,4
    aa90:	39c00104 	addi	r7,r7,4
    aa94:	4992983a 	sll	r9,r9,r6
    aa98:	2a4ab03a 	or	r5,r5,r9
    aa9c:	197fff15 	stw	r5,-4(r3)
    aaa0:	397fff17 	ldw	r5,-4(r7)
    aaa4:	2a8ad83a 	srl	r5,r5,r10
    aaa8:	3a3ff736 	bltu	r7,r8,aa88 <__lshift+0xb4>
    aaac:	19400015 	stw	r5,0(r3)
    aab0:	28000126 	beq	r5,zero,aab8 <__lshift+0xe4>
    aab4:	ac000084 	addi	r16,r21,2
    aab8:	91000117 	ldw	r4,4(r18)
    aabc:	98c01317 	ldw	r3,76(r19)
    aac0:	843fffc4 	addi	r16,r16,-1
    aac4:	2109883a 	add	r4,r4,r4
    aac8:	2109883a 	add	r4,r4,r4
    aacc:	1907883a 	add	r3,r3,r4
    aad0:	19000017 	ldw	r4,0(r3)
    aad4:	14000415 	stw	r16,16(r2)
    aad8:	91000015 	stw	r4,0(r18)
    aadc:	1c800015 	stw	r18,0(r3)
    aae0:	dfc00617 	ldw	ra,24(sp)
    aae4:	dd400517 	ldw	r21,20(sp)
    aae8:	dd000417 	ldw	r20,16(sp)
    aaec:	dcc00317 	ldw	r19,12(sp)
    aaf0:	dc800217 	ldw	r18,8(sp)
    aaf4:	dc400117 	ldw	r17,4(sp)
    aaf8:	dc000017 	ldw	r16,0(sp)
    aafc:	dec00704 	addi	sp,sp,28
    ab00:	f800283a 	ret
    ab04:	39400017 	ldw	r5,0(r7)
    ab08:	18c00104 	addi	r3,r3,4
    ab0c:	39c00104 	addi	r7,r7,4
    ab10:	197fff15 	stw	r5,-4(r3)
    ab14:	3a3fe82e 	bgeu	r7,r8,aab8 <__lshift+0xe4>
    ab18:	39400017 	ldw	r5,0(r7)
    ab1c:	18c00104 	addi	r3,r3,4
    ab20:	39c00104 	addi	r7,r7,4
    ab24:	197fff15 	stw	r5,-4(r3)
    ab28:	3a3ff636 	bltu	r7,r8,ab04 <__lshift+0x130>
    ab2c:	003fe206 	br	aab8 <__lshift+0xe4>

0000ab30 <__mcmp>:
    ab30:	20800417 	ldw	r2,16(r4)
    ab34:	28c00417 	ldw	r3,16(r5)
    ab38:	10c5c83a 	sub	r2,r2,r3
    ab3c:	10000f1e 	bne	r2,zero,ab7c <__mcmp+0x4c>
    ab40:	18c00144 	addi	r3,r3,5
    ab44:	18c7883a 	add	r3,r3,r3
    ab48:	18c7883a 	add	r3,r3,r3
    ab4c:	21c00504 	addi	r7,r4,20
    ab50:	28cb883a 	add	r5,r5,r3
    ab54:	20c9883a 	add	r4,r4,r3
    ab58:	213fff04 	addi	r4,r4,-4
    ab5c:	297fff04 	addi	r5,r5,-4
    ab60:	21800017 	ldw	r6,0(r4)
    ab64:	28c00017 	ldw	r3,0(r5)
    ab68:	30c0021e 	bne	r6,r3,ab74 <__mcmp+0x44>
    ab6c:	393ffa36 	bltu	r7,r4,ab58 <__mcmp+0x28>
    ab70:	f800283a 	ret
    ab74:	30c00236 	bltu	r6,r3,ab80 <__mcmp+0x50>
    ab78:	00800044 	movi	r2,1
    ab7c:	f800283a 	ret
    ab80:	00bfffc4 	movi	r2,-1
    ab84:	f800283a 	ret

0000ab88 <__mdiff>:
    ab88:	defffb04 	addi	sp,sp,-20
    ab8c:	dc000015 	stw	r16,0(sp)
    ab90:	2821883a 	mov	r16,r5
    ab94:	dc800215 	stw	r18,8(sp)
    ab98:	300b883a 	mov	r5,r6
    ab9c:	2025883a 	mov	r18,r4
    aba0:	8009883a 	mov	r4,r16
    aba4:	dc400115 	stw	r17,4(sp)
    aba8:	dfc00415 	stw	ra,16(sp)
    abac:	dcc00315 	stw	r19,12(sp)
    abb0:	3023883a 	mov	r17,r6
    abb4:	000ab300 	call	ab30 <__mcmp>
    abb8:	10005026 	beq	r2,zero,acfc <__mdiff+0x174>
    abbc:	10004a16 	blt	r2,zero,ace8 <__mdiff+0x160>
    abc0:	0027883a 	mov	r19,zero
    abc4:	81400117 	ldw	r5,4(r16)
    abc8:	9009883a 	mov	r4,r18
    abcc:	000a1e40 	call	a1e4 <_Balloc>
    abd0:	82400417 	ldw	r9,16(r16)
    abd4:	89800417 	ldw	r6,16(r17)
    abd8:	14c00315 	stw	r19,12(r2)
    abdc:	4b800144 	addi	r14,r9,5
    abe0:	31800144 	addi	r6,r6,5
    abe4:	739d883a 	add	r14,r14,r14
    abe8:	318d883a 	add	r6,r6,r6
    abec:	739d883a 	add	r14,r14,r14
    abf0:	318d883a 	add	r6,r6,r6
    abf4:	81c00504 	addi	r7,r16,20
    abf8:	839d883a 	add	r14,r16,r14
    abfc:	8a000504 	addi	r8,r17,20
    ac00:	898d883a 	add	r6,r17,r6
    ac04:	10c00504 	addi	r3,r2,20
    ac08:	0009883a 	mov	r4,zero
    ac0c:	3b000017 	ldw	r12,0(r7)
    ac10:	42c00017 	ldw	r11,0(r8)
    ac14:	42000104 	addi	r8,r8,4
    ac18:	62bfffcc 	andi	r10,r12,65535
    ac1c:	5b7fffcc 	andi	r13,r11,65535
    ac20:	5109883a 	add	r4,r10,r4
    ac24:	2355c83a 	sub	r10,r4,r13
    ac28:	5816d43a 	srli	r11,r11,16
    ac2c:	6008d43a 	srli	r4,r12,16
    ac30:	501bd43a 	srai	r13,r10,16
    ac34:	1a80000d 	sth	r10,0(r3)
    ac38:	22c9c83a 	sub	r4,r4,r11
    ac3c:	2349883a 	add	r4,r4,r13
    ac40:	1900008d 	sth	r4,2(r3)
    ac44:	39c00104 	addi	r7,r7,4
    ac48:	2009d43a 	srai	r4,r4,16
    ac4c:	18c00104 	addi	r3,r3,4
    ac50:	41bfee36 	bltu	r8,r6,ac0c <__mdiff+0x84>
    ac54:	180b883a 	mov	r5,r3
    ac58:	3815883a 	mov	r10,r7
    ac5c:	3b80132e 	bgeu	r7,r14,acac <__mdiff+0x124>
    ac60:	3a000017 	ldw	r8,0(r7)
    ac64:	18c00104 	addi	r3,r3,4
    ac68:	39c00104 	addi	r7,r7,4
    ac6c:	41bfffcc 	andi	r6,r8,65535
    ac70:	310d883a 	add	r6,r6,r4
    ac74:	3009d43a 	srai	r4,r6,16
    ac78:	4010d43a 	srli	r8,r8,16
    ac7c:	19bfff0d 	sth	r6,-4(r3)
    ac80:	2209883a 	add	r4,r4,r8
    ac84:	193fff8d 	sth	r4,-2(r3)
    ac88:	2009d43a 	srai	r4,r4,16
    ac8c:	3bbff436 	bltu	r7,r14,ac60 <__mdiff+0xd8>
    ac90:	0286303a 	nor	r3,zero,r10
    ac94:	1b87883a 	add	r3,r3,r14
    ac98:	1806d0ba 	srli	r3,r3,2
    ac9c:	18c00044 	addi	r3,r3,1
    aca0:	18c7883a 	add	r3,r3,r3
    aca4:	18c7883a 	add	r3,r3,r3
    aca8:	28c7883a 	add	r3,r5,r3
    acac:	193fff17 	ldw	r4,-4(r3)
    acb0:	18ffff04 	addi	r3,r3,-4
    acb4:	2000041e 	bne	r4,zero,acc8 <__mdiff+0x140>
    acb8:	18ffff04 	addi	r3,r3,-4
    acbc:	19000017 	ldw	r4,0(r3)
    acc0:	4a7fffc4 	addi	r9,r9,-1
    acc4:	203ffc26 	beq	r4,zero,acb8 <__mdiff+0x130>
    acc8:	12400415 	stw	r9,16(r2)
    accc:	dfc00417 	ldw	ra,16(sp)
    acd0:	dcc00317 	ldw	r19,12(sp)
    acd4:	dc800217 	ldw	r18,8(sp)
    acd8:	dc400117 	ldw	r17,4(sp)
    acdc:	dc000017 	ldw	r16,0(sp)
    ace0:	dec00504 	addi	sp,sp,20
    ace4:	f800283a 	ret
    ace8:	8005883a 	mov	r2,r16
    acec:	04c00044 	movi	r19,1
    acf0:	8821883a 	mov	r16,r17
    acf4:	1023883a 	mov	r17,r2
    acf8:	003fb206 	br	abc4 <__mdiff+0x3c>
    acfc:	9009883a 	mov	r4,r18
    ad00:	000b883a 	mov	r5,zero
    ad04:	000a1e40 	call	a1e4 <_Balloc>
    ad08:	00c00044 	movi	r3,1
    ad0c:	10c00415 	stw	r3,16(r2)
    ad10:	10000515 	stw	zero,20(r2)
    ad14:	dfc00417 	ldw	ra,16(sp)
    ad18:	dcc00317 	ldw	r19,12(sp)
    ad1c:	dc800217 	ldw	r18,8(sp)
    ad20:	dc400117 	ldw	r17,4(sp)
    ad24:	dc000017 	ldw	r16,0(sp)
    ad28:	dec00504 	addi	sp,sp,20
    ad2c:	f800283a 	ret

0000ad30 <__ulp>:
    ad30:	295ffc2c 	andhi	r5,r5,32752
    ad34:	00bf3034 	movhi	r2,64704
    ad38:	2887883a 	add	r3,r5,r2
    ad3c:	00c0020e 	bge	zero,r3,ad48 <__ulp+0x18>
    ad40:	0005883a 	mov	r2,zero
    ad44:	f800283a 	ret
    ad48:	00c7c83a 	sub	r3,zero,r3
    ad4c:	1805d53a 	srai	r2,r3,20
    ad50:	00c004c4 	movi	r3,19
    ad54:	18800a0e 	bge	r3,r2,ad80 <__ulp+0x50>
    ad58:	01000c84 	movi	r4,50
    ad5c:	0007883a 	mov	r3,zero
    ad60:	20800516 	blt	r4,r2,ad78 <__ulp+0x48>
    ad64:	01000cc4 	movi	r4,51
    ad68:	2085c83a 	sub	r2,r4,r2
    ad6c:	01000044 	movi	r4,1
    ad70:	2084983a 	sll	r2,r4,r2
    ad74:	f800283a 	ret
    ad78:	00800044 	movi	r2,1
    ad7c:	f800283a 	ret
    ad80:	00c00234 	movhi	r3,8
    ad84:	1887d83a 	sra	r3,r3,r2
    ad88:	0005883a 	mov	r2,zero
    ad8c:	f800283a 	ret

0000ad90 <__b2d>:
    ad90:	defffa04 	addi	sp,sp,-24
    ad94:	dc000015 	stw	r16,0(sp)
    ad98:	24000417 	ldw	r16,16(r4)
    ad9c:	dc400115 	stw	r17,4(sp)
    ada0:	dcc00315 	stw	r19,12(sp)
    ada4:	84000144 	addi	r16,r16,5
    ada8:	8421883a 	add	r16,r16,r16
    adac:	8421883a 	add	r16,r16,r16
    adb0:	2421883a 	add	r16,r4,r16
    adb4:	847fff17 	ldw	r17,-4(r16)
    adb8:	24c00504 	addi	r19,r4,20
    adbc:	dd000415 	stw	r20,16(sp)
    adc0:	8809883a 	mov	r4,r17
    adc4:	dc800215 	stw	r18,8(sp)
    adc8:	2829883a 	mov	r20,r5
    adcc:	dfc00515 	stw	ra,20(sp)
    add0:	000a4fc0 	call	a4fc <__hi0bits>
    add4:	00c00804 	movi	r3,32
    add8:	1887c83a 	sub	r3,r3,r2
    addc:	a0c00015 	stw	r3,0(r20)
    ade0:	00c00284 	movi	r3,10
    ade4:	84bfff04 	addi	r18,r16,-4
    ade8:	18801216 	blt	r3,r2,ae34 <__b2d+0xa4>
    adec:	010002c4 	movi	r4,11
    adf0:	2089c83a 	sub	r4,r4,r2
    adf4:	8906d83a 	srl	r3,r17,r4
    adf8:	18cffc34 	orhi	r3,r3,16368
    adfc:	9c80322e 	bgeu	r19,r18,aec8 <__b2d+0x138>
    ae00:	817ffe17 	ldw	r5,-8(r16)
    ae04:	2908d83a 	srl	r4,r5,r4
    ae08:	10800544 	addi	r2,r2,21
    ae0c:	88a2983a 	sll	r17,r17,r2
    ae10:	2444b03a 	or	r2,r4,r17
    ae14:	dfc00517 	ldw	ra,20(sp)
    ae18:	dd000417 	ldw	r20,16(sp)
    ae1c:	dcc00317 	ldw	r19,12(sp)
    ae20:	dc800217 	ldw	r18,8(sp)
    ae24:	dc400117 	ldw	r17,4(sp)
    ae28:	dc000017 	ldw	r16,0(sp)
    ae2c:	dec00604 	addi	sp,sp,24
    ae30:	f800283a 	ret
    ae34:	9c801636 	bltu	r19,r18,ae90 <__b2d+0x100>
    ae38:	113ffd44 	addi	r4,r2,-11
    ae3c:	000b883a 	mov	r5,zero
    ae40:	20001726 	beq	r4,zero,aea0 <__b2d+0x110>
    ae44:	00c00ac4 	movi	r3,43
    ae48:	1885c83a 	sub	r2,r3,r2
    ae4c:	8906983a 	sll	r3,r17,r4
    ae50:	288cd83a 	srl	r6,r5,r2
    ae54:	18cffc34 	orhi	r3,r3,16368
    ae58:	1986b03a 	or	r3,r3,r6
    ae5c:	9c801c2e 	bgeu	r19,r18,aed0 <__b2d+0x140>
    ae60:	91bfff17 	ldw	r6,-4(r18)
    ae64:	3084d83a 	srl	r2,r6,r2
    ae68:	2908983a 	sll	r4,r5,r4
    ae6c:	1104b03a 	or	r2,r2,r4
    ae70:	dfc00517 	ldw	ra,20(sp)
    ae74:	dd000417 	ldw	r20,16(sp)
    ae78:	dcc00317 	ldw	r19,12(sp)
    ae7c:	dc800217 	ldw	r18,8(sp)
    ae80:	dc400117 	ldw	r17,4(sp)
    ae84:	dc000017 	ldw	r16,0(sp)
    ae88:	dec00604 	addi	sp,sp,24
    ae8c:	f800283a 	ret
    ae90:	113ffd44 	addi	r4,r2,-11
    ae94:	84bffe04 	addi	r18,r16,-8
    ae98:	817ffe17 	ldw	r5,-8(r16)
    ae9c:	203fe91e 	bne	r4,zero,ae44 <__b2d+0xb4>
    aea0:	88cffc34 	orhi	r3,r17,16368
    aea4:	2805883a 	mov	r2,r5
    aea8:	dfc00517 	ldw	ra,20(sp)
    aeac:	dd000417 	ldw	r20,16(sp)
    aeb0:	dcc00317 	ldw	r19,12(sp)
    aeb4:	dc800217 	ldw	r18,8(sp)
    aeb8:	dc400117 	ldw	r17,4(sp)
    aebc:	dc000017 	ldw	r16,0(sp)
    aec0:	dec00604 	addi	sp,sp,24
    aec4:	f800283a 	ret
    aec8:	0009883a 	mov	r4,zero
    aecc:	003fce06 	br	ae08 <__b2d+0x78>
    aed0:	0005883a 	mov	r2,zero
    aed4:	003fe406 	br	ae68 <__b2d+0xd8>

0000aed8 <__d2b>:
    aed8:	defff804 	addi	sp,sp,-32
    aedc:	dc400315 	stw	r17,12(sp)
    aee0:	3023883a 	mov	r17,r6
    aee4:	dc800415 	stw	r18,16(sp)
    aee8:	8824907a 	slli	r18,r17,1
    aeec:	dcc00515 	stw	r19,20(sp)
    aef0:	2827883a 	mov	r19,r5
    aef4:	9024d57a 	srli	r18,r18,21
    aef8:	01400044 	movi	r5,1
    aefc:	dd000615 	stw	r20,24(sp)
    af00:	dc000215 	stw	r16,8(sp)
    af04:	dfc00715 	stw	ra,28(sp)
    af08:	3829883a 	mov	r20,r7
    af0c:	000a1e40 	call	a1e4 <_Balloc>
    af10:	1021883a 	mov	r16,r2
    af14:	00800434 	movhi	r2,16
    af18:	10bfffc4 	addi	r2,r2,-1
    af1c:	88a2703a 	and	r17,r17,r2
    af20:	90000126 	beq	r18,zero,af28 <__d2b+0x50>
    af24:	8c400434 	orhi	r17,r17,16
    af28:	dc400015 	stw	r17,0(sp)
    af2c:	98002226 	beq	r19,zero,afb8 <__d2b+0xe0>
    af30:	d9000104 	addi	r4,sp,4
    af34:	dcc00115 	stw	r19,4(sp)
    af38:	000a5640 	call	a564 <__lo0bits>
    af3c:	d8c00017 	ldw	r3,0(sp)
    af40:	10002d1e 	bne	r2,zero,aff8 <__d2b+0x120>
    af44:	d9000117 	ldw	r4,4(sp)
    af48:	81000515 	stw	r4,20(r16)
    af4c:	1823003a 	cmpeq	r17,r3,zero
    af50:	01000084 	movi	r4,2
    af54:	2463c83a 	sub	r17,r4,r17
    af58:	80c00615 	stw	r3,24(r16)
    af5c:	84400415 	stw	r17,16(r16)
    af60:	90001d1e 	bne	r18,zero,afd8 <__d2b+0x100>
    af64:	88c00104 	addi	r3,r17,4
    af68:	18c7883a 	add	r3,r3,r3
    af6c:	18c7883a 	add	r3,r3,r3
    af70:	80c7883a 	add	r3,r16,r3
    af74:	19000017 	ldw	r4,0(r3)
    af78:	10bef384 	addi	r2,r2,-1074
    af7c:	a0800015 	stw	r2,0(r20)
    af80:	000a4fc0 	call	a4fc <__hi0bits>
    af84:	8822917a 	slli	r17,r17,5
    af88:	d8c00817 	ldw	r3,32(sp)
    af8c:	8885c83a 	sub	r2,r17,r2
    af90:	18800015 	stw	r2,0(r3)
    af94:	8005883a 	mov	r2,r16
    af98:	dfc00717 	ldw	ra,28(sp)
    af9c:	dd000617 	ldw	r20,24(sp)
    afa0:	dcc00517 	ldw	r19,20(sp)
    afa4:	dc800417 	ldw	r18,16(sp)
    afa8:	dc400317 	ldw	r17,12(sp)
    afac:	dc000217 	ldw	r16,8(sp)
    afb0:	dec00804 	addi	sp,sp,32
    afb4:	f800283a 	ret
    afb8:	d809883a 	mov	r4,sp
    afbc:	000a5640 	call	a564 <__lo0bits>
    afc0:	d8c00017 	ldw	r3,0(sp)
    afc4:	04400044 	movi	r17,1
    afc8:	84400415 	stw	r17,16(r16)
    afcc:	80c00515 	stw	r3,20(r16)
    afd0:	10800804 	addi	r2,r2,32
    afd4:	903fe326 	beq	r18,zero,af64 <__d2b+0x8c>
    afd8:	00c00d44 	movi	r3,53
    afdc:	94bef344 	addi	r18,r18,-1075
    afe0:	90a5883a 	add	r18,r18,r2
    afe4:	1885c83a 	sub	r2,r3,r2
    afe8:	d8c00817 	ldw	r3,32(sp)
    afec:	a4800015 	stw	r18,0(r20)
    aff0:	18800015 	stw	r2,0(r3)
    aff4:	003fe706 	br	af94 <__d2b+0xbc>
    aff8:	01000804 	movi	r4,32
    affc:	2089c83a 	sub	r4,r4,r2
    b000:	1908983a 	sll	r4,r3,r4
    b004:	d9400117 	ldw	r5,4(sp)
    b008:	1886d83a 	srl	r3,r3,r2
    b00c:	2148b03a 	or	r4,r4,r5
    b010:	81000515 	stw	r4,20(r16)
    b014:	d8c00015 	stw	r3,0(sp)
    b018:	003fcc06 	br	af4c <__d2b+0x74>

0000b01c <__ratio>:
    b01c:	defff904 	addi	sp,sp,-28
    b020:	dc400315 	stw	r17,12(sp)
    b024:	2823883a 	mov	r17,r5
    b028:	d9400104 	addi	r5,sp,4
    b02c:	dfc00615 	stw	ra,24(sp)
    b030:	dcc00515 	stw	r19,20(sp)
    b034:	dc800415 	stw	r18,16(sp)
    b038:	2027883a 	mov	r19,r4
    b03c:	dc000215 	stw	r16,8(sp)
    b040:	000ad900 	call	ad90 <__b2d>
    b044:	8809883a 	mov	r4,r17
    b048:	d80b883a 	mov	r5,sp
    b04c:	1025883a 	mov	r18,r2
    b050:	1821883a 	mov	r16,r3
    b054:	000ad900 	call	ad90 <__b2d>
    b058:	99400417 	ldw	r5,16(r19)
    b05c:	89000417 	ldw	r4,16(r17)
    b060:	d9800117 	ldw	r6,4(sp)
    b064:	2909c83a 	sub	r4,r5,r4
    b068:	d9400017 	ldw	r5,0(sp)
    b06c:	2008917a 	slli	r4,r4,5
    b070:	314bc83a 	sub	r5,r6,r5
    b074:	290b883a 	add	r5,r5,r4
    b078:	01400e0e 	bge	zero,r5,b0b4 <__ratio+0x98>
    b07c:	280a953a 	slli	r5,r5,20
    b080:	2c21883a 	add	r16,r5,r16
    b084:	9009883a 	mov	r4,r18
    b088:	800b883a 	mov	r5,r16
    b08c:	100d883a 	mov	r6,r2
    b090:	180f883a 	mov	r7,r3
    b094:	00102f40 	call	102f4 <__divdf3>
    b098:	dfc00617 	ldw	ra,24(sp)
    b09c:	dcc00517 	ldw	r19,20(sp)
    b0a0:	dc800417 	ldw	r18,16(sp)
    b0a4:	dc400317 	ldw	r17,12(sp)
    b0a8:	dc000217 	ldw	r16,8(sp)
    b0ac:	dec00704 	addi	sp,sp,28
    b0b0:	f800283a 	ret
    b0b4:	280a953a 	slli	r5,r5,20
    b0b8:	1947c83a 	sub	r3,r3,r5
    b0bc:	003ff106 	br	b084 <__ratio+0x68>

0000b0c0 <_mprec_log10>:
    b0c0:	defffe04 	addi	sp,sp,-8
    b0c4:	dc000015 	stw	r16,0(sp)
    b0c8:	dfc00115 	stw	ra,4(sp)
    b0cc:	008005c4 	movi	r2,23
    b0d0:	2021883a 	mov	r16,r4
    b0d4:	11000d0e 	bge	r2,r4,b10c <_mprec_log10+0x4c>
    b0d8:	0005883a 	mov	r2,zero
    b0dc:	00cffc34 	movhi	r3,16368
    b0e0:	843fffc4 	addi	r16,r16,-1
    b0e4:	1009883a 	mov	r4,r2
    b0e8:	180b883a 	mov	r5,r3
    b0ec:	000d883a 	mov	r6,zero
    b0f0:	01d00934 	movhi	r7,16420
    b0f4:	00100100 	call	10010 <__muldf3>
    b0f8:	803ff91e 	bne	r16,zero,b0e0 <_mprec_log10+0x20>
    b0fc:	dfc00117 	ldw	ra,4(sp)
    b100:	dc000017 	ldw	r16,0(sp)
    b104:	dec00204 	addi	sp,sp,8
    b108:	f800283a 	ret
    b10c:	202090fa 	slli	r16,r4,3
    b110:	00800074 	movhi	r2,1
    b114:	10937e04 	addi	r2,r2,19960
    b118:	1421883a 	add	r16,r2,r16
    b11c:	80800017 	ldw	r2,0(r16)
    b120:	80c00117 	ldw	r3,4(r16)
    b124:	dfc00117 	ldw	ra,4(sp)
    b128:	dc000017 	ldw	r16,0(sp)
    b12c:	dec00204 	addi	sp,sp,8
    b130:	f800283a 	ret

0000b134 <__copybits>:
    b134:	297fffc4 	addi	r5,r5,-1
    b138:	31c00417 	ldw	r7,16(r6)
    b13c:	2811d17a 	srai	r8,r5,5
    b140:	30800504 	addi	r2,r6,20
    b144:	39c00144 	addi	r7,r7,5
    b148:	42000044 	addi	r8,r8,1
    b14c:	39cf883a 	add	r7,r7,r7
    b150:	4211883a 	add	r8,r8,r8
    b154:	39cf883a 	add	r7,r7,r7
    b158:	4211883a 	add	r8,r8,r8
    b15c:	31cf883a 	add	r7,r6,r7
    b160:	2211883a 	add	r8,r4,r8
    b164:	11c00d2e 	bgeu	r2,r7,b19c <__copybits+0x68>
    b168:	2007883a 	mov	r3,r4
    b16c:	11400017 	ldw	r5,0(r2)
    b170:	18c00104 	addi	r3,r3,4
    b174:	10800104 	addi	r2,r2,4
    b178:	197fff15 	stw	r5,-4(r3)
    b17c:	11fffb36 	bltu	r2,r7,b16c <__copybits+0x38>
    b180:	3985c83a 	sub	r2,r7,r6
    b184:	10bffac4 	addi	r2,r2,-21
    b188:	1004d0ba 	srli	r2,r2,2
    b18c:	10800044 	addi	r2,r2,1
    b190:	1085883a 	add	r2,r2,r2
    b194:	1085883a 	add	r2,r2,r2
    b198:	2089883a 	add	r4,r4,r2
    b19c:	2200032e 	bgeu	r4,r8,b1ac <__copybits+0x78>
    b1a0:	20000015 	stw	zero,0(r4)
    b1a4:	21000104 	addi	r4,r4,4
    b1a8:	223ffd36 	bltu	r4,r8,b1a0 <__copybits+0x6c>
    b1ac:	f800283a 	ret

0000b1b0 <__any_on>:
    b1b0:	21800417 	ldw	r6,16(r4)
    b1b4:	2805d17a 	srai	r2,r5,5
    b1b8:	20c00504 	addi	r3,r4,20
    b1bc:	30800f0e 	bge	r6,r2,b1fc <__any_on+0x4c>
    b1c0:	3005883a 	mov	r2,r6
    b1c4:	10800144 	addi	r2,r2,5
    b1c8:	1085883a 	add	r2,r2,r2
    b1cc:	1085883a 	add	r2,r2,r2
    b1d0:	2089883a 	add	r4,r4,r2
    b1d4:	1900152e 	bgeu	r3,r4,b22c <__any_on+0x7c>
    b1d8:	20bfff17 	ldw	r2,-4(r4)
    b1dc:	213fff04 	addi	r4,r4,-4
    b1e0:	1000041e 	bne	r2,zero,b1f4 <__any_on+0x44>
    b1e4:	1900112e 	bgeu	r3,r4,b22c <__any_on+0x7c>
    b1e8:	213fff04 	addi	r4,r4,-4
    b1ec:	20800017 	ldw	r2,0(r4)
    b1f0:	103ffc26 	beq	r2,zero,b1e4 <__any_on+0x34>
    b1f4:	00800044 	movi	r2,1
    b1f8:	f800283a 	ret
    b1fc:	11bff10e 	bge	r2,r6,b1c4 <__any_on+0x14>
    b200:	294007cc 	andi	r5,r5,31
    b204:	283fef26 	beq	r5,zero,b1c4 <__any_on+0x14>
    b208:	11800144 	addi	r6,r2,5
    b20c:	318d883a 	add	r6,r6,r6
    b210:	318d883a 	add	r6,r6,r6
    b214:	218d883a 	add	r6,r4,r6
    b218:	31800017 	ldw	r6,0(r6)
    b21c:	314ed83a 	srl	r7,r6,r5
    b220:	394a983a 	sll	r5,r7,r5
    b224:	29bff31e 	bne	r5,r6,b1f4 <__any_on+0x44>
    b228:	003fe606 	br	b1c4 <__any_on+0x14>
    b22c:	0005883a 	mov	r2,zero
    b230:	f800283a 	ret

0000b234 <_read_r>:
    b234:	defffd04 	addi	sp,sp,-12
    b238:	dc400115 	stw	r17,4(sp)
    b23c:	dc000015 	stw	r16,0(sp)
    b240:	2023883a 	mov	r17,r4
    b244:	040000b4 	movhi	r16,2
    b248:	84219804 	addi	r16,r16,-31136
    b24c:	2809883a 	mov	r4,r5
    b250:	300b883a 	mov	r5,r6
    b254:	380d883a 	mov	r6,r7
    b258:	dfc00215 	stw	ra,8(sp)
    b25c:	80000015 	stw	zero,0(r16)
    b260:	0011c280 	call	11c28 <read>
    b264:	00ffffc4 	movi	r3,-1
    b268:	10c00526 	beq	r2,r3,b280 <_read_r+0x4c>
    b26c:	dfc00217 	ldw	ra,8(sp)
    b270:	dc400117 	ldw	r17,4(sp)
    b274:	dc000017 	ldw	r16,0(sp)
    b278:	dec00304 	addi	sp,sp,12
    b27c:	f800283a 	ret
    b280:	80c00017 	ldw	r3,0(r16)
    b284:	183ff926 	beq	r3,zero,b26c <_read_r+0x38>
    b288:	88c00015 	stw	r3,0(r17)
    b28c:	dfc00217 	ldw	ra,8(sp)
    b290:	dc400117 	ldw	r17,4(sp)
    b294:	dc000017 	ldw	r16,0(sp)
    b298:	dec00304 	addi	sp,sp,12
    b29c:	f800283a 	ret

0000b2a0 <_realloc_r>:
    b2a0:	defff504 	addi	sp,sp,-44
    b2a4:	dd400615 	stw	r21,24(sp)
    b2a8:	dc800315 	stw	r18,12(sp)
    b2ac:	dc000115 	stw	r16,4(sp)
    b2b0:	dfc00a15 	stw	ra,40(sp)
    b2b4:	df000915 	stw	fp,36(sp)
    b2b8:	ddc00815 	stw	r23,32(sp)
    b2bc:	dd800715 	stw	r22,28(sp)
    b2c0:	dd000515 	stw	r20,20(sp)
    b2c4:	dcc00415 	stw	r19,16(sp)
    b2c8:	dc400215 	stw	r17,8(sp)
    b2cc:	2821883a 	mov	r16,r5
    b2d0:	202b883a 	mov	r21,r4
    b2d4:	3025883a 	mov	r18,r6
    b2d8:	28009626 	beq	r5,zero,b534 <_realloc_r+0x294>
    b2dc:	00119000 	call	11900 <__malloc_lock>
    b2e0:	80bfff17 	ldw	r2,-4(r16)
    b2e4:	04ffff04 	movi	r19,-4
    b2e8:	90c002c4 	addi	r3,r18,11
    b2ec:	01000584 	movi	r4,22
    b2f0:	85bffe04 	addi	r22,r16,-8
    b2f4:	14e6703a 	and	r19,r2,r19
    b2f8:	20c0372e 	bgeu	r4,r3,b3d8 <_realloc_r+0x138>
    b2fc:	047ffe04 	movi	r17,-8
    b300:	1c62703a 	and	r17,r3,r17
    b304:	8807883a 	mov	r3,r17
    b308:	88005a16 	blt	r17,zero,b474 <_realloc_r+0x1d4>
    b30c:	8c805936 	bltu	r17,r18,b474 <_realloc_r+0x1d4>
    b310:	98c0340e 	bge	r19,r3,b3e4 <_realloc_r+0x144>
    b314:	07000074 	movhi	fp,1
    b318:	e7151904 	addi	fp,fp,21604
    b31c:	e1400217 	ldw	r5,8(fp)
    b320:	b4c9883a 	add	r4,r22,r19
    b324:	29009026 	beq	r5,r4,b568 <_realloc_r+0x2c8>
    b328:	21800117 	ldw	r6,4(r4)
    b32c:	01ffff84 	movi	r7,-2
    b330:	31ce703a 	and	r7,r6,r7
    b334:	21cf883a 	add	r7,r4,r7
    b338:	39c00117 	ldw	r7,4(r7)
    b33c:	39c0004c 	andi	r7,r7,1
    b340:	38004326 	beq	r7,zero,b450 <_realloc_r+0x1b0>
    b344:	000d883a 	mov	r6,zero
    b348:	0009883a 	mov	r4,zero
    b34c:	1080004c 	andi	r2,r2,1
    b350:	10005a1e 	bne	r2,zero,b4bc <_realloc_r+0x21c>
    b354:	85fffe17 	ldw	r23,-8(r16)
    b358:	00bfff04 	movi	r2,-4
    b35c:	b5efc83a 	sub	r23,r22,r23
    b360:	b9c00117 	ldw	r7,4(r23)
    b364:	388e703a 	and	r7,r7,r2
    b368:	3ccf883a 	add	r7,r7,r19
    b36c:	20005226 	beq	r4,zero,b4b8 <_realloc_r+0x218>
    b370:	31e9883a 	add	r20,r6,r7
    b374:	2140c726 	beq	r4,r5,b694 <_realloc_r+0x3f4>
    b378:	a0c04f16 	blt	r20,r3,b4b8 <_realloc_r+0x218>
    b37c:	20800317 	ldw	r2,12(r4)
    b380:	20c00217 	ldw	r3,8(r4)
    b384:	99bfff04 	addi	r6,r19,-4
    b388:	01000904 	movi	r4,36
    b38c:	18800315 	stw	r2,12(r3)
    b390:	10c00215 	stw	r3,8(r2)
    b394:	b8c00217 	ldw	r3,8(r23)
    b398:	b8800317 	ldw	r2,12(r23)
    b39c:	bc800204 	addi	r18,r23,8
    b3a0:	18800315 	stw	r2,12(r3)
    b3a4:	10c00215 	stw	r3,8(r2)
    b3a8:	2180ed36 	bltu	r4,r6,b760 <_realloc_r+0x4c0>
    b3ac:	008004c4 	movi	r2,19
    b3b0:	11809b2e 	bgeu	r2,r6,b620 <_realloc_r+0x380>
    b3b4:	80800017 	ldw	r2,0(r16)
    b3b8:	b8800215 	stw	r2,8(r23)
    b3bc:	80800117 	ldw	r2,4(r16)
    b3c0:	b8800315 	stw	r2,12(r23)
    b3c4:	008006c4 	movi	r2,27
    b3c8:	1180f936 	bltu	r2,r6,b7b0 <_realloc_r+0x510>
    b3cc:	b8800404 	addi	r2,r23,16
    b3d0:	80c00204 	addi	r3,r16,8
    b3d4:	00009406 	br	b628 <_realloc_r+0x388>
    b3d8:	00c00404 	movi	r3,16
    b3dc:	1823883a 	mov	r17,r3
    b3e0:	003fca06 	br	b30c <_realloc_r+0x6c>
    b3e4:	9829883a 	mov	r20,r19
    b3e8:	a447c83a 	sub	r3,r20,r17
    b3ec:	010003c4 	movi	r4,15
    b3f0:	1080004c 	andi	r2,r2,1
    b3f4:	20c02336 	bltu	r4,r3,b484 <_realloc_r+0x1e4>
    b3f8:	1504b03a 	or	r2,r2,r20
    b3fc:	b0800115 	stw	r2,4(r22)
    b400:	b52d883a 	add	r22,r22,r20
    b404:	b0800117 	ldw	r2,4(r22)
    b408:	10800054 	ori	r2,r2,1
    b40c:	b0800115 	stw	r2,4(r22)
    b410:	a809883a 	mov	r4,r21
    b414:	00119200 	call	11920 <__malloc_unlock>
    b418:	8025883a 	mov	r18,r16
    b41c:	9005883a 	mov	r2,r18
    b420:	dfc00a17 	ldw	ra,40(sp)
    b424:	df000917 	ldw	fp,36(sp)
    b428:	ddc00817 	ldw	r23,32(sp)
    b42c:	dd800717 	ldw	r22,28(sp)
    b430:	dd400617 	ldw	r21,24(sp)
    b434:	dd000517 	ldw	r20,20(sp)
    b438:	dcc00417 	ldw	r19,16(sp)
    b43c:	dc800317 	ldw	r18,12(sp)
    b440:	dc400217 	ldw	r17,8(sp)
    b444:	dc000117 	ldw	r16,4(sp)
    b448:	dec00b04 	addi	sp,sp,44
    b44c:	f800283a 	ret
    b450:	01ffff04 	movi	r7,-4
    b454:	31cc703a 	and	r6,r6,r7
    b458:	34e9883a 	add	r20,r6,r19
    b45c:	a0ffbb16 	blt	r20,r3,b34c <_realloc_r+0xac>
    b460:	20c00317 	ldw	r3,12(r4)
    b464:	21000217 	ldw	r4,8(r4)
    b468:	20c00315 	stw	r3,12(r4)
    b46c:	19000215 	stw	r4,8(r3)
    b470:	003fdd06 	br	b3e8 <_realloc_r+0x148>
    b474:	00800304 	movi	r2,12
    b478:	a8800015 	stw	r2,0(r21)
    b47c:	0025883a 	mov	r18,zero
    b480:	003fe606 	br	b41c <_realloc_r+0x17c>
    b484:	1444b03a 	or	r2,r2,r17
    b488:	b0800115 	stw	r2,4(r22)
    b48c:	b44b883a 	add	r5,r22,r17
    b490:	18800054 	ori	r2,r3,1
    b494:	28800115 	stw	r2,4(r5)
    b498:	28c7883a 	add	r3,r5,r3
    b49c:	18800117 	ldw	r2,4(r3)
    b4a0:	a809883a 	mov	r4,r21
    b4a4:	29400204 	addi	r5,r5,8
    b4a8:	10800054 	ori	r2,r2,1
    b4ac:	18800115 	stw	r2,4(r3)
    b4b0:	0002b800 	call	2b80 <_free_r>
    b4b4:	003fd606 	br	b410 <_realloc_r+0x170>
    b4b8:	38c0330e 	bge	r7,r3,b588 <_realloc_r+0x2e8>
    b4bc:	900b883a 	mov	r5,r18
    b4c0:	a809883a 	mov	r4,r21
    b4c4:	00036dc0 	call	36dc <_malloc_r>
    b4c8:	1025883a 	mov	r18,r2
    b4cc:	10001626 	beq	r2,zero,b528 <_realloc_r+0x288>
    b4d0:	80bfff17 	ldw	r2,-4(r16)
    b4d4:	00ffff84 	movi	r3,-2
    b4d8:	913ffe04 	addi	r4,r18,-8
    b4dc:	10c6703a 	and	r3,r2,r3
    b4e0:	b0c7883a 	add	r3,r22,r3
    b4e4:	20c09926 	beq	r4,r3,b74c <_realloc_r+0x4ac>
    b4e8:	99bfff04 	addi	r6,r19,-4
    b4ec:	00800904 	movi	r2,36
    b4f0:	11806436 	bltu	r2,r6,b684 <_realloc_r+0x3e4>
    b4f4:	00c004c4 	movi	r3,19
    b4f8:	19804036 	bltu	r3,r6,b5fc <_realloc_r+0x35c>
    b4fc:	9005883a 	mov	r2,r18
    b500:	8007883a 	mov	r3,r16
    b504:	19000017 	ldw	r4,0(r3)
    b508:	11000015 	stw	r4,0(r2)
    b50c:	19000117 	ldw	r4,4(r3)
    b510:	11000115 	stw	r4,4(r2)
    b514:	18c00217 	ldw	r3,8(r3)
    b518:	10c00215 	stw	r3,8(r2)
    b51c:	a809883a 	mov	r4,r21
    b520:	800b883a 	mov	r5,r16
    b524:	0002b800 	call	2b80 <_free_r>
    b528:	a809883a 	mov	r4,r21
    b52c:	00119200 	call	11920 <__malloc_unlock>
    b530:	003fba06 	br	b41c <_realloc_r+0x17c>
    b534:	300b883a 	mov	r5,r6
    b538:	dfc00a17 	ldw	ra,40(sp)
    b53c:	df000917 	ldw	fp,36(sp)
    b540:	ddc00817 	ldw	r23,32(sp)
    b544:	dd800717 	ldw	r22,28(sp)
    b548:	dd400617 	ldw	r21,24(sp)
    b54c:	dd000517 	ldw	r20,20(sp)
    b550:	dcc00417 	ldw	r19,16(sp)
    b554:	dc800317 	ldw	r18,12(sp)
    b558:	dc400217 	ldw	r17,8(sp)
    b55c:	dc000117 	ldw	r16,4(sp)
    b560:	dec00b04 	addi	sp,sp,44
    b564:	00036dc1 	jmpi	36dc <_malloc_r>
    b568:	29800117 	ldw	r6,4(r5)
    b56c:	013fff04 	movi	r4,-4
    b570:	89c00404 	addi	r7,r17,16
    b574:	310c703a 	and	r6,r6,r4
    b578:	34c9883a 	add	r4,r6,r19
    b57c:	21c0340e 	bge	r4,r7,b650 <_realloc_r+0x3b0>
    b580:	2809883a 	mov	r4,r5
    b584:	003f7106 	br	b34c <_realloc_r+0xac>
    b588:	b8800317 	ldw	r2,12(r23)
    b58c:	b8c00217 	ldw	r3,8(r23)
    b590:	99bfff04 	addi	r6,r19,-4
    b594:	01000904 	movi	r4,36
    b598:	18800315 	stw	r2,12(r3)
    b59c:	10c00215 	stw	r3,8(r2)
    b5a0:	bc800204 	addi	r18,r23,8
    b5a4:	21807836 	bltu	r4,r6,b788 <_realloc_r+0x4e8>
    b5a8:	008004c4 	movi	r2,19
    b5ac:	1180732e 	bgeu	r2,r6,b77c <_realloc_r+0x4dc>
    b5b0:	80800017 	ldw	r2,0(r16)
    b5b4:	b8800215 	stw	r2,8(r23)
    b5b8:	80800117 	ldw	r2,4(r16)
    b5bc:	b8800315 	stw	r2,12(r23)
    b5c0:	008006c4 	movi	r2,27
    b5c4:	11808936 	bltu	r2,r6,b7ec <_realloc_r+0x54c>
    b5c8:	b8800404 	addi	r2,r23,16
    b5cc:	80c00204 	addi	r3,r16,8
    b5d0:	19000017 	ldw	r4,0(r3)
    b5d4:	9021883a 	mov	r16,r18
    b5d8:	3829883a 	mov	r20,r7
    b5dc:	11000015 	stw	r4,0(r2)
    b5e0:	19000117 	ldw	r4,4(r3)
    b5e4:	b82d883a 	mov	r22,r23
    b5e8:	11000115 	stw	r4,4(r2)
    b5ec:	18c00217 	ldw	r3,8(r3)
    b5f0:	10c00215 	stw	r3,8(r2)
    b5f4:	b8800117 	ldw	r2,4(r23)
    b5f8:	003f7b06 	br	b3e8 <_realloc_r+0x148>
    b5fc:	80c00017 	ldw	r3,0(r16)
    b600:	90c00015 	stw	r3,0(r18)
    b604:	80c00117 	ldw	r3,4(r16)
    b608:	90c00115 	stw	r3,4(r18)
    b60c:	00c006c4 	movi	r3,27
    b610:	19804636 	bltu	r3,r6,b72c <_realloc_r+0x48c>
    b614:	90800204 	addi	r2,r18,8
    b618:	80c00204 	addi	r3,r16,8
    b61c:	003fb906 	br	b504 <_realloc_r+0x264>
    b620:	9005883a 	mov	r2,r18
    b624:	8007883a 	mov	r3,r16
    b628:	19000017 	ldw	r4,0(r3)
    b62c:	9021883a 	mov	r16,r18
    b630:	b82d883a 	mov	r22,r23
    b634:	11000015 	stw	r4,0(r2)
    b638:	19000117 	ldw	r4,4(r3)
    b63c:	11000115 	stw	r4,4(r2)
    b640:	18c00217 	ldw	r3,8(r3)
    b644:	10c00215 	stw	r3,8(r2)
    b648:	b8800117 	ldw	r2,4(r23)
    b64c:	003f6606 	br	b3e8 <_realloc_r+0x148>
    b650:	2445c83a 	sub	r2,r4,r17
    b654:	b46d883a 	add	r22,r22,r17
    b658:	10800054 	ori	r2,r2,1
    b65c:	b0800115 	stw	r2,4(r22)
    b660:	80bfff17 	ldw	r2,-4(r16)
    b664:	a809883a 	mov	r4,r21
    b668:	e5800215 	stw	r22,8(fp)
    b66c:	1080004c 	andi	r2,r2,1
    b670:	88a2b03a 	or	r17,r17,r2
    b674:	847fff15 	stw	r17,-4(r16)
    b678:	00119200 	call	11920 <__malloc_unlock>
    b67c:	8025883a 	mov	r18,r16
    b680:	003f6606 	br	b41c <_realloc_r+0x17c>
    b684:	9009883a 	mov	r4,r18
    b688:	800b883a 	mov	r5,r16
    b68c:	000a0580 	call	a058 <memmove>
    b690:	003fa206 	br	b51c <_realloc_r+0x27c>
    b694:	88800404 	addi	r2,r17,16
    b698:	a0bf8716 	blt	r20,r2,b4b8 <_realloc_r+0x218>
    b69c:	b8800317 	ldw	r2,12(r23)
    b6a0:	b8c00217 	ldw	r3,8(r23)
    b6a4:	99bfff04 	addi	r6,r19,-4
    b6a8:	01000904 	movi	r4,36
    b6ac:	18800315 	stw	r2,12(r3)
    b6b0:	10c00215 	stw	r3,8(r2)
    b6b4:	bc800204 	addi	r18,r23,8
    b6b8:	21806536 	bltu	r4,r6,b850 <_realloc_r+0x5b0>
    b6bc:	008004c4 	movi	r2,19
    b6c0:	1180592e 	bgeu	r2,r6,b828 <_realloc_r+0x588>
    b6c4:	80800017 	ldw	r2,0(r16)
    b6c8:	b8800215 	stw	r2,8(r23)
    b6cc:	80800117 	ldw	r2,4(r16)
    b6d0:	b8800315 	stw	r2,12(r23)
    b6d4:	008006c4 	movi	r2,27
    b6d8:	11806136 	bltu	r2,r6,b860 <_realloc_r+0x5c0>
    b6dc:	b8800404 	addi	r2,r23,16
    b6e0:	80c00204 	addi	r3,r16,8
    b6e4:	19000017 	ldw	r4,0(r3)
    b6e8:	11000015 	stw	r4,0(r2)
    b6ec:	19000117 	ldw	r4,4(r3)
    b6f0:	11000115 	stw	r4,4(r2)
    b6f4:	18c00217 	ldw	r3,8(r3)
    b6f8:	10c00215 	stw	r3,8(r2)
    b6fc:	a447c83a 	sub	r3,r20,r17
    b700:	bc45883a 	add	r2,r23,r17
    b704:	18c00054 	ori	r3,r3,1
    b708:	10c00115 	stw	r3,4(r2)
    b70c:	b8c00117 	ldw	r3,4(r23)
    b710:	e0800215 	stw	r2,8(fp)
    b714:	a809883a 	mov	r4,r21
    b718:	1880004c 	andi	r2,r3,1
    b71c:	88a2b03a 	or	r17,r17,r2
    b720:	bc400115 	stw	r17,4(r23)
    b724:	00119200 	call	11920 <__malloc_unlock>
    b728:	003f3c06 	br	b41c <_realloc_r+0x17c>
    b72c:	80c00217 	ldw	r3,8(r16)
    b730:	90c00215 	stw	r3,8(r18)
    b734:	80c00317 	ldw	r3,12(r16)
    b738:	90c00315 	stw	r3,12(r18)
    b73c:	30802426 	beq	r6,r2,b7d0 <_realloc_r+0x530>
    b740:	90800404 	addi	r2,r18,16
    b744:	80c00404 	addi	r3,r16,16
    b748:	003f6e06 	br	b504 <_realloc_r+0x264>
    b74c:	953fff17 	ldw	r20,-4(r18)
    b750:	00ffff04 	movi	r3,-4
    b754:	a0e8703a 	and	r20,r20,r3
    b758:	a4e9883a 	add	r20,r20,r19
    b75c:	003f2206 	br	b3e8 <_realloc_r+0x148>
    b760:	800b883a 	mov	r5,r16
    b764:	9009883a 	mov	r4,r18
    b768:	000a0580 	call	a058 <memmove>
    b76c:	9021883a 	mov	r16,r18
    b770:	b8800117 	ldw	r2,4(r23)
    b774:	b82d883a 	mov	r22,r23
    b778:	003f1b06 	br	b3e8 <_realloc_r+0x148>
    b77c:	9005883a 	mov	r2,r18
    b780:	8007883a 	mov	r3,r16
    b784:	003f9206 	br	b5d0 <_realloc_r+0x330>
    b788:	800b883a 	mov	r5,r16
    b78c:	9009883a 	mov	r4,r18
    b790:	d9c00015 	stw	r7,0(sp)
    b794:	000a0580 	call	a058 <memmove>
    b798:	d9c00017 	ldw	r7,0(sp)
    b79c:	9021883a 	mov	r16,r18
    b7a0:	b8800117 	ldw	r2,4(r23)
    b7a4:	3829883a 	mov	r20,r7
    b7a8:	b82d883a 	mov	r22,r23
    b7ac:	003f0e06 	br	b3e8 <_realloc_r+0x148>
    b7b0:	80800217 	ldw	r2,8(r16)
    b7b4:	b8800415 	stw	r2,16(r23)
    b7b8:	80800317 	ldw	r2,12(r16)
    b7bc:	b8800515 	stw	r2,20(r23)
    b7c0:	31001226 	beq	r6,r4,b80c <_realloc_r+0x56c>
    b7c4:	b8800604 	addi	r2,r23,24
    b7c8:	80c00404 	addi	r3,r16,16
    b7cc:	003f9606 	br	b628 <_realloc_r+0x388>
    b7d0:	81000417 	ldw	r4,16(r16)
    b7d4:	90800604 	addi	r2,r18,24
    b7d8:	80c00604 	addi	r3,r16,24
    b7dc:	91000415 	stw	r4,16(r18)
    b7e0:	81000517 	ldw	r4,20(r16)
    b7e4:	91000515 	stw	r4,20(r18)
    b7e8:	003f4606 	br	b504 <_realloc_r+0x264>
    b7ec:	80800217 	ldw	r2,8(r16)
    b7f0:	b8800415 	stw	r2,16(r23)
    b7f4:	80800317 	ldw	r2,12(r16)
    b7f8:	b8800515 	stw	r2,20(r23)
    b7fc:	31000d26 	beq	r6,r4,b834 <_realloc_r+0x594>
    b800:	b8800604 	addi	r2,r23,24
    b804:	80c00404 	addi	r3,r16,16
    b808:	003f7106 	br	b5d0 <_realloc_r+0x330>
    b80c:	81000417 	ldw	r4,16(r16)
    b810:	b8800804 	addi	r2,r23,32
    b814:	80c00604 	addi	r3,r16,24
    b818:	b9000615 	stw	r4,24(r23)
    b81c:	81000517 	ldw	r4,20(r16)
    b820:	b9000715 	stw	r4,28(r23)
    b824:	003f8006 	br	b628 <_realloc_r+0x388>
    b828:	9005883a 	mov	r2,r18
    b82c:	8007883a 	mov	r3,r16
    b830:	003fac06 	br	b6e4 <_realloc_r+0x444>
    b834:	81000417 	ldw	r4,16(r16)
    b838:	b8800804 	addi	r2,r23,32
    b83c:	80c00604 	addi	r3,r16,24
    b840:	b9000615 	stw	r4,24(r23)
    b844:	81000517 	ldw	r4,20(r16)
    b848:	b9000715 	stw	r4,28(r23)
    b84c:	003f6006 	br	b5d0 <_realloc_r+0x330>
    b850:	9009883a 	mov	r4,r18
    b854:	800b883a 	mov	r5,r16
    b858:	000a0580 	call	a058 <memmove>
    b85c:	003fa706 	br	b6fc <_realloc_r+0x45c>
    b860:	80800217 	ldw	r2,8(r16)
    b864:	b8800415 	stw	r2,16(r23)
    b868:	80800317 	ldw	r2,12(r16)
    b86c:	b8800515 	stw	r2,20(r23)
    b870:	31000326 	beq	r6,r4,b880 <_realloc_r+0x5e0>
    b874:	b8800604 	addi	r2,r23,24
    b878:	80c00404 	addi	r3,r16,16
    b87c:	003f9906 	br	b6e4 <_realloc_r+0x444>
    b880:	81000417 	ldw	r4,16(r16)
    b884:	b8800804 	addi	r2,r23,32
    b888:	80c00604 	addi	r3,r16,24
    b88c:	b9000615 	stw	r4,24(r23)
    b890:	81000517 	ldw	r4,20(r16)
    b894:	b9000715 	stw	r4,28(r23)
    b898:	003f9206 	br	b6e4 <_realloc_r+0x444>

0000b89c <__isinfd>:
    b89c:	0105c83a 	sub	r2,zero,r4
    b8a0:	1108b03a 	or	r4,r2,r4
    b8a4:	2004d7fa 	srli	r2,r4,31
    b8a8:	00e00034 	movhi	r3,32768
    b8ac:	18ffffc4 	addi	r3,r3,-1
    b8b0:	28ca703a 	and	r5,r5,r3
    b8b4:	1144b03a 	or	r2,r2,r5
    b8b8:	00dffc34 	movhi	r3,32752
    b8bc:	1885c83a 	sub	r2,r3,r2
    b8c0:	0087c83a 	sub	r3,zero,r2
    b8c4:	1884b03a 	or	r2,r3,r2
    b8c8:	1005d7fa 	srai	r2,r2,31
    b8cc:	10800044 	addi	r2,r2,1
    b8d0:	f800283a 	ret

0000b8d4 <__isnand>:
    b8d4:	0105c83a 	sub	r2,zero,r4
    b8d8:	1108b03a 	or	r4,r2,r4
    b8dc:	2004d7fa 	srli	r2,r4,31
    b8e0:	00e00034 	movhi	r3,32768
    b8e4:	18ffffc4 	addi	r3,r3,-1
    b8e8:	28ca703a 	and	r5,r5,r3
    b8ec:	1144b03a 	or	r2,r2,r5
    b8f0:	00dffc34 	movhi	r3,32752
    b8f4:	1885c83a 	sub	r2,r3,r2
    b8f8:	1004d7fa 	srli	r2,r2,31
    b8fc:	f800283a 	ret

0000b900 <__sccl>:
    b900:	2a400003 	ldbu	r9,0(r5)
    b904:	00801784 	movi	r2,94
    b908:	48802626 	beq	r9,r2,b9a4 <__sccl+0xa4>
    b90c:	28800044 	addi	r2,r5,1
    b910:	0011883a 	mov	r8,zero
    b914:	000b883a 	mov	r5,zero
    b918:	0007883a 	mov	r3,zero
    b91c:	01c04004 	movi	r7,256
    b920:	20cd883a 	add	r6,r4,r3
    b924:	32000005 	stb	r8,0(r6)
    b928:	18c00044 	addi	r3,r3,1
    b92c:	19fffc1e 	bne	r3,r7,b920 <__sccl+0x20>
    b930:	48000f26 	beq	r9,zero,b970 <__sccl+0x70>
    b934:	01800044 	movi	r6,1
    b938:	314dc83a 	sub	r6,r6,r5
    b93c:	02001744 	movi	r8,93
    b940:	01400b44 	movi	r5,45
    b944:	2247883a 	add	r3,r4,r9
    b948:	19800005 	stb	r6,0(r3)
    b94c:	10c00003 	ldbu	r3,0(r2)
    b950:	11c00044 	addi	r7,r2,1
    b954:	19400a26 	beq	r3,r5,b980 <__sccl+0x80>
    b958:	1a000726 	beq	r3,r8,b978 <__sccl+0x78>
    b95c:	1800011e 	bne	r3,zero,b964 <__sccl+0x64>
    b960:	f800283a 	ret
    b964:	1813883a 	mov	r9,r3
    b968:	3805883a 	mov	r2,r7
    b96c:	003ff506 	br	b944 <__sccl+0x44>
    b970:	10bfffc4 	addi	r2,r2,-1
    b974:	f800283a 	ret
    b978:	3805883a 	mov	r2,r7
    b97c:	f800283a 	ret
    b980:	10c00043 	ldbu	r3,1(r2)
    b984:	1a000c26 	beq	r3,r8,b9b8 <__sccl+0xb8>
    b988:	1a400b16 	blt	r3,r9,b9b8 <__sccl+0xb8>
    b98c:	10800084 	addi	r2,r2,2
    b990:	4a400044 	addi	r9,r9,1
    b994:	224f883a 	add	r7,r4,r9
    b998:	39800005 	stb	r6,0(r7)
    b99c:	48fffc16 	blt	r9,r3,b990 <__sccl+0x90>
    b9a0:	003fea06 	br	b94c <__sccl+0x4c>
    b9a4:	2a400043 	ldbu	r9,1(r5)
    b9a8:	28800084 	addi	r2,r5,2
    b9ac:	02000044 	movi	r8,1
    b9b0:	01400044 	movi	r5,1
    b9b4:	003fd806 	br	b918 <__sccl+0x18>
    b9b8:	2813883a 	mov	r9,r5
    b9bc:	3805883a 	mov	r2,r7
    b9c0:	003fe006 	br	b944 <__sccl+0x44>

0000b9c4 <nanf>:
    b9c4:	009ff034 	movhi	r2,32704
    b9c8:	f800283a 	ret

0000b9cc <_sprintf_r>:
    b9cc:	deffe704 	addi	sp,sp,-100
    b9d0:	2807883a 	mov	r3,r5
    b9d4:	dfc01715 	stw	ra,92(sp)
    b9d8:	d9c01815 	stw	r7,96(sp)
    b9dc:	00a00034 	movhi	r2,32768
    b9e0:	10bfffc4 	addi	r2,r2,-1
    b9e4:	02008204 	movi	r8,520
    b9e8:	d8800215 	stw	r2,8(sp)
    b9ec:	d8800515 	stw	r2,20(sp)
    b9f0:	d80b883a 	mov	r5,sp
    b9f4:	d9c01804 	addi	r7,sp,96
    b9f8:	00bfffc4 	movi	r2,-1
    b9fc:	d8c00015 	stw	r3,0(sp)
    ba00:	d8c00415 	stw	r3,16(sp)
    ba04:	da00030d 	sth	r8,12(sp)
    ba08:	d880038d 	sth	r2,14(sp)
    ba0c:	00046540 	call	4654 <___vfprintf_internal_r>
    ba10:	d8c00017 	ldw	r3,0(sp)
    ba14:	18000005 	stb	zero,0(r3)
    ba18:	dfc01717 	ldw	ra,92(sp)
    ba1c:	dec01904 	addi	sp,sp,100
    ba20:	f800283a 	ret

0000ba24 <sprintf>:
    ba24:	deffe604 	addi	sp,sp,-104
    ba28:	2007883a 	mov	r3,r4
    ba2c:	dfc01715 	stw	ra,92(sp)
    ba30:	d9801815 	stw	r6,96(sp)
    ba34:	d9c01915 	stw	r7,100(sp)
    ba38:	00800074 	movhi	r2,1
    ba3c:	109ab504 	addi	r2,r2,27348
    ba40:	11000017 	ldw	r4,0(r2)
    ba44:	00a00034 	movhi	r2,32768
    ba48:	10bfffc4 	addi	r2,r2,-1
    ba4c:	280d883a 	mov	r6,r5
    ba50:	02008204 	movi	r8,520
    ba54:	d8800215 	stw	r2,8(sp)
    ba58:	d8800515 	stw	r2,20(sp)
    ba5c:	d80b883a 	mov	r5,sp
    ba60:	d9c01804 	addi	r7,sp,96
    ba64:	00bfffc4 	movi	r2,-1
    ba68:	d8c00015 	stw	r3,0(sp)
    ba6c:	d8c00415 	stw	r3,16(sp)
    ba70:	da00030d 	sth	r8,12(sp)
    ba74:	d880038d 	sth	r2,14(sp)
    ba78:	00046540 	call	4654 <___vfprintf_internal_r>
    ba7c:	d8c00017 	ldw	r3,0(sp)
    ba80:	18000005 	stb	zero,0(r3)
    ba84:	dfc01717 	ldw	ra,92(sp)
    ba88:	dec01a04 	addi	sp,sp,104
    ba8c:	f800283a 	ret

0000ba90 <strcmp>:
    ba90:	2904b03a 	or	r2,r5,r4
    ba94:	108000cc 	andi	r2,r2,3
    ba98:	1000171e 	bne	r2,zero,baf8 <strcmp+0x68>
    ba9c:	20800017 	ldw	r2,0(r4)
    baa0:	28c00017 	ldw	r3,0(r5)
    baa4:	10c0141e 	bne	r2,r3,baf8 <strcmp+0x68>
    baa8:	027fbff4 	movhi	r9,65279
    baac:	4a7fbfc4 	addi	r9,r9,-257
    bab0:	1247883a 	add	r3,r2,r9
    bab4:	0084303a 	nor	r2,zero,r2
    bab8:	1884703a 	and	r2,r3,r2
    babc:	02202074 	movhi	r8,32897
    bac0:	42202004 	addi	r8,r8,-32640
    bac4:	1204703a 	and	r2,r2,r8
    bac8:	10000226 	beq	r2,zero,bad4 <strcmp+0x44>
    bacc:	00001706 	br	bb2c <strcmp+0x9c>
    bad0:	3000161e 	bne	r6,zero,bb2c <strcmp+0x9c>
    bad4:	21000104 	addi	r4,r4,4
    bad8:	20800017 	ldw	r2,0(r4)
    badc:	29400104 	addi	r5,r5,4
    bae0:	28c00017 	ldw	r3,0(r5)
    bae4:	124f883a 	add	r7,r2,r9
    bae8:	008c303a 	nor	r6,zero,r2
    baec:	398c703a 	and	r6,r7,r6
    baf0:	320c703a 	and	r6,r6,r8
    baf4:	10fff626 	beq	r2,r3,bad0 <strcmp+0x40>
    baf8:	20800007 	ldb	r2,0(r4)
    bafc:	1000051e 	bne	r2,zero,bb14 <strcmp+0x84>
    bb00:	00000606 	br	bb1c <strcmp+0x8c>
    bb04:	21000044 	addi	r4,r4,1
    bb08:	20800007 	ldb	r2,0(r4)
    bb0c:	29400044 	addi	r5,r5,1
    bb10:	10000226 	beq	r2,zero,bb1c <strcmp+0x8c>
    bb14:	28c00007 	ldb	r3,0(r5)
    bb18:	10fffa26 	beq	r2,r3,bb04 <strcmp+0x74>
    bb1c:	20c00003 	ldbu	r3,0(r4)
    bb20:	28800003 	ldbu	r2,0(r5)
    bb24:	1885c83a 	sub	r2,r3,r2
    bb28:	f800283a 	ret
    bb2c:	0005883a 	mov	r2,zero
    bb30:	f800283a 	ret

0000bb34 <_strtod_r>:
    bb34:	deffdc04 	addi	sp,sp,-144
    bb38:	dc001a15 	stw	r16,104(sp)
    bb3c:	d9400e15 	stw	r5,56(sp)
    bb40:	d9801115 	stw	r6,68(sp)
    bb44:	d9400c15 	stw	r5,48(sp)
    bb48:	2805883a 	mov	r2,r5
    bb4c:	dfc02315 	stw	ra,140(sp)
    bb50:	df002215 	stw	fp,136(sp)
    bb54:	ddc02115 	stw	r23,132(sp)
    bb58:	dd802015 	stw	r22,128(sp)
    bb5c:	dd401f15 	stw	r21,124(sp)
    bb60:	dd001e15 	stw	r20,120(sp)
    bb64:	dcc01d15 	stw	r19,116(sp)
    bb68:	dc801c15 	stw	r18,112(sp)
    bb6c:	dc401b15 	stw	r17,108(sp)
    bb70:	2021883a 	mov	r16,r4
    bb74:	d8000615 	stw	zero,24(sp)
    bb78:	d8000715 	stw	zero,28(sp)
    bb7c:	01400b44 	movi	r5,45
    bb80:	01800074 	movhi	r6,1
    bb84:	31af3604 	addi	r6,r6,-17192
    bb88:	10c00003 	ldbu	r3,0(r2)
    bb8c:	19003fcc 	andi	r4,r3,255
    bb90:	29004c2e 	bgeu	r5,r4,bcc4 <_strtod_r+0x190>
    bb94:	1c803fcc 	andi	r18,r3,255
    bb98:	9480201c 	xori	r18,r18,128
    bb9c:	102d883a 	mov	r22,r2
    bba0:	d8001215 	stw	zero,72(sp)
    bba4:	94bfe004 	addi	r18,r18,-128
    bba8:	00800c04 	movi	r2,48
    bbac:	9080f526 	beq	r18,r2,bf84 <_strtod_r+0x450>
    bbb0:	d8001315 	stw	zero,76(sp)
    bbb4:	04c00bc4 	movi	r19,47
    bbb8:	900f883a 	mov	r7,r18
    bbbc:	9c84770e 	bge	r19,r18,cd9c <_strtod_r+0x1268>
    bbc0:	05c00e44 	movi	r23,57
    bbc4:	bc847a16 	blt	r23,r18,cdb0 <_strtod_r+0x127c>
    bbc8:	0039883a 	mov	fp,zero
    bbcc:	b4400044 	addi	r17,r22,1
    bbd0:	dd801015 	stw	r22,64(sp)
    bbd4:	d8000f15 	stw	zero,60(sp)
    bbd8:	e02d883a 	mov	r22,fp
    bbdc:	002b883a 	mov	r21,zero
    bbe0:	8039883a 	mov	fp,r16
    bbe4:	05000204 	movi	r20,8
    bbe8:	0021883a 	mov	r16,zero
    bbec:	a5408c16 	blt	r20,r21,be20 <_strtod_r+0x2ec>
    bbf0:	b009883a 	mov	r4,r22
    bbf4:	01400284 	movi	r5,10
    bbf8:	00020000 	call	2000 <__mulsi3>
    bbfc:	1485883a 	add	r2,r2,r18
    bc00:	15bff404 	addi	r22,r2,-48
    bc04:	dc400c15 	stw	r17,48(sp)
    bc08:	8c800007 	ldb	r18,0(r17)
    bc0c:	ad400044 	addi	r21,r21,1
    bc10:	880b883a 	mov	r5,r17
    bc14:	900f883a 	mov	r7,r18
    bc18:	9c808e0e 	bge	r19,r18,be54 <_strtod_r+0x320>
    bc1c:	8c400044 	addi	r17,r17,1
    bc20:	bcbff20e 	bge	r23,r18,bbec <_strtod_r+0xb8>
    bc24:	dc000f15 	stw	r16,60(sp)
    bc28:	e021883a 	mov	r16,fp
    bc2c:	b039883a 	mov	fp,r22
    bc30:	dd801017 	ldw	r22,64(sp)
    bc34:	a827883a 	mov	r19,r21
    bc38:	dd801415 	stw	r22,80(sp)
    bc3c:	000d883a 	mov	r6,zero
    bc40:	0029883a 	mov	r20,zero
    bc44:	d8001015 	stw	zero,64(sp)
    bc48:	00801944 	movi	r2,101
    bc4c:	3880dd26 	beq	r7,r2,bfc4 <_strtod_r+0x490>
    bc50:	00801144 	movi	r2,69
    bc54:	3880db26 	beq	r7,r2,bfc4 <_strtod_r+0x490>
    bc58:	0009883a 	mov	r4,zero
    bc5c:	a8011d1e 	bne	r21,zero,c0d4 <_strtod_r+0x5a0>
    bc60:	3001591e 	bne	r6,zero,c1c8 <_strtod_r+0x694>
    bc64:	d8c01317 	ldw	r3,76(sp)
    bc68:	1801571e 	bne	r3,zero,c1c8 <_strtod_r+0x694>
    bc6c:	d8c01017 	ldw	r3,64(sp)
    bc70:	1803081e 	bne	r3,zero,c894 <_strtod_r+0xd60>
    bc74:	00801384 	movi	r2,78
    bc78:	38847e26 	beq	r7,r2,ce74 <_strtod_r+0x1340>
    bc7c:	11c47916 	blt	r2,r7,ce64 <_strtod_r+0x1330>
    bc80:	00801244 	movi	r2,73
    bc84:	3883031e 	bne	r7,r2,c894 <_strtod_r+0xd60>
    bc88:	d8800c17 	ldw	r2,48(sp)
    bc8c:	01000074 	movhi	r4,1
    bc90:	2113b304 	addi	r4,r4,20172
    bc94:	01801004 	movi	r6,64
    bc98:	01c01684 	movi	r7,90
    bc9c:	21400007 	ldb	r5,0(r4)
    bca0:	21000044 	addi	r4,r4,1
    bca4:	2804b426 	beq	r5,zero,cf78 <_strtod_r+0x1444>
    bca8:	10800044 	addi	r2,r2,1
    bcac:	10c00007 	ldb	r3,0(r2)
    bcb0:	30c0020e 	bge	r6,r3,bcbc <_strtod_r+0x188>
    bcb4:	38c00116 	blt	r7,r3,bcbc <_strtod_r+0x188>
    bcb8:	18c00804 	addi	r3,r3,32
    bcbc:	197ff726 	beq	r3,r5,bc9c <_strtod_r+0x168>
    bcc0:	0002f406 	br	c894 <_strtod_r+0xd60>
    bcc4:	2109883a 	add	r4,r4,r4
    bcc8:	2109883a 	add	r4,r4,r4
    bccc:	2189883a 	add	r4,r4,r6
    bcd0:	21000017 	ldw	r4,0(r4)
    bcd4:	2000683a 	jmp	r4
    bcd8:	0000bda4 	muli	zero,zero,758
    bcdc:	0000bb94 	movui	zero,750
    bce0:	0000bb94 	movui	zero,750
    bce4:	0000bb94 	movui	zero,750
    bce8:	0000bb94 	movui	zero,750
    bcec:	0000bb94 	movui	zero,750
    bcf0:	0000bb94 	movui	zero,750
    bcf4:	0000bb94 	movui	zero,750
    bcf8:	0000bb94 	movui	zero,750
    bcfc:	0000be08 	cmpgei	zero,zero,760
    bd00:	0000be08 	cmpgei	zero,zero,760
    bd04:	0000be08 	cmpgei	zero,zero,760
    bd08:	0000be08 	cmpgei	zero,zero,760
    bd0c:	0000be08 	cmpgei	zero,zero,760
    bd10:	0000bb94 	movui	zero,750
    bd14:	0000bb94 	movui	zero,750
    bd18:	0000bb94 	movui	zero,750
    bd1c:	0000bb94 	movui	zero,750
    bd20:	0000bb94 	movui	zero,750
    bd24:	0000bb94 	movui	zero,750
    bd28:	0000bb94 	movui	zero,750
    bd2c:	0000bb94 	movui	zero,750
    bd30:	0000bb94 	movui	zero,750
    bd34:	0000bb94 	movui	zero,750
    bd38:	0000bb94 	movui	zero,750
    bd3c:	0000bb94 	movui	zero,750
    bd40:	0000bb94 	movui	zero,750
    bd44:	0000bb94 	movui	zero,750
    bd48:	0000bb94 	movui	zero,750
    bd4c:	0000bb94 	movui	zero,750
    bd50:	0000bb94 	movui	zero,750
    bd54:	0000bb94 	movui	zero,750
    bd58:	0000be08 	cmpgei	zero,zero,760
    bd5c:	0000bb94 	movui	zero,750
    bd60:	0000bb94 	movui	zero,750
    bd64:	0000bb94 	movui	zero,750
    bd68:	0000bb94 	movui	zero,750
    bd6c:	0000bb94 	movui	zero,750
    bd70:	0000bb94 	movui	zero,750
    bd74:	0000bb94 	movui	zero,750
    bd78:	0000bb94 	movui	zero,750
    bd7c:	0000bb94 	movui	zero,750
    bd80:	0000bb94 	movui	zero,750
    bd84:	0000bd90 	cmplti	zero,zero,758
    bd88:	0000bb94 	movui	zero,750
    bd8c:	0000be14 	movui	zero,760
    bd90:	d8001215 	stw	zero,72(sp)
    bd94:	15800044 	addi	r22,r2,1
    bd98:	dd800c15 	stw	r22,48(sp)
    bd9c:	14800047 	ldb	r18,1(r2)
    bda0:	903f811e 	bne	r18,zero,bba8 <_strtod_r+0x74>
    bda4:	0005883a 	mov	r2,zero
    bda8:	0007883a 	mov	r3,zero
    bdac:	d9400e17 	ldw	r5,56(sp)
    bdb0:	d8001215 	stw	zero,72(sp)
    bdb4:	d9400c15 	stw	r5,48(sp)
    bdb8:	d9001117 	ldw	r4,68(sp)
    bdbc:	20000326 	beq	r4,zero,bdcc <_strtod_r+0x298>
    bdc0:	d9000c17 	ldw	r4,48(sp)
    bdc4:	d9401117 	ldw	r5,68(sp)
    bdc8:	29000015 	stw	r4,0(r5)
    bdcc:	d9001217 	ldw	r4,72(sp)
    bdd0:	20000126 	beq	r4,zero,bdd8 <_strtod_r+0x2a4>
    bdd4:	18e0003c 	xorhi	r3,r3,32768
    bdd8:	dfc02317 	ldw	ra,140(sp)
    bddc:	df002217 	ldw	fp,136(sp)
    bde0:	ddc02117 	ldw	r23,132(sp)
    bde4:	dd802017 	ldw	r22,128(sp)
    bde8:	dd401f17 	ldw	r21,124(sp)
    bdec:	dd001e17 	ldw	r20,120(sp)
    bdf0:	dcc01d17 	ldw	r19,116(sp)
    bdf4:	dc801c17 	ldw	r18,112(sp)
    bdf8:	dc401b17 	ldw	r17,108(sp)
    bdfc:	dc001a17 	ldw	r16,104(sp)
    be00:	dec02404 	addi	sp,sp,144
    be04:	f800283a 	ret
    be08:	10800044 	addi	r2,r2,1
    be0c:	d8800c15 	stw	r2,48(sp)
    be10:	003f5d06 	br	bb88 <_strtod_r+0x54>
    be14:	00c00044 	movi	r3,1
    be18:	d8c01215 	stw	r3,72(sp)
    be1c:	003fdd06 	br	bd94 <_strtod_r+0x260>
    be20:	010003c4 	movi	r4,15
    be24:	257f7716 	blt	r4,r21,bc04 <_strtod_r+0xd0>
    be28:	8009883a 	mov	r4,r16
    be2c:	01400284 	movi	r5,10
    be30:	00020000 	call	2000 <__mulsi3>
    be34:	dc400c15 	stw	r17,48(sp)
    be38:	1485883a 	add	r2,r2,r18
    be3c:	8c800007 	ldb	r18,0(r17)
    be40:	143ff404 	addi	r16,r2,-48
    be44:	ad400044 	addi	r21,r21,1
    be48:	880b883a 	mov	r5,r17
    be4c:	900f883a 	mov	r7,r18
    be50:	9cbf7216 	blt	r19,r18,bc1c <_strtod_r+0xe8>
    be54:	dc000f15 	stw	r16,60(sp)
    be58:	e021883a 	mov	r16,fp
    be5c:	b039883a 	mov	fp,r22
    be60:	dd801017 	ldw	r22,64(sp)
    be64:	00800b84 	movi	r2,46
    be68:	9082561e 	bne	r18,r2,c7c4 <_strtod_r+0xc90>
    be6c:	28800044 	addi	r2,r5,1
    be70:	d8800c15 	stw	r2,48(sp)
    be74:	29c00047 	ldb	r7,1(r5)
    be78:	a802611e 	bne	r21,zero,c800 <_strtod_r+0xccc>
    be7c:	00800c04 	movi	r2,48
    be80:	3884161e 	bne	r7,r2,cedc <_strtod_r+0x13a8>
    be84:	00800044 	movi	r2,1
    be88:	3809883a 	mov	r4,r7
    be8c:	100d883a 	mov	r6,r2
    be90:	10800044 	addi	r2,r2,1
    be94:	2887883a 	add	r3,r5,r2
    be98:	d8c00c15 	stw	r3,48(sp)
    be9c:	2987883a 	add	r3,r5,r6
    bea0:	19c00047 	ldb	r7,1(r3)
    bea4:	393ff926 	beq	r7,r4,be8c <_strtod_r+0x358>
    bea8:	38bff3c4 	addi	r2,r7,-49
    beac:	00c00204 	movi	r3,8
    beb0:	1882ad36 	bltu	r3,r2,c968 <_strtod_r+0xe34>
    beb4:	d9400c17 	ldw	r5,48(sp)
    beb8:	3029883a 	mov	r20,r6
    bebc:	002f883a 	mov	r23,zero
    bec0:	d9401415 	stw	r5,80(sp)
    bec4:	2823883a 	mov	r17,r5
    bec8:	01800044 	movi	r6,1
    becc:	3dbff404 	addi	r22,r7,-48
    bed0:	b0002826 	beq	r22,zero,bf74 <_strtod_r+0x440>
    bed4:	00800044 	movi	r2,1
    bed8:	a1a9883a 	add	r20,r20,r6
    bedc:	30844826 	beq	r6,r2,d000 <_strtod_r+0x14cc>
    bee0:	b9a7883a 	add	r19,r23,r6
    bee4:	dc401015 	stw	r17,64(sp)
    bee8:	e023883a 	mov	r17,fp
    beec:	b039883a 	mov	fp,r22
    bef0:	802d883a 	mov	r22,r16
    bef4:	dc000f17 	ldw	r16,60(sp)
    bef8:	98ffffc4 	addi	r3,r19,-1
    befc:	dd001615 	stw	r20,88(sp)
    bf00:	04800204 	movi	r18,8
    bf04:	d9801515 	stw	r6,84(sp)
    bf08:	b829883a 	mov	r20,r23
    bf0c:	1827883a 	mov	r19,r3
    bf10:	a5000044 	addi	r20,r20,1
    bf14:	a17fffc4 	addi	r5,r20,-1
    bf18:	9142b916 	blt	r18,r5,ca00 <_strtod_r+0xecc>
    bf1c:	8809883a 	mov	r4,r17
    bf20:	01400284 	movi	r5,10
    bf24:	00020000 	call	2000 <__mulsi3>
    bf28:	1023883a 	mov	r17,r2
    bf2c:	a4fff81e 	bne	r20,r19,bf10 <_strtod_r+0x3dc>
    bf30:	d9801517 	ldw	r6,84(sp)
    bf34:	dc000f15 	stw	r16,60(sp)
    bf38:	dd001617 	ldw	r20,88(sp)
    bf3c:	b021883a 	mov	r16,r22
    bf40:	e02d883a 	mov	r22,fp
    bf44:	8839883a 	mov	fp,r17
    bf48:	dc401017 	ldw	r17,64(sp)
    bf4c:	b985883a 	add	r2,r23,r6
    bf50:	10bfffc4 	addi	r2,r2,-1
    bf54:	00c00204 	movi	r3,8
    bf58:	15c00044 	addi	r23,r2,1
    bf5c:	1883d616 	blt	r3,r2,ceb8 <_strtod_r+0x1384>
    bf60:	e009883a 	mov	r4,fp
    bf64:	01400284 	movi	r5,10
    bf68:	00020000 	call	2000 <__mulsi3>
    bf6c:	15b9883a 	add	fp,r2,r22
    bf70:	000d883a 	mov	r6,zero
    bf74:	88800044 	addi	r2,r17,1
    bf78:	d8800c15 	stw	r2,48(sp)
    bf7c:	89c00047 	ldb	r7,1(r17)
    bf80:	00022306 	br	c810 <_strtod_r+0xcdc>
    bf84:	b0800047 	ldb	r2,1(r22)
    bf88:	01001604 	movi	r4,88
    bf8c:	1102a326 	beq	r2,r4,ca1c <_strtod_r+0xee8>
    bf90:	01001e04 	movi	r4,120
    bf94:	1102a126 	beq	r2,r4,ca1c <_strtod_r+0xee8>
    bf98:	b0800044 	addi	r2,r22,1
    bf9c:	9009883a 	mov	r4,r18
    bfa0:	d8800c15 	stw	r2,48(sp)
    bfa4:	14800007 	ldb	r18,0(r2)
    bfa8:	102d883a 	mov	r22,r2
    bfac:	10800044 	addi	r2,r2,1
    bfb0:	913ffb26 	beq	r18,r4,bfa0 <_strtod_r+0x46c>
    bfb4:	90022526 	beq	r18,zero,c84c <_strtod_r+0xd18>
    bfb8:	00c00044 	movi	r3,1
    bfbc:	d8c01315 	stw	r3,76(sp)
    bfc0:	003efc06 	br	bbb4 <_strtod_r+0x80>
    bfc4:	a800011e 	bne	r21,zero,bfcc <_strtod_r+0x498>
    bfc8:	30023026 	beq	r6,zero,c88c <_strtod_r+0xd58>
    bfcc:	d9400c17 	ldw	r5,48(sp)
    bfd0:	28800044 	addi	r2,r5,1
    bfd4:	d8800c15 	stw	r2,48(sp)
    bfd8:	29c00047 	ldb	r7,1(r5)
    bfdc:	d9400e15 	stw	r5,56(sp)
    bfe0:	00800ac4 	movi	r2,43
    bfe4:	38821026 	beq	r7,r2,c828 <_strtod_r+0xcf4>
    bfe8:	00800b44 	movi	r2,45
    bfec:	38821426 	beq	r7,r2,c840 <_strtod_r+0xd0c>
    bff0:	d8001515 	stw	zero,84(sp)
    bff4:	38bff404 	addi	r2,r7,-48
    bff8:	00c00244 	movi	r3,9
    bffc:	1881fc36 	bltu	r3,r2,c7f0 <_strtod_r+0xcbc>
    c000:	00800c04 	movi	r2,48
    c004:	3880071e 	bne	r7,r2,c024 <_strtod_r+0x4f0>
    c008:	d8800c17 	ldw	r2,48(sp)
    c00c:	3807883a 	mov	r3,r7
    c010:	10800044 	addi	r2,r2,1
    c014:	d8800c15 	stw	r2,48(sp)
    c018:	11c00007 	ldb	r7,0(r2)
    c01c:	10800044 	addi	r2,r2,1
    c020:	38fffc26 	beq	r7,r3,c014 <_strtod_r+0x4e0>
    c024:	38bff3c4 	addi	r2,r7,-49
    c028:	00c00204 	movi	r3,8
    c02c:	18bf0a36 	bltu	r3,r2,bc58 <_strtod_r+0x124>
    c030:	d8c00c17 	ldw	r3,48(sp)
    c034:	393ff404 	addi	r4,r7,-48
    c038:	05c00bc4 	movi	r23,47
    c03c:	18800044 	addi	r2,r3,1
    c040:	d8800c15 	stw	r2,48(sp)
    c044:	19c00047 	ldb	r7,1(r3)
    c048:	d8c01615 	stw	r3,88(sp)
    c04c:	b9c0160e 	bge	r23,r7,c0a8 <_strtod_r+0x574>
    c050:	00c00e44 	movi	r3,57
    c054:	19c01416 	blt	r3,r7,c0a8 <_strtod_r+0x574>
    c058:	d9401617 	ldw	r5,88(sp)
    c05c:	dc001715 	stw	r16,92(sp)
    c060:	1823883a 	mov	r17,r3
    c064:	2d800084 	addi	r22,r5,2
    c068:	3025883a 	mov	r18,r6
    c06c:	3821883a 	mov	r16,r7
    c070:	00000206 	br	c07c <_strtod_r+0x548>
    c074:	b5800044 	addi	r22,r22,1
    c078:	8c000816 	blt	r17,r16,c09c <_strtod_r+0x568>
    c07c:	01400284 	movi	r5,10
    c080:	00020000 	call	2000 <__mulsi3>
    c084:	dd800c15 	stw	r22,48(sp)
    c088:	1405883a 	add	r2,r2,r16
    c08c:	b4000007 	ldb	r16,0(r22)
    c090:	113ff404 	addi	r4,r2,-48
    c094:	b005883a 	mov	r2,r22
    c098:	bc3ff616 	blt	r23,r16,c074 <_strtod_r+0x540>
    c09c:	800f883a 	mov	r7,r16
    c0a0:	dc001717 	ldw	r16,92(sp)
    c0a4:	900d883a 	mov	r6,r18
    c0a8:	d8c01617 	ldw	r3,88(sp)
    c0ac:	10c5c83a 	sub	r2,r2,r3
    c0b0:	00c00204 	movi	r3,8
    c0b4:	18833716 	blt	r3,r2,cd94 <_strtod_r+0x1260>
    c0b8:	009387c4 	movi	r2,19999
    c0bc:	1100010e 	bge	r2,r4,c0c4 <_strtod_r+0x590>
    c0c0:	1009883a 	mov	r4,r2
    c0c4:	d8c01517 	ldw	r3,84(sp)
    c0c8:	183ee426 	beq	r3,zero,bc5c <_strtod_r+0x128>
    c0cc:	0109c83a 	sub	r4,zero,r4
    c0d0:	a83ee326 	beq	r21,zero,bc60 <_strtod_r+0x12c>
    c0d4:	2529c83a 	sub	r20,r4,r20
    c0d8:	dd001015 	stw	r20,64(sp)
    c0dc:	9800011e 	bne	r19,zero,c0e4 <_strtod_r+0x5b0>
    c0e0:	a827883a 	mov	r19,r21
    c0e4:	00800404 	movi	r2,16
    c0e8:	a823883a 	mov	r17,r21
    c0ec:	1540010e 	bge	r2,r21,c0f4 <_strtod_r+0x5c0>
    c0f0:	1023883a 	mov	r17,r2
    c0f4:	e009883a 	mov	r4,fp
    c0f8:	00108e80 	call	108e8 <__floatunsidf>
    c0fc:	d8800615 	stw	r2,24(sp)
    c100:	d8c00715 	stw	r3,28(sp)
    c104:	01000244 	movi	r4,9
    c108:	2440150e 	bge	r4,r17,c160 <_strtod_r+0x62c>
    c10c:	893ffdc4 	addi	r4,r17,-9
    c110:	200890fa 	slli	r4,r4,3
    c114:	180b883a 	mov	r5,r3
    c118:	00c00074 	movhi	r3,1
    c11c:	18d37e04 	addi	r3,r3,19960
    c120:	1907883a 	add	r3,r3,r4
    c124:	19800017 	ldw	r6,0(r3)
    c128:	19c00117 	ldw	r7,4(r3)
    c12c:	1009883a 	mov	r4,r2
    c130:	00100100 	call	10010 <__muldf3>
    c134:	d9000f17 	ldw	r4,60(sp)
    c138:	1025883a 	mov	r18,r2
    c13c:	1829883a 	mov	r20,r3
    c140:	00108e80 	call	108e8 <__floatunsidf>
    c144:	9009883a 	mov	r4,r18
    c148:	a00b883a 	mov	r5,r20
    c14c:	100d883a 	mov	r6,r2
    c150:	180f883a 	mov	r7,r3
    c154:	000ff5c0 	call	ff5c <__adddf3>
    c158:	d8800615 	stw	r2,24(sp)
    c15c:	d8c00715 	stw	r3,28(sp)
    c160:	008003c4 	movi	r2,15
    c164:	15401b16 	blt	r2,r21,c1d4 <_strtod_r+0x6a0>
    c168:	d8c01017 	ldw	r3,64(sp)
    c16c:	18001626 	beq	r3,zero,c1c8 <_strtod_r+0x694>
    c170:	d9001017 	ldw	r4,64(sp)
    c174:	01032e0e 	bge	zero,r4,ce30 <_strtod_r+0x12fc>
    c178:	00c00584 	movi	r3,22
    c17c:	19031016 	blt	r3,r4,cdc0 <_strtod_r+0x128c>
    c180:	200490fa 	slli	r2,r4,3
    c184:	00c00074 	movhi	r3,1
    c188:	18d37e04 	addi	r3,r3,19960
    c18c:	d9000617 	ldw	r4,24(sp)
    c190:	1885883a 	add	r2,r3,r2
    c194:	d9400717 	ldw	r5,28(sp)
    c198:	11800017 	ldw	r6,0(r2)
    c19c:	11c00117 	ldw	r7,4(r2)
    c1a0:	00100100 	call	10010 <__muldf3>
    c1a4:	003f0406 	br	bdb8 <_strtod_r+0x284>
    c1a8:	00dffc34 	movhi	r3,32752
    c1ac:	d8c00715 	stw	r3,28(sp)
    c1b0:	d8000615 	stw	zero,24(sp)
    c1b4:	1080020c 	andi	r2,r2,8
    c1b8:	10000326 	beq	r2,zero,c1c8 <_strtod_r+0x694>
    c1bc:	d8800717 	ldw	r2,28(sp)
    c1c0:	10a00034 	orhi	r2,r2,32768
    c1c4:	d8800715 	stw	r2,28(sp)
    c1c8:	d8800617 	ldw	r2,24(sp)
    c1cc:	d8c00717 	ldw	r3,28(sp)
    c1d0:	003ef906 	br	bdb8 <_strtod_r+0x284>
    c1d4:	d8801017 	ldw	r2,64(sp)
    c1d8:	ac63c83a 	sub	r17,r21,r17
    c1dc:	1463883a 	add	r17,r2,r17
    c1e0:	0442a70e 	bge	zero,r17,cc80 <_strtod_r+0x114c>
    c1e4:	888003cc 	andi	r2,r17,15
    c1e8:	10000b26 	beq	r2,zero,c218 <_strtod_r+0x6e4>
    c1ec:	100490fa 	slli	r2,r2,3
    c1f0:	00c00074 	movhi	r3,1
    c1f4:	18d37e04 	addi	r3,r3,19960
    c1f8:	d9000617 	ldw	r4,24(sp)
    c1fc:	1885883a 	add	r2,r3,r2
    c200:	d9400717 	ldw	r5,28(sp)
    c204:	11800017 	ldw	r6,0(r2)
    c208:	11c00117 	ldw	r7,4(r2)
    c20c:	00100100 	call	10010 <__muldf3>
    c210:	d8800615 	stw	r2,24(sp)
    c214:	d8c00715 	stw	r3,28(sp)
    c218:	00bffc04 	movi	r2,-16
    c21c:	88a2703a 	and	r17,r17,r2
    c220:	8801a41e 	bne	r17,zero,c8b4 <_strtod_r+0xd80>
    c224:	0029883a 	mov	r20,zero
    c228:	d9401417 	ldw	r5,80(sp)
    c22c:	df000015 	stw	fp,0(sp)
    c230:	8009883a 	mov	r4,r16
    c234:	980d883a 	mov	r6,r19
    c238:	a80f883a 	mov	r7,r21
    c23c:	000a3f80 	call	a3f8 <__s2b>
    c240:	d8c01017 	ldw	r3,64(sp)
    c244:	102d883a 	mov	r22,r2
    c248:	b1000304 	addi	r4,r22,12
    c24c:	1805d7fa 	srai	r2,r3,31
    c250:	00f9c83a 	sub	fp,zero,r3
    c254:	d9001315 	stw	r4,76(sp)
    c258:	e0b8703a 	and	fp,fp,r2
    c25c:	df000e15 	stw	fp,56(sp)
    c260:	b1400117 	ldw	r5,4(r22)
    c264:	8009883a 	mov	r4,r16
    c268:	0027883a 	mov	r19,zero
    c26c:	000a1e40 	call	a1e4 <_Balloc>
    c270:	b1800417 	ldw	r6,16(r22)
    c274:	d9401317 	ldw	r5,76(sp)
    c278:	11000304 	addi	r4,r2,12
    c27c:	31800084 	addi	r6,r6,2
    c280:	318d883a 	add	r6,r6,r6
    c284:	318d883a 	add	r6,r6,r6
    c288:	1025883a 	mov	r18,r2
    c28c:	0003e600 	call	3e60 <memcpy>
    c290:	d9400617 	ldw	r5,24(sp)
    c294:	d9800717 	ldw	r6,28(sp)
    c298:	d8800a04 	addi	r2,sp,40
    c29c:	8009883a 	mov	r4,r16
    c2a0:	d9c00d04 	addi	r7,sp,52
    c2a4:	d8800015 	stw	r2,0(sp)
    c2a8:	000aed80 	call	aed8 <__d2b>
    c2ac:	8009883a 	mov	r4,r16
    c2b0:	01400044 	movi	r5,1
    c2b4:	d8800b15 	stw	r2,44(sp)
    c2b8:	000a6140 	call	a614 <__i2b>
    c2bc:	d8c01017 	ldw	r3,64(sp)
    c2c0:	1023883a 	mov	r17,r2
    c2c4:	00c0010e 	bge	zero,r3,c2cc <_strtod_r+0x798>
    c2c8:	1827883a 	mov	r19,r3
    c2cc:	d8800d17 	ldw	r2,52(sp)
    c2d0:	1000de16 	blt	r2,zero,c64c <_strtod_r+0xb18>
    c2d4:	d9000e17 	ldw	r4,56(sp)
    c2d8:	9807883a 	mov	r3,r19
    c2dc:	20af883a 	add	r23,r4,r2
    c2e0:	d9000a17 	ldw	r4,40(sp)
    c2e4:	1505c83a 	sub	r2,r2,r20
    c2e8:	017f00c4 	movi	r5,-1021
    c2ec:	110d883a 	add	r6,r2,r4
    c2f0:	31409a0e 	bge	r6,r5,c55c <_strtod_r+0xa28>
    c2f4:	10810cc4 	addi	r2,r2,1075
    c2f8:	b8b9883a 	add	fp,r23,r2
    c2fc:	1885883a 	add	r2,r3,r2
    c300:	152b883a 	add	r21,r2,r20
    c304:	e005883a 	mov	r2,fp
    c308:	bf00010e 	bge	r23,fp,c310 <_strtod_r+0x7dc>
    c30c:	b805883a 	mov	r2,r23
    c310:	a880010e 	bge	r21,r2,c318 <_strtod_r+0x7e4>
    c314:	a805883a 	mov	r2,r21
    c318:	0080030e 	bge	zero,r2,c328 <_strtod_r+0x7f4>
    c31c:	e0b9c83a 	sub	fp,fp,r2
    c320:	a8abc83a 	sub	r21,r21,r2
    c324:	b8afc83a 	sub	r23,r23,r2
    c328:	d9400e17 	ldw	r5,56(sp)
    c32c:	28000f26 	beq	r5,zero,c36c <_strtod_r+0x838>
    c330:	280d883a 	mov	r6,r5
    c334:	8009883a 	mov	r4,r16
    c338:	880b883a 	mov	r5,r17
    c33c:	000a8a80 	call	a8a8 <__pow5mult>
    c340:	d9800b17 	ldw	r6,44(sp)
    c344:	8009883a 	mov	r4,r16
    c348:	100b883a 	mov	r5,r2
    c34c:	1023883a 	mov	r17,r2
    c350:	000a6500 	call	a650 <__multiply>
    c354:	d9400b17 	ldw	r5,44(sp)
    c358:	8009883a 	mov	r4,r16
    c35c:	d8801815 	stw	r2,96(sp)
    c360:	000a28c0 	call	a28c <_Bfree>
    c364:	d8801817 	ldw	r2,96(sp)
    c368:	d8800b15 	stw	r2,44(sp)
    c36c:	0700050e 	bge	zero,fp,c384 <_strtod_r+0x850>
    c370:	d9400b17 	ldw	r5,44(sp)
    c374:	8009883a 	mov	r4,r16
    c378:	e00d883a 	mov	r6,fp
    c37c:	000a9d40 	call	a9d4 <__lshift>
    c380:	d8800b15 	stw	r2,44(sp)
    c384:	98000526 	beq	r19,zero,c39c <_strtod_r+0x868>
    c388:	900b883a 	mov	r5,r18
    c38c:	8009883a 	mov	r4,r16
    c390:	980d883a 	mov	r6,r19
    c394:	000a8a80 	call	a8a8 <__pow5mult>
    c398:	1025883a 	mov	r18,r2
    c39c:	0540050e 	bge	zero,r21,c3b4 <_strtod_r+0x880>
    c3a0:	900b883a 	mov	r5,r18
    c3a4:	8009883a 	mov	r4,r16
    c3a8:	a80d883a 	mov	r6,r21
    c3ac:	000a9d40 	call	a9d4 <__lshift>
    c3b0:	1025883a 	mov	r18,r2
    c3b4:	05c0050e 	bge	zero,r23,c3cc <_strtod_r+0x898>
    c3b8:	880b883a 	mov	r5,r17
    c3bc:	8009883a 	mov	r4,r16
    c3c0:	b80d883a 	mov	r6,r23
    c3c4:	000a9d40 	call	a9d4 <__lshift>
    c3c8:	1023883a 	mov	r17,r2
    c3cc:	d9400b17 	ldw	r5,44(sp)
    c3d0:	8009883a 	mov	r4,r16
    c3d4:	900d883a 	mov	r6,r18
    c3d8:	000ab880 	call	ab88 <__mdiff>
    c3dc:	1027883a 	mov	r19,r2
    c3e0:	10800317 	ldw	r2,12(r2)
    c3e4:	9809883a 	mov	r4,r19
    c3e8:	98000315 	stw	zero,12(r19)
    c3ec:	880b883a 	mov	r5,r17
    c3f0:	d8800f15 	stw	r2,60(sp)
    c3f4:	000ab300 	call	ab30 <__mcmp>
    c3f8:	1001cb16 	blt	r2,zero,cb28 <_strtod_r+0xff4>
    c3fc:	1001fa26 	beq	r2,zero,cbe8 <_strtod_r+0x10b4>
    c400:	9809883a 	mov	r4,r19
    c404:	880b883a 	mov	r5,r17
    c408:	000b01c0 	call	b01c <__ratio>
    c40c:	1009883a 	mov	r4,r2
    c410:	180b883a 	mov	r5,r3
    c414:	000d883a 	mov	r6,zero
    c418:	01d00034 	movhi	r7,16384
    c41c:	102f883a 	mov	r23,r2
    c420:	1839883a 	mov	fp,r3
    c424:	00106840 	call	10684 <__ledf2>
    c428:	00804f16 	blt	zero,r2,c568 <_strtod_r+0xa34>
    c42c:	d9400f17 	ldw	r5,60(sp)
    c430:	28008926 	beq	r5,zero,c658 <_strtod_r+0xb24>
    c434:	da400717 	ldw	r9,28(sp)
    c438:	05cffc34 	movhi	r23,16368
    c43c:	d8000815 	stw	zero,32(sp)
    c440:	ddc00915 	stw	r23,36(sp)
    c444:	002b883a 	mov	r21,zero
    c448:	4f1ffc2c 	andhi	fp,r9,32752
    c44c:	009ff834 	movhi	r2,32736
    c450:	e0805526 	beq	fp,r2,c5a8 <_strtod_r+0xa74>
    c454:	a0001b26 	beq	r20,zero,c4c4 <_strtod_r+0x990>
    c458:	0081a834 	movhi	r2,1696
    c45c:	17001936 	bltu	r2,fp,c4c4 <_strtod_r+0x990>
    c460:	a809883a 	mov	r4,r21
    c464:	b80b883a 	mov	r5,r23
    c468:	01bff034 	movhi	r6,65472
    c46c:	01d07834 	movhi	r7,16864
    c470:	39ffffc4 	addi	r7,r7,-1
    c474:	00106840 	call	10684 <__ledf2>
    c478:	00800d16 	blt	zero,r2,c4b0 <_strtod_r+0x97c>
    c47c:	a809883a 	mov	r4,r21
    c480:	b80b883a 	mov	r5,r23
    c484:	000ee080 	call	ee08 <__fixunsdfsi>
    c488:	1000d626 	beq	r2,zero,c7e4 <_strtod_r+0xcb0>
    c48c:	1009883a 	mov	r4,r2
    c490:	00108e80 	call	108e8 <__floatunsidf>
    c494:	102b883a 	mov	r21,r2
    c498:	182f883a 	mov	r23,r3
    c49c:	d9400f17 	ldw	r5,60(sp)
    c4a0:	2800ce1e 	bne	r5,zero,c7dc <_strtod_r+0xca8>
    c4a4:	b8a0003c 	xorhi	r2,r23,32768
    c4a8:	dd400815 	stw	r21,32(sp)
    c4ac:	d8800915 	stw	r2,36(sp)
    c4b0:	d8c00917 	ldw	r3,36(sp)
    c4b4:	0081ac34 	movhi	r2,1712
    c4b8:	1885883a 	add	r2,r3,r2
    c4bc:	1705c83a 	sub	r2,r2,fp
    c4c0:	d8800915 	stw	r2,36(sp)
    c4c4:	d9000617 	ldw	r4,24(sp)
    c4c8:	d9400717 	ldw	r5,28(sp)
    c4cc:	000ad300 	call	ad30 <__ulp>
    c4d0:	da800617 	ldw	r10,24(sp)
    c4d4:	da400717 	ldw	r9,28(sp)
    c4d8:	d9800817 	ldw	r6,32(sp)
    c4dc:	d9c00917 	ldw	r7,36(sp)
    c4e0:	1009883a 	mov	r4,r2
    c4e4:	180b883a 	mov	r5,r3
    c4e8:	da401915 	stw	r9,100(sp)
    c4ec:	da801815 	stw	r10,96(sp)
    c4f0:	00100100 	call	10010 <__muldf3>
    c4f4:	da401917 	ldw	r9,100(sp)
    c4f8:	da801817 	ldw	r10,96(sp)
    c4fc:	100d883a 	mov	r6,r2
    c500:	480b883a 	mov	r5,r9
    c504:	5009883a 	mov	r4,r10
    c508:	180f883a 	mov	r7,r3
    c50c:	000ff5c0 	call	ff5c <__adddf3>
    c510:	d8800615 	stw	r2,24(sp)
    c514:	d8c00715 	stw	r3,28(sp)
    c518:	1813883a 	mov	r9,r3
    c51c:	a000021e 	bne	r20,zero,c528 <_strtod_r+0x9f4>
    c520:	489ffc2c 	andhi	r2,r9,32752
    c524:	e0807226 	beq	fp,r2,c6f0 <_strtod_r+0xbbc>
    c528:	d9400b17 	ldw	r5,44(sp)
    c52c:	8009883a 	mov	r4,r16
    c530:	000a28c0 	call	a28c <_Bfree>
    c534:	8009883a 	mov	r4,r16
    c538:	900b883a 	mov	r5,r18
    c53c:	000a28c0 	call	a28c <_Bfree>
    c540:	8009883a 	mov	r4,r16
    c544:	880b883a 	mov	r5,r17
    c548:	000a28c0 	call	a28c <_Bfree>
    c54c:	8009883a 	mov	r4,r16
    c550:	980b883a 	mov	r5,r19
    c554:	000a28c0 	call	a28c <_Bfree>
    c558:	003f4106 	br	c260 <_strtod_r+0x72c>
    c55c:	00800d84 	movi	r2,54
    c560:	1105c83a 	sub	r2,r2,r4
    c564:	003f6406 	br	c2f8 <_strtod_r+0x7c4>
    c568:	b809883a 	mov	r4,r23
    c56c:	e00b883a 	mov	r5,fp
    c570:	000d883a 	mov	r6,zero
    c574:	01cff834 	movhi	r7,16352
    c578:	00100100 	call	10010 <__muldf3>
    c57c:	d9000f17 	ldw	r4,60(sp)
    c580:	102b883a 	mov	r21,r2
    c584:	182f883a 	mov	r23,r3
    c588:	2000011e 	bne	r4,zero,c590 <_strtod_r+0xa5c>
    c58c:	18e0003c 	xorhi	r3,r3,32768
    c590:	da400717 	ldw	r9,28(sp)
    c594:	d8800815 	stw	r2,32(sp)
    c598:	d8c00915 	stw	r3,36(sp)
    c59c:	4f1ffc2c 	andhi	fp,r9,32752
    c5a0:	009ff834 	movhi	r2,32736
    c5a4:	e0bfab1e 	bne	fp,r2,c454 <_strtod_r+0x920>
    c5a8:	d8800617 	ldw	r2,24(sp)
    c5ac:	00ff2c34 	movhi	r3,64688
    c5b0:	48d3883a 	add	r9,r9,r3
    c5b4:	1009883a 	mov	r4,r2
    c5b8:	d8800415 	stw	r2,16(sp)
    c5bc:	d8800717 	ldw	r2,28(sp)
    c5c0:	480b883a 	mov	r5,r9
    c5c4:	da400715 	stw	r9,28(sp)
    c5c8:	d8800515 	stw	r2,20(sp)
    c5cc:	000ad300 	call	ad30 <__ulp>
    c5d0:	da800617 	ldw	r10,24(sp)
    c5d4:	da400717 	ldw	r9,28(sp)
    c5d8:	d9800817 	ldw	r6,32(sp)
    c5dc:	d9c00917 	ldw	r7,36(sp)
    c5e0:	1009883a 	mov	r4,r2
    c5e4:	180b883a 	mov	r5,r3
    c5e8:	da401915 	stw	r9,100(sp)
    c5ec:	da801815 	stw	r10,96(sp)
    c5f0:	00100100 	call	10010 <__muldf3>
    c5f4:	da801817 	ldw	r10,96(sp)
    c5f8:	da401917 	ldw	r9,100(sp)
    c5fc:	100d883a 	mov	r6,r2
    c600:	5009883a 	mov	r4,r10
    c604:	480b883a 	mov	r5,r9
    c608:	180f883a 	mov	r7,r3
    c60c:	000ff5c0 	call	ff5c <__adddf3>
    c610:	d8800615 	stw	r2,24(sp)
    c614:	015f2834 	movhi	r5,31904
    c618:	297fffc4 	addi	r5,r5,-1
    c61c:	189ffc2c 	andhi	r2,r3,32752
    c620:	2880642e 	bgeu	r5,r2,c7b4 <_strtod_r+0xc80>
    c624:	d8800517 	ldw	r2,20(sp)
    c628:	00dffc34 	movhi	r3,32752
    c62c:	18ffffc4 	addi	r3,r3,-1
    c630:	10c18526 	beq	r2,r3,cc48 <_strtod_r+0x1114>
    c634:	011ffc34 	movhi	r4,32752
    c638:	213fffc4 	addi	r4,r4,-1
    c63c:	00bfffc4 	movi	r2,-1
    c640:	d9000715 	stw	r4,28(sp)
    c644:	d8800615 	stw	r2,24(sp)
    c648:	003fb706 	br	c528 <_strtod_r+0x9f4>
    c64c:	9887c83a 	sub	r3,r19,r2
    c650:	ddc00e17 	ldw	r23,56(sp)
    c654:	003f2206 	br	c2e0 <_strtod_r+0x7ac>
    c658:	d8800617 	ldw	r2,24(sp)
    c65c:	10001a1e 	bne	r2,zero,c6c8 <_strtod_r+0xb94>
    c660:	da400717 	ldw	r9,28(sp)
    c664:	00c00434 	movhi	r3,16
    c668:	18ffffc4 	addi	r3,r3,-1
    c66c:	48c4703a 	and	r2,r9,r3
    c670:	1000191e 	bne	r2,zero,c6d8 <_strtod_r+0xba4>
    c674:	b809883a 	mov	r4,r23
    c678:	e00b883a 	mov	r5,fp
    c67c:	000d883a 	mov	r6,zero
    c680:	01cffc34 	movhi	r7,16368
    c684:	da401915 	stw	r9,100(sp)
    c688:	00106280 	call	10628 <__ltdf2>
    c68c:	da401917 	ldw	r9,100(sp)
    c690:	1001bb16 	blt	r2,zero,cd80 <_strtod_r+0x124c>
    c694:	b809883a 	mov	r4,r23
    c698:	e00b883a 	mov	r5,fp
    c69c:	000d883a 	mov	r6,zero
    c6a0:	01cff834 	movhi	r7,16352
    c6a4:	00100100 	call	10010 <__muldf3>
    c6a8:	da401917 	ldw	r9,100(sp)
    c6ac:	182f883a 	mov	r23,r3
    c6b0:	102b883a 	mov	r21,r2
    c6b4:	1007883a 	mov	r3,r2
    c6b8:	b8a0003c 	xorhi	r2,r23,32768
    c6bc:	d8c00815 	stw	r3,32(sp)
    c6c0:	d8800915 	stw	r2,36(sp)
    c6c4:	003f6006 	br	c448 <_strtod_r+0x914>
    c6c8:	00c00044 	movi	r3,1
    c6cc:	da400717 	ldw	r9,28(sp)
    c6d0:	10c0011e 	bne	r2,r3,c6d8 <_strtod_r+0xba4>
    c6d4:	4800c526 	beq	r9,zero,c9ec <_strtod_r+0xeb8>
    c6d8:	00affc34 	movhi	r2,49136
    c6dc:	d8000815 	stw	zero,32(sp)
    c6e0:	d8800915 	stw	r2,36(sp)
    c6e4:	002b883a 	mov	r21,zero
    c6e8:	05cffc34 	movhi	r23,16368
    c6ec:	003f5606 	br	c448 <_strtod_r+0x914>
    c6f0:	b80b883a 	mov	r5,r23
    c6f4:	a809883a 	mov	r4,r21
    c6f8:	da401915 	stw	r9,100(sp)
    c6fc:	00107b40 	call	107b4 <__fixdfsi>
    c700:	1009883a 	mov	r4,r2
    c704:	00106e00 	call	106e0 <__floatsidf>
    c708:	b80b883a 	mov	r5,r23
    c70c:	a809883a 	mov	r4,r21
    c710:	100d883a 	mov	r6,r2
    c714:	180f883a 	mov	r7,r3
    c718:	000ffb00 	call	ffb0 <__subdf3>
    c71c:	102f883a 	mov	r23,r2
    c720:	d8800f17 	ldw	r2,60(sp)
    c724:	1839883a 	mov	fp,r3
    c728:	da401917 	ldw	r9,100(sp)
    c72c:	1000021e 	bne	r2,zero,c738 <_strtod_r+0xc04>
    c730:	d8800617 	ldw	r2,24(sp)
    c734:	10004826 	beq	r2,zero,c858 <_strtod_r+0xd24>
    c738:	b809883a 	mov	r4,r23
    c73c:	e00b883a 	mov	r5,fp
    c740:	01a52834 	movhi	r6,38048
    c744:	318d6544 	addi	r6,r6,13717
    c748:	01cff834 	movhi	r7,16352
    c74c:	39ffffc4 	addi	r7,r7,-1
    c750:	00106280 	call	10628 <__ltdf2>
    c754:	10000716 	blt	r2,zero,c774 <_strtod_r+0xc40>
    c758:	b809883a 	mov	r4,r23
    c75c:	e00b883a 	mov	r5,fp
    c760:	018d6c34 	movhi	r6,13744
    c764:	31b94d44 	addi	r6,r6,-6859
    c768:	01cff834 	movhi	r7,16352
    c76c:	00105600 	call	10560 <__gtdf2>
    c770:	00bf6d0e 	bge	zero,r2,c528 <_strtod_r+0x9f4>
    c774:	d9400b17 	ldw	r5,44(sp)
    c778:	8009883a 	mov	r4,r16
    c77c:	000a28c0 	call	a28c <_Bfree>
    c780:	8009883a 	mov	r4,r16
    c784:	900b883a 	mov	r5,r18
    c788:	000a28c0 	call	a28c <_Bfree>
    c78c:	8009883a 	mov	r4,r16
    c790:	880b883a 	mov	r5,r17
    c794:	000a28c0 	call	a28c <_Bfree>
    c798:	8009883a 	mov	r4,r16
    c79c:	b00b883a 	mov	r5,r22
    c7a0:	000a28c0 	call	a28c <_Bfree>
    c7a4:	8009883a 	mov	r4,r16
    c7a8:	980b883a 	mov	r5,r19
    c7ac:	000a28c0 	call	a28c <_Bfree>
    c7b0:	003e8506 	br	c1c8 <_strtod_r+0x694>
    c7b4:	0240d434 	movhi	r9,848
    c7b8:	1a53883a 	add	r9,r3,r9
    c7bc:	da400715 	stw	r9,28(sp)
    c7c0:	003f5606 	br	c51c <_strtod_r+0x9e8>
    c7c4:	a827883a 	mov	r19,r21
    c7c8:	dd801415 	stw	r22,80(sp)
    c7cc:	000d883a 	mov	r6,zero
    c7d0:	0029883a 	mov	r20,zero
    c7d4:	d8001015 	stw	zero,64(sp)
    c7d8:	003d1d06 	br	bc50 <_strtod_r+0x11c>
    c7dc:	b805883a 	mov	r2,r23
    c7e0:	003f3106 	br	c4a8 <_strtod_r+0x974>
    c7e4:	002b883a 	mov	r21,zero
    c7e8:	05cffc34 	movhi	r23,16368
    c7ec:	003f2b06 	br	c49c <_strtod_r+0x968>
    c7f0:	d9400e17 	ldw	r5,56(sp)
    c7f4:	0009883a 	mov	r4,zero
    c7f8:	d9400c15 	stw	r5,48(sp)
    c7fc:	003d1706 	br	bc5c <_strtod_r+0x128>
    c800:	dd801415 	stw	r22,80(sp)
    c804:	a82f883a 	mov	r23,r21
    c808:	000d883a 	mov	r6,zero
    c80c:	0029883a 	mov	r20,zero
    c810:	3dbff404 	addi	r22,r7,-48
    c814:	00800244 	movi	r2,9
    c818:	15802136 	bltu	r2,r22,c8a0 <_strtod_r+0xd6c>
    c81c:	31800044 	addi	r6,r6,1
    c820:	dc400c17 	ldw	r17,48(sp)
    c824:	003daa06 	br	bed0 <_strtod_r+0x39c>
    c828:	d8001515 	stw	zero,84(sp)
    c82c:	d9400e17 	ldw	r5,56(sp)
    c830:	28800084 	addi	r2,r5,2
    c834:	d8800c15 	stw	r2,48(sp)
    c838:	29c00087 	ldb	r7,2(r5)
    c83c:	003ded06 	br	bff4 <_strtod_r+0x4c0>
    c840:	00c00044 	movi	r3,1
    c844:	d8c01515 	stw	r3,84(sp)
    c848:	003ff806 	br	c82c <_strtod_r+0xcf8>
    c84c:	0005883a 	mov	r2,zero
    c850:	0007883a 	mov	r3,zero
    c854:	003d5806 	br	bdb8 <_strtod_r+0x284>
    c858:	00c00434 	movhi	r3,16
    c85c:	18ffffc4 	addi	r3,r3,-1
    c860:	48d2703a 	and	r9,r9,r3
    c864:	483fb41e 	bne	r9,zero,c738 <_strtod_r+0xc04>
    c868:	b809883a 	mov	r4,r23
    c86c:	e00b883a 	mov	r5,fp
    c870:	01a52834 	movhi	r6,38048
    c874:	318d6544 	addi	r6,r6,13717
    c878:	01cff434 	movhi	r7,16336
    c87c:	39ffffc4 	addi	r7,r7,-1
    c880:	00106280 	call	10628 <__ltdf2>
    c884:	103f280e 	bge	r2,zero,c528 <_strtod_r+0x9f4>
    c888:	003fba06 	br	c774 <_strtod_r+0xc40>
    c88c:	d8c01317 	ldw	r3,76(sp)
    c890:	183dce1e 	bne	r3,zero,bfcc <_strtod_r+0x498>
    c894:	d8800617 	ldw	r2,24(sp)
    c898:	d8c00717 	ldw	r3,28(sp)
    c89c:	003d4306 	br	bdac <_strtod_r+0x278>
    c8a0:	00c00044 	movi	r3,1
    c8a4:	a827883a 	mov	r19,r21
    c8a8:	d8c01015 	stw	r3,64(sp)
    c8ac:	b82b883a 	mov	r21,r23
    c8b0:	003ce506 	br	bc48 <_strtod_r+0x114>
    c8b4:	00804d04 	movi	r2,308
    c8b8:	1440ec16 	blt	r2,r17,cc6c <_strtod_r+0x1138>
    c8bc:	8825d13a 	srai	r18,r17,4
    c8c0:	05c00044 	movi	r23,1
    c8c4:	bc81ca0e 	bge	r23,r18,cff0 <_strtod_r+0x14bc>
    c8c8:	d8800617 	ldw	r2,24(sp)
    c8cc:	d8c00717 	ldw	r3,28(sp)
    c8d0:	05800074 	movhi	r22,1
    c8d4:	b5937404 	addi	r22,r22,19920
    c8d8:	b029883a 	mov	r20,r22
    c8dc:	0023883a 	mov	r17,zero
    c8e0:	9180004c 	andi	r6,r18,1
    c8e4:	30000526 	beq	r6,zero,c8fc <_strtod_r+0xdc8>
    c8e8:	a1800017 	ldw	r6,0(r20)
    c8ec:	a1c00117 	ldw	r7,4(r20)
    c8f0:	1009883a 	mov	r4,r2
    c8f4:	180b883a 	mov	r5,r3
    c8f8:	00100100 	call	10010 <__muldf3>
    c8fc:	9025d07a 	srai	r18,r18,1
    c900:	8c400044 	addi	r17,r17,1
    c904:	a5000204 	addi	r20,r20,8
    c908:	bcbff516 	blt	r23,r18,c8e0 <_strtod_r+0xdac>
    c90c:	d8800615 	stw	r2,24(sp)
    c910:	d8c00715 	stw	r3,28(sp)
    c914:	880490fa 	slli	r2,r17,3
    c918:	d9400717 	ldw	r5,28(sp)
    c91c:	d9000617 	ldw	r4,24(sp)
    c920:	b0a3883a 	add	r17,r22,r2
    c924:	89800017 	ldw	r6,0(r17)
    c928:	89c00117 	ldw	r7,4(r17)
    c92c:	00bf2c34 	movhi	r2,64688
    c930:	288b883a 	add	r5,r5,r2
    c934:	00100100 	call	10010 <__muldf3>
    c938:	d8800615 	stw	r2,24(sp)
    c93c:	011f2834 	movhi	r4,31904
    c940:	189ffc2c 	andhi	r2,r3,32752
    c944:	2080c936 	bltu	r4,r2,cc6c <_strtod_r+0x1138>
    c948:	011f2434 	movhi	r4,31888
    c94c:	2081652e 	bgeu	r4,r2,cee4 <_strtod_r+0x13b0>
    c950:	009ffc34 	movhi	r2,32752
    c954:	10bfffc4 	addi	r2,r2,-1
    c958:	d8800715 	stw	r2,28(sp)
    c95c:	00bfffc4 	movi	r2,-1
    c960:	d8800615 	stw	r2,24(sp)
    c964:	003e2f06 	br	c224 <_strtod_r+0x6f0>
    c968:	00c00044 	movi	r3,1
    c96c:	0027883a 	mov	r19,zero
    c970:	dd801415 	stw	r22,80(sp)
    c974:	0029883a 	mov	r20,zero
    c978:	d8c01015 	stw	r3,64(sp)
    c97c:	003cb206 	br	bc48 <_strtod_r+0x114>
    c980:	d8800717 	ldw	r2,28(sp)
    c984:	00c00434 	movhi	r3,16
    c988:	18ffffc4 	addi	r3,r3,-1
    c98c:	10c6703a 	and	r3,r2,r3
    c990:	1801471e 	bne	r3,zero,ceb0 <_strtod_r+0x137c>
    c994:	d8c00617 	ldw	r3,24(sp)
    c998:	18007e26 	beq	r3,zero,cb94 <_strtod_r+0x1060>
    c99c:	18c0004c 	andi	r3,r3,1
    c9a0:	1800a726 	beq	r3,zero,cc40 <_strtod_r+0x110c>
    c9a4:	ddc00617 	ldw	r23,24(sp)
    c9a8:	dd400717 	ldw	r21,28(sp)
    c9ac:	b809883a 	mov	r4,r23
    c9b0:	a80b883a 	mov	r5,r21
    c9b4:	000ad300 	call	ad30 <__ulp>
    c9b8:	b809883a 	mov	r4,r23
    c9bc:	a80b883a 	mov	r5,r21
    c9c0:	100d883a 	mov	r6,r2
    c9c4:	180f883a 	mov	r7,r3
    c9c8:	000ffb00 	call	ffb0 <__subdf3>
    c9cc:	1009883a 	mov	r4,r2
    c9d0:	180b883a 	mov	r5,r3
    c9d4:	000d883a 	mov	r6,zero
    c9d8:	000f883a 	mov	r7,zero
    c9dc:	d8800615 	stw	r2,24(sp)
    c9e0:	d8c00715 	stw	r3,28(sp)
    c9e4:	00104a80 	call	104a8 <__eqdf2>
    c9e8:	1000951e 	bne	r2,zero,cc40 <_strtod_r+0x110c>
    c9ec:	d8000615 	stw	zero,24(sp)
    c9f0:	d8000715 	stw	zero,28(sp)
    c9f4:	00800884 	movi	r2,34
    c9f8:	80800015 	stw	r2,0(r16)
    c9fc:	003f5d06 	br	c774 <_strtod_r+0xc40>
    ca00:	00800404 	movi	r2,16
    ca04:	153d4916 	blt	r2,r20,bf2c <_strtod_r+0x3f8>
    ca08:	8009883a 	mov	r4,r16
    ca0c:	01400284 	movi	r5,10
    ca10:	00020000 	call	2000 <__mulsi3>
    ca14:	1021883a 	mov	r16,r2
    ca18:	003d4406 	br	bf2c <_strtod_r+0x3f8>
    ca1c:	d9001217 	ldw	r4,72(sp)
    ca20:	d8800b04 	addi	r2,sp,44
    ca24:	04c00074 	movhi	r19,1
    ca28:	9cd61e04 	addi	r19,r19,22648
    ca2c:	d9000115 	stw	r4,4(sp)
    ca30:	d8800015 	stw	r2,0(sp)
    ca34:	8009883a 	mov	r4,r16
    ca38:	d9400c04 	addi	r5,sp,48
    ca3c:	980d883a 	mov	r6,r19
    ca40:	d9c00a04 	addi	r7,sp,40
    ca44:	000e2f40 	call	e2f4 <__gethex>
    ca48:	148001cc 	andi	r18,r2,7
    ca4c:	903dde26 	beq	r18,zero,c1c8 <_strtod_r+0x694>
    ca50:	00c00184 	movi	r3,6
    ca54:	90c0f226 	beq	r18,r3,ce20 <_strtod_r+0x12ec>
    ca58:	d9800b17 	ldw	r6,44(sp)
    ca5c:	30000826 	beq	r6,zero,ca80 <_strtod_r+0xf4c>
    ca60:	99400017 	ldw	r5,0(r19)
    ca64:	d9000204 	addi	r4,sp,8
    ca68:	d8801815 	stw	r2,96(sp)
    ca6c:	000b1340 	call	b134 <__copybits>
    ca70:	d9400b17 	ldw	r5,44(sp)
    ca74:	8009883a 	mov	r4,r16
    ca78:	000a28c0 	call	a28c <_Bfree>
    ca7c:	d8801817 	ldw	r2,96(sp)
    ca80:	00c00184 	movi	r3,6
    ca84:	d9000a17 	ldw	r4,40(sp)
    ca88:	1cbdca36 	bltu	r3,r18,c1b4 <_strtod_r+0x680>
    ca8c:	94a5883a 	add	r18,r18,r18
    ca90:	94a5883a 	add	r18,r18,r18
    ca94:	00c00074 	movhi	r3,1
    ca98:	18f2aa04 	addi	r3,r3,-13656
    ca9c:	90c7883a 	add	r3,r18,r3
    caa0:	18c00017 	ldw	r3,0(r3)
    caa4:	1800683a 	jmp	r3
    caa8:	0000cb1c 	xori	zero,zero,812
    caac:	0000cad8 	cmpnei	zero,zero,811
    cab0:	0000cac4 	movi	zero,811
    cab4:	0000c1a8 	cmpgeui	zero,zero,774
    cab8:	0000cb04 	movi	zero,812
    cabc:	0000cad8 	cmpnei	zero,zero,811
    cac0:	0000cb1c 	xori	zero,zero,812
    cac4:	d8c00217 	ldw	r3,8(sp)
    cac8:	d8c00615 	stw	r3,24(sp)
    cacc:	d8c00317 	ldw	r3,12(sp)
    cad0:	d8c00715 	stw	r3,28(sp)
    cad4:	003db706 	br	c1b4 <_strtod_r+0x680>
    cad8:	21010cc4 	addi	r4,r4,1075
    cadc:	d9400317 	ldw	r5,12(sp)
    cae0:	2008953a 	slli	r4,r4,20
    cae4:	00fffc34 	movhi	r3,65520
    cae8:	18ffffc4 	addi	r3,r3,-1
    caec:	28c6703a 	and	r3,r5,r3
    caf0:	20c6b03a 	or	r3,r4,r3
    caf4:	d9000217 	ldw	r4,8(sp)
    caf8:	d8c00715 	stw	r3,28(sp)
    cafc:	d9000615 	stw	r4,24(sp)
    cb00:	003dac06 	br	c1b4 <_strtod_r+0x680>
    cb04:	00e00034 	movhi	r3,32768
    cb08:	18ffffc4 	addi	r3,r3,-1
    cb0c:	d8c00715 	stw	r3,28(sp)
    cb10:	00ffffc4 	movi	r3,-1
    cb14:	d8c00615 	stw	r3,24(sp)
    cb18:	003da606 	br	c1b4 <_strtod_r+0x680>
    cb1c:	d8000715 	stw	zero,28(sp)
    cb20:	d8000615 	stw	zero,24(sp)
    cb24:	003da306 	br	c1b4 <_strtod_r+0x680>
    cb28:	d8c00f17 	ldw	r3,60(sp)
    cb2c:	1800441e 	bne	r3,zero,cc40 <_strtod_r+0x110c>
    cb30:	d8800617 	ldw	r2,24(sp)
    cb34:	1000421e 	bne	r2,zero,cc40 <_strtod_r+0x110c>
    cb38:	d8800717 	ldw	r2,28(sp)
    cb3c:	00c00434 	movhi	r3,16
    cb40:	18ffffc4 	addi	r3,r3,-1
    cb44:	10c6703a 	and	r3,r2,r3
    cb48:	18003d1e 	bne	r3,zero,cc40 <_strtod_r+0x110c>
    cb4c:	109ffc2c 	andhi	r2,r2,32752
    cb50:	00c1ac34 	movhi	r3,1712
    cb54:	18803a2e 	bgeu	r3,r2,cc40 <_strtod_r+0x110c>
    cb58:	98800517 	ldw	r2,20(r19)
    cb5c:	1000031e 	bne	r2,zero,cb6c <_strtod_r+0x1038>
    cb60:	98800417 	ldw	r2,16(r19)
    cb64:	00c00044 	movi	r3,1
    cb68:	1880350e 	bge	r3,r2,cc40 <_strtod_r+0x110c>
    cb6c:	980b883a 	mov	r5,r19
    cb70:	8009883a 	mov	r4,r16
    cb74:	01800044 	movi	r6,1
    cb78:	000a9d40 	call	a9d4 <__lshift>
    cb7c:	1009883a 	mov	r4,r2
    cb80:	880b883a 	mov	r5,r17
    cb84:	1027883a 	mov	r19,r2
    cb88:	000ab300 	call	ab30 <__mcmp>
    cb8c:	00802c0e 	bge	zero,r2,cc40 <_strtod_r+0x110c>
    cb90:	d8800717 	ldw	r2,28(sp)
    cb94:	109ffc2c 	andhi	r2,r2,32752
    cb98:	a000ed26 	beq	r20,zero,cf50 <_strtod_r+0x141c>
    cb9c:	00c1ac34 	movhi	r3,1712
    cba0:	1880eb36 	bltu	r3,r2,cf50 <_strtod_r+0x141c>
    cba4:	00c0dc34 	movhi	r3,880
    cba8:	18bf902e 	bgeu	r3,r2,c9ec <_strtod_r+0xeb8>
    cbac:	d9000617 	ldw	r4,24(sp)
    cbb0:	d9400717 	ldw	r5,28(sp)
    cbb4:	008e5434 	movhi	r2,14672
    cbb8:	000d883a 	mov	r6,zero
    cbbc:	100f883a 	mov	r7,r2
    cbc0:	d8800515 	stw	r2,20(sp)
    cbc4:	d8000415 	stw	zero,16(sp)
    cbc8:	00100100 	call	10010 <__muldf3>
    cbcc:	d8800615 	stw	r2,24(sp)
    cbd0:	d8c00715 	stw	r3,28(sp)
    cbd4:	183ee71e 	bne	r3,zero,c774 <_strtod_r+0xc40>
    cbd8:	103ee61e 	bne	r2,zero,c774 <_strtod_r+0xc40>
    cbdc:	00800884 	movi	r2,34
    cbe0:	80800015 	stw	r2,0(r16)
    cbe4:	003ee306 	br	c774 <_strtod_r+0xc40>
    cbe8:	d9000f17 	ldw	r4,60(sp)
    cbec:	203f6426 	beq	r4,zero,c980 <_strtod_r+0xe4c>
    cbf0:	d8c00717 	ldw	r3,28(sp)
    cbf4:	00800434 	movhi	r2,16
    cbf8:	10bfffc4 	addi	r2,r2,-1
    cbfc:	1888703a 	and	r4,r3,r2
    cc00:	2080bd26 	beq	r4,r2,cef8 <_strtod_r+0x13c4>
    cc04:	d8800617 	ldw	r2,24(sp)
    cc08:	1080004c 	andi	r2,r2,1
    cc0c:	10000c26 	beq	r2,zero,cc40 <_strtod_r+0x110c>
    cc10:	ddc00617 	ldw	r23,24(sp)
    cc14:	dd400717 	ldw	r21,28(sp)
    cc18:	b809883a 	mov	r4,r23
    cc1c:	a80b883a 	mov	r5,r21
    cc20:	000ad300 	call	ad30 <__ulp>
    cc24:	b809883a 	mov	r4,r23
    cc28:	a80b883a 	mov	r5,r21
    cc2c:	100d883a 	mov	r6,r2
    cc30:	180f883a 	mov	r7,r3
    cc34:	000ff5c0 	call	ff5c <__adddf3>
    cc38:	d8800615 	stw	r2,24(sp)
    cc3c:	d8c00715 	stw	r3,28(sp)
    cc40:	a03fda1e 	bne	r20,zero,cbac <_strtod_r+0x1078>
    cc44:	003ecb06 	br	c774 <_strtod_r+0xc40>
    cc48:	d8c00417 	ldw	r3,16(sp)
    cc4c:	00bfffc4 	movi	r2,-1
    cc50:	18be781e 	bne	r3,r2,c634 <_strtod_r+0xb00>
    cc54:	00800884 	movi	r2,34
    cc58:	80800015 	stw	r2,0(r16)
    cc5c:	009ffc34 	movhi	r2,32752
    cc60:	d8800715 	stw	r2,28(sp)
    cc64:	d8000615 	stw	zero,24(sp)
    cc68:	003ec206 	br	c774 <_strtod_r+0xc40>
    cc6c:	00800884 	movi	r2,34
    cc70:	80800015 	stw	r2,0(r16)
    cc74:	00dffc34 	movhi	r3,32752
    cc78:	0005883a 	mov	r2,zero
    cc7c:	003c4e06 	br	bdb8 <_strtod_r+0x284>
    cc80:	883d6826 	beq	r17,zero,c224 <_strtod_r+0x6f0>
    cc84:	0463c83a 	sub	r17,zero,r17
    cc88:	888003cc 	andi	r2,r17,15
    cc8c:	10000b26 	beq	r2,zero,ccbc <_strtod_r+0x1188>
    cc90:	100490fa 	slli	r2,r2,3
    cc94:	00c00074 	movhi	r3,1
    cc98:	18d37e04 	addi	r3,r3,19960
    cc9c:	d9000617 	ldw	r4,24(sp)
    cca0:	1885883a 	add	r2,r3,r2
    cca4:	d9400717 	ldw	r5,28(sp)
    cca8:	11800017 	ldw	r6,0(r2)
    ccac:	11c00117 	ldw	r7,4(r2)
    ccb0:	00102f40 	call	102f4 <__divdf3>
    ccb4:	d8800615 	stw	r2,24(sp)
    ccb8:	d8c00715 	stw	r3,28(sp)
    ccbc:	8823d13a 	srai	r17,r17,4
    ccc0:	883d5826 	beq	r17,zero,c224 <_strtod_r+0x6f0>
    ccc4:	008007c4 	movi	r2,31
    ccc8:	14402816 	blt	r2,r17,cd6c <_strtod_r+0x1238>
    cccc:	8880040c 	andi	r2,r17,16
    ccd0:	1000cf1e 	bne	r2,zero,d010 <_strtod_r+0x14dc>
    ccd4:	0029883a 	mov	r20,zero
    ccd8:	0440100e 	bge	zero,r17,cd1c <_strtod_r+0x11e8>
    ccdc:	d8800617 	ldw	r2,24(sp)
    cce0:	d8c00717 	ldw	r3,28(sp)
    cce4:	04800074 	movhi	r18,1
    cce8:	9493b704 	addi	r18,r18,20188
    ccec:	8980004c 	andi	r6,r17,1
    ccf0:	30000526 	beq	r6,zero,cd08 <_strtod_r+0x11d4>
    ccf4:	91800017 	ldw	r6,0(r18)
    ccf8:	91c00117 	ldw	r7,4(r18)
    ccfc:	1009883a 	mov	r4,r2
    cd00:	180b883a 	mov	r5,r3
    cd04:	00100100 	call	10010 <__muldf3>
    cd08:	8823d07a 	srai	r17,r17,1
    cd0c:	94800204 	addi	r18,r18,8
    cd10:	883ff61e 	bne	r17,zero,ccec <_strtod_r+0x11b8>
    cd14:	d8800615 	stw	r2,24(sp)
    cd18:	d8c00715 	stw	r3,28(sp)
    cd1c:	a0000d26 	beq	r20,zero,cd54 <_strtod_r+0x1220>
    cd20:	d8c00717 	ldw	r3,28(sp)
    cd24:	01001ac4 	movi	r4,107
    cd28:	189ffc2c 	andhi	r2,r3,32752
    cd2c:	1004d53a 	srli	r2,r2,20
    cd30:	2085c83a 	sub	r2,r4,r2
    cd34:	0080070e 	bge	zero,r2,cd54 <_strtod_r+0x1220>
    cd38:	010007c4 	movi	r4,31
    cd3c:	2080c30e 	bge	r4,r2,d04c <_strtod_r+0x1518>
    cd40:	d8000615 	stw	zero,24(sp)
    cd44:	01000d04 	movi	r4,52
    cd48:	2080c60e 	bge	r4,r2,d064 <_strtod_r+0x1530>
    cd4c:	0080dc34 	movhi	r2,880
    cd50:	d8800715 	stw	r2,28(sp)
    cd54:	d9000617 	ldw	r4,24(sp)
    cd58:	d9400717 	ldw	r5,28(sp)
    cd5c:	000d883a 	mov	r6,zero
    cd60:	000f883a 	mov	r7,zero
    cd64:	00104a80 	call	104a8 <__eqdf2>
    cd68:	103d2f1e 	bne	r2,zero,c228 <_strtod_r+0x6f4>
    cd6c:	00800884 	movi	r2,34
    cd70:	80800015 	stw	r2,0(r16)
    cd74:	0007883a 	mov	r3,zero
    cd78:	0005883a 	mov	r2,zero
    cd7c:	003c0e06 	br	bdb8 <_strtod_r+0x284>
    cd80:	0007883a 	mov	r3,zero
    cd84:	00aff834 	movhi	r2,49120
    cd88:	002b883a 	mov	r21,zero
    cd8c:	05cff834 	movhi	r23,16352
    cd90:	003e4a06 	br	c6bc <_strtod_r+0xb88>
    cd94:	011387c4 	movi	r4,19999
    cd98:	003cca06 	br	c0c4 <_strtod_r+0x590>
    cd9c:	b00b883a 	mov	r5,r22
    cda0:	d8000f15 	stw	zero,60(sp)
    cda4:	0039883a 	mov	fp,zero
    cda8:	002b883a 	mov	r21,zero
    cdac:	003c2d06 	br	be64 <_strtod_r+0x330>
    cdb0:	d8000f15 	stw	zero,60(sp)
    cdb4:	0039883a 	mov	fp,zero
    cdb8:	002b883a 	mov	r21,zero
    cdbc:	003b9d06 	br	bc34 <_strtod_r+0x100>
    cdc0:	d9401017 	ldw	r5,64(sp)
    cdc4:	00c00944 	movi	r3,37
    cdc8:	1d47c83a 	sub	r3,r3,r21
    cdcc:	197d0116 	blt	r3,r5,c1d4 <_strtod_r+0x6a0>
    cdd0:	1563c83a 	sub	r17,r2,r21
    cdd4:	880490fa 	slli	r2,r17,3
    cdd8:	04000074 	movhi	r16,1
    cddc:	84137e04 	addi	r16,r16,19960
    cde0:	d9000617 	ldw	r4,24(sp)
    cde4:	8085883a 	add	r2,r16,r2
    cde8:	d9400717 	ldw	r5,28(sp)
    cdec:	11800017 	ldw	r6,0(r2)
    cdf0:	11c00117 	ldw	r7,4(r2)
    cdf4:	00100100 	call	10010 <__muldf3>
    cdf8:	d9001017 	ldw	r4,64(sp)
    cdfc:	180b883a 	mov	r5,r3
    ce00:	244dc83a 	sub	r6,r4,r17
    ce04:	300c90fa 	slli	r6,r6,3
    ce08:	1009883a 	mov	r4,r2
    ce0c:	81a1883a 	add	r16,r16,r6
    ce10:	81800017 	ldw	r6,0(r16)
    ce14:	81c00117 	ldw	r7,4(r16)
    ce18:	00100100 	call	10010 <__muldf3>
    ce1c:	003be606 	br	bdb8 <_strtod_r+0x284>
    ce20:	d9400e17 	ldw	r5,56(sp)
    ce24:	d8001215 	stw	zero,72(sp)
    ce28:	d9400c15 	stw	r5,48(sp)
    ce2c:	003ce606 	br	c1c8 <_strtod_r+0x694>
    ce30:	d9401017 	ldw	r5,64(sp)
    ce34:	00bffa84 	movi	r2,-22
    ce38:	28bce616 	blt	r5,r2,c1d4 <_strtod_r+0x6a0>
    ce3c:	280490fa 	slli	r2,r5,3
    ce40:	00c00074 	movhi	r3,1
    ce44:	18d37e04 	addi	r3,r3,19960
    ce48:	d9000617 	ldw	r4,24(sp)
    ce4c:	1885c83a 	sub	r2,r3,r2
    ce50:	d9400717 	ldw	r5,28(sp)
    ce54:	11800017 	ldw	r6,0(r2)
    ce58:	11c00117 	ldw	r7,4(r2)
    ce5c:	00102f40 	call	102f4 <__divdf3>
    ce60:	003bd506 	br	bdb8 <_strtod_r+0x284>
    ce64:	00801a44 	movi	r2,105
    ce68:	38bb8726 	beq	r7,r2,bc88 <_strtod_r+0x154>
    ce6c:	00801b84 	movi	r2,110
    ce70:	38be881e 	bne	r7,r2,c894 <_strtod_r+0xd60>
    ce74:	d8c00c17 	ldw	r3,48(sp)
    ce78:	01000074 	movhi	r4,1
    ce7c:	2113b604 	addi	r4,r4,20184
    ce80:	01801004 	movi	r6,64
    ce84:	01c01684 	movi	r7,90
    ce88:	21400007 	ldb	r5,0(r4)
    ce8c:	21000044 	addi	r4,r4,1
    ce90:	28004e26 	beq	r5,zero,cfcc <_strtod_r+0x1498>
    ce94:	18c00044 	addi	r3,r3,1
    ce98:	18800007 	ldb	r2,0(r3)
    ce9c:	3080020e 	bge	r6,r2,cea8 <_strtod_r+0x1374>
    cea0:	38800116 	blt	r7,r2,cea8 <_strtod_r+0x1374>
    cea4:	10800804 	addi	r2,r2,32
    cea8:	117ff726 	beq	r2,r5,ce88 <_strtod_r+0x1354>
    ceac:	003e7906 	br	c894 <_strtod_r+0xd60>
    ceb0:	d8c00617 	ldw	r3,24(sp)
    ceb4:	003eb906 	br	c99c <_strtod_r+0xe68>
    ceb8:	00800404 	movi	r2,16
    cebc:	15c02216 	blt	r2,r23,cf48 <_strtod_r+0x1414>
    cec0:	d9000f17 	ldw	r4,60(sp)
    cec4:	01400284 	movi	r5,10
    cec8:	00020000 	call	2000 <__mulsi3>
    cecc:	15ad883a 	add	r22,r2,r22
    ced0:	dd800f15 	stw	r22,60(sp)
    ced4:	000d883a 	mov	r6,zero
    ced8:	003c2606 	br	bf74 <_strtod_r+0x440>
    cedc:	000d883a 	mov	r6,zero
    cee0:	003bf106 	br	bea8 <_strtod_r+0x374>
    cee4:	0080d434 	movhi	r2,848
    cee8:	1887883a 	add	r3,r3,r2
    ceec:	d8c00715 	stw	r3,28(sp)
    cef0:	0029883a 	mov	r20,zero
    cef4:	003ccc06 	br	c228 <_strtod_r+0x6f4>
    cef8:	d8800617 	ldw	r2,24(sp)
    cefc:	a0001026 	beq	r20,zero,cf40 <_strtod_r+0x140c>
    cf00:	191ffc2c 	andhi	r4,r3,32752
    cf04:	0141a834 	movhi	r5,1696
    cf08:	29000d36 	bltu	r5,r4,cf40 <_strtod_r+0x140c>
    cf0c:	2008d53a 	srli	r4,r4,20
    cf10:	01401ac4 	movi	r5,107
    cf14:	2909c83a 	sub	r4,r5,r4
    cf18:	017fffc4 	movi	r5,-1
    cf1c:	2908983a 	sll	r4,r5,r4
    cf20:	113f391e 	bne	r2,r4,cc08 <_strtod_r+0x10d4>
    cf24:	18dffc2c 	andhi	r3,r3,32752
    cf28:	00800434 	movhi	r2,16
    cf2c:	1885883a 	add	r2,r3,r2
    cf30:	d8800715 	stw	r2,28(sp)
    cf34:	d8000615 	stw	zero,24(sp)
    cf38:	a03f1c1e 	bne	r20,zero,cbac <_strtod_r+0x1078>
    cf3c:	003e0d06 	br	c774 <_strtod_r+0xc40>
    cf40:	013fffc4 	movi	r4,-1
    cf44:	003ff606 	br	cf20 <_strtod_r+0x13ec>
    cf48:	000d883a 	mov	r6,zero
    cf4c:	003c0906 	br	bf74 <_strtod_r+0x440>
    cf50:	00fffc34 	movhi	r3,65520
    cf54:	10c5883a 	add	r2,r2,r3
    cf58:	00c00434 	movhi	r3,16
    cf5c:	18ffffc4 	addi	r3,r3,-1
    cf60:	10c4b03a 	or	r2,r2,r3
    cf64:	d8800715 	stw	r2,28(sp)
    cf68:	00bfffc4 	movi	r2,-1
    cf6c:	d8800615 	stw	r2,24(sp)
    cf70:	a03f0e1e 	bne	r20,zero,cbac <_strtod_r+0x1078>
    cf74:	003dff06 	br	c774 <_strtod_r+0xc40>
    cf78:	1011883a 	mov	r8,r2
    cf7c:	d8800c15 	stw	r2,48(sp)
    cf80:	01000074 	movhi	r4,1
    cf84:	2113b404 	addi	r4,r4,20176
    cf88:	01801004 	movi	r6,64
    cf8c:	01c01684 	movi	r7,90
    cf90:	21400007 	ldb	r5,0(r4)
    cf94:	10800044 	addi	r2,r2,1
    cf98:	21000044 	addi	r4,r4,1
    cf9c:	28001a26 	beq	r5,zero,d008 <_strtod_r+0x14d4>
    cfa0:	10c00007 	ldb	r3,0(r2)
    cfa4:	30c0020e 	bge	r6,r3,cfb0 <_strtod_r+0x147c>
    cfa8:	38c00116 	blt	r7,r3,cfb0 <_strtod_r+0x147c>
    cfac:	18c00804 	addi	r3,r3,32
    cfb0:	197ff726 	beq	r3,r5,cf90 <_strtod_r+0x145c>
    cfb4:	40800044 	addi	r2,r8,1
    cfb8:	d8800c15 	stw	r2,48(sp)
    cfbc:	009ffc34 	movhi	r2,32752
    cfc0:	d8800715 	stw	r2,28(sp)
    cfc4:	d8000615 	stw	zero,24(sp)
    cfc8:	003c7f06 	br	c1c8 <_strtod_r+0x694>
    cfcc:	18800044 	addi	r2,r3,1
    cfd0:	d8800c15 	stw	r2,48(sp)
    cfd4:	18c00047 	ldb	r3,1(r3)
    cfd8:	00800a04 	movi	r2,40
    cfdc:	18800e26 	beq	r3,r2,d018 <_strtod_r+0x14e4>
    cfe0:	00bffe34 	movhi	r2,65528
    cfe4:	d8800715 	stw	r2,28(sp)
    cfe8:	d8000615 	stw	zero,24(sp)
    cfec:	003c7606 	br	c1c8 <_strtod_r+0x694>
    cff0:	0023883a 	mov	r17,zero
    cff4:	05800074 	movhi	r22,1
    cff8:	b5937404 	addi	r22,r22,19920
    cffc:	003e4506 	br	c914 <_strtod_r+0xde0>
    d000:	b805883a 	mov	r2,r23
    d004:	003bd306 	br	bf54 <_strtod_r+0x420>
    d008:	d8800c15 	stw	r2,48(sp)
    d00c:	003feb06 	br	cfbc <_strtod_r+0x1488>
    d010:	05001a84 	movi	r20,106
    d014:	003f3006 	br	ccd8 <_strtod_r+0x11a4>
    d018:	d9000c04 	addi	r4,sp,48
    d01c:	01400074 	movhi	r5,1
    d020:	29562304 	addi	r5,r5,22668
    d024:	d9800204 	addi	r6,sp,8
    d028:	000ea6c0 	call	ea6c <__hexnan>
    d02c:	00c00144 	movi	r3,5
    d030:	10ffeb1e 	bne	r2,r3,cfe0 <_strtod_r+0x14ac>
    d034:	d8800317 	ldw	r2,12(sp)
    d038:	109ffc34 	orhi	r2,r2,32752
    d03c:	d8800715 	stw	r2,28(sp)
    d040:	d8800217 	ldw	r2,8(sp)
    d044:	d8800615 	stw	r2,24(sp)
    d048:	003c5f06 	br	c1c8 <_strtod_r+0x694>
    d04c:	00ffffc4 	movi	r3,-1
    d050:	1884983a 	sll	r2,r3,r2
    d054:	d8c00617 	ldw	r3,24(sp)
    d058:	1884703a 	and	r2,r3,r2
    d05c:	d8800615 	stw	r2,24(sp)
    d060:	003f3c06 	br	cd54 <_strtod_r+0x1220>
    d064:	10bff804 	addi	r2,r2,-32
    d068:	013fffc4 	movi	r4,-1
    d06c:	2084983a 	sll	r2,r4,r2
    d070:	10c6703a 	and	r3,r2,r3
    d074:	d8c00715 	stw	r3,28(sp)
    d078:	003f3606 	br	cd54 <_strtod_r+0x1220>

0000d07c <strtod>:
    d07c:	00c00074 	movhi	r3,1
    d080:	18dab504 	addi	r3,r3,27348
    d084:	2005883a 	mov	r2,r4
    d088:	19000017 	ldw	r4,0(r3)
    d08c:	280d883a 	mov	r6,r5
    d090:	100b883a 	mov	r5,r2
    d094:	000bb341 	jmpi	bb34 <_strtod_r>

0000d098 <strtof>:
    d098:	defffb04 	addi	sp,sp,-20
    d09c:	dcc00315 	stw	r19,12(sp)
    d0a0:	04c00074 	movhi	r19,1
    d0a4:	9cdab504 	addi	r19,r19,27348
    d0a8:	2005883a 	mov	r2,r4
    d0ac:	99000017 	ldw	r4,0(r19)
    d0b0:	280d883a 	mov	r6,r5
    d0b4:	100b883a 	mov	r5,r2
    d0b8:	dfc00415 	stw	ra,16(sp)
    d0bc:	dc800215 	stw	r18,8(sp)
    d0c0:	dc400115 	stw	r17,4(sp)
    d0c4:	dc000015 	stw	r16,0(sp)
    d0c8:	000bb340 	call	bb34 <_strtod_r>
    d0cc:	1009883a 	mov	r4,r2
    d0d0:	180b883a 	mov	r5,r3
    d0d4:	1025883a 	mov	r18,r2
    d0d8:	1823883a 	mov	r17,r3
    d0dc:	00108880 	call	10888 <__truncdfsf2>
    d0e0:	1009883a 	mov	r4,r2
    d0e4:	000b883a 	mov	r5,zero
    d0e8:	1021883a 	mov	r16,r2
    d0ec:	000fb040 	call	fb04 <__eqsf2>
    d0f0:	1000111e 	bne	r2,zero,d138 <strtof+0xa0>
    d0f4:	9009883a 	mov	r4,r18
    d0f8:	880b883a 	mov	r5,r17
    d0fc:	000d883a 	mov	r6,zero
    d100:	000f883a 	mov	r7,zero
    d104:	00105040 	call	10504 <__nedf2>
    d108:	10000b26 	beq	r2,zero,d138 <strtof+0xa0>
    d10c:	98800017 	ldw	r2,0(r19)
    d110:	00c00884 	movi	r3,34
    d114:	10c00015 	stw	r3,0(r2)
    d118:	8005883a 	mov	r2,r16
    d11c:	dfc00417 	ldw	ra,16(sp)
    d120:	dcc00317 	ldw	r19,12(sp)
    d124:	dc800217 	ldw	r18,8(sp)
    d128:	dc400117 	ldw	r17,4(sp)
    d12c:	dc000017 	ldw	r16,0(sp)
    d130:	dec00504 	addi	sp,sp,20
    d134:	f800283a 	ret
    d138:	8009883a 	mov	r4,r16
    d13c:	015fe034 	movhi	r5,32640
    d140:	297fffc4 	addi	r5,r5,-1
    d144:	000fb580 	call	fb58 <__gtsf2>
    d148:	0080070e 	bge	zero,r2,d168 <strtof+0xd0>
    d14c:	9009883a 	mov	r4,r18
    d150:	880b883a 	mov	r5,r17
    d154:	01bfffc4 	movi	r6,-1
    d158:	01dffc34 	movhi	r7,32752
    d15c:	39ffffc4 	addi	r7,r7,-1
    d160:	00105600 	call	10560 <__gtdf2>
    d164:	00bfe90e 	bge	zero,r2,d10c <strtof+0x74>
    d168:	8009883a 	mov	r4,r16
    d16c:	017fe034 	movhi	r5,65408
    d170:	297fffc4 	addi	r5,r5,-1
    d174:	000fbb40 	call	fbb4 <__ltsf2>
    d178:	103fe70e 	bge	r2,zero,d118 <strtof+0x80>
    d17c:	9009883a 	mov	r4,r18
    d180:	880b883a 	mov	r5,r17
    d184:	01bfffc4 	movi	r6,-1
    d188:	01fffc34 	movhi	r7,65520
    d18c:	39ffffc4 	addi	r7,r7,-1
    d190:	00106280 	call	10628 <__ltdf2>
    d194:	103fdd0e 	bge	r2,zero,d10c <strtof+0x74>
    d198:	8005883a 	mov	r2,r16
    d19c:	dfc00417 	ldw	ra,16(sp)
    d1a0:	dcc00317 	ldw	r19,12(sp)
    d1a4:	dc800217 	ldw	r18,8(sp)
    d1a8:	dc400117 	ldw	r17,4(sp)
    d1ac:	dc000017 	ldw	r16,0(sp)
    d1b0:	dec00504 	addi	sp,sp,20
    d1b4:	f800283a 	ret

0000d1b8 <_strtol_r>:
    d1b8:	defff304 	addi	sp,sp,-52
    d1bc:	00800074 	movhi	r2,1
    d1c0:	109ab804 	addi	r2,r2,27360
    d1c4:	df000b15 	stw	fp,44(sp)
    d1c8:	17000017 	ldw	fp,0(r2)
    d1cc:	ddc00a15 	stw	r23,40(sp)
    d1d0:	dd000715 	stw	r20,28(sp)
    d1d4:	dcc00615 	stw	r19,24(sp)
    d1d8:	dc000315 	stw	r16,12(sp)
    d1dc:	dfc00c15 	stw	ra,48(sp)
    d1e0:	dd800915 	stw	r22,36(sp)
    d1e4:	dd400815 	stw	r21,32(sp)
    d1e8:	dc800515 	stw	r18,20(sp)
    d1ec:	dc400415 	stw	r17,16(sp)
    d1f0:	2827883a 	mov	r19,r5
    d1f4:	d9000215 	stw	r4,8(sp)
    d1f8:	3029883a 	mov	r20,r6
    d1fc:	382f883a 	mov	r23,r7
    d200:	2821883a 	mov	r16,r5
    d204:	84400007 	ldb	r17,0(r16)
    d208:	84000044 	addi	r16,r16,1
    d20c:	e445883a 	add	r2,fp,r17
    d210:	10800003 	ldbu	r2,0(r2)
    d214:	1080020c 	andi	r2,r2,8
    d218:	10803fcc 	andi	r2,r2,255
    d21c:	1080201c 	xori	r2,r2,128
    d220:	10bfe004 	addi	r2,r2,-128
    d224:	103ff71e 	bne	r2,zero,d204 <_strtol_r+0x4c>
    d228:	00800b44 	movi	r2,45
    d22c:	88806d26 	beq	r17,r2,d3e4 <_strtol_r+0x22c>
    d230:	00800ac4 	movi	r2,43
    d234:	88807026 	beq	r17,r2,d3f8 <_strtol_r+0x240>
    d238:	d8000015 	stw	zero,0(sp)
    d23c:	b800471e 	bne	r23,zero,d35c <_strtol_r+0x1a4>
    d240:	00800c04 	movi	r2,48
    d244:	88804926 	beq	r17,r2,d36c <_strtol_r+0x1b4>
    d248:	05c00284 	movi	r23,10
    d24c:	b825883a 	mov	r18,r23
    d250:	d9000017 	ldw	r4,0(sp)
    d254:	20006026 	beq	r4,zero,d3d8 <_strtol_r+0x220>
    d258:	05600034 	movhi	r21,32768
    d25c:	a809883a 	mov	r4,r21
    d260:	900b883a 	mov	r5,r18
    d264:	0010b2c0 	call	10b2c <__umodsi3>
    d268:	a809883a 	mov	r4,r21
    d26c:	900b883a 	mov	r5,r18
    d270:	d8800115 	stw	r2,4(sp)
    d274:	0010b240 	call	10b24 <__udivsi3>
    d278:	e447883a 	add	r3,fp,r17
    d27c:	18c00003 	ldbu	r3,0(r3)
    d280:	102b883a 	mov	r21,r2
    d284:	000d883a 	mov	r6,zero
    d288:	1940010c 	andi	r5,r3,4
    d28c:	29403fcc 	andi	r5,r5,255
    d290:	2940201c 	xori	r5,r5,128
    d294:	297fe004 	addi	r5,r5,-128
    d298:	0009883a 	mov	r4,zero
    d29c:	05bfffc4 	movi	r22,-1
    d2a0:	28001226 	beq	r5,zero,d2ec <_strtol_r+0x134>
    d2a4:	8c7ff404 	addi	r17,r17,-48
    d2a8:	8dc0170e 	bge	r17,r23,d308 <_strtol_r+0x150>
    d2ac:	35800626 	beq	r6,r22,d2c8 <_strtol_r+0x110>
    d2b0:	a9003a36 	bltu	r21,r4,d39c <_strtol_r+0x1e4>
    d2b4:	25403726 	beq	r4,r21,d394 <_strtol_r+0x1dc>
    d2b8:	900b883a 	mov	r5,r18
    d2bc:	00020000 	call	2000 <__mulsi3>
    d2c0:	8889883a 	add	r4,r17,r2
    d2c4:	01800044 	movi	r6,1
    d2c8:	84400007 	ldb	r17,0(r16)
    d2cc:	84000044 	addi	r16,r16,1
    d2d0:	e447883a 	add	r3,fp,r17
    d2d4:	18c00003 	ldbu	r3,0(r3)
    d2d8:	1940010c 	andi	r5,r3,4
    d2dc:	29403fcc 	andi	r5,r5,255
    d2e0:	2940201c 	xori	r5,r5,128
    d2e4:	297fe004 	addi	r5,r5,-128
    d2e8:	283fee1e 	bne	r5,zero,d2a4 <_strtol_r+0xec>
    d2ec:	188000cc 	andi	r2,r3,3
    d2f0:	10000526 	beq	r2,zero,d308 <_strtol_r+0x150>
    d2f4:	18c0004c 	andi	r3,r3,1
    d2f8:	18002a26 	beq	r3,zero,d3a4 <_strtol_r+0x1ec>
    d2fc:	00800dc4 	movi	r2,55
    d300:	88a3c83a 	sub	r17,r17,r2
    d304:	8dffe916 	blt	r17,r23,d2ac <_strtol_r+0xf4>
    d308:	00bfffc4 	movi	r2,-1
    d30c:	30802826 	beq	r6,r2,d3b0 <_strtol_r+0x1f8>
    d310:	d8800017 	ldw	r2,0(sp)
    d314:	10000126 	beq	r2,zero,d31c <_strtol_r+0x164>
    d318:	0109c83a 	sub	r4,zero,r4
    d31c:	2005883a 	mov	r2,r4
    d320:	a0000226 	beq	r20,zero,d32c <_strtol_r+0x174>
    d324:	30002a1e 	bne	r6,zero,d3d0 <_strtol_r+0x218>
    d328:	a4c00015 	stw	r19,0(r20)
    d32c:	dfc00c17 	ldw	ra,48(sp)
    d330:	df000b17 	ldw	fp,44(sp)
    d334:	ddc00a17 	ldw	r23,40(sp)
    d338:	dd800917 	ldw	r22,36(sp)
    d33c:	dd400817 	ldw	r21,32(sp)
    d340:	dd000717 	ldw	r20,28(sp)
    d344:	dcc00617 	ldw	r19,24(sp)
    d348:	dc800517 	ldw	r18,20(sp)
    d34c:	dc400417 	ldw	r17,16(sp)
    d350:	dc000317 	ldw	r16,12(sp)
    d354:	dec00d04 	addi	sp,sp,52
    d358:	f800283a 	ret
    d35c:	00800404 	movi	r2,16
    d360:	b8bfba1e 	bne	r23,r2,d24c <_strtol_r+0x94>
    d364:	00800c04 	movi	r2,48
    d368:	88bfb81e 	bne	r17,r2,d24c <_strtol_r+0x94>
    d36c:	80800007 	ldb	r2,0(r16)
    d370:	00c01e04 	movi	r3,120
    d374:	10c02626 	beq	r2,r3,d410 <_strtol_r+0x258>
    d378:	00c01604 	movi	r3,88
    d37c:	10c02426 	beq	r2,r3,d410 <_strtol_r+0x258>
    d380:	b800281e 	bne	r23,zero,d424 <_strtol_r+0x26c>
    d384:	04800204 	movi	r18,8
    d388:	04400c04 	movi	r17,48
    d38c:	902f883a 	mov	r23,r18
    d390:	003faf06 	br	d250 <_strtol_r+0x98>
    d394:	d8800117 	ldw	r2,4(sp)
    d398:	147fc70e 	bge	r2,r17,d2b8 <_strtol_r+0x100>
    d39c:	01bfffc4 	movi	r6,-1
    d3a0:	003fc906 	br	d2c8 <_strtol_r+0x110>
    d3a4:	008015c4 	movi	r2,87
    d3a8:	88a3c83a 	sub	r17,r17,r2
    d3ac:	003fd506 	br	d304 <_strtol_r+0x14c>
    d3b0:	d9000017 	ldw	r4,0(sp)
    d3b4:	2000141e 	bne	r4,zero,d408 <_strtol_r+0x250>
    d3b8:	00a00034 	movhi	r2,32768
    d3bc:	10bfffc4 	addi	r2,r2,-1
    d3c0:	d9000217 	ldw	r4,8(sp)
    d3c4:	00c00884 	movi	r3,34
    d3c8:	20c00015 	stw	r3,0(r4)
    d3cc:	a03fd726 	beq	r20,zero,d32c <_strtol_r+0x174>
    d3d0:	84ffffc4 	addi	r19,r16,-1
    d3d4:	003fd406 	br	d328 <_strtol_r+0x170>
    d3d8:	05600034 	movhi	r21,32768
    d3dc:	ad7fffc4 	addi	r21,r21,-1
    d3e0:	003f9e06 	br	d25c <_strtol_r+0xa4>
    d3e4:	00800044 	movi	r2,1
    d3e8:	84400007 	ldb	r17,0(r16)
    d3ec:	d8800015 	stw	r2,0(sp)
    d3f0:	80a1883a 	add	r16,r16,r2
    d3f4:	003f9106 	br	d23c <_strtol_r+0x84>
    d3f8:	84400007 	ldb	r17,0(r16)
    d3fc:	d8000015 	stw	zero,0(sp)
    d400:	84000044 	addi	r16,r16,1
    d404:	003f8d06 	br	d23c <_strtol_r+0x84>
    d408:	00a00034 	movhi	r2,32768
    d40c:	003fec06 	br	d3c0 <_strtol_r+0x208>
    d410:	04800404 	movi	r18,16
    d414:	84400047 	ldb	r17,1(r16)
    d418:	902f883a 	mov	r23,r18
    d41c:	84000084 	addi	r16,r16,2
    d420:	003f8b06 	br	d250 <_strtol_r+0x98>
    d424:	b825883a 	mov	r18,r23
    d428:	04400c04 	movi	r17,48
    d42c:	003f8806 	br	d250 <_strtol_r+0x98>

0000d430 <strtol>:
    d430:	00800074 	movhi	r2,1
    d434:	109ab504 	addi	r2,r2,27348
    d438:	2007883a 	mov	r3,r4
    d43c:	11000017 	ldw	r4,0(r2)
    d440:	2805883a 	mov	r2,r5
    d444:	300f883a 	mov	r7,r6
    d448:	180b883a 	mov	r5,r3
    d44c:	100d883a 	mov	r6,r2
    d450:	000d1b81 	jmpi	d1b8 <_strtol_r>

0000d454 <_strtoll_r>:
    d454:	defff004 	addi	sp,sp,-64
    d458:	00800074 	movhi	r2,1
    d45c:	109ab804 	addi	r2,r2,27360
    d460:	ddc00d15 	stw	r23,52(sp)
    d464:	15c00017 	ldw	r23,0(r2)
    d468:	df000e15 	stw	fp,56(sp)
    d46c:	dc000615 	stw	r16,24(sp)
    d470:	dfc00f15 	stw	ra,60(sp)
    d474:	dd800c15 	stw	r22,48(sp)
    d478:	dd400b15 	stw	r21,44(sp)
    d47c:	dd000a15 	stw	r20,40(sp)
    d480:	dcc00915 	stw	r19,36(sp)
    d484:	dc800815 	stw	r18,32(sp)
    d488:	dc400715 	stw	r17,28(sp)
    d48c:	d9400015 	stw	r5,0(sp)
    d490:	d9000415 	stw	r4,16(sp)
    d494:	d9800115 	stw	r6,4(sp)
    d498:	3839883a 	mov	fp,r7
    d49c:	2821883a 	mov	r16,r5
    d4a0:	82000007 	ldb	r8,0(r16)
    d4a4:	84000044 	addi	r16,r16,1
    d4a8:	ba05883a 	add	r2,r23,r8
    d4ac:	10800003 	ldbu	r2,0(r2)
    d4b0:	1080020c 	andi	r2,r2,8
    d4b4:	10803fcc 	andi	r2,r2,255
    d4b8:	1080201c 	xori	r2,r2,128
    d4bc:	10bfe004 	addi	r2,r2,-128
    d4c0:	103ff71e 	bne	r2,zero,d4a0 <_strtoll_r+0x4c>
    d4c4:	00800b44 	movi	r2,45
    d4c8:	40807a26 	beq	r8,r2,d6b4 <_strtoll_r+0x260>
    d4cc:	00800ac4 	movi	r2,43
    d4d0:	40808826 	beq	r8,r2,d6f4 <_strtoll_r+0x2a0>
    d4d4:	d8000215 	stw	zero,8(sp)
    d4d8:	e000061e 	bne	fp,zero,d4f4 <_strtoll_r+0xa0>
    d4dc:	00800c04 	movi	r2,48
    d4e0:	40808b26 	beq	r8,r2,d710 <_strtoll_r+0x2bc>
    d4e4:	04800284 	movi	r18,10
    d4e8:	0027883a 	mov	r19,zero
    d4ec:	9039883a 	mov	fp,r18
    d4f0:	00000406 	br	d504 <_strtoll_r+0xb0>
    d4f4:	00800404 	movi	r2,16
    d4f8:	e0809926 	beq	fp,r2,d760 <_strtoll_r+0x30c>
    d4fc:	e027d7fa 	srai	r19,fp,31
    d500:	e025883a 	mov	r18,fp
    d504:	d9000217 	ldw	r4,8(sp)
    d508:	20006226 	beq	r4,zero,d694 <_strtoll_r+0x240>
    d50c:	002b883a 	mov	r21,zero
    d510:	04600034 	movhi	r17,32768
    d514:	a809883a 	mov	r4,r21
    d518:	880b883a 	mov	r5,r17
    d51c:	900d883a 	mov	r6,r18
    d520:	980f883a 	mov	r7,r19
    d524:	da000515 	stw	r8,20(sp)
    d528:	000f4dc0 	call	f4dc <__umoddi3>
    d52c:	a809883a 	mov	r4,r21
    d530:	880b883a 	mov	r5,r17
    d534:	900d883a 	mov	r6,r18
    d538:	980f883a 	mov	r7,r19
    d53c:	d8800315 	stw	r2,12(sp)
    d540:	000ee8c0 	call	ee8c <__udivdi3>
    d544:	da000517 	ldw	r8,20(sp)
    d548:	182b883a 	mov	r21,r3
    d54c:	1023883a 	mov	r17,r2
    d550:	ba0d883a 	add	r6,r23,r8
    d554:	31800003 	ldbu	r6,0(r6)
    d558:	0007883a 	mov	r3,zero
    d55c:	0009883a 	mov	r4,zero
    d560:	3240010c 	andi	r9,r6,4
    d564:	4a403fcc 	andi	r9,r9,255
    d568:	4a40201c 	xori	r9,r9,128
    d56c:	4a7fe004 	addi	r9,r9,-128
    d570:	000b883a 	mov	r5,zero
    d574:	05bfffc4 	movi	r22,-1
    d578:	48001026 	beq	r9,zero,d5bc <_strtoll_r+0x168>
    d57c:	453ff404 	addi	r20,r8,-48
    d580:	a700150e 	bge	r20,fp,d5d8 <_strtoll_r+0x184>
    d584:	1d800426 	beq	r3,r22,d598 <_strtoll_r+0x144>
    d588:	a9400236 	bltu	r21,r5,d594 <_strtoll_r+0x140>
    d58c:	2d402e1e 	bne	r5,r21,d648 <_strtoll_r+0x1f4>
    d590:	89002d2e 	bgeu	r17,r4,d648 <_strtoll_r+0x1f4>
    d594:	00ffffc4 	movi	r3,-1
    d598:	82000007 	ldb	r8,0(r16)
    d59c:	84000044 	addi	r16,r16,1
    d5a0:	ba0d883a 	add	r6,r23,r8
    d5a4:	31800003 	ldbu	r6,0(r6)
    d5a8:	3240010c 	andi	r9,r6,4
    d5ac:	4a403fcc 	andi	r9,r9,255
    d5b0:	4a40201c 	xori	r9,r9,128
    d5b4:	4a7fe004 	addi	r9,r9,-128
    d5b8:	483ff01e 	bne	r9,zero,d57c <_strtoll_r+0x128>
    d5bc:	308000cc 	andi	r2,r6,3
    d5c0:	10000526 	beq	r2,zero,d5d8 <_strtoll_r+0x184>
    d5c4:	3180004c 	andi	r6,r6,1
    d5c8:	30002b26 	beq	r6,zero,d678 <_strtoll_r+0x224>
    d5cc:	00800dc4 	movi	r2,55
    d5d0:	40a9c83a 	sub	r20,r8,r2
    d5d4:	a73feb16 	blt	r20,fp,d584 <_strtoll_r+0x130>
    d5d8:	00bfffc4 	movi	r2,-1
    d5dc:	18803a26 	beq	r3,r2,d6c8 <_strtoll_r+0x274>
    d5e0:	d8800217 	ldw	r2,8(sp)
    d5e4:	10000426 	beq	r2,zero,d5f8 <_strtoll_r+0x1a4>
    d5e8:	0109c83a 	sub	r4,zero,r4
    d5ec:	2004c03a 	cmpne	r2,r4,zero
    d5f0:	014bc83a 	sub	r5,zero,r5
    d5f4:	288bc83a 	sub	r5,r5,r2
    d5f8:	d8800117 	ldw	r2,4(sp)
    d5fc:	10004f26 	beq	r2,zero,d73c <_strtoll_r+0x2e8>
    d600:	2005883a 	mov	r2,r4
    d604:	1800271e 	bne	r3,zero,d6a4 <_strtoll_r+0x250>
    d608:	2807883a 	mov	r3,r5
    d60c:	d9400017 	ldw	r5,0(sp)
    d610:	d9000117 	ldw	r4,4(sp)
    d614:	21400015 	stw	r5,0(r4)
    d618:	dfc00f17 	ldw	ra,60(sp)
    d61c:	df000e17 	ldw	fp,56(sp)
    d620:	ddc00d17 	ldw	r23,52(sp)
    d624:	dd800c17 	ldw	r22,48(sp)
    d628:	dd400b17 	ldw	r21,44(sp)
    d62c:	dd000a17 	ldw	r20,40(sp)
    d630:	dcc00917 	ldw	r19,36(sp)
    d634:	dc800817 	ldw	r18,32(sp)
    d638:	dc400717 	ldw	r17,28(sp)
    d63c:	dc000617 	ldw	r16,24(sp)
    d640:	dec01004 	addi	sp,sp,64
    d644:	f800283a 	ret
    d648:	24400e26 	beq	r4,r17,d684 <_strtoll_r+0x230>
    d64c:	900d883a 	mov	r6,r18
    d650:	980f883a 	mov	r7,r19
    d654:	000ecf80 	call	ecf8 <__muldi3>
    d658:	a00dd7fa 	srai	r6,r20,31
    d65c:	a085883a 	add	r2,r20,r2
    d660:	1511803a 	cmpltu	r8,r2,r20
    d664:	30c7883a 	add	r3,r6,r3
    d668:	40cb883a 	add	r5,r8,r3
    d66c:	1009883a 	mov	r4,r2
    d670:	00c00044 	movi	r3,1
    d674:	003fc806 	br	d598 <_strtoll_r+0x144>
    d678:	008015c4 	movi	r2,87
    d67c:	40a9c83a 	sub	r20,r8,r2
    d680:	003fd406 	br	d5d4 <_strtoll_r+0x180>
    d684:	2d7ff11e 	bne	r5,r21,d64c <_strtoll_r+0x1f8>
    d688:	d8800317 	ldw	r2,12(sp)
    d68c:	153fc116 	blt	r2,r20,d594 <_strtoll_r+0x140>
    d690:	003fee06 	br	d64c <_strtoll_r+0x1f8>
    d694:	057fffc4 	movi	r21,-1
    d698:	04600034 	movhi	r17,32768
    d69c:	8c7fffc4 	addi	r17,r17,-1
    d6a0:	003f9c06 	br	d514 <_strtoll_r+0xc0>
    d6a4:	2807883a 	mov	r3,r5
    d6a8:	843fffc4 	addi	r16,r16,-1
    d6ac:	dc000015 	stw	r16,0(sp)
    d6b0:	003fd606 	br	d60c <_strtoll_r+0x1b8>
    d6b4:	00800044 	movi	r2,1
    d6b8:	82000007 	ldb	r8,0(r16)
    d6bc:	d8800215 	stw	r2,8(sp)
    d6c0:	80a1883a 	add	r16,r16,r2
    d6c4:	003f8406 	br	d4d8 <_strtoll_r+0x84>
    d6c8:	d9000217 	ldw	r4,8(sp)
    d6cc:	20000d1e 	bne	r4,zero,d704 <_strtoll_r+0x2b0>
    d6d0:	1805883a 	mov	r2,r3
    d6d4:	00e00034 	movhi	r3,32768
    d6d8:	18ffffc4 	addi	r3,r3,-1
    d6dc:	d9400417 	ldw	r5,16(sp)
    d6e0:	01000884 	movi	r4,34
    d6e4:	29000015 	stw	r4,0(r5)
    d6e8:	d9000117 	ldw	r4,4(sp)
    d6ec:	203fee1e 	bne	r4,zero,d6a8 <_strtoll_r+0x254>
    d6f0:	003fc906 	br	d618 <_strtoll_r+0x1c4>
    d6f4:	82000007 	ldb	r8,0(r16)
    d6f8:	d8000215 	stw	zero,8(sp)
    d6fc:	84000044 	addi	r16,r16,1
    d700:	003f7506 	br	d4d8 <_strtoll_r+0x84>
    d704:	0005883a 	mov	r2,zero
    d708:	00e00034 	movhi	r3,32768
    d70c:	003ff306 	br	d6dc <_strtoll_r+0x288>
    d710:	80800007 	ldb	r2,0(r16)
    d714:	00c01e04 	movi	r3,120
    d718:	10c00b26 	beq	r2,r3,d748 <_strtoll_r+0x2f4>
    d71c:	00c01604 	movi	r3,88
    d720:	10c00926 	beq	r2,r3,d748 <_strtoll_r+0x2f4>
    d724:	e000131e 	bne	fp,zero,d774 <_strtoll_r+0x320>
    d728:	04800204 	movi	r18,8
    d72c:	0027883a 	mov	r19,zero
    d730:	02000c04 	movi	r8,48
    d734:	9039883a 	mov	fp,r18
    d738:	003f7206 	br	d504 <_strtoll_r+0xb0>
    d73c:	2005883a 	mov	r2,r4
    d740:	2807883a 	mov	r3,r5
    d744:	003fb406 	br	d618 <_strtoll_r+0x1c4>
    d748:	04800404 	movi	r18,16
    d74c:	82000047 	ldb	r8,1(r16)
    d750:	0027883a 	mov	r19,zero
    d754:	84000084 	addi	r16,r16,2
    d758:	9039883a 	mov	fp,r18
    d75c:	003f6906 	br	d504 <_strtoll_r+0xb0>
    d760:	00800c04 	movi	r2,48
    d764:	40bfea26 	beq	r8,r2,d710 <_strtoll_r+0x2bc>
    d768:	e025883a 	mov	r18,fp
    d76c:	0027883a 	mov	r19,zero
    d770:	003f6406 	br	d504 <_strtoll_r+0xb0>
    d774:	e025883a 	mov	r18,fp
    d778:	e027d7fa 	srai	r19,fp,31
    d77c:	02000c04 	movi	r8,48
    d780:	003f6006 	br	d504 <_strtoll_r+0xb0>

0000d784 <_strtoul_r>:
    d784:	defff304 	addi	sp,sp,-52
    d788:	00800074 	movhi	r2,1
    d78c:	109ab804 	addi	r2,r2,27360
    d790:	df000b15 	stw	fp,44(sp)
    d794:	17000017 	ldw	fp,0(r2)
    d798:	ddc00a15 	stw	r23,40(sp)
    d79c:	dd000715 	stw	r20,28(sp)
    d7a0:	dcc00615 	stw	r19,24(sp)
    d7a4:	dc000315 	stw	r16,12(sp)
    d7a8:	dfc00c15 	stw	ra,48(sp)
    d7ac:	dd800915 	stw	r22,36(sp)
    d7b0:	dd400815 	stw	r21,32(sp)
    d7b4:	dc800515 	stw	r18,20(sp)
    d7b8:	dc400415 	stw	r17,16(sp)
    d7bc:	2827883a 	mov	r19,r5
    d7c0:	d9000215 	stw	r4,8(sp)
    d7c4:	3029883a 	mov	r20,r6
    d7c8:	382f883a 	mov	r23,r7
    d7cc:	2821883a 	mov	r16,r5
    d7d0:	84400007 	ldb	r17,0(r16)
    d7d4:	84000044 	addi	r16,r16,1
    d7d8:	e445883a 	add	r2,fp,r17
    d7dc:	10800003 	ldbu	r2,0(r2)
    d7e0:	1080020c 	andi	r2,r2,8
    d7e4:	10803fcc 	andi	r2,r2,255
    d7e8:	1080201c 	xori	r2,r2,128
    d7ec:	10bfe004 	addi	r2,r2,-128
    d7f0:	103ff71e 	bne	r2,zero,d7d0 <_strtoul_r+0x4c>
    d7f4:	00800b44 	movi	r2,45
    d7f8:	88805e26 	beq	r17,r2,d974 <_strtoul_r+0x1f0>
    d7fc:	00800ac4 	movi	r2,43
    d800:	88806126 	beq	r17,r2,d988 <_strtoul_r+0x204>
    d804:	d8000115 	stw	zero,4(sp)
    d808:	b800091e 	bne	r23,zero,d830 <_strtoul_r+0xac>
    d80c:	00800c04 	movi	r2,48
    d810:	88806326 	beq	r17,r2,d9a0 <_strtoul_r+0x21c>
    d814:	05c00284 	movi	r23,10
    d818:	00800144 	movi	r2,5
    d81c:	d8800015 	stw	r2,0(sp)
    d820:	058666b4 	movhi	r22,6554
    d824:	b5a66644 	addi	r22,r22,-26215
    d828:	b825883a 	mov	r18,r23
    d82c:	00000b06 	br	d85c <_strtoul_r+0xd8>
    d830:	00800404 	movi	r2,16
    d834:	b8805826 	beq	r23,r2,d998 <_strtoul_r+0x214>
    d838:	013fffc4 	movi	r4,-1
    d83c:	b80b883a 	mov	r5,r23
    d840:	0010b240 	call	10b24 <__udivsi3>
    d844:	013fffc4 	movi	r4,-1
    d848:	b80b883a 	mov	r5,r23
    d84c:	102d883a 	mov	r22,r2
    d850:	0010b2c0 	call	10b2c <__umodsi3>
    d854:	d8800015 	stw	r2,0(sp)
    d858:	b825883a 	mov	r18,r23
    d85c:	e447883a 	add	r3,fp,r17
    d860:	18c00003 	ldbu	r3,0(r3)
    d864:	0011883a 	mov	r8,zero
    d868:	0009883a 	mov	r4,zero
    d86c:	1980010c 	andi	r6,r3,4
    d870:	31803fcc 	andi	r6,r6,255
    d874:	3180201c 	xori	r6,r6,128
    d878:	31bfe004 	addi	r6,r6,-128
    d87c:	057fffc4 	movi	r21,-1
    d880:	30001226 	beq	r6,zero,d8cc <_strtoul_r+0x148>
    d884:	8c7ff404 	addi	r17,r17,-48
    d888:	8dc0170e 	bge	r17,r23,d8e8 <_strtoul_r+0x164>
    d88c:	45400626 	beq	r8,r21,d8a8 <_strtoul_r+0x124>
    d890:	b1002c36 	bltu	r22,r4,d944 <_strtoul_r+0x1c0>
    d894:	25802926 	beq	r4,r22,d93c <_strtoul_r+0x1b8>
    d898:	900b883a 	mov	r5,r18
    d89c:	00020000 	call	2000 <__mulsi3>
    d8a0:	8889883a 	add	r4,r17,r2
    d8a4:	02000044 	movi	r8,1
    d8a8:	84400007 	ldb	r17,0(r16)
    d8ac:	84000044 	addi	r16,r16,1
    d8b0:	e447883a 	add	r3,fp,r17
    d8b4:	18c00003 	ldbu	r3,0(r3)
    d8b8:	1980010c 	andi	r6,r3,4
    d8bc:	31803fcc 	andi	r6,r6,255
    d8c0:	3180201c 	xori	r6,r6,128
    d8c4:	31bfe004 	addi	r6,r6,-128
    d8c8:	303fee1e 	bne	r6,zero,d884 <_strtoul_r+0x100>
    d8cc:	188000cc 	andi	r2,r3,3
    d8d0:	10000526 	beq	r2,zero,d8e8 <_strtoul_r+0x164>
    d8d4:	18c0004c 	andi	r3,r3,1
    d8d8:	18001c26 	beq	r3,zero,d94c <_strtoul_r+0x1c8>
    d8dc:	00800dc4 	movi	r2,55
    d8e0:	88a3c83a 	sub	r17,r17,r2
    d8e4:	8dffe916 	blt	r17,r23,d88c <_strtoul_r+0x108>
    d8e8:	00bfffc4 	movi	r2,-1
    d8ec:	40801a26 	beq	r8,r2,d958 <_strtoul_r+0x1d4>
    d8f0:	d8c00117 	ldw	r3,4(sp)
    d8f4:	18000126 	beq	r3,zero,d8fc <_strtoul_r+0x178>
    d8f8:	0109c83a 	sub	r4,zero,r4
    d8fc:	a0000226 	beq	r20,zero,d908 <_strtoul_r+0x184>
    d900:	40001a1e 	bne	r8,zero,d96c <_strtoul_r+0x1e8>
    d904:	a4c00015 	stw	r19,0(r20)
    d908:	2005883a 	mov	r2,r4
    d90c:	dfc00c17 	ldw	ra,48(sp)
    d910:	df000b17 	ldw	fp,44(sp)
    d914:	ddc00a17 	ldw	r23,40(sp)
    d918:	dd800917 	ldw	r22,36(sp)
    d91c:	dd400817 	ldw	r21,32(sp)
    d920:	dd000717 	ldw	r20,28(sp)
    d924:	dcc00617 	ldw	r19,24(sp)
    d928:	dc800517 	ldw	r18,20(sp)
    d92c:	dc400417 	ldw	r17,16(sp)
    d930:	dc000317 	ldw	r16,12(sp)
    d934:	dec00d04 	addi	sp,sp,52
    d938:	f800283a 	ret
    d93c:	d8800017 	ldw	r2,0(sp)
    d940:	147fd50e 	bge	r2,r17,d898 <_strtoul_r+0x114>
    d944:	023fffc4 	movi	r8,-1
    d948:	003fd706 	br	d8a8 <_strtoul_r+0x124>
    d94c:	008015c4 	movi	r2,87
    d950:	88a3c83a 	sub	r17,r17,r2
    d954:	003fe306 	br	d8e4 <_strtoul_r+0x160>
    d958:	d8c00217 	ldw	r3,8(sp)
    d95c:	00800884 	movi	r2,34
    d960:	4009883a 	mov	r4,r8
    d964:	18800015 	stw	r2,0(r3)
    d968:	a03fe726 	beq	r20,zero,d908 <_strtoul_r+0x184>
    d96c:	84ffffc4 	addi	r19,r16,-1
    d970:	003fe406 	br	d904 <_strtoul_r+0x180>
    d974:	00c00044 	movi	r3,1
    d978:	84400007 	ldb	r17,0(r16)
    d97c:	d8c00115 	stw	r3,4(sp)
    d980:	80e1883a 	add	r16,r16,r3
    d984:	003fa006 	br	d808 <_strtoul_r+0x84>
    d988:	84400007 	ldb	r17,0(r16)
    d98c:	d8000115 	stw	zero,4(sp)
    d990:	84000044 	addi	r16,r16,1
    d994:	003f9c06 	br	d808 <_strtoul_r+0x84>
    d998:	00800c04 	movi	r2,48
    d99c:	88bfa61e 	bne	r17,r2,d838 <_strtoul_r+0xb4>
    d9a0:	80800007 	ldb	r2,0(r16)
    d9a4:	00c01e04 	movi	r3,120
    d9a8:	10c00b26 	beq	r2,r3,d9d8 <_strtoul_r+0x254>
    d9ac:	00c01604 	movi	r3,88
    d9b0:	10c00926 	beq	r2,r3,d9d8 <_strtoul_r+0x254>
    d9b4:	b800111e 	bne	r23,zero,d9fc <_strtoul_r+0x278>
    d9b8:	04800204 	movi	r18,8
    d9bc:	008001c4 	movi	r2,7
    d9c0:	d8800015 	stw	r2,0(sp)
    d9c4:	05880034 	movhi	r22,8192
    d9c8:	b5bfffc4 	addi	r22,r22,-1
    d9cc:	04400c04 	movi	r17,48
    d9d0:	902f883a 	mov	r23,r18
    d9d4:	003fa106 	br	d85c <_strtoul_r+0xd8>
    d9d8:	04800404 	movi	r18,16
    d9dc:	008003c4 	movi	r2,15
    d9e0:	84400047 	ldb	r17,1(r16)
    d9e4:	d8800015 	stw	r2,0(sp)
    d9e8:	84000084 	addi	r16,r16,2
    d9ec:	05840034 	movhi	r22,4096
    d9f0:	b5bfffc4 	addi	r22,r22,-1
    d9f4:	902f883a 	mov	r23,r18
    d9f8:	003f9806 	br	d85c <_strtoul_r+0xd8>
    d9fc:	013fffc4 	movi	r4,-1
    da00:	b80b883a 	mov	r5,r23
    da04:	0010b240 	call	10b24 <__udivsi3>
    da08:	013fffc4 	movi	r4,-1
    da0c:	b80b883a 	mov	r5,r23
    da10:	102d883a 	mov	r22,r2
    da14:	0010b2c0 	call	10b2c <__umodsi3>
    da18:	d8800015 	stw	r2,0(sp)
    da1c:	b825883a 	mov	r18,r23
    da20:	04400c04 	movi	r17,48
    da24:	003f8d06 	br	d85c <_strtoul_r+0xd8>

0000da28 <strtoul>:
    da28:	00800074 	movhi	r2,1
    da2c:	109ab504 	addi	r2,r2,27348
    da30:	2007883a 	mov	r3,r4
    da34:	11000017 	ldw	r4,0(r2)
    da38:	2805883a 	mov	r2,r5
    da3c:	300f883a 	mov	r7,r6
    da40:	180b883a 	mov	r5,r3
    da44:	100d883a 	mov	r6,r2
    da48:	000d7841 	jmpi	d784 <_strtoul_r>

0000da4c <_strtoull_r>:
    da4c:	defff004 	addi	sp,sp,-64
    da50:	00800074 	movhi	r2,1
    da54:	109ab804 	addi	r2,r2,27360
    da58:	dd800c15 	stw	r22,48(sp)
    da5c:	15800017 	ldw	r22,0(r2)
    da60:	df000e15 	stw	fp,56(sp)
    da64:	dc000615 	stw	r16,24(sp)
    da68:	dfc00f15 	stw	ra,60(sp)
    da6c:	ddc00d15 	stw	r23,52(sp)
    da70:	dd400b15 	stw	r21,44(sp)
    da74:	dd000a15 	stw	r20,40(sp)
    da78:	dcc00915 	stw	r19,36(sp)
    da7c:	dc800815 	stw	r18,32(sp)
    da80:	dc400715 	stw	r17,28(sp)
    da84:	d9400015 	stw	r5,0(sp)
    da88:	d9000415 	stw	r4,16(sp)
    da8c:	d9800115 	stw	r6,4(sp)
    da90:	3839883a 	mov	fp,r7
    da94:	2821883a 	mov	r16,r5
    da98:	82000007 	ldb	r8,0(r16)
    da9c:	84000044 	addi	r16,r16,1
    daa0:	b205883a 	add	r2,r22,r8
    daa4:	10800003 	ldbu	r2,0(r2)
    daa8:	1080020c 	andi	r2,r2,8
    daac:	10803fcc 	andi	r2,r2,255
    dab0:	1080201c 	xori	r2,r2,128
    dab4:	10bfe004 	addi	r2,r2,-128
    dab8:	103ff71e 	bne	r2,zero,da98 <_strtoull_r+0x4c>
    dabc:	00800b44 	movi	r2,45
    dac0:	40807e26 	beq	r8,r2,dcbc <_strtoull_r+0x270>
    dac4:	00800ac4 	movi	r2,43
    dac8:	40808126 	beq	r8,r2,dcd0 <_strtoull_r+0x284>
    dacc:	d8000315 	stw	zero,12(sp)
    dad0:	e0000c1e 	bne	fp,zero,db04 <_strtoull_r+0xb8>
    dad4:	00800c04 	movi	r2,48
    dad8:	40808126 	beq	r8,r2,dce0 <_strtoull_r+0x294>
    dadc:	04c00284 	movi	r19,10
    dae0:	00800144 	movi	r2,5
    dae4:	d8800215 	stw	r2,8(sp)
    dae8:	046666b4 	movhi	r17,39322
    daec:	8c666644 	addi	r17,r17,-26215
    daf0:	05c666b4 	movhi	r23,6554
    daf4:	bde66644 	addi	r23,r23,-26215
    daf8:	0025883a 	mov	r18,zero
    dafc:	9839883a 	mov	fp,r19
    db00:	00001306 	br	db50 <_strtoull_r+0x104>
    db04:	00800404 	movi	r2,16
    db08:	e0809026 	beq	fp,r2,dd4c <_strtoull_r+0x300>
    db0c:	e025d7fa 	srai	r18,fp,31
    db10:	013fffc4 	movi	r4,-1
    db14:	200b883a 	mov	r5,r4
    db18:	e00d883a 	mov	r6,fp
    db1c:	900f883a 	mov	r7,r18
    db20:	da000515 	stw	r8,20(sp)
    db24:	000ee8c0 	call	ee8c <__udivdi3>
    db28:	013fffc4 	movi	r4,-1
    db2c:	200b883a 	mov	r5,r4
    db30:	e00d883a 	mov	r6,fp
    db34:	900f883a 	mov	r7,r18
    db38:	1023883a 	mov	r17,r2
    db3c:	182f883a 	mov	r23,r3
    db40:	000f4dc0 	call	f4dc <__umoddi3>
    db44:	da000517 	ldw	r8,20(sp)
    db48:	d8800215 	stw	r2,8(sp)
    db4c:	e027883a 	mov	r19,fp
    db50:	b20d883a 	add	r6,r22,r8
    db54:	32400003 	ldbu	r9,0(r6)
    db58:	0007883a 	mov	r3,zero
    db5c:	0009883a 	mov	r4,zero
    db60:	4a80010c 	andi	r10,r9,4
    db64:	52803fcc 	andi	r10,r10,255
    db68:	5280201c 	xori	r10,r10,128
    db6c:	52bfe004 	addi	r10,r10,-128
    db70:	000b883a 	mov	r5,zero
    db74:	057fffc4 	movi	r21,-1
    db78:	50001026 	beq	r10,zero,dbbc <_strtoull_r+0x170>
    db7c:	453ff404 	addi	r20,r8,-48
    db80:	a700150e 	bge	r20,fp,dbd8 <_strtoull_r+0x18c>
    db84:	1d400426 	beq	r3,r21,db98 <_strtoull_r+0x14c>
    db88:	b9400236 	bltu	r23,r5,db94 <_strtoull_r+0x148>
    db8c:	2dc0301e 	bne	r5,r23,dc50 <_strtoull_r+0x204>
    db90:	89002f2e 	bgeu	r17,r4,dc50 <_strtoull_r+0x204>
    db94:	00ffffc4 	movi	r3,-1
    db98:	82000007 	ldb	r8,0(r16)
    db9c:	84000044 	addi	r16,r16,1
    dba0:	b20d883a 	add	r6,r22,r8
    dba4:	32400003 	ldbu	r9,0(r6)
    dba8:	4a80010c 	andi	r10,r9,4
    dbac:	52803fcc 	andi	r10,r10,255
    dbb0:	5280201c 	xori	r10,r10,128
    dbb4:	52bfe004 	addi	r10,r10,-128
    dbb8:	503ff01e 	bne	r10,zero,db7c <_strtoull_r+0x130>
    dbbc:	488000cc 	andi	r2,r9,3
    dbc0:	10000526 	beq	r2,zero,dbd8 <_strtoull_r+0x18c>
    dbc4:	4a40004c 	andi	r9,r9,1
    dbc8:	48002d26 	beq	r9,zero,dc80 <_strtoull_r+0x234>
    dbcc:	00800dc4 	movi	r2,55
    dbd0:	40a9c83a 	sub	r20,r8,r2
    dbd4:	a73feb16 	blt	r20,fp,db84 <_strtoull_r+0x138>
    dbd8:	00bfffc4 	movi	r2,-1
    dbdc:	18802f26 	beq	r3,r2,dc9c <_strtoull_r+0x250>
    dbe0:	d8800317 	ldw	r2,12(sp)
    dbe4:	10000426 	beq	r2,zero,dbf8 <_strtoull_r+0x1ac>
    dbe8:	0109c83a 	sub	r4,zero,r4
    dbec:	2004c03a 	cmpne	r2,r4,zero
    dbf0:	014bc83a 	sub	r5,zero,r5
    dbf4:	288bc83a 	sub	r5,r5,r2
    dbf8:	d8800117 	ldw	r2,4(sp)
    dbfc:	10000626 	beq	r2,zero,dc18 <_strtoull_r+0x1cc>
    dc00:	18000226 	beq	r3,zero,dc0c <_strtoull_r+0x1c0>
    dc04:	843fffc4 	addi	r16,r16,-1
    dc08:	dc000015 	stw	r16,0(sp)
    dc0c:	d8800017 	ldw	r2,0(sp)
    dc10:	d8c00117 	ldw	r3,4(sp)
    dc14:	18800015 	stw	r2,0(r3)
    dc18:	2005883a 	mov	r2,r4
    dc1c:	2807883a 	mov	r3,r5
    dc20:	dfc00f17 	ldw	ra,60(sp)
    dc24:	df000e17 	ldw	fp,56(sp)
    dc28:	ddc00d17 	ldw	r23,52(sp)
    dc2c:	dd800c17 	ldw	r22,48(sp)
    dc30:	dd400b17 	ldw	r21,44(sp)
    dc34:	dd000a17 	ldw	r20,40(sp)
    dc38:	dcc00917 	ldw	r19,36(sp)
    dc3c:	dc800817 	ldw	r18,32(sp)
    dc40:	dc400717 	ldw	r17,28(sp)
    dc44:	dc000617 	ldw	r16,24(sp)
    dc48:	dec01004 	addi	sp,sp,64
    dc4c:	f800283a 	ret
    dc50:	24400e26 	beq	r4,r17,dc8c <_strtoull_r+0x240>
    dc54:	980d883a 	mov	r6,r19
    dc58:	900f883a 	mov	r7,r18
    dc5c:	000ecf80 	call	ecf8 <__muldi3>
    dc60:	a00dd7fa 	srai	r6,r20,31
    dc64:	a085883a 	add	r2,r20,r2
    dc68:	1511803a 	cmpltu	r8,r2,r20
    dc6c:	30c7883a 	add	r3,r6,r3
    dc70:	40cb883a 	add	r5,r8,r3
    dc74:	1009883a 	mov	r4,r2
    dc78:	00c00044 	movi	r3,1
    dc7c:	003fc606 	br	db98 <_strtoull_r+0x14c>
    dc80:	008015c4 	movi	r2,87
    dc84:	40a9c83a 	sub	r20,r8,r2
    dc88:	003fd206 	br	dbd4 <_strtoull_r+0x188>
    dc8c:	2dfff11e 	bne	r5,r23,dc54 <_strtoull_r+0x208>
    dc90:	d8800217 	ldw	r2,8(sp)
    dc94:	153fbf16 	blt	r2,r20,db94 <_strtoull_r+0x148>
    dc98:	003fee06 	br	dc54 <_strtoull_r+0x208>
    dc9c:	d9000417 	ldw	r4,16(sp)
    dca0:	00800884 	movi	r2,34
    dca4:	180b883a 	mov	r5,r3
    dca8:	20800015 	stw	r2,0(r4)
    dcac:	d8800117 	ldw	r2,4(sp)
    dcb0:	1809883a 	mov	r4,r3
    dcb4:	103fd31e 	bne	r2,zero,dc04 <_strtoull_r+0x1b8>
    dcb8:	003fd706 	br	dc18 <_strtoull_r+0x1cc>
    dcbc:	00800044 	movi	r2,1
    dcc0:	82000007 	ldb	r8,0(r16)
    dcc4:	d8800315 	stw	r2,12(sp)
    dcc8:	80a1883a 	add	r16,r16,r2
    dccc:	003f8006 	br	dad0 <_strtoull_r+0x84>
    dcd0:	82000007 	ldb	r8,0(r16)
    dcd4:	d8000315 	stw	zero,12(sp)
    dcd8:	84000044 	addi	r16,r16,1
    dcdc:	003f7c06 	br	dad0 <_strtoull_r+0x84>
    dce0:	80800007 	ldb	r2,0(r16)
    dce4:	00c01e04 	movi	r3,120
    dce8:	10c00d26 	beq	r2,r3,dd20 <_strtoull_r+0x2d4>
    dcec:	00c01604 	movi	r3,88
    dcf0:	10c00b26 	beq	r2,r3,dd20 <_strtoull_r+0x2d4>
    dcf4:	e000291e 	bne	fp,zero,dd9c <_strtoull_r+0x350>
    dcf8:	04c00204 	movi	r19,8
    dcfc:	008001c4 	movi	r2,7
    dd00:	d8800215 	stw	r2,8(sp)
    dd04:	047fffc4 	movi	r17,-1
    dd08:	05c80034 	movhi	r23,8192
    dd0c:	bdffffc4 	addi	r23,r23,-1
    dd10:	0025883a 	mov	r18,zero
    dd14:	02000c04 	movi	r8,48
    dd18:	9839883a 	mov	fp,r19
    dd1c:	003f8c06 	br	db50 <_strtoull_r+0x104>
    dd20:	04c00404 	movi	r19,16
    dd24:	008003c4 	movi	r2,15
    dd28:	82000047 	ldb	r8,1(r16)
    dd2c:	d8800215 	stw	r2,8(sp)
    dd30:	84000084 	addi	r16,r16,2
    dd34:	047fffc4 	movi	r17,-1
    dd38:	05c40034 	movhi	r23,4096
    dd3c:	bdffffc4 	addi	r23,r23,-1
    dd40:	0025883a 	mov	r18,zero
    dd44:	9839883a 	mov	fp,r19
    dd48:	003f8106 	br	db50 <_strtoull_r+0x104>
    dd4c:	00800c04 	movi	r2,48
    dd50:	40bfe326 	beq	r8,r2,dce0 <_strtoull_r+0x294>
    dd54:	013fffc4 	movi	r4,-1
    dd58:	200b883a 	mov	r5,r4
    dd5c:	e00d883a 	mov	r6,fp
    dd60:	000f883a 	mov	r7,zero
    dd64:	da000515 	stw	r8,20(sp)
    dd68:	000ee8c0 	call	ee8c <__udivdi3>
    dd6c:	013fffc4 	movi	r4,-1
    dd70:	200b883a 	mov	r5,r4
    dd74:	e00d883a 	mov	r6,fp
    dd78:	000f883a 	mov	r7,zero
    dd7c:	1023883a 	mov	r17,r2
    dd80:	182f883a 	mov	r23,r3
    dd84:	000f4dc0 	call	f4dc <__umoddi3>
    dd88:	d8800215 	stw	r2,8(sp)
    dd8c:	e027883a 	mov	r19,fp
    dd90:	0025883a 	mov	r18,zero
    dd94:	da000517 	ldw	r8,20(sp)
    dd98:	003f6d06 	br	db50 <_strtoull_r+0x104>
    dd9c:	e025d7fa 	srai	r18,fp,31
    dda0:	013fffc4 	movi	r4,-1
    dda4:	200b883a 	mov	r5,r4
    dda8:	e00d883a 	mov	r6,fp
    ddac:	900f883a 	mov	r7,r18
    ddb0:	000ee8c0 	call	ee8c <__udivdi3>
    ddb4:	013fffc4 	movi	r4,-1
    ddb8:	200b883a 	mov	r5,r4
    ddbc:	e00d883a 	mov	r6,fp
    ddc0:	900f883a 	mov	r7,r18
    ddc4:	1023883a 	mov	r17,r2
    ddc8:	182f883a 	mov	r23,r3
    ddcc:	000f4dc0 	call	f4dc <__umoddi3>
    ddd0:	d8800215 	stw	r2,8(sp)
    ddd4:	e027883a 	mov	r19,fp
    ddd8:	02000c04 	movi	r8,48
    dddc:	003f5c06 	br	db50 <_strtoull_r+0x104>

0000dde0 <__submore>:
    dde0:	defffa04 	addi	sp,sp,-24
    dde4:	dc000015 	stw	r16,0(sp)
    dde8:	2821883a 	mov	r16,r5
    ddec:	29400c17 	ldw	r5,48(r5)
    ddf0:	dfc00515 	stw	ra,20(sp)
    ddf4:	dd000415 	stw	r20,16(sp)
    ddf8:	dcc00315 	stw	r19,12(sp)
    ddfc:	dc800215 	stw	r18,8(sp)
    de00:	dc400115 	stw	r17,4(sp)
    de04:	80801004 	addi	r2,r16,64
    de08:	28801726 	beq	r5,r2,de68 <__submore+0x88>
    de0c:	84400d17 	ldw	r17,52(r16)
    de10:	8c67883a 	add	r19,r17,r17
    de14:	980d883a 	mov	r6,r19
    de18:	000b2a00 	call	b2a0 <_realloc_r>
    de1c:	1025883a 	mov	r18,r2
    de20:	10002926 	beq	r2,zero,dec8 <__submore+0xe8>
    de24:	1469883a 	add	r20,r2,r17
    de28:	a009883a 	mov	r4,r20
    de2c:	100b883a 	mov	r5,r2
    de30:	880d883a 	mov	r6,r17
    de34:	0003e600 	call	3e60 <memcpy>
    de38:	0005883a 	mov	r2,zero
    de3c:	85000015 	stw	r20,0(r16)
    de40:	84800c15 	stw	r18,48(r16)
    de44:	84c00d15 	stw	r19,52(r16)
    de48:	dfc00517 	ldw	ra,20(sp)
    de4c:	dd000417 	ldw	r20,16(sp)
    de50:	dcc00317 	ldw	r19,12(sp)
    de54:	dc800217 	ldw	r18,8(sp)
    de58:	dc400117 	ldw	r17,4(sp)
    de5c:	dc000017 	ldw	r16,0(sp)
    de60:	dec00604 	addi	sp,sp,24
    de64:	f800283a 	ret
    de68:	04410004 	movi	r17,1024
    de6c:	880b883a 	mov	r5,r17
    de70:	00036dc0 	call	36dc <_malloc_r>
    de74:	1007883a 	mov	r3,r2
    de78:	10001326 	beq	r2,zero,dec8 <__submore+0xe8>
    de7c:	80801083 	ldbu	r2,66(r16)
    de80:	80c00c15 	stw	r3,48(r16)
    de84:	84400d15 	stw	r17,52(r16)
    de88:	1880ffc5 	stb	r2,1023(r3)
    de8c:	81401043 	ldbu	r5,65(r16)
    de90:	1900ff44 	addi	r4,r3,1021
    de94:	0005883a 	mov	r2,zero
    de98:	1940ff85 	stb	r5,1022(r3)
    de9c:	81401003 	ldbu	r5,64(r16)
    dea0:	1940ff45 	stb	r5,1021(r3)
    dea4:	81000015 	stw	r4,0(r16)
    dea8:	dfc00517 	ldw	ra,20(sp)
    deac:	dd000417 	ldw	r20,16(sp)
    deb0:	dcc00317 	ldw	r19,12(sp)
    deb4:	dc800217 	ldw	r18,8(sp)
    deb8:	dc400117 	ldw	r17,4(sp)
    debc:	dc000017 	ldw	r16,0(sp)
    dec0:	dec00604 	addi	sp,sp,24
    dec4:	f800283a 	ret
    dec8:	00bfffc4 	movi	r2,-1
    decc:	003fde06 	br	de48 <__submore+0x68>

0000ded0 <_ungetc_r>:
    ded0:	defffc04 	addi	sp,sp,-16
    ded4:	dc800215 	stw	r18,8(sp)
    ded8:	dc400115 	stw	r17,4(sp)
    dedc:	dc000015 	stw	r16,0(sp)
    dee0:	dfc00315 	stw	ra,12(sp)
    dee4:	00bfffc4 	movi	r2,-1
    dee8:	2825883a 	mov	r18,r5
    deec:	2023883a 	mov	r17,r4
    def0:	3021883a 	mov	r16,r6
    def4:	28803026 	beq	r5,r2,dfb8 <_ungetc_r+0xe8>
    def8:	20000226 	beq	r4,zero,df04 <_ungetc_r+0x34>
    defc:	20800e17 	ldw	r2,56(r4)
    df00:	10002f26 	beq	r2,zero,dfc0 <_ungetc_r+0xf0>
    df04:	80c0030b 	ldhu	r3,12(r16)
    df08:	00bff7c4 	movi	r2,-33
    df0c:	1900010c 	andi	r4,r3,4
    df10:	213fffcc 	andi	r4,r4,65535
    df14:	1884703a 	and	r2,r3,r2
    df18:	2120001c 	xori	r4,r4,32768
    df1c:	8080030d 	sth	r2,12(r16)
    df20:	21200004 	addi	r4,r4,-32768
    df24:	20000c1e 	bne	r4,zero,df58 <_ungetc_r+0x88>
    df28:	1900040c 	andi	r4,r3,16
    df2c:	213fffcc 	andi	r4,r4,65535
    df30:	2120001c 	xori	r4,r4,32768
    df34:	21200004 	addi	r4,r4,-32768
    df38:	20001f26 	beq	r4,zero,dfb8 <_ungetc_r+0xe8>
    df3c:	18c0020c 	andi	r3,r3,8
    df40:	18ffffcc 	andi	r3,r3,65535
    df44:	18e0001c 	xori	r3,r3,32768
    df48:	18e00004 	addi	r3,r3,-32768
    df4c:	1800371e 	bne	r3,zero,e02c <_ungetc_r+0x15c>
    df50:	10800114 	ori	r2,r2,4
    df54:	8080030d 	sth	r2,12(r16)
    df58:	80800c17 	ldw	r2,48(r16)
    df5c:	94803fcc 	andi	r18,r18,255
    df60:	10001926 	beq	r2,zero,dfc8 <_ungetc_r+0xf8>
    df64:	80c00117 	ldw	r3,4(r16)
    df68:	80800d17 	ldw	r2,52(r16)
    df6c:	18800e0e 	bge	r3,r2,dfa8 <_ungetc_r+0xd8>
    df70:	80800017 	ldw	r2,0(r16)
    df74:	10ffffc4 	addi	r3,r2,-1
    df78:	80c00015 	stw	r3,0(r16)
    df7c:	14bfffc5 	stb	r18,-1(r2)
    df80:	80800117 	ldw	r2,4(r16)
    df84:	10800044 	addi	r2,r2,1
    df88:	80800115 	stw	r2,4(r16)
    df8c:	9005883a 	mov	r2,r18
    df90:	dfc00317 	ldw	ra,12(sp)
    df94:	dc800217 	ldw	r18,8(sp)
    df98:	dc400117 	ldw	r17,4(sp)
    df9c:	dc000017 	ldw	r16,0(sp)
    dfa0:	dec00404 	addi	sp,sp,16
    dfa4:	f800283a 	ret
    dfa8:	8809883a 	mov	r4,r17
    dfac:	800b883a 	mov	r5,r16
    dfb0:	000dde00 	call	dde0 <__submore>
    dfb4:	103fee26 	beq	r2,zero,df70 <_ungetc_r+0xa0>
    dfb8:	04bfffc4 	movi	r18,-1
    dfbc:	003ff306 	br	df8c <_ungetc_r+0xbc>
    dfc0:	00024340 	call	2434 <__sinit>
    dfc4:	003fcf06 	br	df04 <_ungetc_r+0x34>
    dfc8:	80c00417 	ldw	r3,16(r16)
    dfcc:	80800017 	ldw	r2,0(r16)
    dfd0:	18000326 	beq	r3,zero,dfe0 <_ungetc_r+0x110>
    dfd4:	1880022e 	bgeu	r3,r2,dfe0 <_ungetc_r+0x110>
    dfd8:	10ffffc3 	ldbu	r3,-1(r2)
    dfdc:	1c801d26 	beq	r3,r18,e054 <_ungetc_r+0x184>
    dfe0:	81400117 	ldw	r5,4(r16)
    dfe4:	80800e15 	stw	r2,56(r16)
    dfe8:	008000c4 	movi	r2,3
    dfec:	80800d15 	stw	r2,52(r16)
    dff0:	00800044 	movi	r2,1
    dff4:	81001004 	addi	r4,r16,64
    dff8:	80c01084 	addi	r3,r16,66
    dffc:	80800115 	stw	r2,4(r16)
    e000:	9005883a 	mov	r2,r18
    e004:	81400f15 	stw	r5,60(r16)
    e008:	81000c15 	stw	r4,48(r16)
    e00c:	84801085 	stb	r18,66(r16)
    e010:	80c00015 	stw	r3,0(r16)
    e014:	dfc00317 	ldw	ra,12(sp)
    e018:	dc800217 	ldw	r18,8(sp)
    e01c:	dc400117 	ldw	r17,4(sp)
    e020:	dc000017 	ldw	r16,0(sp)
    e024:	dec00404 	addi	sp,sp,16
    e028:	f800283a 	ret
    e02c:	8809883a 	mov	r4,r17
    e030:	800b883a 	mov	r5,r16
    e034:	00021780 	call	2178 <_fflush_r>
    e038:	103fdf1e 	bne	r2,zero,dfb8 <_ungetc_r+0xe8>
    e03c:	8080030b 	ldhu	r2,12(r16)
    e040:	00fffdc4 	movi	r3,-9
    e044:	80000215 	stw	zero,8(r16)
    e048:	1884703a 	and	r2,r3,r2
    e04c:	80000615 	stw	zero,24(r16)
    e050:	003fbf06 	br	df50 <_ungetc_r+0x80>
    e054:	80c00117 	ldw	r3,4(r16)
    e058:	10bfffc4 	addi	r2,r2,-1
    e05c:	80800015 	stw	r2,0(r16)
    e060:	18800044 	addi	r2,r3,1
    e064:	80800115 	stw	r2,4(r16)
    e068:	003fc806 	br	df8c <_ungetc_r+0xbc>

0000e06c <ungetc>:
    e06c:	00c00074 	movhi	r3,1
    e070:	18dab504 	addi	r3,r3,27348
    e074:	2005883a 	mov	r2,r4
    e078:	19000017 	ldw	r4,0(r3)
    e07c:	280d883a 	mov	r6,r5
    e080:	100b883a 	mov	r5,r2
    e084:	000ded01 	jmpi	ded0 <_ungetc_r>

0000e088 <_calloc_r>:
    e088:	defffe04 	addi	sp,sp,-8
    e08c:	dc000015 	stw	r16,0(sp)
    e090:	2021883a 	mov	r16,r4
    e094:	3009883a 	mov	r4,r6
    e098:	dfc00115 	stw	ra,4(sp)
    e09c:	00020000 	call	2000 <__mulsi3>
    e0a0:	8009883a 	mov	r4,r16
    e0a4:	100b883a 	mov	r5,r2
    e0a8:	00036dc0 	call	36dc <_malloc_r>
    e0ac:	1021883a 	mov	r16,r2
    e0b0:	10000c26 	beq	r2,zero,e0e4 <_calloc_r+0x5c>
    e0b4:	11bfff17 	ldw	r6,-4(r2)
    e0b8:	00ffff04 	movi	r3,-4
    e0bc:	00800904 	movi	r2,36
    e0c0:	30cc703a 	and	r6,r6,r3
    e0c4:	30cd883a 	add	r6,r6,r3
    e0c8:	11801436 	bltu	r2,r6,e11c <_calloc_r+0x94>
    e0cc:	00c004c4 	movi	r3,19
    e0d0:	19800936 	bltu	r3,r6,e0f8 <_calloc_r+0x70>
    e0d4:	8005883a 	mov	r2,r16
    e0d8:	10000015 	stw	zero,0(r2)
    e0dc:	10000115 	stw	zero,4(r2)
    e0e0:	10000215 	stw	zero,8(r2)
    e0e4:	8005883a 	mov	r2,r16
    e0e8:	dfc00117 	ldw	ra,4(sp)
    e0ec:	dc000017 	ldw	r16,0(sp)
    e0f0:	dec00204 	addi	sp,sp,8
    e0f4:	f800283a 	ret
    e0f8:	80000015 	stw	zero,0(r16)
    e0fc:	80000115 	stw	zero,4(r16)
    e100:	00c006c4 	movi	r3,27
    e104:	19800d2e 	bgeu	r3,r6,e13c <_calloc_r+0xb4>
    e108:	80000215 	stw	zero,8(r16)
    e10c:	80000315 	stw	zero,12(r16)
    e110:	30800c26 	beq	r6,r2,e144 <_calloc_r+0xbc>
    e114:	80800404 	addi	r2,r16,16
    e118:	003fef06 	br	e0d8 <_calloc_r+0x50>
    e11c:	8009883a 	mov	r4,r16
    e120:	000b883a 	mov	r5,zero
    e124:	0003fa00 	call	3fa0 <memset>
    e128:	8005883a 	mov	r2,r16
    e12c:	dfc00117 	ldw	ra,4(sp)
    e130:	dc000017 	ldw	r16,0(sp)
    e134:	dec00204 	addi	sp,sp,8
    e138:	f800283a 	ret
    e13c:	80800204 	addi	r2,r16,8
    e140:	003fe506 	br	e0d8 <_calloc_r+0x50>
    e144:	80000415 	stw	zero,16(r16)
    e148:	80000515 	stw	zero,20(r16)
    e14c:	80800604 	addi	r2,r16,24
    e150:	003fe106 	br	e0d8 <_calloc_r+0x50>

0000e154 <rshift>:
    e154:	2805d17a 	srai	r2,r5,5
    e158:	20c00417 	ldw	r3,16(r4)
    e15c:	22800504 	addi	r10,r4,20
    e160:	10c0270e 	bge	r2,r3,e200 <rshift+0xac>
    e164:	19800144 	addi	r6,r3,5
    e168:	12c00144 	addi	r11,r2,5
    e16c:	318d883a 	add	r6,r6,r6
    e170:	5ad7883a 	add	r11,r11,r11
    e174:	318d883a 	add	r6,r6,r6
    e178:	5ad7883a 	add	r11,r11,r11
    e17c:	294007cc 	andi	r5,r5,31
    e180:	218d883a 	add	r6,r4,r6
    e184:	22d7883a 	add	r11,r4,r11
    e188:	28002026 	beq	r5,zero,e20c <rshift+0xb8>
    e18c:	59c00017 	ldw	r7,0(r11)
    e190:	02400804 	movi	r9,32
    e194:	58800104 	addi	r2,r11,4
    e198:	4953c83a 	sub	r9,r9,r5
    e19c:	394ed83a 	srl	r7,r7,r5
    e1a0:	11802e2e 	bgeu	r2,r6,e25c <rshift+0x108>
    e1a4:	5007883a 	mov	r3,r10
    e1a8:	12000017 	ldw	r8,0(r2)
    e1ac:	18c00104 	addi	r3,r3,4
    e1b0:	10800104 	addi	r2,r2,4
    e1b4:	4250983a 	sll	r8,r8,r9
    e1b8:	3a0eb03a 	or	r7,r7,r8
    e1bc:	19ffff15 	stw	r7,-4(r3)
    e1c0:	11ffff17 	ldw	r7,-4(r2)
    e1c4:	394ed83a 	srl	r7,r7,r5
    e1c8:	11bff736 	bltu	r2,r6,e1a8 <rshift+0x54>
    e1cc:	32c5c83a 	sub	r2,r6,r11
    e1d0:	10bffec4 	addi	r2,r2,-5
    e1d4:	1004d0ba 	srli	r2,r2,2
    e1d8:	10800184 	addi	r2,r2,6
    e1dc:	1085883a 	add	r2,r2,r2
    e1e0:	1085883a 	add	r2,r2,r2
    e1e4:	2085883a 	add	r2,r4,r2
    e1e8:	11c00015 	stw	r7,0(r2)
    e1ec:	38001626 	beq	r7,zero,e248 <rshift+0xf4>
    e1f0:	10800104 	addi	r2,r2,4
    e1f4:	1295c83a 	sub	r10,r2,r10
    e1f8:	5015d0ba 	srai	r10,r10,2
    e1fc:	00001406 	br	e250 <rshift+0xfc>
    e200:	20000415 	stw	zero,16(r4)
    e204:	20000515 	stw	zero,20(r4)
    e208:	f800283a 	ret
    e20c:	59bffc2e 	bgeu	r11,r6,e200 <rshift+0xac>
    e210:	5007883a 	mov	r3,r10
    e214:	5805883a 	mov	r2,r11
    e218:	11400017 	ldw	r5,0(r2)
    e21c:	18c00104 	addi	r3,r3,4
    e220:	10800104 	addi	r2,r2,4
    e224:	197fff15 	stw	r5,-4(r3)
    e228:	11bffb36 	bltu	r2,r6,e218 <rshift+0xc4>
    e22c:	02c4303a 	nor	r2,zero,r11
    e230:	1185883a 	add	r2,r2,r6
    e234:	1004d0ba 	srli	r2,r2,2
    e238:	10800184 	addi	r2,r2,6
    e23c:	1085883a 	add	r2,r2,r2
    e240:	1085883a 	add	r2,r2,r2
    e244:	2085883a 	add	r2,r4,r2
    e248:	1295c83a 	sub	r10,r2,r10
    e24c:	5015d0ba 	srai	r10,r10,2
    e250:	22800415 	stw	r10,16(r4)
    e254:	503feb26 	beq	r10,zero,e204 <rshift+0xb0>
    e258:	f800283a 	ret
    e25c:	5005883a 	mov	r2,r10
    e260:	003fe106 	br	e1e8 <rshift+0x94>

0000e264 <__hexdig_init>:
    e264:	01400074 	movhi	r5,1
    e268:	2953c544 	addi	r5,r5,20245
    e26c:	01000404 	movi	r4,16
    e270:	00c00c04 	movi	r3,48
    e274:	008000b4 	movhi	r2,2
    e278:	10a2f104 	addi	r2,r2,-29756
    e27c:	29800003 	ldbu	r6,0(r5)
    e280:	10c7883a 	add	r3,r2,r3
    e284:	19000005 	stb	r4,0(r3)
    e288:	29400044 	addi	r5,r5,1
    e28c:	3007883a 	mov	r3,r6
    e290:	21000044 	addi	r4,r4,1
    e294:	303ff91e 	bne	r6,zero,e27c <__hexdig_init+0x18>
    e298:	01400074 	movhi	r5,1
    e29c:	2953c344 	addi	r5,r5,20237
    e2a0:	01000684 	movi	r4,26
    e2a4:	00c01844 	movi	r3,97
    e2a8:	29800003 	ldbu	r6,0(r5)
    e2ac:	10c7883a 	add	r3,r2,r3
    e2b0:	19000005 	stb	r4,0(r3)
    e2b4:	29400044 	addi	r5,r5,1
    e2b8:	3007883a 	mov	r3,r6
    e2bc:	21000044 	addi	r4,r4,1
    e2c0:	303ff91e 	bne	r6,zero,e2a8 <__hexdig_init+0x44>
    e2c4:	01400074 	movhi	r5,1
    e2c8:	2953c144 	addi	r5,r5,20229
    e2cc:	01000684 	movi	r4,26
    e2d0:	00c01044 	movi	r3,65
    e2d4:	29800003 	ldbu	r6,0(r5)
    e2d8:	10c7883a 	add	r3,r2,r3
    e2dc:	19000005 	stb	r4,0(r3)
    e2e0:	29400044 	addi	r5,r5,1
    e2e4:	3007883a 	mov	r3,r6
    e2e8:	21000044 	addi	r4,r4,1
    e2ec:	303ff91e 	bne	r6,zero,e2d4 <__hexdig_init+0x70>
    e2f0:	f800283a 	ret

0000e2f4 <__gethex>:
    e2f4:	defff204 	addi	sp,sp,-56
    e2f8:	dc800615 	stw	r18,24(sp)
    e2fc:	048000b4 	movhi	r18,2
    e300:	94a2f104 	addi	r18,r18,-29756
    e304:	90800c03 	ldbu	r2,48(r18)
    e308:	dd400915 	stw	r21,36(sp)
    e30c:	dc400515 	stw	r17,20(sp)
    e310:	dfc00d15 	stw	ra,52(sp)
    e314:	df000c15 	stw	fp,48(sp)
    e318:	ddc00b15 	stw	r23,44(sp)
    e31c:	dd800a15 	stw	r22,40(sp)
    e320:	dd000815 	stw	r20,32(sp)
    e324:	dcc00715 	stw	r19,28(sp)
    e328:	dc000415 	stw	r16,16(sp)
    e32c:	d9000115 	stw	r4,4(sp)
    e330:	d9c00215 	stw	r7,8(sp)
    e334:	282b883a 	mov	r21,r5
    e338:	3023883a 	mov	r17,r6
    e33c:	1000b926 	beq	r2,zero,e624 <__gethex+0x330>
    e340:	a9000017 	ldw	r4,0(r21)
    e344:	00800c04 	movi	r2,48
    e348:	20c00083 	ldbu	r3,2(r4)
    e34c:	24c00084 	addi	r19,r4,2
    e350:	1881601e 	bne	r3,r2,e8d4 <__gethex+0x5e0>
    e354:	017fff84 	movi	r5,-2
    e358:	208000c4 	addi	r2,r4,3
    e35c:	290bc83a 	sub	r5,r5,r4
    e360:	1809883a 	mov	r4,r3
    e364:	28b9883a 	add	fp,r5,r2
    e368:	1027883a 	mov	r19,r2
    e36c:	10800044 	addi	r2,r2,1
    e370:	10ffffc3 	ldbu	r3,-1(r2)
    e374:	193ffb26 	beq	r3,r4,e364 <__gethex+0x70>
    e378:	90c5883a 	add	r2,r18,r3
    e37c:	10800003 	ldbu	r2,0(r2)
    e380:	014000b4 	movhi	r5,2
    e384:	2962f104 	addi	r5,r5,-29756
    e388:	10002b26 	beq	r2,zero,e438 <__gethex+0x144>
    e38c:	98800003 	ldbu	r2,0(r19)
    e390:	0009883a 	mov	r4,zero
    e394:	288b883a 	add	r5,r5,r2
    e398:	28c00003 	ldbu	r3,0(r5)
    e39c:	18016826 	beq	r3,zero,e940 <__gethex+0x64c>
    e3a0:	9821883a 	mov	r16,r19
    e3a4:	84000044 	addi	r16,r16,1
    e3a8:	80800003 	ldbu	r2,0(r16)
    e3ac:	9087883a 	add	r3,r18,r2
    e3b0:	18c00003 	ldbu	r3,0(r3)
    e3b4:	183ffb1e 	bne	r3,zero,e3a4 <__gethex+0xb0>
    e3b8:	d8000015 	stw	zero,0(sp)
    e3bc:	00c00b84 	movi	r3,46
    e3c0:	10c0f226 	beq	r2,r3,e78c <__gethex+0x498>
    e3c4:	80800003 	ldbu	r2,0(r16)
    e3c8:	20014426 	beq	r4,zero,e8dc <__gethex+0x5e8>
    e3cc:	8109c83a 	sub	r4,r16,r4
    e3d0:	2109883a 	add	r4,r4,r4
    e3d4:	2109883a 	add	r4,r4,r4
    e3d8:	0129c83a 	sub	r20,zero,r4
    e3dc:	00c01404 	movi	r3,80
    e3e0:	10c01e26 	beq	r2,r3,e45c <__gethex+0x168>
    e3e4:	00c01c04 	movi	r3,112
    e3e8:	10c01c26 	beq	r2,r3,e45c <__gethex+0x168>
    e3ec:	d8c00017 	ldw	r3,0(sp)
    e3f0:	802d883a 	mov	r22,r16
    e3f4:	ad800015 	stw	r22,0(r21)
    e3f8:	18004026 	beq	r3,zero,e4fc <__gethex+0x208>
    e3fc:	e001061e 	bne	fp,zero,e818 <__gethex+0x524>
    e400:	04000184 	movi	r16,6
    e404:	8005883a 	mov	r2,r16
    e408:	dfc00d17 	ldw	ra,52(sp)
    e40c:	df000c17 	ldw	fp,48(sp)
    e410:	ddc00b17 	ldw	r23,44(sp)
    e414:	dd800a17 	ldw	r22,40(sp)
    e418:	dd400917 	ldw	r21,36(sp)
    e41c:	dd000817 	ldw	r20,32(sp)
    e420:	dcc00717 	ldw	r19,28(sp)
    e424:	dc800617 	ldw	r18,24(sp)
    e428:	dc400517 	ldw	r17,20(sp)
    e42c:	dc000417 	ldw	r16,16(sp)
    e430:	dec00e04 	addi	sp,sp,56
    e434:	f800283a 	ret
    e438:	00800b84 	movi	r2,46
    e43c:	1880d626 	beq	r3,r2,e798 <__gethex+0x4a4>
    e440:	98800003 	ldbu	r2,0(r19)
    e444:	00c00044 	movi	r3,1
    e448:	d8c00015 	stw	r3,0(sp)
    e44c:	00c01404 	movi	r3,80
    e450:	9821883a 	mov	r16,r19
    e454:	0029883a 	mov	r20,zero
    e458:	10ffe21e 	bne	r2,r3,e3e4 <__gethex+0xf0>
    e45c:	80800043 	ldbu	r2,1(r16)
    e460:	00c00ac4 	movi	r3,43
    e464:	10c0f326 	beq	r2,r3,e834 <__gethex+0x540>
    e468:	00c00b44 	movi	r3,45
    e46c:	10c0ec26 	beq	r2,r3,e820 <__gethex+0x52c>
    e470:	80c00044 	addi	r3,r16,1
    e474:	d8000315 	stw	zero,12(sp)
    e478:	9085883a 	add	r2,r18,r2
    e47c:	11000003 	ldbu	r4,0(r2)
    e480:	203fda26 	beq	r4,zero,e3ec <__gethex+0xf8>
    e484:	01800644 	movi	r6,25
    e488:	313fd816 	blt	r6,r4,e3ec <__gethex+0xf8>
    e48c:	18800043 	ldbu	r2,1(r3)
    e490:	014000b4 	movhi	r5,2
    e494:	2962f104 	addi	r5,r5,-29756
    e498:	213ffc04 	addi	r4,r4,-16
    e49c:	2885883a 	add	r2,r5,r2
    e4a0:	15c00003 	ldbu	r23,0(r2)
    e4a4:	1d800044 	addi	r22,r3,1
    e4a8:	b8000d26 	beq	r23,zero,e4e0 <__gethex+0x1ec>
    e4ac:	35c0030e 	bge	r6,r23,e4bc <__gethex+0x1c8>
    e4b0:	00000b06 	br	e4e0 <__gethex+0x1ec>
    e4b4:	00800644 	movi	r2,25
    e4b8:	15c00916 	blt	r2,r23,e4e0 <__gethex+0x1ec>
    e4bc:	01400284 	movi	r5,10
    e4c0:	00020000 	call	2000 <__mulsi3>
    e4c4:	b5800044 	addi	r22,r22,1
    e4c8:	b1400003 	ldbu	r5,0(r22)
    e4cc:	15c5883a 	add	r2,r2,r23
    e4d0:	113ffc04 	addi	r4,r2,-16
    e4d4:	914b883a 	add	r5,r18,r5
    e4d8:	2dc00003 	ldbu	r23,0(r5)
    e4dc:	b83ff51e 	bne	r23,zero,e4b4 <__gethex+0x1c0>
    e4e0:	d8c00317 	ldw	r3,12(sp)
    e4e4:	18000126 	beq	r3,zero,e4ec <__gethex+0x1f8>
    e4e8:	0109c83a 	sub	r4,zero,r4
    e4ec:	d8c00017 	ldw	r3,0(sp)
    e4f0:	ad800015 	stw	r22,0(r21)
    e4f4:	a129883a 	add	r20,r20,r4
    e4f8:	183fc01e 	bne	r3,zero,e3fc <__gethex+0x108>
    e4fc:	84c5c83a 	sub	r2,r16,r19
    e500:	10bfffc4 	addi	r2,r2,-1
    e504:	00c001c4 	movi	r3,7
    e508:	000b883a 	mov	r5,zero
    e50c:	1880030e 	bge	r3,r2,e51c <__gethex+0x228>
    e510:	1005d07a 	srai	r2,r2,1
    e514:	29400044 	addi	r5,r5,1
    e518:	18bffd16 	blt	r3,r2,e510 <__gethex+0x21c>
    e51c:	d9000117 	ldw	r4,4(sp)
    e520:	000a1e40 	call	a1e4 <_Balloc>
    e524:	102d883a 	mov	r22,r2
    e528:	15400504 	addi	r21,r2,20
    e52c:	9c001b2e 	bgeu	r19,r16,e59c <__gethex+0x2a8>
    e530:	843fffc4 	addi	r16,r16,-1
    e534:	98bfffc4 	addi	r2,r19,-1
    e538:	a80b883a 	mov	r5,r21
    e53c:	0009883a 	mov	r4,zero
    e540:	0007883a 	mov	r3,zero
    e544:	02800b84 	movi	r10,46
    e548:	02c00804 	movi	r11,32
    e54c:	00000806 	br	e570 <__gethex+0x27c>
    e550:	18c00104 	addi	r3,r3,4
    e554:	918d883a 	add	r6,r18,r6
    e558:	32400003 	ldbu	r9,0(r6)
    e55c:	4a4003cc 	andi	r9,r9,15
    e560:	49ce983a 	sll	r7,r9,r7
    e564:	21c8b03a 	or	r4,r4,r7
    e568:	843fffc4 	addi	r16,r16,-1
    e56c:	80800d26 	beq	r16,r2,e5a4 <__gethex+0x2b0>
    e570:	81800003 	ldbu	r6,0(r16)
    e574:	180f883a 	mov	r7,r3
    e578:	32bffb26 	beq	r6,r10,e568 <__gethex+0x274>
    e57c:	1afff41e 	bne	r3,r11,e550 <__gethex+0x25c>
    e580:	29000015 	stw	r4,0(r5)
    e584:	81800003 	ldbu	r6,0(r16)
    e588:	0009883a 	mov	r4,zero
    e58c:	000f883a 	mov	r7,zero
    e590:	29400104 	addi	r5,r5,4
    e594:	00c00104 	movi	r3,4
    e598:	003fee06 	br	e554 <__gethex+0x260>
    e59c:	a80b883a 	mov	r5,r21
    e5a0:	0009883a 	mov	r4,zero
    e5a4:	28c00104 	addi	r3,r5,4
    e5a8:	1d47c83a 	sub	r3,r3,r21
    e5ac:	1807d0ba 	srai	r3,r3,2
    e5b0:	29000015 	stw	r4,0(r5)
    e5b4:	1820917a 	slli	r16,r3,5
    e5b8:	b0c00415 	stw	r3,16(r22)
    e5bc:	000a4fc0 	call	a4fc <__hi0bits>
    e5c0:	8dc00017 	ldw	r23,0(r17)
    e5c4:	8085c83a 	sub	r2,r16,r2
    e5c8:	b8809c16 	blt	r23,r2,e83c <__gethex+0x548>
    e5cc:	15c0b716 	blt	r2,r23,e8ac <__gethex+0x5b8>
    e5d0:	0039883a 	mov	fp,zero
    e5d4:	88c00217 	ldw	r3,8(r17)
    e5d8:	1d006516 	blt	r3,r20,e770 <__gethex+0x47c>
    e5dc:	88800117 	ldw	r2,4(r17)
    e5e0:	a080830e 	bge	r20,r2,e7f0 <__gethex+0x4fc>
    e5e4:	1529c83a 	sub	r20,r2,r20
    e5e8:	a5c01016 	blt	r20,r23,e62c <__gethex+0x338>
    e5ec:	88c00317 	ldw	r3,12(r17)
    e5f0:	01000084 	movi	r4,2
    e5f4:	1900c726 	beq	r3,r4,e914 <__gethex+0x620>
    e5f8:	010000c4 	movi	r4,3
    e5fc:	1900f026 	beq	r3,r4,e9c0 <__gethex+0x6cc>
    e600:	01000044 	movi	r4,1
    e604:	1900e626 	beq	r3,r4,e9a0 <__gethex+0x6ac>
    e608:	d9000117 	ldw	r4,4(sp)
    e60c:	b00b883a 	mov	r5,r22
    e610:	04001404 	movi	r16,80
    e614:	000a28c0 	call	a28c <_Bfree>
    e618:	d8c00e17 	ldw	r3,56(sp)
    e61c:	18000015 	stw	zero,0(r3)
    e620:	003f7806 	br	e404 <__gethex+0x110>
    e624:	000e2640 	call	e264 <__hexdig_init>
    e628:	003f4506 	br	e340 <__gethex+0x4c>
    e62c:	a43fffc4 	addi	r16,r20,-1
    e630:	e000b21e 	bne	fp,zero,e8fc <__gethex+0x608>
    e634:	0400040e 	bge	zero,r16,e648 <__gethex+0x354>
    e638:	b009883a 	mov	r4,r22
    e63c:	800b883a 	mov	r5,r16
    e640:	000b1b00 	call	b1b0 <__any_on>
    e644:	1039883a 	mov	fp,r2
    e648:	8005d17a 	srai	r2,r16,5
    e64c:	00c00044 	movi	r3,1
    e650:	840007cc 	andi	r16,r16,31
    e654:	1085883a 	add	r2,r2,r2
    e658:	1085883a 	add	r2,r2,r2
    e65c:	a885883a 	add	r2,r21,r2
    e660:	1c06983a 	sll	r3,r3,r16
    e664:	10800017 	ldw	r2,0(r2)
    e668:	1884703a 	and	r2,r3,r2
    e66c:	10000126 	beq	r2,zero,e674 <__gethex+0x380>
    e670:	e7000094 	ori	fp,fp,2
    e674:	a00b883a 	mov	r5,r20
    e678:	b009883a 	mov	r4,r22
    e67c:	000e1540 	call	e154 <rshift>
    e680:	bd2fc83a 	sub	r23,r23,r20
    e684:	8d000117 	ldw	r20,4(r17)
    e688:	04000084 	movi	r16,2
    e68c:	e0005d26 	beq	fp,zero,e804 <__gethex+0x510>
    e690:	88800317 	ldw	r2,12(r17)
    e694:	00c00084 	movi	r3,2
    e698:	10c0b026 	beq	r2,r3,e95c <__gethex+0x668>
    e69c:	00c000c4 	movi	r3,3
    e6a0:	10c05526 	beq	r2,r3,e7f8 <__gethex+0x504>
    e6a4:	00c00044 	movi	r3,1
    e6a8:	10c0551e 	bne	r2,r3,e800 <__gethex+0x50c>
    e6ac:	e080008c 	andi	r2,fp,2
    e6b0:	10005326 	beq	r2,zero,e800 <__gethex+0x50c>
    e6b4:	a8800017 	ldw	r2,0(r21)
    e6b8:	e084b03a 	or	r2,fp,r2
    e6bc:	10c4703a 	and	r2,r2,r3
    e6c0:	10004f26 	beq	r2,zero,e800 <__gethex+0x50c>
    e6c4:	b7000417 	ldw	fp,16(r22)
    e6c8:	00ffffc4 	movi	r3,-1
    e6cc:	e1000144 	addi	r4,fp,5
    e6d0:	2109883a 	add	r4,r4,r4
    e6d4:	2109883a 	add	r4,r4,r4
    e6d8:	b109883a 	add	r4,r22,r4
    e6dc:	a8800017 	ldw	r2,0(r21)
    e6e0:	10c0ba1e 	bne	r2,r3,e9cc <__gethex+0x6d8>
    e6e4:	a8000015 	stw	zero,0(r21)
    e6e8:	ad400104 	addi	r21,r21,4
    e6ec:	a93ffb36 	bltu	r21,r4,e6dc <__gethex+0x3e8>
    e6f0:	b0800217 	ldw	r2,8(r22)
    e6f4:	e080bd0e 	bge	fp,r2,e9ec <__gethex+0x6f8>
    e6f8:	e005883a 	mov	r2,fp
    e6fc:	10c00144 	addi	r3,r2,5
    e700:	18c7883a 	add	r3,r3,r3
    e704:	18c7883a 	add	r3,r3,r3
    e708:	b0c7883a 	add	r3,r22,r3
    e70c:	10800044 	addi	r2,r2,1
    e710:	01000044 	movi	r4,1
    e714:	19000015 	stw	r4,0(r3)
    e718:	b0800415 	stw	r2,16(r22)
    e71c:	00800084 	movi	r2,2
    e720:	8080ad26 	beq	r16,r2,e9d8 <__gethex+0x6e4>
    e724:	b0800417 	ldw	r2,16(r22)
    e728:	e0800b16 	blt	fp,r2,e758 <__gethex+0x464>
    e72c:	bdc007cc 	andi	r23,r23,31
    e730:	b8008626 	beq	r23,zero,e94c <__gethex+0x658>
    e734:	e7000104 	addi	fp,fp,4
    e738:	e739883a 	add	fp,fp,fp
    e73c:	e739883a 	add	fp,fp,fp
    e740:	b705883a 	add	r2,r22,fp
    e744:	11000017 	ldw	r4,0(r2)
    e748:	000a4fc0 	call	a4fc <__hi0bits>
    e74c:	00c00804 	movi	r3,32
    e750:	1defc83a 	sub	r23,r3,r23
    e754:	15c07d0e 	bge	r2,r23,e94c <__gethex+0x658>
    e758:	b009883a 	mov	r4,r22
    e75c:	01400044 	movi	r5,1
    e760:	000e1540 	call	e154 <rshift>
    e764:	88800217 	ldw	r2,8(r17)
    e768:	a5000044 	addi	r20,r20,1
    e76c:	1500770e 	bge	r2,r20,e94c <__gethex+0x658>
    e770:	d9000117 	ldw	r4,4(sp)
    e774:	b00b883a 	mov	r5,r22
    e778:	040028c4 	movi	r16,163
    e77c:	000a28c0 	call	a28c <_Bfree>
    e780:	d8800e17 	ldw	r2,56(sp)
    e784:	10000015 	stw	zero,0(r2)
    e788:	003f1e06 	br	e404 <__gethex+0x110>
    e78c:	20007826 	beq	r4,zero,e970 <__gethex+0x67c>
    e790:	80800003 	ldbu	r2,0(r16)
    e794:	003f0d06 	br	e3cc <__gethex+0xd8>
    e798:	98800043 	ldbu	r2,1(r19)
    e79c:	9c000044 	addi	r16,r19,1
    e7a0:	288b883a 	add	r5,r5,r2
    e7a4:	28c00003 	ldbu	r3,0(r5)
    e7a8:	18005026 	beq	r3,zero,e8ec <__gethex+0x5f8>
    e7ac:	00c00c04 	movi	r3,48
    e7b0:	10c0541e 	bne	r2,r3,e904 <__gethex+0x610>
    e7b4:	800d883a 	mov	r6,r16
    e7b8:	1007883a 	mov	r3,r2
    e7bc:	31800044 	addi	r6,r6,1
    e7c0:	30800003 	ldbu	r2,0(r6)
    e7c4:	10fffd26 	beq	r2,r3,e7bc <__gethex+0x4c8>
    e7c8:	9087883a 	add	r3,r18,r2
    e7cc:	18c00003 	ldbu	r3,0(r3)
    e7d0:	3027883a 	mov	r19,r6
    e7d4:	18004c1e 	bne	r3,zero,e908 <__gethex+0x614>
    e7d8:	00c00044 	movi	r3,1
    e7dc:	8009883a 	mov	r4,r16
    e7e0:	d8c00015 	stw	r3,0(sp)
    e7e4:	1839883a 	mov	fp,r3
    e7e8:	3021883a 	mov	r16,r6
    e7ec:	003ef306 	br	e3bc <__gethex+0xc8>
    e7f0:	04000044 	movi	r16,1
    e7f4:	003fa506 	br	e68c <__gethex+0x398>
    e7f8:	d8800f17 	ldw	r2,60(sp)
    e7fc:	103fb11e 	bne	r2,zero,e6c4 <__gethex+0x3d0>
    e800:	84000414 	ori	r16,r16,16
    e804:	d8800e17 	ldw	r2,56(sp)
    e808:	d8c00217 	ldw	r3,8(sp)
    e80c:	15800015 	stw	r22,0(r2)
    e810:	1d000015 	stw	r20,0(r3)
    e814:	003efb06 	br	e404 <__gethex+0x110>
    e818:	0021883a 	mov	r16,zero
    e81c:	003ef906 	br	e404 <__gethex+0x110>
    e820:	00c00044 	movi	r3,1
    e824:	d8c00315 	stw	r3,12(sp)
    e828:	80800083 	ldbu	r2,2(r16)
    e82c:	80c00084 	addi	r3,r16,2
    e830:	003f1106 	br	e478 <__gethex+0x184>
    e834:	d8000315 	stw	zero,12(sp)
    e838:	003ffb06 	br	e828 <__gethex+0x534>
    e83c:	15e1c83a 	sub	r16,r2,r23
    e840:	b009883a 	mov	r4,r22
    e844:	800b883a 	mov	r5,r16
    e848:	000b1b00 	call	b1b0 <__any_on>
    e84c:	10002526 	beq	r2,zero,e8e4 <__gethex+0x5f0>
    e850:	80bfffc4 	addi	r2,r16,-1
    e854:	1007d17a 	srai	r3,r2,5
    e858:	110007cc 	andi	r4,r2,31
    e85c:	07000044 	movi	fp,1
    e860:	18c00144 	addi	r3,r3,5
    e864:	18c7883a 	add	r3,r3,r3
    e868:	18c7883a 	add	r3,r3,r3
    e86c:	b0c7883a 	add	r3,r22,r3
    e870:	e108983a 	sll	r4,fp,r4
    e874:	18c00017 	ldw	r3,0(r3)
    e878:	20c6703a 	and	r3,r4,r3
    e87c:	18000626 	beq	r3,zero,e898 <__gethex+0x5a4>
    e880:	e080340e 	bge	fp,r2,e954 <__gethex+0x660>
    e884:	b009883a 	mov	r4,r22
    e888:	817fff84 	addi	r5,r16,-2
    e88c:	000b1b00 	call	b1b0 <__any_on>
    e890:	10003026 	beq	r2,zero,e954 <__gethex+0x660>
    e894:	070000c4 	movi	fp,3
    e898:	b009883a 	mov	r4,r22
    e89c:	800b883a 	mov	r5,r16
    e8a0:	000e1540 	call	e154 <rshift>
    e8a4:	a429883a 	add	r20,r20,r16
    e8a8:	003f4a06 	br	e5d4 <__gethex+0x2e0>
    e8ac:	d9000117 	ldw	r4,4(sp)
    e8b0:	b8a1c83a 	sub	r16,r23,r2
    e8b4:	b00b883a 	mov	r5,r22
    e8b8:	800d883a 	mov	r6,r16
    e8bc:	000a9d40 	call	a9d4 <__lshift>
    e8c0:	102d883a 	mov	r22,r2
    e8c4:	a429c83a 	sub	r20,r20,r16
    e8c8:	15400504 	addi	r21,r2,20
    e8cc:	0039883a 	mov	fp,zero
    e8d0:	003f4006 	br	e5d4 <__gethex+0x2e0>
    e8d4:	0039883a 	mov	fp,zero
    e8d8:	003ea706 	br	e378 <__gethex+0x84>
    e8dc:	0029883a 	mov	r20,zero
    e8e0:	003ebe06 	br	e3dc <__gethex+0xe8>
    e8e4:	0039883a 	mov	fp,zero
    e8e8:	003feb06 	br	e898 <__gethex+0x5a4>
    e8ec:	00c00044 	movi	r3,1
    e8f0:	0029883a 	mov	r20,zero
    e8f4:	d8c00015 	stw	r3,0(sp)
    e8f8:	003eb806 	br	e3dc <__gethex+0xe8>
    e8fc:	07000044 	movi	fp,1
    e900:	003f5106 	br	e648 <__gethex+0x354>
    e904:	8027883a 	mov	r19,r16
    e908:	8009883a 	mov	r4,r16
    e90c:	07000044 	movi	fp,1
    e910:	003ea306 	br	e3a0 <__gethex+0xac>
    e914:	d8c00f17 	ldw	r3,60(sp)
    e918:	183f3b1e 	bne	r3,zero,e608 <__gethex+0x314>
    e91c:	d8c00217 	ldw	r3,8(sp)
    e920:	04001884 	movi	r16,98
    e924:	18800015 	stw	r2,0(r3)
    e928:	00800044 	movi	r2,1
    e92c:	b0800415 	stw	r2,16(r22)
    e930:	a8800015 	stw	r2,0(r21)
    e934:	d8800e17 	ldw	r2,56(sp)
    e938:	15800015 	stw	r22,0(r2)
    e93c:	003eb106 	br	e404 <__gethex+0x110>
    e940:	9821883a 	mov	r16,r19
    e944:	d8000015 	stw	zero,0(sp)
    e948:	003e9c06 	br	e3bc <__gethex+0xc8>
    e94c:	04000844 	movi	r16,33
    e950:	003fac06 	br	e804 <__gethex+0x510>
    e954:	07000084 	movi	fp,2
    e958:	003fcf06 	br	e898 <__gethex+0x5a4>
    e95c:	d8c00f17 	ldw	r3,60(sp)
    e960:	00800044 	movi	r2,1
    e964:	10c5c83a 	sub	r2,r2,r3
    e968:	103fa526 	beq	r2,zero,e800 <__gethex+0x50c>
    e96c:	003f5506 	br	e6c4 <__gethex+0x3d0>
    e970:	80800043 	ldbu	r2,1(r16)
    e974:	81000044 	addi	r4,r16,1
    e978:	2021883a 	mov	r16,r4
    e97c:	9087883a 	add	r3,r18,r2
    e980:	18c00003 	ldbu	r3,0(r3)
    e984:	183e9026 	beq	r3,zero,e3c8 <__gethex+0xd4>
    e988:	84000044 	addi	r16,r16,1
    e98c:	80800003 	ldbu	r2,0(r16)
    e990:	9087883a 	add	r3,r18,r2
    e994:	18c00003 	ldbu	r3,0(r3)
    e998:	183ffb1e 	bne	r3,zero,e988 <__gethex+0x694>
    e99c:	003e8a06 	br	e3c8 <__gethex+0xd4>
    e9a0:	a5ff191e 	bne	r20,r23,e608 <__gethex+0x314>
    e9a4:	1dffdd0e 	bge	r3,r23,e91c <__gethex+0x628>
    e9a8:	b009883a 	mov	r4,r22
    e9ac:	b97fffc4 	addi	r5,r23,-1
    e9b0:	000b1b00 	call	b1b0 <__any_on>
    e9b4:	103f1426 	beq	r2,zero,e608 <__gethex+0x314>
    e9b8:	88800117 	ldw	r2,4(r17)
    e9bc:	003fd706 	br	e91c <__gethex+0x628>
    e9c0:	d8c00f17 	ldw	r3,60(sp)
    e9c4:	183f1026 	beq	r3,zero,e608 <__gethex+0x314>
    e9c8:	003fd406 	br	e91c <__gethex+0x628>
    e9cc:	10800044 	addi	r2,r2,1
    e9d0:	a8800015 	stw	r2,0(r21)
    e9d4:	003f5106 	br	e71c <__gethex+0x428>
    e9d8:	88800017 	ldw	r2,0(r17)
    e9dc:	10bfffc4 	addi	r2,r2,-1
    e9e0:	15c01426 	beq	r2,r23,ea34 <__gethex+0x740>
    e9e4:	04000884 	movi	r16,34
    e9e8:	003f8606 	br	e804 <__gethex+0x510>
    e9ec:	b1400117 	ldw	r5,4(r22)
    e9f0:	d9000117 	ldw	r4,4(sp)
    e9f4:	29400044 	addi	r5,r5,1
    e9f8:	000a1e40 	call	a1e4 <_Balloc>
    e9fc:	b1800417 	ldw	r6,16(r22)
    ea00:	b1400304 	addi	r5,r22,12
    ea04:	11000304 	addi	r4,r2,12
    ea08:	31800084 	addi	r6,r6,2
    ea0c:	318d883a 	add	r6,r6,r6
    ea10:	318d883a 	add	r6,r6,r6
    ea14:	102b883a 	mov	r21,r2
    ea18:	0003e600 	call	3e60 <memcpy>
    ea1c:	d9000117 	ldw	r4,4(sp)
    ea20:	b00b883a 	mov	r5,r22
    ea24:	a82d883a 	mov	r22,r21
    ea28:	000a28c0 	call	a28c <_Bfree>
    ea2c:	a8800417 	ldw	r2,16(r21)
    ea30:	003f3206 	br	e6fc <__gethex+0x408>
    ea34:	b805d17a 	srai	r2,r23,5
    ea38:	04000044 	movi	r16,1
    ea3c:	bdc007cc 	andi	r23,r23,31
    ea40:	10800144 	addi	r2,r2,5
    ea44:	1085883a 	add	r2,r2,r2
    ea48:	1085883a 	add	r2,r2,r2
    ea4c:	b085883a 	add	r2,r22,r2
    ea50:	10800017 	ldw	r2,0(r2)
    ea54:	85e0983a 	sll	r16,r16,r23
    ea58:	80a0703a 	and	r16,r16,r2
    ea5c:	8020c03a 	cmpne	r16,r16,zero
    ea60:	00800884 	movi	r2,34
    ea64:	1421c83a 	sub	r16,r2,r16
    ea68:	003f6606 	br	e804 <__gethex+0x510>

0000ea6c <__hexnan>:
    ea6c:	defff604 	addi	sp,sp,-40
    ea70:	dc000315 	stw	r16,12(sp)
    ea74:	040000b4 	movhi	r16,2
    ea78:	8422f104 	addi	r16,r16,-29756
    ea7c:	80800c03 	ldbu	r2,48(r16)
    ea80:	dfc00915 	stw	ra,36(sp)
    ea84:	dd400815 	stw	r21,32(sp)
    ea88:	dd000715 	stw	r20,28(sp)
    ea8c:	dcc00615 	stw	r19,24(sp)
    ea90:	dc800515 	stw	r18,20(sp)
    ea94:	dc400415 	stw	r17,16(sp)
    ea98:	10006c26 	beq	r2,zero,ec4c <__hexnan+0x1e0>
    ea9c:	2d000017 	ldw	r20,0(r5)
    eaa0:	a025d17a 	srai	r18,r20,5
    eaa4:	a50007cc 	andi	r20,r20,31
    eaa8:	94a5883a 	add	r18,r18,r18
    eaac:	94a5883a 	add	r18,r18,r18
    eab0:	34a5883a 	add	r18,r6,r18
    eab4:	a0000126 	beq	r20,zero,eabc <__hexnan+0x50>
    eab8:	94800104 	addi	r18,r18,4
    eabc:	20c00017 	ldw	r3,0(r4)
    eac0:	903fff15 	stw	zero,-4(r18)
    eac4:	947fff04 	addi	r17,r18,-4
    eac8:	18800043 	ldbu	r2,1(r3)
    eacc:	8817883a 	mov	r11,r17
    ead0:	880b883a 	mov	r5,r17
    ead4:	0011883a 	mov	r8,zero
    ead8:	001b883a 	mov	r13,zero
    eadc:	0015883a 	mov	r10,zero
    eae0:	03c00204 	movi	r15,8
    eae4:	03800804 	movi	r14,32
    eae8:	04c001c4 	movi	r19,7
    eaec:	10001b26 	beq	r2,zero,eb5c <__hexnan+0xf0>
    eaf0:	808f883a 	add	r7,r16,r2
    eaf4:	39c00003 	ldbu	r7,0(r7)
    eaf8:	3a403fcc 	andi	r9,r7,255
    eafc:	4800301e 	bne	r9,zero,ebc0 <__hexnan+0x154>
    eb00:	70804636 	bltu	r14,r2,ec1c <__hexnan+0x1b0>
    eb04:	6a80120e 	bge	r13,r10,eb50 <__hexnan+0xe4>
    eb08:	2ac00f2e 	bgeu	r5,r11,eb48 <__hexnan+0xdc>
    eb0c:	9a000e16 	blt	r19,r8,eb48 <__hexnan+0xdc>
    eb10:	7a11c83a 	sub	r8,r15,r8
    eb14:	4211883a 	add	r8,r8,r8
    eb18:	29c00017 	ldw	r7,0(r5)
    eb1c:	4211883a 	add	r8,r8,r8
    eb20:	722bc83a 	sub	r21,r14,r8
    eb24:	2805883a 	mov	r2,r5
    eb28:	12400117 	ldw	r9,4(r2)
    eb2c:	10800104 	addi	r2,r2,4
    eb30:	4d58983a 	sll	r12,r9,r21
    eb34:	3b18b03a 	or	r12,r7,r12
    eb38:	4a0ed83a 	srl	r7,r9,r8
    eb3c:	133fff15 	stw	r12,-4(r2)
    eb40:	11c00015 	stw	r7,0(r2)
    eb44:	12fff836 	bltu	r2,r11,eb28 <__hexnan+0xbc>
    eb48:	31402d36 	bltu	r6,r5,ec00 <__hexnan+0x194>
    eb4c:	02000204 	movi	r8,8
    eb50:	18c00044 	addi	r3,r3,1
    eb54:	18800043 	ldbu	r2,1(r3)
    eb58:	103fe51e 	bne	r2,zero,eaf0 <__hexnan+0x84>
    eb5c:	50003126 	beq	r10,zero,ec24 <__hexnan+0x1b8>
    eb60:	2ac0022e 	bgeu	r5,r11,eb6c <__hexnan+0x100>
    eb64:	008001c4 	movi	r2,7
    eb68:	1200520e 	bge	r2,r8,ecb4 <__hexnan+0x248>
    eb6c:	31403f2e 	bgeu	r6,r5,ec6c <__hexnan+0x200>
    eb70:	3005883a 	mov	r2,r6
    eb74:	28c00017 	ldw	r3,0(r5)
    eb78:	10800104 	addi	r2,r2,4
    eb7c:	29400104 	addi	r5,r5,4
    eb80:	10ffff15 	stw	r3,-4(r2)
    eb84:	897ffb2e 	bgeu	r17,r5,eb74 <__hexnan+0x108>
    eb88:	10000015 	stw	zero,0(r2)
    eb8c:	10800104 	addi	r2,r2,4
    eb90:	88bffd2e 	bgeu	r17,r2,eb88 <__hexnan+0x11c>
    eb94:	90bfff17 	ldw	r2,-4(r18)
    eb98:	1000071e 	bne	r2,zero,ebb8 <__hexnan+0x14c>
    eb9c:	34403c26 	beq	r6,r17,ec90 <__hexnan+0x224>
    eba0:	8805883a 	mov	r2,r17
    eba4:	00000106 	br	ebac <__hexnan+0x140>
    eba8:	30803a26 	beq	r6,r2,ec94 <__hexnan+0x228>
    ebac:	10bfff04 	addi	r2,r2,-4
    ebb0:	10c00017 	ldw	r3,0(r2)
    ebb4:	183ffc26 	beq	r3,zero,eba8 <__hexnan+0x13c>
    ebb8:	00800144 	movi	r2,5
    ebbc:	00001a06 	br	ec28 <__hexnan+0x1bc>
    ebc0:	42000044 	addi	r8,r8,1
    ebc4:	52800044 	addi	r10,r10,1
    ebc8:	7a000716 	blt	r15,r8,ebe8 <__hexnan+0x17c>
    ebcc:	28800017 	ldw	r2,0(r5)
    ebd0:	1004913a 	slli	r2,r2,4
    ebd4:	39c003cc 	andi	r7,r7,15
    ebd8:	11ceb03a 	or	r7,r2,r7
    ebdc:	29c00015 	stw	r7,0(r5)
    ebe0:	18c00044 	addi	r3,r3,1
    ebe4:	003fdb06 	br	eb54 <__hexnan+0xe8>
    ebe8:	317fd92e 	bgeu	r6,r5,eb50 <__hexnan+0xe4>
    ebec:	283fff15 	stw	zero,-4(r5)
    ebf0:	0005883a 	mov	r2,zero
    ebf4:	297fff04 	addi	r5,r5,-4
    ebf8:	02000044 	movi	r8,1
    ebfc:	003ff506 	br	ebd4 <__hexnan+0x168>
    ec00:	283fff15 	stw	zero,-4(r5)
    ec04:	297fff04 	addi	r5,r5,-4
    ec08:	501b883a 	mov	r13,r10
    ec0c:	2817883a 	mov	r11,r5
    ec10:	0011883a 	mov	r8,zero
    ec14:	18c00044 	addi	r3,r3,1
    ec18:	003fce06 	br	eb54 <__hexnan+0xe8>
    ec1c:	01c00a44 	movi	r7,41
    ec20:	11c02026 	beq	r2,r7,eca4 <__hexnan+0x238>
    ec24:	00800104 	movi	r2,4
    ec28:	dfc00917 	ldw	ra,36(sp)
    ec2c:	dd400817 	ldw	r21,32(sp)
    ec30:	dd000717 	ldw	r20,28(sp)
    ec34:	dcc00617 	ldw	r19,24(sp)
    ec38:	dc800517 	ldw	r18,20(sp)
    ec3c:	dc400417 	ldw	r17,16(sp)
    ec40:	dc000317 	ldw	r16,12(sp)
    ec44:	dec00a04 	addi	sp,sp,40
    ec48:	f800283a 	ret
    ec4c:	d9000015 	stw	r4,0(sp)
    ec50:	d9400115 	stw	r5,4(sp)
    ec54:	d9800215 	stw	r6,8(sp)
    ec58:	000e2640 	call	e264 <__hexdig_init>
    ec5c:	d9800217 	ldw	r6,8(sp)
    ec60:	d9400117 	ldw	r5,4(sp)
    ec64:	d9000017 	ldw	r4,0(sp)
    ec68:	003f8c06 	br	ea9c <__hexnan+0x30>
    ec6c:	a03fc926 	beq	r20,zero,eb94 <__hexnan+0x128>
    ec70:	00800804 	movi	r2,32
    ec74:	1529c83a 	sub	r20,r2,r20
    ec78:	00ffffc4 	movi	r3,-1
    ec7c:	90bfff17 	ldw	r2,-4(r18)
    ec80:	1d06d83a 	srl	r3,r3,r20
    ec84:	1884703a 	and	r2,r3,r2
    ec88:	90bfff15 	stw	r2,-4(r18)
    ec8c:	003fc206 	br	eb98 <__hexnan+0x12c>
    ec90:	3005883a 	mov	r2,r6
    ec94:	00c00044 	movi	r3,1
    ec98:	10c00015 	stw	r3,0(r2)
    ec9c:	00800144 	movi	r2,5
    eca0:	003fe106 	br	ec28 <__hexnan+0x1bc>
    eca4:	503fdf26 	beq	r10,zero,ec24 <__hexnan+0x1b8>
    eca8:	18c00084 	addi	r3,r3,2
    ecac:	20c00015 	stw	r3,0(r4)
    ecb0:	003fab06 	br	eb60 <__hexnan+0xf4>
    ecb4:	00800204 	movi	r2,8
    ecb8:	1211c83a 	sub	r8,r2,r8
    ecbc:	4211883a 	add	r8,r8,r8
    ecc0:	28c00017 	ldw	r3,0(r5)
    ecc4:	4211883a 	add	r8,r8,r8
    ecc8:	02400804 	movi	r9,32
    eccc:	4a13c83a 	sub	r9,r9,r8
    ecd0:	2805883a 	mov	r2,r5
    ecd4:	11000117 	ldw	r4,4(r2)
    ecd8:	10800104 	addi	r2,r2,4
    ecdc:	224e983a 	sll	r7,r4,r9
    ece0:	19ceb03a 	or	r7,r3,r7
    ece4:	2206d83a 	srl	r3,r4,r8
    ece8:	11ffff15 	stw	r7,-4(r2)
    ecec:	10c00015 	stw	r3,0(r2)
    ecf0:	12fff836 	bltu	r2,r11,ecd4 <__hexnan+0x268>
    ecf4:	003f9d06 	br	eb6c <__hexnan+0x100>

0000ecf8 <__muldi3>:
    ecf8:	defff604 	addi	sp,sp,-40
    ecfc:	dd400515 	stw	r21,20(sp)
    ed00:	dd000415 	stw	r20,16(sp)
    ed04:	257fffcc 	andi	r21,r4,65535
    ed08:	353fffcc 	andi	r20,r6,65535
    ed0c:	dcc00315 	stw	r19,12(sp)
    ed10:	3026d43a 	srli	r19,r6,16
    ed14:	dd800615 	stw	r22,24(sp)
    ed18:	dc800215 	stw	r18,8(sp)
    ed1c:	dc400115 	stw	r17,4(sp)
    ed20:	2024d43a 	srli	r18,r4,16
    ed24:	2023883a 	mov	r17,r4
    ed28:	282d883a 	mov	r22,r5
    ed2c:	a009883a 	mov	r4,r20
    ed30:	a80b883a 	mov	r5,r21
    ed34:	dfc00915 	stw	ra,36(sp)
    ed38:	df000815 	stw	fp,32(sp)
    ed3c:	ddc00715 	stw	r23,28(sp)
    ed40:	3839883a 	mov	fp,r7
    ed44:	dc000015 	stw	r16,0(sp)
    ed48:	3021883a 	mov	r16,r6
    ed4c:	00020000 	call	2000 <__mulsi3>
    ed50:	a80b883a 	mov	r5,r21
    ed54:	9809883a 	mov	r4,r19
    ed58:	102f883a 	mov	r23,r2
    ed5c:	00020000 	call	2000 <__mulsi3>
    ed60:	a009883a 	mov	r4,r20
    ed64:	900b883a 	mov	r5,r18
    ed68:	102b883a 	mov	r21,r2
    ed6c:	00020000 	call	2000 <__mulsi3>
    ed70:	9809883a 	mov	r4,r19
    ed74:	900b883a 	mov	r5,r18
    ed78:	1029883a 	mov	r20,r2
    ed7c:	00020000 	call	2000 <__mulsi3>
    ed80:	1007883a 	mov	r3,r2
    ed84:	b804d43a 	srli	r2,r23,16
    ed88:	a549883a 	add	r4,r20,r21
    ed8c:	2089883a 	add	r4,r4,r2
    ed90:	2500022e 	bgeu	r4,r20,ed9c <__muldi3+0xa4>
    ed94:	00800074 	movhi	r2,1
    ed98:	1887883a 	add	r3,r3,r2
    ed9c:	200cd43a 	srli	r6,r4,16
    eda0:	2004943a 	slli	r2,r4,16
    eda4:	e00b883a 	mov	r5,fp
    eda8:	8809883a 	mov	r4,r17
    edac:	bdffffcc 	andi	r23,r23,65535
    edb0:	19a3883a 	add	r17,r3,r6
    edb4:	15ef883a 	add	r23,r2,r23
    edb8:	00020000 	call	2000 <__mulsi3>
    edbc:	8009883a 	mov	r4,r16
    edc0:	b00b883a 	mov	r5,r22
    edc4:	1025883a 	mov	r18,r2
    edc8:	00020000 	call	2000 <__mulsi3>
    edcc:	9085883a 	add	r2,r18,r2
    edd0:	1447883a 	add	r3,r2,r17
    edd4:	b805883a 	mov	r2,r23
    edd8:	dfc00917 	ldw	ra,36(sp)
    eddc:	df000817 	ldw	fp,32(sp)
    ede0:	ddc00717 	ldw	r23,28(sp)
    ede4:	dd800617 	ldw	r22,24(sp)
    ede8:	dd400517 	ldw	r21,20(sp)
    edec:	dd000417 	ldw	r20,16(sp)
    edf0:	dcc00317 	ldw	r19,12(sp)
    edf4:	dc800217 	ldw	r18,8(sp)
    edf8:	dc400117 	ldw	r17,4(sp)
    edfc:	dc000017 	ldw	r16,0(sp)
    ee00:	dec00a04 	addi	sp,sp,40
    ee04:	f800283a 	ret

0000ee08 <__fixunsdfsi>:
    ee08:	defffd04 	addi	sp,sp,-12
    ee0c:	000d883a 	mov	r6,zero
    ee10:	01d07834 	movhi	r7,16864
    ee14:	dc400115 	stw	r17,4(sp)
    ee18:	dc000015 	stw	r16,0(sp)
    ee1c:	dfc00215 	stw	ra,8(sp)
    ee20:	2023883a 	mov	r17,r4
    ee24:	2821883a 	mov	r16,r5
    ee28:	00105c40 	call	105c4 <__gedf2>
    ee2c:	1000080e 	bge	r2,zero,ee50 <__fixunsdfsi+0x48>
    ee30:	8809883a 	mov	r4,r17
    ee34:	800b883a 	mov	r5,r16
    ee38:	00107b40 	call	107b4 <__fixdfsi>
    ee3c:	dfc00217 	ldw	ra,8(sp)
    ee40:	dc400117 	ldw	r17,4(sp)
    ee44:	dc000017 	ldw	r16,0(sp)
    ee48:	dec00304 	addi	sp,sp,12
    ee4c:	f800283a 	ret
    ee50:	000d883a 	mov	r6,zero
    ee54:	01d07834 	movhi	r7,16864
    ee58:	8809883a 	mov	r4,r17
    ee5c:	800b883a 	mov	r5,r16
    ee60:	000ffb00 	call	ffb0 <__subdf3>
    ee64:	180b883a 	mov	r5,r3
    ee68:	1009883a 	mov	r4,r2
    ee6c:	00107b40 	call	107b4 <__fixdfsi>
    ee70:	00e00034 	movhi	r3,32768
    ee74:	10c5883a 	add	r2,r2,r3
    ee78:	dfc00217 	ldw	ra,8(sp)
    ee7c:	dc400117 	ldw	r17,4(sp)
    ee80:	dc000017 	ldw	r16,0(sp)
    ee84:	dec00304 	addi	sp,sp,12
    ee88:	f800283a 	ret

0000ee8c <__udivdi3>:
    ee8c:	defff504 	addi	sp,sp,-44
    ee90:	dd000515 	stw	r20,20(sp)
    ee94:	dcc00415 	stw	r19,16(sp)
    ee98:	dc800315 	stw	r18,12(sp)
    ee9c:	dc400215 	stw	r17,8(sp)
    eea0:	dc000115 	stw	r16,4(sp)
    eea4:	dfc00a15 	stw	ra,40(sp)
    eea8:	df000915 	stw	fp,36(sp)
    eeac:	ddc00815 	stw	r23,32(sp)
    eeb0:	dd800715 	stw	r22,28(sp)
    eeb4:	dd400615 	stw	r21,24(sp)
    eeb8:	2025883a 	mov	r18,r4
    eebc:	2823883a 	mov	r17,r5
    eec0:	3021883a 	mov	r16,r6
    eec4:	2027883a 	mov	r19,r4
    eec8:	2829883a 	mov	r20,r5
    eecc:	3800451e 	bne	r7,zero,efe4 <__udivdi3+0x158>
    eed0:	2980652e 	bgeu	r5,r6,f068 <__udivdi3+0x1dc>
    eed4:	00bfffd4 	movui	r2,65535
    eed8:	1180b436 	bltu	r2,r6,f1ac <__udivdi3+0x320>
    eedc:	00803fc4 	movi	r2,255
    eee0:	11816636 	bltu	r2,r6,f47c <__udivdi3+0x5f0>
    eee4:	0005883a 	mov	r2,zero
    eee8:	0007883a 	mov	r3,zero
    eeec:	3084d83a 	srl	r2,r6,r2
    eef0:	01000074 	movhi	r4,1
    eef4:	2113cd04 	addi	r4,r4,20276
    eef8:	2085883a 	add	r2,r4,r2
    eefc:	10800003 	ldbu	r2,0(r2)
    ef00:	10c7883a 	add	r3,r2,r3
    ef04:	00800804 	movi	r2,32
    ef08:	10c5c83a 	sub	r2,r2,r3
    ef0c:	10000526 	beq	r2,zero,ef24 <__udivdi3+0x98>
    ef10:	88a2983a 	sll	r17,r17,r2
    ef14:	90c6d83a 	srl	r3,r18,r3
    ef18:	30a0983a 	sll	r16,r6,r2
    ef1c:	90a6983a 	sll	r19,r18,r2
    ef20:	88e8b03a 	or	r20,r17,r3
    ef24:	8022d43a 	srli	r17,r16,16
    ef28:	a009883a 	mov	r4,r20
    ef2c:	857fffcc 	andi	r21,r16,65535
    ef30:	880b883a 	mov	r5,r17
    ef34:	0010b2c0 	call	10b2c <__umodsi3>
    ef38:	a009883a 	mov	r4,r20
    ef3c:	880b883a 	mov	r5,r17
    ef40:	102d883a 	mov	r22,r2
    ef44:	0010b240 	call	10b24 <__udivsi3>
    ef48:	1009883a 	mov	r4,r2
    ef4c:	a80b883a 	mov	r5,r21
    ef50:	1025883a 	mov	r18,r2
    ef54:	00020000 	call	2000 <__mulsi3>
    ef58:	1009883a 	mov	r4,r2
    ef5c:	b006943a 	slli	r3,r22,16
    ef60:	9804d43a 	srli	r2,r19,16
    ef64:	1886b03a 	or	r3,r3,r2
    ef68:	1900052e 	bgeu	r3,r4,ef80 <__udivdi3+0xf4>
    ef6c:	1c07883a 	add	r3,r3,r16
    ef70:	90bfffc4 	addi	r2,r18,-1
    ef74:	1c000136 	bltu	r3,r16,ef7c <__udivdi3+0xf0>
    ef78:	19015536 	bltu	r3,r4,f4d0 <__udivdi3+0x644>
    ef7c:	1025883a 	mov	r18,r2
    ef80:	1929c83a 	sub	r20,r3,r4
    ef84:	880b883a 	mov	r5,r17
    ef88:	a009883a 	mov	r4,r20
    ef8c:	0010b2c0 	call	10b2c <__umodsi3>
    ef90:	102d883a 	mov	r22,r2
    ef94:	880b883a 	mov	r5,r17
    ef98:	a009883a 	mov	r4,r20
    ef9c:	b02c943a 	slli	r22,r22,16
    efa0:	0010b240 	call	10b24 <__udivsi3>
    efa4:	1009883a 	mov	r4,r2
    efa8:	a80b883a 	mov	r5,r21
    efac:	9cffffcc 	andi	r19,r19,65535
    efb0:	1023883a 	mov	r17,r2
    efb4:	b4e6b03a 	or	r19,r22,r19
    efb8:	00020000 	call	2000 <__mulsi3>
    efbc:	9880052e 	bgeu	r19,r2,efd4 <__udivdi3+0x148>
    efc0:	9c27883a 	add	r19,r19,r16
    efc4:	88ffffc4 	addi	r3,r17,-1
    efc8:	9c011436 	bltu	r19,r16,f41c <__udivdi3+0x590>
    efcc:	9881132e 	bgeu	r19,r2,f41c <__udivdi3+0x590>
    efd0:	8c7fff84 	addi	r17,r17,-2
    efd4:	9004943a 	slli	r2,r18,16
    efd8:	0007883a 	mov	r3,zero
    efdc:	8884b03a 	or	r2,r17,r2
    efe0:	00001506 	br	f038 <__udivdi3+0x1ac>
    efe4:	29c06a36 	bltu	r5,r7,f190 <__udivdi3+0x304>
    efe8:	00bfffd4 	movui	r2,65535
    efec:	11c06a2e 	bgeu	r2,r7,f198 <__udivdi3+0x30c>
    eff0:	00804034 	movhi	r2,256
    eff4:	10bfffc4 	addi	r2,r2,-1
    eff8:	11c11436 	bltu	r2,r7,f44c <__udivdi3+0x5c0>
    effc:	00c00404 	movi	r3,16
    f000:	180b883a 	mov	r5,r3
    f004:	38c6d83a 	srl	r3,r7,r3
    f008:	01000074 	movhi	r4,1
    f00c:	2113cd04 	addi	r4,r4,20276
    f010:	04000804 	movi	r16,32
    f014:	20c7883a 	add	r3,r4,r3
    f018:	18800003 	ldbu	r2,0(r3)
    f01c:	1145883a 	add	r2,r2,r5
    f020:	80a1c83a 	sub	r16,r16,r2
    f024:	80006e1e 	bne	r16,zero,f1e0 <__udivdi3+0x354>
    f028:	0007883a 	mov	r3,zero
    f02c:	3c406a36 	bltu	r7,r17,f1d8 <__udivdi3+0x34c>
    f030:	9180692e 	bgeu	r18,r6,f1d8 <__udivdi3+0x34c>
    f034:	0005883a 	mov	r2,zero
    f038:	dfc00a17 	ldw	ra,40(sp)
    f03c:	df000917 	ldw	fp,36(sp)
    f040:	ddc00817 	ldw	r23,32(sp)
    f044:	dd800717 	ldw	r22,28(sp)
    f048:	dd400617 	ldw	r21,24(sp)
    f04c:	dd000517 	ldw	r20,20(sp)
    f050:	dcc00417 	ldw	r19,16(sp)
    f054:	dc800317 	ldw	r18,12(sp)
    f058:	dc400217 	ldw	r17,8(sp)
    f05c:	dc000117 	ldw	r16,4(sp)
    f060:	dec00b04 	addi	sp,sp,44
    f064:	f800283a 	ret
    f068:	3000041e 	bne	r6,zero,f07c <__udivdi3+0x1f0>
    f06c:	01000044 	movi	r4,1
    f070:	000b883a 	mov	r5,zero
    f074:	0010b240 	call	10b24 <__udivsi3>
    f078:	1021883a 	mov	r16,r2
    f07c:	00bfffd4 	movui	r2,65535
    f080:	1400502e 	bgeu	r2,r16,f1c4 <__udivdi3+0x338>
    f084:	00804034 	movhi	r2,256
    f088:	10bfffc4 	addi	r2,r2,-1
    f08c:	1400f536 	bltu	r2,r16,f464 <__udivdi3+0x5d8>
    f090:	00800404 	movi	r2,16
    f094:	1007883a 	mov	r3,r2
    f098:	8084d83a 	srl	r2,r16,r2
    f09c:	01000074 	movhi	r4,1
    f0a0:	2113cd04 	addi	r4,r4,20276
    f0a4:	2085883a 	add	r2,r4,r2
    f0a8:	10800003 	ldbu	r2,0(r2)
    f0ac:	10c7883a 	add	r3,r2,r3
    f0b0:	00800804 	movi	r2,32
    f0b4:	10c5c83a 	sub	r2,r2,r3
    f0b8:	1000a01e 	bne	r2,zero,f33c <__udivdi3+0x4b0>
    f0bc:	8028d43a 	srli	r20,r16,16
    f0c0:	8c23c83a 	sub	r17,r17,r16
    f0c4:	857fffcc 	andi	r21,r16,65535
    f0c8:	00c00044 	movi	r3,1
    f0cc:	8809883a 	mov	r4,r17
    f0d0:	a00b883a 	mov	r5,r20
    f0d4:	d8c00015 	stw	r3,0(sp)
    f0d8:	0010b2c0 	call	10b2c <__umodsi3>
    f0dc:	8809883a 	mov	r4,r17
    f0e0:	a00b883a 	mov	r5,r20
    f0e4:	102d883a 	mov	r22,r2
    f0e8:	0010b240 	call	10b24 <__udivsi3>
    f0ec:	1009883a 	mov	r4,r2
    f0f0:	a80b883a 	mov	r5,r21
    f0f4:	1025883a 	mov	r18,r2
    f0f8:	00020000 	call	2000 <__mulsi3>
    f0fc:	1009883a 	mov	r4,r2
    f100:	b00c943a 	slli	r6,r22,16
    f104:	9804d43a 	srli	r2,r19,16
    f108:	d8c00017 	ldw	r3,0(sp)
    f10c:	308cb03a 	or	r6,r6,r2
    f110:	3100052e 	bgeu	r6,r4,f128 <__udivdi3+0x29c>
    f114:	340d883a 	add	r6,r6,r16
    f118:	90bfffc4 	addi	r2,r18,-1
    f11c:	34000136 	bltu	r6,r16,f124 <__udivdi3+0x298>
    f120:	3100e836 	bltu	r6,r4,f4c4 <__udivdi3+0x638>
    f124:	1025883a 	mov	r18,r2
    f128:	3123c83a 	sub	r17,r6,r4
    f12c:	8809883a 	mov	r4,r17
    f130:	a00b883a 	mov	r5,r20
    f134:	d8c00015 	stw	r3,0(sp)
    f138:	0010b2c0 	call	10b2c <__umodsi3>
    f13c:	102d883a 	mov	r22,r2
    f140:	8809883a 	mov	r4,r17
    f144:	a00b883a 	mov	r5,r20
    f148:	b02c943a 	slli	r22,r22,16
    f14c:	0010b240 	call	10b24 <__udivsi3>
    f150:	1009883a 	mov	r4,r2
    f154:	a80b883a 	mov	r5,r21
    f158:	9cffffcc 	andi	r19,r19,65535
    f15c:	1023883a 	mov	r17,r2
    f160:	b4e6b03a 	or	r19,r22,r19
    f164:	00020000 	call	2000 <__mulsi3>
    f168:	d8c00017 	ldw	r3,0(sp)
    f16c:	9880052e 	bgeu	r19,r2,f184 <__udivdi3+0x2f8>
    f170:	9c27883a 	add	r19,r19,r16
    f174:	893fffc4 	addi	r4,r17,-1
    f178:	9c00aa36 	bltu	r19,r16,f424 <__udivdi3+0x598>
    f17c:	9880a92e 	bgeu	r19,r2,f424 <__udivdi3+0x598>
    f180:	8c7fff84 	addi	r17,r17,-2
    f184:	9004943a 	slli	r2,r18,16
    f188:	8884b03a 	or	r2,r17,r2
    f18c:	003faa06 	br	f038 <__udivdi3+0x1ac>
    f190:	0007883a 	mov	r3,zero
    f194:	003fa706 	br	f034 <__udivdi3+0x1a8>
    f198:	00803fc4 	movi	r2,255
    f19c:	11c0ae36 	bltu	r2,r7,f458 <__udivdi3+0x5cc>
    f1a0:	0007883a 	mov	r3,zero
    f1a4:	000b883a 	mov	r5,zero
    f1a8:	003f9606 	br	f004 <__udivdi3+0x178>
    f1ac:	00804034 	movhi	r2,256
    f1b0:	10bfffc4 	addi	r2,r2,-1
    f1b4:	1180ae36 	bltu	r2,r6,f470 <__udivdi3+0x5e4>
    f1b8:	00800404 	movi	r2,16
    f1bc:	1007883a 	mov	r3,r2
    f1c0:	003f4a06 	br	eeec <__udivdi3+0x60>
    f1c4:	00803fc4 	movi	r2,255
    f1c8:	1400af36 	bltu	r2,r16,f488 <__udivdi3+0x5fc>
    f1cc:	0005883a 	mov	r2,zero
    f1d0:	0007883a 	mov	r3,zero
    f1d4:	003fb006 	br	f098 <__udivdi3+0x20c>
    f1d8:	00800044 	movi	r2,1
    f1dc:	003f9606 	br	f038 <__udivdi3+0x1ac>
    f1e0:	3c0e983a 	sll	r7,r7,r16
    f1e4:	3086d83a 	srl	r3,r6,r2
    f1e8:	88aed83a 	srl	r23,r17,r2
    f1ec:	9084d83a 	srl	r2,r18,r2
    f1f0:	38e6b03a 	or	r19,r7,r3
    f1f4:	9828d43a 	srli	r20,r19,16
    f1f8:	8c22983a 	sll	r17,r17,r16
    f1fc:	b809883a 	mov	r4,r23
    f200:	a00b883a 	mov	r5,r20
    f204:	342a983a 	sll	r21,r6,r16
    f208:	88a2b03a 	or	r17,r17,r2
    f20c:	0010b2c0 	call	10b2c <__umodsi3>
    f210:	b809883a 	mov	r4,r23
    f214:	a00b883a 	mov	r5,r20
    f218:	1039883a 	mov	fp,r2
    f21c:	9dbfffcc 	andi	r22,r19,65535
    f220:	0010b240 	call	10b24 <__udivsi3>
    f224:	1009883a 	mov	r4,r2
    f228:	b00b883a 	mov	r5,r22
    f22c:	102f883a 	mov	r23,r2
    f230:	00020000 	call	2000 <__mulsi3>
    f234:	1009883a 	mov	r4,r2
    f238:	e00e943a 	slli	r7,fp,16
    f23c:	8804d43a 	srli	r2,r17,16
    f240:	388eb03a 	or	r7,r7,r2
    f244:	3900042e 	bgeu	r7,r4,f258 <__udivdi3+0x3cc>
    f248:	3ccf883a 	add	r7,r7,r19
    f24c:	b8bfffc4 	addi	r2,r23,-1
    f250:	3cc0942e 	bgeu	r7,r19,f4a4 <__udivdi3+0x618>
    f254:	102f883a 	mov	r23,r2
    f258:	3939c83a 	sub	fp,r7,r4
    f25c:	a00b883a 	mov	r5,r20
    f260:	e009883a 	mov	r4,fp
    f264:	0010b2c0 	call	10b2c <__umodsi3>
    f268:	a00b883a 	mov	r5,r20
    f26c:	e009883a 	mov	r4,fp
    f270:	d8800015 	stw	r2,0(sp)
    f274:	0010b240 	call	10b24 <__udivsi3>
    f278:	1009883a 	mov	r4,r2
    f27c:	b00b883a 	mov	r5,r22
    f280:	1029883a 	mov	r20,r2
    f284:	00020000 	call	2000 <__mulsi3>
    f288:	d8c00017 	ldw	r3,0(sp)
    f28c:	8c7fffcc 	andi	r17,r17,65535
    f290:	1806943a 	slli	r3,r3,16
    f294:	1c46b03a 	or	r3,r3,r17
    f298:	1880042e 	bgeu	r3,r2,f2ac <__udivdi3+0x420>
    f29c:	1cc7883a 	add	r3,r3,r19
    f2a0:	a13fffc4 	addi	r4,r20,-1
    f2a4:	1cc07b2e 	bgeu	r3,r19,f494 <__udivdi3+0x608>
    f2a8:	2029883a 	mov	r20,r4
    f2ac:	b82e943a 	slli	r23,r23,16
    f2b0:	a822d43a 	srli	r17,r21,16
    f2b4:	ad7fffcc 	andi	r21,r21,65535
    f2b8:	a5e8b03a 	or	r20,r20,r23
    f2bc:	a5bfffcc 	andi	r22,r20,65535
    f2c0:	b009883a 	mov	r4,r22
    f2c4:	a80b883a 	mov	r5,r21
    f2c8:	18afc83a 	sub	r23,r3,r2
    f2cc:	a026d43a 	srli	r19,r20,16
    f2d0:	00020000 	call	2000 <__mulsi3>
    f2d4:	b009883a 	mov	r4,r22
    f2d8:	880b883a 	mov	r5,r17
    f2dc:	1039883a 	mov	fp,r2
    f2e0:	00020000 	call	2000 <__mulsi3>
    f2e4:	a80b883a 	mov	r5,r21
    f2e8:	9809883a 	mov	r4,r19
    f2ec:	102d883a 	mov	r22,r2
    f2f0:	00020000 	call	2000 <__mulsi3>
    f2f4:	9809883a 	mov	r4,r19
    f2f8:	880b883a 	mov	r5,r17
    f2fc:	102b883a 	mov	r21,r2
    f300:	00020000 	call	2000 <__mulsi3>
    f304:	100b883a 	mov	r5,r2
    f308:	e004d43a 	srli	r2,fp,16
    f30c:	ad89883a 	add	r4,r21,r22
    f310:	2089883a 	add	r4,r4,r2
    f314:	2540022e 	bgeu	r4,r21,f320 <__udivdi3+0x494>
    f318:	00800074 	movhi	r2,1
    f31c:	288b883a 	add	r5,r5,r2
    f320:	2004d43a 	srli	r2,r4,16
    f324:	288b883a 	add	r5,r5,r2
    f328:	b9404536 	bltu	r23,r5,f440 <__udivdi3+0x5b4>
    f32c:	b9403f26 	beq	r23,r5,f42c <__udivdi3+0x5a0>
    f330:	a005883a 	mov	r2,r20
    f334:	0007883a 	mov	r3,zero
    f338:	003f3f06 	br	f038 <__udivdi3+0x1ac>
    f33c:	80a0983a 	sll	r16,r16,r2
    f340:	88eed83a 	srl	r23,r17,r3
    f344:	90c6d83a 	srl	r3,r18,r3
    f348:	8028d43a 	srli	r20,r16,16
    f34c:	88a2983a 	sll	r17,r17,r2
    f350:	b809883a 	mov	r4,r23
    f354:	a00b883a 	mov	r5,r20
    f358:	88ecb03a 	or	r22,r17,r3
    f35c:	90a6983a 	sll	r19,r18,r2
    f360:	0010b2c0 	call	10b2c <__umodsi3>
    f364:	b809883a 	mov	r4,r23
    f368:	a00b883a 	mov	r5,r20
    f36c:	1023883a 	mov	r17,r2
    f370:	857fffcc 	andi	r21,r16,65535
    f374:	0010b240 	call	10b24 <__udivsi3>
    f378:	1009883a 	mov	r4,r2
    f37c:	a80b883a 	mov	r5,r21
    f380:	102f883a 	mov	r23,r2
    f384:	00020000 	call	2000 <__mulsi3>
    f388:	1009883a 	mov	r4,r2
    f38c:	880a943a 	slli	r5,r17,16
    f390:	b004d43a 	srli	r2,r22,16
    f394:	288ab03a 	or	r5,r5,r2
    f398:	2900062e 	bgeu	r5,r4,f3b4 <__udivdi3+0x528>
    f39c:	2c0b883a 	add	r5,r5,r16
    f3a0:	b8bfffc4 	addi	r2,r23,-1
    f3a4:	2c004536 	bltu	r5,r16,f4bc <__udivdi3+0x630>
    f3a8:	2900442e 	bgeu	r5,r4,f4bc <__udivdi3+0x630>
    f3ac:	bdffff84 	addi	r23,r23,-2
    f3b0:	2c0b883a 	add	r5,r5,r16
    f3b4:	2925c83a 	sub	r18,r5,r4
    f3b8:	9009883a 	mov	r4,r18
    f3bc:	a00b883a 	mov	r5,r20
    f3c0:	0010b2c0 	call	10b2c <__umodsi3>
    f3c4:	1023883a 	mov	r17,r2
    f3c8:	9009883a 	mov	r4,r18
    f3cc:	a00b883a 	mov	r5,r20
    f3d0:	8822943a 	slli	r17,r17,16
    f3d4:	0010b240 	call	10b24 <__udivsi3>
    f3d8:	1009883a 	mov	r4,r2
    f3dc:	a80b883a 	mov	r5,r21
    f3e0:	b5bfffcc 	andi	r22,r22,65535
    f3e4:	1025883a 	mov	r18,r2
    f3e8:	8da2b03a 	or	r17,r17,r22
    f3ec:	00020000 	call	2000 <__mulsi3>
    f3f0:	8880062e 	bgeu	r17,r2,f40c <__udivdi3+0x580>
    f3f4:	8c23883a 	add	r17,r17,r16
    f3f8:	90ffffc4 	addi	r3,r18,-1
    f3fc:	8c002d36 	bltu	r17,r16,f4b4 <__udivdi3+0x628>
    f400:	88802c2e 	bgeu	r17,r2,f4b4 <__udivdi3+0x628>
    f404:	94bfff84 	addi	r18,r18,-2
    f408:	8c23883a 	add	r17,r17,r16
    f40c:	b806943a 	slli	r3,r23,16
    f410:	88a3c83a 	sub	r17,r17,r2
    f414:	90c6b03a 	or	r3,r18,r3
    f418:	003f2c06 	br	f0cc <__udivdi3+0x240>
    f41c:	1823883a 	mov	r17,r3
    f420:	003eec06 	br	efd4 <__udivdi3+0x148>
    f424:	2023883a 	mov	r17,r4
    f428:	003f5606 	br	f184 <__udivdi3+0x2f8>
    f42c:	2008943a 	slli	r4,r4,16
    f430:	9420983a 	sll	r16,r18,r16
    f434:	e73fffcc 	andi	fp,fp,65535
    f438:	2709883a 	add	r4,r4,fp
    f43c:	813fbc2e 	bgeu	r16,r4,f330 <__udivdi3+0x4a4>
    f440:	a0bfffc4 	addi	r2,r20,-1
    f444:	0007883a 	mov	r3,zero
    f448:	003efb06 	br	f038 <__udivdi3+0x1ac>
    f44c:	00c00604 	movi	r3,24
    f450:	180b883a 	mov	r5,r3
    f454:	003eeb06 	br	f004 <__udivdi3+0x178>
    f458:	00c00204 	movi	r3,8
    f45c:	180b883a 	mov	r5,r3
    f460:	003ee806 	br	f004 <__udivdi3+0x178>
    f464:	00800604 	movi	r2,24
    f468:	1007883a 	mov	r3,r2
    f46c:	003f0a06 	br	f098 <__udivdi3+0x20c>
    f470:	00800604 	movi	r2,24
    f474:	1007883a 	mov	r3,r2
    f478:	003e9c06 	br	eeec <__udivdi3+0x60>
    f47c:	00800204 	movi	r2,8
    f480:	1007883a 	mov	r3,r2
    f484:	003e9906 	br	eeec <__udivdi3+0x60>
    f488:	00800204 	movi	r2,8
    f48c:	1007883a 	mov	r3,r2
    f490:	003f0106 	br	f098 <__udivdi3+0x20c>
    f494:	18bf842e 	bgeu	r3,r2,f2a8 <__udivdi3+0x41c>
    f498:	a53fff84 	addi	r20,r20,-2
    f49c:	1cc7883a 	add	r3,r3,r19
    f4a0:	003f8206 	br	f2ac <__udivdi3+0x420>
    f4a4:	393f6b2e 	bgeu	r7,r4,f254 <__udivdi3+0x3c8>
    f4a8:	bdffff84 	addi	r23,r23,-2
    f4ac:	3ccf883a 	add	r7,r7,r19
    f4b0:	003f6906 	br	f258 <__udivdi3+0x3cc>
    f4b4:	1825883a 	mov	r18,r3
    f4b8:	003fd406 	br	f40c <__udivdi3+0x580>
    f4bc:	102f883a 	mov	r23,r2
    f4c0:	003fbc06 	br	f3b4 <__udivdi3+0x528>
    f4c4:	94bfff84 	addi	r18,r18,-2
    f4c8:	340d883a 	add	r6,r6,r16
    f4cc:	003f1606 	br	f128 <__udivdi3+0x29c>
    f4d0:	94bfff84 	addi	r18,r18,-2
    f4d4:	1c07883a 	add	r3,r3,r16
    f4d8:	003ea906 	br	ef80 <__udivdi3+0xf4>

0000f4dc <__umoddi3>:
    f4dc:	defff304 	addi	sp,sp,-52
    f4e0:	dd000715 	stw	r20,28(sp)
    f4e4:	dcc00615 	stw	r19,24(sp)
    f4e8:	dc800515 	stw	r18,20(sp)
    f4ec:	dc400415 	stw	r17,16(sp)
    f4f0:	dc000315 	stw	r16,12(sp)
    f4f4:	dfc00c15 	stw	ra,48(sp)
    f4f8:	df000b15 	stw	fp,44(sp)
    f4fc:	ddc00a15 	stw	r23,40(sp)
    f500:	dd800915 	stw	r22,36(sp)
    f504:	dd400815 	stw	r21,32(sp)
    f508:	2025883a 	mov	r18,r4
    f50c:	2823883a 	mov	r17,r5
    f510:	3021883a 	mov	r16,r6
    f514:	2027883a 	mov	r19,r4
    f518:	2829883a 	mov	r20,r5
    f51c:	38003a1e 	bne	r7,zero,f608 <__umoddi3+0x12c>
    f520:	2980522e 	bgeu	r5,r6,f66c <__umoddi3+0x190>
    f524:	00bfffd4 	movui	r2,65535
    f528:	1180a436 	bltu	r2,r6,f7bc <__umoddi3+0x2e0>
    f52c:	00803fc4 	movi	r2,255
    f530:	11816036 	bltu	r2,r6,fab4 <__umoddi3+0x5d8>
    f534:	0005883a 	mov	r2,zero
    f538:	0009883a 	mov	r4,zero
    f53c:	3084d83a 	srl	r2,r6,r2
    f540:	00c00074 	movhi	r3,1
    f544:	18d3cd04 	addi	r3,r3,20276
    f548:	05400804 	movi	r21,32
    f54c:	1885883a 	add	r2,r3,r2
    f550:	10800003 	ldbu	r2,0(r2)
    f554:	1109883a 	add	r4,r2,r4
    f558:	a92bc83a 	sub	r21,r21,r4
    f55c:	a8010e26 	beq	r21,zero,f998 <__umoddi3+0x4bc>
    f560:	8d62983a 	sll	r17,r17,r21
    f564:	9108d83a 	srl	r4,r18,r4
    f568:	3560983a 	sll	r16,r6,r21
    f56c:	9566983a 	sll	r19,r18,r21
    f570:	8928b03a 	or	r20,r17,r4
    f574:	8022d43a 	srli	r17,r16,16
    f578:	a009883a 	mov	r4,r20
    f57c:	84bfffcc 	andi	r18,r16,65535
    f580:	880b883a 	mov	r5,r17
    f584:	0010b2c0 	call	10b2c <__umodsi3>
    f588:	a009883a 	mov	r4,r20
    f58c:	880b883a 	mov	r5,r17
    f590:	102d883a 	mov	r22,r2
    f594:	0010b240 	call	10b24 <__udivsi3>
    f598:	1009883a 	mov	r4,r2
    f59c:	900b883a 	mov	r5,r18
    f5a0:	00020000 	call	2000 <__mulsi3>
    f5a4:	1009883a 	mov	r4,r2
    f5a8:	b006943a 	slli	r3,r22,16
    f5ac:	9804d43a 	srli	r2,r19,16
    f5b0:	1886b03a 	or	r3,r3,r2
    f5b4:	1900042e 	bgeu	r3,r4,f5c8 <__umoddi3+0xec>
    f5b8:	1c07883a 	add	r3,r3,r16
    f5bc:	1c000236 	bltu	r3,r16,f5c8 <__umoddi3+0xec>
    f5c0:	1900012e 	bgeu	r3,r4,f5c8 <__umoddi3+0xec>
    f5c4:	1c07883a 	add	r3,r3,r16
    f5c8:	1929c83a 	sub	r20,r3,r4
    f5cc:	a009883a 	mov	r4,r20
    f5d0:	880b883a 	mov	r5,r17
    f5d4:	0010b2c0 	call	10b2c <__umodsi3>
    f5d8:	102d883a 	mov	r22,r2
    f5dc:	a009883a 	mov	r4,r20
    f5e0:	880b883a 	mov	r5,r17
    f5e4:	b02c943a 	slli	r22,r22,16
    f5e8:	0010b240 	call	10b24 <__udivsi3>
    f5ec:	1009883a 	mov	r4,r2
    f5f0:	900b883a 	mov	r5,r18
    f5f4:	9cffffcc 	andi	r19,r19,65535
    f5f8:	00020000 	call	2000 <__mulsi3>
    f5fc:	b4e6b03a 	or	r19,r22,r19
    f600:	9880572e 	bgeu	r19,r2,f760 <__umoddi3+0x284>
    f604:	00005206 	br	f750 <__umoddi3+0x274>
    f608:	29c05936 	bltu	r5,r7,f770 <__umoddi3+0x294>
    f60c:	00bfffd4 	movui	r2,65535
    f610:	11c0652e 	bgeu	r2,r7,f7a8 <__umoddi3+0x2cc>
    f614:	00804034 	movhi	r2,256
    f618:	10bfffc4 	addi	r2,r2,-1
    f61c:	11c11936 	bltu	r2,r7,fa84 <__umoddi3+0x5a8>
    f620:	00c00404 	movi	r3,16
    f624:	1827883a 	mov	r19,r3
    f628:	38c6d83a 	srl	r3,r7,r3
    f62c:	01000074 	movhi	r4,1
    f630:	2113cd04 	addi	r4,r4,20276
    f634:	04000804 	movi	r16,32
    f638:	20c7883a 	add	r3,r4,r3
    f63c:	18800003 	ldbu	r2,0(r3)
    f640:	14e7883a 	add	r19,r2,r19
    f644:	84e1c83a 	sub	r16,r16,r19
    f648:	8000671e 	bne	r16,zero,f7e8 <__umoddi3+0x30c>
    f64c:	3c400136 	bltu	r7,r17,f654 <__umoddi3+0x178>
    f650:	91812536 	bltu	r18,r6,fae8 <__umoddi3+0x60c>
    f654:	9185c83a 	sub	r2,r18,r6
    f658:	89e3c83a 	sub	r17,r17,r7
    f65c:	90a5803a 	cmpltu	r18,r18,r2
    f660:	8ca9c83a 	sub	r20,r17,r18
    f664:	a007883a 	mov	r3,r20
    f668:	00004306 	br	f778 <__umoddi3+0x29c>
    f66c:	3000041e 	bne	r6,zero,f680 <__umoddi3+0x1a4>
    f670:	01000044 	movi	r4,1
    f674:	000b883a 	mov	r5,zero
    f678:	0010b240 	call	10b24 <__udivsi3>
    f67c:	1021883a 	mov	r16,r2
    f680:	00bfffd4 	movui	r2,65535
    f684:	1400532e 	bgeu	r2,r16,f7d4 <__umoddi3+0x2f8>
    f688:	00804034 	movhi	r2,256
    f68c:	10bfffc4 	addi	r2,r2,-1
    f690:	14010536 	bltu	r2,r16,faa8 <__umoddi3+0x5cc>
    f694:	00800404 	movi	r2,16
    f698:	1007883a 	mov	r3,r2
    f69c:	8084d83a 	srl	r2,r16,r2
    f6a0:	01000074 	movhi	r4,1
    f6a4:	2113cd04 	addi	r4,r4,20276
    f6a8:	05400804 	movi	r21,32
    f6ac:	2085883a 	add	r2,r4,r2
    f6b0:	10800003 	ldbu	r2,0(r2)
    f6b4:	10c7883a 	add	r3,r2,r3
    f6b8:	a8ebc83a 	sub	r21,r21,r3
    f6bc:	a800b81e 	bne	r21,zero,f9a0 <__umoddi3+0x4c4>
    f6c0:	8028d43a 	srli	r20,r16,16
    f6c4:	8c23c83a 	sub	r17,r17,r16
    f6c8:	85bfffcc 	andi	r22,r16,65535
    f6cc:	8809883a 	mov	r4,r17
    f6d0:	a00b883a 	mov	r5,r20
    f6d4:	0010b2c0 	call	10b2c <__umodsi3>
    f6d8:	8809883a 	mov	r4,r17
    f6dc:	a00b883a 	mov	r5,r20
    f6e0:	1025883a 	mov	r18,r2
    f6e4:	0010b240 	call	10b24 <__udivsi3>
    f6e8:	1009883a 	mov	r4,r2
    f6ec:	b00b883a 	mov	r5,r22
    f6f0:	00020000 	call	2000 <__mulsi3>
    f6f4:	1009883a 	mov	r4,r2
    f6f8:	9006943a 	slli	r3,r18,16
    f6fc:	9804d43a 	srli	r2,r19,16
    f700:	1886b03a 	or	r3,r3,r2
    f704:	1900032e 	bgeu	r3,r4,f714 <__umoddi3+0x238>
    f708:	1c07883a 	add	r3,r3,r16
    f70c:	1c000136 	bltu	r3,r16,f714 <__umoddi3+0x238>
    f710:	1900f336 	bltu	r3,r4,fae0 <__umoddi3+0x604>
    f714:	1923c83a 	sub	r17,r3,r4
    f718:	8809883a 	mov	r4,r17
    f71c:	a00b883a 	mov	r5,r20
    f720:	0010b2c0 	call	10b2c <__umodsi3>
    f724:	102f883a 	mov	r23,r2
    f728:	8809883a 	mov	r4,r17
    f72c:	a00b883a 	mov	r5,r20
    f730:	b82e943a 	slli	r23,r23,16
    f734:	0010b240 	call	10b24 <__udivsi3>
    f738:	1009883a 	mov	r4,r2
    f73c:	b00b883a 	mov	r5,r22
    f740:	9cffffcc 	andi	r19,r19,65535
    f744:	00020000 	call	2000 <__mulsi3>
    f748:	bce6b03a 	or	r19,r23,r19
    f74c:	9880042e 	bgeu	r19,r2,f760 <__umoddi3+0x284>
    f750:	9c27883a 	add	r19,r19,r16
    f754:	9c000236 	bltu	r19,r16,f760 <__umoddi3+0x284>
    f758:	9880012e 	bgeu	r19,r2,f760 <__umoddi3+0x284>
    f75c:	9c27883a 	add	r19,r19,r16
    f760:	9885c83a 	sub	r2,r19,r2
    f764:	1544d83a 	srl	r2,r2,r21
    f768:	0007883a 	mov	r3,zero
    f76c:	00000206 	br	f778 <__umoddi3+0x29c>
    f770:	2005883a 	mov	r2,r4
    f774:	2807883a 	mov	r3,r5
    f778:	dfc00c17 	ldw	ra,48(sp)
    f77c:	df000b17 	ldw	fp,44(sp)
    f780:	ddc00a17 	ldw	r23,40(sp)
    f784:	dd800917 	ldw	r22,36(sp)
    f788:	dd400817 	ldw	r21,32(sp)
    f78c:	dd000717 	ldw	r20,28(sp)
    f790:	dcc00617 	ldw	r19,24(sp)
    f794:	dc800517 	ldw	r18,20(sp)
    f798:	dc400417 	ldw	r17,16(sp)
    f79c:	dc000317 	ldw	r16,12(sp)
    f7a0:	dec00d04 	addi	sp,sp,52
    f7a4:	f800283a 	ret
    f7a8:	00803fc4 	movi	r2,255
    f7ac:	11c0b236 	bltu	r2,r7,fa78 <__umoddi3+0x59c>
    f7b0:	0007883a 	mov	r3,zero
    f7b4:	0027883a 	mov	r19,zero
    f7b8:	003f9b06 	br	f628 <__umoddi3+0x14c>
    f7bc:	00804034 	movhi	r2,256
    f7c0:	10bfffc4 	addi	r2,r2,-1
    f7c4:	1180b236 	bltu	r2,r6,fa90 <__umoddi3+0x5b4>
    f7c8:	00800404 	movi	r2,16
    f7cc:	1009883a 	mov	r4,r2
    f7d0:	003f5a06 	br	f53c <__umoddi3+0x60>
    f7d4:	00803fc4 	movi	r2,255
    f7d8:	1400b036 	bltu	r2,r16,fa9c <__umoddi3+0x5c0>
    f7dc:	0005883a 	mov	r2,zero
    f7e0:	0007883a 	mov	r3,zero
    f7e4:	003fad06 	br	f69c <__umoddi3+0x1c0>
    f7e8:	34c4d83a 	srl	r2,r6,r19
    f7ec:	3c0e983a 	sll	r7,r7,r16
    f7f0:	8cf8d83a 	srl	fp,r17,r19
    f7f4:	8c22983a 	sll	r17,r17,r16
    f7f8:	38a8b03a 	or	r20,r7,r2
    f7fc:	a02ad43a 	srli	r21,r20,16
    f800:	94c4d83a 	srl	r2,r18,r19
    f804:	e009883a 	mov	r4,fp
    f808:	a80b883a 	mov	r5,r21
    f80c:	342c983a 	sll	r22,r6,r16
    f810:	88a2b03a 	or	r17,r17,r2
    f814:	0010b2c0 	call	10b2c <__umodsi3>
    f818:	e009883a 	mov	r4,fp
    f81c:	a80b883a 	mov	r5,r21
    f820:	a5ffffcc 	andi	r23,r20,65535
    f824:	d8800215 	stw	r2,8(sp)
    f828:	0010b240 	call	10b24 <__udivsi3>
    f82c:	1009883a 	mov	r4,r2
    f830:	b80b883a 	mov	r5,r23
    f834:	1039883a 	mov	fp,r2
    f838:	00020000 	call	2000 <__mulsi3>
    f83c:	d8c00217 	ldw	r3,8(sp)
    f840:	1009883a 	mov	r4,r2
    f844:	8804d43a 	srli	r2,r17,16
    f848:	1806943a 	slli	r3,r3,16
    f84c:	9424983a 	sll	r18,r18,r16
    f850:	1886b03a 	or	r3,r3,r2
    f854:	1900042e 	bgeu	r3,r4,f868 <__umoddi3+0x38c>
    f858:	1d07883a 	add	r3,r3,r20
    f85c:	e0bfffc4 	addi	r2,fp,-1
    f860:	1d009b2e 	bgeu	r3,r20,fad0 <__umoddi3+0x5f4>
    f864:	1039883a 	mov	fp,r2
    f868:	1907c83a 	sub	r3,r3,r4
    f86c:	1809883a 	mov	r4,r3
    f870:	a80b883a 	mov	r5,r21
    f874:	d8c00215 	stw	r3,8(sp)
    f878:	0010b2c0 	call	10b2c <__umodsi3>
    f87c:	d8c00217 	ldw	r3,8(sp)
    f880:	a80b883a 	mov	r5,r21
    f884:	d8800015 	stw	r2,0(sp)
    f888:	1809883a 	mov	r4,r3
    f88c:	0010b240 	call	10b24 <__udivsi3>
    f890:	1009883a 	mov	r4,r2
    f894:	b80b883a 	mov	r5,r23
    f898:	102b883a 	mov	r21,r2
    f89c:	00020000 	call	2000 <__mulsi3>
    f8a0:	d9c00017 	ldw	r7,0(sp)
    f8a4:	8c7fffcc 	andi	r17,r17,65535
    f8a8:	380e943a 	slli	r7,r7,16
    f8ac:	3c4eb03a 	or	r7,r7,r17
    f8b0:	3880042e 	bgeu	r7,r2,f8c4 <__umoddi3+0x3e8>
    f8b4:	3d0f883a 	add	r7,r7,r20
    f8b8:	a8ffffc4 	addi	r3,r21,-1
    f8bc:	3d00802e 	bgeu	r7,r20,fac0 <__umoddi3+0x5e4>
    f8c0:	182b883a 	mov	r21,r3
    f8c4:	e038943a 	slli	fp,fp,16
    f8c8:	b010d43a 	srli	r8,r22,16
    f8cc:	b1bfffcc 	andi	r6,r22,65535
    f8d0:	af2ab03a 	or	r21,r21,fp
    f8d4:	a82ed43a 	srli	r23,r21,16
    f8d8:	ad7fffcc 	andi	r21,r21,65535
    f8dc:	300b883a 	mov	r5,r6
    f8e0:	a809883a 	mov	r4,r21
    f8e4:	38a3c83a 	sub	r17,r7,r2
    f8e8:	d9800115 	stw	r6,4(sp)
    f8ec:	da000015 	stw	r8,0(sp)
    f8f0:	00020000 	call	2000 <__mulsi3>
    f8f4:	da000017 	ldw	r8,0(sp)
    f8f8:	a809883a 	mov	r4,r21
    f8fc:	1039883a 	mov	fp,r2
    f900:	400b883a 	mov	r5,r8
    f904:	da000215 	stw	r8,8(sp)
    f908:	00020000 	call	2000 <__mulsi3>
    f90c:	d9800117 	ldw	r6,4(sp)
    f910:	b809883a 	mov	r4,r23
    f914:	d8800015 	stw	r2,0(sp)
    f918:	300b883a 	mov	r5,r6
    f91c:	00020000 	call	2000 <__mulsi3>
    f920:	d8c00217 	ldw	r3,8(sp)
    f924:	b809883a 	mov	r4,r23
    f928:	102b883a 	mov	r21,r2
    f92c:	180b883a 	mov	r5,r3
    f930:	00020000 	call	2000 <__mulsi3>
    f934:	d9c00017 	ldw	r7,0(sp)
    f938:	1007883a 	mov	r3,r2
    f93c:	e004d43a 	srli	r2,fp,16
    f940:	a9c9883a 	add	r4,r21,r7
    f944:	2089883a 	add	r4,r4,r2
    f948:	2540022e 	bgeu	r4,r21,f954 <__umoddi3+0x478>
    f94c:	00800074 	movhi	r2,1
    f950:	1887883a 	add	r3,r3,r2
    f954:	2004d43a 	srli	r2,r4,16
    f958:	2008943a 	slli	r4,r4,16
    f95c:	e73fffcc 	andi	fp,fp,65535
    f960:	1887883a 	add	r3,r3,r2
    f964:	2709883a 	add	r4,r4,fp
    f968:	88c03d36 	bltu	r17,r3,fa60 <__umoddi3+0x584>
    f96c:	88c06126 	beq	r17,r3,faf4 <__umoddi3+0x618>
    f970:	88c7c83a 	sub	r3,r17,r3
    f974:	202d883a 	mov	r22,r4
    f978:	95adc83a 	sub	r22,r18,r22
    f97c:	95a5803a 	cmpltu	r18,r18,r22
    f980:	1c87c83a 	sub	r3,r3,r18
    f984:	1cc4983a 	sll	r2,r3,r19
    f988:	b42cd83a 	srl	r22,r22,r16
    f98c:	1c06d83a 	srl	r3,r3,r16
    f990:	1584b03a 	or	r2,r2,r22
    f994:	003f7806 	br	f778 <__umoddi3+0x29c>
    f998:	002b883a 	mov	r21,zero
    f99c:	003ef506 	br	f574 <__umoddi3+0x98>
    f9a0:	8560983a 	sll	r16,r16,r21
    f9a4:	88e6d83a 	srl	r19,r17,r3
    f9a8:	90c6d83a 	srl	r3,r18,r3
    f9ac:	8028d43a 	srli	r20,r16,16
    f9b0:	8d62983a 	sll	r17,r17,r21
    f9b4:	9809883a 	mov	r4,r19
    f9b8:	a00b883a 	mov	r5,r20
    f9bc:	88eeb03a 	or	r23,r17,r3
    f9c0:	0010b2c0 	call	10b2c <__umodsi3>
    f9c4:	9809883a 	mov	r4,r19
    f9c8:	a00b883a 	mov	r5,r20
    f9cc:	1023883a 	mov	r17,r2
    f9d0:	85bfffcc 	andi	r22,r16,65535
    f9d4:	0010b240 	call	10b24 <__udivsi3>
    f9d8:	1009883a 	mov	r4,r2
    f9dc:	b00b883a 	mov	r5,r22
    f9e0:	00020000 	call	2000 <__mulsi3>
    f9e4:	1007883a 	mov	r3,r2
    f9e8:	8808943a 	slli	r4,r17,16
    f9ec:	b804d43a 	srli	r2,r23,16
    f9f0:	9566983a 	sll	r19,r18,r21
    f9f4:	2088b03a 	or	r4,r4,r2
    f9f8:	20c0042e 	bgeu	r4,r3,fa0c <__umoddi3+0x530>
    f9fc:	2409883a 	add	r4,r4,r16
    fa00:	24000236 	bltu	r4,r16,fa0c <__umoddi3+0x530>
    fa04:	20c0012e 	bgeu	r4,r3,fa0c <__umoddi3+0x530>
    fa08:	2409883a 	add	r4,r4,r16
    fa0c:	20e5c83a 	sub	r18,r4,r3
    fa10:	9009883a 	mov	r4,r18
    fa14:	a00b883a 	mov	r5,r20
    fa18:	0010b2c0 	call	10b2c <__umodsi3>
    fa1c:	1023883a 	mov	r17,r2
    fa20:	9009883a 	mov	r4,r18
    fa24:	a00b883a 	mov	r5,r20
    fa28:	8822943a 	slli	r17,r17,16
    fa2c:	0010b240 	call	10b24 <__udivsi3>
    fa30:	1009883a 	mov	r4,r2
    fa34:	b00b883a 	mov	r5,r22
    fa38:	bdffffcc 	andi	r23,r23,65535
    fa3c:	00020000 	call	2000 <__mulsi3>
    fa40:	8de2b03a 	or	r17,r17,r23
    fa44:	8880042e 	bgeu	r17,r2,fa58 <__umoddi3+0x57c>
    fa48:	8c23883a 	add	r17,r17,r16
    fa4c:	8c000236 	bltu	r17,r16,fa58 <__umoddi3+0x57c>
    fa50:	8880012e 	bgeu	r17,r2,fa58 <__umoddi3+0x57c>
    fa54:	8c23883a 	add	r17,r17,r16
    fa58:	88a3c83a 	sub	r17,r17,r2
    fa5c:	003f1b06 	br	f6cc <__umoddi3+0x1f0>
    fa60:	25adc83a 	sub	r22,r4,r22
    fa64:	1d07c83a 	sub	r3,r3,r20
    fa68:	2589803a 	cmpltu	r4,r4,r22
    fa6c:	1907c83a 	sub	r3,r3,r4
    fa70:	88c7c83a 	sub	r3,r17,r3
    fa74:	003fc006 	br	f978 <__umoddi3+0x49c>
    fa78:	00c00204 	movi	r3,8
    fa7c:	1827883a 	mov	r19,r3
    fa80:	003ee906 	br	f628 <__umoddi3+0x14c>
    fa84:	00c00604 	movi	r3,24
    fa88:	1827883a 	mov	r19,r3
    fa8c:	003ee606 	br	f628 <__umoddi3+0x14c>
    fa90:	00800604 	movi	r2,24
    fa94:	1009883a 	mov	r4,r2
    fa98:	003ea806 	br	f53c <__umoddi3+0x60>
    fa9c:	00800204 	movi	r2,8
    faa0:	1007883a 	mov	r3,r2
    faa4:	003efd06 	br	f69c <__umoddi3+0x1c0>
    faa8:	00800604 	movi	r2,24
    faac:	1007883a 	mov	r3,r2
    fab0:	003efa06 	br	f69c <__umoddi3+0x1c0>
    fab4:	00800204 	movi	r2,8
    fab8:	1009883a 	mov	r4,r2
    fabc:	003e9f06 	br	f53c <__umoddi3+0x60>
    fac0:	38bf7f2e 	bgeu	r7,r2,f8c0 <__umoddi3+0x3e4>
    fac4:	ad7fff84 	addi	r21,r21,-2
    fac8:	3d0f883a 	add	r7,r7,r20
    facc:	003f7d06 	br	f8c4 <__umoddi3+0x3e8>
    fad0:	193f642e 	bgeu	r3,r4,f864 <__umoddi3+0x388>
    fad4:	e73fff84 	addi	fp,fp,-2
    fad8:	1d07883a 	add	r3,r3,r20
    fadc:	003f6206 	br	f868 <__umoddi3+0x38c>
    fae0:	1c07883a 	add	r3,r3,r16
    fae4:	003f0b06 	br	f714 <__umoddi3+0x238>
    fae8:	9005883a 	mov	r2,r18
    faec:	a007883a 	mov	r3,r20
    faf0:	003f2106 	br	f778 <__umoddi3+0x29c>
    faf4:	913fda36 	bltu	r18,r4,fa60 <__umoddi3+0x584>
    faf8:	202d883a 	mov	r22,r4
    fafc:	0007883a 	mov	r3,zero
    fb00:	003f9d06 	br	f978 <__umoddi3+0x49c>

0000fb04 <__eqsf2>:
    fb04:	defff504 	addi	sp,sp,-44
    fb08:	d9000915 	stw	r4,36(sp)
    fb0c:	d9400815 	stw	r5,32(sp)
    fb10:	d9000904 	addi	r4,sp,36
    fb14:	d9400404 	addi	r5,sp,16
    fb18:	dfc00a15 	stw	ra,40(sp)
    fb1c:	0010be00 	call	10be0 <__unpack_f>
    fb20:	d9000804 	addi	r4,sp,32
    fb24:	d80b883a 	mov	r5,sp
    fb28:	0010be00 	call	10be0 <__unpack_f>
    fb2c:	d8c00417 	ldw	r3,16(sp)
    fb30:	00800044 	movi	r2,1
    fb34:	10c0052e 	bgeu	r2,r3,fb4c <__eqsf2+0x48>
    fb38:	d8c00017 	ldw	r3,0(sp)
    fb3c:	10c0032e 	bgeu	r2,r3,fb4c <__eqsf2+0x48>
    fb40:	d9000404 	addi	r4,sp,16
    fb44:	d80b883a 	mov	r5,sp
    fb48:	0010ca80 	call	10ca8 <__fpcmp_parts_f>
    fb4c:	dfc00a17 	ldw	ra,40(sp)
    fb50:	dec00b04 	addi	sp,sp,44
    fb54:	f800283a 	ret

0000fb58 <__gtsf2>:
    fb58:	defff504 	addi	sp,sp,-44
    fb5c:	d9000915 	stw	r4,36(sp)
    fb60:	d9400815 	stw	r5,32(sp)
    fb64:	d9000904 	addi	r4,sp,36
    fb68:	d9400404 	addi	r5,sp,16
    fb6c:	dfc00a15 	stw	ra,40(sp)
    fb70:	0010be00 	call	10be0 <__unpack_f>
    fb74:	d9000804 	addi	r4,sp,32
    fb78:	d80b883a 	mov	r5,sp
    fb7c:	0010be00 	call	10be0 <__unpack_f>
    fb80:	d8c00417 	ldw	r3,16(sp)
    fb84:	00800044 	movi	r2,1
    fb88:	10c0082e 	bgeu	r2,r3,fbac <__gtsf2+0x54>
    fb8c:	d8c00017 	ldw	r3,0(sp)
    fb90:	10c0062e 	bgeu	r2,r3,fbac <__gtsf2+0x54>
    fb94:	d9000404 	addi	r4,sp,16
    fb98:	d80b883a 	mov	r5,sp
    fb9c:	0010ca80 	call	10ca8 <__fpcmp_parts_f>
    fba0:	dfc00a17 	ldw	ra,40(sp)
    fba4:	dec00b04 	addi	sp,sp,44
    fba8:	f800283a 	ret
    fbac:	00bfffc4 	movi	r2,-1
    fbb0:	003ffb06 	br	fba0 <__gtsf2+0x48>

0000fbb4 <__ltsf2>:
    fbb4:	defff504 	addi	sp,sp,-44
    fbb8:	d9000915 	stw	r4,36(sp)
    fbbc:	d9400815 	stw	r5,32(sp)
    fbc0:	d9000904 	addi	r4,sp,36
    fbc4:	d9400404 	addi	r5,sp,16
    fbc8:	dfc00a15 	stw	ra,40(sp)
    fbcc:	0010be00 	call	10be0 <__unpack_f>
    fbd0:	d9000804 	addi	r4,sp,32
    fbd4:	d80b883a 	mov	r5,sp
    fbd8:	0010be00 	call	10be0 <__unpack_f>
    fbdc:	d8c00417 	ldw	r3,16(sp)
    fbe0:	00800044 	movi	r2,1
    fbe4:	10c0052e 	bgeu	r2,r3,fbfc <__ltsf2+0x48>
    fbe8:	d8c00017 	ldw	r3,0(sp)
    fbec:	10c0032e 	bgeu	r2,r3,fbfc <__ltsf2+0x48>
    fbf0:	d9000404 	addi	r4,sp,16
    fbf4:	d80b883a 	mov	r5,sp
    fbf8:	0010ca80 	call	10ca8 <__fpcmp_parts_f>
    fbfc:	dfc00a17 	ldw	ra,40(sp)
    fc00:	dec00b04 	addi	sp,sp,44
    fc04:	f800283a 	ret

0000fc08 <_fpadd_parts>:
    fc08:	2005883a 	mov	r2,r4
    fc0c:	21000017 	ldw	r4,0(r4)
    fc10:	01c00044 	movi	r7,1
    fc14:	3900622e 	bgeu	r7,r4,fda0 <_fpadd_parts+0x198>
    fc18:	28c00017 	ldw	r3,0(r5)
    fc1c:	38c05f2e 	bgeu	r7,r3,fd9c <_fpadd_parts+0x194>
    fc20:	01c00104 	movi	r7,4
    fc24:	21c0c626 	beq	r4,r7,ff40 <_fpadd_parts+0x338>
    fc28:	19c05c26 	beq	r3,r7,fd9c <_fpadd_parts+0x194>
    fc2c:	01c00084 	movi	r7,2
    fc30:	19c06b26 	beq	r3,r7,fde0 <_fpadd_parts+0x1d8>
    fc34:	21c05926 	beq	r4,r7,fd9c <_fpadd_parts+0x194>
    fc38:	11c00217 	ldw	r7,8(r2)
    fc3c:	2ac00217 	ldw	r11,8(r5)
    fc40:	13000317 	ldw	r12,12(r2)
    fc44:	13400417 	ldw	r13,16(r2)
    fc48:	3ac9c83a 	sub	r4,r7,r11
    fc4c:	2a000317 	ldw	r8,12(r5)
    fc50:	2a400417 	ldw	r9,16(r5)
    fc54:	2015883a 	mov	r10,r4
    fc58:	20007516 	blt	r4,zero,fe30 <_fpadd_parts+0x228>
    fc5c:	00c00fc4 	movi	r3,63
    fc60:	1a805016 	blt	r3,r10,fda4 <_fpadd_parts+0x19c>
    fc64:	0100870e 	bge	zero,r4,fe84 <_fpadd_parts+0x27c>
    fc68:	50fff804 	addi	r3,r10,-32
    fc6c:	18009916 	blt	r3,zero,fed4 <_fpadd_parts+0x2cc>
    fc70:	48d6d83a 	srl	r11,r9,r3
    fc74:	001d883a 	mov	r14,zero
    fc78:	18009e16 	blt	r3,zero,fef4 <_fpadd_parts+0x2ec>
    fc7c:	01000044 	movi	r4,1
    fc80:	20c6983a 	sll	r3,r4,r3
    fc84:	0015883a 	mov	r10,zero
    fc88:	513fffc4 	addi	r4,r10,-1
    fc8c:	2295403a 	cmpgeu	r10,r4,r10
    fc90:	1a87c83a 	sub	r3,r3,r10
    fc94:	1a52703a 	and	r9,r3,r9
    fc98:	2210703a 	and	r8,r4,r8
    fc9c:	4250b03a 	or	r8,r8,r9
    fca0:	4010c03a 	cmpne	r8,r8,zero
    fca4:	42d0b03a 	or	r8,r8,r11
    fca8:	7013883a 	mov	r9,r14
    fcac:	11000117 	ldw	r4,4(r2)
    fcb0:	28800117 	ldw	r2,4(r5)
    fcb4:	20804126 	beq	r4,r2,fdbc <_fpadd_parts+0x1b4>
    fcb8:	20006326 	beq	r4,zero,fe48 <_fpadd_parts+0x240>
    fcbc:	4305c83a 	sub	r2,r8,r12
    fcc0:	4091803a 	cmpltu	r8,r8,r2
    fcc4:	4b47c83a 	sub	r3,r9,r13
    fcc8:	1a07c83a 	sub	r3,r3,r8
    fccc:	18006316 	blt	r3,zero,fe5c <_fpadd_parts+0x254>
    fcd0:	30000115 	stw	zero,4(r6)
    fcd4:	31c00215 	stw	r7,8(r6)
    fcd8:	30800315 	stw	r2,12(r6)
    fcdc:	30c00415 	stw	r3,16(r6)
    fce0:	11ffffc4 	addi	r7,r2,-1
    fce4:	388b403a 	cmpgeu	r5,r7,r2
    fce8:	194bc83a 	sub	r5,r3,r5
    fcec:	01040034 	movhi	r4,4096
    fcf0:	213fffc4 	addi	r4,r4,-1
    fcf4:	21401736 	bltu	r4,r5,fd54 <_fpadd_parts+0x14c>
    fcf8:	29008226 	beq	r5,r4,ff04 <_fpadd_parts+0x2fc>
    fcfc:	31400217 	ldw	r5,8(r6)
    fd00:	02840034 	movhi	r10,4096
    fd04:	52bfffc4 	addi	r10,r10,-1
    fd08:	033fff84 	movi	r12,-2
    fd0c:	297fffc4 	addi	r5,r5,-1
    fd10:	00000106 	br	fd18 <_fpadd_parts+0x110>
    fd14:	3a804a26 	beq	r7,r10,fe40 <_fpadd_parts+0x238>
    fd18:	1089883a 	add	r4,r2,r2
    fd1c:	2091803a 	cmpltu	r8,r4,r2
    fd20:	18c7883a 	add	r3,r3,r3
    fd24:	227fffc4 	addi	r9,r4,-1
    fd28:	40d1883a 	add	r8,r8,r3
    fd2c:	490f403a 	cmpgeu	r7,r9,r4
    fd30:	41cfc83a 	sub	r7,r8,r7
    fd34:	2817883a 	mov	r11,r5
    fd38:	2005883a 	mov	r2,r4
    fd3c:	4007883a 	mov	r3,r8
    fd40:	297fffc4 	addi	r5,r5,-1
    fd44:	51fff32e 	bgeu	r10,r7,fd14 <_fpadd_parts+0x10c>
    fd48:	31000315 	stw	r4,12(r6)
    fd4c:	32000415 	stw	r8,16(r6)
    fd50:	32c00215 	stw	r11,8(r6)
    fd54:	010000c4 	movi	r4,3
    fd58:	31000015 	stw	r4,0(r6)
    fd5c:	01080034 	movhi	r4,8192
    fd60:	213fffc4 	addi	r4,r4,-1
    fd64:	20c00b2e 	bgeu	r4,r3,fd94 <_fpadd_parts+0x18c>
    fd68:	180e97fa 	slli	r7,r3,31
    fd6c:	1008d07a 	srli	r4,r2,1
    fd70:	31400217 	ldw	r5,8(r6)
    fd74:	1806d07a 	srli	r3,r3,1
    fd78:	1080004c 	andi	r2,r2,1
    fd7c:	3908b03a 	or	r4,r7,r4
    fd80:	1108b03a 	or	r4,r2,r4
    fd84:	29400044 	addi	r5,r5,1
    fd88:	31000315 	stw	r4,12(r6)
    fd8c:	30c00415 	stw	r3,16(r6)
    fd90:	31400215 	stw	r5,8(r6)
    fd94:	3005883a 	mov	r2,r6
    fd98:	f800283a 	ret
    fd9c:	2805883a 	mov	r2,r5
    fda0:	f800283a 	ret
    fda4:	59c01e0e 	bge	r11,r7,fe20 <_fpadd_parts+0x218>
    fda8:	11000117 	ldw	r4,4(r2)
    fdac:	28800117 	ldw	r2,4(r5)
    fdb0:	0011883a 	mov	r8,zero
    fdb4:	0013883a 	mov	r9,zero
    fdb8:	20bfbf1e 	bne	r4,r2,fcb8 <_fpadd_parts+0xb0>
    fdbc:	4305883a 	add	r2,r8,r12
    fdc0:	1207803a 	cmpltu	r3,r2,r8
    fdc4:	4b53883a 	add	r9,r9,r13
    fdc8:	1a47883a 	add	r3,r3,r9
    fdcc:	31000115 	stw	r4,4(r6)
    fdd0:	31c00215 	stw	r7,8(r6)
    fdd4:	30800315 	stw	r2,12(r6)
    fdd8:	30c00415 	stw	r3,16(r6)
    fddc:	003fdd06 	br	fd54 <_fpadd_parts+0x14c>
    fde0:	20ffef1e 	bne	r4,r3,fda0 <_fpadd_parts+0x198>
    fde4:	31000015 	stw	r4,0(r6)
    fde8:	10c00117 	ldw	r3,4(r2)
    fdec:	30c00115 	stw	r3,4(r6)
    fdf0:	10c00217 	ldw	r3,8(r2)
    fdf4:	11000117 	ldw	r4,4(r2)
    fdf8:	29400117 	ldw	r5,4(r5)
    fdfc:	30c00215 	stw	r3,8(r6)
    fe00:	10c00317 	ldw	r3,12(r2)
    fe04:	2908703a 	and	r4,r5,r4
    fe08:	30c00315 	stw	r3,12(r6)
    fe0c:	10c00417 	ldw	r3,16(r2)
    fe10:	31000115 	stw	r4,4(r6)
    fe14:	3005883a 	mov	r2,r6
    fe18:	30c00415 	stw	r3,16(r6)
    fe1c:	f800283a 	ret
    fe20:	580f883a 	mov	r7,r11
    fe24:	0019883a 	mov	r12,zero
    fe28:	001b883a 	mov	r13,zero
    fe2c:	003f9f06 	br	fcac <_fpadd_parts+0xa4>
    fe30:	0115c83a 	sub	r10,zero,r4
    fe34:	00c00fc4 	movi	r3,63
    fe38:	1abfda16 	blt	r3,r10,fda4 <_fpadd_parts+0x19c>
    fe3c:	003f8906 	br	fc64 <_fpadd_parts+0x5c>
    fe40:	627fb52e 	bgeu	r12,r9,fd18 <_fpadd_parts+0x110>
    fe44:	003fc006 	br	fd48 <_fpadd_parts+0x140>
    fe48:	6205c83a 	sub	r2,r12,r8
    fe4c:	6099803a 	cmpltu	r12,r12,r2
    fe50:	6a47c83a 	sub	r3,r13,r9
    fe54:	1b07c83a 	sub	r3,r3,r12
    fe58:	183f9d0e 	bge	r3,zero,fcd0 <_fpadd_parts+0xc8>
    fe5c:	0085c83a 	sub	r2,zero,r2
    fe60:	1008c03a 	cmpne	r4,r2,zero
    fe64:	00c7c83a 	sub	r3,zero,r3
    fe68:	1907c83a 	sub	r3,r3,r4
    fe6c:	01000044 	movi	r4,1
    fe70:	31000115 	stw	r4,4(r6)
    fe74:	31c00215 	stw	r7,8(r6)
    fe78:	30800315 	stw	r2,12(r6)
    fe7c:	30c00415 	stw	r3,16(r6)
    fe80:	003f9706 	br	fce0 <_fpadd_parts+0xd8>
    fe84:	203f8926 	beq	r4,zero,fcac <_fpadd_parts+0xa4>
    fe88:	50fff804 	addi	r3,r10,-32
    fe8c:	3a8f883a 	add	r7,r7,r10
    fe90:	18002316 	blt	r3,zero,ff20 <_fpadd_parts+0x318>
    fe94:	68d6d83a 	srl	r11,r13,r3
    fe98:	001d883a 	mov	r14,zero
    fe9c:	18001c16 	blt	r3,zero,ff10 <_fpadd_parts+0x308>
    fea0:	01000044 	movi	r4,1
    fea4:	20c6983a 	sll	r3,r4,r3
    fea8:	0015883a 	mov	r10,zero
    feac:	513fffc4 	addi	r4,r10,-1
    feb0:	2295403a 	cmpgeu	r10,r4,r10
    feb4:	1a87c83a 	sub	r3,r3,r10
    feb8:	1b5a703a 	and	r13,r3,r13
    febc:	2318703a 	and	r12,r4,r12
    fec0:	6358b03a 	or	r12,r12,r13
    fec4:	6018c03a 	cmpne	r12,r12,zero
    fec8:	62d8b03a 	or	r12,r12,r11
    fecc:	701b883a 	mov	r13,r14
    fed0:	003f7606 	br	fcac <_fpadd_parts+0xa4>
    fed4:	4808907a 	slli	r4,r9,1
    fed8:	02c007c4 	movi	r11,31
    fedc:	5a97c83a 	sub	r11,r11,r10
    fee0:	22c8983a 	sll	r4,r4,r11
    fee4:	4296d83a 	srl	r11,r8,r10
    fee8:	4a9cd83a 	srl	r14,r9,r10
    feec:	22d6b03a 	or	r11,r4,r11
    fef0:	003f6106 	br	fc78 <_fpadd_parts+0x70>
    fef4:	00c00044 	movi	r3,1
    fef8:	1a94983a 	sll	r10,r3,r10
    fefc:	0007883a 	mov	r3,zero
    ff00:	003f6106 	br	fc88 <_fpadd_parts+0x80>
    ff04:	013fff84 	movi	r4,-2
    ff08:	21ff7c2e 	bgeu	r4,r7,fcfc <_fpadd_parts+0xf4>
    ff0c:	003f9106 	br	fd54 <_fpadd_parts+0x14c>
    ff10:	00c00044 	movi	r3,1
    ff14:	1a94983a 	sll	r10,r3,r10
    ff18:	0007883a 	mov	r3,zero
    ff1c:	003fe306 	br	feac <_fpadd_parts+0x2a4>
    ff20:	6816907a 	slli	r11,r13,1
    ff24:	010007c4 	movi	r4,31
    ff28:	2289c83a 	sub	r4,r4,r10
    ff2c:	5908983a 	sll	r4,r11,r4
    ff30:	6296d83a 	srl	r11,r12,r10
    ff34:	6a9cd83a 	srl	r14,r13,r10
    ff38:	22d6b03a 	or	r11,r4,r11
    ff3c:	003fd706 	br	fe9c <_fpadd_parts+0x294>
    ff40:	193f971e 	bne	r3,r4,fda0 <_fpadd_parts+0x198>
    ff44:	11000117 	ldw	r4,4(r2)
    ff48:	28c00117 	ldw	r3,4(r5)
    ff4c:	20ff9426 	beq	r4,r3,fda0 <_fpadd_parts+0x198>
    ff50:	00800074 	movhi	r2,1
    ff54:	1093c804 	addi	r2,r2,20256
    ff58:	f800283a 	ret

0000ff5c <__adddf3>:
    ff5c:	deffec04 	addi	sp,sp,-80
    ff60:	d9001115 	stw	r4,68(sp)
    ff64:	d9401215 	stw	r5,72(sp)
    ff68:	d9001104 	addi	r4,sp,68
    ff6c:	d9400a04 	addi	r5,sp,40
    ff70:	dfc01315 	stw	ra,76(sp)
    ff74:	d9c01015 	stw	r7,64(sp)
    ff78:	d9800f15 	stw	r6,60(sp)
    ff7c:	0010fb40 	call	10fb4 <__unpack_d>
    ff80:	d9000f04 	addi	r4,sp,60
    ff84:	d9400504 	addi	r5,sp,20
    ff88:	0010fb40 	call	10fb4 <__unpack_d>
    ff8c:	d9000a04 	addi	r4,sp,40
    ff90:	d9400504 	addi	r5,sp,20
    ff94:	d80d883a 	mov	r6,sp
    ff98:	000fc080 	call	fc08 <_fpadd_parts>
    ff9c:	1009883a 	mov	r4,r2
    ffa0:	0010d900 	call	10d90 <__pack_d>
    ffa4:	dfc01317 	ldw	ra,76(sp)
    ffa8:	dec01404 	addi	sp,sp,80
    ffac:	f800283a 	ret

0000ffb0 <__subdf3>:
    ffb0:	deffec04 	addi	sp,sp,-80
    ffb4:	d9001115 	stw	r4,68(sp)
    ffb8:	d9401215 	stw	r5,72(sp)
    ffbc:	d9001104 	addi	r4,sp,68
    ffc0:	d9400a04 	addi	r5,sp,40
    ffc4:	dfc01315 	stw	ra,76(sp)
    ffc8:	d9c01015 	stw	r7,64(sp)
    ffcc:	d9800f15 	stw	r6,60(sp)
    ffd0:	0010fb40 	call	10fb4 <__unpack_d>
    ffd4:	d9000f04 	addi	r4,sp,60
    ffd8:	d9400504 	addi	r5,sp,20
    ffdc:	0010fb40 	call	10fb4 <__unpack_d>
    ffe0:	d8800617 	ldw	r2,24(sp)
    ffe4:	d9000a04 	addi	r4,sp,40
    ffe8:	d9400504 	addi	r5,sp,20
    ffec:	d80d883a 	mov	r6,sp
    fff0:	1080005c 	xori	r2,r2,1
    fff4:	d8800615 	stw	r2,24(sp)
    fff8:	000fc080 	call	fc08 <_fpadd_parts>
    fffc:	1009883a 	mov	r4,r2
   10000:	0010d900 	call	10d90 <__pack_d>
   10004:	dfc01317 	ldw	ra,76(sp)
   10008:	dec01404 	addi	sp,sp,80
   1000c:	f800283a 	ret

00010010 <__muldf3>:
   10010:	deffe404 	addi	sp,sp,-112
   10014:	d9001115 	stw	r4,68(sp)
   10018:	d9401215 	stw	r5,72(sp)
   1001c:	d9001104 	addi	r4,sp,68
   10020:	d9400a04 	addi	r5,sp,40
   10024:	dfc01b15 	stw	ra,108(sp)
   10028:	d9800f15 	stw	r6,60(sp)
   1002c:	d9c01015 	stw	r7,64(sp)
   10030:	ddc01a15 	stw	r23,104(sp)
   10034:	dd801915 	stw	r22,100(sp)
   10038:	dd401815 	stw	r21,96(sp)
   1003c:	dd001715 	stw	r20,92(sp)
   10040:	dcc01615 	stw	r19,88(sp)
   10044:	dc801515 	stw	r18,84(sp)
   10048:	dc401415 	stw	r17,80(sp)
   1004c:	dc001315 	stw	r16,76(sp)
   10050:	0010fb40 	call	10fb4 <__unpack_d>
   10054:	d9000f04 	addi	r4,sp,60
   10058:	d9400504 	addi	r5,sp,20
   1005c:	0010fb40 	call	10fb4 <__unpack_d>
   10060:	d8c00a17 	ldw	r3,40(sp)
   10064:	00800044 	movi	r2,1
   10068:	10c01136 	bltu	r2,r3,100b0 <__muldf3+0xa0>
   1006c:	d8c00b17 	ldw	r3,44(sp)
   10070:	d8800617 	ldw	r2,24(sp)
   10074:	d9000a04 	addi	r4,sp,40
   10078:	1884c03a 	cmpne	r2,r3,r2
   1007c:	d8800b15 	stw	r2,44(sp)
   10080:	0010d900 	call	10d90 <__pack_d>
   10084:	dfc01b17 	ldw	ra,108(sp)
   10088:	ddc01a17 	ldw	r23,104(sp)
   1008c:	dd801917 	ldw	r22,100(sp)
   10090:	dd401817 	ldw	r21,96(sp)
   10094:	dd001717 	ldw	r20,92(sp)
   10098:	dcc01617 	ldw	r19,88(sp)
   1009c:	dc801517 	ldw	r18,84(sp)
   100a0:	dc401417 	ldw	r17,80(sp)
   100a4:	dc001317 	ldw	r16,76(sp)
   100a8:	dec01c04 	addi	sp,sp,112
   100ac:	f800283a 	ret
   100b0:	d9000517 	ldw	r4,20(sp)
   100b4:	11000636 	bltu	r2,r4,100d0 <__muldf3+0xc0>
   100b8:	d8800617 	ldw	r2,24(sp)
   100bc:	d8c00b17 	ldw	r3,44(sp)
   100c0:	d9000504 	addi	r4,sp,20
   100c4:	1884c03a 	cmpne	r2,r3,r2
   100c8:	d8800615 	stw	r2,24(sp)
   100cc:	003fec06 	br	10080 <__muldf3+0x70>
   100d0:	00800104 	movi	r2,4
   100d4:	1880051e 	bne	r3,r2,100ec <__muldf3+0xdc>
   100d8:	00800084 	movi	r2,2
   100dc:	20bfe31e 	bne	r4,r2,1006c <__muldf3+0x5c>
   100e0:	01000074 	movhi	r4,1
   100e4:	2113c804 	addi	r4,r4,20256
   100e8:	003fe506 	br	10080 <__muldf3+0x70>
   100ec:	2080031e 	bne	r4,r2,100fc <__muldf3+0xec>
   100f0:	00800084 	movi	r2,2
   100f4:	18bffa26 	beq	r3,r2,100e0 <__muldf3+0xd0>
   100f8:	003fef06 	br	100b8 <__muldf3+0xa8>
   100fc:	00800084 	movi	r2,2
   10100:	18bfda26 	beq	r3,r2,1006c <__muldf3+0x5c>
   10104:	20bfec26 	beq	r4,r2,100b8 <__muldf3+0xa8>
   10108:	dc000d17 	ldw	r16,52(sp)
   1010c:	dd000817 	ldw	r20,32(sp)
   10110:	dc800917 	ldw	r18,36(sp)
   10114:	8009883a 	mov	r4,r16
   10118:	000b883a 	mov	r5,zero
   1011c:	a00d883a 	mov	r6,r20
   10120:	000f883a 	mov	r7,zero
   10124:	000ecf80 	call	ecf8 <__muldi3>
   10128:	dc400e17 	ldw	r17,56(sp)
   1012c:	9009883a 	mov	r4,r18
   10130:	800d883a 	mov	r6,r16
   10134:	000b883a 	mov	r5,zero
   10138:	000f883a 	mov	r7,zero
   1013c:	102f883a 	mov	r23,r2
   10140:	1827883a 	mov	r19,r3
   10144:	000ecf80 	call	ecf8 <__muldi3>
   10148:	900d883a 	mov	r6,r18
   1014c:	8809883a 	mov	r4,r17
   10150:	000b883a 	mov	r5,zero
   10154:	000f883a 	mov	r7,zero
   10158:	102b883a 	mov	r21,r2
   1015c:	1821883a 	mov	r16,r3
   10160:	000ecf80 	call	ecf8 <__muldi3>
   10164:	8809883a 	mov	r4,r17
   10168:	000b883a 	mov	r5,zero
   1016c:	a00d883a 	mov	r6,r20
   10170:	000f883a 	mov	r7,zero
   10174:	102d883a 	mov	r22,r2
   10178:	1825883a 	mov	r18,r3
   1017c:	000ecf80 	call	ecf8 <__muldi3>
   10180:	154b883a 	add	r5,r2,r21
   10184:	2889803a 	cmpltu	r4,r5,r2
   10188:	1c07883a 	add	r3,r3,r16
   1018c:	20c9883a 	add	r4,r4,r3
   10190:	24004b36 	bltu	r4,r16,102c0 <__muldf3+0x2b0>
   10194:	8100011e 	bne	r16,r4,1019c <__muldf3+0x18c>
   10198:	2d404936 	bltu	r5,r21,102c0 <__muldf3+0x2b0>
   1019c:	0011883a 	mov	r8,zero
   101a0:	0007883a 	mov	r3,zero
   101a4:	2ccb883a 	add	r5,r5,r19
   101a8:	b80d883a 	mov	r6,r23
   101ac:	2cc0012e 	bgeu	r5,r19,101b4 <__muldf3+0x1a4>
   101b0:	02000044 	movi	r8,1
   101b4:	258f883a 	add	r7,r4,r22
   101b8:	3909803a 	cmpltu	r4,r7,r4
   101bc:	da400c17 	ldw	r9,48(sp)
   101c0:	2489883a 	add	r4,r4,r18
   101c4:	d8800717 	ldw	r2,28(sp)
   101c8:	20c9883a 	add	r4,r4,r3
   101cc:	da800b17 	ldw	r10,44(sp)
   101d0:	d8c00617 	ldw	r3,24(sp)
   101d4:	3a11883a 	add	r8,r7,r8
   101d8:	4885883a 	add	r2,r9,r2
   101dc:	50c6c03a 	cmpne	r3,r10,r3
   101e0:	41cf803a 	cmpltu	r7,r8,r7
   101e4:	12400104 	addi	r9,r2,4
   101e8:	d8c00115 	stw	r3,4(sp)
   101ec:	3909883a 	add	r4,r7,r4
   101f0:	da400215 	stw	r9,8(sp)
   101f4:	03480034 	movhi	r13,8192
   101f8:	6b7fffc4 	addi	r13,r13,-1
   101fc:	4007883a 	mov	r3,r8
   10200:	6900102e 	bgeu	r13,r4,10244 <__muldf3+0x234>
   10204:	10800144 	addi	r2,r2,5
   10208:	180ed07a 	srli	r7,r3,1
   1020c:	18c0004c 	andi	r3,r3,1
   10210:	201097fa 	slli	r8,r4,31
   10214:	281697fa 	slli	r11,r5,31
   10218:	2008d07a 	srli	r4,r4,1
   1021c:	3014d07a 	srli	r10,r6,1
   10220:	2812d07a 	srli	r9,r5,1
   10224:	1019883a 	mov	r12,r2
   10228:	18000226 	beq	r3,zero,10234 <__muldf3+0x224>
   1022c:	5a8cb03a 	or	r6,r11,r10
   10230:	49600034 	orhi	r5,r9,32768
   10234:	41c6b03a 	or	r3,r8,r7
   10238:	10800044 	addi	r2,r2,1
   1023c:	693ff236 	bltu	r13,r4,10208 <__muldf3+0x1f8>
   10240:	db000215 	stw	r12,8(sp)
   10244:	03440034 	movhi	r13,4096
   10248:	6b7fffc4 	addi	r13,r13,-1
   1024c:	69001336 	bltu	r13,r4,1029c <__muldf3+0x28c>
   10250:	d8800217 	ldw	r2,8(sp)
   10254:	10bfffc4 	addi	r2,r2,-1
   10258:	18d3883a 	add	r9,r3,r3
   1025c:	48c7803a 	cmpltu	r3,r9,r3
   10260:	2109883a 	add	r4,r4,r4
   10264:	190f883a 	add	r7,r3,r4
   10268:	3191883a 	add	r8,r6,r6
   1026c:	4197803a 	cmpltu	r11,r8,r6
   10270:	2955883a 	add	r10,r5,r5
   10274:	1019883a 	mov	r12,r2
   10278:	4807883a 	mov	r3,r9
   1027c:	3809883a 	mov	r4,r7
   10280:	2800010e 	bge	r5,zero,10288 <__muldf3+0x278>
   10284:	48c00054 	ori	r3,r9,1
   10288:	400d883a 	mov	r6,r8
   1028c:	5a8b883a 	add	r5,r11,r10
   10290:	10bfffc4 	addi	r2,r2,-1
   10294:	69fff02e 	bgeu	r13,r7,10258 <__muldf3+0x248>
   10298:	db000215 	stw	r12,8(sp)
   1029c:	18803fcc 	andi	r2,r3,255
   102a0:	01c02004 	movi	r7,128
   102a4:	11c00926 	beq	r2,r7,102cc <__muldf3+0x2bc>
   102a8:	008000c4 	movi	r2,3
   102ac:	d9000415 	stw	r4,16(sp)
   102b0:	d8c00315 	stw	r3,12(sp)
   102b4:	d8800015 	stw	r2,0(sp)
   102b8:	d809883a 	mov	r4,sp
   102bc:	003f7006 	br	10080 <__muldf3+0x70>
   102c0:	0011883a 	mov	r8,zero
   102c4:	00c00044 	movi	r3,1
   102c8:	003fb606 	br	101a4 <__muldf3+0x194>
   102cc:	19c0400c 	andi	r7,r3,256
   102d0:	383ff51e 	bne	r7,zero,102a8 <__muldf3+0x298>
   102d4:	314ab03a 	or	r5,r6,r5
   102d8:	283ff326 	beq	r5,zero,102a8 <__muldf3+0x298>
   102dc:	1885883a 	add	r2,r3,r2
   102e0:	10cb803a 	cmpltu	r5,r2,r3
   102e4:	00ffc004 	movi	r3,-256
   102e8:	10c6703a 	and	r3,r2,r3
   102ec:	2909883a 	add	r4,r5,r4
   102f0:	003fed06 	br	102a8 <__muldf3+0x298>

000102f4 <__divdf3>:
   102f4:	defff104 	addi	sp,sp,-60
   102f8:	d9000c15 	stw	r4,48(sp)
   102fc:	d9400d15 	stw	r5,52(sp)
   10300:	d9000c04 	addi	r4,sp,48
   10304:	d9400504 	addi	r5,sp,20
   10308:	dfc00e15 	stw	ra,56(sp)
   1030c:	d9800a15 	stw	r6,40(sp)
   10310:	d9c00b15 	stw	r7,44(sp)
   10314:	0010fb40 	call	10fb4 <__unpack_d>
   10318:	d9000a04 	addi	r4,sp,40
   1031c:	d80b883a 	mov	r5,sp
   10320:	0010fb40 	call	10fb4 <__unpack_d>
   10324:	d8c00517 	ldw	r3,20(sp)
   10328:	00800044 	movi	r2,1
   1032c:	10c00536 	bltu	r2,r3,10344 <__divdf3+0x50>
   10330:	d9000504 	addi	r4,sp,20
   10334:	0010d900 	call	10d90 <__pack_d>
   10338:	dfc00e17 	ldw	ra,56(sp)
   1033c:	dec00f04 	addi	sp,sp,60
   10340:	f800283a 	ret
   10344:	d9000017 	ldw	r4,0(sp)
   10348:	11000536 	bltu	r2,r4,10360 <__divdf3+0x6c>
   1034c:	d809883a 	mov	r4,sp
   10350:	0010d900 	call	10d90 <__pack_d>
   10354:	dfc00e17 	ldw	ra,56(sp)
   10358:	dec00f04 	addi	sp,sp,60
   1035c:	f800283a 	ret
   10360:	d9800617 	ldw	r6,24(sp)
   10364:	d9400117 	ldw	r5,4(sp)
   10368:	00800104 	movi	r2,4
   1036c:	314af03a 	xor	r5,r6,r5
   10370:	d9400615 	stw	r5,24(sp)
   10374:	18800226 	beq	r3,r2,10380 <__divdf3+0x8c>
   10378:	01400084 	movi	r5,2
   1037c:	1940041e 	bne	r3,r5,10390 <__divdf3+0x9c>
   10380:	193feb1e 	bne	r3,r4,10330 <__divdf3+0x3c>
   10384:	01000074 	movhi	r4,1
   10388:	2113c804 	addi	r4,r4,20256
   1038c:	003fe906 	br	10334 <__divdf3+0x40>
   10390:	20803326 	beq	r4,r2,10460 <__divdf3+0x16c>
   10394:	21403726 	beq	r4,r5,10474 <__divdf3+0x180>
   10398:	d8800217 	ldw	r2,8(sp)
   1039c:	d9000717 	ldw	r4,28(sp)
   103a0:	d8c00917 	ldw	r3,36(sp)
   103a4:	da000417 	ldw	r8,16(sp)
   103a8:	2089c83a 	sub	r4,r4,r2
   103ac:	d9000715 	stw	r4,28(sp)
   103b0:	d8800817 	ldw	r2,32(sp)
   103b4:	dbc00317 	ldw	r15,12(sp)
   103b8:	1a000236 	bltu	r3,r8,103c4 <__divdf3+0xd0>
   103bc:	40c0081e 	bne	r8,r3,103e0 <__divdf3+0xec>
   103c0:	13c0072e 	bgeu	r2,r15,103e0 <__divdf3+0xec>
   103c4:	108b883a 	add	r5,r2,r2
   103c8:	288d803a 	cmpltu	r6,r5,r2
   103cc:	18c7883a 	add	r3,r3,r3
   103d0:	213fffc4 	addi	r4,r4,-1
   103d4:	2805883a 	mov	r2,r5
   103d8:	30c7883a 	add	r3,r6,r3
   103dc:	d9000715 	stw	r4,28(sp)
   103e0:	01400f44 	movi	r5,61
   103e4:	000f883a 	mov	r7,zero
   103e8:	01040034 	movhi	r4,4096
   103ec:	0019883a 	mov	r12,zero
   103f0:	001b883a 	mov	r13,zero
   103f4:	201697fa 	slli	r11,r4,31
   103f8:	3814d07a 	srli	r10,r7,1
   103fc:	297fffc4 	addi	r5,r5,-1
   10400:	1a000936 	bltu	r3,r8,10428 <__divdf3+0x134>
   10404:	13cdc83a 	sub	r6,r2,r15
   10408:	1193803a 	cmpltu	r9,r2,r6
   1040c:	1a1dc83a 	sub	r14,r3,r8
   10410:	40c0011e 	bne	r8,r3,10418 <__divdf3+0x124>
   10414:	13c00436 	bltu	r2,r15,10428 <__divdf3+0x134>
   10418:	3005883a 	mov	r2,r6
   1041c:	7247c83a 	sub	r3,r14,r9
   10420:	61d8b03a 	or	r12,r12,r7
   10424:	691ab03a 	or	r13,r13,r4
   10428:	108d883a 	add	r6,r2,r2
   1042c:	3093803a 	cmpltu	r9,r6,r2
   10430:	18c7883a 	add	r3,r3,r3
   10434:	5a8eb03a 	or	r7,r11,r10
   10438:	2008d07a 	srli	r4,r4,1
   1043c:	3005883a 	mov	r2,r6
   10440:	48c7883a 	add	r3,r9,r3
   10444:	283feb1e 	bne	r5,zero,103f4 <__divdf3+0x100>
   10448:	61003fcc 	andi	r4,r12,255
   1044c:	01402004 	movi	r5,128
   10450:	21400b26 	beq	r4,r5,10480 <__divdf3+0x18c>
   10454:	db000815 	stw	r12,32(sp)
   10458:	db400915 	stw	r13,36(sp)
   1045c:	003fb406 	br	10330 <__divdf3+0x3c>
   10460:	d8000815 	stw	zero,32(sp)
   10464:	d8000915 	stw	zero,36(sp)
   10468:	d8000715 	stw	zero,28(sp)
   1046c:	d9000504 	addi	r4,sp,20
   10470:	003fb006 	br	10334 <__divdf3+0x40>
   10474:	d8800515 	stw	r2,20(sp)
   10478:	d9000504 	addi	r4,sp,20
   1047c:	003fad06 	br	10334 <__divdf3+0x40>
   10480:	6140400c 	andi	r5,r12,256
   10484:	283ff31e 	bne	r5,zero,10454 <__divdf3+0x160>
   10488:	30c4b03a 	or	r2,r6,r3
   1048c:	103ff126 	beq	r2,zero,10454 <__divdf3+0x160>
   10490:	6109883a 	add	r4,r12,r4
   10494:	2305803a 	cmpltu	r2,r4,r12
   10498:	033fc004 	movi	r12,-256
   1049c:	2318703a 	and	r12,r4,r12
   104a0:	135b883a 	add	r13,r2,r13
   104a4:	003feb06 	br	10454 <__divdf3+0x160>

000104a8 <__eqdf2>:
   104a8:	defff104 	addi	sp,sp,-60
   104ac:	d9000c15 	stw	r4,48(sp)
   104b0:	d9400d15 	stw	r5,52(sp)
   104b4:	d9000c04 	addi	r4,sp,48
   104b8:	d9400504 	addi	r5,sp,20
   104bc:	dfc00e15 	stw	ra,56(sp)
   104c0:	d9800a15 	stw	r6,40(sp)
   104c4:	d9c00b15 	stw	r7,44(sp)
   104c8:	0010fb40 	call	10fb4 <__unpack_d>
   104cc:	d9000a04 	addi	r4,sp,40
   104d0:	d80b883a 	mov	r5,sp
   104d4:	0010fb40 	call	10fb4 <__unpack_d>
   104d8:	d8c00517 	ldw	r3,20(sp)
   104dc:	00800044 	movi	r2,1
   104e0:	10c0052e 	bgeu	r2,r3,104f8 <__eqdf2+0x50>
   104e4:	d8c00017 	ldw	r3,0(sp)
   104e8:	10c0032e 	bgeu	r2,r3,104f8 <__eqdf2+0x50>
   104ec:	d9000504 	addi	r4,sp,20
   104f0:	d80b883a 	mov	r5,sp
   104f4:	00110b80 	call	110b8 <__fpcmp_parts_d>
   104f8:	dfc00e17 	ldw	ra,56(sp)
   104fc:	dec00f04 	addi	sp,sp,60
   10500:	f800283a 	ret

00010504 <__nedf2>:
   10504:	defff104 	addi	sp,sp,-60
   10508:	d9000c15 	stw	r4,48(sp)
   1050c:	d9400d15 	stw	r5,52(sp)
   10510:	d9000c04 	addi	r4,sp,48
   10514:	d9400504 	addi	r5,sp,20
   10518:	dfc00e15 	stw	ra,56(sp)
   1051c:	d9800a15 	stw	r6,40(sp)
   10520:	d9c00b15 	stw	r7,44(sp)
   10524:	0010fb40 	call	10fb4 <__unpack_d>
   10528:	d9000a04 	addi	r4,sp,40
   1052c:	d80b883a 	mov	r5,sp
   10530:	0010fb40 	call	10fb4 <__unpack_d>
   10534:	d8c00517 	ldw	r3,20(sp)
   10538:	00800044 	movi	r2,1
   1053c:	10c0052e 	bgeu	r2,r3,10554 <__nedf2+0x50>
   10540:	d8c00017 	ldw	r3,0(sp)
   10544:	10c0032e 	bgeu	r2,r3,10554 <__nedf2+0x50>
   10548:	d9000504 	addi	r4,sp,20
   1054c:	d80b883a 	mov	r5,sp
   10550:	00110b80 	call	110b8 <__fpcmp_parts_d>
   10554:	dfc00e17 	ldw	ra,56(sp)
   10558:	dec00f04 	addi	sp,sp,60
   1055c:	f800283a 	ret

00010560 <__gtdf2>:
   10560:	defff104 	addi	sp,sp,-60
   10564:	d9000c15 	stw	r4,48(sp)
   10568:	d9400d15 	stw	r5,52(sp)
   1056c:	d9000c04 	addi	r4,sp,48
   10570:	d9400504 	addi	r5,sp,20
   10574:	dfc00e15 	stw	ra,56(sp)
   10578:	d9800a15 	stw	r6,40(sp)
   1057c:	d9c00b15 	stw	r7,44(sp)
   10580:	0010fb40 	call	10fb4 <__unpack_d>
   10584:	d9000a04 	addi	r4,sp,40
   10588:	d80b883a 	mov	r5,sp
   1058c:	0010fb40 	call	10fb4 <__unpack_d>
   10590:	d8c00517 	ldw	r3,20(sp)
   10594:	00800044 	movi	r2,1
   10598:	10c0082e 	bgeu	r2,r3,105bc <__gtdf2+0x5c>
   1059c:	d8c00017 	ldw	r3,0(sp)
   105a0:	10c0062e 	bgeu	r2,r3,105bc <__gtdf2+0x5c>
   105a4:	d9000504 	addi	r4,sp,20
   105a8:	d80b883a 	mov	r5,sp
   105ac:	00110b80 	call	110b8 <__fpcmp_parts_d>
   105b0:	dfc00e17 	ldw	ra,56(sp)
   105b4:	dec00f04 	addi	sp,sp,60
   105b8:	f800283a 	ret
   105bc:	00bfffc4 	movi	r2,-1
   105c0:	003ffb06 	br	105b0 <__gtdf2+0x50>

000105c4 <__gedf2>:
   105c4:	defff104 	addi	sp,sp,-60
   105c8:	d9000c15 	stw	r4,48(sp)
   105cc:	d9400d15 	stw	r5,52(sp)
   105d0:	d9000c04 	addi	r4,sp,48
   105d4:	d9400504 	addi	r5,sp,20
   105d8:	dfc00e15 	stw	ra,56(sp)
   105dc:	d9800a15 	stw	r6,40(sp)
   105e0:	d9c00b15 	stw	r7,44(sp)
   105e4:	0010fb40 	call	10fb4 <__unpack_d>
   105e8:	d9000a04 	addi	r4,sp,40
   105ec:	d80b883a 	mov	r5,sp
   105f0:	0010fb40 	call	10fb4 <__unpack_d>
   105f4:	d8c00517 	ldw	r3,20(sp)
   105f8:	00800044 	movi	r2,1
   105fc:	10c0082e 	bgeu	r2,r3,10620 <__gedf2+0x5c>
   10600:	d8c00017 	ldw	r3,0(sp)
   10604:	10c0062e 	bgeu	r2,r3,10620 <__gedf2+0x5c>
   10608:	d9000504 	addi	r4,sp,20
   1060c:	d80b883a 	mov	r5,sp
   10610:	00110b80 	call	110b8 <__fpcmp_parts_d>
   10614:	dfc00e17 	ldw	ra,56(sp)
   10618:	dec00f04 	addi	sp,sp,60
   1061c:	f800283a 	ret
   10620:	00bfffc4 	movi	r2,-1
   10624:	003ffb06 	br	10614 <__gedf2+0x50>

00010628 <__ltdf2>:
   10628:	defff104 	addi	sp,sp,-60
   1062c:	d9000c15 	stw	r4,48(sp)
   10630:	d9400d15 	stw	r5,52(sp)
   10634:	d9000c04 	addi	r4,sp,48
   10638:	d9400504 	addi	r5,sp,20
   1063c:	dfc00e15 	stw	ra,56(sp)
   10640:	d9800a15 	stw	r6,40(sp)
   10644:	d9c00b15 	stw	r7,44(sp)
   10648:	0010fb40 	call	10fb4 <__unpack_d>
   1064c:	d9000a04 	addi	r4,sp,40
   10650:	d80b883a 	mov	r5,sp
   10654:	0010fb40 	call	10fb4 <__unpack_d>
   10658:	d8c00517 	ldw	r3,20(sp)
   1065c:	00800044 	movi	r2,1
   10660:	10c0052e 	bgeu	r2,r3,10678 <__ltdf2+0x50>
   10664:	d8c00017 	ldw	r3,0(sp)
   10668:	10c0032e 	bgeu	r2,r3,10678 <__ltdf2+0x50>
   1066c:	d9000504 	addi	r4,sp,20
   10670:	d80b883a 	mov	r5,sp
   10674:	00110b80 	call	110b8 <__fpcmp_parts_d>
   10678:	dfc00e17 	ldw	ra,56(sp)
   1067c:	dec00f04 	addi	sp,sp,60
   10680:	f800283a 	ret

00010684 <__ledf2>:
   10684:	defff104 	addi	sp,sp,-60
   10688:	d9000c15 	stw	r4,48(sp)
   1068c:	d9400d15 	stw	r5,52(sp)
   10690:	d9000c04 	addi	r4,sp,48
   10694:	d9400504 	addi	r5,sp,20
   10698:	dfc00e15 	stw	ra,56(sp)
   1069c:	d9800a15 	stw	r6,40(sp)
   106a0:	d9c00b15 	stw	r7,44(sp)
   106a4:	0010fb40 	call	10fb4 <__unpack_d>
   106a8:	d9000a04 	addi	r4,sp,40
   106ac:	d80b883a 	mov	r5,sp
   106b0:	0010fb40 	call	10fb4 <__unpack_d>
   106b4:	d8c00517 	ldw	r3,20(sp)
   106b8:	00800044 	movi	r2,1
   106bc:	10c0052e 	bgeu	r2,r3,106d4 <__ledf2+0x50>
   106c0:	d8c00017 	ldw	r3,0(sp)
   106c4:	10c0032e 	bgeu	r2,r3,106d4 <__ledf2+0x50>
   106c8:	d9000504 	addi	r4,sp,20
   106cc:	d80b883a 	mov	r5,sp
   106d0:	00110b80 	call	110b8 <__fpcmp_parts_d>
   106d4:	dfc00e17 	ldw	ra,56(sp)
   106d8:	dec00f04 	addi	sp,sp,60
   106dc:	f800283a 	ret

000106e0 <__floatsidf>:
   106e0:	2004d7fa 	srli	r2,r4,31
   106e4:	defff904 	addi	sp,sp,-28
   106e8:	00c000c4 	movi	r3,3
   106ec:	dfc00615 	stw	ra,24(sp)
   106f0:	dc000515 	stw	r16,20(sp)
   106f4:	d8c00015 	stw	r3,0(sp)
   106f8:	d8800115 	stw	r2,4(sp)
   106fc:	2000081e 	bne	r4,zero,10720 <__floatsidf+0x40>
   10700:	00800084 	movi	r2,2
   10704:	d8800015 	stw	r2,0(sp)
   10708:	d809883a 	mov	r4,sp
   1070c:	0010d900 	call	10d90 <__pack_d>
   10710:	dfc00617 	ldw	ra,24(sp)
   10714:	dc000517 	ldw	r16,20(sp)
   10718:	dec00704 	addi	sp,sp,28
   1071c:	f800283a 	ret
   10720:	00c00f04 	movi	r3,60
   10724:	d8c00215 	stw	r3,8(sp)
   10728:	10000f1e 	bne	r2,zero,10768 <__floatsidf+0x88>
   1072c:	2021883a 	mov	r16,r4
   10730:	8009883a 	mov	r4,r16
   10734:	0010b340 	call	10b34 <__clzsi2>
   10738:	11000744 	addi	r4,r2,29
   1073c:	0100110e 	bge	zero,r4,10784 <__floatsidf+0xa4>
   10740:	10ffff44 	addi	r3,r2,-3
   10744:	18001216 	blt	r3,zero,10790 <__floatsidf+0xb0>
   10748:	80c6983a 	sll	r3,r16,r3
   1074c:	0009883a 	mov	r4,zero
   10750:	014007c4 	movi	r5,31
   10754:	2885c83a 	sub	r2,r5,r2
   10758:	d9000315 	stw	r4,12(sp)
   1075c:	d8c00415 	stw	r3,16(sp)
   10760:	d8800215 	stw	r2,8(sp)
   10764:	003fe806 	br	10708 <__floatsidf+0x28>
   10768:	00a00034 	movhi	r2,32768
   1076c:	20800e26 	beq	r4,r2,107a8 <__floatsidf+0xc8>
   10770:	0121c83a 	sub	r16,zero,r4
   10774:	8009883a 	mov	r4,r16
   10778:	0010b340 	call	10b34 <__clzsi2>
   1077c:	11000744 	addi	r4,r2,29
   10780:	013fef16 	blt	zero,r4,10740 <__floatsidf+0x60>
   10784:	dc000315 	stw	r16,12(sp)
   10788:	d8000415 	stw	zero,16(sp)
   1078c:	003fde06 	br	10708 <__floatsidf+0x28>
   10790:	800ad07a 	srli	r5,r16,1
   10794:	00c007c4 	movi	r3,31
   10798:	1907c83a 	sub	r3,r3,r4
   1079c:	28c6d83a 	srl	r3,r5,r3
   107a0:	8108983a 	sll	r4,r16,r4
   107a4:	003fea06 	br	10750 <__floatsidf+0x70>
   107a8:	0005883a 	mov	r2,zero
   107ac:	00f07834 	movhi	r3,49632
   107b0:	003fd706 	br	10710 <__floatsidf+0x30>

000107b4 <__fixdfsi>:
   107b4:	defff804 	addi	sp,sp,-32
   107b8:	d9000515 	stw	r4,20(sp)
   107bc:	d9400615 	stw	r5,24(sp)
   107c0:	d9000504 	addi	r4,sp,20
   107c4:	d80b883a 	mov	r5,sp
   107c8:	dfc00715 	stw	ra,28(sp)
   107cc:	0010fb40 	call	10fb4 <__unpack_d>
   107d0:	d8800017 	ldw	r2,0(sp)
   107d4:	00c00084 	movi	r3,2
   107d8:	10c01c26 	beq	r2,r3,1084c <__fixdfsi+0x98>
   107dc:	00c00044 	movi	r3,1
   107e0:	18801a2e 	bgeu	r3,r2,1084c <__fixdfsi+0x98>
   107e4:	00c00104 	movi	r3,4
   107e8:	10c01126 	beq	r2,r3,10830 <__fixdfsi+0x7c>
   107ec:	d8800217 	ldw	r2,8(sp)
   107f0:	10001616 	blt	r2,zero,1084c <__fixdfsi+0x98>
   107f4:	00c00784 	movi	r3,30
   107f8:	18800d16 	blt	r3,r2,10830 <__fixdfsi+0x7c>
   107fc:	00c00f04 	movi	r3,60
   10800:	1885c83a 	sub	r2,r3,r2
   10804:	10fff804 	addi	r3,r2,-32
   10808:	d9400317 	ldw	r5,12(sp)
   1080c:	d9000417 	ldw	r4,16(sp)
   10810:	18001616 	blt	r3,zero,1086c <__fixdfsi+0xb8>
   10814:	20c4d83a 	srl	r2,r4,r3
   10818:	d8c00117 	ldw	r3,4(sp)
   1081c:	18000126 	beq	r3,zero,10824 <__fixdfsi+0x70>
   10820:	0085c83a 	sub	r2,zero,r2
   10824:	dfc00717 	ldw	ra,28(sp)
   10828:	dec00804 	addi	sp,sp,32
   1082c:	f800283a 	ret
   10830:	d8800117 	ldw	r2,4(sp)
   10834:	1000091e 	bne	r2,zero,1085c <__fixdfsi+0xa8>
   10838:	00a00034 	movhi	r2,32768
   1083c:	10bfffc4 	addi	r2,r2,-1
   10840:	dfc00717 	ldw	ra,28(sp)
   10844:	dec00804 	addi	sp,sp,32
   10848:	f800283a 	ret
   1084c:	0005883a 	mov	r2,zero
   10850:	dfc00717 	ldw	ra,28(sp)
   10854:	dec00804 	addi	sp,sp,32
   10858:	f800283a 	ret
   1085c:	00a00034 	movhi	r2,32768
   10860:	dfc00717 	ldw	ra,28(sp)
   10864:	dec00804 	addi	sp,sp,32
   10868:	f800283a 	ret
   1086c:	2008907a 	slli	r4,r4,1
   10870:	018007c4 	movi	r6,31
   10874:	308dc83a 	sub	r6,r6,r2
   10878:	2188983a 	sll	r4,r4,r6
   1087c:	2884d83a 	srl	r2,r5,r2
   10880:	2084b03a 	or	r2,r4,r2
   10884:	003fe406 	br	10818 <__fixdfsi+0x64>

00010888 <__truncdfsf2>:
   10888:	defff804 	addi	sp,sp,-32
   1088c:	d9000515 	stw	r4,20(sp)
   10890:	d9400615 	stw	r5,24(sp)
   10894:	d9000504 	addi	r4,sp,20
   10898:	d80b883a 	mov	r5,sp
   1089c:	dfc00715 	stw	ra,28(sp)
   108a0:	0010fb40 	call	10fb4 <__unpack_d>
   108a4:	d8800317 	ldw	r2,12(sp)
   108a8:	d8c00417 	ldw	r3,16(sp)
   108ac:	01100034 	movhi	r4,16384
   108b0:	213fffc4 	addi	r4,r4,-1
   108b4:	100ed7ba 	srli	r7,r2,30
   108b8:	180690ba 	slli	r3,r3,2
   108bc:	1104703a 	and	r2,r2,r4
   108c0:	19ceb03a 	or	r7,r3,r7
   108c4:	10000126 	beq	r2,zero,108cc <__truncdfsf2+0x44>
   108c8:	39c00054 	ori	r7,r7,1
   108cc:	d9000017 	ldw	r4,0(sp)
   108d0:	d9400117 	ldw	r5,4(sp)
   108d4:	d9800217 	ldw	r6,8(sp)
   108d8:	0010d640 	call	10d64 <__make_fp>
   108dc:	dfc00717 	ldw	ra,28(sp)
   108e0:	dec00804 	addi	sp,sp,32
   108e4:	f800283a 	ret

000108e8 <__floatunsidf>:
   108e8:	defff904 	addi	sp,sp,-28
   108ec:	dc000515 	stw	r16,20(sp)
   108f0:	dfc00615 	stw	ra,24(sp)
   108f4:	d8000115 	stw	zero,4(sp)
   108f8:	2021883a 	mov	r16,r4
   108fc:	20001726 	beq	r4,zero,1095c <__floatunsidf+0x74>
   10900:	008000c4 	movi	r2,3
   10904:	d8800015 	stw	r2,0(sp)
   10908:	00800f04 	movi	r2,60
   1090c:	d8800215 	stw	r2,8(sp)
   10910:	0010b340 	call	10b34 <__clzsi2>
   10914:	10c00744 	addi	r3,r2,29
   10918:	18001816 	blt	r3,zero,1097c <__floatunsidf+0x94>
   1091c:	18002d26 	beq	r3,zero,109d4 <__floatunsidf+0xec>
   10920:	113fff44 	addi	r4,r2,-3
   10924:	20002e16 	blt	r4,zero,109e0 <__floatunsidf+0xf8>
   10928:	8108983a 	sll	r4,r16,r4
   1092c:	0021883a 	mov	r16,zero
   10930:	014007c4 	movi	r5,31
   10934:	2885c83a 	sub	r2,r5,r2
   10938:	dc000315 	stw	r16,12(sp)
   1093c:	d9000415 	stw	r4,16(sp)
   10940:	d8800215 	stw	r2,8(sp)
   10944:	d809883a 	mov	r4,sp
   10948:	0010d900 	call	10d90 <__pack_d>
   1094c:	dfc00617 	ldw	ra,24(sp)
   10950:	dc000517 	ldw	r16,20(sp)
   10954:	dec00704 	addi	sp,sp,28
   10958:	f800283a 	ret
   1095c:	00800084 	movi	r2,2
   10960:	d809883a 	mov	r4,sp
   10964:	d8800015 	stw	r2,0(sp)
   10968:	0010d900 	call	10d90 <__pack_d>
   1096c:	dfc00617 	ldw	ra,24(sp)
   10970:	dc000517 	ldw	r16,20(sp)
   10974:	dec00704 	addi	sp,sp,28
   10978:	f800283a 	ret
   1097c:	00c7c83a 	sub	r3,zero,r3
   10980:	193ff804 	addi	r4,r3,-32
   10984:	20001c16 	blt	r4,zero,109f8 <__floatunsidf+0x110>
   10988:	000b883a 	mov	r5,zero
   1098c:	2009d7fa 	srai	r4,r4,31
   10990:	80c6d83a 	srl	r3,r16,r3
   10994:	297fffc4 	addi	r5,r5,-1
   10998:	2c20703a 	and	r16,r5,r16
   1099c:	8020c03a 	cmpne	r16,r16,zero
   109a0:	1906703a 	and	r3,r3,r4
   109a4:	010007c4 	movi	r4,31
   109a8:	80c6b03a 	or	r3,r16,r3
   109ac:	2085c83a 	sub	r2,r4,r2
   109b0:	d809883a 	mov	r4,sp
   109b4:	d8c00315 	stw	r3,12(sp)
   109b8:	d8000415 	stw	zero,16(sp)
   109bc:	d8800215 	stw	r2,8(sp)
   109c0:	0010d900 	call	10d90 <__pack_d>
   109c4:	dfc00617 	ldw	ra,24(sp)
   109c8:	dc000517 	ldw	r16,20(sp)
   109cc:	dec00704 	addi	sp,sp,28
   109d0:	f800283a 	ret
   109d4:	dc000315 	stw	r16,12(sp)
   109d8:	d8000415 	stw	zero,16(sp)
   109dc:	003fd906 	br	10944 <__floatunsidf+0x5c>
   109e0:	800ad07a 	srli	r5,r16,1
   109e4:	010007c4 	movi	r4,31
   109e8:	20c9c83a 	sub	r4,r4,r3
   109ec:	2908d83a 	srl	r4,r5,r4
   109f0:	80e0983a 	sll	r16,r16,r3
   109f4:	003fce06 	br	10930 <__floatunsidf+0x48>
   109f8:	01400044 	movi	r5,1
   109fc:	28ca983a 	sll	r5,r5,r3
   10a00:	003fe206 	br	1098c <__floatunsidf+0xa4>

00010a04 <udivmodsi4>:
   10a04:	2005883a 	mov	r2,r4
   10a08:	2900182e 	bgeu	r5,r4,10a6c <udivmodsi4+0x68>
   10a0c:	28001716 	blt	r5,zero,10a6c <udivmodsi4+0x68>
   10a10:	01000804 	movi	r4,32
   10a14:	00c00044 	movi	r3,1
   10a18:	00000206 	br	10a24 <udivmodsi4+0x20>
   10a1c:	20001126 	beq	r4,zero,10a64 <udivmodsi4+0x60>
   10a20:	28000516 	blt	r5,zero,10a38 <udivmodsi4+0x34>
   10a24:	294b883a 	add	r5,r5,r5
   10a28:	213fffc4 	addi	r4,r4,-1
   10a2c:	18c7883a 	add	r3,r3,r3
   10a30:	28bffa36 	bltu	r5,r2,10a1c <udivmodsi4+0x18>
   10a34:	18000b26 	beq	r3,zero,10a64 <udivmodsi4+0x60>
   10a38:	0009883a 	mov	r4,zero
   10a3c:	11400236 	bltu	r2,r5,10a48 <udivmodsi4+0x44>
   10a40:	1145c83a 	sub	r2,r2,r5
   10a44:	20c8b03a 	or	r4,r4,r3
   10a48:	1806d07a 	srli	r3,r3,1
   10a4c:	280ad07a 	srli	r5,r5,1
   10a50:	183ffa1e 	bne	r3,zero,10a3c <udivmodsi4+0x38>
   10a54:	3000021e 	bne	r6,zero,10a60 <udivmodsi4+0x5c>
   10a58:	2005883a 	mov	r2,r4
   10a5c:	f800283a 	ret
   10a60:	f800283a 	ret
   10a64:	0009883a 	mov	r4,zero
   10a68:	003ffa06 	br	10a54 <udivmodsi4+0x50>
   10a6c:	00c00044 	movi	r3,1
   10a70:	0009883a 	mov	r4,zero
   10a74:	003ff106 	br	10a3c <udivmodsi4+0x38>

00010a78 <__divsi3>:
   10a78:	defffe04 	addi	sp,sp,-8
   10a7c:	dfc00115 	stw	ra,4(sp)
   10a80:	dc000015 	stw	r16,0(sp)
   10a84:	20000a16 	blt	r4,zero,10ab0 <__divsi3+0x38>
   10a88:	0021883a 	mov	r16,zero
   10a8c:	28000b16 	blt	r5,zero,10abc <__divsi3+0x44>
   10a90:	000d883a 	mov	r6,zero
   10a94:	0010a040 	call	10a04 <udivmodsi4>
   10a98:	80000126 	beq	r16,zero,10aa0 <__divsi3+0x28>
   10a9c:	0085c83a 	sub	r2,zero,r2
   10aa0:	dfc00117 	ldw	ra,4(sp)
   10aa4:	dc000017 	ldw	r16,0(sp)
   10aa8:	dec00204 	addi	sp,sp,8
   10aac:	f800283a 	ret
   10ab0:	0109c83a 	sub	r4,zero,r4
   10ab4:	04000044 	movi	r16,1
   10ab8:	283ff50e 	bge	r5,zero,10a90 <__divsi3+0x18>
   10abc:	014bc83a 	sub	r5,zero,r5
   10ac0:	8400005c 	xori	r16,r16,1
   10ac4:	003ff206 	br	10a90 <__divsi3+0x18>

00010ac8 <__modsi3>:
   10ac8:	deffff04 	addi	sp,sp,-4
   10acc:	dfc00015 	stw	ra,0(sp)
   10ad0:	20000516 	blt	r4,zero,10ae8 <__modsi3+0x20>
   10ad4:	28000c16 	blt	r5,zero,10b08 <__modsi3+0x40>
   10ad8:	01800044 	movi	r6,1
   10adc:	dfc00017 	ldw	ra,0(sp)
   10ae0:	dec00104 	addi	sp,sp,4
   10ae4:	0010a041 	jmpi	10a04 <udivmodsi4>
   10ae8:	0109c83a 	sub	r4,zero,r4
   10aec:	28000b16 	blt	r5,zero,10b1c <__modsi3+0x54>
   10af0:	01800044 	movi	r6,1
   10af4:	0010a040 	call	10a04 <udivmodsi4>
   10af8:	0085c83a 	sub	r2,zero,r2
   10afc:	dfc00017 	ldw	ra,0(sp)
   10b00:	dec00104 	addi	sp,sp,4
   10b04:	f800283a 	ret
   10b08:	014bc83a 	sub	r5,zero,r5
   10b0c:	01800044 	movi	r6,1
   10b10:	dfc00017 	ldw	ra,0(sp)
   10b14:	dec00104 	addi	sp,sp,4
   10b18:	0010a041 	jmpi	10a04 <udivmodsi4>
   10b1c:	014bc83a 	sub	r5,zero,r5
   10b20:	003ff306 	br	10af0 <__modsi3+0x28>

00010b24 <__udivsi3>:
   10b24:	000d883a 	mov	r6,zero
   10b28:	0010a041 	jmpi	10a04 <udivmodsi4>

00010b2c <__umodsi3>:
   10b2c:	01800044 	movi	r6,1
   10b30:	0010a041 	jmpi	10a04 <udivmodsi4>

00010b34 <__clzsi2>:
   10b34:	00bfffd4 	movui	r2,65535
   10b38:	11000b36 	bltu	r2,r4,10b68 <__clzsi2+0x34>
   10b3c:	00803fc4 	movi	r2,255
   10b40:	11001e2e 	bgeu	r2,r4,10bbc <__clzsi2+0x88>
   10b44:	00c00204 	movi	r3,8
   10b48:	20c8d83a 	srl	r4,r4,r3
   10b4c:	00c00074 	movhi	r3,1
   10b50:	18d3cd04 	addi	r3,r3,20276
   10b54:	00800604 	movi	r2,24
   10b58:	1909883a 	add	r4,r3,r4
   10b5c:	20c00003 	ldbu	r3,0(r4)
   10b60:	10c5c83a 	sub	r2,r2,r3
   10b64:	f800283a 	ret
   10b68:	00804034 	movhi	r2,256
   10b6c:	10bfffc4 	addi	r2,r2,-1
   10b70:	11000936 	bltu	r2,r4,10b98 <__clzsi2+0x64>
   10b74:	00800404 	movi	r2,16
   10b78:	1007883a 	mov	r3,r2
   10b7c:	20c8d83a 	srl	r4,r4,r3
   10b80:	00c00074 	movhi	r3,1
   10b84:	18d3cd04 	addi	r3,r3,20276
   10b88:	1909883a 	add	r4,r3,r4
   10b8c:	20c00003 	ldbu	r3,0(r4)
   10b90:	10c5c83a 	sub	r2,r2,r3
   10b94:	f800283a 	ret
   10b98:	00c00604 	movi	r3,24
   10b9c:	20c8d83a 	srl	r4,r4,r3
   10ba0:	00c00074 	movhi	r3,1
   10ba4:	18d3cd04 	addi	r3,r3,20276
   10ba8:	00800204 	movi	r2,8
   10bac:	1909883a 	add	r4,r3,r4
   10bb0:	20c00003 	ldbu	r3,0(r4)
   10bb4:	10c5c83a 	sub	r2,r2,r3
   10bb8:	f800283a 	ret
   10bbc:	0007883a 	mov	r3,zero
   10bc0:	20c8d83a 	srl	r4,r4,r3
   10bc4:	00c00074 	movhi	r3,1
   10bc8:	18d3cd04 	addi	r3,r3,20276
   10bcc:	00800804 	movi	r2,32
   10bd0:	1909883a 	add	r4,r3,r4
   10bd4:	20c00003 	ldbu	r3,0(r4)
   10bd8:	10c5c83a 	sub	r2,r2,r3
   10bdc:	f800283a 	ret

00010be0 <__unpack_f>:
   10be0:	20c00017 	ldw	r3,0(r4)
   10be4:	00802034 	movhi	r2,128
   10be8:	10bfffc4 	addi	r2,r2,-1
   10bec:	1808d5fa 	srli	r4,r3,23
   10bf0:	180cd7fa 	srli	r6,r3,31
   10bf4:	1884703a 	and	r2,r3,r2
   10bf8:	21003fcc 	andi	r4,r4,255
   10bfc:	29800115 	stw	r6,4(r5)
   10c00:	2000111e 	bne	r4,zero,10c48 <__unpack_f+0x68>
   10c04:	10001a26 	beq	r2,zero,10c70 <__unpack_f+0x90>
   10c08:	00ffe084 	movi	r3,-126
   10c0c:	100491fa 	slli	r2,r2,7
   10c10:	28c00215 	stw	r3,8(r5)
   10c14:	00c000c4 	movi	r3,3
   10c18:	28c00015 	stw	r3,0(r5)
   10c1c:	01900034 	movhi	r6,16384
   10c20:	31bfffc4 	addi	r6,r6,-1
   10c24:	30801036 	bltu	r6,r2,10c68 <__unpack_f+0x88>
   10c28:	00ffe044 	movi	r3,-127
   10c2c:	1085883a 	add	r2,r2,r2
   10c30:	1809883a 	mov	r4,r3
   10c34:	18ffffc4 	addi	r3,r3,-1
   10c38:	30bffc2e 	bgeu	r6,r2,10c2c <__unpack_f+0x4c>
   10c3c:	29000215 	stw	r4,8(r5)
   10c40:	28800315 	stw	r2,12(r5)
   10c44:	f800283a 	ret
   10c48:	01803fc4 	movi	r6,255
   10c4c:	21800b26 	beq	r4,r6,10c7c <__unpack_f+0x9c>
   10c50:	100491fa 	slli	r2,r2,7
   10c54:	213fe044 	addi	r4,r4,-127
   10c58:	00c000c4 	movi	r3,3
   10c5c:	10900034 	orhi	r2,r2,16384
   10c60:	29000215 	stw	r4,8(r5)
   10c64:	28c00015 	stw	r3,0(r5)
   10c68:	28800315 	stw	r2,12(r5)
   10c6c:	f800283a 	ret
   10c70:	00800084 	movi	r2,2
   10c74:	28800015 	stw	r2,0(r5)
   10c78:	f800283a 	ret
   10c7c:	10000526 	beq	r2,zero,10c94 <__unpack_f+0xb4>
   10c80:	18c0042c 	andhi	r3,r3,16
   10c84:	18000626 	beq	r3,zero,10ca0 <__unpack_f+0xc0>
   10c88:	00c00044 	movi	r3,1
   10c8c:	28c00015 	stw	r3,0(r5)
   10c90:	003ff506 	br	10c68 <__unpack_f+0x88>
   10c94:	00800104 	movi	r2,4
   10c98:	28800015 	stw	r2,0(r5)
   10c9c:	f800283a 	ret
   10ca0:	28000015 	stw	zero,0(r5)
   10ca4:	003ff006 	br	10c68 <__unpack_f+0x88>

00010ca8 <__fpcmp_parts_f>:
   10ca8:	20c00017 	ldw	r3,0(r4)
   10cac:	00800044 	movi	r2,1
   10cb0:	10c0172e 	bgeu	r2,r3,10d10 <__fpcmp_parts_f+0x68>
   10cb4:	29800017 	ldw	r6,0(r5)
   10cb8:	1180152e 	bgeu	r2,r6,10d10 <__fpcmp_parts_f+0x68>
   10cbc:	01c00104 	movi	r7,4
   10cc0:	19c02326 	beq	r3,r7,10d50 <__fpcmp_parts_f+0xa8>
   10cc4:	31c00926 	beq	r6,r7,10cec <__fpcmp_parts_f+0x44>
   10cc8:	01c00084 	movi	r7,2
   10ccc:	19c00626 	beq	r3,r7,10ce8 <__fpcmp_parts_f+0x40>
   10cd0:	31c01126 	beq	r6,r7,10d18 <__fpcmp_parts_f+0x70>
   10cd4:	20c00117 	ldw	r3,4(r4)
   10cd8:	29800117 	ldw	r6,4(r5)
   10cdc:	19801226 	beq	r3,r6,10d28 <__fpcmp_parts_f+0x80>
   10ce0:	1800041e 	bne	r3,zero,10cf4 <__fpcmp_parts_f+0x4c>
   10ce4:	f800283a 	ret
   10ce8:	30c01526 	beq	r6,r3,10d40 <__fpcmp_parts_f+0x98>
   10cec:	28800117 	ldw	r2,4(r5)
   10cf0:	1000071e 	bne	r2,zero,10d10 <__fpcmp_parts_f+0x68>
   10cf4:	00bfffc4 	movi	r2,-1
   10cf8:	f800283a 	ret
   10cfc:	39801216 	blt	r7,r6,10d48 <__fpcmp_parts_f+0xa0>
   10d00:	21000317 	ldw	r4,12(r4)
   10d04:	28800317 	ldw	r2,12(r5)
   10d08:	11000c2e 	bgeu	r2,r4,10d3c <__fpcmp_parts_f+0x94>
   10d0c:	183ff91e 	bne	r3,zero,10cf4 <__fpcmp_parts_f+0x4c>
   10d10:	00800044 	movi	r2,1
   10d14:	f800283a 	ret
   10d18:	20800117 	ldw	r2,4(r4)
   10d1c:	103ff51e 	bne	r2,zero,10cf4 <__fpcmp_parts_f+0x4c>
   10d20:	00800044 	movi	r2,1
   10d24:	f800283a 	ret
   10d28:	21c00217 	ldw	r7,8(r4)
   10d2c:	29800217 	ldw	r6,8(r5)
   10d30:	31fff20e 	bge	r6,r7,10cfc <__fpcmp_parts_f+0x54>
   10d34:	183fef1e 	bne	r3,zero,10cf4 <__fpcmp_parts_f+0x4c>
   10d38:	f800283a 	ret
   10d3c:	20800236 	bltu	r4,r2,10d48 <__fpcmp_parts_f+0xa0>
   10d40:	0005883a 	mov	r2,zero
   10d44:	f800283a 	ret
   10d48:	183fea26 	beq	r3,zero,10cf4 <__fpcmp_parts_f+0x4c>
   10d4c:	003ff006 	br	10d10 <__fpcmp_parts_f+0x68>
   10d50:	30fff11e 	bne	r6,r3,10d18 <__fpcmp_parts_f+0x70>
   10d54:	28c00117 	ldw	r3,4(r5)
   10d58:	20800117 	ldw	r2,4(r4)
   10d5c:	1885c83a 	sub	r2,r3,r2
   10d60:	f800283a 	ret

00010d64 <__make_fp>:
   10d64:	defffb04 	addi	sp,sp,-20
   10d68:	d9000015 	stw	r4,0(sp)
   10d6c:	d809883a 	mov	r4,sp
   10d70:	dfc00415 	stw	ra,16(sp)
   10d74:	d9400115 	stw	r5,4(sp)
   10d78:	d9800215 	stw	r6,8(sp)
   10d7c:	d9c00315 	stw	r7,12(sp)
   10d80:	00112100 	call	11210 <__pack_f>
   10d84:	dfc00417 	ldw	ra,16(sp)
   10d88:	dec00504 	addi	sp,sp,20
   10d8c:	f800283a 	ret

00010d90 <__pack_d>:
   10d90:	20800017 	ldw	r2,0(r4)
   10d94:	defff804 	addi	sp,sp,-32
   10d98:	dcc00315 	stw	r19,12(sp)
   10d9c:	dc800215 	stw	r18,8(sp)
   10da0:	dfc00715 	stw	ra,28(sp)
   10da4:	dd800615 	stw	r22,24(sp)
   10da8:	dd400515 	stw	r21,20(sp)
   10dac:	dd000415 	stw	r20,16(sp)
   10db0:	dc400115 	stw	r17,4(sp)
   10db4:	dc000015 	stw	r16,0(sp)
   10db8:	04800044 	movi	r18,1
   10dbc:	24400317 	ldw	r17,12(r4)
   10dc0:	24000417 	ldw	r16,16(r4)
   10dc4:	24c00117 	ldw	r19,4(r4)
   10dc8:	9080422e 	bgeu	r18,r2,10ed4 <__pack_d+0x144>
   10dcc:	00c00104 	movi	r3,4
   10dd0:	10c03c26 	beq	r2,r3,10ec4 <__pack_d+0x134>
   10dd4:	00c00084 	movi	r3,2
   10dd8:	10c01926 	beq	r2,r3,10e40 <__pack_d+0xb0>
   10ddc:	8c04b03a 	or	r2,r17,r16
   10de0:	10001726 	beq	r2,zero,10e40 <__pack_d+0xb0>
   10de4:	21000217 	ldw	r4,8(r4)
   10de8:	00bf0084 	movi	r2,-1022
   10dec:	20804016 	blt	r4,r2,10ef0 <__pack_d+0x160>
   10df0:	0080ffc4 	movi	r2,1023
   10df4:	11003316 	blt	r2,r4,10ec4 <__pack_d+0x134>
   10df8:	88803fcc 	andi	r2,r17,255
   10dfc:	00c02004 	movi	r3,128
   10e00:	10c02926 	beq	r2,r3,10ea8 <__pack_d+0x118>
   10e04:	88801fc4 	addi	r2,r17,127
   10e08:	1463803a 	cmpltu	r17,r2,r17
   10e0c:	8c21883a 	add	r16,r17,r16
   10e10:	1023883a 	mov	r17,r2
   10e14:	00880034 	movhi	r2,8192
   10e18:	10bfffc4 	addi	r2,r2,-1
   10e1c:	14001c36 	bltu	r2,r16,10e90 <__pack_d+0x100>
   10e20:	2100ffc4 	addi	r4,r4,1023
   10e24:	8006963a 	slli	r3,r16,24
   10e28:	8804d23a 	srli	r2,r17,8
   10e2c:	8020913a 	slli	r16,r16,4
   10e30:	2101ffcc 	andi	r4,r4,2047
   10e34:	1884b03a 	or	r2,r3,r2
   10e38:	8020d33a 	srli	r16,r16,12
   10e3c:	00000306 	br	10e4c <__pack_d+0xbc>
   10e40:	0009883a 	mov	r4,zero
   10e44:	0005883a 	mov	r2,zero
   10e48:	0021883a 	mov	r16,zero
   10e4c:	2008953a 	slli	r4,r4,20
   10e50:	982697fa 	slli	r19,r19,31
   10e54:	00c00434 	movhi	r3,16
   10e58:	18ffffc4 	addi	r3,r3,-1
   10e5c:	80e0703a 	and	r16,r16,r3
   10e60:	8106b03a 	or	r3,r16,r4
   10e64:	1cc6b03a 	or	r3,r3,r19
   10e68:	dfc00717 	ldw	ra,28(sp)
   10e6c:	dd800617 	ldw	r22,24(sp)
   10e70:	dd400517 	ldw	r21,20(sp)
   10e74:	dd000417 	ldw	r20,16(sp)
   10e78:	dcc00317 	ldw	r19,12(sp)
   10e7c:	dc800217 	ldw	r18,8(sp)
   10e80:	dc400117 	ldw	r17,4(sp)
   10e84:	dc000017 	ldw	r16,0(sp)
   10e88:	dec00804 	addi	sp,sp,32
   10e8c:	f800283a 	ret
   10e90:	800697fa 	slli	r3,r16,31
   10e94:	8804d07a 	srli	r2,r17,1
   10e98:	21010004 	addi	r4,r4,1024
   10e9c:	8020d07a 	srli	r16,r16,1
   10ea0:	18a2b03a 	or	r17,r3,r2
   10ea4:	003fdf06 	br	10e24 <__pack_d+0x94>
   10ea8:	88c0400c 	andi	r3,r17,256
   10eac:	183fd926 	beq	r3,zero,10e14 <__pack_d+0x84>
   10eb0:	8885883a 	add	r2,r17,r2
   10eb4:	1463803a 	cmpltu	r17,r2,r17
   10eb8:	8c21883a 	add	r16,r17,r16
   10ebc:	1023883a 	mov	r17,r2
   10ec0:	003fd406 	br	10e14 <__pack_d+0x84>
   10ec4:	0101ffc4 	movi	r4,2047
   10ec8:	0005883a 	mov	r2,zero
   10ecc:	0021883a 	mov	r16,zero
   10ed0:	003fde06 	br	10e4c <__pack_d+0xbc>
   10ed4:	84000234 	orhi	r16,r16,8
   10ed8:	00c00434 	movhi	r3,16
   10edc:	18ffffc4 	addi	r3,r3,-1
   10ee0:	8805883a 	mov	r2,r17
   10ee4:	80e0703a 	and	r16,r16,r3
   10ee8:	0101ffc4 	movi	r4,2047
   10eec:	003fd706 	br	10e4c <__pack_d+0xbc>
   10ef0:	1129c83a 	sub	r20,r2,r4
   10ef4:	00800e04 	movi	r2,56
   10ef8:	15002716 	blt	r2,r20,10f98 <__pack_d+0x208>
   10efc:	800b883a 	mov	r5,r16
   10f00:	a00d883a 	mov	r6,r20
   10f04:	8809883a 	mov	r4,r17
   10f08:	00111880 	call	11188 <__lshrdi3>
   10f0c:	9009883a 	mov	r4,r18
   10f10:	000b883a 	mov	r5,zero
   10f14:	a00d883a 	mov	r6,r20
   10f18:	102d883a 	mov	r22,r2
   10f1c:	182b883a 	mov	r21,r3
   10f20:	00111cc0 	call	111cc <__ashldi3>
   10f24:	1009003a 	cmpeq	r4,r2,zero
   10f28:	1907c83a 	sub	r3,r3,r4
   10f2c:	10bfffc4 	addi	r2,r2,-1
   10f30:	1c20703a 	and	r16,r3,r16
   10f34:	1444703a 	and	r2,r2,r17
   10f38:	1404b03a 	or	r2,r2,r16
   10f3c:	1004c03a 	cmpne	r2,r2,zero
   10f40:	1584b03a 	or	r2,r2,r22
   10f44:	11003fcc 	andi	r4,r2,255
   10f48:	01402004 	movi	r5,128
   10f4c:	a807883a 	mov	r3,r21
   10f50:	2140131e 	bne	r4,r5,10fa0 <__pack_d+0x210>
   10f54:	1140400c 	andi	r5,r2,256
   10f58:	28000426 	beq	r5,zero,10f6c <__pack_d+0x1dc>
   10f5c:	1109883a 	add	r4,r2,r4
   10f60:	2085803a 	cmpltu	r2,r4,r2
   10f64:	1547883a 	add	r3,r2,r21
   10f68:	2005883a 	mov	r2,r4
   10f6c:	1808963a 	slli	r4,r3,24
   10f70:	1004d23a 	srli	r2,r2,8
   10f74:	1820913a 	slli	r16,r3,4
   10f78:	01440034 	movhi	r5,4096
   10f7c:	297fffc4 	addi	r5,r5,-1
   10f80:	2084b03a 	or	r2,r4,r2
   10f84:	8020d33a 	srli	r16,r16,12
   10f88:	01000044 	movi	r4,1
   10f8c:	28ffaf36 	bltu	r5,r3,10e4c <__pack_d+0xbc>
   10f90:	0009883a 	mov	r4,zero
   10f94:	003fad06 	br	10e4c <__pack_d+0xbc>
   10f98:	0005883a 	mov	r2,zero
   10f9c:	0007883a 	mov	r3,zero
   10fa0:	11001fc4 	addi	r4,r2,127
   10fa4:	2085803a 	cmpltu	r2,r4,r2
   10fa8:	10c7883a 	add	r3,r2,r3
   10fac:	2005883a 	mov	r2,r4
   10fb0:	003fee06 	br	10f6c <__pack_d+0x1dc>

00010fb4 <__unpack_d>:
   10fb4:	21800117 	ldw	r6,4(r4)
   10fb8:	20c00017 	ldw	r3,0(r4)
   10fbc:	3004d7fa 	srli	r2,r6,31
   10fc0:	3008d53a 	srli	r4,r6,20
   10fc4:	28800115 	stw	r2,4(r5)
   10fc8:	2101ffcc 	andi	r4,r4,2047
   10fcc:	00800434 	movhi	r2,16
   10fd0:	10bfffc4 	addi	r2,r2,-1
   10fd4:	3084703a 	and	r2,r6,r2
   10fd8:	20001a1e 	bne	r4,zero,11044 <__unpack_d+0x90>
   10fdc:	1888b03a 	or	r4,r3,r2
   10fe0:	20002626 	beq	r4,zero,1107c <__unpack_d+0xc8>
   10fe4:	1808d63a 	srli	r4,r3,24
   10fe8:	1004923a 	slli	r2,r2,8
   10fec:	01bf0084 	movi	r6,-1022
   10ff0:	29800215 	stw	r6,8(r5)
   10ff4:	2084b03a 	or	r2,r4,r2
   10ff8:	010000c4 	movi	r4,3
   10ffc:	29000015 	stw	r4,0(r5)
   11000:	02040034 	movhi	r8,4096
   11004:	423fffc4 	addi	r8,r8,-1
   11008:	1806923a 	slli	r3,r3,8
   1100c:	40801836 	bltu	r8,r2,11070 <__unpack_d+0xbc>
   11010:	013f0044 	movi	r4,-1023
   11014:	18cd883a 	add	r6,r3,r3
   11018:	30c7803a 	cmpltu	r3,r6,r3
   1101c:	1085883a 	add	r2,r2,r2
   11020:	1885883a 	add	r2,r3,r2
   11024:	200f883a 	mov	r7,r4
   11028:	3007883a 	mov	r3,r6
   1102c:	213fffc4 	addi	r4,r4,-1
   11030:	40bff82e 	bgeu	r8,r2,11014 <__unpack_d+0x60>
   11034:	29c00215 	stw	r7,8(r5)
   11038:	28c00315 	stw	r3,12(r5)
   1103c:	28800415 	stw	r2,16(r5)
   11040:	f800283a 	ret
   11044:	01c1ffc4 	movi	r7,2047
   11048:	21c00f26 	beq	r4,r7,11088 <__unpack_d+0xd4>
   1104c:	180cd63a 	srli	r6,r3,24
   11050:	1004923a 	slli	r2,r2,8
   11054:	213f0044 	addi	r4,r4,-1023
   11058:	1806923a 	slli	r3,r3,8
   1105c:	3084b03a 	or	r2,r6,r2
   11060:	29000215 	stw	r4,8(r5)
   11064:	010000c4 	movi	r4,3
   11068:	10840034 	orhi	r2,r2,4096
   1106c:	29000015 	stw	r4,0(r5)
   11070:	28c00315 	stw	r3,12(r5)
   11074:	28800415 	stw	r2,16(r5)
   11078:	f800283a 	ret
   1107c:	00800084 	movi	r2,2
   11080:	28800015 	stw	r2,0(r5)
   11084:	f800283a 	ret
   11088:	1888b03a 	or	r4,r3,r2
   1108c:	20000526 	beq	r4,zero,110a4 <__unpack_d+0xf0>
   11090:	3180022c 	andhi	r6,r6,8
   11094:	30000626 	beq	r6,zero,110b0 <__unpack_d+0xfc>
   11098:	01000044 	movi	r4,1
   1109c:	29000015 	stw	r4,0(r5)
   110a0:	003ff306 	br	11070 <__unpack_d+0xbc>
   110a4:	00800104 	movi	r2,4
   110a8:	28800015 	stw	r2,0(r5)
   110ac:	f800283a 	ret
   110b0:	28000015 	stw	zero,0(r5)
   110b4:	003fee06 	br	11070 <__unpack_d+0xbc>

000110b8 <__fpcmp_parts_d>:
   110b8:	20c00017 	ldw	r3,0(r4)
   110bc:	00800044 	movi	r2,1
   110c0:	10c0142e 	bgeu	r2,r3,11114 <__fpcmp_parts_d+0x5c>
   110c4:	29800017 	ldw	r6,0(r5)
   110c8:	1180122e 	bgeu	r2,r6,11114 <__fpcmp_parts_d+0x5c>
   110cc:	01c00104 	movi	r7,4
   110d0:	19c02826 	beq	r3,r7,11174 <__fpcmp_parts_d+0xbc>
   110d4:	31c00926 	beq	r6,r7,110fc <__fpcmp_parts_d+0x44>
   110d8:	01c00084 	movi	r7,2
   110dc:	19c00626 	beq	r3,r7,110f8 <__fpcmp_parts_d+0x40>
   110e0:	31c00a26 	beq	r6,r7,1110c <__fpcmp_parts_d+0x54>
   110e4:	20c00117 	ldw	r3,4(r4)
   110e8:	29800117 	ldw	r6,4(r5)
   110ec:	19800b26 	beq	r3,r6,1111c <__fpcmp_parts_d+0x64>
   110f0:	1800041e 	bne	r3,zero,11104 <__fpcmp_parts_d+0x4c>
   110f4:	f800283a 	ret
   110f8:	30c01a26 	beq	r6,r3,11164 <__fpcmp_parts_d+0xac>
   110fc:	28800117 	ldw	r2,4(r5)
   11100:	1000041e 	bne	r2,zero,11114 <__fpcmp_parts_d+0x5c>
   11104:	00bfffc4 	movi	r2,-1
   11108:	f800283a 	ret
   1110c:	20800117 	ldw	r2,4(r4)
   11110:	103ffc1e 	bne	r2,zero,11104 <__fpcmp_parts_d+0x4c>
   11114:	00800044 	movi	r2,1
   11118:	f800283a 	ret
   1111c:	21c00217 	ldw	r7,8(r4)
   11120:	29800217 	ldw	r6,8(r5)
   11124:	31c0020e 	bge	r6,r7,11130 <__fpcmp_parts_d+0x78>
   11128:	183ff61e 	bne	r3,zero,11104 <__fpcmp_parts_d+0x4c>
   1112c:	f800283a 	ret
   11130:	39800a16 	blt	r7,r6,1115c <__fpcmp_parts_d+0xa4>
   11134:	20800417 	ldw	r2,16(r4)
   11138:	29800417 	ldw	r6,16(r5)
   1113c:	21c00317 	ldw	r7,12(r4)
   11140:	29000317 	ldw	r4,12(r5)
   11144:	30800936 	bltu	r6,r2,1116c <__fpcmp_parts_d+0xb4>
   11148:	1180011e 	bne	r2,r6,11150 <__fpcmp_parts_d+0x98>
   1114c:	21c00736 	bltu	r4,r7,1116c <__fpcmp_parts_d+0xb4>
   11150:	11800236 	bltu	r2,r6,1115c <__fpcmp_parts_d+0xa4>
   11154:	3080031e 	bne	r6,r2,11164 <__fpcmp_parts_d+0xac>
   11158:	3900022e 	bgeu	r7,r4,11164 <__fpcmp_parts_d+0xac>
   1115c:	183fe926 	beq	r3,zero,11104 <__fpcmp_parts_d+0x4c>
   11160:	003fec06 	br	11114 <__fpcmp_parts_d+0x5c>
   11164:	0005883a 	mov	r2,zero
   11168:	f800283a 	ret
   1116c:	183fe926 	beq	r3,zero,11114 <__fpcmp_parts_d+0x5c>
   11170:	003fe406 	br	11104 <__fpcmp_parts_d+0x4c>
   11174:	30ffe51e 	bne	r6,r3,1110c <__fpcmp_parts_d+0x54>
   11178:	28c00117 	ldw	r3,4(r5)
   1117c:	20800117 	ldw	r2,4(r4)
   11180:	1885c83a 	sub	r2,r3,r2
   11184:	f800283a 	ret

00011188 <__lshrdi3>:
   11188:	2005883a 	mov	r2,r4
   1118c:	2807883a 	mov	r3,r5
   11190:	30000826 	beq	r6,zero,111b4 <__lshrdi3+0x2c>
   11194:	01000804 	movi	r4,32
   11198:	2189c83a 	sub	r4,r4,r6
   1119c:	0100060e 	bge	zero,r4,111b8 <__lshrdi3+0x30>
   111a0:	1184d83a 	srl	r2,r2,r6
   111a4:	2908983a 	sll	r4,r5,r4
   111a8:	298cd83a 	srl	r6,r5,r6
   111ac:	2084b03a 	or	r2,r4,r2
   111b0:	3007883a 	mov	r3,r6
   111b4:	f800283a 	ret
   111b8:	0105c83a 	sub	r2,zero,r4
   111bc:	000d883a 	mov	r6,zero
   111c0:	2884d83a 	srl	r2,r5,r2
   111c4:	3007883a 	mov	r3,r6
   111c8:	003ffa06 	br	111b4 <__lshrdi3+0x2c>

000111cc <__ashldi3>:
   111cc:	2005883a 	mov	r2,r4
   111d0:	2807883a 	mov	r3,r5
   111d4:	30000826 	beq	r6,zero,111f8 <__ashldi3+0x2c>
   111d8:	01000804 	movi	r4,32
   111dc:	2189c83a 	sub	r4,r4,r6
   111e0:	0100060e 	bge	zero,r4,111fc <__ashldi3+0x30>
   111e4:	1108d83a 	srl	r4,r2,r4
   111e8:	2986983a 	sll	r3,r5,r6
   111ec:	118c983a 	sll	r6,r2,r6
   111f0:	20c6b03a 	or	r3,r4,r3
   111f4:	3005883a 	mov	r2,r6
   111f8:	f800283a 	ret
   111fc:	0107c83a 	sub	r3,zero,r4
   11200:	000d883a 	mov	r6,zero
   11204:	10c6983a 	sll	r3,r2,r3
   11208:	3005883a 	mov	r2,r6
   1120c:	003ffa06 	br	111f8 <__ashldi3+0x2c>

00011210 <__pack_f>:
   11210:	21400017 	ldw	r5,0(r4)
   11214:	01800044 	movi	r6,1
   11218:	20c00317 	ldw	r3,12(r4)
   1121c:	21c00117 	ldw	r7,4(r4)
   11220:	3140282e 	bgeu	r6,r5,112c4 <__pack_f+0xb4>
   11224:	00800104 	movi	r2,4
   11228:	28802326 	beq	r5,r2,112b8 <__pack_f+0xa8>
   1122c:	00800084 	movi	r2,2
   11230:	28800f26 	beq	r5,r2,11270 <__pack_f+0x60>
   11234:	18000e26 	beq	r3,zero,11270 <__pack_f+0x60>
   11238:	21000217 	ldw	r4,8(r4)
   1123c:	00bfe084 	movi	r2,-126
   11240:	20802616 	blt	r4,r2,112dc <__pack_f+0xcc>
   11244:	00801fc4 	movi	r2,127
   11248:	11001b16 	blt	r2,r4,112b8 <__pack_f+0xa8>
   1124c:	188a703a 	and	r5,r3,r2
   11250:	00801004 	movi	r2,64
   11254:	28801126 	beq	r5,r2,1129c <__pack_f+0x8c>
   11258:	18c00fc4 	addi	r3,r3,63
   1125c:	18001316 	blt	r3,zero,112ac <__pack_f+0x9c>
   11260:	21001fc4 	addi	r4,r4,127
   11264:	180690ba 	slli	r3,r3,2
   11268:	1806d27a 	srli	r3,r3,9
   1126c:	00000206 	br	11278 <__pack_f+0x68>
   11270:	0009883a 	mov	r4,zero
   11274:	0007883a 	mov	r3,zero
   11278:	21003fcc 	andi	r4,r4,255
   1127c:	200895fa 	slli	r4,r4,23
   11280:	380a97fa 	slli	r5,r7,31
   11284:	00802034 	movhi	r2,128
   11288:	10bfffc4 	addi	r2,r2,-1
   1128c:	1886703a 	and	r3,r3,r2
   11290:	1904b03a 	or	r2,r3,r4
   11294:	1144b03a 	or	r2,r2,r5
   11298:	f800283a 	ret
   1129c:	1880200c 	andi	r2,r3,128
   112a0:	103fee26 	beq	r2,zero,1125c <__pack_f+0x4c>
   112a4:	18c01004 	addi	r3,r3,64
   112a8:	183fed0e 	bge	r3,zero,11260 <__pack_f+0x50>
   112ac:	1806d07a 	srli	r3,r3,1
   112b0:	21002004 	addi	r4,r4,128
   112b4:	003feb06 	br	11264 <__pack_f+0x54>
   112b8:	013fffc4 	movi	r4,-1
   112bc:	0007883a 	mov	r3,zero
   112c0:	003fed06 	br	11278 <__pack_f+0x68>
   112c4:	18c00434 	orhi	r3,r3,16
   112c8:	00802034 	movhi	r2,128
   112cc:	10bfffc4 	addi	r2,r2,-1
   112d0:	1886703a 	and	r3,r3,r2
   112d4:	013fffc4 	movi	r4,-1
   112d8:	003fe706 	br	11278 <__pack_f+0x68>
   112dc:	1105c83a 	sub	r2,r2,r4
   112e0:	01000644 	movi	r4,25
   112e4:	20801216 	blt	r4,r2,11330 <__pack_f+0x120>
   112e8:	3088983a 	sll	r4,r6,r2
   112ec:	1884d83a 	srl	r2,r3,r2
   112f0:	213fffc4 	addi	r4,r4,-1
   112f4:	20c6703a 	and	r3,r4,r3
   112f8:	1806c03a 	cmpne	r3,r3,zero
   112fc:	1884b03a 	or	r2,r3,r2
   11300:	11001fcc 	andi	r4,r2,127
   11304:	00c01004 	movi	r3,64
   11308:	20c00a1e 	bne	r4,r3,11334 <__pack_f+0x124>
   1130c:	10c0200c 	andi	r3,r2,128
   11310:	18000126 	beq	r3,zero,11318 <__pack_f+0x108>
   11314:	10801004 	addi	r2,r2,64
   11318:	100690ba 	slli	r3,r2,2
   1131c:	01100034 	movhi	r4,16384
   11320:	1105403a 	cmpgeu	r2,r2,r4
   11324:	1806d27a 	srli	r3,r3,9
   11328:	1009883a 	mov	r4,r2
   1132c:	003fd206 	br	11278 <__pack_f+0x68>
   11330:	0005883a 	mov	r2,zero
   11334:	10800fc4 	addi	r2,r2,63
   11338:	003ff706 	br	11318 <__pack_f+0x108>

0001133c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1133c:	defffe04 	addi	sp,sp,-8
   11340:	dfc00115 	stw	ra,4(sp)
   11344:	df000015 	stw	fp,0(sp)
   11348:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1134c:	00800074 	movhi	r2,1
   11350:	109abf04 	addi	r2,r2,27388
   11354:	10800017 	ldw	r2,0(r2)
   11358:	10000526 	beq	r2,zero,11370 <alt_get_errno+0x34>
   1135c:	00800074 	movhi	r2,1
   11360:	109abf04 	addi	r2,r2,27388
   11364:	10800017 	ldw	r2,0(r2)
   11368:	103ee83a 	callr	r2
   1136c:	00000206 	br	11378 <alt_get_errno+0x3c>
   11370:	008000b4 	movhi	r2,2
   11374:	10a19804 	addi	r2,r2,-31136
}
   11378:	e037883a 	mov	sp,fp
   1137c:	dfc00117 	ldw	ra,4(sp)
   11380:	df000017 	ldw	fp,0(sp)
   11384:	dec00204 	addi	sp,sp,8
   11388:	f800283a 	ret

0001138c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1138c:	defffb04 	addi	sp,sp,-20
   11390:	dfc00415 	stw	ra,16(sp)
   11394:	df000315 	stw	fp,12(sp)
   11398:	df000304 	addi	fp,sp,12
   1139c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   113a0:	e0bfff17 	ldw	r2,-4(fp)
   113a4:	10000716 	blt	r2,zero,113c4 <close+0x38>
   113a8:	e13fff17 	ldw	r4,-4(fp)
   113ac:	01400304 	movi	r5,12
   113b0:	00020000 	call	2000 <__mulsi3>
   113b4:	00c00074 	movhi	r3,1
   113b8:	18d63204 	addi	r3,r3,22728
   113bc:	10c5883a 	add	r2,r2,r3
   113c0:	00000106 	br	113c8 <close+0x3c>
   113c4:	0005883a 	mov	r2,zero
   113c8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   113cc:	e0bffd17 	ldw	r2,-12(fp)
   113d0:	10001826 	beq	r2,zero,11434 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   113d4:	e0bffd17 	ldw	r2,-12(fp)
   113d8:	10800017 	ldw	r2,0(r2)
   113dc:	10800417 	ldw	r2,16(r2)
   113e0:	10000626 	beq	r2,zero,113fc <close+0x70>
   113e4:	e0bffd17 	ldw	r2,-12(fp)
   113e8:	10800017 	ldw	r2,0(r2)
   113ec:	10800417 	ldw	r2,16(r2)
   113f0:	e13ffd17 	ldw	r4,-12(fp)
   113f4:	103ee83a 	callr	r2
   113f8:	00000106 	br	11400 <close+0x74>
   113fc:	0005883a 	mov	r2,zero
   11400:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11404:	e13fff17 	ldw	r4,-4(fp)
   11408:	0011d1c0 	call	11d1c <alt_release_fd>
    if (rval < 0)
   1140c:	e0bffe17 	ldw	r2,-8(fp)
   11410:	1000060e 	bge	r2,zero,1142c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   11414:	001133c0 	call	1133c <alt_get_errno>
   11418:	e0fffe17 	ldw	r3,-8(fp)
   1141c:	00c7c83a 	sub	r3,zero,r3
   11420:	10c00015 	stw	r3,0(r2)
      return -1;
   11424:	00bfffc4 	movi	r2,-1
   11428:	00000606 	br	11444 <close+0xb8>
    }
    return 0;
   1142c:	0005883a 	mov	r2,zero
   11430:	00000406 	br	11444 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11434:	001133c0 	call	1133c <alt_get_errno>
   11438:	00c01444 	movi	r3,81
   1143c:	10c00015 	stw	r3,0(r2)
    return -1;
   11440:	00bfffc4 	movi	r2,-1
  }
}
   11444:	e037883a 	mov	sp,fp
   11448:	dfc00117 	ldw	ra,4(sp)
   1144c:	df000017 	ldw	fp,0(sp)
   11450:	dec00204 	addi	sp,sp,8
   11454:	f800283a 	ret

00011458 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11458:	defffc04 	addi	sp,sp,-16
   1145c:	df000315 	stw	fp,12(sp)
   11460:	df000304 	addi	fp,sp,12
   11464:	e13ffd15 	stw	r4,-12(fp)
   11468:	e17ffe15 	stw	r5,-8(fp)
   1146c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11470:	e0bfff17 	ldw	r2,-4(fp)
}
   11474:	e037883a 	mov	sp,fp
   11478:	df000017 	ldw	fp,0(sp)
   1147c:	dec00104 	addi	sp,sp,4
   11480:	f800283a 	ret

00011484 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11484:	defffe04 	addi	sp,sp,-8
   11488:	dfc00115 	stw	ra,4(sp)
   1148c:	df000015 	stw	fp,0(sp)
   11490:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11494:	00800074 	movhi	r2,1
   11498:	109abf04 	addi	r2,r2,27388
   1149c:	10800017 	ldw	r2,0(r2)
   114a0:	10000526 	beq	r2,zero,114b8 <alt_get_errno+0x34>
   114a4:	00800074 	movhi	r2,1
   114a8:	109abf04 	addi	r2,r2,27388
   114ac:	10800017 	ldw	r2,0(r2)
   114b0:	103ee83a 	callr	r2
   114b4:	00000206 	br	114c0 <alt_get_errno+0x3c>
   114b8:	008000b4 	movhi	r2,2
   114bc:	10a19804 	addi	r2,r2,-31136
}
   114c0:	e037883a 	mov	sp,fp
   114c4:	dfc00117 	ldw	ra,4(sp)
   114c8:	df000017 	ldw	fp,0(sp)
   114cc:	dec00204 	addi	sp,sp,8
   114d0:	f800283a 	ret

000114d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   114d4:	defffb04 	addi	sp,sp,-20
   114d8:	dfc00415 	stw	ra,16(sp)
   114dc:	df000315 	stw	fp,12(sp)
   114e0:	df000304 	addi	fp,sp,12
   114e4:	e13ffe15 	stw	r4,-8(fp)
   114e8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   114ec:	e0bffe17 	ldw	r2,-8(fp)
   114f0:	10000716 	blt	r2,zero,11510 <fstat+0x3c>
   114f4:	e13ffe17 	ldw	r4,-8(fp)
   114f8:	01400304 	movi	r5,12
   114fc:	00020000 	call	2000 <__mulsi3>
   11500:	00c00074 	movhi	r3,1
   11504:	18d63204 	addi	r3,r3,22728
   11508:	10c5883a 	add	r2,r2,r3
   1150c:	00000106 	br	11514 <fstat+0x40>
   11510:	0005883a 	mov	r2,zero
   11514:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   11518:	e0bffd17 	ldw	r2,-12(fp)
   1151c:	10001026 	beq	r2,zero,11560 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   11520:	e0bffd17 	ldw	r2,-12(fp)
   11524:	10800017 	ldw	r2,0(r2)
   11528:	10800817 	ldw	r2,32(r2)
   1152c:	10000726 	beq	r2,zero,1154c <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   11530:	e0bffd17 	ldw	r2,-12(fp)
   11534:	10800017 	ldw	r2,0(r2)
   11538:	10800817 	ldw	r2,32(r2)
   1153c:	e13ffd17 	ldw	r4,-12(fp)
   11540:	e17fff17 	ldw	r5,-4(fp)
   11544:	103ee83a 	callr	r2
   11548:	00000906 	br	11570 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1154c:	e0bfff17 	ldw	r2,-4(fp)
   11550:	00c80004 	movi	r3,8192
   11554:	10c00115 	stw	r3,4(r2)
      return 0;
   11558:	0005883a 	mov	r2,zero
   1155c:	00000406 	br	11570 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11560:	00114840 	call	11484 <alt_get_errno>
   11564:	00c01444 	movi	r3,81
   11568:	10c00015 	stw	r3,0(r2)
    return -1;
   1156c:	00bfffc4 	movi	r2,-1
  }
}
   11570:	e037883a 	mov	sp,fp
   11574:	dfc00117 	ldw	ra,4(sp)
   11578:	df000017 	ldw	fp,0(sp)
   1157c:	dec00204 	addi	sp,sp,8
   11580:	f800283a 	ret

00011584 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11584:	defffe04 	addi	sp,sp,-8
   11588:	dfc00115 	stw	ra,4(sp)
   1158c:	df000015 	stw	fp,0(sp)
   11590:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11594:	00800074 	movhi	r2,1
   11598:	109abf04 	addi	r2,r2,27388
   1159c:	10800017 	ldw	r2,0(r2)
   115a0:	10000526 	beq	r2,zero,115b8 <alt_get_errno+0x34>
   115a4:	00800074 	movhi	r2,1
   115a8:	109abf04 	addi	r2,r2,27388
   115ac:	10800017 	ldw	r2,0(r2)
   115b0:	103ee83a 	callr	r2
   115b4:	00000206 	br	115c0 <alt_get_errno+0x3c>
   115b8:	008000b4 	movhi	r2,2
   115bc:	10a19804 	addi	r2,r2,-31136
}
   115c0:	e037883a 	mov	sp,fp
   115c4:	dfc00117 	ldw	ra,4(sp)
   115c8:	df000017 	ldw	fp,0(sp)
   115cc:	dec00204 	addi	sp,sp,8
   115d0:	f800283a 	ret

000115d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   115d4:	deffed04 	addi	sp,sp,-76
   115d8:	dfc01215 	stw	ra,72(sp)
   115dc:	df001115 	stw	fp,68(sp)
   115e0:	df001104 	addi	fp,sp,68
   115e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   115e8:	e0bfff17 	ldw	r2,-4(fp)
   115ec:	10000716 	blt	r2,zero,1160c <isatty+0x38>
   115f0:	e13fff17 	ldw	r4,-4(fp)
   115f4:	01400304 	movi	r5,12
   115f8:	00020000 	call	2000 <__mulsi3>
   115fc:	00c00074 	movhi	r3,1
   11600:	18d63204 	addi	r3,r3,22728
   11604:	10c5883a 	add	r2,r2,r3
   11608:	00000106 	br	11610 <isatty+0x3c>
   1160c:	0005883a 	mov	r2,zero
   11610:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   11614:	e0bfef17 	ldw	r2,-68(fp)
   11618:	10000e26 	beq	r2,zero,11654 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1161c:	e0bfef17 	ldw	r2,-68(fp)
   11620:	10800017 	ldw	r2,0(r2)
   11624:	10800817 	ldw	r2,32(r2)
   11628:	1000021e 	bne	r2,zero,11634 <isatty+0x60>
    {
      return 1;
   1162c:	00800044 	movi	r2,1
   11630:	00000c06 	br	11664 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   11634:	e0bff004 	addi	r2,fp,-64
   11638:	e13fff17 	ldw	r4,-4(fp)
   1163c:	100b883a 	mov	r5,r2
   11640:	00114d40 	call	114d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   11644:	e0bff117 	ldw	r2,-60(fp)
   11648:	10880020 	cmpeqi	r2,r2,8192
   1164c:	10803fcc 	andi	r2,r2,255
   11650:	00000406 	br	11664 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11654:	00115840 	call	11584 <alt_get_errno>
   11658:	00c01444 	movi	r3,81
   1165c:	10c00015 	stw	r3,0(r2)
    return 0;
   11660:	0005883a 	mov	r2,zero
  }
}
   11664:	e037883a 	mov	sp,fp
   11668:	dfc00117 	ldw	ra,4(sp)
   1166c:	df000017 	ldw	fp,0(sp)
   11670:	dec00204 	addi	sp,sp,8
   11674:	f800283a 	ret

00011678 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   11678:	defffc04 	addi	sp,sp,-16
   1167c:	df000315 	stw	fp,12(sp)
   11680:	df000304 	addi	fp,sp,12
   11684:	e13ffd15 	stw	r4,-12(fp)
   11688:	e17ffe15 	stw	r5,-8(fp)
   1168c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   11690:	e0fffe17 	ldw	r3,-8(fp)
   11694:	e0bffd17 	ldw	r2,-12(fp)
   11698:	18800e26 	beq	r3,r2,116d4 <alt_load_section+0x5c>
  {
    while( to != end )
   1169c:	00000a06 	br	116c8 <alt_load_section+0x50>
    {
      *to++ = *from++;
   116a0:	e0bffd17 	ldw	r2,-12(fp)
   116a4:	10c00017 	ldw	r3,0(r2)
   116a8:	e0bffe17 	ldw	r2,-8(fp)
   116ac:	10c00015 	stw	r3,0(r2)
   116b0:	e0bffe17 	ldw	r2,-8(fp)
   116b4:	10800104 	addi	r2,r2,4
   116b8:	e0bffe15 	stw	r2,-8(fp)
   116bc:	e0bffd17 	ldw	r2,-12(fp)
   116c0:	10800104 	addi	r2,r2,4
   116c4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   116c8:	e0fffe17 	ldw	r3,-8(fp)
   116cc:	e0bfff17 	ldw	r2,-4(fp)
   116d0:	18bff31e 	bne	r3,r2,116a0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   116d4:	e037883a 	mov	sp,fp
   116d8:	df000017 	ldw	fp,0(sp)
   116dc:	dec00104 	addi	sp,sp,4
   116e0:	f800283a 	ret

000116e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   116e4:	defffe04 	addi	sp,sp,-8
   116e8:	dfc00115 	stw	ra,4(sp)
   116ec:	df000015 	stw	fp,0(sp)
   116f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   116f4:	01000074 	movhi	r4,1
   116f8:	211ad604 	addi	r4,r4,27480
   116fc:	01400074 	movhi	r5,1
   11700:	29541904 	addi	r5,r5,20580
   11704:	01800074 	movhi	r6,1
   11708:	319ad604 	addi	r6,r6,27480
   1170c:	00116780 	call	11678 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   11710:	01000034 	movhi	r4,0
   11714:	21000804 	addi	r4,r4,32
   11718:	01400034 	movhi	r5,0
   1171c:	29400804 	addi	r5,r5,32
   11720:	01800034 	movhi	r6,0
   11724:	31806e04 	addi	r6,r6,440
   11728:	00116780 	call	11678 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1172c:	01000074 	movhi	r4,1
   11730:	21124304 	addi	r4,r4,18700
   11734:	01400074 	movhi	r5,1
   11738:	29524304 	addi	r5,r5,18700
   1173c:	01800074 	movhi	r6,1
   11740:	31941904 	addi	r6,r6,20580
   11744:	00116780 	call	11678 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11748:	00139e00 	call	139e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1174c:	0013ea00 	call	13ea0 <alt_icache_flush_all>
}
   11750:	e037883a 	mov	sp,fp
   11754:	dfc00117 	ldw	ra,4(sp)
   11758:	df000017 	ldw	fp,0(sp)
   1175c:	dec00204 	addi	sp,sp,8
   11760:	f800283a 	ret

00011764 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11764:	defffe04 	addi	sp,sp,-8
   11768:	dfc00115 	stw	ra,4(sp)
   1176c:	df000015 	stw	fp,0(sp)
   11770:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11774:	00800074 	movhi	r2,1
   11778:	109abf04 	addi	r2,r2,27388
   1177c:	10800017 	ldw	r2,0(r2)
   11780:	10000526 	beq	r2,zero,11798 <alt_get_errno+0x34>
   11784:	00800074 	movhi	r2,1
   11788:	109abf04 	addi	r2,r2,27388
   1178c:	10800017 	ldw	r2,0(r2)
   11790:	103ee83a 	callr	r2
   11794:	00000206 	br	117a0 <alt_get_errno+0x3c>
   11798:	008000b4 	movhi	r2,2
   1179c:	10a19804 	addi	r2,r2,-31136
}
   117a0:	e037883a 	mov	sp,fp
   117a4:	dfc00117 	ldw	ra,4(sp)
   117a8:	df000017 	ldw	fp,0(sp)
   117ac:	dec00204 	addi	sp,sp,8
   117b0:	f800283a 	ret

000117b4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   117b4:	defff904 	addi	sp,sp,-28
   117b8:	dfc00615 	stw	ra,24(sp)
   117bc:	df000515 	stw	fp,20(sp)
   117c0:	df000504 	addi	fp,sp,20
   117c4:	e13ffd15 	stw	r4,-12(fp)
   117c8:	e17ffe15 	stw	r5,-8(fp)
   117cc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   117d0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   117d4:	e0bffd17 	ldw	r2,-12(fp)
   117d8:	10000716 	blt	r2,zero,117f8 <lseek+0x44>
   117dc:	e13ffd17 	ldw	r4,-12(fp)
   117e0:	01400304 	movi	r5,12
   117e4:	00020000 	call	2000 <__mulsi3>
   117e8:	00c00074 	movhi	r3,1
   117ec:	18d63204 	addi	r3,r3,22728
   117f0:	10c5883a 	add	r2,r2,r3
   117f4:	00000106 	br	117fc <lseek+0x48>
   117f8:	0005883a 	mov	r2,zero
   117fc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   11800:	e0bffc17 	ldw	r2,-16(fp)
   11804:	10001026 	beq	r2,zero,11848 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   11808:	e0bffc17 	ldw	r2,-16(fp)
   1180c:	10800017 	ldw	r2,0(r2)
   11810:	10800717 	ldw	r2,28(r2)
   11814:	10000926 	beq	r2,zero,1183c <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   11818:	e0bffc17 	ldw	r2,-16(fp)
   1181c:	10800017 	ldw	r2,0(r2)
   11820:	10800717 	ldw	r2,28(r2)
   11824:	e13ffc17 	ldw	r4,-16(fp)
   11828:	e17ffe17 	ldw	r5,-8(fp)
   1182c:	e1bfff17 	ldw	r6,-4(fp)
   11830:	103ee83a 	callr	r2
   11834:	e0bffb15 	stw	r2,-20(fp)
   11838:	00000506 	br	11850 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1183c:	00bfde84 	movi	r2,-134
   11840:	e0bffb15 	stw	r2,-20(fp)
   11844:	00000206 	br	11850 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   11848:	00bfebc4 	movi	r2,-81
   1184c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   11850:	e0bffb17 	ldw	r2,-20(fp)
   11854:	1000060e 	bge	r2,zero,11870 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   11858:	00117640 	call	11764 <alt_get_errno>
   1185c:	e0fffb17 	ldw	r3,-20(fp)
   11860:	00c7c83a 	sub	r3,zero,r3
   11864:	10c00015 	stw	r3,0(r2)
    rc = -1;
   11868:	00bfffc4 	movi	r2,-1
   1186c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   11870:	e0bffb17 	ldw	r2,-20(fp)
}
   11874:	e037883a 	mov	sp,fp
   11878:	dfc00117 	ldw	ra,4(sp)
   1187c:	df000017 	ldw	fp,0(sp)
   11880:	dec00204 	addi	sp,sp,8
   11884:	f800283a 	ret

00011888 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11888:	defffd04 	addi	sp,sp,-12
   1188c:	dfc00215 	stw	ra,8(sp)
   11890:	df000115 	stw	fp,4(sp)
   11894:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11898:	0009883a 	mov	r4,zero
   1189c:	0011ff40 	call	11ff4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   118a0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   118a4:	00120280 	call	12028 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   118a8:	01000074 	movhi	r4,1
   118ac:	21141004 	addi	r4,r4,20544
   118b0:	01400074 	movhi	r5,1
   118b4:	29541004 	addi	r5,r5,20544
   118b8:	01800074 	movhi	r6,1
   118bc:	31941004 	addi	r6,r6,20544
   118c0:	00142780 	call	14278 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   118c4:	0013aec0 	call	13aec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   118c8:	01000074 	movhi	r4,1
   118cc:	210ed204 	addi	r4,r4,15176
   118d0:	00145380 	call	14538 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   118d4:	d126eb17 	ldw	r4,-25684(gp)
   118d8:	d0e6ec17 	ldw	r3,-25680(gp)
   118dc:	d0a6ed17 	ldw	r2,-25676(gp)
   118e0:	180b883a 	mov	r5,r3
   118e4:	100d883a 	mov	r6,r2
   118e8:	00007680 	call	768 <main>
   118ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   118f0:	01000044 	movi	r4,1
   118f4:	001138c0 	call	1138c <close>
  exit (result);
   118f8:	e13fff17 	ldw	r4,-4(fp)
   118fc:	001454c0 	call	1454c <exit>

00011900 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   11900:	defffe04 	addi	sp,sp,-8
   11904:	df000115 	stw	fp,4(sp)
   11908:	df000104 	addi	fp,sp,4
   1190c:	e13fff15 	stw	r4,-4(fp)
}
   11910:	e037883a 	mov	sp,fp
   11914:	df000017 	ldw	fp,0(sp)
   11918:	dec00104 	addi	sp,sp,4
   1191c:	f800283a 	ret

00011920 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   11920:	defffe04 	addi	sp,sp,-8
   11924:	df000115 	stw	fp,4(sp)
   11928:	df000104 	addi	fp,sp,4
   1192c:	e13fff15 	stw	r4,-4(fp)
}
   11930:	e037883a 	mov	sp,fp
   11934:	df000017 	ldw	fp,0(sp)
   11938:	dec00104 	addi	sp,sp,4
   1193c:	f800283a 	ret

00011940 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11940:	defffe04 	addi	sp,sp,-8
   11944:	dfc00115 	stw	ra,4(sp)
   11948:	df000015 	stw	fp,0(sp)
   1194c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11950:	00800074 	movhi	r2,1
   11954:	109abf04 	addi	r2,r2,27388
   11958:	10800017 	ldw	r2,0(r2)
   1195c:	10000526 	beq	r2,zero,11974 <alt_get_errno+0x34>
   11960:	00800074 	movhi	r2,1
   11964:	109abf04 	addi	r2,r2,27388
   11968:	10800017 	ldw	r2,0(r2)
   1196c:	103ee83a 	callr	r2
   11970:	00000206 	br	1197c <alt_get_errno+0x3c>
   11974:	008000b4 	movhi	r2,2
   11978:	10a19804 	addi	r2,r2,-31136
}
   1197c:	e037883a 	mov	sp,fp
   11980:	dfc00117 	ldw	ra,4(sp)
   11984:	df000017 	ldw	fp,0(sp)
   11988:	dec00204 	addi	sp,sp,8
   1198c:	f800283a 	ret

00011990 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11990:	defffb04 	addi	sp,sp,-20
   11994:	dfc00415 	stw	ra,16(sp)
   11998:	df000315 	stw	fp,12(sp)
   1199c:	dc000215 	stw	r16,8(sp)
   119a0:	df000204 	addi	fp,sp,8
   119a4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   119a8:	e0bfff17 	ldw	r2,-4(fp)
   119ac:	10800217 	ldw	r2,8(r2)
   119b0:	10d00034 	orhi	r3,r2,16384
   119b4:	e0bfff17 	ldw	r2,-4(fp)
   119b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   119bc:	e03ffe15 	stw	zero,-8(fp)
   119c0:	00002206 	br	11a4c <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   119c4:	04000074 	movhi	r16,1
   119c8:	84163204 	addi	r16,r16,22728
   119cc:	e0bffe17 	ldw	r2,-8(fp)
   119d0:	1009883a 	mov	r4,r2
   119d4:	01400304 	movi	r5,12
   119d8:	00020000 	call	2000 <__mulsi3>
   119dc:	8085883a 	add	r2,r16,r2
   119e0:	10c00017 	ldw	r3,0(r2)
   119e4:	e0bfff17 	ldw	r2,-4(fp)
   119e8:	10800017 	ldw	r2,0(r2)
   119ec:	1880141e 	bne	r3,r2,11a40 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   119f0:	04000074 	movhi	r16,1
   119f4:	84163204 	addi	r16,r16,22728
   119f8:	e0bffe17 	ldw	r2,-8(fp)
   119fc:	1009883a 	mov	r4,r2
   11a00:	01400304 	movi	r5,12
   11a04:	00020000 	call	2000 <__mulsi3>
   11a08:	8085883a 	add	r2,r16,r2
   11a0c:	10800204 	addi	r2,r2,8
   11a10:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11a14:	10000a0e 	bge	r2,zero,11a40 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11a18:	e13ffe17 	ldw	r4,-8(fp)
   11a1c:	01400304 	movi	r5,12
   11a20:	00020000 	call	2000 <__mulsi3>
   11a24:	00c00074 	movhi	r3,1
   11a28:	18d63204 	addi	r3,r3,22728
   11a2c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11a30:	e0bfff17 	ldw	r2,-4(fp)
   11a34:	18800226 	beq	r3,r2,11a40 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11a38:	00bffcc4 	movi	r2,-13
   11a3c:	00000a06 	br	11a68 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11a40:	e0bffe17 	ldw	r2,-8(fp)
   11a44:	10800044 	addi	r2,r2,1
   11a48:	e0bffe15 	stw	r2,-8(fp)
   11a4c:	00800074 	movhi	r2,1
   11a50:	109abe04 	addi	r2,r2,27384
   11a54:	10800017 	ldw	r2,0(r2)
   11a58:	1007883a 	mov	r3,r2
   11a5c:	e0bffe17 	ldw	r2,-8(fp)
   11a60:	18bfd82e 	bgeu	r3,r2,119c4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11a64:	0005883a 	mov	r2,zero
}
   11a68:	e037883a 	mov	sp,fp
   11a6c:	dfc00217 	ldw	ra,8(sp)
   11a70:	df000117 	ldw	fp,4(sp)
   11a74:	dc000017 	ldw	r16,0(sp)
   11a78:	dec00304 	addi	sp,sp,12
   11a7c:	f800283a 	ret

00011a80 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11a80:	defff604 	addi	sp,sp,-40
   11a84:	dfc00915 	stw	ra,36(sp)
   11a88:	df000815 	stw	fp,32(sp)
   11a8c:	df000804 	addi	fp,sp,32
   11a90:	e13ffd15 	stw	r4,-12(fp)
   11a94:	e17ffe15 	stw	r5,-8(fp)
   11a98:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11a9c:	00bfffc4 	movi	r2,-1
   11aa0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11aa4:	00bffb44 	movi	r2,-19
   11aa8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11aac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11ab0:	e13ffd17 	ldw	r4,-12(fp)
   11ab4:	01400074 	movhi	r5,1
   11ab8:	295abc04 	addi	r5,r5,27376
   11abc:	0013ba40 	call	13ba4 <alt_find_dev>
   11ac0:	e0bff815 	stw	r2,-32(fp)
   11ac4:	e0bff817 	ldw	r2,-32(fp)
   11ac8:	1000051e 	bne	r2,zero,11ae0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11acc:	e13ffd17 	ldw	r4,-12(fp)
   11ad0:	0013c340 	call	13c34 <alt_find_file>
   11ad4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11ad8:	00800044 	movi	r2,1
   11adc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11ae0:	e0bff817 	ldw	r2,-32(fp)
   11ae4:	10002a26 	beq	r2,zero,11b90 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11ae8:	e13ff817 	ldw	r4,-32(fp)
   11aec:	0013dcc0 	call	13dcc <alt_get_fd>
   11af0:	e0bff915 	stw	r2,-28(fp)
   11af4:	e0bff917 	ldw	r2,-28(fp)
   11af8:	1000030e 	bge	r2,zero,11b08 <open+0x88>
    {
      status = index;
   11afc:	e0bff917 	ldw	r2,-28(fp)
   11b00:	e0bffa15 	stw	r2,-24(fp)
   11b04:	00002406 	br	11b98 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   11b08:	e13ff917 	ldw	r4,-28(fp)
   11b0c:	01400304 	movi	r5,12
   11b10:	00020000 	call	2000 <__mulsi3>
   11b14:	00c00074 	movhi	r3,1
   11b18:	18d63204 	addi	r3,r3,22728
   11b1c:	10c5883a 	add	r2,r2,r3
   11b20:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11b24:	e0fffe17 	ldw	r3,-8(fp)
   11b28:	00900034 	movhi	r2,16384
   11b2c:	10bfffc4 	addi	r2,r2,-1
   11b30:	1886703a 	and	r3,r3,r2
   11b34:	e0bffc17 	ldw	r2,-16(fp)
   11b38:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11b3c:	e0bffb17 	ldw	r2,-20(fp)
   11b40:	1000051e 	bne	r2,zero,11b58 <open+0xd8>
   11b44:	e13ffc17 	ldw	r4,-16(fp)
   11b48:	00119900 	call	11990 <alt_file_locked>
   11b4c:	e0bffa15 	stw	r2,-24(fp)
   11b50:	e0bffa17 	ldw	r2,-24(fp)
   11b54:	10001016 	blt	r2,zero,11b98 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11b58:	e0bff817 	ldw	r2,-32(fp)
   11b5c:	10800317 	ldw	r2,12(r2)
   11b60:	10000826 	beq	r2,zero,11b84 <open+0x104>
   11b64:	e0bff817 	ldw	r2,-32(fp)
   11b68:	10800317 	ldw	r2,12(r2)
   11b6c:	e13ffc17 	ldw	r4,-16(fp)
   11b70:	e17ffd17 	ldw	r5,-12(fp)
   11b74:	e1bffe17 	ldw	r6,-8(fp)
   11b78:	e1ffff17 	ldw	r7,-4(fp)
   11b7c:	103ee83a 	callr	r2
   11b80:	00000106 	br	11b88 <open+0x108>
   11b84:	0005883a 	mov	r2,zero
   11b88:	e0bffa15 	stw	r2,-24(fp)
   11b8c:	00000206 	br	11b98 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11b90:	00bffb44 	movi	r2,-19
   11b94:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11b98:	e0bffa17 	ldw	r2,-24(fp)
   11b9c:	1000080e 	bge	r2,zero,11bc0 <open+0x140>
  {
    alt_release_fd (index);  
   11ba0:	e13ff917 	ldw	r4,-28(fp)
   11ba4:	0011d1c0 	call	11d1c <alt_release_fd>
    ALT_ERRNO = -status;
   11ba8:	00119400 	call	11940 <alt_get_errno>
   11bac:	e0fffa17 	ldw	r3,-24(fp)
   11bb0:	00c7c83a 	sub	r3,zero,r3
   11bb4:	10c00015 	stw	r3,0(r2)
    return -1;
   11bb8:	00bfffc4 	movi	r2,-1
   11bbc:	00000106 	br	11bc4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   11bc0:	e0bff917 	ldw	r2,-28(fp)
}
   11bc4:	e037883a 	mov	sp,fp
   11bc8:	dfc00117 	ldw	ra,4(sp)
   11bcc:	df000017 	ldw	fp,0(sp)
   11bd0:	dec00204 	addi	sp,sp,8
   11bd4:	f800283a 	ret

00011bd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11bd8:	defffe04 	addi	sp,sp,-8
   11bdc:	dfc00115 	stw	ra,4(sp)
   11be0:	df000015 	stw	fp,0(sp)
   11be4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11be8:	00800074 	movhi	r2,1
   11bec:	109abf04 	addi	r2,r2,27388
   11bf0:	10800017 	ldw	r2,0(r2)
   11bf4:	10000526 	beq	r2,zero,11c0c <alt_get_errno+0x34>
   11bf8:	00800074 	movhi	r2,1
   11bfc:	109abf04 	addi	r2,r2,27388
   11c00:	10800017 	ldw	r2,0(r2)
   11c04:	103ee83a 	callr	r2
   11c08:	00000206 	br	11c14 <alt_get_errno+0x3c>
   11c0c:	008000b4 	movhi	r2,2
   11c10:	10a19804 	addi	r2,r2,-31136
}
   11c14:	e037883a 	mov	sp,fp
   11c18:	dfc00117 	ldw	ra,4(sp)
   11c1c:	df000017 	ldw	fp,0(sp)
   11c20:	dec00204 	addi	sp,sp,8
   11c24:	f800283a 	ret

00011c28 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   11c28:	defff904 	addi	sp,sp,-28
   11c2c:	dfc00615 	stw	ra,24(sp)
   11c30:	df000515 	stw	fp,20(sp)
   11c34:	df000504 	addi	fp,sp,20
   11c38:	e13ffd15 	stw	r4,-12(fp)
   11c3c:	e17ffe15 	stw	r5,-8(fp)
   11c40:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11c44:	e0bffd17 	ldw	r2,-12(fp)
   11c48:	10000716 	blt	r2,zero,11c68 <read+0x40>
   11c4c:	e13ffd17 	ldw	r4,-12(fp)
   11c50:	01400304 	movi	r5,12
   11c54:	00020000 	call	2000 <__mulsi3>
   11c58:	00c00074 	movhi	r3,1
   11c5c:	18d63204 	addi	r3,r3,22728
   11c60:	10c5883a 	add	r2,r2,r3
   11c64:	00000106 	br	11c6c <read+0x44>
   11c68:	0005883a 	mov	r2,zero
   11c6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   11c70:	e0bffb17 	ldw	r2,-20(fp)
   11c74:	10002026 	beq	r2,zero,11cf8 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   11c78:	e0bffb17 	ldw	r2,-20(fp)
   11c7c:	10800217 	ldw	r2,8(r2)
   11c80:	108000cc 	andi	r2,r2,3
   11c84:	10800060 	cmpeqi	r2,r2,1
   11c88:	1000171e 	bne	r2,zero,11ce8 <read+0xc0>
        (fd->dev->read))
   11c8c:	e0bffb17 	ldw	r2,-20(fp)
   11c90:	10800017 	ldw	r2,0(r2)
   11c94:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   11c98:	10001326 	beq	r2,zero,11ce8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   11c9c:	e0bffb17 	ldw	r2,-20(fp)
   11ca0:	10800017 	ldw	r2,0(r2)
   11ca4:	10c00517 	ldw	r3,20(r2)
   11ca8:	e0bfff17 	ldw	r2,-4(fp)
   11cac:	e13ffb17 	ldw	r4,-20(fp)
   11cb0:	e17ffe17 	ldw	r5,-8(fp)
   11cb4:	100d883a 	mov	r6,r2
   11cb8:	183ee83a 	callr	r3
   11cbc:	e0bffc15 	stw	r2,-16(fp)
   11cc0:	e0bffc17 	ldw	r2,-16(fp)
   11cc4:	1000060e 	bge	r2,zero,11ce0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   11cc8:	0011bd80 	call	11bd8 <alt_get_errno>
   11ccc:	e0fffc17 	ldw	r3,-16(fp)
   11cd0:	00c7c83a 	sub	r3,zero,r3
   11cd4:	10c00015 	stw	r3,0(r2)
          return -1;
   11cd8:	00bfffc4 	movi	r2,-1
   11cdc:	00000a06 	br	11d08 <read+0xe0>
        }
        return rval;
   11ce0:	e0bffc17 	ldw	r2,-16(fp)
   11ce4:	00000806 	br	11d08 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   11ce8:	0011bd80 	call	11bd8 <alt_get_errno>
   11cec:	00c00344 	movi	r3,13
   11cf0:	10c00015 	stw	r3,0(r2)
   11cf4:	00000306 	br	11d04 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   11cf8:	0011bd80 	call	11bd8 <alt_get_errno>
   11cfc:	00c01444 	movi	r3,81
   11d00:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   11d04:	00bfffc4 	movi	r2,-1
}
   11d08:	e037883a 	mov	sp,fp
   11d0c:	dfc00117 	ldw	ra,4(sp)
   11d10:	df000017 	ldw	fp,0(sp)
   11d14:	dec00204 	addi	sp,sp,8
   11d18:	f800283a 	ret

00011d1c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   11d1c:	defffc04 	addi	sp,sp,-16
   11d20:	dfc00315 	stw	ra,12(sp)
   11d24:	df000215 	stw	fp,8(sp)
   11d28:	dc000115 	stw	r16,4(sp)
   11d2c:	df000104 	addi	fp,sp,4
   11d30:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   11d34:	e0bfff17 	ldw	r2,-4(fp)
   11d38:	108000d0 	cmplti	r2,r2,3
   11d3c:	1000111e 	bne	r2,zero,11d84 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   11d40:	04000074 	movhi	r16,1
   11d44:	84163204 	addi	r16,r16,22728
   11d48:	e0bfff17 	ldw	r2,-4(fp)
   11d4c:	1009883a 	mov	r4,r2
   11d50:	01400304 	movi	r5,12
   11d54:	00020000 	call	2000 <__mulsi3>
   11d58:	8085883a 	add	r2,r16,r2
   11d5c:	10800204 	addi	r2,r2,8
   11d60:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   11d64:	04000074 	movhi	r16,1
   11d68:	84163204 	addi	r16,r16,22728
   11d6c:	e0bfff17 	ldw	r2,-4(fp)
   11d70:	1009883a 	mov	r4,r2
   11d74:	01400304 	movi	r5,12
   11d78:	00020000 	call	2000 <__mulsi3>
   11d7c:	8085883a 	add	r2,r16,r2
   11d80:	10000015 	stw	zero,0(r2)
  }
}
   11d84:	e037883a 	mov	sp,fp
   11d88:	dfc00217 	ldw	ra,8(sp)
   11d8c:	df000117 	ldw	fp,4(sp)
   11d90:	dc000017 	ldw	r16,0(sp)
   11d94:	dec00304 	addi	sp,sp,12
   11d98:	f800283a 	ret

00011d9c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   11d9c:	defff904 	addi	sp,sp,-28
   11da0:	df000615 	stw	fp,24(sp)
   11da4:	df000604 	addi	fp,sp,24
   11da8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11dac:	0005303a 	rdctl	r2,status
   11db0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11db4:	e0fffc17 	ldw	r3,-16(fp)
   11db8:	00bfff84 	movi	r2,-2
   11dbc:	1884703a 	and	r2,r3,r2
   11dc0:	1001703a 	wrctl	status,r2
  
  return context;
   11dc4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   11dc8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   11dcc:	d0a00c17 	ldw	r2,-32720(gp)
   11dd0:	10c000c4 	addi	r3,r2,3
   11dd4:	00bfff04 	movi	r2,-4
   11dd8:	1884703a 	and	r2,r3,r2
   11ddc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   11de0:	d0e00c17 	ldw	r3,-32720(gp)
   11de4:	e0bfff17 	ldw	r2,-4(fp)
   11de8:	1885883a 	add	r2,r3,r2
   11dec:	00c01034 	movhi	r3,64
   11df0:	18c00004 	addi	r3,r3,0
   11df4:	1880062e 	bgeu	r3,r2,11e10 <sbrk+0x74>
   11df8:	e0bffa17 	ldw	r2,-24(fp)
   11dfc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e00:	e0bffd17 	ldw	r2,-12(fp)
   11e04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   11e08:	00bfffc4 	movi	r2,-1
   11e0c:	00000b06 	br	11e3c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   11e10:	d0a00c17 	ldw	r2,-32720(gp)
   11e14:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   11e18:	d0e00c17 	ldw	r3,-32720(gp)
   11e1c:	e0bfff17 	ldw	r2,-4(fp)
   11e20:	1885883a 	add	r2,r3,r2
   11e24:	d0a00c15 	stw	r2,-32720(gp)
   11e28:	e0bffa17 	ldw	r2,-24(fp)
   11e2c:	e0bffe15 	stw	r2,-8(fp)
   11e30:	e0bffe17 	ldw	r2,-8(fp)
   11e34:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   11e38:	e0bffb17 	ldw	r2,-20(fp)
} 
   11e3c:	e037883a 	mov	sp,fp
   11e40:	df000017 	ldw	fp,0(sp)
   11e44:	dec00104 	addi	sp,sp,4
   11e48:	f800283a 	ret

00011e4c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   11e4c:	defffd04 	addi	sp,sp,-12
   11e50:	dfc00215 	stw	ra,8(sp)
   11e54:	df000115 	stw	fp,4(sp)
   11e58:	df000104 	addi	fp,sp,4
   11e5c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   11e60:	e13fff17 	ldw	r4,-4(fp)
   11e64:	001388c0 	call	1388c <alt_busy_sleep>
}
   11e68:	e037883a 	mov	sp,fp
   11e6c:	dfc00117 	ldw	ra,4(sp)
   11e70:	df000017 	ldw	fp,0(sp)
   11e74:	dec00204 	addi	sp,sp,8
   11e78:	f800283a 	ret

00011e7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11e7c:	defffe04 	addi	sp,sp,-8
   11e80:	dfc00115 	stw	ra,4(sp)
   11e84:	df000015 	stw	fp,0(sp)
   11e88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11e8c:	00800074 	movhi	r2,1
   11e90:	109abf04 	addi	r2,r2,27388
   11e94:	10800017 	ldw	r2,0(r2)
   11e98:	10000526 	beq	r2,zero,11eb0 <alt_get_errno+0x34>
   11e9c:	00800074 	movhi	r2,1
   11ea0:	109abf04 	addi	r2,r2,27388
   11ea4:	10800017 	ldw	r2,0(r2)
   11ea8:	103ee83a 	callr	r2
   11eac:	00000206 	br	11eb8 <alt_get_errno+0x3c>
   11eb0:	008000b4 	movhi	r2,2
   11eb4:	10a19804 	addi	r2,r2,-31136
}
   11eb8:	e037883a 	mov	sp,fp
   11ebc:	dfc00117 	ldw	ra,4(sp)
   11ec0:	df000017 	ldw	fp,0(sp)
   11ec4:	dec00204 	addi	sp,sp,8
   11ec8:	f800283a 	ret

00011ecc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   11ecc:	defff904 	addi	sp,sp,-28
   11ed0:	dfc00615 	stw	ra,24(sp)
   11ed4:	df000515 	stw	fp,20(sp)
   11ed8:	df000504 	addi	fp,sp,20
   11edc:	e13ffd15 	stw	r4,-12(fp)
   11ee0:	e17ffe15 	stw	r5,-8(fp)
   11ee4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11ee8:	e0bffd17 	ldw	r2,-12(fp)
   11eec:	10000716 	blt	r2,zero,11f0c <write+0x40>
   11ef0:	e13ffd17 	ldw	r4,-12(fp)
   11ef4:	01400304 	movi	r5,12
   11ef8:	00020000 	call	2000 <__mulsi3>
   11efc:	00c00074 	movhi	r3,1
   11f00:	18d63204 	addi	r3,r3,22728
   11f04:	10c5883a 	add	r2,r2,r3
   11f08:	00000106 	br	11f10 <write+0x44>
   11f0c:	0005883a 	mov	r2,zero
   11f10:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   11f14:	e0bffb17 	ldw	r2,-20(fp)
   11f18:	10001f26 	beq	r2,zero,11f98 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   11f1c:	e0bffb17 	ldw	r2,-20(fp)
   11f20:	10800217 	ldw	r2,8(r2)
   11f24:	108000cc 	andi	r2,r2,3
   11f28:	10001726 	beq	r2,zero,11f88 <write+0xbc>
   11f2c:	e0bffb17 	ldw	r2,-20(fp)
   11f30:	10800017 	ldw	r2,0(r2)
   11f34:	10800617 	ldw	r2,24(r2)
   11f38:	10001326 	beq	r2,zero,11f88 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   11f3c:	e0bffb17 	ldw	r2,-20(fp)
   11f40:	10800017 	ldw	r2,0(r2)
   11f44:	10c00617 	ldw	r3,24(r2)
   11f48:	e0bfff17 	ldw	r2,-4(fp)
   11f4c:	e13ffb17 	ldw	r4,-20(fp)
   11f50:	e17ffe17 	ldw	r5,-8(fp)
   11f54:	100d883a 	mov	r6,r2
   11f58:	183ee83a 	callr	r3
   11f5c:	e0bffc15 	stw	r2,-16(fp)
   11f60:	e0bffc17 	ldw	r2,-16(fp)
   11f64:	1000060e 	bge	r2,zero,11f80 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   11f68:	0011e7c0 	call	11e7c <alt_get_errno>
   11f6c:	e0fffc17 	ldw	r3,-16(fp)
   11f70:	00c7c83a 	sub	r3,zero,r3
   11f74:	10c00015 	stw	r3,0(r2)
        return -1;
   11f78:	00bfffc4 	movi	r2,-1
   11f7c:	00000a06 	br	11fa8 <write+0xdc>
      }
      return rval;
   11f80:	e0bffc17 	ldw	r2,-16(fp)
   11f84:	00000806 	br	11fa8 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   11f88:	0011e7c0 	call	11e7c <alt_get_errno>
   11f8c:	00c00344 	movi	r3,13
   11f90:	10c00015 	stw	r3,0(r2)
   11f94:	00000306 	br	11fa4 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   11f98:	0011e7c0 	call	11e7c <alt_get_errno>
   11f9c:	00c01444 	movi	r3,81
   11fa0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   11fa4:	00bfffc4 	movi	r2,-1
}
   11fa8:	e037883a 	mov	sp,fp
   11fac:	dfc00117 	ldw	ra,4(sp)
   11fb0:	df000017 	ldw	fp,0(sp)
   11fb4:	dec00204 	addi	sp,sp,8
   11fb8:	f800283a 	ret

00011fbc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   11fbc:	defffd04 	addi	sp,sp,-12
   11fc0:	dfc00215 	stw	ra,8(sp)
   11fc4:	df000115 	stw	fp,4(sp)
   11fc8:	df000104 	addi	fp,sp,4
   11fcc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   11fd0:	e13fff17 	ldw	r4,-4(fp)
   11fd4:	01400074 	movhi	r5,1
   11fd8:	295abc04 	addi	r5,r5,27376
   11fdc:	0013a4c0 	call	13a4c <alt_dev_llist_insert>
}
   11fe0:	e037883a 	mov	sp,fp
   11fe4:	dfc00117 	ldw	ra,4(sp)
   11fe8:	df000017 	ldw	fp,0(sp)
   11fec:	dec00204 	addi	sp,sp,8
   11ff0:	f800283a 	ret

00011ff4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11ff4:	defffd04 	addi	sp,sp,-12
   11ff8:	dfc00215 	stw	ra,8(sp)
   11ffc:	df000115 	stw	fp,4(sp)
   12000:	df000104 	addi	fp,sp,4
   12004:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_A, cpu_A);
   12008:	001448c0 	call	1448c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1200c:	00800044 	movi	r2,1
   12010:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   12014:	e037883a 	mov	sp,fp
   12018:	dfc00117 	ldw	ra,4(sp)
   1201c:	df000017 	ldw	fp,0(sp)
   12020:	dec00204 	addi	sp,sp,8
   12024:	f800283a 	ret

00012028 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   12028:	defffe04 	addi	sp,sp,-8
   1202c:	dfc00115 	stw	ra,4(sp)
   12030:	df000015 	stw	fp,0(sp)
   12034:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGHTIMER_A, highTimer_A);
   12038:	008000b4 	movhi	r2,2
   1203c:	10a1a204 	addi	r2,r2,-31096
   12040:	00c20074 	movhi	r3,2049
   12044:	18c43004 	addi	r3,r3,4288
   12048:	10c00015 	stw	r3,0(r2)
   1204c:	008000b4 	movhi	r2,2
   12050:	10a1a304 	addi	r2,r2,-31092
   12054:	00c17db4 	movhi	r3,1526
   12058:	18f84004 	addi	r3,r3,-7936
   1205c:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_A, timer_A);
   12060:	01020074 	movhi	r4,2049
   12064:	21043804 	addi	r4,r4,4320
   12068:	000b883a 	mov	r5,zero
   1206c:	000d883a 	mov	r6,zero
   12070:	01c0fa04 	movi	r7,1000
   12074:	001309c0 	call	1309c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_AB_0, fifo_AB_0);
   12078:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_AB_1, fifo_AB_1);
   1207c:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_AB_2, fifo_AB_2);
   12080:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_AD, fifo_AD);
   12084:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_AE, fifo_AE);
   12088:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_AF, fifo_AF);
   1208c:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_A, jtag_A);
   12090:	01000074 	movhi	r4,1
   12094:	21169c04 	addi	r4,r4,23152
   12098:	000b883a 	mov	r5,zero
   1209c:	01800044 	movi	r6,1
   120a0:	00127280 	call	12728 <altera_avalon_jtag_uart_init>
   120a4:	01000074 	movhi	r4,1
   120a8:	21169204 	addi	r4,r4,23112
   120ac:	0011fbc0 	call	11fbc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_A, sysid_A);
   120b0:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   120b4:	01000074 	movhi	r4,1
   120b8:	211aaa04 	addi	r4,r4,27304
   120bc:	0013d480 	call	13d48 <alt_fs_reg>
}
   120c0:	e037883a 	mov	sp,fp
   120c4:	dfc00117 	ldw	ra,4(sp)
   120c8:	df000017 	ldw	fp,0(sp)
   120cc:	dec00204 	addi	sp,sp,8
   120d0:	f800283a 	ret

000120d4 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   120d4:	defffa04 	addi	sp,sp,-24
   120d8:	dfc00515 	stw	ra,20(sp)
   120dc:	df000415 	stw	fp,16(sp)
   120e0:	df000404 	addi	fp,sp,16
   120e4:	e13ffc15 	stw	r4,-16(fp)
   120e8:	e17ffd15 	stw	r5,-12(fp)
   120ec:	e1bffe15 	stw	r6,-8(fp)
   120f0:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   120f4:	e13ffc17 	ldw	r4,-16(fp)
   120f8:	01400fc4 	movi	r5,63
   120fc:	00122a00 	call	122a0 <altera_avalon_fifo_clear_event>
   12100:	10000226 	beq	r2,zero,1210c <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   12104:	00bfffc4 	movi	r2,-1
   12108:	00001306 	br	12158 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   1210c:	e13ffc17 	ldw	r4,-16(fp)
   12110:	e17ffd17 	ldw	r5,-12(fp)
   12114:	00122fc0 	call	122fc <altera_avalon_fifo_write_ienable>
   12118:	10000226 	beq	r2,zero,12124 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   1211c:	00bfff84 	movi	r2,-2
   12120:	00000d06 	br	12158 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   12124:	e13ffc17 	ldw	r4,-16(fp)
   12128:	e17fff17 	ldw	r5,-4(fp)
   1212c:	00123540 	call	12354 <altera_avalon_fifo_write_almostfull>
   12130:	10000226 	beq	r2,zero,1213c <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   12134:	00bfff44 	movi	r2,-3
   12138:	00000706 	br	12158 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   1213c:	e13ffc17 	ldw	r4,-16(fp)
   12140:	e17ffe17 	ldw	r5,-8(fp)
   12144:	00123ac0 	call	123ac <altera_avalon_fifo_write_almostempty>
   12148:	10000226 	beq	r2,zero,12154 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1214c:	00bfff44 	movi	r2,-3
   12150:	00000106 	br	12158 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   12154:	0005883a 	mov	r2,zero
}
   12158:	e037883a 	mov	sp,fp
   1215c:	dfc00117 	ldw	ra,4(sp)
   12160:	df000017 	ldw	fp,0(sp)
   12164:	dec00204 	addi	sp,sp,8
   12168:	f800283a 	ret

0001216c <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   1216c:	defffd04 	addi	sp,sp,-12
   12170:	df000215 	stw	fp,8(sp)
   12174:	df000204 	addi	fp,sp,8
   12178:	e13ffe15 	stw	r4,-8(fp)
   1217c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   12180:	e0bffe17 	ldw	r2,-8(fp)
   12184:	10800104 	addi	r2,r2,4
   12188:	10800037 	ldwio	r2,0(r2)
   1218c:	1007883a 	mov	r3,r2
   12190:	e0bfff17 	ldw	r2,-4(fp)
   12194:	1884703a 	and	r2,r3,r2
}
   12198:	e037883a 	mov	sp,fp
   1219c:	df000017 	ldw	fp,0(sp)
   121a0:	dec00104 	addi	sp,sp,4
   121a4:	f800283a 	ret

000121a8 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   121a8:	defffd04 	addi	sp,sp,-12
   121ac:	df000215 	stw	fp,8(sp)
   121b0:	df000204 	addi	fp,sp,8
   121b4:	e13ffe15 	stw	r4,-8(fp)
   121b8:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   121bc:	e0bffe17 	ldw	r2,-8(fp)
   121c0:	10800304 	addi	r2,r2,12
   121c4:	10800037 	ldwio	r2,0(r2)
   121c8:	1007883a 	mov	r3,r2
   121cc:	e0bfff17 	ldw	r2,-4(fp)
   121d0:	1884703a 	and	r2,r3,r2
}
   121d4:	e037883a 	mov	sp,fp
   121d8:	df000017 	ldw	fp,0(sp)
   121dc:	dec00104 	addi	sp,sp,4
   121e0:	f800283a 	ret

000121e4 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   121e4:	defffe04 	addi	sp,sp,-8
   121e8:	df000115 	stw	fp,4(sp)
   121ec:	df000104 	addi	fp,sp,4
   121f0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   121f4:	e0bfff17 	ldw	r2,-4(fp)
   121f8:	10800404 	addi	r2,r2,16
   121fc:	10800037 	ldwio	r2,0(r2)
}
   12200:	e037883a 	mov	sp,fp
   12204:	df000017 	ldw	fp,0(sp)
   12208:	dec00104 	addi	sp,sp,4
   1220c:	f800283a 	ret

00012210 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   12210:	defffe04 	addi	sp,sp,-8
   12214:	df000115 	stw	fp,4(sp)
   12218:	df000104 	addi	fp,sp,4
   1221c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   12220:	e0bfff17 	ldw	r2,-4(fp)
   12224:	10800504 	addi	r2,r2,20
   12228:	10800037 	ldwio	r2,0(r2)
}
   1222c:	e037883a 	mov	sp,fp
   12230:	df000017 	ldw	fp,0(sp)
   12234:	dec00104 	addi	sp,sp,4
   12238:	f800283a 	ret

0001223c <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   1223c:	defffd04 	addi	sp,sp,-12
   12240:	df000215 	stw	fp,8(sp)
   12244:	df000204 	addi	fp,sp,8
   12248:	e13ffe15 	stw	r4,-8(fp)
   1224c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   12250:	e0bffe17 	ldw	r2,-8(fp)
   12254:	10800204 	addi	r2,r2,8
   12258:	10800037 	ldwio	r2,0(r2)
   1225c:	1007883a 	mov	r3,r2
   12260:	e0bfff17 	ldw	r2,-4(fp)
   12264:	1884703a 	and	r2,r3,r2
}
   12268:	e037883a 	mov	sp,fp
   1226c:	df000017 	ldw	fp,0(sp)
   12270:	dec00104 	addi	sp,sp,4
   12274:	f800283a 	ret

00012278 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   12278:	defffe04 	addi	sp,sp,-8
   1227c:	df000115 	stw	fp,4(sp)
   12280:	df000104 	addi	fp,sp,4
   12284:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   12288:	e0bfff17 	ldw	r2,-4(fp)
   1228c:	10800037 	ldwio	r2,0(r2)
}
   12290:	e037883a 	mov	sp,fp
   12294:	df000017 	ldw	fp,0(sp)
   12298:	dec00104 	addi	sp,sp,4
   1229c:	f800283a 	ret

000122a0 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   122a0:	defffd04 	addi	sp,sp,-12
   122a4:	df000215 	stw	fp,8(sp)
   122a8:	df000204 	addi	fp,sp,8
   122ac:	e13ffe15 	stw	r4,-8(fp)
   122b0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   122b4:	e0bffe17 	ldw	r2,-8(fp)
   122b8:	10800204 	addi	r2,r2,8
   122bc:	e0ffff17 	ldw	r3,-4(fp)
   122c0:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   122c4:	e0bffe17 	ldw	r2,-8(fp)
   122c8:	10800204 	addi	r2,r2,8
   122cc:	10800037 	ldwio	r2,0(r2)
   122d0:	1007883a 	mov	r3,r2
   122d4:	e0bfff17 	ldw	r2,-4(fp)
   122d8:	1884703a 	and	r2,r3,r2
   122dc:	1000021e 	bne	r2,zero,122e8 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   122e0:	0005883a 	mov	r2,zero
   122e4:	00000106 	br	122ec <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   122e8:	00bfffc4 	movi	r2,-1
}
   122ec:	e037883a 	mov	sp,fp
   122f0:	df000017 	ldw	fp,0(sp)
   122f4:	dec00104 	addi	sp,sp,4
   122f8:	f800283a 	ret

000122fc <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   122fc:	defffd04 	addi	sp,sp,-12
   12300:	df000215 	stw	fp,8(sp)
   12304:	df000204 	addi	fp,sp,8
   12308:	e13ffe15 	stw	r4,-8(fp)
   1230c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   12310:	e0bffe17 	ldw	r2,-8(fp)
   12314:	10800304 	addi	r2,r2,12
   12318:	e0ffff17 	ldw	r3,-4(fp)
   1231c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   12320:	e0bffe17 	ldw	r2,-8(fp)
   12324:	10800304 	addi	r2,r2,12
   12328:	10800037 	ldwio	r2,0(r2)
   1232c:	1007883a 	mov	r3,r2
   12330:	e0bfff17 	ldw	r2,-4(fp)
   12334:	1880021e 	bne	r3,r2,12340 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   12338:	0005883a 	mov	r2,zero
   1233c:	00000106 	br	12344 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   12340:	00bfff84 	movi	r2,-2
}
   12344:	e037883a 	mov	sp,fp
   12348:	df000017 	ldw	fp,0(sp)
   1234c:	dec00104 	addi	sp,sp,4
   12350:	f800283a 	ret

00012354 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   12354:	defffd04 	addi	sp,sp,-12
   12358:	df000215 	stw	fp,8(sp)
   1235c:	df000204 	addi	fp,sp,8
   12360:	e13ffe15 	stw	r4,-8(fp)
   12364:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   12368:	e0bffe17 	ldw	r2,-8(fp)
   1236c:	10800404 	addi	r2,r2,16
   12370:	e0ffff17 	ldw	r3,-4(fp)
   12374:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   12378:	e0bffe17 	ldw	r2,-8(fp)
   1237c:	10800404 	addi	r2,r2,16
   12380:	10800037 	ldwio	r2,0(r2)
   12384:	1007883a 	mov	r3,r2
   12388:	e0bfff17 	ldw	r2,-4(fp)
   1238c:	1880021e 	bne	r3,r2,12398 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   12390:	0005883a 	mov	r2,zero
   12394:	00000106 	br	1239c <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   12398:	00bfff44 	movi	r2,-3
}
   1239c:	e037883a 	mov	sp,fp
   123a0:	df000017 	ldw	fp,0(sp)
   123a4:	dec00104 	addi	sp,sp,4
   123a8:	f800283a 	ret

000123ac <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   123ac:	defffd04 	addi	sp,sp,-12
   123b0:	df000215 	stw	fp,8(sp)
   123b4:	df000204 	addi	fp,sp,8
   123b8:	e13ffe15 	stw	r4,-8(fp)
   123bc:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   123c0:	e0bffe17 	ldw	r2,-8(fp)
   123c4:	10800504 	addi	r2,r2,20
   123c8:	e0ffff17 	ldw	r3,-4(fp)
   123cc:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   123d0:	e0bffe17 	ldw	r2,-8(fp)
   123d4:	10800504 	addi	r2,r2,20
   123d8:	10800037 	ldwio	r2,0(r2)
   123dc:	1007883a 	mov	r3,r2
   123e0:	e0bfff17 	ldw	r2,-4(fp)
   123e4:	1880021e 	bne	r3,r2,123f0 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   123e8:	0005883a 	mov	r2,zero
   123ec:	00000106 	br	123f4 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   123f0:	00bfff44 	movi	r2,-3
}
   123f4:	e037883a 	mov	sp,fp
   123f8:	df000017 	ldw	fp,0(sp)
   123fc:	dec00104 	addi	sp,sp,4
   12400:	f800283a 	ret

00012404 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   12404:	defffb04 	addi	sp,sp,-20
   12408:	dfc00415 	stw	ra,16(sp)
   1240c:	df000315 	stw	fp,12(sp)
   12410:	df000304 	addi	fp,sp,12
   12414:	e13ffd15 	stw	r4,-12(fp)
   12418:	e17ffe15 	stw	r5,-8(fp)
   1241c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   12420:	e13ffe17 	ldw	r4,-8(fp)
   12424:	01400044 	movi	r5,1
   12428:	001216c0 	call	1216c <altera_avalon_fifo_read_status>
   1242c:	1000051e 	bne	r2,zero,12444 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   12430:	e0bffd17 	ldw	r2,-12(fp)
   12434:	e0ffff17 	ldw	r3,-4(fp)
   12438:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   1243c:	0005883a 	mov	r2,zero
   12440:	00000106 	br	12448 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   12444:	00bfff04 	movi	r2,-4
    }
}
   12448:	e037883a 	mov	sp,fp
   1244c:	dfc00117 	ldw	ra,4(sp)
   12450:	df000017 	ldw	fp,0(sp)
   12454:	dec00204 	addi	sp,sp,8
   12458:	f800283a 	ret

0001245c <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   1245c:	defffa04 	addi	sp,sp,-24
   12460:	dfc00515 	stw	ra,20(sp)
   12464:	df000415 	stw	fp,16(sp)
   12468:	df000404 	addi	fp,sp,16
   1246c:	e13ffd15 	stw	r4,-12(fp)
   12470:	e17ffe15 	stw	r5,-8(fp)
   12474:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   12478:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   1247c:	e0bfff17 	ldw	r2,-4(fp)
   12480:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   12484:	e13ffe17 	ldw	r4,-8(fp)
   12488:	01400084 	movi	r5,2
   1248c:	001216c0 	call	1216c <altera_avalon_fifo_read_status>
   12490:	1000071e 	bne	r2,zero,124b0 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   12494:	e13ffe17 	ldw	r4,-8(fp)
   12498:	00122780 	call	12278 <altera_avalon_fifo_read_level>
   1249c:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   124a0:	e0bffd17 	ldw	r2,-12(fp)
   124a4:	10c00037 	ldwio	r3,0(r2)
   124a8:	e0bfff17 	ldw	r2,-4(fp)
   124ac:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   124b0:	e0bffc17 	ldw	r2,-16(fp)
}
   124b4:	e037883a 	mov	sp,fp
   124b8:	dfc00117 	ldw	ra,4(sp)
   124bc:	df000017 	ldw	fp,0(sp)
   124c0:	dec00204 	addi	sp,sp,8
   124c4:	f800283a 	ret

000124c8 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   124c8:	defffc04 	addi	sp,sp,-16
   124cc:	dfc00315 	stw	ra,12(sp)
   124d0:	df000215 	stw	fp,8(sp)
   124d4:	df000204 	addi	fp,sp,8
   124d8:	e13ffe15 	stw	r4,-8(fp)
   124dc:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   124e0:	e13fff17 	ldw	r4,-4(fp)
   124e4:	01400084 	movi	r5,2
   124e8:	001216c0 	call	1216c <altera_avalon_fifo_read_status>
   124ec:	1000031e 	bne	r2,zero,124fc <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   124f0:	e0bffe17 	ldw	r2,-8(fp)
   124f4:	10800037 	ldwio	r2,0(r2)
   124f8:	00000106 	br	12500 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   124fc:	0005883a 	mov	r2,zero
}
   12500:	e037883a 	mov	sp,fp
   12504:	dfc00117 	ldw	ra,4(sp)
   12508:	df000017 	ldw	fp,0(sp)
   1250c:	dec00204 	addi	sp,sp,8
   12510:	f800283a 	ret

00012514 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   12514:	defffb04 	addi	sp,sp,-20
   12518:	dfc00415 	stw	ra,16(sp)
   1251c:	df000315 	stw	fp,12(sp)
   12520:	df000304 	addi	fp,sp,12
   12524:	e13ffd15 	stw	r4,-12(fp)
   12528:	e17ffe15 	stw	r5,-8(fp)
   1252c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   12530:	e13ffe17 	ldw	r4,-8(fp)
   12534:	01400044 	movi	r5,1
   12538:	001216c0 	call	1216c <altera_avalon_fifo_read_status>
   1253c:	1000061e 	bne	r2,zero,12558 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   12540:	e0bffd17 	ldw	r2,-12(fp)
   12544:	10800104 	addi	r2,r2,4
   12548:	e0ffff17 	ldw	r3,-4(fp)
   1254c:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   12550:	0005883a 	mov	r2,zero
   12554:	00000106 	br	1255c <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   12558:	00bfff04 	movi	r2,-4
    }
}
   1255c:	e037883a 	mov	sp,fp
   12560:	dfc00117 	ldw	ra,4(sp)
   12564:	df000017 	ldw	fp,0(sp)
   12568:	dec00204 	addi	sp,sp,8
   1256c:	f800283a 	ret

00012570 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   12570:	defffe04 	addi	sp,sp,-8
   12574:	df000115 	stw	fp,4(sp)
   12578:	df000104 	addi	fp,sp,4
   1257c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   12580:	e0bfff17 	ldw	r2,-4(fp)
   12584:	10800104 	addi	r2,r2,4
   12588:	10800037 	ldwio	r2,0(r2)
}
   1258c:	e037883a 	mov	sp,fp
   12590:	df000017 	ldw	fp,0(sp)
   12594:	dec00104 	addi	sp,sp,4
   12598:	f800283a 	ret

0001259c <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   1259c:	defffe04 	addi	sp,sp,-8
   125a0:	df000115 	stw	fp,4(sp)
   125a4:	df000104 	addi	fp,sp,4
   125a8:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   125ac:	e0bfff17 	ldw	r2,-4(fp)
   125b0:	10800037 	ldwio	r2,0(r2)
}
   125b4:	e037883a 	mov	sp,fp
   125b8:	df000017 	ldw	fp,0(sp)
   125bc:	dec00104 	addi	sp,sp,4
   125c0:	f800283a 	ret

000125c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   125c4:	defffa04 	addi	sp,sp,-24
   125c8:	dfc00515 	stw	ra,20(sp)
   125cc:	df000415 	stw	fp,16(sp)
   125d0:	df000404 	addi	fp,sp,16
   125d4:	e13ffd15 	stw	r4,-12(fp)
   125d8:	e17ffe15 	stw	r5,-8(fp)
   125dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   125e0:	e0bffd17 	ldw	r2,-12(fp)
   125e4:	10800017 	ldw	r2,0(r2)
   125e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   125ec:	e0bffc17 	ldw	r2,-16(fp)
   125f0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   125f4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   125f8:	10800217 	ldw	r2,8(r2)
   125fc:	1809883a 	mov	r4,r3
   12600:	e17ffe17 	ldw	r5,-8(fp)
   12604:	e1bfff17 	ldw	r6,-4(fp)
   12608:	100f883a 	mov	r7,r2
   1260c:	0012bec0 	call	12bec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   12610:	e037883a 	mov	sp,fp
   12614:	dfc00117 	ldw	ra,4(sp)
   12618:	df000017 	ldw	fp,0(sp)
   1261c:	dec00204 	addi	sp,sp,8
   12620:	f800283a 	ret

00012624 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   12624:	defffa04 	addi	sp,sp,-24
   12628:	dfc00515 	stw	ra,20(sp)
   1262c:	df000415 	stw	fp,16(sp)
   12630:	df000404 	addi	fp,sp,16
   12634:	e13ffd15 	stw	r4,-12(fp)
   12638:	e17ffe15 	stw	r5,-8(fp)
   1263c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12640:	e0bffd17 	ldw	r2,-12(fp)
   12644:	10800017 	ldw	r2,0(r2)
   12648:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1264c:	e0bffc17 	ldw	r2,-16(fp)
   12650:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   12654:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   12658:	10800217 	ldw	r2,8(r2)
   1265c:	1809883a 	mov	r4,r3
   12660:	e17ffe17 	ldw	r5,-8(fp)
   12664:	e1bfff17 	ldw	r6,-4(fp)
   12668:	100f883a 	mov	r7,r2
   1266c:	0012e040 	call	12e04 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   12670:	e037883a 	mov	sp,fp
   12674:	dfc00117 	ldw	ra,4(sp)
   12678:	df000017 	ldw	fp,0(sp)
   1267c:	dec00204 	addi	sp,sp,8
   12680:	f800283a 	ret

00012684 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   12684:	defffc04 	addi	sp,sp,-16
   12688:	dfc00315 	stw	ra,12(sp)
   1268c:	df000215 	stw	fp,8(sp)
   12690:	df000204 	addi	fp,sp,8
   12694:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12698:	e0bfff17 	ldw	r2,-4(fp)
   1269c:	10800017 	ldw	r2,0(r2)
   126a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   126a4:	e0bffe17 	ldw	r2,-8(fp)
   126a8:	10c00a04 	addi	r3,r2,40
   126ac:	e0bfff17 	ldw	r2,-4(fp)
   126b0:	10800217 	ldw	r2,8(r2)
   126b4:	1809883a 	mov	r4,r3
   126b8:	100b883a 	mov	r5,r2
   126bc:	0012a900 	call	12a90 <altera_avalon_jtag_uart_close>
}
   126c0:	e037883a 	mov	sp,fp
   126c4:	dfc00117 	ldw	ra,4(sp)
   126c8:	df000017 	ldw	fp,0(sp)
   126cc:	dec00204 	addi	sp,sp,8
   126d0:	f800283a 	ret

000126d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   126d4:	defffa04 	addi	sp,sp,-24
   126d8:	dfc00515 	stw	ra,20(sp)
   126dc:	df000415 	stw	fp,16(sp)
   126e0:	df000404 	addi	fp,sp,16
   126e4:	e13ffd15 	stw	r4,-12(fp)
   126e8:	e17ffe15 	stw	r5,-8(fp)
   126ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   126f0:	e0bffd17 	ldw	r2,-12(fp)
   126f4:	10800017 	ldw	r2,0(r2)
   126f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   126fc:	e0bffc17 	ldw	r2,-16(fp)
   12700:	10800a04 	addi	r2,r2,40
   12704:	1009883a 	mov	r4,r2
   12708:	e17ffe17 	ldw	r5,-8(fp)
   1270c:	e1bfff17 	ldw	r6,-4(fp)
   12710:	0012af80 	call	12af8 <altera_avalon_jtag_uart_ioctl>
}
   12714:	e037883a 	mov	sp,fp
   12718:	dfc00117 	ldw	ra,4(sp)
   1271c:	df000017 	ldw	fp,0(sp)
   12720:	dec00204 	addi	sp,sp,8
   12724:	f800283a 	ret

00012728 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   12728:	defffa04 	addi	sp,sp,-24
   1272c:	dfc00515 	stw	ra,20(sp)
   12730:	df000415 	stw	fp,16(sp)
   12734:	df000404 	addi	fp,sp,16
   12738:	e13ffd15 	stw	r4,-12(fp)
   1273c:	e17ffe15 	stw	r5,-8(fp)
   12740:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12744:	e0bffd17 	ldw	r2,-12(fp)
   12748:	00c00044 	movi	r3,1
   1274c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   12750:	e0bffd17 	ldw	r2,-12(fp)
   12754:	10800017 	ldw	r2,0(r2)
   12758:	10800104 	addi	r2,r2,4
   1275c:	e0fffd17 	ldw	r3,-12(fp)
   12760:	18c00817 	ldw	r3,32(r3)
   12764:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   12768:	e0fffe17 	ldw	r3,-8(fp)
   1276c:	e0bfff17 	ldw	r2,-4(fp)
   12770:	d8000015 	stw	zero,0(sp)
   12774:	1809883a 	mov	r4,r3
   12778:	100b883a 	mov	r5,r2
   1277c:	01800074 	movhi	r6,1
   12780:	3189fa04 	addi	r6,r6,10216
   12784:	e1fffd17 	ldw	r7,-12(fp)
   12788:	0013ed00 	call	13ed0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1278c:	e0bffd17 	ldw	r2,-12(fp)
   12790:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   12794:	e0bffd17 	ldw	r2,-12(fp)
   12798:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1279c:	008000b4 	movhi	r2,2
   127a0:	10a1a504 	addi	r2,r2,-31084
   127a4:	10800017 	ldw	r2,0(r2)
   127a8:	1809883a 	mov	r4,r3
   127ac:	100b883a 	mov	r5,r2
   127b0:	01800074 	movhi	r6,1
   127b4:	318a7b04 	addi	r6,r6,10732
   127b8:	e1fffd17 	ldw	r7,-12(fp)
   127bc:	001374c0 	call	1374c <alt_alarm_start>
   127c0:	1000040e 	bge	r2,zero,127d4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   127c4:	e0bffd17 	ldw	r2,-12(fp)
   127c8:	00e00034 	movhi	r3,32768
   127cc:	18ffffc4 	addi	r3,r3,-1
   127d0:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   127d4:	e037883a 	mov	sp,fp
   127d8:	dfc00117 	ldw	ra,4(sp)
   127dc:	df000017 	ldw	fp,0(sp)
   127e0:	dec00204 	addi	sp,sp,8
   127e4:	f800283a 	ret

000127e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   127e8:	defff804 	addi	sp,sp,-32
   127ec:	df000715 	stw	fp,28(sp)
   127f0:	df000704 	addi	fp,sp,28
   127f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   127f8:	e0bfff17 	ldw	r2,-4(fp)
   127fc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   12800:	e0bffb17 	ldw	r2,-20(fp)
   12804:	10800017 	ldw	r2,0(r2)
   12808:	e0bffc15 	stw	r2,-16(fp)
   1280c:	00000106 	br	12814 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   12810:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12814:	e0bffc17 	ldw	r2,-16(fp)
   12818:	10800104 	addi	r2,r2,4
   1281c:	10800037 	ldwio	r2,0(r2)
   12820:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   12824:	e0bffd17 	ldw	r2,-12(fp)
   12828:	1080c00c 	andi	r2,r2,768
   1282c:	10006a26 	beq	r2,zero,129d8 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   12830:	e0bffd17 	ldw	r2,-12(fp)
   12834:	1080400c 	andi	r2,r2,256
   12838:	10003326 	beq	r2,zero,12908 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1283c:	00800074 	movhi	r2,1
   12840:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12844:	e0bffb17 	ldw	r2,-20(fp)
   12848:	10800a17 	ldw	r2,40(r2)
   1284c:	10800044 	addi	r2,r2,1
   12850:	1081ffcc 	andi	r2,r2,2047
   12854:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   12858:	e0bffb17 	ldw	r2,-20(fp)
   1285c:	10c00b17 	ldw	r3,44(r2)
   12860:	e0bffe17 	ldw	r2,-8(fp)
   12864:	18801426 	beq	r3,r2,128b8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   12868:	e0bffc17 	ldw	r2,-16(fp)
   1286c:	10800037 	ldwio	r2,0(r2)
   12870:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   12874:	e0bff917 	ldw	r2,-28(fp)
   12878:	10a0000c 	andi	r2,r2,32768
   1287c:	10001026 	beq	r2,zero,128c0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   12880:	e0bffb17 	ldw	r2,-20(fp)
   12884:	10800a17 	ldw	r2,40(r2)
   12888:	e0fff917 	ldw	r3,-28(fp)
   1288c:	e13ffb17 	ldw	r4,-20(fp)
   12890:	2085883a 	add	r2,r4,r2
   12894:	10800e04 	addi	r2,r2,56
   12898:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1289c:	e0bffb17 	ldw	r2,-20(fp)
   128a0:	10800a17 	ldw	r2,40(r2)
   128a4:	10800044 	addi	r2,r2,1
   128a8:	10c1ffcc 	andi	r3,r2,2047
   128ac:	e0bffb17 	ldw	r2,-20(fp)
   128b0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   128b4:	003fe306 	br	12844 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   128b8:	0001883a 	nop
   128bc:	00000106 	br	128c4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   128c0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   128c4:	e0bff917 	ldw	r2,-28(fp)
   128c8:	10bfffec 	andhi	r2,r2,65535
   128cc:	10000e26 	beq	r2,zero,12908 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   128d0:	e0bffb17 	ldw	r2,-20(fp)
   128d4:	10c00817 	ldw	r3,32(r2)
   128d8:	00bfff84 	movi	r2,-2
   128dc:	1886703a 	and	r3,r3,r2
   128e0:	e0bffb17 	ldw	r2,-20(fp)
   128e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   128e8:	e0bffc17 	ldw	r2,-16(fp)
   128ec:	10800104 	addi	r2,r2,4
   128f0:	e0fffb17 	ldw	r3,-20(fp)
   128f4:	18c00817 	ldw	r3,32(r3)
   128f8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   128fc:	e0bffc17 	ldw	r2,-16(fp)
   12900:	10800104 	addi	r2,r2,4
   12904:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   12908:	e0bffd17 	ldw	r2,-12(fp)
   1290c:	1080800c 	andi	r2,r2,512
   12910:	103fbf26 	beq	r2,zero,12810 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   12914:	e0bffd17 	ldw	r2,-12(fp)
   12918:	1004d43a 	srli	r2,r2,16
   1291c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   12920:	00001406 	br	12974 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   12924:	e0bffc17 	ldw	r2,-16(fp)
   12928:	e0fffb17 	ldw	r3,-20(fp)
   1292c:	18c00d17 	ldw	r3,52(r3)
   12930:	e13ffb17 	ldw	r4,-20(fp)
   12934:	20c7883a 	add	r3,r4,r3
   12938:	18c20e04 	addi	r3,r3,2104
   1293c:	18c00003 	ldbu	r3,0(r3)
   12940:	18c03fcc 	andi	r3,r3,255
   12944:	18c0201c 	xori	r3,r3,128
   12948:	18ffe004 	addi	r3,r3,-128
   1294c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12950:	e0bffb17 	ldw	r2,-20(fp)
   12954:	10800d17 	ldw	r2,52(r2)
   12958:	10800044 	addi	r2,r2,1
   1295c:	10c1ffcc 	andi	r3,r2,2047
   12960:	e0bffb17 	ldw	r2,-20(fp)
   12964:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   12968:	e0bffa17 	ldw	r2,-24(fp)
   1296c:	10bfffc4 	addi	r2,r2,-1
   12970:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   12974:	e0bffa17 	ldw	r2,-24(fp)
   12978:	10000526 	beq	r2,zero,12990 <altera_avalon_jtag_uart_irq+0x1a8>
   1297c:	e0bffb17 	ldw	r2,-20(fp)
   12980:	10c00d17 	ldw	r3,52(r2)
   12984:	e0bffb17 	ldw	r2,-20(fp)
   12988:	10800c17 	ldw	r2,48(r2)
   1298c:	18bfe51e 	bne	r3,r2,12924 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   12990:	e0bffa17 	ldw	r2,-24(fp)
   12994:	103f9e26 	beq	r2,zero,12810 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12998:	e0bffb17 	ldw	r2,-20(fp)
   1299c:	10c00817 	ldw	r3,32(r2)
   129a0:	00bfff44 	movi	r2,-3
   129a4:	1886703a 	and	r3,r3,r2
   129a8:	e0bffb17 	ldw	r2,-20(fp)
   129ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   129b0:	e0bffb17 	ldw	r2,-20(fp)
   129b4:	10800017 	ldw	r2,0(r2)
   129b8:	10800104 	addi	r2,r2,4
   129bc:	e0fffb17 	ldw	r3,-20(fp)
   129c0:	18c00817 	ldw	r3,32(r3)
   129c4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   129c8:	e0bffc17 	ldw	r2,-16(fp)
   129cc:	10800104 	addi	r2,r2,4
   129d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   129d4:	003f8e06 	br	12810 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   129d8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   129dc:	e037883a 	mov	sp,fp
   129e0:	df000017 	ldw	fp,0(sp)
   129e4:	dec00104 	addi	sp,sp,4
   129e8:	f800283a 	ret

000129ec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   129ec:	defffc04 	addi	sp,sp,-16
   129f0:	df000315 	stw	fp,12(sp)
   129f4:	df000304 	addi	fp,sp,12
   129f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   129fc:	e0bfff17 	ldw	r2,-4(fp)
   12a00:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   12a04:	e0bffd17 	ldw	r2,-12(fp)
   12a08:	10800017 	ldw	r2,0(r2)
   12a0c:	10800104 	addi	r2,r2,4
   12a10:	10800037 	ldwio	r2,0(r2)
   12a14:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   12a18:	e0bffe17 	ldw	r2,-8(fp)
   12a1c:	1081000c 	andi	r2,r2,1024
   12a20:	10000a26 	beq	r2,zero,12a4c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   12a24:	e0bffd17 	ldw	r2,-12(fp)
   12a28:	10800017 	ldw	r2,0(r2)
   12a2c:	10800104 	addi	r2,r2,4
   12a30:	e0fffd17 	ldw	r3,-12(fp)
   12a34:	18c00817 	ldw	r3,32(r3)
   12a38:	18c10014 	ori	r3,r3,1024
   12a3c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   12a40:	e0bffd17 	ldw	r2,-12(fp)
   12a44:	10000915 	stw	zero,36(r2)
   12a48:	00000a06 	br	12a74 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   12a4c:	e0bffd17 	ldw	r2,-12(fp)
   12a50:	10800917 	ldw	r2,36(r2)
   12a54:	00e00034 	movhi	r3,32768
   12a58:	18ffff04 	addi	r3,r3,-4
   12a5c:	18800536 	bltu	r3,r2,12a74 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   12a60:	e0bffd17 	ldw	r2,-12(fp)
   12a64:	10800917 	ldw	r2,36(r2)
   12a68:	10c00044 	addi	r3,r2,1
   12a6c:	e0bffd17 	ldw	r2,-12(fp)
   12a70:	10c00915 	stw	r3,36(r2)
   12a74:	008000b4 	movhi	r2,2
   12a78:	10a1a504 	addi	r2,r2,-31084
   12a7c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   12a80:	e037883a 	mov	sp,fp
   12a84:	df000017 	ldw	fp,0(sp)
   12a88:	dec00104 	addi	sp,sp,4
   12a8c:	f800283a 	ret

00012a90 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   12a90:	defffd04 	addi	sp,sp,-12
   12a94:	df000215 	stw	fp,8(sp)
   12a98:	df000204 	addi	fp,sp,8
   12a9c:	e13ffe15 	stw	r4,-8(fp)
   12aa0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12aa4:	00000506 	br	12abc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   12aa8:	e0bfff17 	ldw	r2,-4(fp)
   12aac:	1090000c 	andi	r2,r2,16384
   12ab0:	10000226 	beq	r2,zero,12abc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   12ab4:	00bffd44 	movi	r2,-11
   12ab8:	00000b06 	br	12ae8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12abc:	e0bffe17 	ldw	r2,-8(fp)
   12ac0:	10c00d17 	ldw	r3,52(r2)
   12ac4:	e0bffe17 	ldw	r2,-8(fp)
   12ac8:	10800c17 	ldw	r2,48(r2)
   12acc:	18800526 	beq	r3,r2,12ae4 <altera_avalon_jtag_uart_close+0x54>
   12ad0:	e0bffe17 	ldw	r2,-8(fp)
   12ad4:	10c00917 	ldw	r3,36(r2)
   12ad8:	e0bffe17 	ldw	r2,-8(fp)
   12adc:	10800117 	ldw	r2,4(r2)
   12ae0:	18bff136 	bltu	r3,r2,12aa8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   12ae4:	0005883a 	mov	r2,zero
}
   12ae8:	e037883a 	mov	sp,fp
   12aec:	df000017 	ldw	fp,0(sp)
   12af0:	dec00104 	addi	sp,sp,4
   12af4:	f800283a 	ret

00012af8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   12af8:	defffa04 	addi	sp,sp,-24
   12afc:	df000515 	stw	fp,20(sp)
   12b00:	df000504 	addi	fp,sp,20
   12b04:	e13ffd15 	stw	r4,-12(fp)
   12b08:	e17ffe15 	stw	r5,-8(fp)
   12b0c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   12b10:	00bff9c4 	movi	r2,-25
   12b14:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   12b18:	e0bffe17 	ldw	r2,-8(fp)
   12b1c:	10da8060 	cmpeqi	r3,r2,27137
   12b20:	1800031e 	bne	r3,zero,12b30 <altera_avalon_jtag_uart_ioctl+0x38>
   12b24:	109a80a0 	cmpeqi	r2,r2,27138
   12b28:	1000181e 	bne	r2,zero,12b8c <altera_avalon_jtag_uart_ioctl+0x94>
   12b2c:	00002606 	br	12bc8 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   12b30:	e0bffd17 	ldw	r2,-12(fp)
   12b34:	10c00117 	ldw	r3,4(r2)
   12b38:	00a00034 	movhi	r2,32768
   12b3c:	10bfffc4 	addi	r2,r2,-1
   12b40:	18802226 	beq	r3,r2,12bcc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   12b44:	e0bfff17 	ldw	r2,-4(fp)
   12b48:	10800017 	ldw	r2,0(r2)
   12b4c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   12b50:	e0bffc17 	ldw	r2,-16(fp)
   12b54:	10800090 	cmplti	r2,r2,2
   12b58:	1000061e 	bne	r2,zero,12b74 <altera_avalon_jtag_uart_ioctl+0x7c>
   12b5c:	e0fffc17 	ldw	r3,-16(fp)
   12b60:	00a00034 	movhi	r2,32768
   12b64:	10bfffc4 	addi	r2,r2,-1
   12b68:	18800226 	beq	r3,r2,12b74 <altera_avalon_jtag_uart_ioctl+0x7c>
   12b6c:	e0bffc17 	ldw	r2,-16(fp)
   12b70:	00000206 	br	12b7c <altera_avalon_jtag_uart_ioctl+0x84>
   12b74:	00a00034 	movhi	r2,32768
   12b78:	10bfff84 	addi	r2,r2,-2
   12b7c:	e0fffd17 	ldw	r3,-12(fp)
   12b80:	18800115 	stw	r2,4(r3)
      rc = 0;
   12b84:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   12b88:	00001006 	br	12bcc <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   12b8c:	e0bffd17 	ldw	r2,-12(fp)
   12b90:	10c00117 	ldw	r3,4(r2)
   12b94:	00a00034 	movhi	r2,32768
   12b98:	10bfffc4 	addi	r2,r2,-1
   12b9c:	18800d26 	beq	r3,r2,12bd4 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   12ba0:	e0bffd17 	ldw	r2,-12(fp)
   12ba4:	10c00917 	ldw	r3,36(r2)
   12ba8:	e0bffd17 	ldw	r2,-12(fp)
   12bac:	10800117 	ldw	r2,4(r2)
   12bb0:	1885803a 	cmpltu	r2,r3,r2
   12bb4:	10c03fcc 	andi	r3,r2,255
   12bb8:	e0bfff17 	ldw	r2,-4(fp)
   12bbc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   12bc0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   12bc4:	00000306 	br	12bd4 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   12bc8:	00000306 	br	12bd8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   12bcc:	0001883a 	nop
   12bd0:	00000106 	br	12bd8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   12bd4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   12bd8:	e0bffb17 	ldw	r2,-20(fp)
}
   12bdc:	e037883a 	mov	sp,fp
   12be0:	df000017 	ldw	fp,0(sp)
   12be4:	dec00104 	addi	sp,sp,4
   12be8:	f800283a 	ret

00012bec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   12bec:	defff304 	addi	sp,sp,-52
   12bf0:	dfc00c15 	stw	ra,48(sp)
   12bf4:	df000b15 	stw	fp,44(sp)
   12bf8:	df000b04 	addi	fp,sp,44
   12bfc:	e13ffc15 	stw	r4,-16(fp)
   12c00:	e17ffd15 	stw	r5,-12(fp)
   12c04:	e1bffe15 	stw	r6,-8(fp)
   12c08:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   12c0c:	e0bffd17 	ldw	r2,-12(fp)
   12c10:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12c14:	00004706 	br	12d34 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   12c18:	e0bffc17 	ldw	r2,-16(fp)
   12c1c:	10800a17 	ldw	r2,40(r2)
   12c20:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   12c24:	e0bffc17 	ldw	r2,-16(fp)
   12c28:	10800b17 	ldw	r2,44(r2)
   12c2c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   12c30:	e0fff717 	ldw	r3,-36(fp)
   12c34:	e0bff817 	ldw	r2,-32(fp)
   12c38:	18800536 	bltu	r3,r2,12c50 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   12c3c:	e0fff717 	ldw	r3,-36(fp)
   12c40:	e0bff817 	ldw	r2,-32(fp)
   12c44:	1885c83a 	sub	r2,r3,r2
   12c48:	e0bff615 	stw	r2,-40(fp)
   12c4c:	00000406 	br	12c60 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   12c50:	00c20004 	movi	r3,2048
   12c54:	e0bff817 	ldw	r2,-32(fp)
   12c58:	1885c83a 	sub	r2,r3,r2
   12c5c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   12c60:	e0bff617 	ldw	r2,-40(fp)
   12c64:	10001e26 	beq	r2,zero,12ce0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   12c68:	e0fffe17 	ldw	r3,-8(fp)
   12c6c:	e0bff617 	ldw	r2,-40(fp)
   12c70:	1880022e 	bgeu	r3,r2,12c7c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   12c74:	e0bffe17 	ldw	r2,-8(fp)
   12c78:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   12c7c:	e0bff817 	ldw	r2,-32(fp)
   12c80:	10800e04 	addi	r2,r2,56
   12c84:	e0fffc17 	ldw	r3,-16(fp)
   12c88:	1885883a 	add	r2,r3,r2
   12c8c:	e13ff517 	ldw	r4,-44(fp)
   12c90:	100b883a 	mov	r5,r2
   12c94:	e1bff617 	ldw	r6,-40(fp)
   12c98:	0003e600 	call	3e60 <memcpy>
      ptr   += n;
   12c9c:	e0fff517 	ldw	r3,-44(fp)
   12ca0:	e0bff617 	ldw	r2,-40(fp)
   12ca4:	1885883a 	add	r2,r3,r2
   12ca8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   12cac:	e0fffe17 	ldw	r3,-8(fp)
   12cb0:	e0bff617 	ldw	r2,-40(fp)
   12cb4:	1885c83a 	sub	r2,r3,r2
   12cb8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12cbc:	e0fff817 	ldw	r3,-32(fp)
   12cc0:	e0bff617 	ldw	r2,-40(fp)
   12cc4:	1885883a 	add	r2,r3,r2
   12cc8:	10c1ffcc 	andi	r3,r2,2047
   12ccc:	e0bffc17 	ldw	r2,-16(fp)
   12cd0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   12cd4:	e0bffe17 	ldw	r2,-8(fp)
   12cd8:	00bfcf16 	blt	zero,r2,12c18 <altera_avalon_jtag_uart_read+0x2c>
   12cdc:	00000106 	br	12ce4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   12ce0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   12ce4:	e0fff517 	ldw	r3,-44(fp)
   12ce8:	e0bffd17 	ldw	r2,-12(fp)
   12cec:	1880141e 	bne	r3,r2,12d40 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   12cf0:	e0bfff17 	ldw	r2,-4(fp)
   12cf4:	1090000c 	andi	r2,r2,16384
   12cf8:	1000131e 	bne	r2,zero,12d48 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   12cfc:	0001883a 	nop
   12d00:	e0bffc17 	ldw	r2,-16(fp)
   12d04:	10c00a17 	ldw	r3,40(r2)
   12d08:	e0bff717 	ldw	r2,-36(fp)
   12d0c:	1880051e 	bne	r3,r2,12d24 <altera_avalon_jtag_uart_read+0x138>
   12d10:	e0bffc17 	ldw	r2,-16(fp)
   12d14:	10c00917 	ldw	r3,36(r2)
   12d18:	e0bffc17 	ldw	r2,-16(fp)
   12d1c:	10800117 	ldw	r2,4(r2)
   12d20:	18bff736 	bltu	r3,r2,12d00 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   12d24:	e0bffc17 	ldw	r2,-16(fp)
   12d28:	10c00a17 	ldw	r3,40(r2)
   12d2c:	e0bff717 	ldw	r2,-36(fp)
   12d30:	18800726 	beq	r3,r2,12d50 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12d34:	e0bffe17 	ldw	r2,-8(fp)
   12d38:	00bfb716 	blt	zero,r2,12c18 <altera_avalon_jtag_uart_read+0x2c>
   12d3c:	00000506 	br	12d54 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   12d40:	0001883a 	nop
   12d44:	00000306 	br	12d54 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   12d48:	0001883a 	nop
   12d4c:	00000106 	br	12d54 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   12d50:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   12d54:	e0fff517 	ldw	r3,-44(fp)
   12d58:	e0bffd17 	ldw	r2,-12(fp)
   12d5c:	18801726 	beq	r3,r2,12dbc <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12d60:	0005303a 	rdctl	r2,status
   12d64:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12d68:	e0fffa17 	ldw	r3,-24(fp)
   12d6c:	00bfff84 	movi	r2,-2
   12d70:	1884703a 	and	r2,r3,r2
   12d74:	1001703a 	wrctl	status,r2
  
  return context;
   12d78:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   12d7c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12d80:	e0bffc17 	ldw	r2,-16(fp)
   12d84:	10800817 	ldw	r2,32(r2)
   12d88:	10c00054 	ori	r3,r2,1
   12d8c:	e0bffc17 	ldw	r2,-16(fp)
   12d90:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12d94:	e0bffc17 	ldw	r2,-16(fp)
   12d98:	10800017 	ldw	r2,0(r2)
   12d9c:	10800104 	addi	r2,r2,4
   12da0:	e0fffc17 	ldw	r3,-16(fp)
   12da4:	18c00817 	ldw	r3,32(r3)
   12da8:	10c00035 	stwio	r3,0(r2)
   12dac:	e0bff917 	ldw	r2,-28(fp)
   12db0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12db4:	e0bffb17 	ldw	r2,-20(fp)
   12db8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   12dbc:	e0fff517 	ldw	r3,-44(fp)
   12dc0:	e0bffd17 	ldw	r2,-12(fp)
   12dc4:	18800426 	beq	r3,r2,12dd8 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   12dc8:	e0fff517 	ldw	r3,-44(fp)
   12dcc:	e0bffd17 	ldw	r2,-12(fp)
   12dd0:	1885c83a 	sub	r2,r3,r2
   12dd4:	00000606 	br	12df0 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   12dd8:	e0bfff17 	ldw	r2,-4(fp)
   12ddc:	1090000c 	andi	r2,r2,16384
   12de0:	10000226 	beq	r2,zero,12dec <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   12de4:	00bffd44 	movi	r2,-11
   12de8:	00000106 	br	12df0 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   12dec:	00bffec4 	movi	r2,-5
}
   12df0:	e037883a 	mov	sp,fp
   12df4:	dfc00117 	ldw	ra,4(sp)
   12df8:	df000017 	ldw	fp,0(sp)
   12dfc:	dec00204 	addi	sp,sp,8
   12e00:	f800283a 	ret

00012e04 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   12e04:	defff304 	addi	sp,sp,-52
   12e08:	dfc00c15 	stw	ra,48(sp)
   12e0c:	df000b15 	stw	fp,44(sp)
   12e10:	df000b04 	addi	fp,sp,44
   12e14:	e13ffc15 	stw	r4,-16(fp)
   12e18:	e17ffd15 	stw	r5,-12(fp)
   12e1c:	e1bffe15 	stw	r6,-8(fp)
   12e20:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   12e24:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   12e28:	e0bffd17 	ldw	r2,-12(fp)
   12e2c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12e30:	00003706 	br	12f10 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   12e34:	e0bffc17 	ldw	r2,-16(fp)
   12e38:	10800c17 	ldw	r2,48(r2)
   12e3c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   12e40:	e0bffc17 	ldw	r2,-16(fp)
   12e44:	10800d17 	ldw	r2,52(r2)
   12e48:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   12e4c:	e0fff817 	ldw	r3,-32(fp)
   12e50:	e0bff517 	ldw	r2,-44(fp)
   12e54:	1880062e 	bgeu	r3,r2,12e70 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   12e58:	e0fff517 	ldw	r3,-44(fp)
   12e5c:	e0bff817 	ldw	r2,-32(fp)
   12e60:	1885c83a 	sub	r2,r3,r2
   12e64:	10bfffc4 	addi	r2,r2,-1
   12e68:	e0bff615 	stw	r2,-40(fp)
   12e6c:	00000b06 	br	12e9c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   12e70:	e0bff517 	ldw	r2,-44(fp)
   12e74:	10000526 	beq	r2,zero,12e8c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   12e78:	00c20004 	movi	r3,2048
   12e7c:	e0bff817 	ldw	r2,-32(fp)
   12e80:	1885c83a 	sub	r2,r3,r2
   12e84:	e0bff615 	stw	r2,-40(fp)
   12e88:	00000406 	br	12e9c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   12e8c:	00c1ffc4 	movi	r3,2047
   12e90:	e0bff817 	ldw	r2,-32(fp)
   12e94:	1885c83a 	sub	r2,r3,r2
   12e98:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   12e9c:	e0bff617 	ldw	r2,-40(fp)
   12ea0:	10001e26 	beq	r2,zero,12f1c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   12ea4:	e0fffe17 	ldw	r3,-8(fp)
   12ea8:	e0bff617 	ldw	r2,-40(fp)
   12eac:	1880022e 	bgeu	r3,r2,12eb8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   12eb0:	e0bffe17 	ldw	r2,-8(fp)
   12eb4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   12eb8:	e0bff817 	ldw	r2,-32(fp)
   12ebc:	10820e04 	addi	r2,r2,2104
   12ec0:	e0fffc17 	ldw	r3,-16(fp)
   12ec4:	1885883a 	add	r2,r3,r2
   12ec8:	1009883a 	mov	r4,r2
   12ecc:	e17ffd17 	ldw	r5,-12(fp)
   12ed0:	e1bff617 	ldw	r6,-40(fp)
   12ed4:	0003e600 	call	3e60 <memcpy>
      ptr   += n;
   12ed8:	e0fffd17 	ldw	r3,-12(fp)
   12edc:	e0bff617 	ldw	r2,-40(fp)
   12ee0:	1885883a 	add	r2,r3,r2
   12ee4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   12ee8:	e0fffe17 	ldw	r3,-8(fp)
   12eec:	e0bff617 	ldw	r2,-40(fp)
   12ef0:	1885c83a 	sub	r2,r3,r2
   12ef4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12ef8:	e0fff817 	ldw	r3,-32(fp)
   12efc:	e0bff617 	ldw	r2,-40(fp)
   12f00:	1885883a 	add	r2,r3,r2
   12f04:	10c1ffcc 	andi	r3,r2,2047
   12f08:	e0bffc17 	ldw	r2,-16(fp)
   12f0c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12f10:	e0bffe17 	ldw	r2,-8(fp)
   12f14:	00bfc716 	blt	zero,r2,12e34 <altera_avalon_jtag_uart_write+0x30>
   12f18:	00000106 	br	12f20 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   12f1c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12f20:	0005303a 	rdctl	r2,status
   12f24:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12f28:	e0fffa17 	ldw	r3,-24(fp)
   12f2c:	00bfff84 	movi	r2,-2
   12f30:	1884703a 	and	r2,r3,r2
   12f34:	1001703a 	wrctl	status,r2
  
  return context;
   12f38:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   12f3c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12f40:	e0bffc17 	ldw	r2,-16(fp)
   12f44:	10800817 	ldw	r2,32(r2)
   12f48:	10c00094 	ori	r3,r2,2
   12f4c:	e0bffc17 	ldw	r2,-16(fp)
   12f50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12f54:	e0bffc17 	ldw	r2,-16(fp)
   12f58:	10800017 	ldw	r2,0(r2)
   12f5c:	10800104 	addi	r2,r2,4
   12f60:	e0fffc17 	ldw	r3,-16(fp)
   12f64:	18c00817 	ldw	r3,32(r3)
   12f68:	10c00035 	stwio	r3,0(r2)
   12f6c:	e0bff917 	ldw	r2,-28(fp)
   12f70:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f74:	e0bffb17 	ldw	r2,-20(fp)
   12f78:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   12f7c:	e0bffe17 	ldw	r2,-8(fp)
   12f80:	0080110e 	bge	zero,r2,12fc8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   12f84:	e0bfff17 	ldw	r2,-4(fp)
   12f88:	1090000c 	andi	r2,r2,16384
   12f8c:	1000111e 	bne	r2,zero,12fd4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   12f90:	0001883a 	nop
   12f94:	e0bffc17 	ldw	r2,-16(fp)
   12f98:	10c00d17 	ldw	r3,52(r2)
   12f9c:	e0bff517 	ldw	r2,-44(fp)
   12fa0:	1880051e 	bne	r3,r2,12fb8 <altera_avalon_jtag_uart_write+0x1b4>
   12fa4:	e0bffc17 	ldw	r2,-16(fp)
   12fa8:	10c00917 	ldw	r3,36(r2)
   12fac:	e0bffc17 	ldw	r2,-16(fp)
   12fb0:	10800117 	ldw	r2,4(r2)
   12fb4:	18bff736 	bltu	r3,r2,12f94 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   12fb8:	e0bffc17 	ldw	r2,-16(fp)
   12fbc:	10c00d17 	ldw	r3,52(r2)
   12fc0:	e0bff517 	ldw	r2,-44(fp)
   12fc4:	18800526 	beq	r3,r2,12fdc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   12fc8:	e0bffe17 	ldw	r2,-8(fp)
   12fcc:	00bfd016 	blt	zero,r2,12f10 <altera_avalon_jtag_uart_write+0x10c>
   12fd0:	00000306 	br	12fe0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   12fd4:	0001883a 	nop
   12fd8:	00000106 	br	12fe0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   12fdc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   12fe0:	e0fffd17 	ldw	r3,-12(fp)
   12fe4:	e0bff717 	ldw	r2,-36(fp)
   12fe8:	18800426 	beq	r3,r2,12ffc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   12fec:	e0fffd17 	ldw	r3,-12(fp)
   12ff0:	e0bff717 	ldw	r2,-36(fp)
   12ff4:	1885c83a 	sub	r2,r3,r2
   12ff8:	00000606 	br	13014 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   12ffc:	e0bfff17 	ldw	r2,-4(fp)
   13000:	1090000c 	andi	r2,r2,16384
   13004:	10000226 	beq	r2,zero,13010 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   13008:	00bffd44 	movi	r2,-11
   1300c:	00000106 	br	13014 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   13010:	00bffec4 	movi	r2,-5
}
   13014:	e037883a 	mov	sp,fp
   13018:	dfc00117 	ldw	ra,4(sp)
   1301c:	df000017 	ldw	fp,0(sp)
   13020:	dec00204 	addi	sp,sp,8
   13024:	f800283a 	ret

00013028 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   13028:	defffa04 	addi	sp,sp,-24
   1302c:	dfc00515 	stw	ra,20(sp)
   13030:	df000415 	stw	fp,16(sp)
   13034:	df000404 	addi	fp,sp,16
   13038:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1303c:	0007883a 	mov	r3,zero
   13040:	e0bfff17 	ldw	r2,-4(fp)
   13044:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   13048:	e0bfff17 	ldw	r2,-4(fp)
   1304c:	10800104 	addi	r2,r2,4
   13050:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13054:	0005303a 	rdctl	r2,status
   13058:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1305c:	e0fffd17 	ldw	r3,-12(fp)
   13060:	00bfff84 	movi	r2,-2
   13064:	1884703a 	and	r2,r3,r2
   13068:	1001703a 	wrctl	status,r2
  
  return context;
   1306c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   13070:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   13074:	00143880 	call	14388 <alt_tick>
   13078:	e0bffc17 	ldw	r2,-16(fp)
   1307c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13080:	e0bffe17 	ldw	r2,-8(fp)
   13084:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   13088:	e037883a 	mov	sp,fp
   1308c:	dfc00117 	ldw	ra,4(sp)
   13090:	df000017 	ldw	fp,0(sp)
   13094:	dec00204 	addi	sp,sp,8
   13098:	f800283a 	ret

0001309c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1309c:	defff804 	addi	sp,sp,-32
   130a0:	dfc00715 	stw	ra,28(sp)
   130a4:	df000615 	stw	fp,24(sp)
   130a8:	df000604 	addi	fp,sp,24
   130ac:	e13ffc15 	stw	r4,-16(fp)
   130b0:	e17ffd15 	stw	r5,-12(fp)
   130b4:	e1bffe15 	stw	r6,-8(fp)
   130b8:	e1ffff15 	stw	r7,-4(fp)
   130bc:	e0bfff17 	ldw	r2,-4(fp)
   130c0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   130c4:	008000b4 	movhi	r2,2
   130c8:	10a1a504 	addi	r2,r2,-31084
   130cc:	10800017 	ldw	r2,0(r2)
   130d0:	1000041e 	bne	r2,zero,130e4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   130d4:	008000b4 	movhi	r2,2
   130d8:	10a1a504 	addi	r2,r2,-31084
   130dc:	e0fffb17 	ldw	r3,-20(fp)
   130e0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   130e4:	e0bffc17 	ldw	r2,-16(fp)
   130e8:	10800104 	addi	r2,r2,4
   130ec:	00c001c4 	movi	r3,7
   130f0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   130f4:	d8000015 	stw	zero,0(sp)
   130f8:	e13ffd17 	ldw	r4,-12(fp)
   130fc:	e17ffe17 	ldw	r5,-8(fp)
   13100:	01800074 	movhi	r6,1
   13104:	318c0a04 	addi	r6,r6,12328
   13108:	e1fffc17 	ldw	r7,-16(fp)
   1310c:	0013ed00 	call	13ed0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   13110:	e037883a 	mov	sp,fp
   13114:	dfc00117 	ldw	ra,4(sp)
   13118:	df000017 	ldw	fp,0(sp)
   1311c:	dec00204 	addi	sp,sp,8
   13120:	f800283a 	ret

00013124 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   13124:	deffeb04 	addi	sp,sp,-84
   13128:	df001415 	stw	fp,80(sp)
   1312c:	dc401315 	stw	r17,76(sp)
   13130:	dc001215 	stw	r16,72(sp)
   13134:	df001204 	addi	fp,sp,72
   13138:	e13ffb15 	stw	r4,-20(fp)
   1313c:	e17ffc15 	stw	r5,-16(fp)
   13140:	e1bffd15 	stw	r6,-12(fp)
   13144:	e1fffe15 	stw	r7,-8(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   13148:	e0bffb17 	ldw	r2,-20(fp)
   1314c:	10800017 	ldw	r2,0(r2)
   13150:	e0bfee15 	stw	r2,-72(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   13154:	e0bfee17 	ldw	r2,-72(fp)
   13158:	10800217 	ldw	r2,8(r2)
   1315c:	e0bff715 	stw	r2,-36(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   13160:	e0bff717 	ldw	r2,-36(fp)
   13164:	10bfffc4 	addi	r2,r2,-1
   13168:	e0bff815 	stw	r2,-32(fp)

  while (*++ptr != 0)
   1316c:	e0bff817 	ldw	r2,-32(fp)
   13170:	10800044 	addi	r2,r2,1
   13174:	e0bff815 	stw	r2,-32(fp)
   13178:	e0bff817 	ldw	r2,-32(fp)
   1317c:	10800003 	ldbu	r2,0(r2)
   13180:	10803fcc 	andi	r2,r2,255
   13184:	1080201c 	xori	r2,r2,128
   13188:	10bfe004 	addi	r2,r2,-128
   1318c:	103ff71e 	bne	r2,zero,1316c <alt_hostfs_open+0x48>
    ;

  return ptr - string;
   13190:	e0fff817 	ldw	r3,-32(fp)
   13194:	e0bff717 	ldw	r2,-36(fp)
   13198:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   1319c:	10800044 	addi	r2,r2,1
   131a0:	e0fffc17 	ldw	r3,-16(fp)
   131a4:	1885883a 	add	r2,r3,r2
   131a8:	e0bffc15 	stw	r2,-16(fp)

  r3 = (int)&hcinfo;
   131ac:	d0a01c04 	addi	r2,gp,-32656
   131b0:	e0bfef15 	stw	r2,-68(fp)
  r4 = (int)name;
   131b4:	e0bffc17 	ldw	r2,-16(fp)
   131b8:	e0bff015 	stw	r2,-64(fp)
  r5 = flags;
   131bc:	e0bffd17 	ldw	r2,-12(fp)
   131c0:	e0bff115 	stw	r2,-60(fp)
  r6 = mode;
   131c4:	e0bffe17 	ldw	r2,-8(fp)
   131c8:	e0bff215 	stw	r2,-56(fp)
   131cc:	e0bffc17 	ldw	r2,-16(fp)
   131d0:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   131d4:	e0bff917 	ldw	r2,-28(fp)
   131d8:	10bfffc4 	addi	r2,r2,-1
   131dc:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   131e0:	e0bffa17 	ldw	r2,-24(fp)
   131e4:	10800044 	addi	r2,r2,1
   131e8:	e0bffa15 	stw	r2,-24(fp)
   131ec:	e0bffa17 	ldw	r2,-24(fp)
   131f0:	10800003 	ldbu	r2,0(r2)
   131f4:	10803fcc 	andi	r2,r2,255
   131f8:	1080201c 	xori	r2,r2,128
   131fc:	10bfe004 	addi	r2,r2,-128
   13200:	103ff71e 	bne	r2,zero,131e0 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
   13204:	e0fffa17 	ldw	r3,-24(fp)
   13208:	e0bff917 	ldw	r2,-28(fp)
   1320c:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   13210:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
   13214:	e13ff017 	ldw	r4,-64(fp)
   13218:	e13fff15 	stw	r4,-4(fp)
   1321c:	e17ff117 	ldw	r5,-60(fp)
   13220:	e1bff217 	ldw	r6,-56(fp)
   13224:	e1fff317 	ldw	r7,-52(fp)
   13228:	e0ffef17 	ldw	r3,-68(fp)
   1322c:	1821883a 	mov	r16,r3
   13230:	8007883a 	mov	r3,r16
   13234:	e13fff17 	ldw	r4,-4(fp)
   13238:	003da07a 	break	1
   1323c:	1821883a 	mov	r16,r3
   13240:	1023883a 	mov	r17,r2
   13244:	e47ff415 	stw	r17,-48(fp)
   13248:	e43fef15 	stw	r16,-68(fp)

  handle = (void *)r2;
   1324c:	e0bff417 	ldw	r2,-48(fp)
   13250:	e0bff515 	stw	r2,-44(fp)
  error = r3;
   13254:	e0bfef17 	ldw	r2,-68(fp)
   13258:	e0bff615 	stw	r2,-40(fp)

  if (error == 0)
   1325c:	e0bff617 	ldw	r2,-40(fp)
   13260:	1000031e 	bne	r2,zero,13270 <alt_hostfs_open+0x14c>
    fd->priv = handle;
   13264:	e0bffb17 	ldw	r2,-20(fp)
   13268:	e0fff517 	ldw	r3,-44(fp)
   1326c:	10c00115 	stw	r3,4(r2)

  return -error;
   13270:	e0bff617 	ldw	r2,-40(fp)
   13274:	0085c83a 	sub	r2,zero,r2
}
   13278:	e037883a 	mov	sp,fp
   1327c:	df000217 	ldw	fp,8(sp)
   13280:	dc400117 	ldw	r17,4(sp)
   13284:	dc000017 	ldw	r16,0(sp)
   13288:	dec00304 	addi	sp,sp,12
   1328c:	f800283a 	ret

00013290 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   13290:	defffa04 	addi	sp,sp,-24
   13294:	df000515 	stw	fp,20(sp)
   13298:	dc000415 	stw	r16,16(sp)
   1329c:	df000404 	addi	fp,sp,16
   132a0:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
   132a4:	d0a01904 	addi	r2,gp,-32668
   132a8:	e0bffc15 	stw	r2,-16(fp)
  r4 = (int)fd->priv;
   132ac:	e0bfff17 	ldw	r2,-4(fp)
   132b0:	10800117 	ldw	r2,4(r2)
   132b4:	e0bffd15 	stw	r2,-12(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
   132b8:	e0bffd17 	ldw	r2,-12(fp)
   132bc:	e0fffc17 	ldw	r3,-16(fp)
   132c0:	1821883a 	mov	r16,r3
   132c4:	8007883a 	mov	r3,r16
   132c8:	1009883a 	mov	r4,r2
   132cc:	003da07a 	break	1
   132d0:	1821883a 	mov	r16,r3
   132d4:	e43ffc15 	stw	r16,-16(fp)

  error = r3;
   132d8:	e0bffc17 	ldw	r2,-16(fp)
   132dc:	e0bffe15 	stw	r2,-8(fp)

  return -error;
   132e0:	e0bffe17 	ldw	r2,-8(fp)
   132e4:	0085c83a 	sub	r2,zero,r2
}
   132e8:	e037883a 	mov	sp,fp
   132ec:	df000117 	ldw	fp,4(sp)
   132f0:	dc000017 	ldw	r16,0(sp)
   132f4:	dec00204 	addi	sp,sp,8
   132f8:	f800283a 	ret

000132fc <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   132fc:	defff204 	addi	sp,sp,-56
   13300:	df000d15 	stw	fp,52(sp)
   13304:	dc400c15 	stw	r17,48(sp)
   13308:	dc000b15 	stw	r16,44(sp)
   1330c:	df000b04 	addi	fp,sp,44
   13310:	e13ffc15 	stw	r4,-16(fp)
   13314:	e17ffd15 	stw	r5,-12(fp)
   13318:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   1331c:	d0a01604 	addi	r2,gp,-32680
   13320:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   13324:	e0bffc17 	ldw	r2,-16(fp)
   13328:	10800117 	ldw	r2,4(r2)
   1332c:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   13330:	e0bffd17 	ldw	r2,-12(fp)
   13334:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   13338:	e0bffe17 	ldw	r2,-8(fp)
   1333c:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   13340:	e13ff617 	ldw	r4,-40(fp)
   13344:	e13fff15 	stw	r4,-4(fp)
   13348:	e17ff717 	ldw	r5,-36(fp)
   1334c:	e1bff817 	ldw	r6,-32(fp)
   13350:	e0fff517 	ldw	r3,-44(fp)
   13354:	1821883a 	mov	r16,r3
   13358:	8007883a 	mov	r3,r16
   1335c:	e13fff17 	ldw	r4,-4(fp)
   13360:	003da07a 	break	1
   13364:	1821883a 	mov	r16,r3
   13368:	1023883a 	mov	r17,r2
   1336c:	e47ff915 	stw	r17,-28(fp)
   13370:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   13374:	e0bff917 	ldw	r2,-28(fp)
   13378:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   1337c:	e0bff517 	ldw	r2,-44(fp)
   13380:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   13384:	e0bffb17 	ldw	r2,-20(fp)
   13388:	10000326 	beq	r2,zero,13398 <alt_hostfs_read+0x9c>
   1338c:	e0bffb17 	ldw	r2,-20(fp)
   13390:	0085c83a 	sub	r2,zero,r2
   13394:	00000106 	br	1339c <alt_hostfs_read+0xa0>
   13398:	e0bffa17 	ldw	r2,-24(fp)
}
   1339c:	e037883a 	mov	sp,fp
   133a0:	df000217 	ldw	fp,8(sp)
   133a4:	dc400117 	ldw	r17,4(sp)
   133a8:	dc000017 	ldw	r16,0(sp)
   133ac:	dec00304 	addi	sp,sp,12
   133b0:	f800283a 	ret

000133b4 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   133b4:	defff204 	addi	sp,sp,-56
   133b8:	df000d15 	stw	fp,52(sp)
   133bc:	dc400c15 	stw	r17,48(sp)
   133c0:	dc000b15 	stw	r16,44(sp)
   133c4:	df000b04 	addi	fp,sp,44
   133c8:	e13ffc15 	stw	r4,-16(fp)
   133cc:	e17ffd15 	stw	r5,-12(fp)
   133d0:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   133d4:	d0a01304 	addi	r2,gp,-32692
   133d8:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   133dc:	e0bffc17 	ldw	r2,-16(fp)
   133e0:	10800117 	ldw	r2,4(r2)
   133e4:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   133e8:	e0bffd17 	ldw	r2,-12(fp)
   133ec:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   133f0:	e0bffe17 	ldw	r2,-8(fp)
   133f4:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   133f8:	e13ff617 	ldw	r4,-40(fp)
   133fc:	e13fff15 	stw	r4,-4(fp)
   13400:	e17ff717 	ldw	r5,-36(fp)
   13404:	e1bff817 	ldw	r6,-32(fp)
   13408:	e0fff517 	ldw	r3,-44(fp)
   1340c:	1821883a 	mov	r16,r3
   13410:	8007883a 	mov	r3,r16
   13414:	e13fff17 	ldw	r4,-4(fp)
   13418:	003da07a 	break	1
   1341c:	1821883a 	mov	r16,r3
   13420:	1023883a 	mov	r17,r2
   13424:	e47ff915 	stw	r17,-28(fp)
   13428:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   1342c:	e0bff917 	ldw	r2,-28(fp)
   13430:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   13434:	e0bff517 	ldw	r2,-44(fp)
   13438:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   1343c:	e0bffb17 	ldw	r2,-20(fp)
   13440:	10000326 	beq	r2,zero,13450 <alt_hostfs_write+0x9c>
   13444:	e0bffb17 	ldw	r2,-20(fp)
   13448:	0085c83a 	sub	r2,zero,r2
   1344c:	00000106 	br	13454 <alt_hostfs_write+0xa0>
   13450:	e0bffa17 	ldw	r2,-24(fp)
}
   13454:	e037883a 	mov	sp,fp
   13458:	df000217 	ldw	fp,8(sp)
   1345c:	dc400117 	ldw	r17,4(sp)
   13460:	dc000017 	ldw	r16,0(sp)
   13464:	dec00304 	addi	sp,sp,12
   13468:	f800283a 	ret

0001346c <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   1346c:	defff204 	addi	sp,sp,-56
   13470:	df000d15 	stw	fp,52(sp)
   13474:	dc400c15 	stw	r17,48(sp)
   13478:	dc000b15 	stw	r16,44(sp)
   1347c:	df000b04 	addi	fp,sp,44
   13480:	e13ffc15 	stw	r4,-16(fp)
   13484:	e17ffd15 	stw	r5,-12(fp)
   13488:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   1348c:	d0a01004 	addi	r2,gp,-32704
   13490:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   13494:	e0bffc17 	ldw	r2,-16(fp)
   13498:	10800117 	ldw	r2,4(r2)
   1349c:	e0bff615 	stw	r2,-40(fp)
  r5 = ptr;
   134a0:	e0bffd17 	ldw	r2,-12(fp)
   134a4:	e0bff715 	stw	r2,-36(fp)
  r6 = dir;
   134a8:	e0bffe17 	ldw	r2,-8(fp)
   134ac:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   134b0:	e13ff617 	ldw	r4,-40(fp)
   134b4:	e13fff15 	stw	r4,-4(fp)
   134b8:	e17ff717 	ldw	r5,-36(fp)
   134bc:	e1bff817 	ldw	r6,-32(fp)
   134c0:	e0fff517 	ldw	r3,-44(fp)
   134c4:	1821883a 	mov	r16,r3
   134c8:	8007883a 	mov	r3,r16
   134cc:	e13fff17 	ldw	r4,-4(fp)
   134d0:	003da07a 	break	1
   134d4:	1821883a 	mov	r16,r3
   134d8:	1023883a 	mov	r17,r2
   134dc:	e47ff915 	stw	r17,-28(fp)
   134e0:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   134e4:	e0bff917 	ldw	r2,-28(fp)
   134e8:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   134ec:	e0bff517 	ldw	r2,-44(fp)
   134f0:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   134f4:	e0bffb17 	ldw	r2,-20(fp)
   134f8:	10000326 	beq	r2,zero,13508 <alt_hostfs_seek+0x9c>
   134fc:	e0bffb17 	ldw	r2,-20(fp)
   13500:	0085c83a 	sub	r2,zero,r2
   13504:	00000106 	br	1350c <alt_hostfs_seek+0xa0>
   13508:	e0bffa17 	ldw	r2,-24(fp)
}
   1350c:	e037883a 	mov	sp,fp
   13510:	df000217 	ldw	fp,8(sp)
   13514:	dc400117 	ldw	r17,4(sp)
   13518:	dc000017 	ldw	r16,0(sp)
   1351c:	dec00304 	addi	sp,sp,12
   13520:	f800283a 	ret

00013524 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   13524:	deffe204 	addi	sp,sp,-120
   13528:	df001d15 	stw	fp,116(sp)
   1352c:	dc401c15 	stw	r17,112(sp)
   13530:	dc001b15 	stw	r16,108(sp)
   13534:	df001b04 	addi	fp,sp,108
   13538:	e13ffd15 	stw	r4,-12(fp)
   1353c:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
   13540:	d0a00d04 	addi	r2,gp,-32716
   13544:	e0bfe615 	stw	r2,-104(fp)
  r4 = (int)fd->priv;
   13548:	e0bffd17 	ldw	r2,-12(fp)
   1354c:	10800117 	ldw	r2,4(r2)
   13550:	e0bfe715 	stw	r2,-100(fp)
  r5 = (int)&hoststat;
   13554:	e0bfed04 	addi	r2,fp,-76
   13558:	e0bfe815 	stw	r2,-96(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
   1355c:	e13fe717 	ldw	r4,-100(fp)
   13560:	e13fff15 	stw	r4,-4(fp)
   13564:	e17fe817 	ldw	r5,-96(fp)
   13568:	e0ffe617 	ldw	r3,-104(fp)
   1356c:	1821883a 	mov	r16,r3
   13570:	8007883a 	mov	r3,r16
   13574:	e13fff17 	ldw	r4,-4(fp)
   13578:	003da07a 	break	1
   1357c:	1821883a 	mov	r16,r3
   13580:	1023883a 	mov	r17,r2
   13584:	e47fe915 	stw	r17,-92(fp)
   13588:	e43fe615 	stw	r16,-104(fp)

  rc = r2;
   1358c:	e0bfe917 	ldw	r2,-92(fp)
   13590:	e0bfea15 	stw	r2,-88(fp)
  error = r3;
   13594:	e0bfe617 	ldw	r2,-104(fp)
   13598:	e0bfeb15 	stw	r2,-84(fp)

  if (error == 0)
   1359c:	e0bfeb17 	ldw	r2,-84(fp)
   135a0:	1000621e 	bne	r2,zero,1372c <alt_hostfs_fstat+0x208>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   135a4:	e0bfed04 	addi	r2,fp,-76
   135a8:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   135ac:	e0bfe517 	ldw	r2,-108(fp)
   135b0:	10801004 	addi	r2,r2,64
   135b4:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   135b8:	00001606 	br	13614 <alt_hostfs_fstat+0xf0>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   135bc:	e0bfe517 	ldw	r2,-108(fp)
   135c0:	10800017 	ldw	r2,0(r2)
   135c4:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   135c8:	e0bfe517 	ldw	r2,-108(fp)
   135cc:	10800017 	ldw	r2,0(r2)
   135d0:	10803fec 	andhi	r2,r2,255
   135d4:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   135d8:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   135dc:	e0bfe517 	ldw	r2,-108(fp)
   135e0:	10800017 	ldw	r2,0(r2)
   135e4:	10bfc00c 	andi	r2,r2,65280
   135e8:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   135ec:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   135f0:	e0bfe517 	ldw	r2,-108(fp)
   135f4:	10800017 	ldw	r2,0(r2)
   135f8:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   135fc:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   13600:	e0bfe517 	ldw	r2,-108(fp)
   13604:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   13608:	e0bfe517 	ldw	r2,-108(fp)
   1360c:	10800104 	addi	r2,r2,4
   13610:	e0bfe515 	stw	r2,-108(fp)
   13614:	e0ffe517 	ldw	r3,-108(fp)
   13618:	e0bfec17 	ldw	r2,-80(fp)
   1361c:	18bfe736 	bltu	r3,r2,135bc <alt_hostfs_fstat+0x98>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   13620:	e0bffe17 	ldw	r2,-8(fp)
   13624:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   13628:	e0bfe517 	ldw	r2,-108(fp)
   1362c:	10800f04 	addi	r2,r2,60
   13630:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   13634:	00000506 	br	1364c <alt_hostfs_fstat+0x128>
      *ptr = 0;
   13638:	e0bfe517 	ldw	r2,-108(fp)
   1363c:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   13640:	e0bfe517 	ldw	r2,-108(fp)
   13644:	10800104 	addi	r2,r2,4
   13648:	e0bfe515 	stw	r2,-108(fp)
   1364c:	e0ffe517 	ldw	r3,-108(fp)
   13650:	e0bfec17 	ldw	r2,-80(fp)
   13654:	18bff836 	bltu	r3,r2,13638 <alt_hostfs_fstat+0x114>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   13658:	e0bfed17 	ldw	r2,-76(fp)
   1365c:	1007883a 	mov	r3,r2
   13660:	e0bffe17 	ldw	r2,-8(fp)
   13664:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   13668:	e0bfee17 	ldw	r2,-72(fp)
   1366c:	1007883a 	mov	r3,r2
   13670:	e0bffe17 	ldw	r2,-8(fp)
   13674:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   13678:	e0ffef17 	ldw	r3,-68(fp)
   1367c:	e0bffe17 	ldw	r2,-8(fp)
   13680:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   13684:	e0bff017 	ldw	r2,-64(fp)
   13688:	1007883a 	mov	r3,r2
   1368c:	e0bffe17 	ldw	r2,-8(fp)
   13690:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   13694:	e0bff117 	ldw	r2,-60(fp)
   13698:	1007883a 	mov	r3,r2
   1369c:	e0bffe17 	ldw	r2,-8(fp)
   136a0:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   136a4:	e0bff217 	ldw	r2,-56(fp)
   136a8:	1007883a 	mov	r3,r2
   136ac:	e0bffe17 	ldw	r2,-8(fp)
   136b0:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   136b4:	e0bff317 	ldw	r2,-52(fp)
   136b8:	1007883a 	mov	r3,r2
   136bc:	e0bffe17 	ldw	r2,-8(fp)
   136c0:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   136c4:	e0bff517 	ldw	r2,-44(fp)
   136c8:	1007883a 	mov	r3,r2
   136cc:	e0bffe17 	ldw	r2,-8(fp)
   136d0:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   136d4:	e0bffa17 	ldw	r2,-24(fp)
   136d8:	1007883a 	mov	r3,r2
   136dc:	e0bffe17 	ldw	r2,-8(fp)
   136e0:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   136e4:	e0bffb17 	ldw	r2,-20(fp)
   136e8:	1007883a 	mov	r3,r2
   136ec:	e0bffe17 	ldw	r2,-8(fp)
   136f0:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   136f4:	e0bffc17 	ldw	r2,-16(fp)
   136f8:	1007883a 	mov	r3,r2
   136fc:	e0bffe17 	ldw	r2,-8(fp)
   13700:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   13704:	e0bff717 	ldw	r2,-36(fp)
   13708:	1007883a 	mov	r3,r2
   1370c:	e0bffe17 	ldw	r2,-8(fp)
   13710:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   13714:	e0bff917 	ldw	r2,-28(fp)
   13718:	1007883a 	mov	r3,r2
   1371c:	e0bffe17 	ldw	r2,-8(fp)
   13720:	10c00c15 	stw	r3,48(r2)

    return rc;
   13724:	e0bfea17 	ldw	r2,-88(fp)
   13728:	00000206 	br	13734 <alt_hostfs_fstat+0x210>
  }
  else
    return -error;
   1372c:	e0bfeb17 	ldw	r2,-84(fp)
   13730:	0085c83a 	sub	r2,zero,r2
}
   13734:	e037883a 	mov	sp,fp
   13738:	df000217 	ldw	fp,8(sp)
   1373c:	dc400117 	ldw	r17,4(sp)
   13740:	dc000017 	ldw	r16,0(sp)
   13744:	dec00304 	addi	sp,sp,12
   13748:	f800283a 	ret

0001374c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1374c:	defff504 	addi	sp,sp,-44
   13750:	df000a15 	stw	fp,40(sp)
   13754:	df000a04 	addi	fp,sp,40
   13758:	e13ffc15 	stw	r4,-16(fp)
   1375c:	e17ffd15 	stw	r5,-12(fp)
   13760:	e1bffe15 	stw	r6,-8(fp)
   13764:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   13768:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1376c:	008000b4 	movhi	r2,2
   13770:	10a1a504 	addi	r2,r2,-31084
   13774:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   13778:	10003f26 	beq	r2,zero,13878 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1377c:	e0bffc17 	ldw	r2,-16(fp)
   13780:	10003b26 	beq	r2,zero,13870 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   13784:	e0bffc17 	ldw	r2,-16(fp)
   13788:	e0fffe17 	ldw	r3,-8(fp)
   1378c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   13790:	e0bffc17 	ldw	r2,-16(fp)
   13794:	e0ffff17 	ldw	r3,-4(fp)
   13798:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1379c:	0005303a 	rdctl	r2,status
   137a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   137a4:	e0fff817 	ldw	r3,-32(fp)
   137a8:	00bfff84 	movi	r2,-2
   137ac:	1884703a 	and	r2,r3,r2
   137b0:	1001703a 	wrctl	status,r2
  
  return context;
   137b4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   137b8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   137bc:	008000b4 	movhi	r2,2
   137c0:	10a1a604 	addi	r2,r2,-31080
   137c4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   137c8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   137cc:	e0fffd17 	ldw	r3,-12(fp)
   137d0:	e0bff617 	ldw	r2,-40(fp)
   137d4:	1885883a 	add	r2,r3,r2
   137d8:	10c00044 	addi	r3,r2,1
   137dc:	e0bffc17 	ldw	r2,-16(fp)
   137e0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   137e4:	e0bffc17 	ldw	r2,-16(fp)
   137e8:	10c00217 	ldw	r3,8(r2)
   137ec:	e0bff617 	ldw	r2,-40(fp)
   137f0:	1880042e 	bgeu	r3,r2,13804 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   137f4:	e0bffc17 	ldw	r2,-16(fp)
   137f8:	00c00044 	movi	r3,1
   137fc:	10c00405 	stb	r3,16(r2)
   13800:	00000206 	br	1380c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   13804:	e0bffc17 	ldw	r2,-16(fp)
   13808:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1380c:	e0bffc17 	ldw	r2,-16(fp)
   13810:	00c00074 	movhi	r3,1
   13814:	18dad404 	addi	r3,r3,27472
   13818:	e0fff915 	stw	r3,-28(fp)
   1381c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13820:	e0bffa17 	ldw	r2,-24(fp)
   13824:	e0fff917 	ldw	r3,-28(fp)
   13828:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1382c:	e0bff917 	ldw	r2,-28(fp)
   13830:	10c00017 	ldw	r3,0(r2)
   13834:	e0bffa17 	ldw	r2,-24(fp)
   13838:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1383c:	e0bff917 	ldw	r2,-28(fp)
   13840:	10800017 	ldw	r2,0(r2)
   13844:	e0fffa17 	ldw	r3,-24(fp)
   13848:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1384c:	e0bff917 	ldw	r2,-28(fp)
   13850:	e0fffa17 	ldw	r3,-24(fp)
   13854:	10c00015 	stw	r3,0(r2)
   13858:	e0bff717 	ldw	r2,-36(fp)
   1385c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13860:	e0bffb17 	ldw	r2,-20(fp)
   13864:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   13868:	0005883a 	mov	r2,zero
   1386c:	00000306 	br	1387c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   13870:	00bffa84 	movi	r2,-22
   13874:	00000106 	br	1387c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   13878:	00bfde84 	movi	r2,-134
  }
}
   1387c:	e037883a 	mov	sp,fp
   13880:	df000017 	ldw	fp,0(sp)
   13884:	dec00104 	addi	sp,sp,4
   13888:	f800283a 	ret

0001388c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   1388c:	defffa04 	addi	sp,sp,-24
   13890:	dfc00515 	stw	ra,20(sp)
   13894:	df000415 	stw	fp,16(sp)
   13898:	df000404 	addi	fp,sp,16
   1389c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   138a0:	008000c4 	movi	r2,3
   138a4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   138a8:	e13ffd17 	ldw	r4,-12(fp)
   138ac:	014003f4 	movhi	r5,15
   138b0:	29509004 	addi	r5,r5,16960
   138b4:	00020000 	call	2000 <__mulsi3>
   138b8:	01017db4 	movhi	r4,1526
   138bc:	21384004 	addi	r4,r4,-7936
   138c0:	100b883a 	mov	r5,r2
   138c4:	0010b240 	call	10b24 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   138c8:	01200034 	movhi	r4,32768
   138cc:	213fffc4 	addi	r4,r4,-1
   138d0:	100b883a 	mov	r5,r2
   138d4:	0010b240 	call	10b24 <__udivsi3>
   138d8:	e13fff17 	ldw	r4,-4(fp)
   138dc:	100b883a 	mov	r5,r2
   138e0:	0010b240 	call	10b24 <__udivsi3>
   138e4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   138e8:	e0bffe17 	ldw	r2,-8(fp)
   138ec:	10002926 	beq	r2,zero,13994 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   138f0:	e03ffc15 	stw	zero,-16(fp)
   138f4:	00001606 	br	13950 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   138f8:	00a00034 	movhi	r2,32768
   138fc:	10bfffc4 	addi	r2,r2,-1
   13900:	10bfffc4 	addi	r2,r2,-1
   13904:	103ffe1e 	bne	r2,zero,13900 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   13908:	e13ffd17 	ldw	r4,-12(fp)
   1390c:	014003f4 	movhi	r5,15
   13910:	29509004 	addi	r5,r5,16960
   13914:	00020000 	call	2000 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   13918:	01017db4 	movhi	r4,1526
   1391c:	21384004 	addi	r4,r4,-7936
   13920:	100b883a 	mov	r5,r2
   13924:	0010b240 	call	10b24 <__udivsi3>
   13928:	01200034 	movhi	r4,32768
   1392c:	213fffc4 	addi	r4,r4,-1
   13930:	100b883a 	mov	r5,r2
   13934:	0010b240 	call	10b24 <__udivsi3>
   13938:	e0ffff17 	ldw	r3,-4(fp)
   1393c:	1885c83a 	sub	r2,r3,r2
   13940:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   13944:	e0bffc17 	ldw	r2,-16(fp)
   13948:	10800044 	addi	r2,r2,1
   1394c:	e0bffc15 	stw	r2,-16(fp)
   13950:	e0fffc17 	ldw	r3,-16(fp)
   13954:	e0bffe17 	ldw	r2,-8(fp)
   13958:	18bfe716 	blt	r3,r2,138f8 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1395c:	e13ffd17 	ldw	r4,-12(fp)
   13960:	014003f4 	movhi	r5,15
   13964:	29509004 	addi	r5,r5,16960
   13968:	00020000 	call	2000 <__mulsi3>
   1396c:	01017db4 	movhi	r4,1526
   13970:	21384004 	addi	r4,r4,-7936
   13974:	100b883a 	mov	r5,r2
   13978:	0010b240 	call	10b24 <__udivsi3>
   1397c:	1009883a 	mov	r4,r2
   13980:	e17fff17 	ldw	r5,-4(fp)
   13984:	00020000 	call	2000 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   13988:	10bfffc4 	addi	r2,r2,-1
   1398c:	103ffe1e 	bne	r2,zero,13988 <alt_busy_sleep+0xfc>
   13990:	00000d06 	br	139c8 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   13994:	e13ffd17 	ldw	r4,-12(fp)
   13998:	014003f4 	movhi	r5,15
   1399c:	29509004 	addi	r5,r5,16960
   139a0:	00020000 	call	2000 <__mulsi3>
   139a4:	01017db4 	movhi	r4,1526
   139a8:	21384004 	addi	r4,r4,-7936
   139ac:	100b883a 	mov	r5,r2
   139b0:	0010b240 	call	10b24 <__udivsi3>
   139b4:	1009883a 	mov	r4,r2
   139b8:	e17fff17 	ldw	r5,-4(fp)
   139bc:	00020000 	call	2000 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   139c0:	10bfffc4 	addi	r2,r2,-1
   139c4:	00bffe16 	blt	zero,r2,139c0 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   139c8:	0005883a 	mov	r2,zero
}
   139cc:	e037883a 	mov	sp,fp
   139d0:	dfc00117 	ldw	ra,4(sp)
   139d4:	df000017 	ldw	fp,0(sp)
   139d8:	dec00204 	addi	sp,sp,8
   139dc:	f800283a 	ret

000139e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   139e0:	deffff04 	addi	sp,sp,-4
   139e4:	df000015 	stw	fp,0(sp)
   139e8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   139ec:	e037883a 	mov	sp,fp
   139f0:	df000017 	ldw	fp,0(sp)
   139f4:	dec00104 	addi	sp,sp,4
   139f8:	f800283a 	ret

000139fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   139fc:	defffe04 	addi	sp,sp,-8
   13a00:	dfc00115 	stw	ra,4(sp)
   13a04:	df000015 	stw	fp,0(sp)
   13a08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13a0c:	00800074 	movhi	r2,1
   13a10:	109abf04 	addi	r2,r2,27388
   13a14:	10800017 	ldw	r2,0(r2)
   13a18:	10000526 	beq	r2,zero,13a30 <alt_get_errno+0x34>
   13a1c:	00800074 	movhi	r2,1
   13a20:	109abf04 	addi	r2,r2,27388
   13a24:	10800017 	ldw	r2,0(r2)
   13a28:	103ee83a 	callr	r2
   13a2c:	00000206 	br	13a38 <alt_get_errno+0x3c>
   13a30:	008000b4 	movhi	r2,2
   13a34:	10a19804 	addi	r2,r2,-31136
}
   13a38:	e037883a 	mov	sp,fp
   13a3c:	dfc00117 	ldw	ra,4(sp)
   13a40:	df000017 	ldw	fp,0(sp)
   13a44:	dec00204 	addi	sp,sp,8
   13a48:	f800283a 	ret

00013a4c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   13a4c:	defffa04 	addi	sp,sp,-24
   13a50:	dfc00515 	stw	ra,20(sp)
   13a54:	df000415 	stw	fp,16(sp)
   13a58:	df000404 	addi	fp,sp,16
   13a5c:	e13ffe15 	stw	r4,-8(fp)
   13a60:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   13a64:	e0bffe17 	ldw	r2,-8(fp)
   13a68:	10000326 	beq	r2,zero,13a78 <alt_dev_llist_insert+0x2c>
   13a6c:	e0bffe17 	ldw	r2,-8(fp)
   13a70:	10800217 	ldw	r2,8(r2)
   13a74:	1000051e 	bne	r2,zero,13a8c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   13a78:	00139fc0 	call	139fc <alt_get_errno>
   13a7c:	00c00584 	movi	r3,22
   13a80:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   13a84:	00bffa84 	movi	r2,-22
   13a88:	00001306 	br	13ad8 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   13a8c:	e0bffe17 	ldw	r2,-8(fp)
   13a90:	e0ffff17 	ldw	r3,-4(fp)
   13a94:	e0fffc15 	stw	r3,-16(fp)
   13a98:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13a9c:	e0bffd17 	ldw	r2,-12(fp)
   13aa0:	e0fffc17 	ldw	r3,-16(fp)
   13aa4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   13aa8:	e0bffc17 	ldw	r2,-16(fp)
   13aac:	10c00017 	ldw	r3,0(r2)
   13ab0:	e0bffd17 	ldw	r2,-12(fp)
   13ab4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   13ab8:	e0bffc17 	ldw	r2,-16(fp)
   13abc:	10800017 	ldw	r2,0(r2)
   13ac0:	e0fffd17 	ldw	r3,-12(fp)
   13ac4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   13ac8:	e0bffc17 	ldw	r2,-16(fp)
   13acc:	e0fffd17 	ldw	r3,-12(fp)
   13ad0:	10c00015 	stw	r3,0(r2)

  return 0;  
   13ad4:	0005883a 	mov	r2,zero
}
   13ad8:	e037883a 	mov	sp,fp
   13adc:	dfc00117 	ldw	ra,4(sp)
   13ae0:	df000017 	ldw	fp,0(sp)
   13ae4:	dec00204 	addi	sp,sp,8
   13ae8:	f800283a 	ret

00013aec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   13aec:	defffd04 	addi	sp,sp,-12
   13af0:	dfc00215 	stw	ra,8(sp)
   13af4:	df000115 	stw	fp,4(sp)
   13af8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   13afc:	00800074 	movhi	r2,1
   13b00:	10924204 	addi	r2,r2,18696
   13b04:	e0bfff15 	stw	r2,-4(fp)
   13b08:	00000606 	br	13b24 <_do_ctors+0x38>
        (*ctor) (); 
   13b0c:	e0bfff17 	ldw	r2,-4(fp)
   13b10:	10800017 	ldw	r2,0(r2)
   13b14:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   13b18:	e0bfff17 	ldw	r2,-4(fp)
   13b1c:	10bfff04 	addi	r2,r2,-4
   13b20:	e0bfff15 	stw	r2,-4(fp)
   13b24:	e0ffff17 	ldw	r3,-4(fp)
   13b28:	00800074 	movhi	r2,1
   13b2c:	10924304 	addi	r2,r2,18700
   13b30:	18bff62e 	bgeu	r3,r2,13b0c <_do_ctors+0x20>
        (*ctor) (); 
}
   13b34:	e037883a 	mov	sp,fp
   13b38:	dfc00117 	ldw	ra,4(sp)
   13b3c:	df000017 	ldw	fp,0(sp)
   13b40:	dec00204 	addi	sp,sp,8
   13b44:	f800283a 	ret

00013b48 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   13b48:	defffd04 	addi	sp,sp,-12
   13b4c:	dfc00215 	stw	ra,8(sp)
   13b50:	df000115 	stw	fp,4(sp)
   13b54:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13b58:	00800074 	movhi	r2,1
   13b5c:	10924204 	addi	r2,r2,18696
   13b60:	e0bfff15 	stw	r2,-4(fp)
   13b64:	00000606 	br	13b80 <_do_dtors+0x38>
        (*dtor) (); 
   13b68:	e0bfff17 	ldw	r2,-4(fp)
   13b6c:	10800017 	ldw	r2,0(r2)
   13b70:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13b74:	e0bfff17 	ldw	r2,-4(fp)
   13b78:	10bfff04 	addi	r2,r2,-4
   13b7c:	e0bfff15 	stw	r2,-4(fp)
   13b80:	e0ffff17 	ldw	r3,-4(fp)
   13b84:	00800074 	movhi	r2,1
   13b88:	10924304 	addi	r2,r2,18700
   13b8c:	18bff62e 	bgeu	r3,r2,13b68 <_do_dtors+0x20>
        (*dtor) (); 
}
   13b90:	e037883a 	mov	sp,fp
   13b94:	dfc00117 	ldw	ra,4(sp)
   13b98:	df000017 	ldw	fp,0(sp)
   13b9c:	dec00204 	addi	sp,sp,8
   13ba0:	f800283a 	ret

00013ba4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   13ba4:	defffa04 	addi	sp,sp,-24
   13ba8:	dfc00515 	stw	ra,20(sp)
   13bac:	df000415 	stw	fp,16(sp)
   13bb0:	df000404 	addi	fp,sp,16
   13bb4:	e13ffe15 	stw	r4,-8(fp)
   13bb8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   13bbc:	e0bfff17 	ldw	r2,-4(fp)
   13bc0:	10800017 	ldw	r2,0(r2)
   13bc4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   13bc8:	e13ffe17 	ldw	r4,-8(fp)
   13bcc:	00045940 	call	4594 <strlen>
   13bd0:	10800044 	addi	r2,r2,1
   13bd4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13bd8:	00000d06 	br	13c10 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   13bdc:	e0bffc17 	ldw	r2,-16(fp)
   13be0:	10c00217 	ldw	r3,8(r2)
   13be4:	e0bffd17 	ldw	r2,-12(fp)
   13be8:	1809883a 	mov	r4,r3
   13bec:	e17ffe17 	ldw	r5,-8(fp)
   13bf0:	100d883a 	mov	r6,r2
   13bf4:	00145840 	call	14584 <memcmp>
   13bf8:	1000021e 	bne	r2,zero,13c04 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   13bfc:	e0bffc17 	ldw	r2,-16(fp)
   13c00:	00000706 	br	13c20 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   13c04:	e0bffc17 	ldw	r2,-16(fp)
   13c08:	10800017 	ldw	r2,0(r2)
   13c0c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13c10:	e0fffc17 	ldw	r3,-16(fp)
   13c14:	e0bfff17 	ldw	r2,-4(fp)
   13c18:	18bff01e 	bne	r3,r2,13bdc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   13c1c:	0005883a 	mov	r2,zero
}
   13c20:	e037883a 	mov	sp,fp
   13c24:	dfc00117 	ldw	ra,4(sp)
   13c28:	df000017 	ldw	fp,0(sp)
   13c2c:	dec00204 	addi	sp,sp,8
   13c30:	f800283a 	ret

00013c34 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   13c34:	defffb04 	addi	sp,sp,-20
   13c38:	dfc00415 	stw	ra,16(sp)
   13c3c:	df000315 	stw	fp,12(sp)
   13c40:	df000304 	addi	fp,sp,12
   13c44:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   13c48:	00800074 	movhi	r2,1
   13c4c:	109aba04 	addi	r2,r2,27368
   13c50:	10800017 	ldw	r2,0(r2)
   13c54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   13c58:	00003106 	br	13d20 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   13c5c:	e0bffd17 	ldw	r2,-12(fp)
   13c60:	10800217 	ldw	r2,8(r2)
   13c64:	1009883a 	mov	r4,r2
   13c68:	00045940 	call	4594 <strlen>
   13c6c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   13c70:	e0bffd17 	ldw	r2,-12(fp)
   13c74:	10c00217 	ldw	r3,8(r2)
   13c78:	e0bffe17 	ldw	r2,-8(fp)
   13c7c:	10bfffc4 	addi	r2,r2,-1
   13c80:	1885883a 	add	r2,r3,r2
   13c84:	10800003 	ldbu	r2,0(r2)
   13c88:	10803fcc 	andi	r2,r2,255
   13c8c:	1080201c 	xori	r2,r2,128
   13c90:	10bfe004 	addi	r2,r2,-128
   13c94:	10800bd8 	cmpnei	r2,r2,47
   13c98:	1000031e 	bne	r2,zero,13ca8 <alt_find_file+0x74>
    {
      len -= 1;
   13c9c:	e0bffe17 	ldw	r2,-8(fp)
   13ca0:	10bfffc4 	addi	r2,r2,-1
   13ca4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   13ca8:	e0bffe17 	ldw	r2,-8(fp)
   13cac:	e0ffff17 	ldw	r3,-4(fp)
   13cb0:	1885883a 	add	r2,r3,r2
   13cb4:	10800003 	ldbu	r2,0(r2)
   13cb8:	10803fcc 	andi	r2,r2,255
   13cbc:	1080201c 	xori	r2,r2,128
   13cc0:	10bfe004 	addi	r2,r2,-128
   13cc4:	10800be0 	cmpeqi	r2,r2,47
   13cc8:	1000081e 	bne	r2,zero,13cec <alt_find_file+0xb8>
   13ccc:	e0bffe17 	ldw	r2,-8(fp)
   13cd0:	e0ffff17 	ldw	r3,-4(fp)
   13cd4:	1885883a 	add	r2,r3,r2
   13cd8:	10800003 	ldbu	r2,0(r2)
   13cdc:	10803fcc 	andi	r2,r2,255
   13ce0:	1080201c 	xori	r2,r2,128
   13ce4:	10bfe004 	addi	r2,r2,-128
   13ce8:	10000a1e 	bne	r2,zero,13d14 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   13cec:	e0bffd17 	ldw	r2,-12(fp)
   13cf0:	10c00217 	ldw	r3,8(r2)
   13cf4:	e0bffe17 	ldw	r2,-8(fp)
   13cf8:	1809883a 	mov	r4,r3
   13cfc:	e17fff17 	ldw	r5,-4(fp)
   13d00:	100d883a 	mov	r6,r2
   13d04:	00145840 	call	14584 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   13d08:	1000021e 	bne	r2,zero,13d14 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   13d0c:	e0bffd17 	ldw	r2,-12(fp)
   13d10:	00000806 	br	13d34 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   13d14:	e0bffd17 	ldw	r2,-12(fp)
   13d18:	10800017 	ldw	r2,0(r2)
   13d1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   13d20:	e0fffd17 	ldw	r3,-12(fp)
   13d24:	00800074 	movhi	r2,1
   13d28:	109aba04 	addi	r2,r2,27368
   13d2c:	18bfcb1e 	bne	r3,r2,13c5c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   13d30:	0005883a 	mov	r2,zero
}
   13d34:	e037883a 	mov	sp,fp
   13d38:	dfc00117 	ldw	ra,4(sp)
   13d3c:	df000017 	ldw	fp,0(sp)
   13d40:	dec00204 	addi	sp,sp,8
   13d44:	f800283a 	ret

00013d48 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   13d48:	defffc04 	addi	sp,sp,-16
   13d4c:	df000315 	stw	fp,12(sp)
   13d50:	df000304 	addi	fp,sp,12
   13d54:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   13d58:	e0bfff17 	ldw	r2,-4(fp)
   13d5c:	10800217 	ldw	r2,8(r2)
   13d60:	1000021e 	bne	r2,zero,13d6c <alt_fs_reg+0x24>
  {
    return -ENODEV;
   13d64:	00bffb44 	movi	r2,-19
   13d68:	00001406 	br	13dbc <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   13d6c:	e0bfff17 	ldw	r2,-4(fp)
   13d70:	00c00074 	movhi	r3,1
   13d74:	18daba04 	addi	r3,r3,27368
   13d78:	e0fffd15 	stw	r3,-12(fp)
   13d7c:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13d80:	e0bffe17 	ldw	r2,-8(fp)
   13d84:	e0fffd17 	ldw	r3,-12(fp)
   13d88:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   13d8c:	e0bffd17 	ldw	r2,-12(fp)
   13d90:	10c00017 	ldw	r3,0(r2)
   13d94:	e0bffe17 	ldw	r2,-8(fp)
   13d98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   13d9c:	e0bffd17 	ldw	r2,-12(fp)
   13da0:	10800017 	ldw	r2,0(r2)
   13da4:	e0fffe17 	ldw	r3,-8(fp)
   13da8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   13dac:	e0bffd17 	ldw	r2,-12(fp)
   13db0:	e0fffe17 	ldw	r3,-8(fp)
   13db4:	10c00015 	stw	r3,0(r2)

  return 0;
   13db8:	0005883a 	mov	r2,zero
} 
   13dbc:	e037883a 	mov	sp,fp
   13dc0:	df000017 	ldw	fp,0(sp)
   13dc4:	dec00104 	addi	sp,sp,4
   13dc8:	f800283a 	ret

00013dcc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   13dcc:	defffa04 	addi	sp,sp,-24
   13dd0:	dfc00515 	stw	ra,20(sp)
   13dd4:	df000415 	stw	fp,16(sp)
   13dd8:	dc000315 	stw	r16,12(sp)
   13ddc:	df000304 	addi	fp,sp,12
   13de0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   13de4:	00bffa04 	movi	r2,-24
   13de8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13dec:	e03ffd15 	stw	zero,-12(fp)
   13df0:	00002106 	br	13e78 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   13df4:	04000074 	movhi	r16,1
   13df8:	84163204 	addi	r16,r16,22728
   13dfc:	e0bffd17 	ldw	r2,-12(fp)
   13e00:	1009883a 	mov	r4,r2
   13e04:	01400304 	movi	r5,12
   13e08:	00020000 	call	2000 <__mulsi3>
   13e0c:	8085883a 	add	r2,r16,r2
   13e10:	10800017 	ldw	r2,0(r2)
   13e14:	1000151e 	bne	r2,zero,13e6c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   13e18:	04000074 	movhi	r16,1
   13e1c:	84163204 	addi	r16,r16,22728
   13e20:	e0bffd17 	ldw	r2,-12(fp)
   13e24:	1009883a 	mov	r4,r2
   13e28:	01400304 	movi	r5,12
   13e2c:	00020000 	call	2000 <__mulsi3>
   13e30:	8085883a 	add	r2,r16,r2
   13e34:	e0ffff17 	ldw	r3,-4(fp)
   13e38:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   13e3c:	00800074 	movhi	r2,1
   13e40:	109abe04 	addi	r2,r2,27384
   13e44:	10c00017 	ldw	r3,0(r2)
   13e48:	e0bffd17 	ldw	r2,-12(fp)
   13e4c:	1880040e 	bge	r3,r2,13e60 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   13e50:	00800074 	movhi	r2,1
   13e54:	109abe04 	addi	r2,r2,27384
   13e58:	e0fffd17 	ldw	r3,-12(fp)
   13e5c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   13e60:	e0bffd17 	ldw	r2,-12(fp)
   13e64:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   13e68:	00000606 	br	13e84 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13e6c:	e0bffd17 	ldw	r2,-12(fp)
   13e70:	10800044 	addi	r2,r2,1
   13e74:	e0bffd15 	stw	r2,-12(fp)
   13e78:	e0bffd17 	ldw	r2,-12(fp)
   13e7c:	10800810 	cmplti	r2,r2,32
   13e80:	103fdc1e 	bne	r2,zero,13df4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   13e84:	e0bffe17 	ldw	r2,-8(fp)
}
   13e88:	e037883a 	mov	sp,fp
   13e8c:	dfc00217 	ldw	ra,8(sp)
   13e90:	df000117 	ldw	fp,4(sp)
   13e94:	dc000017 	ldw	r16,0(sp)
   13e98:	dec00304 	addi	sp,sp,12
   13e9c:	f800283a 	ret

00013ea0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   13ea0:	defffe04 	addi	sp,sp,-8
   13ea4:	dfc00115 	stw	ra,4(sp)
   13ea8:	df000015 	stw	fp,0(sp)
   13eac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   13eb0:	0009883a 	mov	r4,zero
   13eb4:	01440004 	movi	r5,4096
   13eb8:	00144ac0 	call	144ac <alt_icache_flush>
#endif
}
   13ebc:	e037883a 	mov	sp,fp
   13ec0:	dfc00117 	ldw	ra,4(sp)
   13ec4:	df000017 	ldw	fp,0(sp)
   13ec8:	dec00204 	addi	sp,sp,8
   13ecc:	f800283a 	ret

00013ed0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13ed0:	defff904 	addi	sp,sp,-28
   13ed4:	dfc00615 	stw	ra,24(sp)
   13ed8:	df000515 	stw	fp,20(sp)
   13edc:	df000504 	addi	fp,sp,20
   13ee0:	e13ffc15 	stw	r4,-16(fp)
   13ee4:	e17ffd15 	stw	r5,-12(fp)
   13ee8:	e1bffe15 	stw	r6,-8(fp)
   13eec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   13ef0:	e0800217 	ldw	r2,8(fp)
   13ef4:	d8800015 	stw	r2,0(sp)
   13ef8:	e13ffc17 	ldw	r4,-16(fp)
   13efc:	e17ffd17 	ldw	r5,-12(fp)
   13f00:	e1bffe17 	ldw	r6,-8(fp)
   13f04:	e1ffff17 	ldw	r7,-4(fp)
   13f08:	00140a80 	call	140a8 <alt_iic_isr_register>
}  
   13f0c:	e037883a 	mov	sp,fp
   13f10:	dfc00117 	ldw	ra,4(sp)
   13f14:	df000017 	ldw	fp,0(sp)
   13f18:	dec00204 	addi	sp,sp,8
   13f1c:	f800283a 	ret

00013f20 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   13f20:	defff904 	addi	sp,sp,-28
   13f24:	df000615 	stw	fp,24(sp)
   13f28:	df000604 	addi	fp,sp,24
   13f2c:	e13ffe15 	stw	r4,-8(fp)
   13f30:	e17fff15 	stw	r5,-4(fp)
   13f34:	e0bfff17 	ldw	r2,-4(fp)
   13f38:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f3c:	0005303a 	rdctl	r2,status
   13f40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f44:	e0fffb17 	ldw	r3,-20(fp)
   13f48:	00bfff84 	movi	r2,-2
   13f4c:	1884703a 	and	r2,r3,r2
   13f50:	1001703a 	wrctl	status,r2
  
  return context;
   13f54:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13f58:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   13f5c:	e0bffa17 	ldw	r2,-24(fp)
   13f60:	00c00044 	movi	r3,1
   13f64:	1884983a 	sll	r2,r3,r2
   13f68:	1007883a 	mov	r3,r2
   13f6c:	008000b4 	movhi	r2,2
   13f70:	10a1a404 	addi	r2,r2,-31088
   13f74:	10800017 	ldw	r2,0(r2)
   13f78:	1886b03a 	or	r3,r3,r2
   13f7c:	008000b4 	movhi	r2,2
   13f80:	10a1a404 	addi	r2,r2,-31088
   13f84:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13f88:	008000b4 	movhi	r2,2
   13f8c:	10a1a404 	addi	r2,r2,-31088
   13f90:	10800017 	ldw	r2,0(r2)
   13f94:	100170fa 	wrctl	ienable,r2
   13f98:	e0bffc17 	ldw	r2,-16(fp)
   13f9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13fa0:	e0bffd17 	ldw	r2,-12(fp)
   13fa4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13fa8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   13fac:	e037883a 	mov	sp,fp
   13fb0:	df000017 	ldw	fp,0(sp)
   13fb4:	dec00104 	addi	sp,sp,4
   13fb8:	f800283a 	ret

00013fbc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   13fbc:	defff904 	addi	sp,sp,-28
   13fc0:	df000615 	stw	fp,24(sp)
   13fc4:	df000604 	addi	fp,sp,24
   13fc8:	e13ffe15 	stw	r4,-8(fp)
   13fcc:	e17fff15 	stw	r5,-4(fp)
   13fd0:	e0bfff17 	ldw	r2,-4(fp)
   13fd4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13fd8:	0005303a 	rdctl	r2,status
   13fdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13fe0:	e0fffb17 	ldw	r3,-20(fp)
   13fe4:	00bfff84 	movi	r2,-2
   13fe8:	1884703a 	and	r2,r3,r2
   13fec:	1001703a 	wrctl	status,r2
  
  return context;
   13ff0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13ff4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   13ff8:	e0bffa17 	ldw	r2,-24(fp)
   13ffc:	00c00044 	movi	r3,1
   14000:	1884983a 	sll	r2,r3,r2
   14004:	0084303a 	nor	r2,zero,r2
   14008:	1007883a 	mov	r3,r2
   1400c:	008000b4 	movhi	r2,2
   14010:	10a1a404 	addi	r2,r2,-31088
   14014:	10800017 	ldw	r2,0(r2)
   14018:	1886703a 	and	r3,r3,r2
   1401c:	008000b4 	movhi	r2,2
   14020:	10a1a404 	addi	r2,r2,-31088
   14024:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14028:	008000b4 	movhi	r2,2
   1402c:	10a1a404 	addi	r2,r2,-31088
   14030:	10800017 	ldw	r2,0(r2)
   14034:	100170fa 	wrctl	ienable,r2
   14038:	e0bffc17 	ldw	r2,-16(fp)
   1403c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14040:	e0bffd17 	ldw	r2,-12(fp)
   14044:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14048:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   1404c:	e037883a 	mov	sp,fp
   14050:	df000017 	ldw	fp,0(sp)
   14054:	dec00104 	addi	sp,sp,4
   14058:	f800283a 	ret

0001405c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1405c:	defffc04 	addi	sp,sp,-16
   14060:	df000315 	stw	fp,12(sp)
   14064:	df000304 	addi	fp,sp,12
   14068:	e13ffe15 	stw	r4,-8(fp)
   1406c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14070:	000530fa 	rdctl	r2,ienable
   14074:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14078:	e0bfff17 	ldw	r2,-4(fp)
   1407c:	00c00044 	movi	r3,1
   14080:	1884983a 	sll	r2,r3,r2
   14084:	1007883a 	mov	r3,r2
   14088:	e0bffd17 	ldw	r2,-12(fp)
   1408c:	1884703a 	and	r2,r3,r2
   14090:	1004c03a 	cmpne	r2,r2,zero
   14094:	10803fcc 	andi	r2,r2,255
}
   14098:	e037883a 	mov	sp,fp
   1409c:	df000017 	ldw	fp,0(sp)
   140a0:	dec00104 	addi	sp,sp,4
   140a4:	f800283a 	ret

000140a8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   140a8:	defff504 	addi	sp,sp,-44
   140ac:	dfc00a15 	stw	ra,40(sp)
   140b0:	df000915 	stw	fp,36(sp)
   140b4:	df000904 	addi	fp,sp,36
   140b8:	e13ffc15 	stw	r4,-16(fp)
   140bc:	e17ffd15 	stw	r5,-12(fp)
   140c0:	e1bffe15 	stw	r6,-8(fp)
   140c4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   140c8:	00bffa84 	movi	r2,-22
   140cc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   140d0:	e0bffd17 	ldw	r2,-12(fp)
   140d4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   140d8:	e0bff817 	ldw	r2,-32(fp)
   140dc:	10800808 	cmpgei	r2,r2,32
   140e0:	1000271e 	bne	r2,zero,14180 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   140e4:	0005303a 	rdctl	r2,status
   140e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   140ec:	e0fffa17 	ldw	r3,-24(fp)
   140f0:	00bfff84 	movi	r2,-2
   140f4:	1884703a 	and	r2,r3,r2
   140f8:	1001703a 	wrctl	status,r2
  
  return context;
   140fc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14100:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   14104:	00c000b4 	movhi	r3,2
   14108:	18e33104 	addi	r3,r3,-29500
   1410c:	e0bff817 	ldw	r2,-32(fp)
   14110:	100490fa 	slli	r2,r2,3
   14114:	1885883a 	add	r2,r3,r2
   14118:	e0fffe17 	ldw	r3,-8(fp)
   1411c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   14120:	00c000b4 	movhi	r3,2
   14124:	18e33104 	addi	r3,r3,-29500
   14128:	e0bff817 	ldw	r2,-32(fp)
   1412c:	100490fa 	slli	r2,r2,3
   14130:	1885883a 	add	r2,r3,r2
   14134:	10800104 	addi	r2,r2,4
   14138:	e0ffff17 	ldw	r3,-4(fp)
   1413c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14140:	e0bffe17 	ldw	r2,-8(fp)
   14144:	10000526 	beq	r2,zero,1415c <alt_iic_isr_register+0xb4>
   14148:	e0bff817 	ldw	r2,-32(fp)
   1414c:	e13ffc17 	ldw	r4,-16(fp)
   14150:	100b883a 	mov	r5,r2
   14154:	0013f200 	call	13f20 <alt_ic_irq_enable>
   14158:	00000406 	br	1416c <alt_iic_isr_register+0xc4>
   1415c:	e0bff817 	ldw	r2,-32(fp)
   14160:	e13ffc17 	ldw	r4,-16(fp)
   14164:	100b883a 	mov	r5,r2
   14168:	0013fbc0 	call	13fbc <alt_ic_irq_disable>
   1416c:	e0bff715 	stw	r2,-36(fp)
   14170:	e0bff917 	ldw	r2,-28(fp)
   14174:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14178:	e0bffb17 	ldw	r2,-20(fp)
   1417c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   14180:	e0bff717 	ldw	r2,-36(fp)
}
   14184:	e037883a 	mov	sp,fp
   14188:	dfc00117 	ldw	ra,4(sp)
   1418c:	df000017 	ldw	fp,0(sp)
   14190:	dec00204 	addi	sp,sp,8
   14194:	f800283a 	ret

00014198 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14198:	defff804 	addi	sp,sp,-32
   1419c:	dfc00715 	stw	ra,28(sp)
   141a0:	df000615 	stw	fp,24(sp)
   141a4:	dc000515 	stw	r16,20(sp)
   141a8:	df000504 	addi	fp,sp,20
   141ac:	e13ffc15 	stw	r4,-16(fp)
   141b0:	e17ffd15 	stw	r5,-12(fp)
   141b4:	e1bffe15 	stw	r6,-8(fp)
   141b8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   141bc:	e13ffd17 	ldw	r4,-12(fp)
   141c0:	e17ffe17 	ldw	r5,-8(fp)
   141c4:	e1bfff17 	ldw	r6,-4(fp)
   141c8:	0011a800 	call	11a80 <open>
   141cc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   141d0:	e0bffb17 	ldw	r2,-20(fp)
   141d4:	10002216 	blt	r2,zero,14260 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   141d8:	04000074 	movhi	r16,1
   141dc:	84163204 	addi	r16,r16,22728
   141e0:	e0bffb17 	ldw	r2,-20(fp)
   141e4:	1009883a 	mov	r4,r2
   141e8:	01400304 	movi	r5,12
   141ec:	00020000 	call	2000 <__mulsi3>
   141f0:	8085883a 	add	r2,r16,r2
   141f4:	10c00017 	ldw	r3,0(r2)
   141f8:	e0bffc17 	ldw	r2,-16(fp)
   141fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14200:	04000074 	movhi	r16,1
   14204:	84163204 	addi	r16,r16,22728
   14208:	e0bffb17 	ldw	r2,-20(fp)
   1420c:	1009883a 	mov	r4,r2
   14210:	01400304 	movi	r5,12
   14214:	00020000 	call	2000 <__mulsi3>
   14218:	8085883a 	add	r2,r16,r2
   1421c:	10800104 	addi	r2,r2,4
   14220:	10c00017 	ldw	r3,0(r2)
   14224:	e0bffc17 	ldw	r2,-16(fp)
   14228:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1422c:	04000074 	movhi	r16,1
   14230:	84163204 	addi	r16,r16,22728
   14234:	e0bffb17 	ldw	r2,-20(fp)
   14238:	1009883a 	mov	r4,r2
   1423c:	01400304 	movi	r5,12
   14240:	00020000 	call	2000 <__mulsi3>
   14244:	8085883a 	add	r2,r16,r2
   14248:	10800204 	addi	r2,r2,8
   1424c:	10c00017 	ldw	r3,0(r2)
   14250:	e0bffc17 	ldw	r2,-16(fp)
   14254:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14258:	e13ffb17 	ldw	r4,-20(fp)
   1425c:	0011d1c0 	call	11d1c <alt_release_fd>
  }
} 
   14260:	e037883a 	mov	sp,fp
   14264:	dfc00217 	ldw	ra,8(sp)
   14268:	df000117 	ldw	fp,4(sp)
   1426c:	dc000017 	ldw	r16,0(sp)
   14270:	dec00304 	addi	sp,sp,12
   14274:	f800283a 	ret

00014278 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14278:	defffb04 	addi	sp,sp,-20
   1427c:	dfc00415 	stw	ra,16(sp)
   14280:	df000315 	stw	fp,12(sp)
   14284:	df000304 	addi	fp,sp,12
   14288:	e13ffd15 	stw	r4,-12(fp)
   1428c:	e17ffe15 	stw	r5,-8(fp)
   14290:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14294:	01000074 	movhi	r4,1
   14298:	21163504 	addi	r4,r4,22740
   1429c:	e17ffd17 	ldw	r5,-12(fp)
   142a0:	01800044 	movi	r6,1
   142a4:	01c07fc4 	movi	r7,511
   142a8:	00141980 	call	14198 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   142ac:	01000074 	movhi	r4,1
   142b0:	21163204 	addi	r4,r4,22728
   142b4:	e17ffe17 	ldw	r5,-8(fp)
   142b8:	000d883a 	mov	r6,zero
   142bc:	01c07fc4 	movi	r7,511
   142c0:	00141980 	call	14198 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   142c4:	01000074 	movhi	r4,1
   142c8:	21163804 	addi	r4,r4,22752
   142cc:	e17fff17 	ldw	r5,-4(fp)
   142d0:	01800044 	movi	r6,1
   142d4:	01c07fc4 	movi	r7,511
   142d8:	00141980 	call	14198 <alt_open_fd>
}  
   142dc:	e037883a 	mov	sp,fp
   142e0:	dfc00117 	ldw	ra,4(sp)
   142e4:	df000017 	ldw	fp,0(sp)
   142e8:	dec00204 	addi	sp,sp,8
   142ec:	f800283a 	ret

000142f0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   142f0:	defffa04 	addi	sp,sp,-24
   142f4:	df000515 	stw	fp,20(sp)
   142f8:	df000504 	addi	fp,sp,20
   142fc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14300:	0005303a 	rdctl	r2,status
   14304:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14308:	e0fffc17 	ldw	r3,-16(fp)
   1430c:	00bfff84 	movi	r2,-2
   14310:	1884703a 	and	r2,r3,r2
   14314:	1001703a 	wrctl	status,r2
  
  return context;
   14318:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1431c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   14320:	e0bfff17 	ldw	r2,-4(fp)
   14324:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   14328:	e0bffd17 	ldw	r2,-12(fp)
   1432c:	10800017 	ldw	r2,0(r2)
   14330:	e0fffd17 	ldw	r3,-12(fp)
   14334:	18c00117 	ldw	r3,4(r3)
   14338:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1433c:	e0bffd17 	ldw	r2,-12(fp)
   14340:	10800117 	ldw	r2,4(r2)
   14344:	e0fffd17 	ldw	r3,-12(fp)
   14348:	18c00017 	ldw	r3,0(r3)
   1434c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   14350:	e0bffd17 	ldw	r2,-12(fp)
   14354:	e0fffd17 	ldw	r3,-12(fp)
   14358:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1435c:	e0bffd17 	ldw	r2,-12(fp)
   14360:	e0fffd17 	ldw	r3,-12(fp)
   14364:	10c00015 	stw	r3,0(r2)
   14368:	e0bffb17 	ldw	r2,-20(fp)
   1436c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14370:	e0bffe17 	ldw	r2,-8(fp)
   14374:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   14378:	e037883a 	mov	sp,fp
   1437c:	df000017 	ldw	fp,0(sp)
   14380:	dec00104 	addi	sp,sp,4
   14384:	f800283a 	ret

00014388 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14388:	defffb04 	addi	sp,sp,-20
   1438c:	dfc00415 	stw	ra,16(sp)
   14390:	df000315 	stw	fp,12(sp)
   14394:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   14398:	d0a02017 	ldw	r2,-32640(gp)
   1439c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   143a0:	d0a6f217 	ldw	r2,-25656(gp)
   143a4:	10800044 	addi	r2,r2,1
   143a8:	d0a6f215 	stw	r2,-25656(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   143ac:	00002e06 	br	14468 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   143b0:	e0bffd17 	ldw	r2,-12(fp)
   143b4:	10800017 	ldw	r2,0(r2)
   143b8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   143bc:	e0bffd17 	ldw	r2,-12(fp)
   143c0:	10800403 	ldbu	r2,16(r2)
   143c4:	10803fcc 	andi	r2,r2,255
   143c8:	10000426 	beq	r2,zero,143dc <alt_tick+0x54>
   143cc:	d0a6f217 	ldw	r2,-25656(gp)
   143d0:	1000021e 	bne	r2,zero,143dc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   143d4:	e0bffd17 	ldw	r2,-12(fp)
   143d8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   143dc:	e0bffd17 	ldw	r2,-12(fp)
   143e0:	10800217 	ldw	r2,8(r2)
   143e4:	d0e6f217 	ldw	r3,-25656(gp)
   143e8:	18801d36 	bltu	r3,r2,14460 <alt_tick+0xd8>
   143ec:	e0bffd17 	ldw	r2,-12(fp)
   143f0:	10800403 	ldbu	r2,16(r2)
   143f4:	10803fcc 	andi	r2,r2,255
   143f8:	1000191e 	bne	r2,zero,14460 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   143fc:	e0bffd17 	ldw	r2,-12(fp)
   14400:	10c00317 	ldw	r3,12(r2)
   14404:	e0bffd17 	ldw	r2,-12(fp)
   14408:	10800517 	ldw	r2,20(r2)
   1440c:	1009883a 	mov	r4,r2
   14410:	183ee83a 	callr	r3
   14414:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   14418:	e0bfff17 	ldw	r2,-4(fp)
   1441c:	1000031e 	bne	r2,zero,1442c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   14420:	e13ffd17 	ldw	r4,-12(fp)
   14424:	00142f00 	call	142f0 <alt_alarm_stop>
   14428:	00000d06 	br	14460 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1442c:	e0bffd17 	ldw	r2,-12(fp)
   14430:	10c00217 	ldw	r3,8(r2)
   14434:	e0bfff17 	ldw	r2,-4(fp)
   14438:	1887883a 	add	r3,r3,r2
   1443c:	e0bffd17 	ldw	r2,-12(fp)
   14440:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   14444:	e0bffd17 	ldw	r2,-12(fp)
   14448:	10c00217 	ldw	r3,8(r2)
   1444c:	d0a6f217 	ldw	r2,-25656(gp)
   14450:	1880032e 	bgeu	r3,r2,14460 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   14454:	e0bffd17 	ldw	r2,-12(fp)
   14458:	00c00044 	movi	r3,1
   1445c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   14460:	e0bffe17 	ldw	r2,-8(fp)
   14464:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14468:	e0fffd17 	ldw	r3,-12(fp)
   1446c:	d0a02004 	addi	r2,gp,-32640
   14470:	18bfcf1e 	bne	r3,r2,143b0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   14474:	0001883a 	nop
}
   14478:	e037883a 	mov	sp,fp
   1447c:	dfc00117 	ldw	ra,4(sp)
   14480:	df000017 	ldw	fp,0(sp)
   14484:	dec00204 	addi	sp,sp,8
   14488:	f800283a 	ret

0001448c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1448c:	deffff04 	addi	sp,sp,-4
   14490:	df000015 	stw	fp,0(sp)
   14494:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   14498:	000170fa 	wrctl	ienable,zero
}
   1449c:	e037883a 	mov	sp,fp
   144a0:	df000017 	ldw	fp,0(sp)
   144a4:	dec00104 	addi	sp,sp,4
   144a8:	f800283a 	ret

000144ac <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   144ac:	defffb04 	addi	sp,sp,-20
   144b0:	df000415 	stw	fp,16(sp)
   144b4:	df000404 	addi	fp,sp,16
   144b8:	e13ffe15 	stw	r4,-8(fp)
   144bc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   144c0:	e0bfff17 	ldw	r2,-4(fp)
   144c4:	10840070 	cmpltui	r2,r2,4097
   144c8:	1000021e 	bne	r2,zero,144d4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   144cc:	00840004 	movi	r2,4096
   144d0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   144d4:	e0fffe17 	ldw	r3,-8(fp)
   144d8:	e0bfff17 	ldw	r2,-4(fp)
   144dc:	1885883a 	add	r2,r3,r2
   144e0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   144e4:	e0bffe17 	ldw	r2,-8(fp)
   144e8:	e0bffc15 	stw	r2,-16(fp)
   144ec:	00000506 	br	14504 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   144f0:	e0bffc17 	ldw	r2,-16(fp)
   144f4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   144f8:	e0bffc17 	ldw	r2,-16(fp)
   144fc:	10800804 	addi	r2,r2,32
   14500:	e0bffc15 	stw	r2,-16(fp)
   14504:	e0fffc17 	ldw	r3,-16(fp)
   14508:	e0bffd17 	ldw	r2,-12(fp)
   1450c:	18bff836 	bltu	r3,r2,144f0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   14510:	e0bffe17 	ldw	r2,-8(fp)
   14514:	108007cc 	andi	r2,r2,31
   14518:	10000226 	beq	r2,zero,14524 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1451c:	e0bffc17 	ldw	r2,-16(fp)
   14520:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   14524:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   14528:	e037883a 	mov	sp,fp
   1452c:	df000017 	ldw	fp,0(sp)
   14530:	dec00104 	addi	sp,sp,4
   14534:	f800283a 	ret

00014538 <atexit>:
   14538:	200b883a 	mov	r5,r4
   1453c:	000d883a 	mov	r6,zero
   14540:	0009883a 	mov	r4,zero
   14544:	000f883a 	mov	r7,zero
   14548:	00146001 	jmpi	14600 <__register_exitproc>

0001454c <exit>:
   1454c:	defffe04 	addi	sp,sp,-8
   14550:	000b883a 	mov	r5,zero
   14554:	dc000015 	stw	r16,0(sp)
   14558:	dfc00115 	stw	ra,4(sp)
   1455c:	2021883a 	mov	r16,r4
   14560:	00147300 	call	14730 <__call_exitprocs>
   14564:	00800074 	movhi	r2,1
   14568:	109ab404 	addi	r2,r2,27344
   1456c:	11000017 	ldw	r4,0(r2)
   14570:	20800f17 	ldw	r2,60(r4)
   14574:	10000126 	beq	r2,zero,1457c <exit+0x30>
   14578:	103ee83a 	callr	r2
   1457c:	8009883a 	mov	r4,r16
   14580:	00148d00 	call	148d0 <_exit>

00014584 <memcmp>:
   14584:	01c000c4 	movi	r7,3
   14588:	3980192e 	bgeu	r7,r6,145f0 <memcmp+0x6c>
   1458c:	2904b03a 	or	r2,r5,r4
   14590:	11c4703a 	and	r2,r2,r7
   14594:	10000f26 	beq	r2,zero,145d4 <memcmp+0x50>
   14598:	20c00003 	ldbu	r3,0(r4)
   1459c:	28800003 	ldbu	r2,0(r5)
   145a0:	1880151e 	bne	r3,r2,145f8 <memcmp+0x74>
   145a4:	31bfff84 	addi	r6,r6,-2
   145a8:	01ffffc4 	movi	r7,-1
   145ac:	00000406 	br	145c0 <memcmp+0x3c>
   145b0:	20c00003 	ldbu	r3,0(r4)
   145b4:	28800003 	ldbu	r2,0(r5)
   145b8:	31bfffc4 	addi	r6,r6,-1
   145bc:	18800e1e 	bne	r3,r2,145f8 <memcmp+0x74>
   145c0:	21000044 	addi	r4,r4,1
   145c4:	29400044 	addi	r5,r5,1
   145c8:	31fff91e 	bne	r6,r7,145b0 <memcmp+0x2c>
   145cc:	0005883a 	mov	r2,zero
   145d0:	f800283a 	ret
   145d4:	20c00017 	ldw	r3,0(r4)
   145d8:	28800017 	ldw	r2,0(r5)
   145dc:	1880041e 	bne	r3,r2,145f0 <memcmp+0x6c>
   145e0:	31bfff04 	addi	r6,r6,-4
   145e4:	21000104 	addi	r4,r4,4
   145e8:	29400104 	addi	r5,r5,4
   145ec:	39bff936 	bltu	r7,r6,145d4 <memcmp+0x50>
   145f0:	303fe91e 	bne	r6,zero,14598 <memcmp+0x14>
   145f4:	003ff506 	br	145cc <memcmp+0x48>
   145f8:	1885c83a 	sub	r2,r3,r2
   145fc:	f800283a 	ret

00014600 <__register_exitproc>:
   14600:	defffa04 	addi	sp,sp,-24
   14604:	00800074 	movhi	r2,1
   14608:	109ab404 	addi	r2,r2,27344
   1460c:	dc000315 	stw	r16,12(sp)
   14610:	14000017 	ldw	r16,0(r2)
   14614:	dc400415 	stw	r17,16(sp)
   14618:	dfc00515 	stw	ra,20(sp)
   1461c:	80805217 	ldw	r2,328(r16)
   14620:	2023883a 	mov	r17,r4
   14624:	10003e26 	beq	r2,zero,14720 <__register_exitproc+0x120>
   14628:	10c00117 	ldw	r3,4(r2)
   1462c:	020007c4 	movi	r8,31
   14630:	40c0180e 	bge	r8,r3,14694 <__register_exitproc+0x94>
   14634:	00800034 	movhi	r2,0
   14638:	108dad04 	addi	r2,r2,14004
   1463c:	1000061e 	bne	r2,zero,14658 <__register_exitproc+0x58>
   14640:	00bfffc4 	movi	r2,-1
   14644:	dfc00517 	ldw	ra,20(sp)
   14648:	dc400417 	ldw	r17,16(sp)
   1464c:	dc000317 	ldw	r16,12(sp)
   14650:	dec00604 	addi	sp,sp,24
   14654:	f800283a 	ret
   14658:	01006404 	movi	r4,400
   1465c:	d9400015 	stw	r5,0(sp)
   14660:	d9800115 	stw	r6,4(sp)
   14664:	d9c00215 	stw	r7,8(sp)
   14668:	00036b40 	call	36b4 <malloc>
   1466c:	d9400017 	ldw	r5,0(sp)
   14670:	d9800117 	ldw	r6,4(sp)
   14674:	d9c00217 	ldw	r7,8(sp)
   14678:	103ff126 	beq	r2,zero,14640 <__register_exitproc+0x40>
   1467c:	80c05217 	ldw	r3,328(r16)
   14680:	10000115 	stw	zero,4(r2)
   14684:	10c00015 	stw	r3,0(r2)
   14688:	80805215 	stw	r2,328(r16)
   1468c:	10006215 	stw	zero,392(r2)
   14690:	10006315 	stw	zero,396(r2)
   14694:	10c00117 	ldw	r3,4(r2)
   14698:	88000d1e 	bne	r17,zero,146d0 <__register_exitproc+0xd0>
   1469c:	19000084 	addi	r4,r3,2
   146a0:	2109883a 	add	r4,r4,r4
   146a4:	18c00044 	addi	r3,r3,1
   146a8:	2109883a 	add	r4,r4,r4
   146ac:	1109883a 	add	r4,r2,r4
   146b0:	10c00115 	stw	r3,4(r2)
   146b4:	0005883a 	mov	r2,zero
   146b8:	21400015 	stw	r5,0(r4)
   146bc:	dfc00517 	ldw	ra,20(sp)
   146c0:	dc400417 	ldw	r17,16(sp)
   146c4:	dc000317 	ldw	r16,12(sp)
   146c8:	dec00604 	addi	sp,sp,24
   146cc:	f800283a 	ret
   146d0:	02400044 	movi	r9,1
   146d4:	12806217 	ldw	r10,392(r2)
   146d8:	48d2983a 	sll	r9,r9,r3
   146dc:	19000804 	addi	r4,r3,32
   146e0:	18d1883a 	add	r8,r3,r3
   146e4:	2109883a 	add	r4,r4,r4
   146e8:	4211883a 	add	r8,r8,r8
   146ec:	2109883a 	add	r4,r4,r4
   146f0:	1109883a 	add	r4,r2,r4
   146f4:	1211883a 	add	r8,r2,r8
   146f8:	5254b03a 	or	r10,r10,r9
   146fc:	21c02215 	stw	r7,136(r4)
   14700:	41802215 	stw	r6,136(r8)
   14704:	12806215 	stw	r10,392(r2)
   14708:	01000084 	movi	r4,2
   1470c:	893fe31e 	bne	r17,r4,1469c <__register_exitproc+0x9c>
   14710:	11006317 	ldw	r4,396(r2)
   14714:	2252b03a 	or	r9,r4,r9
   14718:	12406315 	stw	r9,396(r2)
   1471c:	003fdf06 	br	1469c <__register_exitproc+0x9c>
   14720:	008000b4 	movhi	r2,2
   14724:	10a37104 	addi	r2,r2,-29244
   14728:	80805215 	stw	r2,328(r16)
   1472c:	003fbe06 	br	14628 <__register_exitproc+0x28>

00014730 <__call_exitprocs>:
   14730:	00800074 	movhi	r2,1
   14734:	109ab404 	addi	r2,r2,27344
   14738:	10800017 	ldw	r2,0(r2)
   1473c:	defff304 	addi	sp,sp,-52
   14740:	df000b15 	stw	fp,44(sp)
   14744:	d8800015 	stw	r2,0(sp)
   14748:	10805204 	addi	r2,r2,328
   1474c:	dd400815 	stw	r21,32(sp)
   14750:	dfc00c15 	stw	ra,48(sp)
   14754:	ddc00a15 	stw	r23,40(sp)
   14758:	dd800915 	stw	r22,36(sp)
   1475c:	dd000715 	stw	r20,28(sp)
   14760:	dcc00615 	stw	r19,24(sp)
   14764:	dc800515 	stw	r18,20(sp)
   14768:	dc400415 	stw	r17,16(sp)
   1476c:	dc000315 	stw	r16,12(sp)
   14770:	d9000115 	stw	r4,4(sp)
   14774:	2839883a 	mov	fp,r5
   14778:	d8800215 	stw	r2,8(sp)
   1477c:	057fffc4 	movi	r21,-1
   14780:	d8800017 	ldw	r2,0(sp)
   14784:	ddc00217 	ldw	r23,8(sp)
   14788:	14805217 	ldw	r18,328(r2)
   1478c:	90001726 	beq	r18,zero,147ec <__call_exitprocs+0xbc>
   14790:	94400117 	ldw	r17,4(r18)
   14794:	8c3fffc4 	addi	r16,r17,-1
   14798:	80001116 	blt	r16,zero,147e0 <__call_exitprocs+0xb0>
   1479c:	8c400044 	addi	r17,r17,1
   147a0:	8427883a 	add	r19,r16,r16
   147a4:	8c63883a 	add	r17,r17,r17
   147a8:	95802204 	addi	r22,r18,136
   147ac:	9ce7883a 	add	r19,r19,r19
   147b0:	8c63883a 	add	r17,r17,r17
   147b4:	b4e7883a 	add	r19,r22,r19
   147b8:	9463883a 	add	r17,r18,r17
   147bc:	e0001726 	beq	fp,zero,1481c <__call_exitprocs+0xec>
   147c0:	8c87c83a 	sub	r3,r17,r18
   147c4:	b0c7883a 	add	r3,r22,r3
   147c8:	18c01e17 	ldw	r3,120(r3)
   147cc:	1f001326 	beq	r3,fp,1481c <__call_exitprocs+0xec>
   147d0:	843fffc4 	addi	r16,r16,-1
   147d4:	9cffff04 	addi	r19,r19,-4
   147d8:	8c7fff04 	addi	r17,r17,-4
   147dc:	857ff71e 	bne	r16,r21,147bc <__call_exitprocs+0x8c>
   147e0:	00800034 	movhi	r2,0
   147e4:	108db204 	addi	r2,r2,14024
   147e8:	10002a1e 	bne	r2,zero,14894 <__call_exitprocs+0x164>
   147ec:	dfc00c17 	ldw	ra,48(sp)
   147f0:	df000b17 	ldw	fp,44(sp)
   147f4:	ddc00a17 	ldw	r23,40(sp)
   147f8:	dd800917 	ldw	r22,36(sp)
   147fc:	dd400817 	ldw	r21,32(sp)
   14800:	dd000717 	ldw	r20,28(sp)
   14804:	dcc00617 	ldw	r19,24(sp)
   14808:	dc800517 	ldw	r18,20(sp)
   1480c:	dc400417 	ldw	r17,16(sp)
   14810:	dc000317 	ldw	r16,12(sp)
   14814:	dec00d04 	addi	sp,sp,52
   14818:	f800283a 	ret
   1481c:	91000117 	ldw	r4,4(r18)
   14820:	88c00017 	ldw	r3,0(r17)
   14824:	213fffc4 	addi	r4,r4,-1
   14828:	24001526 	beq	r4,r16,14880 <__call_exitprocs+0x150>
   1482c:	88000015 	stw	zero,0(r17)
   14830:	183fe726 	beq	r3,zero,147d0 <__call_exitprocs+0xa0>
   14834:	00800044 	movi	r2,1
   14838:	1408983a 	sll	r4,r2,r16
   1483c:	91406217 	ldw	r5,392(r18)
   14840:	95000117 	ldw	r20,4(r18)
   14844:	214a703a 	and	r5,r4,r5
   14848:	28000b26 	beq	r5,zero,14878 <__call_exitprocs+0x148>
   1484c:	91406317 	ldw	r5,396(r18)
   14850:	2148703a 	and	r4,r4,r5
   14854:	20000c1e 	bne	r4,zero,14888 <__call_exitprocs+0x158>
   14858:	99400017 	ldw	r5,0(r19)
   1485c:	d9000117 	ldw	r4,4(sp)
   14860:	183ee83a 	callr	r3
   14864:	90c00117 	ldw	r3,4(r18)
   14868:	1d3fc51e 	bne	r3,r20,14780 <__call_exitprocs+0x50>
   1486c:	b8c00017 	ldw	r3,0(r23)
   14870:	1cbfd726 	beq	r3,r18,147d0 <__call_exitprocs+0xa0>
   14874:	003fc206 	br	14780 <__call_exitprocs+0x50>
   14878:	183ee83a 	callr	r3
   1487c:	003ff906 	br	14864 <__call_exitprocs+0x134>
   14880:	94000115 	stw	r16,4(r18)
   14884:	003fea06 	br	14830 <__call_exitprocs+0x100>
   14888:	99000017 	ldw	r4,0(r19)
   1488c:	183ee83a 	callr	r3
   14890:	003ff406 	br	14864 <__call_exitprocs+0x134>
   14894:	90c00117 	ldw	r3,4(r18)
   14898:	1800071e 	bne	r3,zero,148b8 <__call_exitprocs+0x188>
   1489c:	90c00017 	ldw	r3,0(r18)
   148a0:	18000926 	beq	r3,zero,148c8 <__call_exitprocs+0x198>
   148a4:	9009883a 	mov	r4,r18
   148a8:	b8c00015 	stw	r3,0(r23)
   148ac:	00036c80 	call	36c8 <free>
   148b0:	bc800017 	ldw	r18,0(r23)
   148b4:	003fb506 	br	1478c <__call_exitprocs+0x5c>
   148b8:	90c00017 	ldw	r3,0(r18)
   148bc:	902f883a 	mov	r23,r18
   148c0:	1825883a 	mov	r18,r3
   148c4:	003fb106 	br	1478c <__call_exitprocs+0x5c>
   148c8:	0007883a 	mov	r3,zero
   148cc:	003ffb06 	br	148bc <__call_exitprocs+0x18c>

000148d0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   148d0:	defffc04 	addi	sp,sp,-16
   148d4:	df000315 	stw	fp,12(sp)
   148d8:	df000304 	addi	fp,sp,12
   148dc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   148e0:	0001883a 	nop
   148e4:	e0bfff17 	ldw	r2,-4(fp)
   148e8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   148ec:	e0bffd17 	ldw	r2,-12(fp)
   148f0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   148f4:	e0bffe17 	ldw	r2,-8(fp)
   148f8:	10000226 	beq	r2,zero,14904 <_exit+0x34>
    ALT_SIM_FAIL();
   148fc:	002af070 	cmpltui	zero,zero,43969
   14900:	00000106 	br	14908 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   14904:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14908:	003fff06 	br	14908 <_exit+0x38>
