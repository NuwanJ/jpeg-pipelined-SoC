
cpu_E.elf:     file format elf32-littlenios2
cpu_E.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000e69c memsz 0x0000e69c flags r-x
    LOAD off    0x0000f6bc vaddr 0x0008e6bc paddr 0x00090928 align 2**12
         filesz 0x0000226c memsz 0x0000226c flags rw-
    LOAD off    0x00011b94 vaddr 0x00092b94 paddr 0x00092b94 align 2**12
         filesz 0x00000000 memsz 0x00000308 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e0e0  000801b8  000801b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000424  0008e298  0008e298  0000f298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000226c  0008e6bc  00090928  0000f6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  00092b94  00092b94  00011b94  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00011928  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e38  00000000  00000000  00011950  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00023c72  00000000  00000000  00012788  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000942b  00000000  00000000  000363fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a998  00000000  00000000  0003f825  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000209c  00000000  00000000  0004a1c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000034ce  00000000  00000000  0004c25c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001194a  00000000  00000000  0004f72a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  00061074  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  000610c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000656c3  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  000656c6  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000656cb  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000656cc  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000656cd  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000656d1  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000656d5  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000006  00000000  00000000  000656d9  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000006  00000000  00000000  000656df  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000006  00000000  00000000  000656e5  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000006  00000000  00000000  000656eb  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001d  00000000  00000000  000656f1  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     001b94d0  00000000  00000000  0006570e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b8 l    d  .text	00000000 .text
0008e298 l    d  .rodata	00000000 .rodata
0008e6bc l    d  .rwdata	00000000 .rwdata
00092b94 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu_E_bsp//obj/HAL/src/crt0.o
000801f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 IOMap.c
00000000 l    df *ABS*	00000000 utility.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00081e44 l     F .text	00000034 __sprint_r
0008e3ea l     O .rodata	00000010 blanks.3515
0008e3fa l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00083e8c l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000858fc l     F .text	00000008 __fp_lock
00085904 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0008eed0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0008e430 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0008e578 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00089ee0 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0008ac20 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0008b38c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008b4a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008b4d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0008b5d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008b6c8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008b7b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008b990 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00090918 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0008bc34 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008bd74 l     F .text	00000038 alt_dev_reg
0008f88c l     O .rwdata	00001060 jtag_E
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008c588 l     F .text	00000204 altera_avalon_jtag_uart_irq
0008c78c l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0008cdc8 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008d174 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008d614 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0008d76c l     F .text	00000050 alt_get_errno
0008d7bc l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00081a38 g     F .text	00000030 readStatus_DE
000883bc g     F .text	00000074 _mprec_log10
000884ac g     F .text	00000084 __any_on
0008912c g     F .text	00000064 _isatty_r
0008e460 g     O .rodata	00000028 __mprec_tinytens
0008b8d8 g     F .text	00000078 alt_main
0008b348 g     F .text	00000044 __ashldi3
00081d20 g     F .text	00000084 _puts_r
00092ba0 g     O .bss	00000004 t
00092c0c g     O .bss	00000100 alt_irq
00089190 g     F .text	0000006c _lseek_r
0008c0f4 g     F .text	00000058 altera_avalon_fifo_write_almostfull
00090928 g       *ABS*	00000000 __flash_rwdata_start
0008160c g     F .text	0000004c write_AE
0008a780 g     F .text	0000005c __eqdf2
00092e9c g       *ABS*	00000000 __alt_heap_start
00081ce4 g     F .text	0000003c printf
0008e6bc g     O .rwdata	00000018 luminance_dc_code_table
00088cd0 g     F .text	0000005c __sseek
000859a0 g     F .text	0000010c __sinit
00086638 g     F .text	0000009c _setlocale_r
000819a8 g     F .text	00000044 read_DE
00085918 g     F .text	00000078 __sfmoreglue
0008b970 g     F .text	00000020 __malloc_unlock
00080284 g     F .text	000000ec processLoop
00092bd4 g     O .bss	00000004 altera_avalon_timer_ts_freq
00087278 g     F .text	0000018c memmove
0008be74 g     F .text	00000098 altera_avalon_fifo_init
00085990 g     F .text	00000010 _cleanup
0008c1a4 g     F .text	00000058 altera_avalon_fifo_write_fifo
000874e0 g     F .text	000000a8 _Balloc
000818f4 g     F .text	0000004c write_CD
00081780 g     F .text	00000038 init_BC
0008a838 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000001c __reset
0008c33c g     F .text	00000028 altera_avalon_fifo_read_backpressure
00080020 g       *ABS*	00000000 __flash_exceptions_start
000890c4 g     F .text	00000068 _fstat_r
00092bc0 g     O .bss	00000004 errno
00092bc8 g     O .bss	00000004 alt_argv
000988ec g       *ABS*	00000000 _gp
0008bc04 g     F .text	00000030 usleep
0008c040 g     F .text	0000005c altera_avalon_fifo_clear_event
000812a8 g     F .text	00000038 init_AB_1
000818b0 g     F .text	00000044 read_CD
0008f70c g     O .rwdata	00000180 alt_fd_list
000811ec g     F .text	00000044 read_AB_0
0008dbc0 g     F .text	00000090 alt_find_dev
00087138 g     F .text	00000140 memcpy
0008590c g     F .text	0000000c _cleanup_r
0008a95c g     F .text	000000d4 __floatsidf
00081848 g     F .text	00000030 readStatus_BC
0008d6f4 g     F .text	00000078 alt_io_redirect
0008a900 g     F .text	0000005c __ltdf2
00081590 g     F .text	00000038 init_AE
0008e298 g       *ABS*	00000000 __DTOR_END__
00081da4 g     F .text	00000014 puts
00088318 g     F .text	000000a4 __ratio
0008e9a4 g     O .rwdata	00000144 chrominance_ac_code_table
0008c98c g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00081cb8 g     F .text	0000002c _printf_r
0008ad40 g     F .text	00000008 __udivsi3
0008b624 g     F .text	000000a4 isatty
0008e4b0 g     O .rodata	000000c8 __mprec_tens
00081038 g     F .text	0000006c READ_B
000866d4 g     F .text	0000000c __locale_charset
0008de38 g     F .text	0000008c alt_icache_flush
00081750 g     F .text	00000030 readStatus_AF
00092bbc g     O .bss	00000004 __malloc_top_pad
000908f4 g     O .rwdata	00000004 __mb_cur_max
000866e0 g     F .text	0000000c _localeconv_r
00087910 g     F .text	0000003c __i2b
00085ff4 g     F .text	000004e4 __sfvwrite_r
00088b90 g     F .text	00000064 _sbrk_r
00081230 g     F .text	00000048 write_AB_0
00081970 g     F .text	00000038 init_DE
000891fc g     F .text	0000006c _read_r
0008f2d0 g     O .rwdata	0000000c __lc_ctype
00090910 g     O .rwdata	00000004 alt_max_fd
0008b130 g     F .text	00000104 __unpack_d
00088f74 g     F .text	0000013c _fclose_r
000858cc g     F .text	00000030 fflush
00092bb8 g     O .bss	00000004 __malloc_max_sbrked_mem
0008a234 g     F .text	00000054 __adddf3
0008808c g     F .text	00000148 __b2d
000898b8 g     F .text	00000628 __umoddi3
000814d0 g     F .text	00000044 read_AD
0008b804 g     F .text	000000d4 lseek
00081688 g     F .text	00000038 init_AF
000908ec g     O .rwdata	00000004 _global_impure_ptr
00088530 g     F .text	000005fc _realloc_r
00092e9c g       *ABS*	00000000 __bss_end
0008d524 g     F .text	000000f0 alt_iic_isr_register
0008da9c g     F .text	00000104 alt_tick
00089268 g     F .text	00000650 __udivdi3
0008e488 g     O .rodata	00000028 __mprec_bigtens
000876f4 g     F .text	00000104 __s2b
000816c0 g     F .text	00000044 read_AF
00081324 g     F .text	0000004c write_AB_1
0008ab04 g     F .text	0000011c __floatunsidf
00087e2c g     F .text	00000058 __mcmp
00085bb8 g     F .text	00000018 __fp_lock_all
0008d4d8 g     F .text	0000004c alt_ic_irq_enabled
000810e4 g     F .text	0000001c FIFO_INIT
0008da04 g     F .text	00000098 alt_alarm_stop
00092bd8 g     O .bss	00000004 alt_irq_active
00081514 g     F .text	0000004c write_AD
000800ec g     F .exceptions	000000cc alt_irq_handler
0008f6e4 g     O .rwdata	00000028 alt_dev_null
0008d158 g     F .text	0000001c alt_dcache_flush_all
000877f8 g     F .text	00000068 __hi0bits
0008aa30 g     F .text	000000d4 __fixdfsi
0008c09c g     F .text	00000058 altera_avalon_fifo_write_ienable
00090928 g       *ABS*	00000000 __ram_rwdata_end
0008bfb0 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00081940 g     F .text	00000030 readStatus_CD
00090908 g     O .rwdata	00000008 alt_dev_list
0008bc84 g     F .text	000000f0 write
00080370 g     F .text	000002d4 write_markers
00081ae4 g     F .text	0000004c write_EF
0008e6bc g       *ABS*	00000000 __ram_rodata_end
0008b524 g     F .text	000000b0 fstat
0008b304 g     F .text	00000044 __lshrdi3
000815c8 g     F .text	00000044 read_AE
00087ba4 g     F .text	0000012c __pow5mult
00092bb0 g     O .bss	00000004 __nlocale_changed
0008ad48 g     F .text	00000008 __umodsi3
00092e9c g       *ABS*	00000000 end
00080224 g     F .text	00000028 SEND2
00081a68 g     F .text	00000038 init_EF
00081370 g     F .text	00000030 readStatus_AB_1
0008c4c8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000801f4 g     F .text	00000030 SEND1
0008bfdc g     F .text	0000003c altera_avalon_fifo_read_event
0008e298 g       *ABS*	00000000 __CTOR_LIST__
000a0000 g       *ABS*	00000000 __alt_stack_pointer
0008ce3c g     F .text	00000088 alt_avalon_timer_sc_init
0008ae60 g     F .text	000000ac __clzsi2
0008e6ec g     O .rwdata	00000018 chrominance_dc_code_table
0008cba4 g     F .text	00000224 altera_avalon_jtag_uart_write
00092ba4 g     O .bss	00000004 input_fifo_wrclk_irq_event
00085ba8 g     F .text	00000004 __sfp_lock_acquire
0008c268 g     F .text	0000004c altera_avalon_fifo_read_fifo
00087040 g     F .text	000000f8 memchr
00081e78 g     F .text	00001e7c ___vfprintf_internal_r
00085d24 g     F .text	000002d0 _free_r
0008e0bc g     F .text	000001a0 __call_exitprocs
00092bac g     O .bss	00000004 __mlocale_changed
000908f8 g     O .rwdata	00000004 __malloc_sbrk_base
000801b8 g     F .text	0000003c _start
00092bdc g     O .bss	00000004 _alt_tick_rate
00087cd0 g     F .text	0000015c __lshift
00092be0 g     O .bss	00000004 _alt_nticks
0008b9e0 g     F .text	000000f4 read
0008bde0 g     F .text	00000094 alt_sys_init
0008df8c g     F .text	00000130 __register_exitproc
0008794c g     F .text	00000258 __multiply
0008c830 g     F .text	00000068 altera_avalon_jtag_uart_close
00081c90 g     F .text	00000028 __mulsi3
0008e6bc g       *ABS*	00000000 __ram_rwdata_start
0008e298 g       *ABS*	00000000 __ram_rodata_start
00092be4 g     O .bss	00000028 __malloc_current_mallinfo
00092b9c g     O .bss	00000002 ldc2
000881d4 g     F .text	00000144 __d2b
0008eae8 g     O .rwdata	00000144 chrominance_ac_size_table
00080f54 g     F .text	0000006c INIT_B
00081b30 g     F .text	00000030 readStatus_EF
0008c364 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0008dd64 g     F .text	000000d4 alt_get_fd
0008d004 g     F .text	00000154 alt_busy_sleep
0008b234 g     F .text	000000d0 __fpcmp_parts_d
00088f10 g     F .text	00000064 _close_r
0008df10 g     F .text	0000007c memcmp
0008c424 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00092e9c g       *ABS*	00000000 __alt_stack_base
0008c474 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00081100 g     F .text	000000b4 print_status
00083d18 g     F .text	00000174 __swsetup_r
0008bf0c g     F .text	0000003c altera_avalon_fifo_read_status
0008a5cc g     F .text	000001b4 __divdf3
00085aac g     F .text	000000fc __sfp
00088430 g     F .text	0000007c __copybits
0008f2dc g     O .rwdata	00000408 __malloc_av_
00085bb4 g     F .text	00000004 __sinit_lock_release
0008a2e8 g     F .text	000002e4 __muldf3
00088bf4 g     F .text	00000054 __sread
000812e0 g     F .text	00000044 read_AB_1
0008c310 g     F .text	0000002c altera_avalon_fifo_read_other_info
0008dc50 g     F .text	00000114 alt_find_file
0008d1c4 g     F .text	000000a0 alt_dev_llist_insert
0008b950 g     F .text	00000020 __malloc_lock
0008bb54 g     F .text	000000b0 sbrk
000856e4 g     F .text	000001e8 _fflush_r
00088e44 g     F .text	000000cc _calloc_r
00092b94 g       *ABS*	00000000 __bss_start
00087404 g     F .text	000000dc memset
00092b9a g     O .bss	00000002 ldc1
0008024c g     F .text	00000038 main
00092bcc g     O .bss	00000004 alt_envp
00092bb4 g     O .bss	00000004 __malloc_max_total_mem
0008c3c4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008c018 g     F .text	00000028 altera_avalon_fifo_read_level
000819ec g     F .text	0000004c write_DE
00081aa0 g     F .text	00000044 read_EF
00080e80 g     F .text	000000d4 close_bitstream
00088d2c g     F .text	00000008 __sclose
000a0000 g       *ABS*	00000000 __alt_heap_limit
000890b0 g     F .text	00000014 fclose
000813a0 g     F .text	00000038 init_AB_2
000811b4 g     F .text	00000038 init_AB_0
00092d0c g     O .bss	00000190 _atexit0
00081c34 g     F .text	0000005c ledBlink
000840c8 g     F .text	0000161c _dtoa_r
000868bc g     F .text	00000784 _malloc_r
00090914 g     O .rwdata	00000004 alt_errno
00081658 g     F .text	00000030 readStatus_AE
000864d8 g     F .text	000000a8 _fwalk
0008ac94 g     F .text	00000050 __divsi3
0008e584 g     O .rodata	00000014 __thenan_df
00085be8 g     F .text	0000013c _malloc_trim_r
0008e298 g       *ABS*	00000000 __CTOR_END__
00080644 g     F .text	0000083c huffman
00088d34 g     F .text	000000a4 strcmp
00081498 g     F .text	00000038 init_AD
0008e298 g       *ABS*	00000000 __flash_rodata_start
00081704 g     F .text	0000004c write_AF
0008e298 g       *ABS*	00000000 __DTOR_LIST__
00081b60 g     F .text	0000003c delay
0008a7dc g     F .text	0000005c __nedf2
00000000 g       *ABS*	00000000 __alt_mem_SDRAM_controller
0008bdac g     F .text	00000034 alt_irq_init
0008141c g     F .text	0000004c write_AB_2
0008bad4 g     F .text	00000080 alt_release_fd
0008e598 g     O .rodata	00000100 __clz_tab
00092ba8 g     O .bss	00000004 _PathLocale
00081278 g     F .text	00000030 readStatus_AB_0
0008dec4 g     F .text	00000014 atexit
00088dd8 g     F .text	0000006c _write_r
000866ec g     F .text	0000001c setlocale
0008ec2c g     O .rwdata	00000100 bitsize
000817b8 g     F .text	00000044 read_BC
000908f0 g     O .rwdata	00000004 _impure_ptr
00092bc4 g     O .bss	00000004 alt_argc
00092bd0 g     O .bss	00000004 altera_avalon_timer_ts_base
0008d2c0 g     F .text	0000005c _do_dtors
000810c4 g     F .text	00000020 READ_FIFO
00080020 g       .exceptions	00000000 alt_irq_entry
0008802c g     F .text	00000060 __ulp
00088b2c g     F .text	00000038 __isinfd
00085bd0 g     F .text	00000018 __fp_unlock_all
00090900 g     O .rwdata	00000008 alt_fs_list
00081b9c g     F .text	00000098 ledUpdate
00080020 g       *ABS*	00000000 __ram_exceptions_start
00086708 g     F .text	0000000c localeconv
00092b94 g     O .bss	00000004 lcode
0008c2b4 g     F .text	0000005c altera_avalon_fifo_write_other_info
0008d34c g     F .text	00000050 alt_ic_isr_register
00081560 g     F .text	00000030 readStatus_AD
00090928 g       *ABS*	00000000 _edata
00092e9c g       *ABS*	00000000 _end
000801b8 g       *ABS*	00000000 __ram_exceptions_end
0008c898 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000813d8 g     F .text	00000044 read_AB_2
0008d438 g     F .text	000000a0 alt_ic_irq_disable
00088c48 g     F .text	00000088 __swrite
000908fc g     O .rwdata	00000004 __malloc_trim_threshold
0008e860 g     O .rwdata	00000144 luminance_ac_size_table
0008dba0 g     F .text	00000020 altera_nios2_qsys_irq_init
0008ded8 g     F .text	00000038 exit
0008ed2c g     O .rwdata	000001a4 markerdata
00086580 g     F .text	000000b8 _fwalk_reent
00087e84 g     F .text	000001a8 __mdiff
0008ace4 g     F .text	0000005c __modsi3
0008bf48 g     F .text	0000003c altera_avalon_fifo_read_ienable
000a0000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00092b9e g     O .bss	00000002 ldc3
00085bac g     F .text	00000004 __sfp_lock_release
00080fc0 g     F .text	00000078 WRITE_B
0008e25c g     F .text	0000003c _exit
00088b64 g     F .text	0000002c __isnand
0008e704 g     O .rwdata	00000018 chrominance_dc_size_table
0008cec4 g     F .text	00000140 alt_alarm_start
0008ad50 g     F .text	00000110 __muldi3
0008bf84 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00086714 g     F .text	000001a8 __smakebuf_r
00081db8 g     F .text	0000008c strlen
0008d8ac g     F .text	00000158 open
0008c1fc g     F .text	0000006c altera_avalon_read_fifo
0008a89c g     F .text	00000064 __gedf2
00081878 g     F .text	00000038 init_CD
00092b98 g     O .bss	00000002 bitindex
0008d31c g     F .text	00000030 alt_icache_flush_all
000810a4 g     F .text	00000020 WRITE_FIFO
0008e71c g     O .rwdata	00000144 luminance_ac_code_table
0009091c g     O .rwdata	00000004 alt_priority_mask
0008d39c g     F .text	0000009c alt_ic_irq_enable
00083cf4 g     F .text	00000024 __vfprintf_internal
00081468 g     F .text	00000030 readStatus_AB_2
000817fc g     F .text	0000004c write_BC
0008a288 g     F .text	00000060 __subdf3
00087860 g     F .text	000000b0 __lo0bits
0008c14c g     F .text	00000058 altera_avalon_fifo_write_almostempty
00090920 g     O .rwdata	00000008 alt_alarm_list
0008d264 g     F .text	0000005c _do_ctors
0008e6d4 g     O .rwdata	00000018 luminance_dc_size_table
0008b3dc g     F .text	000000cc close
0008b734 g     F .text	00000080 alt_load
0008af0c g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
00085bb0 g     F .text	00000004 __sinit_lock_acquire
000875b0 g     F .text	00000144 __multadd
00087588 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08406e14 	ori	at,at,440
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_SDRAM_controller>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)

00080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   800fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80100:	0005313a 	rdctl	r2,ipending
   80104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80114:	00800044 	movi	r2,1
   80118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8011c:	e0fffb17 	ldw	r3,-20(fp)
   80120:	e0bffc17 	ldw	r2,-16(fp)
   80124:	1884703a 	and	r2,r3,r2
   80128:	10001726 	beq	r2,zero,80188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	00c00274 	movhi	r3,9
   80130:	18cb0304 	addi	r3,r3,11276
   80134:	e0bffd17 	ldw	r2,-12(fp)
   80138:	100490fa 	slli	r2,r2,3
   8013c:	1885883a 	add	r2,r3,r2
   80140:	10c00017 	ldw	r3,0(r2)
   80144:	01000274 	movhi	r4,9
   80148:	210b0304 	addi	r4,r4,11276
   8014c:	e0bffd17 	ldw	r2,-12(fp)
   80150:	100490fa 	slli	r2,r2,3
   80154:	2085883a 	add	r2,r4,r2
   80158:	10800104 	addi	r2,r2,4
   8015c:	10800017 	ldw	r2,0(r2)
   80160:	1009883a 	mov	r4,r2
   80164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8016c:	0005313a 	rdctl	r2,ipending
   80170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   8017c:	e0bffb17 	ldw	r2,-20(fp)
   80180:	103fe31e 	bne	r2,zero,80110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   80184:	00000706 	br	801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80188:	e0bffc17 	ldw	r2,-16(fp)
   8018c:	1085883a 	add	r2,r2,r2
   80190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80194:	e0bffd17 	ldw	r2,-12(fp)
   80198:	10800044 	addi	r2,r2,1
   8019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a0:	003fde06 	br	8011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a4:	e037883a 	mov	sp,fp
   801a8:	dfc00117 	ldw	ra,4(sp)
   801ac:	df000017 	ldw	fp,0(sp)
   801b0:	dec00204 	addi	sp,sp,8
   801b4:	f800283a 	ret

Disassembly of section .text:

000801b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b8:	06c002b4 	movhi	sp,10
    ori sp, sp, %lo(__alt_stack_pointer)
   801bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   801c0:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801c4:	d6a23b14 	ori	gp,gp,35052
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c8:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801cc:	108ae514 	ori	r2,r2,11156

    movhi r3, %hi(__bss_end)
   801d0:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801d4:	18cba714 	ori	r3,r3,11932

    beq r2, r3, 1f
   801d8:	10c00326 	beq	r2,r3,801e8 <_start+0x30>

0:
    stw zero, (r2)
   801dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e4:	10fffd36 	bltu	r2,r3,801dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e8:	008b7340 	call	8b734 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801ec:	008b8d80 	call	8b8d8 <alt_main>

000801f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801f0:	003fff06 	br	801f0 <alt_after_alt_main>

000801f4 <SEND1>:
uint32_t lcode = 0;
uint16_t bitindex = 0;
int16_t ldc1 = 0, ldc2 = 0, ldc3 = 0;


void SEND1(int val){
   801f4:	defffd04 	addi	sp,sp,-12
   801f8:	dfc00215 	stw	ra,8(sp)
   801fc:	df000115 	stw	fp,4(sp)
   80200:	df000104 	addi	fp,sp,4
   80204:	e13fff15 	stw	r4,-4(fp)
	write_EF(&val);
   80208:	e13fff04 	addi	r4,fp,-4
   8020c:	0081ae40 	call	81ae4 <write_EF>
}
   80210:	e037883a 	mov	sp,fp
   80214:	dfc00117 	ldw	ra,4(sp)
   80218:	df000017 	ldw	fp,0(sp)
   8021c:	dec00204 	addi	sp,sp,8
   80220:	f800283a 	ret

00080224 <SEND2>:

void SEND2(int d){
   80224:	defffd04 	addi	sp,sp,-12
   80228:	df000215 	stw	fp,8(sp)
   8022c:	df000204 	addi	fp,sp,8
   80230:	e13fff15 	stw	r4,-4(fp)
	int val = d;
   80234:	e0bfff17 	ldw	r2,-4(fp)
   80238:	e0bffe15 	stw	r2,-8(fp)
	// REM: What to to ?
}
   8023c:	e037883a 	mov	sp,fp
   80240:	df000017 	ldw	fp,0(sp)
   80244:	dec00104 	addi	sp,sp,4
   80248:	f800283a 	ret

0008024c <main>:
void write_markers (uint32_t image_width, uint32_t image_height);
void huffman (uint16_t component);
void close_bitstream (void);


int main(void){
   8024c:	defffe04 	addi	sp,sp,-8
   80250:	dfc00115 	stw	ra,4(sp)
   80254:	df000015 	stw	fp,0(sp)
   80258:	d839883a 	mov	fp,sp

	printf("Hardware JSoC_E begins\n\n");
   8025c:	01000274 	movhi	r4,9
   80260:	2138a604 	addi	r4,r4,-7528
   80264:	0081da40 	call	81da4 <puts>

	init_AE();
   80268:	00815900 	call	81590 <init_AE>
	init_DE();
   8026c:	00819700 	call	81970 <init_DE>
	init_EF();
   80270:	0081a680 	call	81a68 <init_EF>

	ledBlink(5);
   80274:	01000144 	movi	r4,5
   80278:	0081c340 	call	81c34 <ledBlink>

	while(1){
		processLoop();
   8027c:	00802840 	call	80284 <processLoop>
	}
   80280:	003ffe06 	br	8027c <main+0x30>

00080284 <processLoop>:

	return 0;
}

void processLoop(){
   80284:	defffb04 	addi	sp,sp,-20
   80288:	dfc00415 	stw	ra,16(sp)
   8028c:	df000315 	stw	fp,12(sp)
   80290:	df000304 	addi	fp,sp,12
	while(1){
		lcode = 0;
   80294:	d028aa15 	stw	zero,-23896(gp)
		bitindex = 0;
   80298:	d028ab0d 	sth	zero,-23892(gp)
		ldc1 = 0; ldc2 = 0; ldc3 = 0;
   8029c:	d028ab8d 	sth	zero,-23890(gp)
   802a0:	d028ac0d 	sth	zero,-23888(gp)
   802a4:	d028ac8d 	sth	zero,-23886(gp)

		uint32_t width  = (uint32_t)read_AE();
   802a8:	00815c80 	call	815c8 <read_AE>
   802ac:	e0bffe15 	stw	r2,-8(fp)
		uint32_t height = (uint32_t)read_AE();
   802b0:	00815c80 	call	815c8 <read_AE>
   802b4:	e0bfff15 	stw	r2,-4(fp)
		uint32_t count  = (uint32_t)read_AE();
   802b8:	00815c80 	call	815c8 <read_AE>
   802bc:	e0bffd15 	stw	r2,-12(fp)

		ledBlink(5);
   802c0:	01000144 	movi	r4,5
   802c4:	0081c340 	call	81c34 <ledBlink>
		printf("width: %d, height: %d, count: %d\n", width, height, count);
   802c8:	01000274 	movhi	r4,9
   802cc:	2138ac04 	addi	r4,r4,-7504
   802d0:	e17ffe17 	ldw	r5,-8(fp)
   802d4:	e1bfff17 	ldw	r6,-4(fp)
   802d8:	e1fffd17 	ldw	r7,-12(fp)
   802dc:	0081ce40 	call	81ce4 <printf>

		//fprintf(stderr,"total macroblocks: %d\n",count);
		write_markers(width,height);
   802e0:	e13ffe17 	ldw	r4,-8(fp)
   802e4:	e17fff17 	ldw	r5,-4(fp)
   802e8:	00803700 	call	80370 <write_markers>
		printf("write_markers: Completed\n");
   802ec:	01000274 	movhi	r4,9
   802f0:	2138b504 	addi	r4,r4,-7468
   802f4:	0081da40 	call	81da4 <puts>


		for(; count>0; count--){
   802f8:	00000d06 	br	80330 <processLoop+0xac>
			huffman(1);
   802fc:	01000044 	movi	r4,1
   80300:	00806440 	call	80644 <huffman>
			//printf("huffman %d - %d completed\n", count, 1);
			huffman(2);
   80304:	01000084 	movi	r4,2
   80308:	00806440 	call	80644 <huffman>
			//printf("huffman %d - %d completed\n", count, 2);
			huffman(3);
   8030c:	010000c4 	movi	r4,3
   80310:	00806440 	call	80644 <huffman>
			//printf("huffman %d - %d completed\n", count, 3);

			printf("huffman cycle %d completed\n", count);
   80314:	01000274 	movhi	r4,9
   80318:	2138bc04 	addi	r4,r4,-7440
   8031c:	e17ffd17 	ldw	r5,-12(fp)
   80320:	0081ce40 	call	81ce4 <printf>
		//fprintf(stderr,"total macroblocks: %d\n",count);
		write_markers(width,height);
		printf("write_markers: Completed\n");


		for(; count>0; count--){
   80324:	e0bffd17 	ldw	r2,-12(fp)
   80328:	10bfffc4 	addi	r2,r2,-1
   8032c:	e0bffd15 	stw	r2,-12(fp)
   80330:	e0bffd17 	ldw	r2,-12(fp)
   80334:	103ff11e 	bne	r2,zero,802fc <processLoop+0x78>

			printf("huffman cycle %d completed\n", count);

		}
		//fprintf(stderr,"Closing bitstream\n");
		close_bitstream();
   80338:	0080e800 	call	80e80 <close_bitstream>
		//#pragma flush
		//SET_DONE();
		SEND2(1);
   8033c:	01000044 	movi	r4,1
   80340:	00802240 	call	80224 <SEND2>
		ledBlink(5);
   80344:	01000144 	movi	r4,5
   80348:	0081c340 	call	81c34 <ledBlink>
		break;
   8034c:	0001883a 	nop

	}

	printf("\n Finished !\n");
   80350:	01000274 	movhi	r4,9
   80354:	2138c304 	addi	r4,r4,-7412
   80358:	0081da40 	call	81da4 <puts>
}
   8035c:	e037883a 	mov	sp,fp
   80360:	dfc00117 	ldw	ra,4(sp)
   80364:	df000017 	ldw	fp,0(sp)
   80368:	dec00204 	addi	sp,sp,8
   8036c:	f800283a 	ret

00080370 <write_markers>:

// Header for JPEG Encoder
void write_markers(uint32_t image_width, uint32_t image_height){
   80370:	defffa04 	addi	sp,sp,-24
   80374:	dfc00515 	stw	ra,20(sp)
   80378:	df000415 	stw	fp,16(sp)
   8037c:	df000404 	addi	fp,sp,16
   80380:	e13ffe15 	stw	r4,-8(fp)
   80384:	e17fff15 	stw	r5,-4(fp)
	uint16_t i, header_length;
	uint8_t number_of_components;

	// Start of image marker
	SEND1(0xFF);
   80388:	01003fc4 	movi	r4,255
   8038c:	00801f40 	call	801f4 <SEND1>
	SEND1(0xD8);
   80390:	01003604 	movi	r4,216
   80394:	00801f40 	call	801f4 <SEND1>

	// Quantization table marker
	SEND1(0xFF);
   80398:	01003fc4 	movi	r4,255
   8039c:	00801f40 	call	801f4 <SEND1>
	SEND1(0xDB);
   803a0:	010036c4 	movi	r4,219
   803a4:	00801f40 	call	801f4 <SEND1>

	// Quantization table length
	SEND1(0x00);
   803a8:	0009883a 	mov	r4,zero
   803ac:	00801f40 	call	801f4 <SEND1>
	SEND1(0x84);
   803b0:	01002104 	movi	r4,132
   803b4:	00801f40 	call	801f4 <SEND1>

	// Pq, Tq
	SEND1(0x00);
   803b8:	0009883a 	mov	r4,zero
   803bc:	00801f40 	call	801f4 <SEND1>

	// Lqt table
	for (i=0; i<64; i++){
   803c0:	e03ffc0d 	sth	zero,-16(fp)
   803c4:	00000706 	br	803e4 <write_markers+0x74>
		SEND1((uint8_t)read_DE()); //Lqt [i];
   803c8:	00819a80 	call	819a8 <read_DE>
   803cc:	10803fcc 	andi	r2,r2,255
   803d0:	1009883a 	mov	r4,r2
   803d4:	00801f40 	call	801f4 <SEND1>

	// Pq, Tq
	SEND1(0x00);

	// Lqt table
	for (i=0; i<64; i++){
   803d8:	e0bffc0b 	ldhu	r2,-16(fp)
   803dc:	10800044 	addi	r2,r2,1
   803e0:	e0bffc0d 	sth	r2,-16(fp)
   803e4:	e0bffc0b 	ldhu	r2,-16(fp)
   803e8:	10801030 	cmpltui	r2,r2,64
   803ec:	103ff61e 	bne	r2,zero,803c8 <write_markers+0x58>
		SEND1((uint8_t)read_DE()); //Lqt [i];
	}
	// Pq, Tq
	SEND1(0x01);
   803f0:	01000044 	movi	r4,1
   803f4:	00801f40 	call	801f4 <SEND1>

	// Cqt table
	for (i=0; i<64; i++){
   803f8:	e03ffc0d 	sth	zero,-16(fp)
   803fc:	00000706 	br	8041c <write_markers+0xac>
		SEND1((uint8_t)read_DE()); //Cqt [i];
   80400:	00819a80 	call	819a8 <read_DE>
   80404:	10803fcc 	andi	r2,r2,255
   80408:	1009883a 	mov	r4,r2
   8040c:	00801f40 	call	801f4 <SEND1>
	}
	// Pq, Tq
	SEND1(0x01);

	// Cqt table
	for (i=0; i<64; i++){
   80410:	e0bffc0b 	ldhu	r2,-16(fp)
   80414:	10800044 	addi	r2,r2,1
   80418:	e0bffc0d 	sth	r2,-16(fp)
   8041c:	e0bffc0b 	ldhu	r2,-16(fp)
   80420:	10801030 	cmpltui	r2,r2,64
   80424:	103ff61e 	bne	r2,zero,80400 <write_markers+0x90>
		SEND1((uint8_t)read_DE()); //Cqt [i];
	}

	// huffman table(DHT)
	for (i=0; i<210; i++){
   80428:	e03ffc0d 	sth	zero,-16(fp)
   8042c:	00001906 	br	80494 <write_markers+0x124>
		SEND1((uint8_t) (markerdata [i] >> 8));
   80430:	e0bffc0b 	ldhu	r2,-16(fp)
   80434:	00c00274 	movhi	r3,9
   80438:	18fb4b04 	addi	r3,r3,-4820
   8043c:	1085883a 	add	r2,r2,r2
   80440:	1885883a 	add	r2,r3,r2
   80444:	1080000b 	ldhu	r2,0(r2)
   80448:	10bfffcc 	andi	r2,r2,65535
   8044c:	10a0001c 	xori	r2,r2,32768
   80450:	10a00004 	addi	r2,r2,-32768
   80454:	1005d23a 	srai	r2,r2,8
   80458:	10803fcc 	andi	r2,r2,255
   8045c:	1009883a 	mov	r4,r2
   80460:	00801f40 	call	801f4 <SEND1>
		SEND1((uint8_t) markerdata [i]);
   80464:	e0bffc0b 	ldhu	r2,-16(fp)
   80468:	00c00274 	movhi	r3,9
   8046c:	18fb4b04 	addi	r3,r3,-4820
   80470:	1085883a 	add	r2,r2,r2
   80474:	1885883a 	add	r2,r3,r2
   80478:	1080000b 	ldhu	r2,0(r2)
   8047c:	10803fcc 	andi	r2,r2,255
   80480:	1009883a 	mov	r4,r2
   80484:	00801f40 	call	801f4 <SEND1>
	for (i=0; i<64; i++){
		SEND1((uint8_t)read_DE()); //Cqt [i];
	}

	// huffman table(DHT)
	for (i=0; i<210; i++){
   80488:	e0bffc0b 	ldhu	r2,-16(fp)
   8048c:	10800044 	addi	r2,r2,1
   80490:	e0bffc0d 	sth	r2,-16(fp)
   80494:	e0bffc0b 	ldhu	r2,-16(fp)
   80498:	108034b0 	cmpltui	r2,r2,210
   8049c:	103fe41e 	bne	r2,zero,80430 <write_markers+0xc0>
	}

	//if (image_format == FOUR_ZERO_ZERO)
	//	number_of_components = 1;
	//else
	number_of_components = 3;
   804a0:	008000c4 	movi	r2,3
   804a4:	e0bffc85 	stb	r2,-14(fp)

	// Frame header(SOF)

	// Start of frame marker
	SEND1(0xFF);
   804a8:	01003fc4 	movi	r4,255
   804ac:	00801f40 	call	801f4 <SEND1>
	SEND1(0xC0);
   804b0:	01003004 	movi	r4,192
   804b4:	00801f40 	call	801f4 <SEND1>

	header_length = (uint16_t) (8 + 3 * number_of_components);
   804b8:	e0fffc83 	ldbu	r3,-14(fp)
   804bc:	1805883a 	mov	r2,r3
   804c0:	1085883a 	add	r2,r2,r2
   804c4:	10c5883a 	add	r2,r2,r3
   804c8:	10800204 	addi	r2,r2,8
   804cc:	e0bffd0d 	sth	r2,-12(fp)

	// Frame header length
	SEND1((uint8_t) (header_length >> 8));
   804d0:	e0bffd0b 	ldhu	r2,-12(fp)
   804d4:	1004d23a 	srli	r2,r2,8
   804d8:	10803fcc 	andi	r2,r2,255
   804dc:	1009883a 	mov	r4,r2
   804e0:	00801f40 	call	801f4 <SEND1>
	SEND1((uint8_t) header_length);
   804e4:	e0bffd0b 	ldhu	r2,-12(fp)
   804e8:	10803fcc 	andi	r2,r2,255
   804ec:	1009883a 	mov	r4,r2
   804f0:	00801f40 	call	801f4 <SEND1>

	// Precision (P)
	SEND1(0x08);
   804f4:	01000204 	movi	r4,8
   804f8:	00801f40 	call	801f4 <SEND1>

	// image height
	SEND1((uint8_t) (image_height >> 8));
   804fc:	e0bfff17 	ldw	r2,-4(fp)
   80500:	1004d23a 	srli	r2,r2,8
   80504:	10803fcc 	andi	r2,r2,255
   80508:	1009883a 	mov	r4,r2
   8050c:	00801f40 	call	801f4 <SEND1>
	SEND1((uint8_t) image_height);
   80510:	e0bfff17 	ldw	r2,-4(fp)
   80514:	10803fcc 	andi	r2,r2,255
   80518:	1009883a 	mov	r4,r2
   8051c:	00801f40 	call	801f4 <SEND1>

	// image width
	SEND1((uint8_t) (image_width >> 8));
   80520:	e0bffe17 	ldw	r2,-8(fp)
   80524:	1004d23a 	srli	r2,r2,8
   80528:	10803fcc 	andi	r2,r2,255
   8052c:	1009883a 	mov	r4,r2
   80530:	00801f40 	call	801f4 <SEND1>
	SEND1((uint8_t) image_width);
   80534:	e0bffe17 	ldw	r2,-8(fp)
   80538:	10803fcc 	andi	r2,r2,255
   8053c:	1009883a 	mov	r4,r2
   80540:	00801f40 	call	801f4 <SEND1>

	// Nf
	SEND1(number_of_components);
   80544:	e0bffc83 	ldbu	r2,-14(fp)
   80548:	1009883a 	mov	r4,r2
   8054c:	00801f40 	call	801f4 <SEND1>
	//	*output_ptr++ = 0x11;
	//	*output_ptr++ = 0x00;
	//}
	//else
	//{
	SEND1(0x01);
   80550:	01000044 	movi	r4,1
   80554:	00801f40 	call	801f4 <SEND1>
	//if (image_format == FOUR_TWO_ZERO)
	//	*output_ptr++ = 0x22;
	//else if (image_format == FOUR_TWO_TWO)
	//	*output_ptr++ = 0x21;
	//else
	SEND1(0x11);
   80558:	01000444 	movi	r4,17
   8055c:	00801f40 	call	801f4 <SEND1>

	SEND1(0x00);
   80560:	0009883a 	mov	r4,zero
   80564:	00801f40 	call	801f4 <SEND1>

	SEND1(0x02);
   80568:	01000084 	movi	r4,2
   8056c:	00801f40 	call	801f4 <SEND1>
	SEND1(0x11);
   80570:	01000444 	movi	r4,17
   80574:	00801f40 	call	801f4 <SEND1>
	SEND1(0x01);
   80578:	01000044 	movi	r4,1
   8057c:	00801f40 	call	801f4 <SEND1>

	SEND1(0x03);
   80580:	010000c4 	movi	r4,3
   80584:	00801f40 	call	801f4 <SEND1>
	SEND1(0x11);
   80588:	01000444 	movi	r4,17
   8058c:	00801f40 	call	801f4 <SEND1>
	SEND1(0x01);
   80590:	01000044 	movi	r4,1
   80594:	00801f40 	call	801f4 <SEND1>
	//}

	// Scan header(SOF)

	// Start of scan marker
	SEND1(0xFF);
   80598:	01003fc4 	movi	r4,255
   8059c:	00801f40 	call	801f4 <SEND1>
	SEND1(0xDA);
   805a0:	01003684 	movi	r4,218
   805a4:	00801f40 	call	801f4 <SEND1>

	header_length = (uint16_t) (6 + (number_of_components << 1));
   805a8:	e0bffc83 	ldbu	r2,-14(fp)
   805ac:	1085883a 	add	r2,r2,r2
   805b0:	10800184 	addi	r2,r2,6
   805b4:	e0bffd0d 	sth	r2,-12(fp)

	// Scan header length
	SEND1((uint8_t) (header_length >> 8));
   805b8:	e0bffd0b 	ldhu	r2,-12(fp)
   805bc:	1004d23a 	srli	r2,r2,8
   805c0:	10803fcc 	andi	r2,r2,255
   805c4:	1009883a 	mov	r4,r2
   805c8:	00801f40 	call	801f4 <SEND1>
	SEND1((uint8_t) header_length);
   805cc:	e0bffd0b 	ldhu	r2,-12(fp)
   805d0:	10803fcc 	andi	r2,r2,255
   805d4:	1009883a 	mov	r4,r2
   805d8:	00801f40 	call	801f4 <SEND1>

	// Ns
	SEND1(number_of_components);
   805dc:	e0bffc83 	ldbu	r2,-14(fp)
   805e0:	1009883a 	mov	r4,r2
   805e4:	00801f40 	call	801f4 <SEND1>
	//	*output_ptr++ = 0x01;
	//	*output_ptr++ = 0x00;
	//}
	//else
	//{
	SEND1(0x01);
   805e8:	01000044 	movi	r4,1
   805ec:	00801f40 	call	801f4 <SEND1>
	SEND1(0x00);
   805f0:	0009883a 	mov	r4,zero
   805f4:	00801f40 	call	801f4 <SEND1>

	SEND1(0x02);
   805f8:	01000084 	movi	r4,2
   805fc:	00801f40 	call	801f4 <SEND1>
	SEND1(0x11);
   80600:	01000444 	movi	r4,17
   80604:	00801f40 	call	801f4 <SEND1>

	SEND1(0x03);
   80608:	010000c4 	movi	r4,3
   8060c:	00801f40 	call	801f4 <SEND1>
	SEND1(0x11);
   80610:	01000444 	movi	r4,17
   80614:	00801f40 	call	801f4 <SEND1>
	//}

	SEND1(0x00);
   80618:	0009883a 	mov	r4,zero
   8061c:	00801f40 	call	801f4 <SEND1>
	SEND1(0x3F);
   80620:	01000fc4 	movi	r4,63
   80624:	00801f40 	call	801f4 <SEND1>
	SEND1(0x00);
   80628:	0009883a 	mov	r4,zero
   8062c:	00801f40 	call	801f4 <SEND1>

}
   80630:	e037883a 	mov	sp,fp
   80634:	dfc00117 	ldw	ra,4(sp)
   80638:	df000017 	ldw	fp,0(sp)
   8063c:	dec00204 	addi	sp,sp,8
   80640:	f800283a 	ret

00080644 <huffman>:

void huffman(uint16_t component){
   80644:	defff104 	addi	sp,sp,-60
   80648:	dfc00e15 	stw	ra,56(sp)
   8064c:	df000d15 	stw	fp,52(sp)
   80650:	df000d04 	addi	fp,sp,52
   80654:	2005883a 	mov	r2,r4
   80658:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t *DcCodeTable, *DcSizeTable, *AcCodeTable, *AcSizeTable;

	//static int16_tldc1 = 0, ldc2 = 0, ldc3 = 0;

	int16_t *Temp_Ptr, Coeff, LastDc;
	uint16_t AbsCoeff, HuffCode, HuffSize, RunLength=0, DataSize=0, index;
   8065c:	e03ff98d 	sth	zero,-26(fp)
   80660:	e03ffa0d 	sth	zero,-24(fp)
	uint8_t out;

	//Temp_Ptr = Temp;
	//Coeff = *Temp_Ptr++;

	Coeff = (int16_t)read_DE();
   80664:	00819a80 	call	819a8 <read_DE>
   80668:	e0bff80d 	sth	r2,-32(fp)
	//printf("Coeff: %d\n", Coeff);

	if (component == 1){
   8066c:	e0bfff0b 	ldhu	r2,-4(fp)
   80670:	10800058 	cmpnei	r2,r2,1
   80674:	1000111e 	bne	r2,zero,806bc <huffman+0x78>
		DcCodeTable = luminance_dc_code_table;
   80678:	00800274 	movhi	r2,9
   8067c:	10b9af04 	addi	r2,r2,-6468
   80680:	e0bff415 	stw	r2,-48(fp)
		DcSizeTable = luminance_dc_size_table;
   80684:	00800274 	movhi	r2,9
   80688:	10b9b504 	addi	r2,r2,-6444
   8068c:	e0bff515 	stw	r2,-44(fp)
		AcCodeTable = luminance_ac_code_table;
   80690:	00800274 	movhi	r2,9
   80694:	10b9c704 	addi	r2,r2,-6372
   80698:	e0bff615 	stw	r2,-40(fp)
		AcSizeTable = luminance_ac_size_table;
   8069c:	00800274 	movhi	r2,9
   806a0:	10ba1804 	addi	r2,r2,-6048
   806a4:	e0bff715 	stw	r2,-36(fp)

		LastDc = ldc1;
   806a8:	d0a8ab8b 	ldhu	r2,-23890(gp)
   806ac:	e0bff88d 	sth	r2,-30(fp)
		ldc1 = Coeff;
   806b0:	e0bff80b 	ldhu	r2,-32(fp)
   806b4:	d0a8ab8d 	sth	r2,-23890(gp)
   806b8:	00001806 	br	8071c <huffman+0xd8>

	} else {
		DcCodeTable = chrominance_dc_code_table;
   806bc:	00800274 	movhi	r2,9
   806c0:	10b9bb04 	addi	r2,r2,-6420
   806c4:	e0bff415 	stw	r2,-48(fp)
		DcSizeTable = chrominance_dc_size_table;
   806c8:	00800274 	movhi	r2,9
   806cc:	10b9c104 	addi	r2,r2,-6396
   806d0:	e0bff515 	stw	r2,-44(fp)
		AcCodeTable = chrominance_ac_code_table;
   806d4:	00800274 	movhi	r2,9
   806d8:	10ba6904 	addi	r2,r2,-5724
   806dc:	e0bff615 	stw	r2,-40(fp)
		AcSizeTable = chrominance_ac_size_table;
   806e0:	00800274 	movhi	r2,9
   806e4:	10baba04 	addi	r2,r2,-5400
   806e8:	e0bff715 	stw	r2,-36(fp)

		if (component == 2)	{
   806ec:	e0bfff0b 	ldhu	r2,-4(fp)
   806f0:	10800098 	cmpnei	r2,r2,2
   806f4:	1000051e 	bne	r2,zero,8070c <huffman+0xc8>
			LastDc = ldc2;
   806f8:	d0a8ac0b 	ldhu	r2,-23888(gp)
   806fc:	e0bff88d 	sth	r2,-30(fp)
			ldc2 = Coeff;
   80700:	e0bff80b 	ldhu	r2,-32(fp)
   80704:	d0a8ac0d 	sth	r2,-23888(gp)
   80708:	00000406 	br	8071c <huffman+0xd8>

		}else {
			LastDc = ldc3;
   8070c:	d0a8ac8b 	ldhu	r2,-23886(gp)
   80710:	e0bff88d 	sth	r2,-30(fp)
			ldc3 = Coeff;
   80714:	e0bff80b 	ldhu	r2,-32(fp)
   80718:	d0a8ac8d 	sth	r2,-23886(gp)
		}
	}

	Coeff -= LastDc;
   8071c:	e0fff80b 	ldhu	r3,-32(fp)
   80720:	e0bff88b 	ldhu	r2,-30(fp)
   80724:	1885c83a 	sub	r2,r3,r2
   80728:	e0bff80d 	sth	r2,-32(fp)

	AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;
   8072c:	e0bff80f 	ldh	r2,-32(fp)
   80730:	1000060e 	bge	r2,zero,8074c <huffman+0x108>
   80734:	e0bff80b 	ldhu	r2,-32(fp)
   80738:	0085c83a 	sub	r2,zero,r2
   8073c:	e0fff80b 	ldhu	r3,-32(fp)
   80740:	18ffffc4 	addi	r3,r3,-1
   80744:	e0fff80d 	sth	r3,-32(fp)
   80748:	00000106 	br	80750 <huffman+0x10c>
   8074c:	e0bff80b 	ldhu	r2,-32(fp)
   80750:	e0bff90d 	sth	r2,-28(fp)

	while (AbsCoeff != 0){
   80754:	00000606 	br	80770 <huffman+0x12c>
		AbsCoeff >>= 1;
   80758:	e0bff90b 	ldhu	r2,-28(fp)
   8075c:	1004d07a 	srli	r2,r2,1
   80760:	e0bff90d 	sth	r2,-28(fp)
		DataSize++;
   80764:	e0bffa0b 	ldhu	r2,-24(fp)
   80768:	10800044 	addi	r2,r2,1
   8076c:	e0bffa0d 	sth	r2,-24(fp)

	Coeff -= LastDc;

	AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;

	while (AbsCoeff != 0){
   80770:	e0bff90b 	ldhu	r2,-28(fp)
   80774:	103ff81e 	bne	r2,zero,80758 <huffman+0x114>
		AbsCoeff >>= 1;
		DataSize++;
	}

	HuffCode = DcCodeTable [DataSize];
   80778:	e0bffa0b 	ldhu	r2,-24(fp)
   8077c:	1085883a 	add	r2,r2,r2
   80780:	e0fff417 	ldw	r3,-48(fp)
   80784:	1885883a 	add	r2,r3,r2
   80788:	1080000b 	ldhu	r2,0(r2)
   8078c:	e0bffa8d 	sth	r2,-22(fp)
	HuffSize = DcSizeTable [DataSize];
   80790:	e0bffa0b 	ldhu	r2,-24(fp)
   80794:	1085883a 	add	r2,r2,r2
   80798:	e0fff517 	ldw	r3,-44(fp)
   8079c:	1885883a 	add	r2,r3,r2
   807a0:	1080000b 	ldhu	r2,0(r2)
   807a4:	e0bffb0d 	sth	r2,-20(fp)

	Coeff &= (1 << DataSize) - 1;
   807a8:	e0bffa0b 	ldhu	r2,-24(fp)
   807ac:	00c00044 	movi	r3,1
   807b0:	1884983a 	sll	r2,r3,r2
   807b4:	10bfffc4 	addi	r2,r2,-1
   807b8:	1007883a 	mov	r3,r2
   807bc:	e0bff80b 	ldhu	r2,-32(fp)
   807c0:	1884703a 	and	r2,r3,r2
   807c4:	e0bff80d 	sth	r2,-32(fp)
	data = (HuffCode << DataSize) | Coeff;
   807c8:	e0fffa8b 	ldhu	r3,-22(fp)
   807cc:	e0bffa0b 	ldhu	r2,-24(fp)
   807d0:	1886983a 	sll	r3,r3,r2
   807d4:	e0bff80f 	ldh	r2,-32(fp)
   807d8:	1884b03a 	or	r2,r3,r2
   807dc:	e0bffc15 	stw	r2,-16(fp)
	numbits = HuffSize + DataSize;
   807e0:	e0fffb0b 	ldhu	r3,-20(fp)
   807e4:	e0bffa0b 	ldhu	r2,-24(fp)
   807e8:	1885883a 	add	r2,r3,r2
   807ec:	e0bffd0d 	sth	r2,-12(fp)

	PUTBITS
   807f0:	d0e8ab0b 	ldhu	r3,-23892(gp)
   807f4:	e0bffd0b 	ldhu	r2,-12(fp)
   807f8:	1885883a 	add	r2,r3,r2
   807fc:	10bff804 	addi	r2,r2,-32
   80800:	e0bffd8d 	sth	r2,-10(fp)
   80804:	e0bffd8f 	ldh	r2,-10(fp)
   80808:	10000b0e 	bge	r2,zero,80838 <huffman+0x1f4>
   8080c:	d0e8aa17 	ldw	r3,-23896(gp)
   80810:	e0bffd0b 	ldhu	r2,-12(fp)
   80814:	1886983a 	sll	r3,r3,r2
   80818:	e0bffc17 	ldw	r2,-16(fp)
   8081c:	1884b03a 	or	r2,r3,r2
   80820:	d0a8aa15 	stw	r2,-23896(gp)
   80824:	d0e8ab0b 	ldhu	r3,-23892(gp)
   80828:	e0bffd0b 	ldhu	r2,-12(fp)
   8082c:	1885883a 	add	r2,r3,r2
   80830:	d0a8ab0d 	sth	r2,-23892(gp)
   80834:	00003a06 	br	80920 <huffman+0x2dc>
   80838:	d0e8aa17 	ldw	r3,-23896(gp)
   8083c:	d0a8ab0b 	ldhu	r2,-23892(gp)
   80840:	10bfffcc 	andi	r2,r2,65535
   80844:	01000804 	movi	r4,32
   80848:	2085c83a 	sub	r2,r4,r2
   8084c:	1886983a 	sll	r3,r3,r2
   80850:	e0bffd8f 	ldh	r2,-10(fp)
   80854:	e13ffc17 	ldw	r4,-16(fp)
   80858:	2084d83a 	srl	r2,r4,r2
   8085c:	1884b03a 	or	r2,r3,r2
   80860:	d0a8aa15 	stw	r2,-23896(gp)
   80864:	d0a8aa17 	ldw	r2,-23896(gp)
   80868:	1004d63a 	srli	r2,r2,24
   8086c:	e0bffe05 	stb	r2,-8(fp)
   80870:	e0bffe03 	ldbu	r2,-8(fp)
   80874:	1009883a 	mov	r4,r2
   80878:	00801f40 	call	801f4 <SEND1>
   8087c:	e0bffe03 	ldbu	r2,-8(fp)
   80880:	10803fd8 	cmpnei	r2,r2,255
   80884:	1000021e 	bne	r2,zero,80890 <huffman+0x24c>
   80888:	0009883a 	mov	r4,zero
   8088c:	00801f40 	call	801f4 <SEND1>
   80890:	d0a8aa17 	ldw	r2,-23896(gp)
   80894:	1004d43a 	srli	r2,r2,16
   80898:	e0bffe05 	stb	r2,-8(fp)
   8089c:	e0bffe03 	ldbu	r2,-8(fp)
   808a0:	1009883a 	mov	r4,r2
   808a4:	00801f40 	call	801f4 <SEND1>
   808a8:	e0bffe03 	ldbu	r2,-8(fp)
   808ac:	10803fd8 	cmpnei	r2,r2,255
   808b0:	1000021e 	bne	r2,zero,808bc <huffman+0x278>
   808b4:	0009883a 	mov	r4,zero
   808b8:	00801f40 	call	801f4 <SEND1>
   808bc:	d0a8aa17 	ldw	r2,-23896(gp)
   808c0:	1004d23a 	srli	r2,r2,8
   808c4:	e0bffe05 	stb	r2,-8(fp)
   808c8:	e0bffe03 	ldbu	r2,-8(fp)
   808cc:	1009883a 	mov	r4,r2
   808d0:	00801f40 	call	801f4 <SEND1>
   808d4:	e0bffe03 	ldbu	r2,-8(fp)
   808d8:	10803fd8 	cmpnei	r2,r2,255
   808dc:	1000021e 	bne	r2,zero,808e8 <huffman+0x2a4>
   808e0:	0009883a 	mov	r4,zero
   808e4:	00801f40 	call	801f4 <SEND1>
   808e8:	d0a8aa17 	ldw	r2,-23896(gp)
   808ec:	e0bffe05 	stb	r2,-8(fp)
   808f0:	e0bffe03 	ldbu	r2,-8(fp)
   808f4:	1009883a 	mov	r4,r2
   808f8:	00801f40 	call	801f4 <SEND1>
   808fc:	e0bffe03 	ldbu	r2,-8(fp)
   80900:	10803fd8 	cmpnei	r2,r2,255
   80904:	1000021e 	bne	r2,zero,80910 <huffman+0x2cc>
   80908:	0009883a 	mov	r4,zero
   8090c:	00801f40 	call	801f4 <SEND1>
   80910:	e0bffc17 	ldw	r2,-16(fp)
   80914:	d0a8aa15 	stw	r2,-23896(gp)
   80918:	e0bffd8b 	ldhu	r2,-10(fp)
   8091c:	d0a8ab0d 	sth	r2,-23892(gp)

	for (i=63; i>0; i--){//xt_iss_profile_disable();
   80920:	00800fc4 	movi	r2,63
   80924:	e0bff30d 	sth	r2,-52(fp)
   80928:	0000f906 	br	80d10 <huffman+0x6cc>
		//if ((Coeff = *Temp_Ptr++) != 0)

		if ((Coeff = (int16_t)read_DE()) != 0){//xt_iss_profile_enable();
   8092c:	00819a80 	call	819a8 <read_DE>
   80930:	e0bff80d 	sth	r2,-32(fp)
   80934:	e0bff80f 	ldh	r2,-32(fp)
   80938:	1000ef26 	beq	r2,zero,80cf8 <huffman+0x6b4>
			while (RunLength > 15)	{
   8093c:	00005706 	br	80a9c <huffman+0x458>
				RunLength -= 16;
   80940:	e0bff98b 	ldhu	r2,-26(fp)
   80944:	10bffc04 	addi	r2,r2,-16
   80948:	e0bff98d 	sth	r2,-26(fp)
				data = AcCodeTable [161];
   8094c:	e0bff617 	ldw	r2,-40(fp)
   80950:	10805084 	addi	r2,r2,322
   80954:	1080000b 	ldhu	r2,0(r2)
   80958:	10bfffcc 	andi	r2,r2,65535
   8095c:	e0bffc15 	stw	r2,-16(fp)
				numbits = AcSizeTable [161];
   80960:	e0bff717 	ldw	r2,-36(fp)
   80964:	1080508b 	ldhu	r2,322(r2)
   80968:	e0bffd0d 	sth	r2,-12(fp)
				PUTBITS
   8096c:	d0e8ab0b 	ldhu	r3,-23892(gp)
   80970:	e0bffd0b 	ldhu	r2,-12(fp)
   80974:	1885883a 	add	r2,r3,r2
   80978:	10bff804 	addi	r2,r2,-32
   8097c:	e0bffd8d 	sth	r2,-10(fp)
   80980:	e0bffd8f 	ldh	r2,-10(fp)
   80984:	10000b0e 	bge	r2,zero,809b4 <huffman+0x370>
   80988:	d0e8aa17 	ldw	r3,-23896(gp)
   8098c:	e0bffd0b 	ldhu	r2,-12(fp)
   80990:	1886983a 	sll	r3,r3,r2
   80994:	e0bffc17 	ldw	r2,-16(fp)
   80998:	1884b03a 	or	r2,r3,r2
   8099c:	d0a8aa15 	stw	r2,-23896(gp)
   809a0:	d0e8ab0b 	ldhu	r3,-23892(gp)
   809a4:	e0bffd0b 	ldhu	r2,-12(fp)
   809a8:	1885883a 	add	r2,r3,r2
   809ac:	d0a8ab0d 	sth	r2,-23892(gp)
   809b0:	00003a06 	br	80a9c <huffman+0x458>
   809b4:	d0e8aa17 	ldw	r3,-23896(gp)
   809b8:	d0a8ab0b 	ldhu	r2,-23892(gp)
   809bc:	10bfffcc 	andi	r2,r2,65535
   809c0:	01000804 	movi	r4,32
   809c4:	2085c83a 	sub	r2,r4,r2
   809c8:	1886983a 	sll	r3,r3,r2
   809cc:	e0bffd8f 	ldh	r2,-10(fp)
   809d0:	e13ffc17 	ldw	r4,-16(fp)
   809d4:	2084d83a 	srl	r2,r4,r2
   809d8:	1884b03a 	or	r2,r3,r2
   809dc:	d0a8aa15 	stw	r2,-23896(gp)
   809e0:	d0a8aa17 	ldw	r2,-23896(gp)
   809e4:	1004d63a 	srli	r2,r2,24
   809e8:	e0bffe05 	stb	r2,-8(fp)
   809ec:	e0bffe03 	ldbu	r2,-8(fp)
   809f0:	1009883a 	mov	r4,r2
   809f4:	00801f40 	call	801f4 <SEND1>
   809f8:	e0bffe03 	ldbu	r2,-8(fp)
   809fc:	10803fd8 	cmpnei	r2,r2,255
   80a00:	1000021e 	bne	r2,zero,80a0c <huffman+0x3c8>
   80a04:	0009883a 	mov	r4,zero
   80a08:	00801f40 	call	801f4 <SEND1>
   80a0c:	d0a8aa17 	ldw	r2,-23896(gp)
   80a10:	1004d43a 	srli	r2,r2,16
   80a14:	e0bffe05 	stb	r2,-8(fp)
   80a18:	e0bffe03 	ldbu	r2,-8(fp)
   80a1c:	1009883a 	mov	r4,r2
   80a20:	00801f40 	call	801f4 <SEND1>
   80a24:	e0bffe03 	ldbu	r2,-8(fp)
   80a28:	10803fd8 	cmpnei	r2,r2,255
   80a2c:	1000021e 	bne	r2,zero,80a38 <huffman+0x3f4>
   80a30:	0009883a 	mov	r4,zero
   80a34:	00801f40 	call	801f4 <SEND1>
   80a38:	d0a8aa17 	ldw	r2,-23896(gp)
   80a3c:	1004d23a 	srli	r2,r2,8
   80a40:	e0bffe05 	stb	r2,-8(fp)
   80a44:	e0bffe03 	ldbu	r2,-8(fp)
   80a48:	1009883a 	mov	r4,r2
   80a4c:	00801f40 	call	801f4 <SEND1>
   80a50:	e0bffe03 	ldbu	r2,-8(fp)
   80a54:	10803fd8 	cmpnei	r2,r2,255
   80a58:	1000021e 	bne	r2,zero,80a64 <huffman+0x420>
   80a5c:	0009883a 	mov	r4,zero
   80a60:	00801f40 	call	801f4 <SEND1>
   80a64:	d0a8aa17 	ldw	r2,-23896(gp)
   80a68:	e0bffe05 	stb	r2,-8(fp)
   80a6c:	e0bffe03 	ldbu	r2,-8(fp)
   80a70:	1009883a 	mov	r4,r2
   80a74:	00801f40 	call	801f4 <SEND1>
   80a78:	e0bffe03 	ldbu	r2,-8(fp)
   80a7c:	10803fd8 	cmpnei	r2,r2,255
   80a80:	1000021e 	bne	r2,zero,80a8c <huffman+0x448>
   80a84:	0009883a 	mov	r4,zero
   80a88:	00801f40 	call	801f4 <SEND1>
   80a8c:	e0bffc17 	ldw	r2,-16(fp)
   80a90:	d0a8aa15 	stw	r2,-23896(gp)
   80a94:	e0bffd8b 	ldhu	r2,-10(fp)
   80a98:	d0a8ab0d 	sth	r2,-23892(gp)

	for (i=63; i>0; i--){//xt_iss_profile_disable();
		//if ((Coeff = *Temp_Ptr++) != 0)

		if ((Coeff = (int16_t)read_DE()) != 0){//xt_iss_profile_enable();
			while (RunLength > 15)	{
   80a9c:	e0bff98b 	ldhu	r2,-26(fp)
   80aa0:	10800428 	cmpgeui	r2,r2,16
   80aa4:	103fa61e 	bne	r2,zero,80940 <huffman+0x2fc>
				data = AcCodeTable [161];
				numbits = AcSizeTable [161];
				PUTBITS
			}

			AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;
   80aa8:	e0bff80f 	ldh	r2,-32(fp)
   80aac:	1000060e 	bge	r2,zero,80ac8 <huffman+0x484>
   80ab0:	e0bff80b 	ldhu	r2,-32(fp)
   80ab4:	0085c83a 	sub	r2,zero,r2
   80ab8:	e0fff80b 	ldhu	r3,-32(fp)
   80abc:	18ffffc4 	addi	r3,r3,-1
   80ac0:	e0fff80d 	sth	r3,-32(fp)
   80ac4:	00000106 	br	80acc <huffman+0x488>
   80ac8:	e0bff80b 	ldhu	r2,-32(fp)
   80acc:	e0bff90d 	sth	r2,-28(fp)

			if (AbsCoeff >> 8 == 0){
   80ad0:	e0bff90b 	ldhu	r2,-28(fp)
   80ad4:	1004d23a 	srli	r2,r2,8
   80ad8:	10bfffcc 	andi	r2,r2,65535
   80adc:	1000081e 	bne	r2,zero,80b00 <huffman+0x4bc>
				DataSize = bitsize [AbsCoeff];
   80ae0:	e0bff90b 	ldhu	r2,-28(fp)
   80ae4:	00c00274 	movhi	r3,9
   80ae8:	18fb0b04 	addi	r3,r3,-5076
   80aec:	1885883a 	add	r2,r3,r2
   80af0:	10800003 	ldbu	r2,0(r2)
   80af4:	10803fcc 	andi	r2,r2,255
   80af8:	e0bffa0d 	sth	r2,-24(fp)
   80afc:	00000a06 	br	80b28 <huffman+0x4e4>
			} else{
				DataSize = bitsize [AbsCoeff >> 8] + 8;
   80b00:	e0bff90b 	ldhu	r2,-28(fp)
   80b04:	1004d23a 	srli	r2,r2,8
   80b08:	10bfffcc 	andi	r2,r2,65535
   80b0c:	00c00274 	movhi	r3,9
   80b10:	18fb0b04 	addi	r3,r3,-5076
   80b14:	1885883a 	add	r2,r3,r2
   80b18:	10800003 	ldbu	r2,0(r2)
   80b1c:	10803fcc 	andi	r2,r2,255
   80b20:	10800204 	addi	r2,r2,8
   80b24:	e0bffa0d 	sth	r2,-24(fp)
			}

			index = RunLength * 10 + DataSize;
   80b28:	e0bff98b 	ldhu	r2,-26(fp)
   80b2c:	1009883a 	mov	r4,r2
   80b30:	01400284 	movi	r5,10
   80b34:	0081c900 	call	81c90 <__mulsi3>
   80b38:	1007883a 	mov	r3,r2
   80b3c:	e0bffa0b 	ldhu	r2,-24(fp)
   80b40:	1885883a 	add	r2,r3,r2
   80b44:	e0bffe8d 	sth	r2,-6(fp)
			HuffCode = AcCodeTable [index];
   80b48:	e0bffe8b 	ldhu	r2,-6(fp)
   80b4c:	1085883a 	add	r2,r2,r2
   80b50:	e0fff617 	ldw	r3,-40(fp)
   80b54:	1885883a 	add	r2,r3,r2
   80b58:	1080000b 	ldhu	r2,0(r2)
   80b5c:	e0bffa8d 	sth	r2,-22(fp)
			HuffSize = AcSizeTable [index];
   80b60:	e0bffe8b 	ldhu	r2,-6(fp)
   80b64:	1085883a 	add	r2,r2,r2
   80b68:	e0fff717 	ldw	r3,-36(fp)
   80b6c:	1885883a 	add	r2,r3,r2
   80b70:	1080000b 	ldhu	r2,0(r2)
   80b74:	e0bffb0d 	sth	r2,-20(fp)

			Coeff &= (1 << DataSize) - 1;
   80b78:	e0bffa0b 	ldhu	r2,-24(fp)
   80b7c:	00c00044 	movi	r3,1
   80b80:	1884983a 	sll	r2,r3,r2
   80b84:	10bfffc4 	addi	r2,r2,-1
   80b88:	1007883a 	mov	r3,r2
   80b8c:	e0bff80b 	ldhu	r2,-32(fp)
   80b90:	1884703a 	and	r2,r3,r2
   80b94:	e0bff80d 	sth	r2,-32(fp)
			data = (HuffCode << DataSize) | Coeff;
   80b98:	e0fffa8b 	ldhu	r3,-22(fp)
   80b9c:	e0bffa0b 	ldhu	r2,-24(fp)
   80ba0:	1886983a 	sll	r3,r3,r2
   80ba4:	e0bff80f 	ldh	r2,-32(fp)
   80ba8:	1884b03a 	or	r2,r3,r2
   80bac:	e0bffc15 	stw	r2,-16(fp)
			numbits = HuffSize + DataSize;
   80bb0:	e0fffb0b 	ldhu	r3,-20(fp)
   80bb4:	e0bffa0b 	ldhu	r2,-24(fp)
   80bb8:	1885883a 	add	r2,r3,r2
   80bbc:	e0bffd0d 	sth	r2,-12(fp)

			PUTBITS
   80bc0:	d0e8ab0b 	ldhu	r3,-23892(gp)
   80bc4:	e0bffd0b 	ldhu	r2,-12(fp)
   80bc8:	1885883a 	add	r2,r3,r2
   80bcc:	10bff804 	addi	r2,r2,-32
   80bd0:	e0bffd8d 	sth	r2,-10(fp)
   80bd4:	e0bffd8f 	ldh	r2,-10(fp)
   80bd8:	10000b0e 	bge	r2,zero,80c08 <huffman+0x5c4>
   80bdc:	d0e8aa17 	ldw	r3,-23896(gp)
   80be0:	e0bffd0b 	ldhu	r2,-12(fp)
   80be4:	1886983a 	sll	r3,r3,r2
   80be8:	e0bffc17 	ldw	r2,-16(fp)
   80bec:	1884b03a 	or	r2,r3,r2
   80bf0:	d0a8aa15 	stw	r2,-23896(gp)
   80bf4:	d0e8ab0b 	ldhu	r3,-23892(gp)
   80bf8:	e0bffd0b 	ldhu	r2,-12(fp)
   80bfc:	1885883a 	add	r2,r3,r2
   80c00:	d0a8ab0d 	sth	r2,-23892(gp)
   80c04:	00003a06 	br	80cf0 <huffman+0x6ac>
   80c08:	d0e8aa17 	ldw	r3,-23896(gp)
   80c0c:	d0a8ab0b 	ldhu	r2,-23892(gp)
   80c10:	10bfffcc 	andi	r2,r2,65535
   80c14:	01000804 	movi	r4,32
   80c18:	2085c83a 	sub	r2,r4,r2
   80c1c:	1886983a 	sll	r3,r3,r2
   80c20:	e0bffd8f 	ldh	r2,-10(fp)
   80c24:	e13ffc17 	ldw	r4,-16(fp)
   80c28:	2084d83a 	srl	r2,r4,r2
   80c2c:	1884b03a 	or	r2,r3,r2
   80c30:	d0a8aa15 	stw	r2,-23896(gp)
   80c34:	d0a8aa17 	ldw	r2,-23896(gp)
   80c38:	1004d63a 	srli	r2,r2,24
   80c3c:	e0bffe05 	stb	r2,-8(fp)
   80c40:	e0bffe03 	ldbu	r2,-8(fp)
   80c44:	1009883a 	mov	r4,r2
   80c48:	00801f40 	call	801f4 <SEND1>
   80c4c:	e0bffe03 	ldbu	r2,-8(fp)
   80c50:	10803fd8 	cmpnei	r2,r2,255
   80c54:	1000021e 	bne	r2,zero,80c60 <huffman+0x61c>
   80c58:	0009883a 	mov	r4,zero
   80c5c:	00801f40 	call	801f4 <SEND1>
   80c60:	d0a8aa17 	ldw	r2,-23896(gp)
   80c64:	1004d43a 	srli	r2,r2,16
   80c68:	e0bffe05 	stb	r2,-8(fp)
   80c6c:	e0bffe03 	ldbu	r2,-8(fp)
   80c70:	1009883a 	mov	r4,r2
   80c74:	00801f40 	call	801f4 <SEND1>
   80c78:	e0bffe03 	ldbu	r2,-8(fp)
   80c7c:	10803fd8 	cmpnei	r2,r2,255
   80c80:	1000021e 	bne	r2,zero,80c8c <huffman+0x648>
   80c84:	0009883a 	mov	r4,zero
   80c88:	00801f40 	call	801f4 <SEND1>
   80c8c:	d0a8aa17 	ldw	r2,-23896(gp)
   80c90:	1004d23a 	srli	r2,r2,8
   80c94:	e0bffe05 	stb	r2,-8(fp)
   80c98:	e0bffe03 	ldbu	r2,-8(fp)
   80c9c:	1009883a 	mov	r4,r2
   80ca0:	00801f40 	call	801f4 <SEND1>
   80ca4:	e0bffe03 	ldbu	r2,-8(fp)
   80ca8:	10803fd8 	cmpnei	r2,r2,255
   80cac:	1000021e 	bne	r2,zero,80cb8 <huffman+0x674>
   80cb0:	0009883a 	mov	r4,zero
   80cb4:	00801f40 	call	801f4 <SEND1>
   80cb8:	d0a8aa17 	ldw	r2,-23896(gp)
   80cbc:	e0bffe05 	stb	r2,-8(fp)
   80cc0:	e0bffe03 	ldbu	r2,-8(fp)
   80cc4:	1009883a 	mov	r4,r2
   80cc8:	00801f40 	call	801f4 <SEND1>
   80ccc:	e0bffe03 	ldbu	r2,-8(fp)
   80cd0:	10803fd8 	cmpnei	r2,r2,255
   80cd4:	1000021e 	bne	r2,zero,80ce0 <huffman+0x69c>
   80cd8:	0009883a 	mov	r4,zero
   80cdc:	00801f40 	call	801f4 <SEND1>
   80ce0:	e0bffc17 	ldw	r2,-16(fp)
   80ce4:	d0a8aa15 	stw	r2,-23896(gp)
   80ce8:	e0bffd8b 	ldhu	r2,-10(fp)
   80cec:	d0a8ab0d 	sth	r2,-23892(gp)
			RunLength = 0;
   80cf0:	e03ff98d 	sth	zero,-26(fp)
   80cf4:	00000306 	br	80d04 <huffman+0x6c0>

		}else{
			RunLength++;
   80cf8:	e0bff98b 	ldhu	r2,-26(fp)
   80cfc:	10800044 	addi	r2,r2,1
   80d00:	e0bff98d 	sth	r2,-26(fp)
	data = (HuffCode << DataSize) | Coeff;
	numbits = HuffSize + DataSize;

	PUTBITS

	for (i=63; i>0; i--){//xt_iss_profile_disable();
   80d04:	e0bff30b 	ldhu	r2,-52(fp)
   80d08:	10bfffc4 	addi	r2,r2,-1
   80d0c:	e0bff30d 	sth	r2,-52(fp)
   80d10:	e0bff30b 	ldhu	r2,-52(fp)
   80d14:	103f051e 	bne	r2,zero,8092c <huffman+0x2e8>
		}else{
			RunLength++;
		}
	}

	if (RunLength != 0){
   80d18:	e0bff98b 	ldhu	r2,-26(fp)
   80d1c:	10005326 	beq	r2,zero,80e6c <huffman+0x828>
		data = AcCodeTable [0];
   80d20:	e0bff617 	ldw	r2,-40(fp)
   80d24:	1080000b 	ldhu	r2,0(r2)
   80d28:	10bfffcc 	andi	r2,r2,65535
   80d2c:	e0bffc15 	stw	r2,-16(fp)
		numbits = AcSizeTable [0];
   80d30:	e0bff717 	ldw	r2,-36(fp)
   80d34:	1080000b 	ldhu	r2,0(r2)
   80d38:	e0bffd0d 	sth	r2,-12(fp)
		PUTBITS
   80d3c:	d0e8ab0b 	ldhu	r3,-23892(gp)
   80d40:	e0bffd0b 	ldhu	r2,-12(fp)
   80d44:	1885883a 	add	r2,r3,r2
   80d48:	10bff804 	addi	r2,r2,-32
   80d4c:	e0bffd8d 	sth	r2,-10(fp)
   80d50:	e0bffd8f 	ldh	r2,-10(fp)
   80d54:	10000b0e 	bge	r2,zero,80d84 <huffman+0x740>
   80d58:	d0e8aa17 	ldw	r3,-23896(gp)
   80d5c:	e0bffd0b 	ldhu	r2,-12(fp)
   80d60:	1886983a 	sll	r3,r3,r2
   80d64:	e0bffc17 	ldw	r2,-16(fp)
   80d68:	1884b03a 	or	r2,r3,r2
   80d6c:	d0a8aa15 	stw	r2,-23896(gp)
   80d70:	d0e8ab0b 	ldhu	r3,-23892(gp)
   80d74:	e0bffd0b 	ldhu	r2,-12(fp)
   80d78:	1885883a 	add	r2,r3,r2
   80d7c:	d0a8ab0d 	sth	r2,-23892(gp)
   80d80:	00003a06 	br	80e6c <huffman+0x828>
   80d84:	d0e8aa17 	ldw	r3,-23896(gp)
   80d88:	d0a8ab0b 	ldhu	r2,-23892(gp)
   80d8c:	10bfffcc 	andi	r2,r2,65535
   80d90:	01000804 	movi	r4,32
   80d94:	2085c83a 	sub	r2,r4,r2
   80d98:	1886983a 	sll	r3,r3,r2
   80d9c:	e0bffd8f 	ldh	r2,-10(fp)
   80da0:	e13ffc17 	ldw	r4,-16(fp)
   80da4:	2084d83a 	srl	r2,r4,r2
   80da8:	1884b03a 	or	r2,r3,r2
   80dac:	d0a8aa15 	stw	r2,-23896(gp)
   80db0:	d0a8aa17 	ldw	r2,-23896(gp)
   80db4:	1004d63a 	srli	r2,r2,24
   80db8:	e0bffe05 	stb	r2,-8(fp)
   80dbc:	e0bffe03 	ldbu	r2,-8(fp)
   80dc0:	1009883a 	mov	r4,r2
   80dc4:	00801f40 	call	801f4 <SEND1>
   80dc8:	e0bffe03 	ldbu	r2,-8(fp)
   80dcc:	10803fd8 	cmpnei	r2,r2,255
   80dd0:	1000021e 	bne	r2,zero,80ddc <huffman+0x798>
   80dd4:	0009883a 	mov	r4,zero
   80dd8:	00801f40 	call	801f4 <SEND1>
   80ddc:	d0a8aa17 	ldw	r2,-23896(gp)
   80de0:	1004d43a 	srli	r2,r2,16
   80de4:	e0bffe05 	stb	r2,-8(fp)
   80de8:	e0bffe03 	ldbu	r2,-8(fp)
   80dec:	1009883a 	mov	r4,r2
   80df0:	00801f40 	call	801f4 <SEND1>
   80df4:	e0bffe03 	ldbu	r2,-8(fp)
   80df8:	10803fd8 	cmpnei	r2,r2,255
   80dfc:	1000021e 	bne	r2,zero,80e08 <huffman+0x7c4>
   80e00:	0009883a 	mov	r4,zero
   80e04:	00801f40 	call	801f4 <SEND1>
   80e08:	d0a8aa17 	ldw	r2,-23896(gp)
   80e0c:	1004d23a 	srli	r2,r2,8
   80e10:	e0bffe05 	stb	r2,-8(fp)
   80e14:	e0bffe03 	ldbu	r2,-8(fp)
   80e18:	1009883a 	mov	r4,r2
   80e1c:	00801f40 	call	801f4 <SEND1>
   80e20:	e0bffe03 	ldbu	r2,-8(fp)
   80e24:	10803fd8 	cmpnei	r2,r2,255
   80e28:	1000021e 	bne	r2,zero,80e34 <huffman+0x7f0>
   80e2c:	0009883a 	mov	r4,zero
   80e30:	00801f40 	call	801f4 <SEND1>
   80e34:	d0a8aa17 	ldw	r2,-23896(gp)
   80e38:	e0bffe05 	stb	r2,-8(fp)
   80e3c:	e0bffe03 	ldbu	r2,-8(fp)
   80e40:	1009883a 	mov	r4,r2
   80e44:	00801f40 	call	801f4 <SEND1>
   80e48:	e0bffe03 	ldbu	r2,-8(fp)
   80e4c:	10803fd8 	cmpnei	r2,r2,255
   80e50:	1000021e 	bne	r2,zero,80e5c <huffman+0x818>
   80e54:	0009883a 	mov	r4,zero
   80e58:	00801f40 	call	801f4 <SEND1>
   80e5c:	e0bffc17 	ldw	r2,-16(fp)
   80e60:	d0a8aa15 	stw	r2,-23896(gp)
   80e64:	e0bffd8b 	ldhu	r2,-10(fp)
   80e68:	d0a8ab0d 	sth	r2,-23892(gp)
	}

}
   80e6c:	e037883a 	mov	sp,fp
   80e70:	dfc00117 	ldw	ra,4(sp)
   80e74:	df000017 	ldw	fp,0(sp)
   80e78:	dec00204 	addi	sp,sp,8
   80e7c:	f800283a 	ret

00080e80 <close_bitstream>:

/* For bit Stuffing and EOI marker */
void close_bitstream (void){
   80e80:	defffb04 	addi	sp,sp,-20
   80e84:	dfc00415 	stw	ra,16(sp)
   80e88:	df000315 	stw	fp,12(sp)
   80e8c:	df000304 	addi	fp,sp,12
	uint16_t i, count;
	uint8_t *ptr;

	uint8_t out;

	if (bitindex > 0){
   80e90:	d0a8ab0b 	ldhu	r2,-23892(gp)
   80e94:	10bfffcc 	andi	r2,r2,65535
   80e98:	10002526 	beq	r2,zero,80f30 <close_bitstream+0xb0>
		lcode <<= (32 - bitindex);
   80e9c:	d0e8aa17 	ldw	r3,-23896(gp)
   80ea0:	d0a8ab0b 	ldhu	r2,-23892(gp)
   80ea4:	10bfffcc 	andi	r2,r2,65535
   80ea8:	01000804 	movi	r4,32
   80eac:	2085c83a 	sub	r2,r4,r2
   80eb0:	1884983a 	sll	r2,r3,r2
   80eb4:	d0a8aa15 	stw	r2,-23896(gp)
		count = (bitindex + 7) >> 3;
   80eb8:	d0a8ab0b 	ldhu	r2,-23892(gp)
   80ebc:	10bfffcc 	andi	r2,r2,65535
   80ec0:	108001c4 	addi	r2,r2,7
   80ec4:	1005d0fa 	srai	r2,r2,3
   80ec8:	e0bfff0d 	sth	r2,-4(fp)

		ptr = (uint8_t *) &lcode + 3;
   80ecc:	00800274 	movhi	r2,9
   80ed0:	108ae5c4 	addi	r2,r2,11159
   80ed4:	e0bffe15 	stw	r2,-8(fp)

		for (i=count; i>0; i--){
   80ed8:	e0bfff0b 	ldhu	r2,-4(fp)
   80edc:	e0bffd0d 	sth	r2,-12(fp)
   80ee0:	00001106 	br	80f28 <close_bitstream+0xa8>
			out = *ptr--;
   80ee4:	e0bffe17 	ldw	r2,-8(fp)
   80ee8:	10800003 	ldbu	r2,0(r2)
   80eec:	e0bfff85 	stb	r2,-2(fp)
   80ef0:	e0bffe17 	ldw	r2,-8(fp)
   80ef4:	10bfffc4 	addi	r2,r2,-1
   80ef8:	e0bffe15 	stw	r2,-8(fp)
			SEND1(out);
   80efc:	e0bfff83 	ldbu	r2,-2(fp)
   80f00:	1009883a 	mov	r4,r2
   80f04:	00801f40 	call	801f4 <SEND1>
			if (out == 0xff)
   80f08:	e0bfff83 	ldbu	r2,-2(fp)
   80f0c:	10803fd8 	cmpnei	r2,r2,255
   80f10:	1000021e 	bne	r2,zero,80f1c <close_bitstream+0x9c>
			SEND1(0);
   80f14:	0009883a 	mov	r4,zero
   80f18:	00801f40 	call	801f4 <SEND1>
		lcode <<= (32 - bitindex);
		count = (bitindex + 7) >> 3;

		ptr = (uint8_t *) &lcode + 3;

		for (i=count; i>0; i--){
   80f1c:	e0bffd0b 	ldhu	r2,-12(fp)
   80f20:	10bfffc4 	addi	r2,r2,-1
   80f24:	e0bffd0d 	sth	r2,-12(fp)
   80f28:	e0bffd0b 	ldhu	r2,-12(fp)
   80f2c:	103fed1e 	bne	r2,zero,80ee4 <close_bitstream+0x64>
			SEND1(0);
		}
	}

	// End of image marker
	SEND1(0xFF);
   80f30:	01003fc4 	movi	r4,255
   80f34:	00801f40 	call	801f4 <SEND1>
	SEND1(0xD9);
   80f38:	01003644 	movi	r4,217
   80f3c:	00801f40 	call	801f4 <SEND1>

}
   80f40:	e037883a 	mov	sp,fp
   80f44:	dfc00117 	ldw	ra,4(sp)
   80f48:	df000017 	ldw	fp,0(sp)
   80f4c:	dec00204 	addi	sp,sp,8
   80f50:	f800283a 	ret

00080f54 <INIT_B>:
#include <stdlib.h>

//#include "sys/alt_timestamp.h"
#include "FIFO.h"

void INIT_B(uint32_t csrAddr, uint8_t id, uint8_t size){
   80f54:	defffa04 	addi	sp,sp,-24
   80f58:	dfc00515 	stw	ra,20(sp)
   80f5c:	df000415 	stw	fp,16(sp)
   80f60:	df000404 	addi	fp,sp,16
   80f64:	e13ffd15 	stw	r4,-12(fp)
   80f68:	2807883a 	mov	r3,r5
   80f6c:	3005883a 	mov	r2,r6
   80f70:	e0fffe05 	stb	r3,-8(fp)
   80f74:	e0bfff05 	stb	r2,-4(fp)

	//int resp = altera_avalon_fifo_init(csrAddr, 0, ALMOST_EMPTY, ALMOST_FULL);
	int resp = altera_avalon_fifo_init(csrAddr, 0, 2, size-5);
   80f78:	e0bfff03 	ldbu	r2,-4(fp)
   80f7c:	10bffec4 	addi	r2,r2,-5
   80f80:	e13ffd17 	ldw	r4,-12(fp)
   80f84:	000b883a 	mov	r5,zero
   80f88:	01800084 	movi	r6,2
   80f8c:	100f883a 	mov	r7,r2
   80f90:	008be740 	call	8be74 <altera_avalon_fifo_init>
   80f94:	e0bffc15 	stw	r2,-16(fp)

	printf("FIFO %d Init\n", id);
   80f98:	e0bffe03 	ldbu	r2,-8(fp)
   80f9c:	01000274 	movhi	r4,9
   80fa0:	2138c704 	addi	r4,r4,-7396
   80fa4:	100b883a 	mov	r5,r2
   80fa8:	0081ce40 	call	81ce4 <printf>
	else if(resp == ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR)  printf("ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR\n\n");
	else if(resp == ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR)  printf("ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR\n\n");
	else printf("Unknown\n\n");
*/
	//print_status(csrAddr);
}
   80fac:	e037883a 	mov	sp,fp
   80fb0:	dfc00117 	ldw	ra,4(sp)
   80fb4:	df000017 	ldw	fp,0(sp)
   80fb8:	dec00204 	addi	sp,sp,8
   80fbc:	f800283a 	ret

00080fc0 <WRITE_B>:

void WRITE_B(int *buffer, uint32_t writeAddr, uint32_t csrAddr, uint8_t size, uint8_t id){
   80fc0:	defff804 	addi	sp,sp,-32
   80fc4:	dfc00715 	stw	ra,28(sp)
   80fc8:	df000615 	stw	fp,24(sp)
   80fcc:	df000604 	addi	fp,sp,24
   80fd0:	e13ffb15 	stw	r4,-20(fp)
   80fd4:	e17ffc15 	stw	r5,-16(fp)
   80fd8:	e1bffd15 	stw	r6,-12(fp)
   80fdc:	3805883a 	mov	r2,r7
   80fe0:	e0c00217 	ldw	r3,8(fp)
   80fe4:	e0bffe05 	stb	r2,-8(fp)
   80fe8:	e0ffff05 	stb	r3,-4(fp)

	while(altera_avalon_fifo_read_level(csrAddr)>=size){
   80fec:	0001883a 	nop
   80ff0:	00000106 	br	80ff8 <WRITE_B+0x38>
		continue;
   80ff4:	0001883a 	nop
	//print_status(csrAddr);
}

void WRITE_B(int *buffer, uint32_t writeAddr, uint32_t csrAddr, uint8_t size, uint8_t id){

	while(altera_avalon_fifo_read_level(csrAddr)>=size){
   80ff8:	e13ffd17 	ldw	r4,-12(fp)
   80ffc:	008c0180 	call	8c018 <altera_avalon_fifo_read_level>
   81000:	e0fffe03 	ldbu	r3,-8(fp)
   81004:	10fffb0e 	bge	r2,r3,80ff4 <WRITE_B+0x34>
		continue;
	}
	int resp = altera_avalon_fifo_write_fifo(writeAddr, csrAddr , *buffer);
   81008:	e0bffb17 	ldw	r2,-20(fp)
   8100c:	10800017 	ldw	r2,0(r2)
   81010:	e13ffc17 	ldw	r4,-16(fp)
   81014:	e17ffd17 	ldw	r5,-12(fp)
   81018:	100d883a 	mov	r6,r2
   8101c:	008c1a40 	call	8c1a4 <altera_avalon_fifo_write_fifo>
   81020:	e0bffa15 	stw	r2,-24(fp)
	else if(resp== ALTERA_AVALON_FIFO_FULL) printf("resp: ALTERA_AVALON_FIFO_FULL\n");
	int level = altera_avalon_fifo_read_level(csrAddr);
	printf("%d > write %d to FIFO, resp=%d level=%d\n\n", id, (int)*buffer, resp, level);
	#endif

}
   81024:	e037883a 	mov	sp,fp
   81028:	dfc00117 	ldw	ra,4(sp)
   8102c:	df000017 	ldw	fp,0(sp)
   81030:	dec00204 	addi	sp,sp,8
   81034:	f800283a 	ret

00081038 <READ_B>:

void READ_B(int *buffer, uint32_t readAddr, uint32_t csrAddr, uint8_t id){
   81038:	defff904 	addi	sp,sp,-28
   8103c:	dfc00615 	stw	ra,24(sp)
   81040:	df000515 	stw	fp,20(sp)
   81044:	df000504 	addi	fp,sp,20
   81048:	e13ffc15 	stw	r4,-16(fp)
   8104c:	e17ffd15 	stw	r5,-12(fp)
   81050:	e1bffe15 	stw	r6,-8(fp)
   81054:	3805883a 	mov	r2,r7
   81058:	e0bfff05 	stb	r2,-4(fp)

	while(altera_avalon_fifo_read_level(csrAddr)==0){
   8105c:	0001883a 	nop
   81060:	00000106 	br	81068 <READ_B+0x30>
		continue;
   81064:	0001883a 	nop

}

void READ_B(int *buffer, uint32_t readAddr, uint32_t csrAddr, uint8_t id){

	while(altera_avalon_fifo_read_level(csrAddr)==0){
   81068:	e13ffe17 	ldw	r4,-8(fp)
   8106c:	008c0180 	call	8c018 <altera_avalon_fifo_read_level>
   81070:	103ffc26 	beq	r2,zero,81064 <READ_B+0x2c>
		continue;
	}

	int resp = altera_avalon_fifo_read_fifo(readAddr, csrAddr);
   81074:	e13ffd17 	ldw	r4,-12(fp)
   81078:	e17ffe17 	ldw	r5,-8(fp)
   8107c:	008c2680 	call	8c268 <altera_avalon_fifo_read_fifo>
   81080:	e0bffb15 	stw	r2,-20(fp)
	*buffer = resp;
   81084:	e0bffc17 	ldw	r2,-16(fp)
   81088:	e0fffb17 	ldw	r3,-20(fp)
   8108c:	10c00015 	stw	r3,0(r2)
	else if(resp== ALTERA_AVALON_FIFO_FULL) printf("ALTERA_AVALON_FIFO_FULL\n\n");
	int level = altera_avalon_fifo_read_level(csrAddr);
	printf("reading from FIFO, resp=%d level=%d\n", resp, level);
	#endif

}
   81090:	e037883a 	mov	sp,fp
   81094:	dfc00117 	ldw	ra,4(sp)
   81098:	df000017 	ldw	fp,0(sp)
   8109c:	dec00204 	addi	sp,sp,8
   810a0:	f800283a 	ret

000810a4 <WRITE_FIFO>:



//------------------------------------------------------------------------------

void WRITE_FIFO(int *buffer){
   810a4:	defffe04 	addi	sp,sp,-8
   810a8:	df000115 	stw	fp,4(sp)
   810ac:	df000104 	addi	fp,sp,4
   810b0:	e13fff15 	stw	r4,-4(fp)
#endif

//printf("%lu \n",(unsigned long)((sw_timeB - sw_timeA)));
//t= t+(sw_timeB - sw_timeA);
*/
}
   810b4:	e037883a 	mov	sp,fp
   810b8:	df000017 	ldw	fp,0(sp)
   810bc:	dec00104 	addi	sp,sp,4
   810c0:	f800283a 	ret

000810c4 <READ_FIFO>:

void READ_FIFO(int *buffer){
   810c4:	defffe04 	addi	sp,sp,-8
   810c8:	df000115 	stw	fp,4(sp)
   810cc:	df000104 	addi	fp,sp,4
   810d0:	e13fff15 	stw	r4,-4(fp)
#endif

//printf("%lu \n",(unsigned long)((sw_timeB - sw_timeA)));
//t= t+(sw_timeB - sw_timeA);
*/
}
   810d4:	e037883a 	mov	sp,fp
   810d8:	df000017 	ldw	fp,0(sp)
   810dc:	dec00104 	addi	sp,sp,4
   810e0:	f800283a 	ret

000810e4 <FIFO_INIT>:

//Initialization
void FIFO_INIT(){
   810e4:	deffff04 	addi	sp,sp,-4
   810e8:	df000015 	stw	fp,0(sp)
   810ec:	d839883a 	mov	fp,sp
	else if(resp == ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR)  printf("ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR\n\n");
	else printf("Unknown\n\n");

	print_status(INPUT_FIFO_IN_CSR_BASE);
	*/
}
   810f0:	e037883a 	mov	sp,fp
   810f4:	df000017 	ldw	fp,0(sp)
   810f8:	dec00104 	addi	sp,sp,4
   810fc:	f800283a 	ret

00081100 <print_status>:


volatile int input_fifo_wrclk_irq_event;

void print_status(alt_u32 control_base_address){
   81100:	defffd04 	addi	sp,sp,-12
   81104:	dfc00215 	stw	ra,8(sp)
   81108:	df000115 	stw	fp,4(sp)
   8110c:	df000104 	addi	fp,sp,4
   81110:	e13fff15 	stw	r4,-4(fp)
	printf("--------------------------------------\n");
   81114:	01000274 	movhi	r4,9
   81118:	2138cb04 	addi	r4,r4,-7380
   8111c:	0081da40 	call	81da4 <puts>
	printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   81120:	e13fff17 	ldw	r4,-4(fp)
   81124:	008c0180 	call	8c018 <altera_avalon_fifo_read_level>
   81128:	01000274 	movhi	r4,9
   8112c:	2138d504 	addi	r4,r4,-7340
   81130:	100b883a 	mov	r5,r2
   81134:	0081ce40 	call	81ce4 <printf>
	printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address, ALTERA_AVALON_FIFO_STATUS_ALL) );
   81138:	e13fff17 	ldw	r4,-4(fp)
   8113c:	01400fc4 	movi	r5,63
   81140:	008bf0c0 	call	8bf0c <altera_avalon_fifo_read_status>
   81144:	01000274 	movhi	r4,9
   81148:	2138d804 	addi	r4,r4,-7328
   8114c:	100b883a 	mov	r5,r2
   81150:	0081ce40 	call	81ce4 <printf>
	printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address, ALTERA_AVALON_FIFO_EVENT_ALL) );
   81154:	e13fff17 	ldw	r4,-4(fp)
   81158:	01400fc4 	movi	r5,63
   8115c:	008bfdc0 	call	8bfdc <altera_avalon_fifo_read_event>
   81160:	01000274 	movhi	r4,9
   81164:	2138dc04 	addi	r4,r4,-7312
   81168:	100b883a 	mov	r5,r2
   8116c:	0081ce40 	call	81ce4 <printf>
	//printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address, ALTERA_AVALON_FIFO_IENABLE_ALL) );
	printf("ALMOSTEMPTY = %u\n", altera_avalon_fifo_read_almostempty(control_base_address) );
   81170:	e13fff17 	ldw	r4,-4(fp)
   81174:	008bfb00 	call	8bfb0 <altera_avalon_fifo_read_almostempty>
   81178:	01000274 	movhi	r4,9
   8117c:	2138df04 	addi	r4,r4,-7300
   81180:	100b883a 	mov	r5,r2
   81184:	0081ce40 	call	81ce4 <printf>
	printf("ALMOSTFULL = %u\n\n", 	altera_avalon_fifo_read_almostfull(control_base_address));
   81188:	e13fff17 	ldw	r4,-4(fp)
   8118c:	008bf840 	call	8bf84 <altera_avalon_fifo_read_almostfull>
   81190:	01000274 	movhi	r4,9
   81194:	2138e404 	addi	r4,r4,-7280
   81198:	100b883a 	mov	r5,r2
   8119c:	0081ce40 	call	81ce4 <printf>
}
   811a0:	e037883a 	mov	sp,fp
   811a4:	dfc00117 	ldw	ra,4(sp)
   811a8:	df000017 	ldw	fp,0(sp)
   811ac:	dec00204 	addi	sp,sp,8
   811b0:	f800283a 	ret

000811b4 <init_AB_0>:
#include "FIFO.h"



// FIFO_AB_0 -------------------------------------------------------------------
void init_AB_0(){
   811b4:	defffe04 	addi	sp,sp,-8
   811b8:	dfc00115 	stw	ra,4(sp)
   811bc:	df000015 	stw	fp,0(sp)
   811c0:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AB_0_CSR, FIFO_AB_0_ID, FIFO_AB_0_SIZE);
   811c4:	01020074 	movhi	r4,2049
   811c8:	21042804 	addi	r4,r4,4256
   811cc:	000b883a 	mov	r5,zero
   811d0:	01801f44 	movi	r6,125
   811d4:	0080f540 	call	80f54 <INIT_B>
}
   811d8:	e037883a 	mov	sp,fp
   811dc:	dfc00117 	ldw	ra,4(sp)
   811e0:	df000017 	ldw	fp,0(sp)
   811e4:	dec00204 	addi	sp,sp,8
   811e8:	f800283a 	ret

000811ec <read_AB_0>:
int read_AB_0(){
   811ec:	defffd04 	addi	sp,sp,-12
   811f0:	dfc00215 	stw	ra,8(sp)
   811f4:	df000115 	stw	fp,4(sp)
   811f8:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AB_0_READ, FIFO_AB_0_CSR, FIFO_AB_0_ID);
   811fc:	e13fff04 	addi	r4,fp,-4
   81200:	01420074 	movhi	r5,2049
   81204:	29445604 	addi	r5,r5,4440
   81208:	01820074 	movhi	r6,2049
   8120c:	31842804 	addi	r6,r6,4256
   81210:	000f883a 	mov	r7,zero
   81214:	00810380 	call	81038 <READ_B>
   return val;
   81218:	e0bfff17 	ldw	r2,-4(fp)
}
   8121c:	e037883a 	mov	sp,fp
   81220:	dfc00117 	ldw	ra,4(sp)
   81224:	df000017 	ldw	fp,0(sp)
   81228:	dec00204 	addi	sp,sp,8
   8122c:	f800283a 	ret

00081230 <write_AB_0>:
void write_AB_0(int *buffer){
   81230:	defffc04 	addi	sp,sp,-16
   81234:	dfc00315 	stw	ra,12(sp)
   81238:	df000215 	stw	fp,8(sp)
   8123c:	df000204 	addi	fp,sp,8
   81240:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AB_0_WRITE, FIFO_AB_0_CSR, FIFO_AB_0_SIZE, FIFO_AB_0_ID);
   81244:	d8000015 	stw	zero,0(sp)
   81248:	e13fff17 	ldw	r4,-4(fp)
   8124c:	01420074 	movhi	r5,2049
   81250:	29445904 	addi	r5,r5,4452
   81254:	01820074 	movhi	r6,2049
   81258:	31842804 	addi	r6,r6,4256
   8125c:	01c01f44 	movi	r7,125
   81260:	0080fc00 	call	80fc0 <WRITE_B>
}
   81264:	e037883a 	mov	sp,fp
   81268:	dfc00117 	ldw	ra,4(sp)
   8126c:	df000017 	ldw	fp,0(sp)
   81270:	dec00204 	addi	sp,sp,8
   81274:	f800283a 	ret

00081278 <readStatus_AB_0>:
void readStatus_AB_0(){
   81278:	defffe04 	addi	sp,sp,-8
   8127c:	dfc00115 	stw	ra,4(sp)
   81280:	df000015 	stw	fp,0(sp)
   81284:	d839883a 	mov	fp,sp
   print_status(FIFO_AB_0_CSR);
   81288:	01020074 	movhi	r4,2049
   8128c:	21042804 	addi	r4,r4,4256
   81290:	00811000 	call	81100 <print_status>
}
   81294:	e037883a 	mov	sp,fp
   81298:	dfc00117 	ldw	ra,4(sp)
   8129c:	df000017 	ldw	fp,0(sp)
   812a0:	dec00204 	addi	sp,sp,8
   812a4:	f800283a 	ret

000812a8 <init_AB_1>:

// FIFO_AB_1 -------------------------------------------------------------------
void init_AB_1(){
   812a8:	defffe04 	addi	sp,sp,-8
   812ac:	dfc00115 	stw	ra,4(sp)
   812b0:	df000015 	stw	fp,0(sp)
   812b4:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AB_1_CSR, FIFO_AB_1_ID, FIFO_AB_1_SIZE);
   812b8:	01020074 	movhi	r4,2049
   812bc:	21042004 	addi	r4,r4,4224
   812c0:	01400044 	movi	r5,1
   812c4:	01801f44 	movi	r6,125
   812c8:	0080f540 	call	80f54 <INIT_B>
}
   812cc:	e037883a 	mov	sp,fp
   812d0:	dfc00117 	ldw	ra,4(sp)
   812d4:	df000017 	ldw	fp,0(sp)
   812d8:	dec00204 	addi	sp,sp,8
   812dc:	f800283a 	ret

000812e0 <read_AB_1>:
int read_AB_1(){
   812e0:	defffd04 	addi	sp,sp,-12
   812e4:	dfc00215 	stw	ra,8(sp)
   812e8:	df000115 	stw	fp,4(sp)
   812ec:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AB_1_READ, FIFO_AB_1_CSR, FIFO_AB_1_ID);
   812f0:	e13fff04 	addi	r4,fp,-4
   812f4:	01420074 	movhi	r5,2049
   812f8:	29445504 	addi	r5,r5,4436
   812fc:	01820074 	movhi	r6,2049
   81300:	31842004 	addi	r6,r6,4224
   81304:	01c00044 	movi	r7,1
   81308:	00810380 	call	81038 <READ_B>
   return val;
   8130c:	e0bfff17 	ldw	r2,-4(fp)
}
   81310:	e037883a 	mov	sp,fp
   81314:	dfc00117 	ldw	ra,4(sp)
   81318:	df000017 	ldw	fp,0(sp)
   8131c:	dec00204 	addi	sp,sp,8
   81320:	f800283a 	ret

00081324 <write_AB_1>:
void write_AB_1(int *buffer){
   81324:	defffc04 	addi	sp,sp,-16
   81328:	dfc00315 	stw	ra,12(sp)
   8132c:	df000215 	stw	fp,8(sp)
   81330:	df000204 	addi	fp,sp,8
   81334:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AB_1_WRITE, FIFO_AB_1_CSR, FIFO_AB_1_SIZE, FIFO_AB_1_ID);
   81338:	00800044 	movi	r2,1
   8133c:	d8800015 	stw	r2,0(sp)
   81340:	e13fff17 	ldw	r4,-4(fp)
   81344:	01420074 	movhi	r5,2049
   81348:	29445804 	addi	r5,r5,4448
   8134c:	01820074 	movhi	r6,2049
   81350:	31842004 	addi	r6,r6,4224
   81354:	01c01f44 	movi	r7,125
   81358:	0080fc00 	call	80fc0 <WRITE_B>
}
   8135c:	e037883a 	mov	sp,fp
   81360:	dfc00117 	ldw	ra,4(sp)
   81364:	df000017 	ldw	fp,0(sp)
   81368:	dec00204 	addi	sp,sp,8
   8136c:	f800283a 	ret

00081370 <readStatus_AB_1>:
void readStatus_AB_1(){
   81370:	defffe04 	addi	sp,sp,-8
   81374:	dfc00115 	stw	ra,4(sp)
   81378:	df000015 	stw	fp,0(sp)
   8137c:	d839883a 	mov	fp,sp
   print_status(FIFO_AB_1_CSR);
   81380:	01020074 	movhi	r4,2049
   81384:	21042004 	addi	r4,r4,4224
   81388:	00811000 	call	81100 <print_status>
}
   8138c:	e037883a 	mov	sp,fp
   81390:	dfc00117 	ldw	ra,4(sp)
   81394:	df000017 	ldw	fp,0(sp)
   81398:	dec00204 	addi	sp,sp,8
   8139c:	f800283a 	ret

000813a0 <init_AB_2>:

// FIFO_AB_2 -------------------------------------------------------------------
void init_AB_2(){
   813a0:	defffe04 	addi	sp,sp,-8
   813a4:	dfc00115 	stw	ra,4(sp)
   813a8:	df000015 	stw	fp,0(sp)
   813ac:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AB_2_CSR, FIFO_AB_2_ID, FIFO_AB_2_SIZE);
   813b0:	01020074 	movhi	r4,2049
   813b4:	21041804 	addi	r4,r4,4192
   813b8:	01400084 	movi	r5,2
   813bc:	01801f44 	movi	r6,125
   813c0:	0080f540 	call	80f54 <INIT_B>
}
   813c4:	e037883a 	mov	sp,fp
   813c8:	dfc00117 	ldw	ra,4(sp)
   813cc:	df000017 	ldw	fp,0(sp)
   813d0:	dec00204 	addi	sp,sp,8
   813d4:	f800283a 	ret

000813d8 <read_AB_2>:
int read_AB_2(){
   813d8:	defffd04 	addi	sp,sp,-12
   813dc:	dfc00215 	stw	ra,8(sp)
   813e0:	df000115 	stw	fp,4(sp)
   813e4:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AB_2_READ, FIFO_AB_2_CSR, FIFO_AB_2_ID);
   813e8:	e13fff04 	addi	r4,fp,-4
   813ec:	01420074 	movhi	r5,2049
   813f0:	29445404 	addi	r5,r5,4432
   813f4:	01820074 	movhi	r6,2049
   813f8:	31841804 	addi	r6,r6,4192
   813fc:	01c00084 	movi	r7,2
   81400:	00810380 	call	81038 <READ_B>
   return val;
   81404:	e0bfff17 	ldw	r2,-4(fp)
}
   81408:	e037883a 	mov	sp,fp
   8140c:	dfc00117 	ldw	ra,4(sp)
   81410:	df000017 	ldw	fp,0(sp)
   81414:	dec00204 	addi	sp,sp,8
   81418:	f800283a 	ret

0008141c <write_AB_2>:
void write_AB_2(int *buffer){
   8141c:	defffc04 	addi	sp,sp,-16
   81420:	dfc00315 	stw	ra,12(sp)
   81424:	df000215 	stw	fp,8(sp)
   81428:	df000204 	addi	fp,sp,8
   8142c:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AB_2_WRITE, FIFO_AB_2_CSR, FIFO_AB_2_SIZE, FIFO_AB_2_ID);
   81430:	00800084 	movi	r2,2
   81434:	d8800015 	stw	r2,0(sp)
   81438:	e13fff17 	ldw	r4,-4(fp)
   8143c:	01420074 	movhi	r5,2049
   81440:	29445704 	addi	r5,r5,4444
   81444:	01820074 	movhi	r6,2049
   81448:	31841804 	addi	r6,r6,4192
   8144c:	01c01f44 	movi	r7,125
   81450:	0080fc00 	call	80fc0 <WRITE_B>
}
   81454:	e037883a 	mov	sp,fp
   81458:	dfc00117 	ldw	ra,4(sp)
   8145c:	df000017 	ldw	fp,0(sp)
   81460:	dec00204 	addi	sp,sp,8
   81464:	f800283a 	ret

00081468 <readStatus_AB_2>:
void readStatus_AB_2(){
   81468:	defffe04 	addi	sp,sp,-8
   8146c:	dfc00115 	stw	ra,4(sp)
   81470:	df000015 	stw	fp,0(sp)
   81474:	d839883a 	mov	fp,sp
   print_status(FIFO_AB_2_CSR);
   81478:	01020074 	movhi	r4,2049
   8147c:	21041804 	addi	r4,r4,4192
   81480:	00811000 	call	81100 <print_status>
}
   81484:	e037883a 	mov	sp,fp
   81488:	dfc00117 	ldw	ra,4(sp)
   8148c:	df000017 	ldw	fp,0(sp)
   81490:	dec00204 	addi	sp,sp,8
   81494:	f800283a 	ret

00081498 <init_AD>:

// FIFO_AD -------------------------------------------------------------------
void init_AD(){
   81498:	defffe04 	addi	sp,sp,-8
   8149c:	dfc00115 	stw	ra,4(sp)
   814a0:	df000015 	stw	fp,0(sp)
   814a4:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AD_CSR, FIFO_AD_ID, FIFO_AD_SIZE);
   814a8:	01020074 	movhi	r4,2049
   814ac:	21041004 	addi	r4,r4,4160
   814b0:	014000c4 	movi	r5,3
   814b4:	01800744 	movi	r6,29
   814b8:	0080f540 	call	80f54 <INIT_B>
}
   814bc:	e037883a 	mov	sp,fp
   814c0:	dfc00117 	ldw	ra,4(sp)
   814c4:	df000017 	ldw	fp,0(sp)
   814c8:	dec00204 	addi	sp,sp,8
   814cc:	f800283a 	ret

000814d0 <read_AD>:
int read_AD(){
   814d0:	defffd04 	addi	sp,sp,-12
   814d4:	dfc00215 	stw	ra,8(sp)
   814d8:	df000115 	stw	fp,4(sp)
   814dc:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AD_READ, FIFO_AD_CSR, FIFO_AD_ID);
   814e0:	e13fff04 	addi	r4,fp,-4
   814e4:	01420074 	movhi	r5,2049
   814e8:	29445204 	addi	r5,r5,4424
   814ec:	01820074 	movhi	r6,2049
   814f0:	31841004 	addi	r6,r6,4160
   814f4:	01c000c4 	movi	r7,3
   814f8:	00810380 	call	81038 <READ_B>
   return val;
   814fc:	e0bfff17 	ldw	r2,-4(fp)
}
   81500:	e037883a 	mov	sp,fp
   81504:	dfc00117 	ldw	ra,4(sp)
   81508:	df000017 	ldw	fp,0(sp)
   8150c:	dec00204 	addi	sp,sp,8
   81510:	f800283a 	ret

00081514 <write_AD>:
void write_AD(int *buffer){
   81514:	defffc04 	addi	sp,sp,-16
   81518:	dfc00315 	stw	ra,12(sp)
   8151c:	df000215 	stw	fp,8(sp)
   81520:	df000204 	addi	fp,sp,8
   81524:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AD_WRITE, FIFO_AD_CSR, FIFO_AD_SIZE, FIFO_AD_ID);
   81528:	008000c4 	movi	r2,3
   8152c:	d8800015 	stw	r2,0(sp)
   81530:	e13fff17 	ldw	r4,-4(fp)
   81534:	01420074 	movhi	r5,2049
   81538:	29445304 	addi	r5,r5,4428
   8153c:	01820074 	movhi	r6,2049
   81540:	31841004 	addi	r6,r6,4160
   81544:	01c00744 	movi	r7,29
   81548:	0080fc00 	call	80fc0 <WRITE_B>
}
   8154c:	e037883a 	mov	sp,fp
   81550:	dfc00117 	ldw	ra,4(sp)
   81554:	df000017 	ldw	fp,0(sp)
   81558:	dec00204 	addi	sp,sp,8
   8155c:	f800283a 	ret

00081560 <readStatus_AD>:
void readStatus_AD(){
   81560:	defffe04 	addi	sp,sp,-8
   81564:	dfc00115 	stw	ra,4(sp)
   81568:	df000015 	stw	fp,0(sp)
   8156c:	d839883a 	mov	fp,sp
   print_status(FIFO_AD_CSR);
   81570:	01020074 	movhi	r4,2049
   81574:	21041004 	addi	r4,r4,4160
   81578:	00811000 	call	81100 <print_status>
}
   8157c:	e037883a 	mov	sp,fp
   81580:	dfc00117 	ldw	ra,4(sp)
   81584:	df000017 	ldw	fp,0(sp)
   81588:	dec00204 	addi	sp,sp,8
   8158c:	f800283a 	ret

00081590 <init_AE>:


// FIFO_AE -------------------------------------------------------------------
void init_AE(){
   81590:	defffe04 	addi	sp,sp,-8
   81594:	dfc00115 	stw	ra,4(sp)
   81598:	df000015 	stw	fp,0(sp)
   8159c:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AE_CSR, FIFO_AE_ID, FIFO_AE_SIZE);
   815a0:	01020074 	movhi	r4,2049
   815a4:	21040804 	addi	r4,r4,4128
   815a8:	01400104 	movi	r5,4
   815ac:	01800744 	movi	r6,29
   815b0:	0080f540 	call	80f54 <INIT_B>
}
   815b4:	e037883a 	mov	sp,fp
   815b8:	dfc00117 	ldw	ra,4(sp)
   815bc:	df000017 	ldw	fp,0(sp)
   815c0:	dec00204 	addi	sp,sp,8
   815c4:	f800283a 	ret

000815c8 <read_AE>:
int read_AE(){
   815c8:	defffd04 	addi	sp,sp,-12
   815cc:	dfc00215 	stw	ra,8(sp)
   815d0:	df000115 	stw	fp,4(sp)
   815d4:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AE_READ, FIFO_AE_CSR, FIFO_AE_ID);
   815d8:	e13fff04 	addi	r4,fp,-4
   815dc:	01420074 	movhi	r5,2049
   815e0:	29445004 	addi	r5,r5,4416
   815e4:	01820074 	movhi	r6,2049
   815e8:	31840804 	addi	r6,r6,4128
   815ec:	01c00104 	movi	r7,4
   815f0:	00810380 	call	81038 <READ_B>
   return val;
   815f4:	e0bfff17 	ldw	r2,-4(fp)
}
   815f8:	e037883a 	mov	sp,fp
   815fc:	dfc00117 	ldw	ra,4(sp)
   81600:	df000017 	ldw	fp,0(sp)
   81604:	dec00204 	addi	sp,sp,8
   81608:	f800283a 	ret

0008160c <write_AE>:
void write_AE(int *buffer){
   8160c:	defffc04 	addi	sp,sp,-16
   81610:	dfc00315 	stw	ra,12(sp)
   81614:	df000215 	stw	fp,8(sp)
   81618:	df000204 	addi	fp,sp,8
   8161c:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AE_WRITE, FIFO_AE_CSR, FIFO_AE_SIZE, FIFO_AE_ID);
   81620:	00800104 	movi	r2,4
   81624:	d8800015 	stw	r2,0(sp)
   81628:	e13fff17 	ldw	r4,-4(fp)
   8162c:	01420074 	movhi	r5,2049
   81630:	29445104 	addi	r5,r5,4420
   81634:	01820074 	movhi	r6,2049
   81638:	31840804 	addi	r6,r6,4128
   8163c:	01c00744 	movi	r7,29
   81640:	0080fc00 	call	80fc0 <WRITE_B>
}
   81644:	e037883a 	mov	sp,fp
   81648:	dfc00117 	ldw	ra,4(sp)
   8164c:	df000017 	ldw	fp,0(sp)
   81650:	dec00204 	addi	sp,sp,8
   81654:	f800283a 	ret

00081658 <readStatus_AE>:
void readStatus_AE(){
   81658:	defffe04 	addi	sp,sp,-8
   8165c:	dfc00115 	stw	ra,4(sp)
   81660:	df000015 	stw	fp,0(sp)
   81664:	d839883a 	mov	fp,sp
   print_status(FIFO_AE_CSR);
   81668:	01020074 	movhi	r4,2049
   8166c:	21040804 	addi	r4,r4,4128
   81670:	00811000 	call	81100 <print_status>
}
   81674:	e037883a 	mov	sp,fp
   81678:	dfc00117 	ldw	ra,4(sp)
   8167c:	df000017 	ldw	fp,0(sp)
   81680:	dec00204 	addi	sp,sp,8
   81684:	f800283a 	ret

00081688 <init_AF>:

// FIFO_AF -------------------------------------------------------------------
void init_AF(){
   81688:	defffe04 	addi	sp,sp,-8
   8168c:	dfc00115 	stw	ra,4(sp)
   81690:	df000015 	stw	fp,0(sp)
   81694:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AF_CSR, FIFO_AF_ID, FIFO_AF_SIZE);
   81698:	01020074 	movhi	r4,2049
   8169c:	21040004 	addi	r4,r4,4096
   816a0:	01400144 	movi	r5,5
   816a4:	01800744 	movi	r6,29
   816a8:	0080f540 	call	80f54 <INIT_B>
}
   816ac:	e037883a 	mov	sp,fp
   816b0:	dfc00117 	ldw	ra,4(sp)
   816b4:	df000017 	ldw	fp,0(sp)
   816b8:	dec00204 	addi	sp,sp,8
   816bc:	f800283a 	ret

000816c0 <read_AF>:
int read_AF(){
   816c0:	defffd04 	addi	sp,sp,-12
   816c4:	dfc00215 	stw	ra,8(sp)
   816c8:	df000115 	stw	fp,4(sp)
   816cc:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AF_READ, FIFO_AF_CSR, FIFO_AF_ID);
   816d0:	e13fff04 	addi	r4,fp,-4
   816d4:	01420074 	movhi	r5,2049
   816d8:	29444e04 	addi	r5,r5,4408
   816dc:	01820074 	movhi	r6,2049
   816e0:	31840004 	addi	r6,r6,4096
   816e4:	01c00144 	movi	r7,5
   816e8:	00810380 	call	81038 <READ_B>
   return val;
   816ec:	e0bfff17 	ldw	r2,-4(fp)
}
   816f0:	e037883a 	mov	sp,fp
   816f4:	dfc00117 	ldw	ra,4(sp)
   816f8:	df000017 	ldw	fp,0(sp)
   816fc:	dec00204 	addi	sp,sp,8
   81700:	f800283a 	ret

00081704 <write_AF>:
void write_AF(int *buffer){
   81704:	defffc04 	addi	sp,sp,-16
   81708:	dfc00315 	stw	ra,12(sp)
   8170c:	df000215 	stw	fp,8(sp)
   81710:	df000204 	addi	fp,sp,8
   81714:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AF_WRITE, FIFO_AF_CSR, FIFO_AF_SIZE, FIFO_AF_ID);
   81718:	00800144 	movi	r2,5
   8171c:	d8800015 	stw	r2,0(sp)
   81720:	e13fff17 	ldw	r4,-4(fp)
   81724:	01420074 	movhi	r5,2049
   81728:	29444f04 	addi	r5,r5,4412
   8172c:	01820074 	movhi	r6,2049
   81730:	31840004 	addi	r6,r6,4096
   81734:	01c00744 	movi	r7,29
   81738:	0080fc00 	call	80fc0 <WRITE_B>
}
   8173c:	e037883a 	mov	sp,fp
   81740:	dfc00117 	ldw	ra,4(sp)
   81744:	df000017 	ldw	fp,0(sp)
   81748:	dec00204 	addi	sp,sp,8
   8174c:	f800283a 	ret

00081750 <readStatus_AF>:
void readStatus_AF(){
   81750:	defffe04 	addi	sp,sp,-8
   81754:	dfc00115 	stw	ra,4(sp)
   81758:	df000015 	stw	fp,0(sp)
   8175c:	d839883a 	mov	fp,sp
   print_status(FIFO_AF_CSR);
   81760:	01020074 	movhi	r4,2049
   81764:	21040004 	addi	r4,r4,4096
   81768:	00811000 	call	81100 <print_status>
}
   8176c:	e037883a 	mov	sp,fp
   81770:	dfc00117 	ldw	ra,4(sp)
   81774:	df000017 	ldw	fp,0(sp)
   81778:	dec00204 	addi	sp,sp,8
   8177c:	f800283a 	ret

00081780 <init_BC>:

// FIFO_BC -------------------------------------------------------------------
void init_BC(){
   81780:	defffe04 	addi	sp,sp,-8
   81784:	dfc00115 	stw	ra,4(sp)
   81788:	df000015 	stw	fp,0(sp)
   8178c:	d839883a 	mov	fp,sp
   INIT_B(FIFO_BC_CSR, FIFO_BC_ID, FIFO_BC_SIZE);
   81790:	01020074 	movhi	r4,2049
   81794:	21040004 	addi	r4,r4,4096
   81798:	01400184 	movi	r5,6
   8179c:	01803f44 	movi	r6,253
   817a0:	0080f540 	call	80f54 <INIT_B>
}
   817a4:	e037883a 	mov	sp,fp
   817a8:	dfc00117 	ldw	ra,4(sp)
   817ac:	df000017 	ldw	fp,0(sp)
   817b0:	dec00204 	addi	sp,sp,8
   817b4:	f800283a 	ret

000817b8 <read_BC>:
int read_BC(){
   817b8:	defffd04 	addi	sp,sp,-12
   817bc:	dfc00215 	stw	ra,8(sp)
   817c0:	df000115 	stw	fp,4(sp)
   817c4:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_BC_READ, FIFO_BC_CSR, FIFO_BC_ID);
   817c8:	e13fff04 	addi	r4,fp,-4
   817cc:	01420074 	movhi	r5,2049
   817d0:	29443604 	addi	r5,r5,4312
   817d4:	01820074 	movhi	r6,2049
   817d8:	31840004 	addi	r6,r6,4096
   817dc:	01c00184 	movi	r7,6
   817e0:	00810380 	call	81038 <READ_B>
   return val;
   817e4:	e0bfff17 	ldw	r2,-4(fp)
}
   817e8:	e037883a 	mov	sp,fp
   817ec:	dfc00117 	ldw	ra,4(sp)
   817f0:	df000017 	ldw	fp,0(sp)
   817f4:	dec00204 	addi	sp,sp,8
   817f8:	f800283a 	ret

000817fc <write_BC>:
void write_BC(int *buffer){
   817fc:	defffc04 	addi	sp,sp,-16
   81800:	dfc00315 	stw	ra,12(sp)
   81804:	df000215 	stw	fp,8(sp)
   81808:	df000204 	addi	fp,sp,8
   8180c:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_BC_WRITE, FIFO_BC_CSR, FIFO_BC_SIZE, FIFO_BC_ID);
   81810:	00800184 	movi	r2,6
   81814:	d8800015 	stw	r2,0(sp)
   81818:	e13fff17 	ldw	r4,-4(fp)
   8181c:	01420074 	movhi	r5,2049
   81820:	29443704 	addi	r5,r5,4316
   81824:	01820074 	movhi	r6,2049
   81828:	31840004 	addi	r6,r6,4096
   8182c:	01c03f44 	movi	r7,253
   81830:	0080fc00 	call	80fc0 <WRITE_B>
}
   81834:	e037883a 	mov	sp,fp
   81838:	dfc00117 	ldw	ra,4(sp)
   8183c:	df000017 	ldw	fp,0(sp)
   81840:	dec00204 	addi	sp,sp,8
   81844:	f800283a 	ret

00081848 <readStatus_BC>:
void readStatus_BC(){
   81848:	defffe04 	addi	sp,sp,-8
   8184c:	dfc00115 	stw	ra,4(sp)
   81850:	df000015 	stw	fp,0(sp)
   81854:	d839883a 	mov	fp,sp
   print_status(FIFO_BC_CSR);
   81858:	01020074 	movhi	r4,2049
   8185c:	21040004 	addi	r4,r4,4096
   81860:	00811000 	call	81100 <print_status>
}
   81864:	e037883a 	mov	sp,fp
   81868:	dfc00117 	ldw	ra,4(sp)
   8186c:	df000017 	ldw	fp,0(sp)
   81870:	dec00204 	addi	sp,sp,8
   81874:	f800283a 	ret

00081878 <init_CD>:

// FIFO_CD -------------------------------------------------------------------
void init_CD(){
   81878:	defffe04 	addi	sp,sp,-8
   8187c:	dfc00115 	stw	ra,4(sp)
   81880:	df000015 	stw	fp,0(sp)
   81884:	d839883a 	mov	fp,sp
   INIT_B(FIFO_CD_CSR, FIFO_CD_ID, FIFO_CD_SIZE);
   81888:	01020074 	movhi	r4,2049
   8188c:	21040804 	addi	r4,r4,4128
   81890:	014001c4 	movi	r5,7
   81894:	01803f44 	movi	r6,253
   81898:	0080f540 	call	80f54 <INIT_B>
}
   8189c:	e037883a 	mov	sp,fp
   818a0:	dfc00117 	ldw	ra,4(sp)
   818a4:	df000017 	ldw	fp,0(sp)
   818a8:	dec00204 	addi	sp,sp,8
   818ac:	f800283a 	ret

000818b0 <read_CD>:
int read_CD(){
   818b0:	defffd04 	addi	sp,sp,-12
   818b4:	dfc00215 	stw	ra,8(sp)
   818b8:	df000115 	stw	fp,4(sp)
   818bc:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_CD_READ, FIFO_CD_CSR, FIFO_CD_ID);
   818c0:	e13fff04 	addi	r4,fp,-4
   818c4:	01420074 	movhi	r5,2049
   818c8:	29442604 	addi	r5,r5,4248
   818cc:	01820074 	movhi	r6,2049
   818d0:	31840804 	addi	r6,r6,4128
   818d4:	01c001c4 	movi	r7,7
   818d8:	00810380 	call	81038 <READ_B>
   return val;
   818dc:	e0bfff17 	ldw	r2,-4(fp)
}
   818e0:	e037883a 	mov	sp,fp
   818e4:	dfc00117 	ldw	ra,4(sp)
   818e8:	df000017 	ldw	fp,0(sp)
   818ec:	dec00204 	addi	sp,sp,8
   818f0:	f800283a 	ret

000818f4 <write_CD>:
void write_CD(int *buffer){
   818f4:	defffc04 	addi	sp,sp,-16
   818f8:	dfc00315 	stw	ra,12(sp)
   818fc:	df000215 	stw	fp,8(sp)
   81900:	df000204 	addi	fp,sp,8
   81904:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_CD_WRITE, FIFO_CD_CSR, FIFO_CD_SIZE, FIFO_CD_ID);
   81908:	008001c4 	movi	r2,7
   8190c:	d8800015 	stw	r2,0(sp)
   81910:	e13fff17 	ldw	r4,-4(fp)
   81914:	01420074 	movhi	r5,2049
   81918:	29442704 	addi	r5,r5,4252
   8191c:	01820074 	movhi	r6,2049
   81920:	31840804 	addi	r6,r6,4128
   81924:	01c03f44 	movi	r7,253
   81928:	0080fc00 	call	80fc0 <WRITE_B>
}
   8192c:	e037883a 	mov	sp,fp
   81930:	dfc00117 	ldw	ra,4(sp)
   81934:	df000017 	ldw	fp,0(sp)
   81938:	dec00204 	addi	sp,sp,8
   8193c:	f800283a 	ret

00081940 <readStatus_CD>:
void readStatus_CD(){
   81940:	defffe04 	addi	sp,sp,-8
   81944:	dfc00115 	stw	ra,4(sp)
   81948:	df000015 	stw	fp,0(sp)
   8194c:	d839883a 	mov	fp,sp
   print_status(FIFO_CD_CSR);
   81950:	01020074 	movhi	r4,2049
   81954:	21040804 	addi	r4,r4,4128
   81958:	00811000 	call	81100 <print_status>
}
   8195c:	e037883a 	mov	sp,fp
   81960:	dfc00117 	ldw	ra,4(sp)
   81964:	df000017 	ldw	fp,0(sp)
   81968:	dec00204 	addi	sp,sp,8
   8196c:	f800283a 	ret

00081970 <init_DE>:

// FIFO_DE -------------------------------------------------------------------
void init_DE(){
   81970:	defffe04 	addi	sp,sp,-8
   81974:	dfc00115 	stw	ra,4(sp)
   81978:	df000015 	stw	fp,0(sp)
   8197c:	d839883a 	mov	fp,sp
   INIT_B(FIFO_DE_CSR, FIFO_DE_ID, FIFO_DE_SIZE);
   81980:	01020074 	movhi	r4,2049
   81984:	21040004 	addi	r4,r4,4096
   81988:	01400204 	movi	r5,8
   8198c:	01803f44 	movi	r6,253
   81990:	0080f540 	call	80f54 <INIT_B>
}
   81994:	e037883a 	mov	sp,fp
   81998:	dfc00117 	ldw	ra,4(sp)
   8199c:	df000017 	ldw	fp,0(sp)
   819a0:	dec00204 	addi	sp,sp,8
   819a4:	f800283a 	ret

000819a8 <read_DE>:
int read_DE(){
   819a8:	defffd04 	addi	sp,sp,-12
   819ac:	dfc00215 	stw	ra,8(sp)
   819b0:	df000115 	stw	fp,4(sp)
   819b4:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_DE_READ, FIFO_DE_CSR, FIFO_DE_ID);
   819b8:	e13fff04 	addi	r4,fp,-4
   819bc:	01420074 	movhi	r5,2049
   819c0:	29443004 	addi	r5,r5,4288
   819c4:	01820074 	movhi	r6,2049
   819c8:	31840004 	addi	r6,r6,4096
   819cc:	01c00204 	movi	r7,8
   819d0:	00810380 	call	81038 <READ_B>
   return val;
   819d4:	e0bfff17 	ldw	r2,-4(fp)
}
   819d8:	e037883a 	mov	sp,fp
   819dc:	dfc00117 	ldw	ra,4(sp)
   819e0:	df000017 	ldw	fp,0(sp)
   819e4:	dec00204 	addi	sp,sp,8
   819e8:	f800283a 	ret

000819ec <write_DE>:
void write_DE(int *buffer){
   819ec:	defffc04 	addi	sp,sp,-16
   819f0:	dfc00315 	stw	ra,12(sp)
   819f4:	df000215 	stw	fp,8(sp)
   819f8:	df000204 	addi	fp,sp,8
   819fc:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_DE_WRITE, FIFO_DE_CSR, FIFO_DE_SIZE, FIFO_DE_ID);
   81a00:	00800204 	movi	r2,8
   81a04:	d8800015 	stw	r2,0(sp)
   81a08:	e13fff17 	ldw	r4,-4(fp)
   81a0c:	01420074 	movhi	r5,2049
   81a10:	29443104 	addi	r5,r5,4292
   81a14:	01820074 	movhi	r6,2049
   81a18:	31840004 	addi	r6,r6,4096
   81a1c:	01c03f44 	movi	r7,253
   81a20:	0080fc00 	call	80fc0 <WRITE_B>
}
   81a24:	e037883a 	mov	sp,fp
   81a28:	dfc00117 	ldw	ra,4(sp)
   81a2c:	df000017 	ldw	fp,0(sp)
   81a30:	dec00204 	addi	sp,sp,8
   81a34:	f800283a 	ret

00081a38 <readStatus_DE>:
void readStatus_DE(){
   81a38:	defffe04 	addi	sp,sp,-8
   81a3c:	dfc00115 	stw	ra,4(sp)
   81a40:	df000015 	stw	fp,0(sp)
   81a44:	d839883a 	mov	fp,sp
   print_status(FIFO_DE_CSR);
   81a48:	01020074 	movhi	r4,2049
   81a4c:	21040004 	addi	r4,r4,4096
   81a50:	00811000 	call	81100 <print_status>
}
   81a54:	e037883a 	mov	sp,fp
   81a58:	dfc00117 	ldw	ra,4(sp)
   81a5c:	df000017 	ldw	fp,0(sp)
   81a60:	dec00204 	addi	sp,sp,8
   81a64:	f800283a 	ret

00081a68 <init_EF>:

// FIFO_EF -------------------------------------------------------------------
void init_EF(){
   81a68:	defffe04 	addi	sp,sp,-8
   81a6c:	dfc00115 	stw	ra,4(sp)
   81a70:	df000015 	stw	fp,0(sp)
   81a74:	d839883a 	mov	fp,sp
   INIT_B(FIFO_EF_CSR, FIFO_EF_ID, FIFO_EF_SIZE);
   81a78:	01020074 	movhi	r4,2049
   81a7c:	21041004 	addi	r4,r4,4160
   81a80:	01400244 	movi	r5,9
   81a84:	01803f44 	movi	r6,253
   81a88:	0080f540 	call	80f54 <INIT_B>
}
   81a8c:	e037883a 	mov	sp,fp
   81a90:	dfc00117 	ldw	ra,4(sp)
   81a94:	df000017 	ldw	fp,0(sp)
   81a98:	dec00204 	addi	sp,sp,8
   81a9c:	f800283a 	ret

00081aa0 <read_EF>:
int read_EF(){
   81aa0:	defffd04 	addi	sp,sp,-12
   81aa4:	dfc00215 	stw	ra,8(sp)
   81aa8:	df000115 	stw	fp,4(sp)
   81aac:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_EF_READ, FIFO_EF_CSR, FIFO_EF_ID);
   81ab0:	e13fff04 	addi	r4,fp,-4
   81ab4:	01420074 	movhi	r5,2049
   81ab8:	29442e04 	addi	r5,r5,4280
   81abc:	01820074 	movhi	r6,2049
   81ac0:	31841004 	addi	r6,r6,4160
   81ac4:	01c00244 	movi	r7,9
   81ac8:	00810380 	call	81038 <READ_B>
   return val;
   81acc:	e0bfff17 	ldw	r2,-4(fp)
}
   81ad0:	e037883a 	mov	sp,fp
   81ad4:	dfc00117 	ldw	ra,4(sp)
   81ad8:	df000017 	ldw	fp,0(sp)
   81adc:	dec00204 	addi	sp,sp,8
   81ae0:	f800283a 	ret

00081ae4 <write_EF>:
void write_EF(int *buffer){
   81ae4:	defffc04 	addi	sp,sp,-16
   81ae8:	dfc00315 	stw	ra,12(sp)
   81aec:	df000215 	stw	fp,8(sp)
   81af0:	df000204 	addi	fp,sp,8
   81af4:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_EF_WRITE, FIFO_EF_CSR, FIFO_EF_SIZE, FIFO_EF_ID);
   81af8:	00800244 	movi	r2,9
   81afc:	d8800015 	stw	r2,0(sp)
   81b00:	e13fff17 	ldw	r4,-4(fp)
   81b04:	01420074 	movhi	r5,2049
   81b08:	29442f04 	addi	r5,r5,4284
   81b0c:	01820074 	movhi	r6,2049
   81b10:	31841004 	addi	r6,r6,4160
   81b14:	01c03f44 	movi	r7,253
   81b18:	0080fc00 	call	80fc0 <WRITE_B>
}
   81b1c:	e037883a 	mov	sp,fp
   81b20:	dfc00117 	ldw	ra,4(sp)
   81b24:	df000017 	ldw	fp,0(sp)
   81b28:	dec00204 	addi	sp,sp,8
   81b2c:	f800283a 	ret

00081b30 <readStatus_EF>:
void readStatus_EF(){
   81b30:	defffe04 	addi	sp,sp,-8
   81b34:	dfc00115 	stw	ra,4(sp)
   81b38:	df000015 	stw	fp,0(sp)
   81b3c:	d839883a 	mov	fp,sp
   print_status(FIFO_EF_CSR);
   81b40:	01020074 	movhi	r4,2049
   81b44:	21041004 	addi	r4,r4,4160
   81b48:	00811000 	call	81100 <print_status>
}
   81b4c:	e037883a 	mov	sp,fp
   81b50:	dfc00117 	ldw	ra,4(sp)
   81b54:	df000017 	ldw	fp,0(sp)
   81b58:	dec00204 	addi	sp,sp,8
   81b5c:	f800283a 	ret

00081b60 <delay>:

#include "./utility.h"
#include "./IOMap.h"


void delay(int ms){
   81b60:	defffd04 	addi	sp,sp,-12
   81b64:	dfc00215 	stw	ra,8(sp)
   81b68:	df000115 	stw	fp,4(sp)
   81b6c:	df000104 	addi	fp,sp,4
   81b70:	e13fff15 	stw	r4,-4(fp)
	usleep(ms*1000);
   81b74:	e13fff17 	ldw	r4,-4(fp)
   81b78:	0140fa04 	movi	r5,1000
   81b7c:	0081c900 	call	81c90 <__mulsi3>
   81b80:	1009883a 	mov	r4,r2
   81b84:	008bc040 	call	8bc04 <usleep>
}
   81b88:	e037883a 	mov	sp,fp
   81b8c:	dfc00117 	ldw	ra,4(sp)
   81b90:	df000017 	ldw	fp,0(sp)
   81b94:	dec00204 	addi	sp,sp,8
   81b98:	f800283a 	ret

00081b9c <ledUpdate>:

void ledUpdate(uint8_t digit, uint8_t status){
   81b9c:	defffc04 	addi	sp,sp,-16
   81ba0:	df000315 	stw	fp,12(sp)
   81ba4:	df000304 	addi	fp,sp,12
   81ba8:	2007883a 	mov	r3,r4
   81bac:	2805883a 	mov	r2,r5
   81bb0:	e0fffe05 	stb	r3,-8(fp)
   81bb4:	e0bfff05 	stb	r2,-4(fp)
	uint8_t value =  (uint8_t)IORD_32DIRECT(LED_BASE, OFFSET);
   81bb8:	00820074 	movhi	r2,2049
   81bbc:	10844004 	addi	r2,r2,4352
   81bc0:	10800037 	ldwio	r2,0(r2)
   81bc4:	e0bffd05 	stb	r2,-12(fp)

	if(status==1){
   81bc8:	e0bfff03 	ldbu	r2,-4(fp)
   81bcc:	10800058 	cmpnei	r2,r2,1
   81bd0:	1000081e 	bne	r2,zero,81bf4 <ledUpdate+0x58>
		value = value | (1<<digit);
   81bd4:	e0bffe03 	ldbu	r2,-8(fp)
   81bd8:	00c00044 	movi	r3,1
   81bdc:	1884983a 	sll	r2,r3,r2
   81be0:	1007883a 	mov	r3,r2
   81be4:	e0bffd03 	ldbu	r2,-12(fp)
   81be8:	1884b03a 	or	r2,r3,r2
   81bec:	e0bffd05 	stb	r2,-12(fp)
   81bf0:	00000806 	br	81c14 <ledUpdate+0x78>
	}else{
		value = value & (~(1<<digit));
   81bf4:	e0bffe03 	ldbu	r2,-8(fp)
   81bf8:	00c00044 	movi	r3,1
   81bfc:	1884983a 	sll	r2,r3,r2
   81c00:	0084303a 	nor	r2,zero,r2
   81c04:	1007883a 	mov	r3,r2
   81c08:	e0bffd03 	ldbu	r2,-12(fp)
   81c0c:	1884703a 	and	r2,r3,r2
   81c10:	e0bffd05 	stb	r2,-12(fp)
	}
	IOWR_8DIRECT(LED_BASE,OFFSET,value);
   81c14:	e0fffd03 	ldbu	r3,-12(fp)
   81c18:	00820074 	movhi	r2,2049
   81c1c:	10844004 	addi	r2,r2,4352
   81c20:	10c00025 	stbio	r3,0(r2)
}
   81c24:	e037883a 	mov	sp,fp
   81c28:	df000017 	ldw	fp,0(sp)
   81c2c:	dec00104 	addi	sp,sp,4
   81c30:	f800283a 	ret

00081c34 <ledBlink>:

void ledBlink(uint8_t id){
   81c34:	defffd04 	addi	sp,sp,-12
   81c38:	dfc00215 	stw	ra,8(sp)
   81c3c:	df000115 	stw	fp,4(sp)
   81c40:	df000104 	addi	fp,sp,4
   81c44:	2005883a 	mov	r2,r4
   81c48:	e0bfff05 	stb	r2,-4(fp)
	ledUpdate(id,1);
   81c4c:	e0bfff03 	ldbu	r2,-4(fp)
   81c50:	1009883a 	mov	r4,r2
   81c54:	01400044 	movi	r5,1
   81c58:	0081b9c0 	call	81b9c <ledUpdate>
	delay(200);
   81c5c:	01003204 	movi	r4,200
   81c60:	0081b600 	call	81b60 <delay>
	ledUpdate(id,0);
   81c64:	e0bfff03 	ldbu	r2,-4(fp)
   81c68:	1009883a 	mov	r4,r2
   81c6c:	000b883a 	mov	r5,zero
   81c70:	0081b9c0 	call	81b9c <ledUpdate>
	delay(50);
   81c74:	01000c84 	movi	r4,50
   81c78:	0081b600 	call	81b60 <delay>
}
   81c7c:	e037883a 	mov	sp,fp
   81c80:	dfc00117 	ldw	ra,4(sp)
   81c84:	df000017 	ldw	fp,0(sp)
   81c88:	dec00204 	addi	sp,sp,8
   81c8c:	f800283a 	ret

00081c90 <__mulsi3>:
   81c90:	0005883a 	mov	r2,zero
   81c94:	20000726 	beq	r4,zero,81cb4 <__mulsi3+0x24>
   81c98:	20c0004c 	andi	r3,r4,1
   81c9c:	2008d07a 	srli	r4,r4,1
   81ca0:	18000126 	beq	r3,zero,81ca8 <__mulsi3+0x18>
   81ca4:	1145883a 	add	r2,r2,r5
   81ca8:	294b883a 	add	r5,r5,r5
   81cac:	203ffa1e 	bne	r4,zero,81c98 <__mulsi3+0x8>
   81cb0:	f800283a 	ret
   81cb4:	f800283a 	ret

00081cb8 <_printf_r>:
   81cb8:	defffd04 	addi	sp,sp,-12
   81cbc:	dfc00015 	stw	ra,0(sp)
   81cc0:	d9800115 	stw	r6,4(sp)
   81cc4:	d9c00215 	stw	r7,8(sp)
   81cc8:	280d883a 	mov	r6,r5
   81ccc:	21400217 	ldw	r5,8(r4)
   81cd0:	d9c00104 	addi	r7,sp,4
   81cd4:	0081e780 	call	81e78 <___vfprintf_internal_r>
   81cd8:	dfc00017 	ldw	ra,0(sp)
   81cdc:	dec00304 	addi	sp,sp,12
   81ce0:	f800283a 	ret

00081ce4 <printf>:
   81ce4:	defffc04 	addi	sp,sp,-16
   81ce8:	dfc00015 	stw	ra,0(sp)
   81cec:	d9400115 	stw	r5,4(sp)
   81cf0:	d9800215 	stw	r6,8(sp)
   81cf4:	d9c00315 	stw	r7,12(sp)
   81cf8:	00800274 	movhi	r2,9
   81cfc:	10823c04 	addi	r2,r2,2288
   81d00:	10800017 	ldw	r2,0(r2)
   81d04:	200b883a 	mov	r5,r4
   81d08:	d9800104 	addi	r6,sp,4
   81d0c:	11000217 	ldw	r4,8(r2)
   81d10:	0083cf40 	call	83cf4 <__vfprintf_internal>
   81d14:	dfc00017 	ldw	ra,0(sp)
   81d18:	dec00404 	addi	sp,sp,16
   81d1c:	f800283a 	ret

00081d20 <_puts_r>:
   81d20:	defff604 	addi	sp,sp,-40
   81d24:	dc400815 	stw	r17,32(sp)
   81d28:	2023883a 	mov	r17,r4
   81d2c:	2809883a 	mov	r4,r5
   81d30:	dc000715 	stw	r16,28(sp)
   81d34:	dfc00915 	stw	ra,36(sp)
   81d38:	2821883a 	mov	r16,r5
   81d3c:	0081db80 	call	81db8 <strlen>
   81d40:	10c00044 	addi	r3,r2,1
   81d44:	d8800115 	stw	r2,4(sp)
   81d48:	89400217 	ldw	r5,8(r17)
   81d4c:	00800274 	movhi	r2,9
   81d50:	10b8e904 	addi	r2,r2,-7260
   81d54:	d8800215 	stw	r2,8(sp)
   81d58:	00800044 	movi	r2,1
   81d5c:	d8800315 	stw	r2,12(sp)
   81d60:	8809883a 	mov	r4,r17
   81d64:	00800084 	movi	r2,2
   81d68:	d9800404 	addi	r6,sp,16
   81d6c:	dc000015 	stw	r16,0(sp)
   81d70:	d8c00615 	stw	r3,24(sp)
   81d74:	dec00415 	stw	sp,16(sp)
   81d78:	d8800515 	stw	r2,20(sp)
   81d7c:	0085ff40 	call	85ff4 <__sfvwrite_r>
   81d80:	1000061e 	bne	r2,zero,81d9c <_puts_r+0x7c>
   81d84:	00800284 	movi	r2,10
   81d88:	dfc00917 	ldw	ra,36(sp)
   81d8c:	dc400817 	ldw	r17,32(sp)
   81d90:	dc000717 	ldw	r16,28(sp)
   81d94:	dec00a04 	addi	sp,sp,40
   81d98:	f800283a 	ret
   81d9c:	00bfffc4 	movi	r2,-1
   81da0:	003ff906 	br	81d88 <_puts_r+0x68>

00081da4 <puts>:
   81da4:	00800274 	movhi	r2,9
   81da8:	10823c04 	addi	r2,r2,2288
   81dac:	200b883a 	mov	r5,r4
   81db0:	11000017 	ldw	r4,0(r2)
   81db4:	0081d201 	jmpi	81d20 <_puts_r>

00081db8 <strlen>:
   81db8:	208000cc 	andi	r2,r4,3
   81dbc:	10001f1e 	bne	r2,zero,81e3c <strlen+0x84>
   81dc0:	20800017 	ldw	r2,0(r4)
   81dc4:	01ffbff4 	movhi	r7,65279
   81dc8:	39ffbfc4 	addi	r7,r7,-257
   81dcc:	01a02074 	movhi	r6,32897
   81dd0:	31a02004 	addi	r6,r6,-32640
   81dd4:	11c7883a 	add	r3,r2,r7
   81dd8:	0084303a 	nor	r2,zero,r2
   81ddc:	1886703a 	and	r3,r3,r2
   81de0:	1986703a 	and	r3,r3,r6
   81de4:	2005883a 	mov	r2,r4
   81de8:	1800101e 	bne	r3,zero,81e2c <strlen+0x74>
   81dec:	10800104 	addi	r2,r2,4
   81df0:	10c00017 	ldw	r3,0(r2)
   81df4:	19cb883a 	add	r5,r3,r7
   81df8:	00c6303a 	nor	r3,zero,r3
   81dfc:	28c6703a 	and	r3,r5,r3
   81e00:	1986703a 	and	r3,r3,r6
   81e04:	1800091e 	bne	r3,zero,81e2c <strlen+0x74>
   81e08:	10800104 	addi	r2,r2,4
   81e0c:	10c00017 	ldw	r3,0(r2)
   81e10:	19cb883a 	add	r5,r3,r7
   81e14:	00c6303a 	nor	r3,zero,r3
   81e18:	28c6703a 	and	r3,r5,r3
   81e1c:	1986703a 	and	r3,r3,r6
   81e20:	183ff226 	beq	r3,zero,81dec <strlen+0x34>
   81e24:	00000106 	br	81e2c <strlen+0x74>
   81e28:	10800044 	addi	r2,r2,1
   81e2c:	10c00007 	ldb	r3,0(r2)
   81e30:	183ffd1e 	bne	r3,zero,81e28 <strlen+0x70>
   81e34:	1105c83a 	sub	r2,r2,r4
   81e38:	f800283a 	ret
   81e3c:	2005883a 	mov	r2,r4
   81e40:	003ffa06 	br	81e2c <strlen+0x74>

00081e44 <__sprint_r>:
   81e44:	30800217 	ldw	r2,8(r6)
   81e48:	defffe04 	addi	sp,sp,-8
   81e4c:	dc000015 	stw	r16,0(sp)
   81e50:	dfc00115 	stw	ra,4(sp)
   81e54:	3021883a 	mov	r16,r6
   81e58:	10000226 	beq	r2,zero,81e64 <__sprint_r+0x20>
   81e5c:	0085ff40 	call	85ff4 <__sfvwrite_r>
   81e60:	80000215 	stw	zero,8(r16)
   81e64:	80000115 	stw	zero,4(r16)
   81e68:	dfc00117 	ldw	ra,4(sp)
   81e6c:	dc000017 	ldw	r16,0(sp)
   81e70:	dec00204 	addi	sp,sp,8
   81e74:	f800283a 	ret

00081e78 <___vfprintf_internal_r>:
   81e78:	defeb904 	addi	sp,sp,-1308
   81e7c:	dc013d15 	stw	r16,1268(sp)
   81e80:	d9013015 	stw	r4,1216(sp)
   81e84:	dfc14615 	stw	ra,1304(sp)
   81e88:	df014515 	stw	fp,1300(sp)
   81e8c:	ddc14415 	stw	r23,1296(sp)
   81e90:	dd814315 	stw	r22,1292(sp)
   81e94:	dd414215 	stw	r21,1288(sp)
   81e98:	dd014115 	stw	r20,1284(sp)
   81e9c:	dcc14015 	stw	r19,1280(sp)
   81ea0:	dc813f15 	stw	r18,1276(sp)
   81ea4:	dc413e15 	stw	r17,1272(sp)
   81ea8:	d9412915 	stw	r5,1188(sp)
   81eac:	3021883a 	mov	r16,r6
   81eb0:	d9c12d15 	stw	r7,1204(sp)
   81eb4:	00866e00 	call	866e0 <_localeconv_r>
   81eb8:	10800017 	ldw	r2,0(r2)
   81ebc:	d9013017 	ldw	r4,1216(sp)
   81ec0:	d8013315 	stw	zero,1228(sp)
   81ec4:	d8813715 	stw	r2,1244(sp)
   81ec8:	d8013415 	stw	zero,1232(sp)
   81ecc:	20000226 	beq	r4,zero,81ed8 <___vfprintf_internal_r+0x60>
   81ed0:	20800e17 	ldw	r2,56(r4)
   81ed4:	10014b26 	beq	r2,zero,82404 <___vfprintf_internal_r+0x58c>
   81ed8:	d8c12917 	ldw	r3,1188(sp)
   81edc:	1880030b 	ldhu	r2,12(r3)
   81ee0:	10c0020c 	andi	r3,r2,8
   81ee4:	18ffffcc 	andi	r3,r3,65535
   81ee8:	18e0001c 	xori	r3,r3,32768
   81eec:	18e00004 	addi	r3,r3,-32768
   81ef0:	1800ed26 	beq	r3,zero,822a8 <___vfprintf_internal_r+0x430>
   81ef4:	d9012917 	ldw	r4,1188(sp)
   81ef8:	20c00417 	ldw	r3,16(r4)
   81efc:	1800ea26 	beq	r3,zero,822a8 <___vfprintf_internal_r+0x430>
   81f00:	1100068c 	andi	r4,r2,26
   81f04:	00c00284 	movi	r3,10
   81f08:	20c0f026 	beq	r4,r3,822cc <___vfprintf_internal_r+0x454>
   81f0c:	d9010dc4 	addi	r4,sp,1079
   81f10:	d8810e04 	addi	r2,sp,1080
   81f14:	dc413017 	ldw	r17,1216(sp)
   81f18:	d8c00404 	addi	r3,sp,16
   81f1c:	d9012615 	stw	r4,1176(sp)
   81f20:	1109c83a 	sub	r4,r2,r4
   81f24:	d8812715 	stw	r2,1180(sp)
   81f28:	d8c11b15 	stw	r3,1132(sp)
   81f2c:	d8011d15 	stw	zero,1140(sp)
   81f30:	d8011c15 	stw	zero,1136(sp)
   81f34:	802b883a 	mov	r21,r16
   81f38:	d8013215 	stw	zero,1224(sp)
   81f3c:	d8013615 	stw	zero,1240(sp)
   81f40:	d8013515 	stw	zero,1236(sp)
   81f44:	d8012c15 	stw	zero,1200(sp)
   81f48:	1813883a 	mov	r9,r3
   81f4c:	d9013915 	stw	r4,1252(sp)
   81f50:	a8800007 	ldb	r2,0(r21)
   81f54:	1002f326 	beq	r2,zero,82b24 <___vfprintf_internal_r+0xcac>
   81f58:	00c00944 	movi	r3,37
   81f5c:	a825883a 	mov	r18,r21
   81f60:	10c0021e 	bne	r2,r3,81f6c <___vfprintf_internal_r+0xf4>
   81f64:	00001406 	br	81fb8 <___vfprintf_internal_r+0x140>
   81f68:	10c00326 	beq	r2,r3,81f78 <___vfprintf_internal_r+0x100>
   81f6c:	94800044 	addi	r18,r18,1
   81f70:	90800007 	ldb	r2,0(r18)
   81f74:	103ffc1e 	bne	r2,zero,81f68 <___vfprintf_internal_r+0xf0>
   81f78:	9561c83a 	sub	r16,r18,r21
   81f7c:	80000e26 	beq	r16,zero,81fb8 <___vfprintf_internal_r+0x140>
   81f80:	da011d17 	ldw	r8,1140(sp)
   81f84:	d8c11c17 	ldw	r3,1136(sp)
   81f88:	4d400015 	stw	r21,0(r9)
   81f8c:	4c000115 	stw	r16,4(r9)
   81f90:	4411883a 	add	r8,r8,r16
   81f94:	18c00044 	addi	r3,r3,1
   81f98:	da011d15 	stw	r8,1140(sp)
   81f9c:	d8c11c15 	stw	r3,1136(sp)
   81fa0:	008001c4 	movi	r2,7
   81fa4:	10c11016 	blt	r2,r3,823e8 <___vfprintf_internal_r+0x570>
   81fa8:	4a400204 	addi	r9,r9,8
   81fac:	d8812c17 	ldw	r2,1200(sp)
   81fb0:	1405883a 	add	r2,r2,r16
   81fb4:	d8812c15 	stw	r2,1200(sp)
   81fb8:	90800007 	ldb	r2,0(r18)
   81fbc:	1000ee26 	beq	r2,zero,82378 <___vfprintf_internal_r+0x500>
   81fc0:	95400044 	addi	r21,r18,1
   81fc4:	94800047 	ldb	r18,1(r18)
   81fc8:	073fffc4 	movi	fp,-1
   81fcc:	e007883a 	mov	r3,fp
   81fd0:	d8012585 	stb	zero,1174(sp)
   81fd4:	d8012e15 	stw	zero,1208(sp)
   81fd8:	0021883a 	mov	r16,zero
   81fdc:	05001604 	movi	r20,88
   81fe0:	04c00244 	movi	r19,9
   81fe4:	4839883a 	mov	fp,r9
   81fe8:	ad400044 	addi	r21,r21,1
   81fec:	90bff804 	addi	r2,r18,-32
   81ff0:	a080462e 	bgeu	r20,r2,8210c <___vfprintf_internal_r+0x294>
   81ff4:	e013883a 	mov	r9,fp
   81ff8:	9000df26 	beq	r18,zero,82378 <___vfprintf_internal_r+0x500>
   81ffc:	00c00044 	movi	r3,1
   82000:	d8c12815 	stw	r3,1184(sp)
   82004:	dc810405 	stb	r18,1040(sp)
   82008:	d8012585 	stb	zero,1174(sp)
   8200c:	d8c12b15 	stw	r3,1196(sp)
   82010:	dcc10404 	addi	r19,sp,1040
   82014:	d8013115 	stw	zero,1220(sp)
   82018:	80c0008c 	andi	r3,r16,2
   8201c:	d8c12a15 	stw	r3,1192(sp)
   82020:	18000326 	beq	r3,zero,82030 <___vfprintf_internal_r+0x1b8>
   82024:	d8c12817 	ldw	r3,1184(sp)
   82028:	18c00084 	addi	r3,r3,2
   8202c:	d8c12815 	stw	r3,1184(sp)
   82030:	80c0210c 	andi	r3,r16,132
   82034:	d8c12f15 	stw	r3,1212(sp)
   82038:	1802251e 	bne	r3,zero,828d0 <___vfprintf_internal_r+0xa58>
   8203c:	d9012e17 	ldw	r4,1208(sp)
   82040:	d8c12817 	ldw	r3,1184(sp)
   82044:	20edc83a 	sub	r22,r4,r3
   82048:	0582210e 	bge	zero,r22,828d0 <___vfprintf_internal_r+0xa58>
   8204c:	02800404 	movi	r10,16
   82050:	da011d17 	ldw	r8,1140(sp)
   82054:	d8c11c17 	ldw	r3,1136(sp)
   82058:	05c00274 	movhi	r23,9
   8205c:	bdf8fa84 	addi	r23,r23,-7190
   82060:	5580200e 	bge	r10,r22,820e4 <___vfprintf_internal_r+0x26c>
   82064:	dc813815 	stw	r18,1248(sp)
   82068:	5039883a 	mov	fp,r10
   8206c:	b825883a 	mov	r18,r23
   82070:	050001c4 	movi	r20,7
   82074:	b02f883a 	mov	r23,r22
   82078:	802d883a 	mov	r22,r16
   8207c:	dc012917 	ldw	r16,1188(sp)
   82080:	00000306 	br	82090 <___vfprintf_internal_r+0x218>
   82084:	bdfffc04 	addi	r23,r23,-16
   82088:	4a400204 	addi	r9,r9,8
   8208c:	e5c0110e 	bge	fp,r23,820d4 <___vfprintf_internal_r+0x25c>
   82090:	4c800015 	stw	r18,0(r9)
   82094:	4f000115 	stw	fp,4(r9)
   82098:	42000404 	addi	r8,r8,16
   8209c:	18c00044 	addi	r3,r3,1
   820a0:	da011d15 	stw	r8,1140(sp)
   820a4:	d8c11c15 	stw	r3,1136(sp)
   820a8:	a0fff60e 	bge	r20,r3,82084 <___vfprintf_internal_r+0x20c>
   820ac:	8809883a 	mov	r4,r17
   820b0:	800b883a 	mov	r5,r16
   820b4:	d9811b04 	addi	r6,sp,1132
   820b8:	0081e440 	call	81e44 <__sprint_r>
   820bc:	1000b41e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   820c0:	bdfffc04 	addi	r23,r23,-16
   820c4:	da011d17 	ldw	r8,1140(sp)
   820c8:	d8c11c17 	ldw	r3,1136(sp)
   820cc:	da400404 	addi	r9,sp,16
   820d0:	e5ffef16 	blt	fp,r23,82090 <___vfprintf_internal_r+0x218>
   820d4:	b021883a 	mov	r16,r22
   820d8:	b82d883a 	mov	r22,r23
   820dc:	902f883a 	mov	r23,r18
   820e0:	dc813817 	ldw	r18,1248(sp)
   820e4:	4dc00015 	stw	r23,0(r9)
   820e8:	4d800115 	stw	r22,4(r9)
   820ec:	4591883a 	add	r8,r8,r22
   820f0:	18c00044 	addi	r3,r3,1
   820f4:	da011d15 	stw	r8,1140(sp)
   820f8:	d8c11c15 	stw	r3,1136(sp)
   820fc:	008001c4 	movi	r2,7
   82100:	10c3fe16 	blt	r2,r3,830fc <___vfprintf_internal_r+0x1284>
   82104:	4a400204 	addi	r9,r9,8
   82108:	0001f306 	br	828d8 <___vfprintf_internal_r+0xa60>
   8210c:	1085883a 	add	r2,r2,r2
   82110:	1085883a 	add	r2,r2,r2
   82114:	01000234 	movhi	r4,8
   82118:	21084a04 	addi	r4,r4,8488
   8211c:	1105883a 	add	r2,r2,r4
   82120:	10800017 	ldw	r2,0(r2)
   82124:	1000683a 	jmp	r2
   82128:	00082804 	movi	zero,8352
   8212c:	00081ff4 	movhi	zero,8319
   82130:	00081ff4 	movhi	zero,8319
   82134:	0008281c 	xori	zero,zero,8352
   82138:	00081ff4 	movhi	zero,8319
   8213c:	00081ff4 	movhi	zero,8319
   82140:	00081ff4 	movhi	zero,8319
   82144:	00081ff4 	movhi	zero,8319
   82148:	00081ff4 	movhi	zero,8319
   8214c:	00081ff4 	movhi	zero,8319
   82150:	000826d4 	movui	zero,8347
   82154:	00082868 	cmpgeui	zero,zero,8353
   82158:	00081ff4 	movhi	zero,8319
   8215c:	0008229c 	xori	zero,zero,8330
   82160:	0008263c 	xorhi	zero,zero,8344
   82164:	00081ff4 	movhi	zero,8319
   82168:	00082828 	cmpgeui	zero,zero,8352
   8216c:	00082834 	movhi	zero,8352
   82170:	00082834 	movhi	zero,8352
   82174:	00082834 	movhi	zero,8352
   82178:	00082834 	movhi	zero,8352
   8217c:	00082834 	movhi	zero,8352
   82180:	00082834 	movhi	zero,8352
   82184:	00082834 	movhi	zero,8352
   82188:	00082834 	movhi	zero,8352
   8218c:	00082834 	movhi	zero,8352
   82190:	00081ff4 	movhi	zero,8319
   82194:	00081ff4 	movhi	zero,8319
   82198:	00081ff4 	movhi	zero,8319
   8219c:	00081ff4 	movhi	zero,8319
   821a0:	00081ff4 	movhi	zero,8319
   821a4:	00081ff4 	movhi	zero,8319
   821a8:	00081ff4 	movhi	zero,8319
   821ac:	00081ff4 	movhi	zero,8319
   821b0:	00081ff4 	movhi	zero,8319
   821b4:	00081ff4 	movhi	zero,8319
   821b8:	0008240c 	andi	zero,zero,8336
   821bc:	000824cc 	andi	zero,zero,8339
   821c0:	00081ff4 	movhi	zero,8319
   821c4:	000824cc 	andi	zero,zero,8339
   821c8:	00081ff4 	movhi	zero,8319
   821cc:	00081ff4 	movhi	zero,8319
   821d0:	00081ff4 	movhi	zero,8319
   821d4:	00081ff4 	movhi	zero,8319
   821d8:	00082560 	cmpeqi	zero,zero,8341
   821dc:	00081ff4 	movhi	zero,8319
   821e0:	00081ff4 	movhi	zero,8319
   821e4:	0008256c 	andhi	zero,zero,8341
   821e8:	00081ff4 	movhi	zero,8319
   821ec:	00081ff4 	movhi	zero,8319
   821f0:	00081ff4 	movhi	zero,8319
   821f4:	00081ff4 	movhi	zero,8319
   821f8:	00081ff4 	movhi	zero,8319
   821fc:	000825a4 	muli	zero,zero,8342
   82200:	00081ff4 	movhi	zero,8319
   82204:	00081ff4 	movhi	zero,8319
   82208:	000825e0 	cmpeqi	zero,zero,8343
   8220c:	00081ff4 	movhi	zero,8319
   82210:	00081ff4 	movhi	zero,8319
   82214:	00081ff4 	movhi	zero,8319
   82218:	00081ff4 	movhi	zero,8319
   8221c:	00081ff4 	movhi	zero,8319
   82220:	00081ff4 	movhi	zero,8319
   82224:	00081ff4 	movhi	zero,8319
   82228:	00081ff4 	movhi	zero,8319
   8222c:	00081ff4 	movhi	zero,8319
   82230:	00081ff4 	movhi	zero,8319
   82234:	00082878 	rdprs	zero,zero,8353
   82238:	000828ac 	andhi	zero,zero,8354
   8223c:	000824cc 	andi	zero,zero,8339
   82240:	000824cc 	andi	zero,zero,8339
   82244:	000824cc 	andi	zero,zero,8339
   82248:	000827f8 	rdprs	zero,zero,8351
   8224c:	000828ac 	andhi	zero,zero,8354
   82250:	00081ff4 	movhi	zero,8319
   82254:	00081ff4 	movhi	zero,8319
   82258:	00082684 	movi	zero,8346
   8225c:	00081ff4 	movhi	zero,8319
   82260:	0008269c 	xori	zero,zero,8346
   82264:	000828b8 	rdprs	zero,zero,8354
   82268:	000826fc 	xorhi	zero,zero,8347
   8226c:	0008274c 	andi	zero,zero,8349
   82270:	00081ff4 	movhi	zero,8319
   82274:	00082758 	cmpnei	zero,zero,8349
   82278:	00081ff4 	movhi	zero,8319
   8227c:	000828c4 	movi	zero,8355
   82280:	00081ff4 	movhi	zero,8319
   82284:	00081ff4 	movhi	zero,8319
   82288:	000827bc 	xorhi	zero,zero,8350
   8228c:	d9012e17 	ldw	r4,1208(sp)
   82290:	d8812d15 	stw	r2,1204(sp)
   82294:	0109c83a 	sub	r4,zero,r4
   82298:	d9012e15 	stw	r4,1208(sp)
   8229c:	84000114 	ori	r16,r16,4
   822a0:	ac800007 	ldb	r18,0(r21)
   822a4:	003f5006 	br	81fe8 <___vfprintf_internal_r+0x170>
   822a8:	d9013017 	ldw	r4,1216(sp)
   822ac:	d9412917 	ldw	r5,1188(sp)
   822b0:	0083d180 	call	83d18 <__swsetup_r>
   822b4:	10003d1e 	bne	r2,zero,823ac <___vfprintf_internal_r+0x534>
   822b8:	d8c12917 	ldw	r3,1188(sp)
   822bc:	1880030b 	ldhu	r2,12(r3)
   822c0:	00c00284 	movi	r3,10
   822c4:	1100068c 	andi	r4,r2,26
   822c8:	20ff101e 	bne	r4,r3,81f0c <___vfprintf_internal_r+0x94>
   822cc:	d9012917 	ldw	r4,1188(sp)
   822d0:	20c0038b 	ldhu	r3,14(r4)
   822d4:	193fffcc 	andi	r4,r3,65535
   822d8:	2120001c 	xori	r4,r4,32768
   822dc:	21200004 	addi	r4,r4,-32768
   822e0:	203f0a16 	blt	r4,zero,81f0c <___vfprintf_internal_r+0x94>
   822e4:	d9012917 	ldw	r4,1188(sp)
   822e8:	d9c12d17 	ldw	r7,1204(sp)
   822ec:	10bfff4c 	andi	r2,r2,65533
   822f0:	22800717 	ldw	r10,28(r4)
   822f4:	22400917 	ldw	r9,36(r4)
   822f8:	d9013017 	ldw	r4,1216(sp)
   822fc:	02010004 	movi	r8,1024
   82300:	d881070d 	sth	r2,1052(sp)
   82304:	d9410404 	addi	r5,sp,1040
   82308:	d8800404 	addi	r2,sp,16
   8230c:	800d883a 	mov	r6,r16
   82310:	d8c1078d 	sth	r3,1054(sp)
   82314:	da810b15 	stw	r10,1068(sp)
   82318:	da410d15 	stw	r9,1076(sp)
   8231c:	d8810415 	stw	r2,1040(sp)
   82320:	d8810815 	stw	r2,1056(sp)
   82324:	da010615 	stw	r8,1048(sp)
   82328:	da010915 	stw	r8,1060(sp)
   8232c:	d8010a15 	stw	zero,1064(sp)
   82330:	0081e780 	call	81e78 <___vfprintf_internal_r>
   82334:	d8812c15 	stw	r2,1200(sp)
   82338:	10000416 	blt	r2,zero,8234c <___vfprintf_internal_r+0x4d4>
   8233c:	d9013017 	ldw	r4,1216(sp)
   82340:	d9410404 	addi	r5,sp,1040
   82344:	00856e40 	call	856e4 <_fflush_r>
   82348:	1006501e 	bne	r2,zero,83c8c <___vfprintf_internal_r+0x1e14>
   8234c:	d881070b 	ldhu	r2,1052(sp)
   82350:	1080100c 	andi	r2,r2,64
   82354:	10bfffcc 	andi	r2,r2,65535
   82358:	10a0001c 	xori	r2,r2,32768
   8235c:	10a00004 	addi	r2,r2,-32768
   82360:	10001426 	beq	r2,zero,823b4 <___vfprintf_internal_r+0x53c>
   82364:	d8c12917 	ldw	r3,1188(sp)
   82368:	1880030b 	ldhu	r2,12(r3)
   8236c:	10801014 	ori	r2,r2,64
   82370:	1880030d 	sth	r2,12(r3)
   82374:	00000f06 	br	823b4 <___vfprintf_internal_r+0x53c>
   82378:	d8811d17 	ldw	r2,1140(sp)
   8237c:	10000426 	beq	r2,zero,82390 <___vfprintf_internal_r+0x518>
   82380:	d9013017 	ldw	r4,1216(sp)
   82384:	d9412917 	ldw	r5,1188(sp)
   82388:	d9811b04 	addi	r6,sp,1132
   8238c:	0081e440 	call	81e44 <__sprint_r>
   82390:	d8c12917 	ldw	r3,1188(sp)
   82394:	1880030b 	ldhu	r2,12(r3)
   82398:	1080100c 	andi	r2,r2,64
   8239c:	10bfffcc 	andi	r2,r2,65535
   823a0:	10a0001c 	xori	r2,r2,32768
   823a4:	10a00004 	addi	r2,r2,-32768
   823a8:	10000226 	beq	r2,zero,823b4 <___vfprintf_internal_r+0x53c>
   823ac:	00bfffc4 	movi	r2,-1
   823b0:	d8812c15 	stw	r2,1200(sp)
   823b4:	d8812c17 	ldw	r2,1200(sp)
   823b8:	dfc14617 	ldw	ra,1304(sp)
   823bc:	df014517 	ldw	fp,1300(sp)
   823c0:	ddc14417 	ldw	r23,1296(sp)
   823c4:	dd814317 	ldw	r22,1292(sp)
   823c8:	dd414217 	ldw	r21,1288(sp)
   823cc:	dd014117 	ldw	r20,1284(sp)
   823d0:	dcc14017 	ldw	r19,1280(sp)
   823d4:	dc813f17 	ldw	r18,1276(sp)
   823d8:	dc413e17 	ldw	r17,1272(sp)
   823dc:	dc013d17 	ldw	r16,1268(sp)
   823e0:	dec14704 	addi	sp,sp,1308
   823e4:	f800283a 	ret
   823e8:	d9412917 	ldw	r5,1188(sp)
   823ec:	8809883a 	mov	r4,r17
   823f0:	d9811b04 	addi	r6,sp,1132
   823f4:	0081e440 	call	81e44 <__sprint_r>
   823f8:	103fe51e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   823fc:	da400404 	addi	r9,sp,16
   82400:	003eea06 	br	81fac <___vfprintf_internal_r+0x134>
   82404:	00859a00 	call	859a0 <__sinit>
   82408:	003eb306 	br	81ed8 <___vfprintf_internal_r+0x60>
   8240c:	e013883a 	mov	r9,fp
   82410:	84000414 	ori	r16,r16,16
   82414:	1839883a 	mov	fp,r3
   82418:	8080080c 	andi	r2,r16,32
   8241c:	10034426 	beq	r2,zero,83130 <___vfprintf_internal_r+0x12b8>
   82420:	d8c12d17 	ldw	r3,1204(sp)
   82424:	18800117 	ldw	r2,4(r3)
   82428:	1dc00017 	ldw	r23,0(r3)
   8242c:	18c00204 	addi	r3,r3,8
   82430:	d8c12d15 	stw	r3,1204(sp)
   82434:	102d883a 	mov	r22,r2
   82438:	1003020e 	bge	r2,zero,83044 <___vfprintf_internal_r+0x11cc>
   8243c:	05efc83a 	sub	r23,zero,r23
   82440:	b804c03a 	cmpne	r2,r23,zero
   82444:	05adc83a 	sub	r22,zero,r22
   82448:	b0adc83a 	sub	r22,r22,r2
   8244c:	00800b44 	movi	r2,45
   82450:	d8812585 	stb	r2,1174(sp)
   82454:	00c00044 	movi	r3,1
   82458:	bd84b03a 	or	r2,r23,r22
   8245c:	e0000216 	blt	fp,zero,82468 <___vfprintf_internal_r+0x5f0>
   82460:	013fdfc4 	movi	r4,-129
   82464:	8120703a 	and	r16,r16,r4
   82468:	1001cc1e 	bne	r2,zero,82b9c <___vfprintf_internal_r+0xd24>
   8246c:	e001cb1e 	bne	fp,zero,82b9c <___vfprintf_internal_r+0xd24>
   82470:	18c03fcc 	andi	r3,r3,255
   82474:	1802ca1e 	bne	r3,zero,82fa0 <___vfprintf_internal_r+0x1128>
   82478:	8080004c 	andi	r2,r16,1
   8247c:	1002c826 	beq	r2,zero,82fa0 <___vfprintf_internal_r+0x1128>
   82480:	d8c13917 	ldw	r3,1252(sp)
   82484:	00800c04 	movi	r2,48
   82488:	d8810dc5 	stb	r2,1079(sp)
   8248c:	d8c12b15 	stw	r3,1196(sp)
   82490:	dcc10dc4 	addi	r19,sp,1079
   82494:	d8812b17 	ldw	r2,1196(sp)
   82498:	d8812815 	stw	r2,1184(sp)
   8249c:	1700010e 	bge	r2,fp,824a4 <___vfprintf_internal_r+0x62c>
   824a0:	df012815 	stw	fp,1184(sp)
   824a4:	d8812583 	ldbu	r2,1174(sp)
   824a8:	df013115 	stw	fp,1220(sp)
   824ac:	10803fcc 	andi	r2,r2,255
   824b0:	1080201c 	xori	r2,r2,128
   824b4:	10bfe004 	addi	r2,r2,-128
   824b8:	103ed726 	beq	r2,zero,82018 <___vfprintf_internal_r+0x1a0>
   824bc:	d8c12817 	ldw	r3,1184(sp)
   824c0:	18c00044 	addi	r3,r3,1
   824c4:	d8c12815 	stw	r3,1184(sp)
   824c8:	003ed306 	br	82018 <___vfprintf_internal_r+0x1a0>
   824cc:	8080020c 	andi	r2,r16,8
   824d0:	e013883a 	mov	r9,fp
   824d4:	1839883a 	mov	fp,r3
   824d8:	1003a626 	beq	r2,zero,83374 <___vfprintf_internal_r+0x14fc>
   824dc:	d9012d17 	ldw	r4,1204(sp)
   824e0:	25800017 	ldw	r22,0(r4)
   824e4:	25000117 	ldw	r20,4(r4)
   824e8:	21000204 	addi	r4,r4,8
   824ec:	d9012d15 	stw	r4,1204(sp)
   824f0:	dd813315 	stw	r22,1228(sp)
   824f4:	dd013415 	stw	r20,1232(sp)
   824f8:	b009883a 	mov	r4,r22
   824fc:	a00b883a 	mov	r5,r20
   82500:	da413c15 	stw	r9,1264(sp)
   82504:	0088b2c0 	call	88b2c <__isinfd>
   82508:	da413c17 	ldw	r9,1264(sp)
   8250c:	b009883a 	mov	r4,r22
   82510:	a00b883a 	mov	r5,r20
   82514:	10041d26 	beq	r2,zero,8358c <___vfprintf_internal_r+0x1714>
   82518:	000d883a 	mov	r6,zero
   8251c:	000f883a 	mov	r7,zero
   82520:	008a9000 	call	8a900 <__ltdf2>
   82524:	da413c17 	ldw	r9,1264(sp)
   82528:	1004da16 	blt	r2,zero,83894 <___vfprintf_internal_r+0x1a1c>
   8252c:	d8812583 	ldbu	r2,1174(sp)
   82530:	00c011c4 	movi	r3,71
   82534:	1c83d116 	blt	r3,r18,8347c <___vfprintf_internal_r+0x1604>
   82538:	04c00274 	movhi	r19,9
   8253c:	9cf8ea04 	addi	r19,r19,-7256
   82540:	00c000c4 	movi	r3,3
   82544:	d8c12815 	stw	r3,1184(sp)
   82548:	00ffdfc4 	movi	r3,-129
   8254c:	80e0703a 	and	r16,r16,r3
   82550:	d8c12817 	ldw	r3,1184(sp)
   82554:	d8013115 	stw	zero,1220(sp)
   82558:	d8c12b15 	stw	r3,1196(sp)
   8255c:	003fd306 	br	824ac <___vfprintf_internal_r+0x634>
   82560:	84000214 	ori	r16,r16,8
   82564:	ac800007 	ldb	r18,0(r21)
   82568:	003e9f06 	br	81fe8 <___vfprintf_internal_r+0x170>
   8256c:	e013883a 	mov	r9,fp
   82570:	84000414 	ori	r16,r16,16
   82574:	1839883a 	mov	fp,r3
   82578:	8080080c 	andi	r2,r16,32
   8257c:	10031d26 	beq	r2,zero,831f4 <___vfprintf_internal_r+0x137c>
   82580:	d8812d17 	ldw	r2,1204(sp)
   82584:	0007883a 	mov	r3,zero
   82588:	15c00017 	ldw	r23,0(r2)
   8258c:	15800117 	ldw	r22,4(r2)
   82590:	10800204 	addi	r2,r2,8
   82594:	d8812d15 	stw	r2,1204(sp)
   82598:	d8012585 	stb	zero,1174(sp)
   8259c:	bd84b03a 	or	r2,r23,r22
   825a0:	003fae06 	br	8245c <___vfprintf_internal_r+0x5e4>
   825a4:	e013883a 	mov	r9,fp
   825a8:	84000414 	ori	r16,r16,16
   825ac:	1839883a 	mov	fp,r3
   825b0:	8080080c 	andi	r2,r16,32
   825b4:	1002e726 	beq	r2,zero,83154 <___vfprintf_internal_r+0x12dc>
   825b8:	d8c12d17 	ldw	r3,1204(sp)
   825bc:	d9012d17 	ldw	r4,1204(sp)
   825c0:	1dc00017 	ldw	r23,0(r3)
   825c4:	1d800117 	ldw	r22,4(r3)
   825c8:	21000204 	addi	r4,r4,8
   825cc:	00c00044 	movi	r3,1
   825d0:	d9012d15 	stw	r4,1204(sp)
   825d4:	bd84b03a 	or	r2,r23,r22
   825d8:	d8012585 	stb	zero,1174(sp)
   825dc:	003f9f06 	br	8245c <___vfprintf_internal_r+0x5e4>
   825e0:	e013883a 	mov	r9,fp
   825e4:	1839883a 	mov	fp,r3
   825e8:	00c00274 	movhi	r3,9
   825ec:	18f8ee04 	addi	r3,r3,-7240
   825f0:	d8c13615 	stw	r3,1240(sp)
   825f4:	8080080c 	andi	r2,r16,32
   825f8:	10007726 	beq	r2,zero,827d8 <___vfprintf_internal_r+0x960>
   825fc:	d9012d17 	ldw	r4,1204(sp)
   82600:	25c00017 	ldw	r23,0(r4)
   82604:	25800117 	ldw	r22,4(r4)
   82608:	21000204 	addi	r4,r4,8
   8260c:	d9012d15 	stw	r4,1204(sp)
   82610:	8080004c 	andi	r2,r16,1
   82614:	1002c226 	beq	r2,zero,83120 <___vfprintf_internal_r+0x12a8>
   82618:	bd84b03a 	or	r2,r23,r22
   8261c:	10035d26 	beq	r2,zero,83394 <___vfprintf_internal_r+0x151c>
   82620:	00c00c04 	movi	r3,48
   82624:	d8c12505 	stb	r3,1172(sp)
   82628:	dc812545 	stb	r18,1173(sp)
   8262c:	84000094 	ori	r16,r16,2
   82630:	00c00084 	movi	r3,2
   82634:	d8012585 	stb	zero,1174(sp)
   82638:	003f8806 	br	8245c <___vfprintf_internal_r+0x5e4>
   8263c:	ac800007 	ldb	r18,0(r21)
   82640:	00c00a84 	movi	r3,42
   82644:	adc00044 	addi	r23,r21,1
   82648:	90c57526 	beq	r18,r3,83c20 <___vfprintf_internal_r+0x1da8>
   8264c:	95bff404 	addi	r22,r18,-48
   82650:	0009883a 	mov	r4,zero
   82654:	9d84ff36 	bltu	r19,r22,83a54 <___vfprintf_internal_r+0x1bdc>
   82658:	01400284 	movi	r5,10
   8265c:	0081c900 	call	81c90 <__mulsi3>
   82660:	bc800007 	ldb	r18,0(r23)
   82664:	b089883a 	add	r4,r22,r2
   82668:	bdc00044 	addi	r23,r23,1
   8266c:	95bff404 	addi	r22,r18,-48
   82670:	9dbff92e 	bgeu	r19,r22,82658 <___vfprintf_internal_r+0x7e0>
   82674:	2007883a 	mov	r3,r4
   82678:	20044316 	blt	r4,zero,83788 <___vfprintf_internal_r+0x1910>
   8267c:	b82b883a 	mov	r21,r23
   82680:	003e5a06 	br	81fec <___vfprintf_internal_r+0x174>
   82684:	ac800007 	ldb	r18,0(r21)
   82688:	01001b04 	movi	r4,108
   8268c:	a805883a 	mov	r2,r21
   82690:	91045526 	beq	r18,r4,837e8 <___vfprintf_internal_r+0x1970>
   82694:	84000414 	ori	r16,r16,16
   82698:	003e5306 	br	81fe8 <___vfprintf_internal_r+0x170>
   8269c:	8080080c 	andi	r2,r16,32
   826a0:	e013883a 	mov	r9,fp
   826a4:	10034026 	beq	r2,zero,833a8 <___vfprintf_internal_r+0x1530>
   826a8:	d9012d17 	ldw	r4,1204(sp)
   826ac:	20800017 	ldw	r2,0(r4)
   826b0:	d9012c17 	ldw	r4,1200(sp)
   826b4:	2007d7fa 	srai	r3,r4,31
   826b8:	d9012d17 	ldw	r4,1204(sp)
   826bc:	10c00115 	stw	r3,4(r2)
   826c0:	21000104 	addi	r4,r4,4
   826c4:	d9012d15 	stw	r4,1204(sp)
   826c8:	d9012c17 	ldw	r4,1200(sp)
   826cc:	11000015 	stw	r4,0(r2)
   826d0:	003e1f06 	br	81f50 <___vfprintf_internal_r+0xd8>
   826d4:	d9012d17 	ldw	r4,1204(sp)
   826d8:	21000017 	ldw	r4,0(r4)
   826dc:	d9012e15 	stw	r4,1208(sp)
   826e0:	d9012d17 	ldw	r4,1204(sp)
   826e4:	20800104 	addi	r2,r4,4
   826e8:	d9012e17 	ldw	r4,1208(sp)
   826ec:	203ee716 	blt	r4,zero,8228c <___vfprintf_internal_r+0x414>
   826f0:	d8812d15 	stw	r2,1204(sp)
   826f4:	ac800007 	ldb	r18,0(r21)
   826f8:	003e3b06 	br	81fe8 <___vfprintf_internal_r+0x170>
   826fc:	e013883a 	mov	r9,fp
   82700:	1839883a 	mov	fp,r3
   82704:	d8c12d17 	ldw	r3,1204(sp)
   82708:	00800c04 	movi	r2,48
   8270c:	01000274 	movhi	r4,9
   82710:	2138f304 	addi	r4,r4,-7220
   82714:	1dc00017 	ldw	r23,0(r3)
   82718:	18c00104 	addi	r3,r3,4
   8271c:	d8812505 	stb	r2,1172(sp)
   82720:	00801e04 	movi	r2,120
   82724:	d8812545 	stb	r2,1173(sp)
   82728:	d8c12d15 	stw	r3,1204(sp)
   8272c:	002d883a 	mov	r22,zero
   82730:	84000094 	ori	r16,r16,2
   82734:	d9013615 	stw	r4,1240(sp)
   82738:	00c00084 	movi	r3,2
   8273c:	04801e04 	movi	r18,120
   82740:	b805883a 	mov	r2,r23
   82744:	d8012585 	stb	zero,1174(sp)
   82748:	003f4406 	br	8245c <___vfprintf_internal_r+0x5e4>
   8274c:	84000814 	ori	r16,r16,32
   82750:	ac800007 	ldb	r18,0(r21)
   82754:	003e2406 	br	81fe8 <___vfprintf_internal_r+0x170>
   82758:	d8812d17 	ldw	r2,1204(sp)
   8275c:	d8012585 	stb	zero,1174(sp)
   82760:	e013883a 	mov	r9,fp
   82764:	14c00017 	ldw	r19,0(r2)
   82768:	1839883a 	mov	fp,r3
   8276c:	15c00104 	addi	r23,r2,4
   82770:	98045526 	beq	r19,zero,838c8 <___vfprintf_internal_r+0x1a50>
   82774:	9809883a 	mov	r4,r19
   82778:	18043116 	blt	r3,zero,83840 <___vfprintf_internal_r+0x19c8>
   8277c:	000b883a 	mov	r5,zero
   82780:	180d883a 	mov	r6,r3
   82784:	da413c15 	stw	r9,1264(sp)
   82788:	00870400 	call	87040 <memchr>
   8278c:	da413c17 	ldw	r9,1264(sp)
   82790:	10047a26 	beq	r2,zero,8397c <___vfprintf_internal_r+0x1b04>
   82794:	14c5c83a 	sub	r2,r2,r19
   82798:	d8812b15 	stw	r2,1196(sp)
   8279c:	e083d40e 	bge	fp,r2,836f0 <___vfprintf_internal_r+0x1878>
   827a0:	df012815 	stw	fp,1184(sp)
   827a4:	e004e416 	blt	fp,zero,83b38 <___vfprintf_internal_r+0x1cc0>
   827a8:	d8812583 	ldbu	r2,1174(sp)
   827ac:	df012b15 	stw	fp,1196(sp)
   827b0:	ddc12d15 	stw	r23,1204(sp)
   827b4:	d8013115 	stw	zero,1220(sp)
   827b8:	003f3c06 	br	824ac <___vfprintf_internal_r+0x634>
   827bc:	00800274 	movhi	r2,9
   827c0:	10b8f304 	addi	r2,r2,-7220
   827c4:	d8813615 	stw	r2,1240(sp)
   827c8:	8080080c 	andi	r2,r16,32
   827cc:	e013883a 	mov	r9,fp
   827d0:	1839883a 	mov	fp,r3
   827d4:	103f891e 	bne	r2,zero,825fc <___vfprintf_internal_r+0x784>
   827d8:	8080040c 	andi	r2,r16,16
   827dc:	1002c326 	beq	r2,zero,832ec <___vfprintf_internal_r+0x1474>
   827e0:	d8812d17 	ldw	r2,1204(sp)
   827e4:	002d883a 	mov	r22,zero
   827e8:	15c00017 	ldw	r23,0(r2)
   827ec:	10800104 	addi	r2,r2,4
   827f0:	d8812d15 	stw	r2,1204(sp)
   827f4:	003f8606 	br	82610 <___vfprintf_internal_r+0x798>
   827f8:	84001014 	ori	r16,r16,64
   827fc:	ac800007 	ldb	r18,0(r21)
   82800:	003df906 	br	81fe8 <___vfprintf_internal_r+0x170>
   82804:	d8812587 	ldb	r2,1174(sp)
   82808:	1002e51e 	bne	r2,zero,833a0 <___vfprintf_internal_r+0x1528>
   8280c:	00800804 	movi	r2,32
   82810:	d8812585 	stb	r2,1174(sp)
   82814:	ac800007 	ldb	r18,0(r21)
   82818:	003df306 	br	81fe8 <___vfprintf_internal_r+0x170>
   8281c:	84000054 	ori	r16,r16,1
   82820:	ac800007 	ldb	r18,0(r21)
   82824:	003df006 	br	81fe8 <___vfprintf_internal_r+0x170>
   82828:	84002014 	ori	r16,r16,128
   8282c:	ac800007 	ldb	r18,0(r21)
   82830:	003ded06 	br	81fe8 <___vfprintf_internal_r+0x170>
   82834:	0009883a 	mov	r4,zero
   82838:	95bff404 	addi	r22,r18,-48
   8283c:	182f883a 	mov	r23,r3
   82840:	01400284 	movi	r5,10
   82844:	0081c900 	call	81c90 <__mulsi3>
   82848:	ac800007 	ldb	r18,0(r21)
   8284c:	1589883a 	add	r4,r2,r22
   82850:	ad400044 	addi	r21,r21,1
   82854:	95bff404 	addi	r22,r18,-48
   82858:	9dbff92e 	bgeu	r19,r22,82840 <___vfprintf_internal_r+0x9c8>
   8285c:	b807883a 	mov	r3,r23
   82860:	d9012e15 	stw	r4,1208(sp)
   82864:	003de106 	br	81fec <___vfprintf_internal_r+0x174>
   82868:	00800ac4 	movi	r2,43
   8286c:	d8812585 	stb	r2,1174(sp)
   82870:	ac800007 	ldb	r18,0(r21)
   82874:	003ddc06 	br	81fe8 <___vfprintf_internal_r+0x170>
   82878:	d8c12d17 	ldw	r3,1204(sp)
   8287c:	d9012d17 	ldw	r4,1204(sp)
   82880:	e013883a 	mov	r9,fp
   82884:	18800017 	ldw	r2,0(r3)
   82888:	21000104 	addi	r4,r4,4
   8288c:	00c00044 	movi	r3,1
   82890:	d8c12815 	stw	r3,1184(sp)
   82894:	d8012585 	stb	zero,1174(sp)
   82898:	d8810405 	stb	r2,1040(sp)
   8289c:	d9012d15 	stw	r4,1204(sp)
   828a0:	d8c12b15 	stw	r3,1196(sp)
   828a4:	dcc10404 	addi	r19,sp,1040
   828a8:	003dda06 	br	82014 <___vfprintf_internal_r+0x19c>
   828ac:	e013883a 	mov	r9,fp
   828b0:	1839883a 	mov	fp,r3
   828b4:	003ed806 	br	82418 <___vfprintf_internal_r+0x5a0>
   828b8:	e013883a 	mov	r9,fp
   828bc:	1839883a 	mov	fp,r3
   828c0:	003f2d06 	br	82578 <___vfprintf_internal_r+0x700>
   828c4:	e013883a 	mov	r9,fp
   828c8:	1839883a 	mov	fp,r3
   828cc:	003f3806 	br	825b0 <___vfprintf_internal_r+0x738>
   828d0:	da011d17 	ldw	r8,1140(sp)
   828d4:	d8c11c17 	ldw	r3,1136(sp)
   828d8:	d8812587 	ldb	r2,1174(sp)
   828dc:	10000b26 	beq	r2,zero,8290c <___vfprintf_internal_r+0xa94>
   828e0:	d8812584 	addi	r2,sp,1174
   828e4:	48800015 	stw	r2,0(r9)
   828e8:	00800044 	movi	r2,1
   828ec:	48800115 	stw	r2,4(r9)
   828f0:	4091883a 	add	r8,r8,r2
   828f4:	1887883a 	add	r3,r3,r2
   828f8:	da011d15 	stw	r8,1140(sp)
   828fc:	d8c11c15 	stw	r3,1136(sp)
   82900:	008001c4 	movi	r2,7
   82904:	10c18e16 	blt	r2,r3,82f40 <___vfprintf_internal_r+0x10c8>
   82908:	4a400204 	addi	r9,r9,8
   8290c:	d9012a17 	ldw	r4,1192(sp)
   82910:	20000b26 	beq	r4,zero,82940 <___vfprintf_internal_r+0xac8>
   82914:	d8812504 	addi	r2,sp,1172
   82918:	48800015 	stw	r2,0(r9)
   8291c:	00800084 	movi	r2,2
   82920:	48800115 	stw	r2,4(r9)
   82924:	4091883a 	add	r8,r8,r2
   82928:	18c00044 	addi	r3,r3,1
   8292c:	da011d15 	stw	r8,1140(sp)
   82930:	d8c11c15 	stw	r3,1136(sp)
   82934:	008001c4 	movi	r2,7
   82938:	10c17816 	blt	r2,r3,82f1c <___vfprintf_internal_r+0x10a4>
   8293c:	4a400204 	addi	r9,r9,8
   82940:	d9012f17 	ldw	r4,1212(sp)
   82944:	00802004 	movi	r2,128
   82948:	2080fc26 	beq	r4,r2,82d3c <___vfprintf_internal_r+0xec4>
   8294c:	d8813117 	ldw	r2,1220(sp)
   82950:	d9012b17 	ldw	r4,1196(sp)
   82954:	112fc83a 	sub	r23,r2,r4
   82958:	05c02a0e 	bge	zero,r23,82a04 <___vfprintf_internal_r+0xb8c>
   8295c:	07000404 	movi	fp,16
   82960:	05000274 	movhi	r20,9
   82964:	a538fe84 	addi	r20,r20,-7174
   82968:	e5c01d0e 	bge	fp,r23,829e0 <___vfprintf_internal_r+0xb68>
   8296c:	dc812a15 	stw	r18,1192(sp)
   82970:	058001c4 	movi	r22,7
   82974:	a025883a 	mov	r18,r20
   82978:	8029883a 	mov	r20,r16
   8297c:	dc012917 	ldw	r16,1188(sp)
   82980:	00000306 	br	82990 <___vfprintf_internal_r+0xb18>
   82984:	bdfffc04 	addi	r23,r23,-16
   82988:	4a400204 	addi	r9,r9,8
   8298c:	e5c0110e 	bge	fp,r23,829d4 <___vfprintf_internal_r+0xb5c>
   82990:	4c800015 	stw	r18,0(r9)
   82994:	4f000115 	stw	fp,4(r9)
   82998:	42000404 	addi	r8,r8,16
   8299c:	18c00044 	addi	r3,r3,1
   829a0:	da011d15 	stw	r8,1140(sp)
   829a4:	d8c11c15 	stw	r3,1136(sp)
   829a8:	b0fff60e 	bge	r22,r3,82984 <___vfprintf_internal_r+0xb0c>
   829ac:	8809883a 	mov	r4,r17
   829b0:	800b883a 	mov	r5,r16
   829b4:	d9811b04 	addi	r6,sp,1132
   829b8:	0081e440 	call	81e44 <__sprint_r>
   829bc:	103e741e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   829c0:	bdfffc04 	addi	r23,r23,-16
   829c4:	da011d17 	ldw	r8,1140(sp)
   829c8:	d8c11c17 	ldw	r3,1136(sp)
   829cc:	da400404 	addi	r9,sp,16
   829d0:	e5ffef16 	blt	fp,r23,82990 <___vfprintf_internal_r+0xb18>
   829d4:	a021883a 	mov	r16,r20
   829d8:	9029883a 	mov	r20,r18
   829dc:	dc812a17 	ldw	r18,1192(sp)
   829e0:	4d000015 	stw	r20,0(r9)
   829e4:	4dc00115 	stw	r23,4(r9)
   829e8:	45d1883a 	add	r8,r8,r23
   829ec:	18c00044 	addi	r3,r3,1
   829f0:	da011d15 	stw	r8,1140(sp)
   829f4:	d8c11c15 	stw	r3,1136(sp)
   829f8:	008001c4 	movi	r2,7
   829fc:	10c13e16 	blt	r2,r3,82ef8 <___vfprintf_internal_r+0x1080>
   82a00:	4a400204 	addi	r9,r9,8
   82a04:	8080400c 	andi	r2,r16,256
   82a08:	1000831e 	bne	r2,zero,82c18 <___vfprintf_internal_r+0xda0>
   82a0c:	d8812b17 	ldw	r2,1196(sp)
   82a10:	4cc00015 	stw	r19,0(r9)
   82a14:	48800115 	stw	r2,4(r9)
   82a18:	4091883a 	add	r8,r8,r2
   82a1c:	18c00044 	addi	r3,r3,1
   82a20:	da011d15 	stw	r8,1140(sp)
   82a24:	d8c11c15 	stw	r3,1136(sp)
   82a28:	008001c4 	movi	r2,7
   82a2c:	10c05316 	blt	r2,r3,82b7c <___vfprintf_internal_r+0xd04>
   82a30:	4a400204 	addi	r9,r9,8
   82a34:	8400010c 	andi	r16,r16,4
   82a38:	80002e26 	beq	r16,zero,82af4 <___vfprintf_internal_r+0xc7c>
   82a3c:	d8812e17 	ldw	r2,1208(sp)
   82a40:	d8c12817 	ldw	r3,1184(sp)
   82a44:	10e1c83a 	sub	r16,r2,r3
   82a48:	04002a0e 	bge	zero,r16,82af4 <___vfprintf_internal_r+0xc7c>
   82a4c:	04800404 	movi	r18,16
   82a50:	d8c11c17 	ldw	r3,1136(sp)
   82a54:	05c00274 	movhi	r23,9
   82a58:	bdf8fa84 	addi	r23,r23,-7190
   82a5c:	9400170e 	bge	r18,r16,82abc <___vfprintf_internal_r+0xc44>
   82a60:	04c001c4 	movi	r19,7
   82a64:	dd012917 	ldw	r20,1188(sp)
   82a68:	00000306 	br	82a78 <___vfprintf_internal_r+0xc00>
   82a6c:	843ffc04 	addi	r16,r16,-16
   82a70:	4a400204 	addi	r9,r9,8
   82a74:	9400110e 	bge	r18,r16,82abc <___vfprintf_internal_r+0xc44>
   82a78:	4dc00015 	stw	r23,0(r9)
   82a7c:	4c800115 	stw	r18,4(r9)
   82a80:	42000404 	addi	r8,r8,16
   82a84:	18c00044 	addi	r3,r3,1
   82a88:	da011d15 	stw	r8,1140(sp)
   82a8c:	d8c11c15 	stw	r3,1136(sp)
   82a90:	98fff60e 	bge	r19,r3,82a6c <___vfprintf_internal_r+0xbf4>
   82a94:	8809883a 	mov	r4,r17
   82a98:	a00b883a 	mov	r5,r20
   82a9c:	d9811b04 	addi	r6,sp,1132
   82aa0:	0081e440 	call	81e44 <__sprint_r>
   82aa4:	103e3a1e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   82aa8:	843ffc04 	addi	r16,r16,-16
   82aac:	da011d17 	ldw	r8,1140(sp)
   82ab0:	d8c11c17 	ldw	r3,1136(sp)
   82ab4:	da400404 	addi	r9,sp,16
   82ab8:	943fef16 	blt	r18,r16,82a78 <___vfprintf_internal_r+0xc00>
   82abc:	4dc00015 	stw	r23,0(r9)
   82ac0:	4c000115 	stw	r16,4(r9)
   82ac4:	8211883a 	add	r8,r16,r8
   82ac8:	18c00044 	addi	r3,r3,1
   82acc:	da011d15 	stw	r8,1140(sp)
   82ad0:	d8c11c15 	stw	r3,1136(sp)
   82ad4:	008001c4 	movi	r2,7
   82ad8:	10c0060e 	bge	r2,r3,82af4 <___vfprintf_internal_r+0xc7c>
   82adc:	d9412917 	ldw	r5,1188(sp)
   82ae0:	8809883a 	mov	r4,r17
   82ae4:	d9811b04 	addi	r6,sp,1132
   82ae8:	0081e440 	call	81e44 <__sprint_r>
   82aec:	103e281e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   82af0:	da011d17 	ldw	r8,1140(sp)
   82af4:	dd012817 	ldw	r20,1184(sp)
   82af8:	d9012e17 	ldw	r4,1208(sp)
   82afc:	a100010e 	bge	r20,r4,82b04 <___vfprintf_internal_r+0xc8c>
   82b00:	2029883a 	mov	r20,r4
   82b04:	d8812c17 	ldw	r2,1200(sp)
   82b08:	1505883a 	add	r2,r2,r20
   82b0c:	d8812c15 	stw	r2,1200(sp)
   82b10:	4000b91e 	bne	r8,zero,82df8 <___vfprintf_internal_r+0xf80>
   82b14:	d8011c15 	stw	zero,1136(sp)
   82b18:	a8800007 	ldb	r2,0(r21)
   82b1c:	da400404 	addi	r9,sp,16
   82b20:	103d0d1e 	bne	r2,zero,81f58 <___vfprintf_internal_r+0xe0>
   82b24:	a825883a 	mov	r18,r21
   82b28:	003d2306 	br	81fb8 <___vfprintf_internal_r+0x140>
   82b2c:	d9412917 	ldw	r5,1188(sp)
   82b30:	8809883a 	mov	r4,r17
   82b34:	d9811b04 	addi	r6,sp,1132
   82b38:	0081e440 	call	81e44 <__sprint_r>
   82b3c:	103e141e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   82b40:	da011d17 	ldw	r8,1140(sp)
   82b44:	da400404 	addi	r9,sp,16
   82b48:	8080004c 	andi	r2,r16,1
   82b4c:	103fb926 	beq	r2,zero,82a34 <___vfprintf_internal_r+0xbbc>
   82b50:	d8c11c17 	ldw	r3,1136(sp)
   82b54:	d9013717 	ldw	r4,1244(sp)
   82b58:	00800044 	movi	r2,1
   82b5c:	48800115 	stw	r2,4(r9)
   82b60:	49000015 	stw	r4,0(r9)
   82b64:	4091883a 	add	r8,r8,r2
   82b68:	1887883a 	add	r3,r3,r2
   82b6c:	da011d15 	stw	r8,1140(sp)
   82b70:	d8c11c15 	stw	r3,1136(sp)
   82b74:	008001c4 	movi	r2,7
   82b78:	10ffad0e 	bge	r2,r3,82a30 <___vfprintf_internal_r+0xbb8>
   82b7c:	d9412917 	ldw	r5,1188(sp)
   82b80:	8809883a 	mov	r4,r17
   82b84:	d9811b04 	addi	r6,sp,1132
   82b88:	0081e440 	call	81e44 <__sprint_r>
   82b8c:	103e001e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   82b90:	da400404 	addi	r9,sp,16
   82b94:	da011d17 	ldw	r8,1140(sp)
   82b98:	003fa606 	br	82a34 <___vfprintf_internal_r+0xbbc>
   82b9c:	18803fcc 	andi	r2,r3,255
   82ba0:	00c00044 	movi	r3,1
   82ba4:	10c10126 	beq	r2,r3,82fac <___vfprintf_internal_r+0x1134>
   82ba8:	00c00084 	movi	r3,2
   82bac:	10c0ed26 	beq	r2,r3,82f64 <___vfprintf_internal_r+0x10ec>
   82bb0:	d8c10dc4 	addi	r3,sp,1079
   82bb4:	b808d0fa 	srli	r4,r23,3
   82bb8:	b00a977a 	slli	r5,r22,29
   82bbc:	b02cd0fa 	srli	r22,r22,3
   82bc0:	bdc001cc 	andi	r23,r23,7
   82bc4:	b8800c04 	addi	r2,r23,48
   82bc8:	292eb03a 	or	r23,r5,r4
   82bcc:	18800005 	stb	r2,0(r3)
   82bd0:	bd88b03a 	or	r4,r23,r22
   82bd4:	1827883a 	mov	r19,r3
   82bd8:	18ffffc4 	addi	r3,r3,-1
   82bdc:	203ff51e 	bne	r4,zero,82bb4 <___vfprintf_internal_r+0xd3c>
   82be0:	8100004c 	andi	r4,r16,1
   82be4:	980b883a 	mov	r5,r19
   82be8:	20000726 	beq	r4,zero,82c08 <___vfprintf_internal_r+0xd90>
   82bec:	10803fcc 	andi	r2,r2,255
   82bf0:	1080201c 	xori	r2,r2,128
   82bf4:	10bfe004 	addi	r2,r2,-128
   82bf8:	01000c04 	movi	r4,48
   82bfc:	11000226 	beq	r2,r4,82c08 <___vfprintf_internal_r+0xd90>
   82c00:	1827883a 	mov	r19,r3
   82c04:	293fffc5 	stb	r4,-1(r5)
   82c08:	d8812717 	ldw	r2,1180(sp)
   82c0c:	14c5c83a 	sub	r2,r2,r19
   82c10:	d8812b15 	stw	r2,1196(sp)
   82c14:	003e1f06 	br	82494 <___vfprintf_internal_r+0x61c>
   82c18:	00801944 	movi	r2,101
   82c1c:	14807c0e 	bge	r2,r18,82e10 <___vfprintf_internal_r+0xf98>
   82c20:	d9013317 	ldw	r4,1228(sp)
   82c24:	d9413417 	ldw	r5,1232(sp)
   82c28:	000d883a 	mov	r6,zero
   82c2c:	000f883a 	mov	r7,zero
   82c30:	d8c13b15 	stw	r3,1260(sp)
   82c34:	da013a15 	stw	r8,1256(sp)
   82c38:	da413c15 	stw	r9,1264(sp)
   82c3c:	008a7800 	call	8a780 <__eqdf2>
   82c40:	d8c13b17 	ldw	r3,1260(sp)
   82c44:	da013a17 	ldw	r8,1256(sp)
   82c48:	da413c17 	ldw	r9,1264(sp)
   82c4c:	1001001e 	bne	r2,zero,83050 <___vfprintf_internal_r+0x11d8>
   82c50:	00800274 	movhi	r2,9
   82c54:	10b8fa04 	addi	r2,r2,-7192
   82c58:	48800015 	stw	r2,0(r9)
   82c5c:	00800044 	movi	r2,1
   82c60:	48800115 	stw	r2,4(r9)
   82c64:	4091883a 	add	r8,r8,r2
   82c68:	1887883a 	add	r3,r3,r2
   82c6c:	da011d15 	stw	r8,1140(sp)
   82c70:	d8c11c15 	stw	r3,1136(sp)
   82c74:	008001c4 	movi	r2,7
   82c78:	10c20316 	blt	r2,r3,83488 <___vfprintf_internal_r+0x1610>
   82c7c:	4a400204 	addi	r9,r9,8
   82c80:	d8812417 	ldw	r2,1168(sp)
   82c84:	d8c13217 	ldw	r3,1224(sp)
   82c88:	10c00216 	blt	r2,r3,82c94 <___vfprintf_internal_r+0xe1c>
   82c8c:	8080004c 	andi	r2,r16,1
   82c90:	103f6826 	beq	r2,zero,82a34 <___vfprintf_internal_r+0xbbc>
   82c94:	d8c11c17 	ldw	r3,1136(sp)
   82c98:	d9013717 	ldw	r4,1244(sp)
   82c9c:	00800044 	movi	r2,1
   82ca0:	48800115 	stw	r2,4(r9)
   82ca4:	49000015 	stw	r4,0(r9)
   82ca8:	4091883a 	add	r8,r8,r2
   82cac:	1887883a 	add	r3,r3,r2
   82cb0:	da011d15 	stw	r8,1140(sp)
   82cb4:	d8c11c15 	stw	r3,1136(sp)
   82cb8:	008001c4 	movi	r2,7
   82cbc:	10c2ce16 	blt	r2,r3,837f8 <___vfprintf_internal_r+0x1980>
   82cc0:	4a400204 	addi	r9,r9,8
   82cc4:	d8813217 	ldw	r2,1224(sp)
   82cc8:	14bfffc4 	addi	r18,r2,-1
   82ccc:	04bf590e 	bge	zero,r18,82a34 <___vfprintf_internal_r+0xbbc>
   82cd0:	04c00404 	movi	r19,16
   82cd4:	d8c11c17 	ldw	r3,1136(sp)
   82cd8:	05000274 	movhi	r20,9
   82cdc:	a538fe84 	addi	r20,r20,-7174
   82ce0:	9c818a0e 	bge	r19,r18,8330c <___vfprintf_internal_r+0x1494>
   82ce4:	058001c4 	movi	r22,7
   82ce8:	ddc12917 	ldw	r23,1188(sp)
   82cec:	00000306 	br	82cfc <___vfprintf_internal_r+0xe84>
   82cf0:	4a400204 	addi	r9,r9,8
   82cf4:	94bffc04 	addi	r18,r18,-16
   82cf8:	9c81840e 	bge	r19,r18,8330c <___vfprintf_internal_r+0x1494>
   82cfc:	4d000015 	stw	r20,0(r9)
   82d00:	4cc00115 	stw	r19,4(r9)
   82d04:	42000404 	addi	r8,r8,16
   82d08:	18c00044 	addi	r3,r3,1
   82d0c:	da011d15 	stw	r8,1140(sp)
   82d10:	d8c11c15 	stw	r3,1136(sp)
   82d14:	b0fff60e 	bge	r22,r3,82cf0 <___vfprintf_internal_r+0xe78>
   82d18:	8809883a 	mov	r4,r17
   82d1c:	b80b883a 	mov	r5,r23
   82d20:	d9811b04 	addi	r6,sp,1132
   82d24:	0081e440 	call	81e44 <__sprint_r>
   82d28:	103d991e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   82d2c:	da011d17 	ldw	r8,1140(sp)
   82d30:	d8c11c17 	ldw	r3,1136(sp)
   82d34:	da400404 	addi	r9,sp,16
   82d38:	003fee06 	br	82cf4 <___vfprintf_internal_r+0xe7c>
   82d3c:	d8812e17 	ldw	r2,1208(sp)
   82d40:	d9012817 	ldw	r4,1184(sp)
   82d44:	112fc83a 	sub	r23,r2,r4
   82d48:	05ff000e 	bge	zero,r23,8294c <___vfprintf_internal_r+0xad4>
   82d4c:	07000404 	movi	fp,16
   82d50:	05000274 	movhi	r20,9
   82d54:	a538fe84 	addi	r20,r20,-7174
   82d58:	e5c01d0e 	bge	fp,r23,82dd0 <___vfprintf_internal_r+0xf58>
   82d5c:	dc812a15 	stw	r18,1192(sp)
   82d60:	058001c4 	movi	r22,7
   82d64:	a025883a 	mov	r18,r20
   82d68:	8029883a 	mov	r20,r16
   82d6c:	dc012917 	ldw	r16,1188(sp)
   82d70:	00000306 	br	82d80 <___vfprintf_internal_r+0xf08>
   82d74:	bdfffc04 	addi	r23,r23,-16
   82d78:	4a400204 	addi	r9,r9,8
   82d7c:	e5c0110e 	bge	fp,r23,82dc4 <___vfprintf_internal_r+0xf4c>
   82d80:	4c800015 	stw	r18,0(r9)
   82d84:	4f000115 	stw	fp,4(r9)
   82d88:	42000404 	addi	r8,r8,16
   82d8c:	18c00044 	addi	r3,r3,1
   82d90:	da011d15 	stw	r8,1140(sp)
   82d94:	d8c11c15 	stw	r3,1136(sp)
   82d98:	b0fff60e 	bge	r22,r3,82d74 <___vfprintf_internal_r+0xefc>
   82d9c:	8809883a 	mov	r4,r17
   82da0:	800b883a 	mov	r5,r16
   82da4:	d9811b04 	addi	r6,sp,1132
   82da8:	0081e440 	call	81e44 <__sprint_r>
   82dac:	103d781e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   82db0:	bdfffc04 	addi	r23,r23,-16
   82db4:	da011d17 	ldw	r8,1140(sp)
   82db8:	d8c11c17 	ldw	r3,1136(sp)
   82dbc:	da400404 	addi	r9,sp,16
   82dc0:	e5ffef16 	blt	fp,r23,82d80 <___vfprintf_internal_r+0xf08>
   82dc4:	a021883a 	mov	r16,r20
   82dc8:	9029883a 	mov	r20,r18
   82dcc:	dc812a17 	ldw	r18,1192(sp)
   82dd0:	4d000015 	stw	r20,0(r9)
   82dd4:	4dc00115 	stw	r23,4(r9)
   82dd8:	45d1883a 	add	r8,r8,r23
   82ddc:	18c00044 	addi	r3,r3,1
   82de0:	da011d15 	stw	r8,1140(sp)
   82de4:	d8c11c15 	stw	r3,1136(sp)
   82de8:	008001c4 	movi	r2,7
   82dec:	10c13616 	blt	r2,r3,832c8 <___vfprintf_internal_r+0x1450>
   82df0:	4a400204 	addi	r9,r9,8
   82df4:	003ed506 	br	8294c <___vfprintf_internal_r+0xad4>
   82df8:	d9412917 	ldw	r5,1188(sp)
   82dfc:	8809883a 	mov	r4,r17
   82e00:	d9811b04 	addi	r6,sp,1132
   82e04:	0081e440 	call	81e44 <__sprint_r>
   82e08:	103f4226 	beq	r2,zero,82b14 <___vfprintf_internal_r+0xc9c>
   82e0c:	003d6006 	br	82390 <___vfprintf_internal_r+0x518>
   82e10:	d9013217 	ldw	r4,1224(sp)
   82e14:	00800044 	movi	r2,1
   82e18:	4cc00015 	stw	r19,0(r9)
   82e1c:	1101000e 	bge	r2,r4,83220 <___vfprintf_internal_r+0x13a8>
   82e20:	00800044 	movi	r2,1
   82e24:	48800115 	stw	r2,4(r9)
   82e28:	4091883a 	add	r8,r8,r2
   82e2c:	1887883a 	add	r3,r3,r2
   82e30:	da011d15 	stw	r8,1140(sp)
   82e34:	d8c11c15 	stw	r3,1136(sp)
   82e38:	008001c4 	movi	r2,7
   82e3c:	10c10c16 	blt	r2,r3,83270 <___vfprintf_internal_r+0x13f8>
   82e40:	4a400204 	addi	r9,r9,8
   82e44:	d8813717 	ldw	r2,1244(sp)
   82e48:	48800015 	stw	r2,0(r9)
   82e4c:	00800044 	movi	r2,1
   82e50:	48800115 	stw	r2,4(r9)
   82e54:	4091883a 	add	r8,r8,r2
   82e58:	1887883a 	add	r3,r3,r2
   82e5c:	da011d15 	stw	r8,1140(sp)
   82e60:	d8c11c15 	stw	r3,1136(sp)
   82e64:	008001c4 	movi	r2,7
   82e68:	10c10a16 	blt	r2,r3,83294 <___vfprintf_internal_r+0x141c>
   82e6c:	4c800204 	addi	r18,r9,8
   82e70:	d9013317 	ldw	r4,1228(sp)
   82e74:	d9413417 	ldw	r5,1232(sp)
   82e78:	000d883a 	mov	r6,zero
   82e7c:	000f883a 	mov	r7,zero
   82e80:	d8c13b15 	stw	r3,1260(sp)
   82e84:	da013a15 	stw	r8,1256(sp)
   82e88:	008a7dc0 	call	8a7dc <__nedf2>
   82e8c:	d8c13b17 	ldw	r3,1260(sp)
   82e90:	da013a17 	ldw	r8,1256(sp)
   82e94:	1000ba26 	beq	r2,zero,83180 <___vfprintf_internal_r+0x1308>
   82e98:	d9013217 	ldw	r4,1224(sp)
   82e9c:	9cc00044 	addi	r19,r19,1
   82ea0:	94c00015 	stw	r19,0(r18)
   82ea4:	20bfffc4 	addi	r2,r4,-1
   82ea8:	90800115 	stw	r2,4(r18)
   82eac:	4091883a 	add	r8,r8,r2
   82eb0:	18c00044 	addi	r3,r3,1
   82eb4:	da011d15 	stw	r8,1140(sp)
   82eb8:	d8c11c15 	stw	r3,1136(sp)
   82ebc:	008001c4 	movi	r2,7
   82ec0:	10c0e216 	blt	r2,r3,8324c <___vfprintf_internal_r+0x13d4>
   82ec4:	94800204 	addi	r18,r18,8
   82ec8:	d9013517 	ldw	r4,1236(sp)
   82ecc:	d8811fc4 	addi	r2,sp,1151
   82ed0:	90800015 	stw	r2,0(r18)
   82ed4:	91000115 	stw	r4,4(r18)
   82ed8:	4111883a 	add	r8,r8,r4
   82edc:	18c00044 	addi	r3,r3,1
   82ee0:	da011d15 	stw	r8,1140(sp)
   82ee4:	d8c11c15 	stw	r3,1136(sp)
   82ee8:	008001c4 	movi	r2,7
   82eec:	10ff2316 	blt	r2,r3,82b7c <___vfprintf_internal_r+0xd04>
   82ef0:	92400204 	addi	r9,r18,8
   82ef4:	003ecf06 	br	82a34 <___vfprintf_internal_r+0xbbc>
   82ef8:	d9412917 	ldw	r5,1188(sp)
   82efc:	8809883a 	mov	r4,r17
   82f00:	d9811b04 	addi	r6,sp,1132
   82f04:	0081e440 	call	81e44 <__sprint_r>
   82f08:	103d211e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   82f0c:	da011d17 	ldw	r8,1140(sp)
   82f10:	d8c11c17 	ldw	r3,1136(sp)
   82f14:	da400404 	addi	r9,sp,16
   82f18:	003eba06 	br	82a04 <___vfprintf_internal_r+0xb8c>
   82f1c:	d9412917 	ldw	r5,1188(sp)
   82f20:	8809883a 	mov	r4,r17
   82f24:	d9811b04 	addi	r6,sp,1132
   82f28:	0081e440 	call	81e44 <__sprint_r>
   82f2c:	103d181e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   82f30:	da011d17 	ldw	r8,1140(sp)
   82f34:	d8c11c17 	ldw	r3,1136(sp)
   82f38:	da400404 	addi	r9,sp,16
   82f3c:	003e8006 	br	82940 <___vfprintf_internal_r+0xac8>
   82f40:	d9412917 	ldw	r5,1188(sp)
   82f44:	8809883a 	mov	r4,r17
   82f48:	d9811b04 	addi	r6,sp,1132
   82f4c:	0081e440 	call	81e44 <__sprint_r>
   82f50:	103d0f1e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   82f54:	da011d17 	ldw	r8,1140(sp)
   82f58:	d8c11c17 	ldw	r3,1136(sp)
   82f5c:	da400404 	addi	r9,sp,16
   82f60:	003e6a06 	br	8290c <___vfprintf_internal_r+0xa94>
   82f64:	d9413617 	ldw	r5,1240(sp)
   82f68:	d8810dc4 	addi	r2,sp,1079
   82f6c:	b8c003cc 	andi	r3,r23,15
   82f70:	b008973a 	slli	r4,r22,28
   82f74:	28c7883a 	add	r3,r5,r3
   82f78:	b82ed13a 	srli	r23,r23,4
   82f7c:	18c00003 	ldbu	r3,0(r3)
   82f80:	b02cd13a 	srli	r22,r22,4
   82f84:	25eeb03a 	or	r23,r4,r23
   82f88:	10c00005 	stb	r3,0(r2)
   82f8c:	bd86b03a 	or	r3,r23,r22
   82f90:	1027883a 	mov	r19,r2
   82f94:	10bfffc4 	addi	r2,r2,-1
   82f98:	183ff41e 	bne	r3,zero,82f6c <___vfprintf_internal_r+0x10f4>
   82f9c:	003f1a06 	br	82c08 <___vfprintf_internal_r+0xd90>
   82fa0:	d8012b15 	stw	zero,1196(sp)
   82fa4:	dcc10e04 	addi	r19,sp,1080
   82fa8:	003d3a06 	br	82494 <___vfprintf_internal_r+0x61c>
   82fac:	b0025426 	beq	r22,zero,83900 <___vfprintf_internal_r+0x1a88>
   82fb0:	b807883a 	mov	r3,r23
   82fb4:	d8810dc4 	addi	r2,sp,1079
   82fb8:	882f883a 	mov	r23,r17
   82fbc:	04c00244 	movi	r19,9
   82fc0:	8023883a 	mov	r17,r16
   82fc4:	da412815 	stw	r9,1184(sp)
   82fc8:	1821883a 	mov	r16,r3
   82fcc:	8009883a 	mov	r4,r16
   82fd0:	b00b883a 	mov	r5,r22
   82fd4:	01800284 	movi	r6,10
   82fd8:	000f883a 	mov	r7,zero
   82fdc:	1029883a 	mov	r20,r2
   82fe0:	00898b80 	call	898b8 <__umoddi3>
   82fe4:	10800c04 	addi	r2,r2,48
   82fe8:	8009883a 	mov	r4,r16
   82fec:	b00b883a 	mov	r5,r22
   82ff0:	a0800005 	stb	r2,0(r20)
   82ff4:	01800284 	movi	r6,10
   82ff8:	000f883a 	mov	r7,zero
   82ffc:	00892680 	call	89268 <__udivdi3>
   83000:	1021883a 	mov	r16,r2
   83004:	182d883a 	mov	r22,r3
   83008:	a0bfffc4 	addi	r2,r20,-1
   8300c:	183fef1e 	bne	r3,zero,82fcc <___vfprintf_internal_r+0x1154>
   83010:	9c3fee36 	bltu	r19,r16,82fcc <___vfprintf_internal_r+0x1154>
   83014:	da412817 	ldw	r9,1184(sp)
   83018:	8005883a 	mov	r2,r16
   8301c:	8821883a 	mov	r16,r17
   83020:	b823883a 	mov	r17,r23
   83024:	102f883a 	mov	r23,r2
   83028:	d8812717 	ldw	r2,1180(sp)
   8302c:	a4ffffc4 	addi	r19,r20,-1
   83030:	bdc00c04 	addi	r23,r23,48
   83034:	14c5c83a 	sub	r2,r2,r19
   83038:	a5ffffc5 	stb	r23,-1(r20)
   8303c:	d8812b15 	stw	r2,1196(sp)
   83040:	003d1406 	br	82494 <___vfprintf_internal_r+0x61c>
   83044:	00c00044 	movi	r3,1
   83048:	bd84b03a 	or	r2,r23,r22
   8304c:	003d0306 	br	8245c <___vfprintf_internal_r+0x5e4>
   83050:	dc812417 	ldw	r18,1168(sp)
   83054:	0481140e 	bge	zero,r18,834a8 <___vfprintf_internal_r+0x1630>
   83058:	d9013217 	ldw	r4,1224(sp)
   8305c:	4cc00015 	stw	r19,0(r9)
   83060:	9100ec16 	blt	r18,r4,83414 <___vfprintf_internal_r+0x159c>
   83064:	49000115 	stw	r4,4(r9)
   83068:	4111883a 	add	r8,r8,r4
   8306c:	18c00044 	addi	r3,r3,1
   83070:	da011d15 	stw	r8,1140(sp)
   83074:	d8c11c15 	stw	r3,1136(sp)
   83078:	008001c4 	movi	r2,7
   8307c:	10c23616 	blt	r2,r3,83958 <___vfprintf_internal_r+0x1ae0>
   83080:	4a400204 	addi	r9,r9,8
   83084:	d8813217 	ldw	r2,1224(sp)
   83088:	90a5c83a 	sub	r18,r18,r2
   8308c:	04beae0e 	bge	zero,r18,82b48 <___vfprintf_internal_r+0xcd0>
   83090:	04c00404 	movi	r19,16
   83094:	d8c11c17 	ldw	r3,1136(sp)
   83098:	05000274 	movhi	r20,9
   8309c:	a538fe84 	addi	r20,r20,-7174
   830a0:	9c81dd0e 	bge	r19,r18,83818 <___vfprintf_internal_r+0x19a0>
   830a4:	058001c4 	movi	r22,7
   830a8:	ddc12917 	ldw	r23,1188(sp)
   830ac:	00000306 	br	830bc <___vfprintf_internal_r+0x1244>
   830b0:	4a400204 	addi	r9,r9,8
   830b4:	94bffc04 	addi	r18,r18,-16
   830b8:	9c81d70e 	bge	r19,r18,83818 <___vfprintf_internal_r+0x19a0>
   830bc:	4d000015 	stw	r20,0(r9)
   830c0:	4cc00115 	stw	r19,4(r9)
   830c4:	42000404 	addi	r8,r8,16
   830c8:	18c00044 	addi	r3,r3,1
   830cc:	da011d15 	stw	r8,1140(sp)
   830d0:	d8c11c15 	stw	r3,1136(sp)
   830d4:	b0fff60e 	bge	r22,r3,830b0 <___vfprintf_internal_r+0x1238>
   830d8:	8809883a 	mov	r4,r17
   830dc:	b80b883a 	mov	r5,r23
   830e0:	d9811b04 	addi	r6,sp,1132
   830e4:	0081e440 	call	81e44 <__sprint_r>
   830e8:	103ca91e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   830ec:	da011d17 	ldw	r8,1140(sp)
   830f0:	d8c11c17 	ldw	r3,1136(sp)
   830f4:	da400404 	addi	r9,sp,16
   830f8:	003fee06 	br	830b4 <___vfprintf_internal_r+0x123c>
   830fc:	d9412917 	ldw	r5,1188(sp)
   83100:	8809883a 	mov	r4,r17
   83104:	d9811b04 	addi	r6,sp,1132
   83108:	0081e440 	call	81e44 <__sprint_r>
   8310c:	103ca01e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   83110:	da011d17 	ldw	r8,1140(sp)
   83114:	d8c11c17 	ldw	r3,1136(sp)
   83118:	da400404 	addi	r9,sp,16
   8311c:	003dee06 	br	828d8 <___vfprintf_internal_r+0xa60>
   83120:	00c00084 	movi	r3,2
   83124:	bd84b03a 	or	r2,r23,r22
   83128:	d8012585 	stb	zero,1174(sp)
   8312c:	003ccb06 	br	8245c <___vfprintf_internal_r+0x5e4>
   83130:	8080040c 	andi	r2,r16,16
   83134:	1000ae26 	beq	r2,zero,833f0 <___vfprintf_internal_r+0x1578>
   83138:	d9012d17 	ldw	r4,1204(sp)
   8313c:	25c00017 	ldw	r23,0(r4)
   83140:	21000104 	addi	r4,r4,4
   83144:	d9012d15 	stw	r4,1204(sp)
   83148:	b82dd7fa 	srai	r22,r23,31
   8314c:	b005883a 	mov	r2,r22
   83150:	003cb906 	br	82438 <___vfprintf_internal_r+0x5c0>
   83154:	8080040c 	andi	r2,r16,16
   83158:	10007026 	beq	r2,zero,8331c <___vfprintf_internal_r+0x14a4>
   8315c:	d8812d17 	ldw	r2,1204(sp)
   83160:	002d883a 	mov	r22,zero
   83164:	00c00044 	movi	r3,1
   83168:	15c00017 	ldw	r23,0(r2)
   8316c:	10800104 	addi	r2,r2,4
   83170:	d8812d15 	stw	r2,1204(sp)
   83174:	d8012585 	stb	zero,1174(sp)
   83178:	b805883a 	mov	r2,r23
   8317c:	003cb706 	br	8245c <___vfprintf_internal_r+0x5e4>
   83180:	d8813217 	ldw	r2,1224(sp)
   83184:	14ffffc4 	addi	r19,r2,-1
   83188:	04ff4f0e 	bge	zero,r19,82ec8 <___vfprintf_internal_r+0x1050>
   8318c:	05800404 	movi	r22,16
   83190:	05000274 	movhi	r20,9
   83194:	a538fe84 	addi	r20,r20,-7174
   83198:	b4c0470e 	bge	r22,r19,832b8 <___vfprintf_internal_r+0x1440>
   8319c:	05c001c4 	movi	r23,7
   831a0:	df012917 	ldw	fp,1188(sp)
   831a4:	00000306 	br	831b4 <___vfprintf_internal_r+0x133c>
   831a8:	94800204 	addi	r18,r18,8
   831ac:	9cfffc04 	addi	r19,r19,-16
   831b0:	b4c0410e 	bge	r22,r19,832b8 <___vfprintf_internal_r+0x1440>
   831b4:	95000015 	stw	r20,0(r18)
   831b8:	95800115 	stw	r22,4(r18)
   831bc:	42000404 	addi	r8,r8,16
   831c0:	18c00044 	addi	r3,r3,1
   831c4:	da011d15 	stw	r8,1140(sp)
   831c8:	d8c11c15 	stw	r3,1136(sp)
   831cc:	b8fff60e 	bge	r23,r3,831a8 <___vfprintf_internal_r+0x1330>
   831d0:	8809883a 	mov	r4,r17
   831d4:	e00b883a 	mov	r5,fp
   831d8:	d9811b04 	addi	r6,sp,1132
   831dc:	0081e440 	call	81e44 <__sprint_r>
   831e0:	103c6b1e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   831e4:	da011d17 	ldw	r8,1140(sp)
   831e8:	d8c11c17 	ldw	r3,1136(sp)
   831ec:	dc800404 	addi	r18,sp,16
   831f0:	003fee06 	br	831ac <___vfprintf_internal_r+0x1334>
   831f4:	8080040c 	andi	r2,r16,16
   831f8:	10005326 	beq	r2,zero,83348 <___vfprintf_internal_r+0x14d0>
   831fc:	d8c12d17 	ldw	r3,1204(sp)
   83200:	002d883a 	mov	r22,zero
   83204:	1dc00017 	ldw	r23,0(r3)
   83208:	18c00104 	addi	r3,r3,4
   8320c:	d8c12d15 	stw	r3,1204(sp)
   83210:	b805883a 	mov	r2,r23
   83214:	0007883a 	mov	r3,zero
   83218:	d8012585 	stb	zero,1174(sp)
   8321c:	003c8f06 	br	8245c <___vfprintf_internal_r+0x5e4>
   83220:	8088703a 	and	r4,r16,r2
   83224:	203efe1e 	bne	r4,zero,82e20 <___vfprintf_internal_r+0xfa8>
   83228:	48800115 	stw	r2,4(r9)
   8322c:	42000044 	addi	r8,r8,1
   83230:	18c00044 	addi	r3,r3,1
   83234:	da011d15 	stw	r8,1140(sp)
   83238:	d8c11c15 	stw	r3,1136(sp)
   8323c:	008001c4 	movi	r2,7
   83240:	10c00216 	blt	r2,r3,8324c <___vfprintf_internal_r+0x13d4>
   83244:	4c800204 	addi	r18,r9,8
   83248:	003f1f06 	br	82ec8 <___vfprintf_internal_r+0x1050>
   8324c:	d9412917 	ldw	r5,1188(sp)
   83250:	8809883a 	mov	r4,r17
   83254:	d9811b04 	addi	r6,sp,1132
   83258:	0081e440 	call	81e44 <__sprint_r>
   8325c:	103c4c1e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   83260:	dc800404 	addi	r18,sp,16
   83264:	da011d17 	ldw	r8,1140(sp)
   83268:	d8c11c17 	ldw	r3,1136(sp)
   8326c:	003f1606 	br	82ec8 <___vfprintf_internal_r+0x1050>
   83270:	d9412917 	ldw	r5,1188(sp)
   83274:	8809883a 	mov	r4,r17
   83278:	d9811b04 	addi	r6,sp,1132
   8327c:	0081e440 	call	81e44 <__sprint_r>
   83280:	103c431e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   83284:	da011d17 	ldw	r8,1140(sp)
   83288:	d8c11c17 	ldw	r3,1136(sp)
   8328c:	da400404 	addi	r9,sp,16
   83290:	003eec06 	br	82e44 <___vfprintf_internal_r+0xfcc>
   83294:	d9412917 	ldw	r5,1188(sp)
   83298:	8809883a 	mov	r4,r17
   8329c:	d9811b04 	addi	r6,sp,1132
   832a0:	0081e440 	call	81e44 <__sprint_r>
   832a4:	103c3a1e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   832a8:	da011d17 	ldw	r8,1140(sp)
   832ac:	d8c11c17 	ldw	r3,1136(sp)
   832b0:	dc800404 	addi	r18,sp,16
   832b4:	003eee06 	br	82e70 <___vfprintf_internal_r+0xff8>
   832b8:	95000015 	stw	r20,0(r18)
   832bc:	94c00115 	stw	r19,4(r18)
   832c0:	44d1883a 	add	r8,r8,r19
   832c4:	003efa06 	br	82eb0 <___vfprintf_internal_r+0x1038>
   832c8:	d9412917 	ldw	r5,1188(sp)
   832cc:	8809883a 	mov	r4,r17
   832d0:	d9811b04 	addi	r6,sp,1132
   832d4:	0081e440 	call	81e44 <__sprint_r>
   832d8:	103c2d1e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   832dc:	da011d17 	ldw	r8,1140(sp)
   832e0:	d8c11c17 	ldw	r3,1136(sp)
   832e4:	da400404 	addi	r9,sp,16
   832e8:	003d9806 	br	8294c <___vfprintf_internal_r+0xad4>
   832ec:	8080100c 	andi	r2,r16,64
   832f0:	10011626 	beq	r2,zero,8374c <___vfprintf_internal_r+0x18d4>
   832f4:	d8c12d17 	ldw	r3,1204(sp)
   832f8:	002d883a 	mov	r22,zero
   832fc:	1dc0000b 	ldhu	r23,0(r3)
   83300:	18c00104 	addi	r3,r3,4
   83304:	d8c12d15 	stw	r3,1204(sp)
   83308:	003cc106 	br	82610 <___vfprintf_internal_r+0x798>
   8330c:	4d000015 	stw	r20,0(r9)
   83310:	4c800115 	stw	r18,4(r9)
   83314:	4491883a 	add	r8,r8,r18
   83318:	003dc006 	br	82a1c <___vfprintf_internal_r+0xba4>
   8331c:	8080100c 	andi	r2,r16,64
   83320:	10010126 	beq	r2,zero,83728 <___vfprintf_internal_r+0x18b0>
   83324:	d8c12d17 	ldw	r3,1204(sp)
   83328:	002d883a 	mov	r22,zero
   8332c:	1dc0000b 	ldhu	r23,0(r3)
   83330:	18c00104 	addi	r3,r3,4
   83334:	d8c12d15 	stw	r3,1204(sp)
   83338:	b805883a 	mov	r2,r23
   8333c:	00c00044 	movi	r3,1
   83340:	d8012585 	stb	zero,1174(sp)
   83344:	003c4506 	br	8245c <___vfprintf_internal_r+0x5e4>
   83348:	8080100c 	andi	r2,r16,64
   8334c:	10010526 	beq	r2,zero,83764 <___vfprintf_internal_r+0x18ec>
   83350:	d9012d17 	ldw	r4,1204(sp)
   83354:	002d883a 	mov	r22,zero
   83358:	0007883a 	mov	r3,zero
   8335c:	25c0000b 	ldhu	r23,0(r4)
   83360:	21000104 	addi	r4,r4,4
   83364:	d9012d15 	stw	r4,1204(sp)
   83368:	b805883a 	mov	r2,r23
   8336c:	d8012585 	stb	zero,1174(sp)
   83370:	003c3a06 	br	8245c <___vfprintf_internal_r+0x5e4>
   83374:	d8812d17 	ldw	r2,1204(sp)
   83378:	15800017 	ldw	r22,0(r2)
   8337c:	15000117 	ldw	r20,4(r2)
   83380:	10800204 	addi	r2,r2,8
   83384:	d8812d15 	stw	r2,1204(sp)
   83388:	dd813315 	stw	r22,1228(sp)
   8338c:	dd013415 	stw	r20,1232(sp)
   83390:	003c5906 	br	824f8 <___vfprintf_internal_r+0x680>
   83394:	00c00084 	movi	r3,2
   83398:	d8012585 	stb	zero,1174(sp)
   8339c:	003c2f06 	br	8245c <___vfprintf_internal_r+0x5e4>
   833a0:	ac800007 	ldb	r18,0(r21)
   833a4:	003b1006 	br	81fe8 <___vfprintf_internal_r+0x170>
   833a8:	8080040c 	andi	r2,r16,16
   833ac:	1000091e 	bne	r2,zero,833d4 <___vfprintf_internal_r+0x155c>
   833b0:	8400100c 	andi	r16,r16,64
   833b4:	80000726 	beq	r16,zero,833d4 <___vfprintf_internal_r+0x155c>
   833b8:	d8c12d17 	ldw	r3,1204(sp)
   833bc:	d9012c17 	ldw	r4,1200(sp)
   833c0:	18800017 	ldw	r2,0(r3)
   833c4:	18c00104 	addi	r3,r3,4
   833c8:	d8c12d15 	stw	r3,1204(sp)
   833cc:	1100000d 	sth	r4,0(r2)
   833d0:	003adf06 	br	81f50 <___vfprintf_internal_r+0xd8>
   833d4:	d8c12d17 	ldw	r3,1204(sp)
   833d8:	d9012c17 	ldw	r4,1200(sp)
   833dc:	18800017 	ldw	r2,0(r3)
   833e0:	18c00104 	addi	r3,r3,4
   833e4:	d8c12d15 	stw	r3,1204(sp)
   833e8:	11000015 	stw	r4,0(r2)
   833ec:	003ad806 	br	81f50 <___vfprintf_internal_r+0xd8>
   833f0:	8080100c 	andi	r2,r16,64
   833f4:	1000c526 	beq	r2,zero,8370c <___vfprintf_internal_r+0x1894>
   833f8:	d8812d17 	ldw	r2,1204(sp)
   833fc:	15c0000f 	ldh	r23,0(r2)
   83400:	10800104 	addi	r2,r2,4
   83404:	d8812d15 	stw	r2,1204(sp)
   83408:	b82dd7fa 	srai	r22,r23,31
   8340c:	b005883a 	mov	r2,r22
   83410:	003c0906 	br	82438 <___vfprintf_internal_r+0x5c0>
   83414:	4c800115 	stw	r18,4(r9)
   83418:	9211883a 	add	r8,r18,r8
   8341c:	18c00044 	addi	r3,r3,1
   83420:	da011d15 	stw	r8,1140(sp)
   83424:	d8c11c15 	stw	r3,1136(sp)
   83428:	008001c4 	movi	r2,7
   8342c:	10c14016 	blt	r2,r3,83930 <___vfprintf_internal_r+0x1ab8>
   83430:	4a400204 	addi	r9,r9,8
   83434:	d8813717 	ldw	r2,1244(sp)
   83438:	9ca7883a 	add	r19,r19,r18
   8343c:	48800015 	stw	r2,0(r9)
   83440:	00800044 	movi	r2,1
   83444:	48800115 	stw	r2,4(r9)
   83448:	4091883a 	add	r8,r8,r2
   8344c:	1887883a 	add	r3,r3,r2
   83450:	da011d15 	stw	r8,1140(sp)
   83454:	d8c11c15 	stw	r3,1136(sp)
   83458:	008001c4 	movi	r2,7
   8345c:	10c12c16 	blt	r2,r3,83910 <___vfprintf_internal_r+0x1a98>
   83460:	4a400204 	addi	r9,r9,8
   83464:	d9013217 	ldw	r4,1224(sp)
   83468:	da011d17 	ldw	r8,1140(sp)
   8346c:	d8c11c17 	ldw	r3,1136(sp)
   83470:	24a5c83a 	sub	r18,r4,r18
   83474:	4cc00015 	stw	r19,0(r9)
   83478:	003fa506 	br	83310 <___vfprintf_internal_r+0x1498>
   8347c:	04c00274 	movhi	r19,9
   83480:	9cf8eb04 	addi	r19,r19,-7252
   83484:	003c2e06 	br	82540 <___vfprintf_internal_r+0x6c8>
   83488:	d9412917 	ldw	r5,1188(sp)
   8348c:	8809883a 	mov	r4,r17
   83490:	d9811b04 	addi	r6,sp,1132
   83494:	0081e440 	call	81e44 <__sprint_r>
   83498:	103bbd1e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   8349c:	da011d17 	ldw	r8,1140(sp)
   834a0:	da400404 	addi	r9,sp,16
   834a4:	003df606 	br	82c80 <___vfprintf_internal_r+0xe08>
   834a8:	00800274 	movhi	r2,9
   834ac:	10b8fa04 	addi	r2,r2,-7192
   834b0:	48800015 	stw	r2,0(r9)
   834b4:	00800044 	movi	r2,1
   834b8:	48800115 	stw	r2,4(r9)
   834bc:	4091883a 	add	r8,r8,r2
   834c0:	1887883a 	add	r3,r3,r2
   834c4:	da011d15 	stw	r8,1140(sp)
   834c8:	d8c11c15 	stw	r3,1136(sp)
   834cc:	008001c4 	movi	r2,7
   834d0:	10c0bc16 	blt	r2,r3,837c4 <___vfprintf_internal_r+0x194c>
   834d4:	4a400204 	addi	r9,r9,8
   834d8:	9000041e 	bne	r18,zero,834ec <___vfprintf_internal_r+0x1674>
   834dc:	d8c13217 	ldw	r3,1224(sp)
   834e0:	1800021e 	bne	r3,zero,834ec <___vfprintf_internal_r+0x1674>
   834e4:	8080004c 	andi	r2,r16,1
   834e8:	103d5226 	beq	r2,zero,82a34 <___vfprintf_internal_r+0xbbc>
   834ec:	d8c11c17 	ldw	r3,1136(sp)
   834f0:	d9013717 	ldw	r4,1244(sp)
   834f4:	00800044 	movi	r2,1
   834f8:	48800115 	stw	r2,4(r9)
   834fc:	49000015 	stw	r4,0(r9)
   83500:	4091883a 	add	r8,r8,r2
   83504:	1887883a 	add	r3,r3,r2
   83508:	da011d15 	stw	r8,1140(sp)
   8350c:	d8c11c15 	stw	r3,1136(sp)
   83510:	008001c4 	movi	r2,7
   83514:	10c14516 	blt	r2,r3,83a2c <___vfprintf_internal_r+0x1bb4>
   83518:	4a400204 	addi	r9,r9,8
   8351c:	04a5c83a 	sub	r18,zero,r18
   83520:	0480d70e 	bge	zero,r18,83880 <___vfprintf_internal_r+0x1a08>
   83524:	05800404 	movi	r22,16
   83528:	05000274 	movhi	r20,9
   8352c:	a538fe84 	addi	r20,r20,-7174
   83530:	b480db0e 	bge	r22,r18,838a0 <___vfprintf_internal_r+0x1a28>
   83534:	05c001c4 	movi	r23,7
   83538:	df012917 	ldw	fp,1188(sp)
   8353c:	00000306 	br	8354c <___vfprintf_internal_r+0x16d4>
   83540:	4a400204 	addi	r9,r9,8
   83544:	94bffc04 	addi	r18,r18,-16
   83548:	b480d50e 	bge	r22,r18,838a0 <___vfprintf_internal_r+0x1a28>
   8354c:	4d000015 	stw	r20,0(r9)
   83550:	4d800115 	stw	r22,4(r9)
   83554:	42000404 	addi	r8,r8,16
   83558:	18c00044 	addi	r3,r3,1
   8355c:	da011d15 	stw	r8,1140(sp)
   83560:	d8c11c15 	stw	r3,1136(sp)
   83564:	b8fff60e 	bge	r23,r3,83540 <___vfprintf_internal_r+0x16c8>
   83568:	8809883a 	mov	r4,r17
   8356c:	e00b883a 	mov	r5,fp
   83570:	d9811b04 	addi	r6,sp,1132
   83574:	0081e440 	call	81e44 <__sprint_r>
   83578:	103b851e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   8357c:	da011d17 	ldw	r8,1140(sp)
   83580:	d8c11c17 	ldw	r3,1136(sp)
   83584:	da400404 	addi	r9,sp,16
   83588:	003fee06 	br	83544 <___vfprintf_internal_r+0x16cc>
   8358c:	da413c15 	stw	r9,1264(sp)
   83590:	0088b640 	call	88b64 <__isnand>
   83594:	da413c17 	ldw	r9,1264(sp)
   83598:	10007e1e 	bne	r2,zero,83794 <___vfprintf_internal_r+0x191c>
   8359c:	00bfffc4 	movi	r2,-1
   835a0:	e0816a26 	beq	fp,r2,83b4c <___vfprintf_internal_r+0x1cd4>
   835a4:	008019c4 	movi	r2,103
   835a8:	90816526 	beq	r18,r2,83b40 <___vfprintf_internal_r+0x1cc8>
   835ac:	008011c4 	movi	r2,71
   835b0:	90816326 	beq	r18,r2,83b40 <___vfprintf_internal_r+0x1cc8>
   835b4:	80c04014 	ori	r3,r16,256
   835b8:	d8c12a15 	stw	r3,1192(sp)
   835bc:	a0016516 	blt	r20,zero,83b54 <___vfprintf_internal_r+0x1cdc>
   835c0:	d8012f05 	stb	zero,1212(sp)
   835c4:	00801984 	movi	r2,102
   835c8:	9080f226 	beq	r18,r2,83994 <___vfprintf_internal_r+0x1b1c>
   835cc:	00801184 	movi	r2,70
   835d0:	9080f026 	beq	r18,r2,83994 <___vfprintf_internal_r+0x1b1c>
   835d4:	00801944 	movi	r2,101
   835d8:	90818d26 	beq	r18,r2,83c10 <___vfprintf_internal_r+0x1d98>
   835dc:	00801144 	movi	r2,69
   835e0:	90818b26 	beq	r18,r2,83c10 <___vfprintf_internal_r+0x1d98>
   835e4:	e02f883a 	mov	r23,fp
   835e8:	d8812404 	addi	r2,sp,1168
   835ec:	d8800115 	stw	r2,4(sp)
   835f0:	d8812304 	addi	r2,sp,1164
   835f4:	d8800215 	stw	r2,8(sp)
   835f8:	d8812204 	addi	r2,sp,1160
   835fc:	ddc00015 	stw	r23,0(sp)
   83600:	d8800315 	stw	r2,12(sp)
   83604:	8809883a 	mov	r4,r17
   83608:	b00b883a 	mov	r5,r22
   8360c:	a00d883a 	mov	r6,r20
   83610:	01c00084 	movi	r7,2
   83614:	da413c15 	stw	r9,1264(sp)
   83618:	00840c80 	call	840c8 <_dtoa_r>
   8361c:	1027883a 	mov	r19,r2
   83620:	008019c4 	movi	r2,103
   83624:	da413c17 	ldw	r9,1264(sp)
   83628:	9081951e 	bne	r18,r2,83c80 <___vfprintf_internal_r+0x1e08>
   8362c:	8080004c 	andi	r2,r16,1
   83630:	10017926 	beq	r2,zero,83c18 <___vfprintf_internal_r+0x1da0>
   83634:	00801184 	movi	r2,70
   83638:	9dc7883a 	add	r3,r19,r23
   8363c:	9080e626 	beq	r18,r2,839d8 <___vfprintf_internal_r+0x1b60>
   83640:	b009883a 	mov	r4,r22
   83644:	a00b883a 	mov	r5,r20
   83648:	000d883a 	mov	r6,zero
   8364c:	000f883a 	mov	r7,zero
   83650:	d8c13b15 	stw	r3,1260(sp)
   83654:	da413c15 	stw	r9,1264(sp)
   83658:	008a7800 	call	8a780 <__eqdf2>
   8365c:	d8c13b17 	ldw	r3,1260(sp)
   83660:	da413c17 	ldw	r9,1264(sp)
   83664:	10000726 	beq	r2,zero,83684 <___vfprintf_internal_r+0x180c>
   83668:	d8812217 	ldw	r2,1160(sp)
   8366c:	10c18a2e 	bgeu	r2,r3,83c98 <___vfprintf_internal_r+0x1e20>
   83670:	01000c04 	movi	r4,48
   83674:	11000005 	stb	r4,0(r2)
   83678:	10800044 	addi	r2,r2,1
   8367c:	d8812215 	stw	r2,1160(sp)
   83680:	10fffc1e 	bne	r2,r3,83674 <___vfprintf_internal_r+0x17fc>
   83684:	1cc7c83a 	sub	r3,r3,r19
   83688:	d8c13215 	stw	r3,1224(sp)
   8368c:	008019c4 	movi	r2,103
   83690:	9080fa26 	beq	r18,r2,83a7c <___vfprintf_internal_r+0x1c04>
   83694:	008011c4 	movi	r2,71
   83698:	9080f826 	beq	r18,r2,83a7c <___vfprintf_internal_r+0x1c04>
   8369c:	00801984 	movi	r2,102
   836a0:	90818e1e 	bne	r18,r2,83cdc <___vfprintf_internal_r+0x1e64>
   836a4:	d8812417 	ldw	r2,1168(sp)
   836a8:	d8812b15 	stw	r2,1196(sp)
   836ac:	00817c0e 	bge	zero,r2,83ca0 <___vfprintf_internal_r+0x1e28>
   836b0:	e000021e 	bne	fp,zero,836bc <___vfprintf_internal_r+0x1844>
   836b4:	8400004c 	andi	r16,r16,1
   836b8:	80000426 	beq	r16,zero,836cc <___vfprintf_internal_r+0x1854>
   836bc:	d8812b17 	ldw	r2,1196(sp)
   836c0:	e2000044 	addi	r8,fp,1
   836c4:	1205883a 	add	r2,r2,r8
   836c8:	d8812b15 	stw	r2,1196(sp)
   836cc:	d8812815 	stw	r2,1184(sp)
   836d0:	10010b16 	blt	r2,zero,83b00 <___vfprintf_internal_r+0x1c88>
   836d4:	ddc12f07 	ldb	r23,1212(sp)
   836d8:	b800e426 	beq	r23,zero,83a6c <___vfprintf_internal_r+0x1bf4>
   836dc:	00800b44 	movi	r2,45
   836e0:	d8812585 	stb	r2,1174(sp)
   836e4:	dc012a17 	ldw	r16,1192(sp)
   836e8:	d8013115 	stw	zero,1220(sp)
   836ec:	003b7306 	br	824bc <___vfprintf_internal_r+0x644>
   836f0:	d8812b17 	ldw	r2,1196(sp)
   836f4:	d8812815 	stw	r2,1184(sp)
   836f8:	10005716 	blt	r2,zero,83858 <___vfprintf_internal_r+0x19e0>
   836fc:	d8812583 	ldbu	r2,1174(sp)
   83700:	ddc12d15 	stw	r23,1204(sp)
   83704:	d8013115 	stw	zero,1220(sp)
   83708:	003b6806 	br	824ac <___vfprintf_internal_r+0x634>
   8370c:	d8c12d17 	ldw	r3,1204(sp)
   83710:	1dc00017 	ldw	r23,0(r3)
   83714:	18c00104 	addi	r3,r3,4
   83718:	d8c12d15 	stw	r3,1204(sp)
   8371c:	b82dd7fa 	srai	r22,r23,31
   83720:	b005883a 	mov	r2,r22
   83724:	003b4406 	br	82438 <___vfprintf_internal_r+0x5c0>
   83728:	d9012d17 	ldw	r4,1204(sp)
   8372c:	002d883a 	mov	r22,zero
   83730:	00c00044 	movi	r3,1
   83734:	25c00017 	ldw	r23,0(r4)
   83738:	21000104 	addi	r4,r4,4
   8373c:	d9012d15 	stw	r4,1204(sp)
   83740:	b805883a 	mov	r2,r23
   83744:	d8012585 	stb	zero,1174(sp)
   83748:	003b4406 	br	8245c <___vfprintf_internal_r+0x5e4>
   8374c:	d9012d17 	ldw	r4,1204(sp)
   83750:	002d883a 	mov	r22,zero
   83754:	25c00017 	ldw	r23,0(r4)
   83758:	21000104 	addi	r4,r4,4
   8375c:	d9012d15 	stw	r4,1204(sp)
   83760:	003bab06 	br	82610 <___vfprintf_internal_r+0x798>
   83764:	d8812d17 	ldw	r2,1204(sp)
   83768:	002d883a 	mov	r22,zero
   8376c:	0007883a 	mov	r3,zero
   83770:	15c00017 	ldw	r23,0(r2)
   83774:	10800104 	addi	r2,r2,4
   83778:	d8812d15 	stw	r2,1204(sp)
   8377c:	d8012585 	stb	zero,1174(sp)
   83780:	b805883a 	mov	r2,r23
   83784:	003b3506 	br	8245c <___vfprintf_internal_r+0x5e4>
   83788:	00ffffc4 	movi	r3,-1
   8378c:	b82b883a 	mov	r21,r23
   83790:	003a1606 	br	81fec <___vfprintf_internal_r+0x174>
   83794:	008011c4 	movi	r2,71
   83798:	1480b116 	blt	r2,r18,83a60 <___vfprintf_internal_r+0x1be8>
   8379c:	04c00274 	movhi	r19,9
   837a0:	9cf8ec04 	addi	r19,r19,-7248
   837a4:	00c000c4 	movi	r3,3
   837a8:	00bfdfc4 	movi	r2,-129
   837ac:	80a0703a 	and	r16,r16,r2
   837b0:	d8c12815 	stw	r3,1184(sp)
   837b4:	d8812583 	ldbu	r2,1174(sp)
   837b8:	d8c12b15 	stw	r3,1196(sp)
   837bc:	d8013115 	stw	zero,1220(sp)
   837c0:	003b3a06 	br	824ac <___vfprintf_internal_r+0x634>
   837c4:	d9412917 	ldw	r5,1188(sp)
   837c8:	8809883a 	mov	r4,r17
   837cc:	d9811b04 	addi	r6,sp,1132
   837d0:	0081e440 	call	81e44 <__sprint_r>
   837d4:	103aee1e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   837d8:	dc812417 	ldw	r18,1168(sp)
   837dc:	da011d17 	ldw	r8,1140(sp)
   837e0:	da400404 	addi	r9,sp,16
   837e4:	003f3c06 	br	834d8 <___vfprintf_internal_r+0x1660>
   837e8:	ad400044 	addi	r21,r21,1
   837ec:	84000814 	ori	r16,r16,32
   837f0:	14800047 	ldb	r18,1(r2)
   837f4:	0039fc06 	br	81fe8 <___vfprintf_internal_r+0x170>
   837f8:	d9412917 	ldw	r5,1188(sp)
   837fc:	8809883a 	mov	r4,r17
   83800:	d9811b04 	addi	r6,sp,1132
   83804:	0081e440 	call	81e44 <__sprint_r>
   83808:	103ae11e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   8380c:	da011d17 	ldw	r8,1140(sp)
   83810:	da400404 	addi	r9,sp,16
   83814:	003d2b06 	br	82cc4 <___vfprintf_internal_r+0xe4c>
   83818:	4d000015 	stw	r20,0(r9)
   8381c:	4c800115 	stw	r18,4(r9)
   83820:	4491883a 	add	r8,r8,r18
   83824:	18c00044 	addi	r3,r3,1
   83828:	da011d15 	stw	r8,1140(sp)
   8382c:	d8c11c15 	stw	r3,1136(sp)
   83830:	008001c4 	movi	r2,7
   83834:	10fcbd16 	blt	r2,r3,82b2c <___vfprintf_internal_r+0xcb4>
   83838:	4a400204 	addi	r9,r9,8
   8383c:	003cc206 	br	82b48 <___vfprintf_internal_r+0xcd0>
   83840:	da413c15 	stw	r9,1264(sp)
   83844:	0081db80 	call	81db8 <strlen>
   83848:	d8812b15 	stw	r2,1196(sp)
   8384c:	d8812815 	stw	r2,1184(sp)
   83850:	da413c17 	ldw	r9,1264(sp)
   83854:	103fa90e 	bge	r2,zero,836fc <___vfprintf_internal_r+0x1884>
   83858:	d8012815 	stw	zero,1184(sp)
   8385c:	003fa706 	br	836fc <___vfprintf_internal_r+0x1884>
   83860:	d9412917 	ldw	r5,1188(sp)
   83864:	8809883a 	mov	r4,r17
   83868:	d9811b04 	addi	r6,sp,1132
   8386c:	0081e440 	call	81e44 <__sprint_r>
   83870:	103ac71e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   83874:	da011d17 	ldw	r8,1140(sp)
   83878:	d8c11c17 	ldw	r3,1136(sp)
   8387c:	da400404 	addi	r9,sp,16
   83880:	d8813217 	ldw	r2,1224(sp)
   83884:	4cc00015 	stw	r19,0(r9)
   83888:	48800115 	stw	r2,4(r9)
   8388c:	4091883a 	add	r8,r8,r2
   83890:	003c6206 	br	82a1c <___vfprintf_internal_r+0xba4>
   83894:	00800b44 	movi	r2,45
   83898:	d8812585 	stb	r2,1174(sp)
   8389c:	003b2406 	br	82530 <___vfprintf_internal_r+0x6b8>
   838a0:	4d000015 	stw	r20,0(r9)
   838a4:	4c800115 	stw	r18,4(r9)
   838a8:	4491883a 	add	r8,r8,r18
   838ac:	18c00044 	addi	r3,r3,1
   838b0:	da011d15 	stw	r8,1140(sp)
   838b4:	d8c11c15 	stw	r3,1136(sp)
   838b8:	008001c4 	movi	r2,7
   838bc:	10ffe816 	blt	r2,r3,83860 <___vfprintf_internal_r+0x19e8>
   838c0:	4a400204 	addi	r9,r9,8
   838c4:	003fee06 	br	83880 <___vfprintf_internal_r+0x1a08>
   838c8:	d8c12b15 	stw	r3,1196(sp)
   838cc:	00800184 	movi	r2,6
   838d0:	10c0062e 	bgeu	r2,r3,838ec <___vfprintf_internal_r+0x1a74>
   838d4:	d8812b15 	stw	r2,1196(sp)
   838d8:	d8812815 	stw	r2,1184(sp)
   838dc:	ddc12d15 	stw	r23,1204(sp)
   838e0:	04c00274 	movhi	r19,9
   838e4:	9cf8f804 	addi	r19,r19,-7200
   838e8:	0039ca06 	br	82014 <___vfprintf_internal_r+0x19c>
   838ec:	d8812b17 	ldw	r2,1196(sp)
   838f0:	d8812815 	stw	r2,1184(sp)
   838f4:	103ff90e 	bge	r2,zero,838dc <___vfprintf_internal_r+0x1a64>
   838f8:	d8012815 	stw	zero,1184(sp)
   838fc:	003ff706 	br	838dc <___vfprintf_internal_r+0x1a64>
   83900:	00800244 	movi	r2,9
   83904:	15fdaa36 	bltu	r2,r23,82fb0 <___vfprintf_internal_r+0x1138>
   83908:	dd010e04 	addi	r20,sp,1080
   8390c:	003dc606 	br	83028 <___vfprintf_internal_r+0x11b0>
   83910:	d9412917 	ldw	r5,1188(sp)
   83914:	8809883a 	mov	r4,r17
   83918:	d9811b04 	addi	r6,sp,1132
   8391c:	0081e440 	call	81e44 <__sprint_r>
   83920:	103a9b1e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   83924:	dc812417 	ldw	r18,1168(sp)
   83928:	da400404 	addi	r9,sp,16
   8392c:	003ecd06 	br	83464 <___vfprintf_internal_r+0x15ec>
   83930:	d9412917 	ldw	r5,1188(sp)
   83934:	8809883a 	mov	r4,r17
   83938:	d9811b04 	addi	r6,sp,1132
   8393c:	0081e440 	call	81e44 <__sprint_r>
   83940:	103a931e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   83944:	dc812417 	ldw	r18,1168(sp)
   83948:	da011d17 	ldw	r8,1140(sp)
   8394c:	d8c11c17 	ldw	r3,1136(sp)
   83950:	da400404 	addi	r9,sp,16
   83954:	003eb706 	br	83434 <___vfprintf_internal_r+0x15bc>
   83958:	d9412917 	ldw	r5,1188(sp)
   8395c:	8809883a 	mov	r4,r17
   83960:	d9811b04 	addi	r6,sp,1132
   83964:	0081e440 	call	81e44 <__sprint_r>
   83968:	103a891e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   8396c:	dc812417 	ldw	r18,1168(sp)
   83970:	da011d17 	ldw	r8,1140(sp)
   83974:	da400404 	addi	r9,sp,16
   83978:	003dc206 	br	83084 <___vfprintf_internal_r+0x120c>
   8397c:	df012815 	stw	fp,1184(sp)
   83980:	d8812583 	ldbu	r2,1174(sp)
   83984:	df012b15 	stw	fp,1196(sp)
   83988:	ddc12d15 	stw	r23,1204(sp)
   8398c:	d8013115 	stw	zero,1220(sp)
   83990:	003ac606 	br	824ac <___vfprintf_internal_r+0x634>
   83994:	d8812404 	addi	r2,sp,1168
   83998:	d8800115 	stw	r2,4(sp)
   8399c:	d8812304 	addi	r2,sp,1164
   839a0:	d8800215 	stw	r2,8(sp)
   839a4:	d8812204 	addi	r2,sp,1160
   839a8:	df000015 	stw	fp,0(sp)
   839ac:	d8800315 	stw	r2,12(sp)
   839b0:	8809883a 	mov	r4,r17
   839b4:	b00b883a 	mov	r5,r22
   839b8:	a00d883a 	mov	r6,r20
   839bc:	01c000c4 	movi	r7,3
   839c0:	da413c15 	stw	r9,1264(sp)
   839c4:	00840c80 	call	840c8 <_dtoa_r>
   839c8:	da413c17 	ldw	r9,1264(sp)
   839cc:	1027883a 	mov	r19,r2
   839d0:	1707883a 	add	r3,r2,fp
   839d4:	e02f883a 	mov	r23,fp
   839d8:	99000007 	ldb	r4,0(r19)
   839dc:	00800c04 	movi	r2,48
   839e0:	20800326 	beq	r4,r2,839f0 <___vfprintf_internal_r+0x1b78>
   839e4:	da812417 	ldw	r10,1168(sp)
   839e8:	1a87883a 	add	r3,r3,r10
   839ec:	003f1406 	br	83640 <___vfprintf_internal_r+0x17c8>
   839f0:	b009883a 	mov	r4,r22
   839f4:	a00b883a 	mov	r5,r20
   839f8:	000d883a 	mov	r6,zero
   839fc:	000f883a 	mov	r7,zero
   83a00:	d8c13b15 	stw	r3,1260(sp)
   83a04:	da413c15 	stw	r9,1264(sp)
   83a08:	008a7dc0 	call	8a7dc <__nedf2>
   83a0c:	d8c13b17 	ldw	r3,1260(sp)
   83a10:	da413c17 	ldw	r9,1264(sp)
   83a14:	103ff326 	beq	r2,zero,839e4 <___vfprintf_internal_r+0x1b6c>
   83a18:	00800044 	movi	r2,1
   83a1c:	15d5c83a 	sub	r10,r2,r23
   83a20:	da812415 	stw	r10,1168(sp)
   83a24:	1a87883a 	add	r3,r3,r10
   83a28:	003f0506 	br	83640 <___vfprintf_internal_r+0x17c8>
   83a2c:	d9412917 	ldw	r5,1188(sp)
   83a30:	8809883a 	mov	r4,r17
   83a34:	d9811b04 	addi	r6,sp,1132
   83a38:	0081e440 	call	81e44 <__sprint_r>
   83a3c:	103a541e 	bne	r2,zero,82390 <___vfprintf_internal_r+0x518>
   83a40:	dc812417 	ldw	r18,1168(sp)
   83a44:	da011d17 	ldw	r8,1140(sp)
   83a48:	d8c11c17 	ldw	r3,1136(sp)
   83a4c:	da400404 	addi	r9,sp,16
   83a50:	003eb206 	br	8351c <___vfprintf_internal_r+0x16a4>
   83a54:	b82b883a 	mov	r21,r23
   83a58:	0007883a 	mov	r3,zero
   83a5c:	00396306 	br	81fec <___vfprintf_internal_r+0x174>
   83a60:	04c00274 	movhi	r19,9
   83a64:	9cf8ed04 	addi	r19,r19,-7244
   83a68:	003f4e06 	br	837a4 <___vfprintf_internal_r+0x192c>
   83a6c:	d8812583 	ldbu	r2,1174(sp)
   83a70:	dc012a17 	ldw	r16,1192(sp)
   83a74:	d8013115 	stw	zero,1220(sp)
   83a78:	003a8c06 	br	824ac <___vfprintf_internal_r+0x634>
   83a7c:	d8812417 	ldw	r2,1168(sp)
   83a80:	d8812b15 	stw	r2,1196(sp)
   83a84:	1029883a 	mov	r20,r2
   83a88:	00bfff44 	movi	r2,-3
   83a8c:	a0800116 	blt	r20,r2,83a94 <___vfprintf_internal_r+0x1c1c>
   83a90:	e5001d0e 	bge	fp,r20,83b08 <___vfprintf_internal_r+0x1c90>
   83a94:	94bfff84 	addi	r18,r18,-2
   83a98:	a53fffc4 	addi	r20,r20,-1
   83a9c:	dd012415 	stw	r20,1168(sp)
   83aa0:	dc811fc5 	stb	r18,1151(sp)
   83aa4:	a0007216 	blt	r20,zero,83c70 <___vfprintf_internal_r+0x1df8>
   83aa8:	00800ac4 	movi	r2,43
   83aac:	d8812005 	stb	r2,1152(sp)
   83ab0:	00800244 	movi	r2,9
   83ab4:	15003516 	blt	r2,r20,83b8c <___vfprintf_internal_r+0x1d14>
   83ab8:	00800c04 	movi	r2,48
   83abc:	a5000c04 	addi	r20,r20,48
   83ac0:	d8812045 	stb	r2,1153(sp)
   83ac4:	dd012085 	stb	r20,1154(sp)
   83ac8:	d8c120c4 	addi	r3,sp,1155
   83acc:	d8811fc4 	addi	r2,sp,1151
   83ad0:	1885c83a 	sub	r2,r3,r2
   83ad4:	d8c13217 	ldw	r3,1224(sp)
   83ad8:	d8813515 	stw	r2,1236(sp)
   83adc:	1885883a 	add	r2,r3,r2
   83ae0:	d8812b15 	stw	r2,1196(sp)
   83ae4:	00800044 	movi	r2,1
   83ae8:	10c0580e 	bge	r2,r3,83c4c <___vfprintf_internal_r+0x1dd4>
   83aec:	d8812b17 	ldw	r2,1196(sp)
   83af0:	10800044 	addi	r2,r2,1
   83af4:	d8812b15 	stw	r2,1196(sp)
   83af8:	d8812815 	stw	r2,1184(sp)
   83afc:	103ef50e 	bge	r2,zero,836d4 <___vfprintf_internal_r+0x185c>
   83b00:	d8012815 	stw	zero,1184(sp)
   83b04:	003ef306 	br	836d4 <___vfprintf_internal_r+0x185c>
   83b08:	d8812b17 	ldw	r2,1196(sp)
   83b0c:	d8c13217 	ldw	r3,1224(sp)
   83b10:	10c01416 	blt	r2,r3,83b64 <___vfprintf_internal_r+0x1cec>
   83b14:	8400004c 	andi	r16,r16,1
   83b18:	80000326 	beq	r16,zero,83b28 <___vfprintf_internal_r+0x1cb0>
   83b1c:	d8812b17 	ldw	r2,1196(sp)
   83b20:	10800044 	addi	r2,r2,1
   83b24:	d8812b15 	stw	r2,1196(sp)
   83b28:	d8812815 	stw	r2,1184(sp)
   83b2c:	10001416 	blt	r2,zero,83b80 <___vfprintf_internal_r+0x1d08>
   83b30:	048019c4 	movi	r18,103
   83b34:	003ee706 	br	836d4 <___vfprintf_internal_r+0x185c>
   83b38:	d8012815 	stw	zero,1184(sp)
   83b3c:	003b1a06 	br	827a8 <___vfprintf_internal_r+0x930>
   83b40:	e03e9c1e 	bne	fp,zero,835b4 <___vfprintf_internal_r+0x173c>
   83b44:	07000044 	movi	fp,1
   83b48:	003e9a06 	br	835b4 <___vfprintf_internal_r+0x173c>
   83b4c:	07000184 	movi	fp,6
   83b50:	003e9806 	br	835b4 <___vfprintf_internal_r+0x173c>
   83b54:	00c00b44 	movi	r3,45
   83b58:	a520003c 	xorhi	r20,r20,32768
   83b5c:	d8c12f05 	stb	r3,1212(sp)
   83b60:	003e9806 	br	835c4 <___vfprintf_internal_r+0x174c>
   83b64:	05003f0e 	bge	zero,r20,83c64 <___vfprintf_internal_r+0x1dec>
   83b68:	05000044 	movi	r20,1
   83b6c:	d8c13217 	ldw	r3,1224(sp)
   83b70:	a0e9883a 	add	r20,r20,r3
   83b74:	dd012b15 	stw	r20,1196(sp)
   83b78:	dd012815 	stw	r20,1184(sp)
   83b7c:	a03fec0e 	bge	r20,zero,83b30 <___vfprintf_internal_r+0x1cb8>
   83b80:	d8012815 	stw	zero,1184(sp)
   83b84:	048019c4 	movi	r18,103
   83b88:	003ed206 	br	836d4 <___vfprintf_internal_r+0x185c>
   83b8c:	d8c11f84 	addi	r3,sp,1150
   83b90:	102f883a 	mov	r23,r2
   83b94:	4839883a 	mov	fp,r9
   83b98:	a009883a 	mov	r4,r20
   83b9c:	01400284 	movi	r5,10
   83ba0:	182d883a 	mov	r22,r3
   83ba4:	008ace40 	call	8ace4 <__modsi3>
   83ba8:	10800c04 	addi	r2,r2,48
   83bac:	a009883a 	mov	r4,r20
   83bb0:	b0800005 	stb	r2,0(r22)
   83bb4:	01400284 	movi	r5,10
   83bb8:	008ac940 	call	8ac94 <__divsi3>
   83bbc:	1029883a 	mov	r20,r2
   83bc0:	b0ffffc4 	addi	r3,r22,-1
   83bc4:	b8bff416 	blt	r23,r2,83b98 <___vfprintf_internal_r+0x1d20>
   83bc8:	11400c04 	addi	r5,r2,48
   83bcc:	b17fffc5 	stb	r5,-1(r22)
   83bd0:	d8811fc4 	addi	r2,sp,1151
   83bd4:	e013883a 	mov	r9,fp
   83bd8:	18803e2e 	bgeu	r3,r2,83cd4 <___vfprintf_internal_r+0x1e5c>
   83bdc:	b007883a 	mov	r3,r22
   83be0:	d9012044 	addi	r4,sp,1153
   83be4:	00000206 	br	83bf0 <___vfprintf_internal_r+0x1d78>
   83be8:	19400003 	ldbu	r5,0(r3)
   83bec:	18c00044 	addi	r3,r3,1
   83bf0:	21400005 	stb	r5,0(r4)
   83bf4:	21000044 	addi	r4,r4,1
   83bf8:	10fffb1e 	bne	r2,r3,83be8 <___vfprintf_internal_r+0x1d70>
   83bfc:	d8c12004 	addi	r3,sp,1152
   83c00:	1d87c83a 	sub	r3,r3,r22
   83c04:	d9012044 	addi	r4,sp,1153
   83c08:	20c7883a 	add	r3,r4,r3
   83c0c:	003fb006 	br	83ad0 <___vfprintf_internal_r+0x1c58>
   83c10:	e5c00044 	addi	r23,fp,1
   83c14:	003e7406 	br	835e8 <___vfprintf_internal_r+0x1770>
   83c18:	d8c12217 	ldw	r3,1160(sp)
   83c1c:	003e9906 	br	83684 <___vfprintf_internal_r+0x180c>
   83c20:	d9012d17 	ldw	r4,1204(sp)
   83c24:	ac800043 	ldbu	r18,1(r21)
   83c28:	b82b883a 	mov	r21,r23
   83c2c:	20c00017 	ldw	r3,0(r4)
   83c30:	20800104 	addi	r2,r4,4
   83c34:	d8812d15 	stw	r2,1204(sp)
   83c38:	18002116 	blt	r3,zero,83cc0 <___vfprintf_internal_r+0x1e48>
   83c3c:	94803fcc 	andi	r18,r18,255
   83c40:	9480201c 	xori	r18,r18,128
   83c44:	94bfe004 	addi	r18,r18,-128
   83c48:	0038e706 	br	81fe8 <___vfprintf_internal_r+0x170>
   83c4c:	80a0703a 	and	r16,r16,r2
   83c50:	803fa61e 	bne	r16,zero,83aec <___vfprintf_internal_r+0x1c74>
   83c54:	d8812b17 	ldw	r2,1196(sp)
   83c58:	d8812815 	stw	r2,1184(sp)
   83c5c:	103e9d0e 	bge	r2,zero,836d4 <___vfprintf_internal_r+0x185c>
   83c60:	003fa706 	br	83b00 <___vfprintf_internal_r+0x1c88>
   83c64:	00800084 	movi	r2,2
   83c68:	1529c83a 	sub	r20,r2,r20
   83c6c:	003fbf06 	br	83b6c <___vfprintf_internal_r+0x1cf4>
   83c70:	00800b44 	movi	r2,45
   83c74:	0529c83a 	sub	r20,zero,r20
   83c78:	d8812005 	stb	r2,1152(sp)
   83c7c:	003f8c06 	br	83ab0 <___vfprintf_internal_r+0x1c38>
   83c80:	008011c4 	movi	r2,71
   83c84:	90be6926 	beq	r18,r2,8362c <___vfprintf_internal_r+0x17b4>
   83c88:	003e6a06 	br	83634 <___vfprintf_internal_r+0x17bc>
   83c8c:	00bfffc4 	movi	r2,-1
   83c90:	d8812c15 	stw	r2,1200(sp)
   83c94:	0039ad06 	br	8234c <___vfprintf_internal_r+0x4d4>
   83c98:	1007883a 	mov	r3,r2
   83c9c:	003e7906 	br	83684 <___vfprintf_internal_r+0x180c>
   83ca0:	e000021e 	bne	fp,zero,83cac <___vfprintf_internal_r+0x1e34>
   83ca4:	8400004c 	andi	r16,r16,1
   83ca8:	80000e26 	beq	r16,zero,83ce4 <___vfprintf_internal_r+0x1e6c>
   83cac:	e7000084 	addi	fp,fp,2
   83cb0:	df012b15 	stw	fp,1196(sp)
   83cb4:	df012815 	stw	fp,1184(sp)
   83cb8:	e03e860e 	bge	fp,zero,836d4 <___vfprintf_internal_r+0x185c>
   83cbc:	003f9006 	br	83b00 <___vfprintf_internal_r+0x1c88>
   83cc0:	94803fcc 	andi	r18,r18,255
   83cc4:	9480201c 	xori	r18,r18,128
   83cc8:	00ffffc4 	movi	r3,-1
   83ccc:	94bfe004 	addi	r18,r18,-128
   83cd0:	0038c506 	br	81fe8 <___vfprintf_internal_r+0x170>
   83cd4:	d8c12044 	addi	r3,sp,1153
   83cd8:	003f7d06 	br	83ad0 <___vfprintf_internal_r+0x1c58>
   83cdc:	dd012417 	ldw	r20,1168(sp)
   83ce0:	003f6d06 	br	83a98 <___vfprintf_internal_r+0x1c20>
   83ce4:	00c00044 	movi	r3,1
   83ce8:	d8c12815 	stw	r3,1184(sp)
   83cec:	d8c12b15 	stw	r3,1196(sp)
   83cf0:	003e7806 	br	836d4 <___vfprintf_internal_r+0x185c>

00083cf4 <__vfprintf_internal>:
   83cf4:	00800274 	movhi	r2,9
   83cf8:	10823c04 	addi	r2,r2,2288
   83cfc:	2007883a 	mov	r3,r4
   83d00:	11000017 	ldw	r4,0(r2)
   83d04:	2805883a 	mov	r2,r5
   83d08:	300f883a 	mov	r7,r6
   83d0c:	180b883a 	mov	r5,r3
   83d10:	100d883a 	mov	r6,r2
   83d14:	0081e781 	jmpi	81e78 <___vfprintf_internal_r>

00083d18 <__swsetup_r>:
   83d18:	00800274 	movhi	r2,9
   83d1c:	10823c04 	addi	r2,r2,2288
   83d20:	10800017 	ldw	r2,0(r2)
   83d24:	defffd04 	addi	sp,sp,-12
   83d28:	dc400115 	stw	r17,4(sp)
   83d2c:	dc000015 	stw	r16,0(sp)
   83d30:	dfc00215 	stw	ra,8(sp)
   83d34:	2023883a 	mov	r17,r4
   83d38:	2821883a 	mov	r16,r5
   83d3c:	10000226 	beq	r2,zero,83d48 <__swsetup_r+0x30>
   83d40:	10c00e17 	ldw	r3,56(r2)
   83d44:	18003d26 	beq	r3,zero,83e3c <__swsetup_r+0x124>
   83d48:	8080030b 	ldhu	r2,12(r16)
   83d4c:	10c0020c 	andi	r3,r2,8
   83d50:	18ffffcc 	andi	r3,r3,65535
   83d54:	18e0001c 	xori	r3,r3,32768
   83d58:	18e00004 	addi	r3,r3,-32768
   83d5c:	18001226 	beq	r3,zero,83da8 <__swsetup_r+0x90>
   83d60:	80c00417 	ldw	r3,16(r16)
   83d64:	18001f26 	beq	r3,zero,83de4 <__swsetup_r+0xcc>
   83d68:	1100004c 	andi	r4,r2,1
   83d6c:	2000261e 	bne	r4,zero,83e08 <__swsetup_r+0xf0>
   83d70:	1080008c 	andi	r2,r2,2
   83d74:	10bfffcc 	andi	r2,r2,65535
   83d78:	10a0001c 	xori	r2,r2,32768
   83d7c:	10a00004 	addi	r2,r2,-32768
   83d80:	1000311e 	bne	r2,zero,83e48 <__swsetup_r+0x130>
   83d84:	80800517 	ldw	r2,20(r16)
   83d88:	80800215 	stw	r2,8(r16)
   83d8c:	18002326 	beq	r3,zero,83e1c <__swsetup_r+0x104>
   83d90:	0005883a 	mov	r2,zero
   83d94:	dfc00217 	ldw	ra,8(sp)
   83d98:	dc400117 	ldw	r17,4(sp)
   83d9c:	dc000017 	ldw	r16,0(sp)
   83da0:	dec00304 	addi	sp,sp,12
   83da4:	f800283a 	ret
   83da8:	10c0040c 	andi	r3,r2,16
   83dac:	18ffffcc 	andi	r3,r3,65535
   83db0:	18e0001c 	xori	r3,r3,32768
   83db4:	18e00004 	addi	r3,r3,-32768
   83db8:	18001e26 	beq	r3,zero,83e34 <__swsetup_r+0x11c>
   83dbc:	10c0010c 	andi	r3,r2,4
   83dc0:	18ffffcc 	andi	r3,r3,65535
   83dc4:	18e0001c 	xori	r3,r3,32768
   83dc8:	18e00004 	addi	r3,r3,-32768
   83dcc:	1800211e 	bne	r3,zero,83e54 <__swsetup_r+0x13c>
   83dd0:	80c00417 	ldw	r3,16(r16)
   83dd4:	11400214 	ori	r5,r2,8
   83dd8:	8140030d 	sth	r5,12(r16)
   83ddc:	2805883a 	mov	r2,r5
   83de0:	183fe11e 	bne	r3,zero,83d68 <__swsetup_r+0x50>
   83de4:	1140a00c 	andi	r5,r2,640
   83de8:	01008004 	movi	r4,512
   83dec:	293fde26 	beq	r5,r4,83d68 <__swsetup_r+0x50>
   83df0:	8809883a 	mov	r4,r17
   83df4:	800b883a 	mov	r5,r16
   83df8:	00867140 	call	86714 <__smakebuf_r>
   83dfc:	8080030b 	ldhu	r2,12(r16)
   83e00:	80c00417 	ldw	r3,16(r16)
   83e04:	003fd806 	br	83d68 <__swsetup_r+0x50>
   83e08:	80800517 	ldw	r2,20(r16)
   83e0c:	80000215 	stw	zero,8(r16)
   83e10:	0085c83a 	sub	r2,zero,r2
   83e14:	80800615 	stw	r2,24(r16)
   83e18:	183fdd1e 	bne	r3,zero,83d90 <__swsetup_r+0x78>
   83e1c:	8080030b 	ldhu	r2,12(r16)
   83e20:	1080200c 	andi	r2,r2,128
   83e24:	10bfffcc 	andi	r2,r2,65535
   83e28:	10a0001c 	xori	r2,r2,32768
   83e2c:	10a00004 	addi	r2,r2,-32768
   83e30:	103fd826 	beq	r2,zero,83d94 <__swsetup_r+0x7c>
   83e34:	00bfffc4 	movi	r2,-1
   83e38:	003fd606 	br	83d94 <__swsetup_r+0x7c>
   83e3c:	1009883a 	mov	r4,r2
   83e40:	00859a00 	call	859a0 <__sinit>
   83e44:	003fc006 	br	83d48 <__swsetup_r+0x30>
   83e48:	0005883a 	mov	r2,zero
   83e4c:	80800215 	stw	r2,8(r16)
   83e50:	003fce06 	br	83d8c <__swsetup_r+0x74>
   83e54:	81400c17 	ldw	r5,48(r16)
   83e58:	28000626 	beq	r5,zero,83e74 <__swsetup_r+0x15c>
   83e5c:	80c01004 	addi	r3,r16,64
   83e60:	28c00326 	beq	r5,r3,83e70 <__swsetup_r+0x158>
   83e64:	8809883a 	mov	r4,r17
   83e68:	0085d240 	call	85d24 <_free_r>
   83e6c:	8080030b 	ldhu	r2,12(r16)
   83e70:	80000c15 	stw	zero,48(r16)
   83e74:	80c00417 	ldw	r3,16(r16)
   83e78:	013ff6c4 	movi	r4,-37
   83e7c:	2084703a 	and	r2,r4,r2
   83e80:	80000115 	stw	zero,4(r16)
   83e84:	80c00015 	stw	r3,0(r16)
   83e88:	003fd206 	br	83dd4 <__swsetup_r+0xbc>

00083e8c <quorem>:
   83e8c:	defff204 	addi	sp,sp,-56
   83e90:	dd000815 	stw	r20,32(sp)
   83e94:	20800417 	ldw	r2,16(r4)
   83e98:	2d000417 	ldw	r20,16(r5)
   83e9c:	dcc00715 	stw	r19,28(sp)
   83ea0:	dfc00d15 	stw	ra,52(sp)
   83ea4:	df000c15 	stw	fp,48(sp)
   83ea8:	ddc00b15 	stw	r23,44(sp)
   83eac:	dd800a15 	stw	r22,40(sp)
   83eb0:	dd400915 	stw	r21,36(sp)
   83eb4:	dc800615 	stw	r18,24(sp)
   83eb8:	dc400515 	stw	r17,20(sp)
   83ebc:	dc000415 	stw	r16,16(sp)
   83ec0:	d9400015 	stw	r5,0(sp)
   83ec4:	2027883a 	mov	r19,r4
   83ec8:	15007d16 	blt	r2,r20,840c0 <quorem+0x234>
   83ecc:	a0800104 	addi	r2,r20,4
   83ed0:	1085883a 	add	r2,r2,r2
   83ed4:	1085883a 	add	r2,r2,r2
   83ed8:	28ad883a 	add	r22,r5,r2
   83edc:	2085883a 	add	r2,r4,r2
   83ee0:	10800017 	ldw	r2,0(r2)
   83ee4:	b1400017 	ldw	r5,0(r22)
   83ee8:	a53fffc4 	addi	r20,r20,-1
   83eec:	1009883a 	mov	r4,r2
   83ef0:	29400044 	addi	r5,r5,1
   83ef4:	d8800115 	stw	r2,4(sp)
   83ef8:	008ad400 	call	8ad40 <__udivsi3>
   83efc:	1025883a 	mov	r18,r2
   83f00:	d8800017 	ldw	r2,0(sp)
   83f04:	9f000504 	addi	fp,r19,20
   83f08:	14000504 	addi	r16,r2,20
   83f0c:	90003626 	beq	r18,zero,83fe8 <quorem+0x15c>
   83f10:	802b883a 	mov	r21,r16
   83f14:	e023883a 	mov	r17,fp
   83f18:	0007883a 	mov	r3,zero
   83f1c:	002f883a 	mov	r23,zero
   83f20:	a9800017 	ldw	r6,0(r21)
   83f24:	900b883a 	mov	r5,r18
   83f28:	d8c00315 	stw	r3,12(sp)
   83f2c:	313fffcc 	andi	r4,r6,65535
   83f30:	d9800215 	stw	r6,8(sp)
   83f34:	0081c900 	call	81c90 <__mulsi3>
   83f38:	d9800217 	ldw	r6,8(sp)
   83f3c:	d8c00317 	ldw	r3,12(sp)
   83f40:	900b883a 	mov	r5,r18
   83f44:	3008d43a 	srli	r4,r6,16
   83f48:	1887883a 	add	r3,r3,r2
   83f4c:	d8c00315 	stw	r3,12(sp)
   83f50:	0081c900 	call	81c90 <__mulsi3>
   83f54:	89400017 	ldw	r5,0(r17)
   83f58:	d8c00317 	ldw	r3,12(sp)
   83f5c:	ad400104 	addi	r21,r21,4
   83f60:	293fffcc 	andi	r4,r5,65535
   83f64:	1810d43a 	srli	r8,r3,16
   83f68:	25c9883a 	add	r4,r4,r23
   83f6c:	18ffffcc 	andi	r3,r3,65535
   83f70:	20c9c83a 	sub	r4,r4,r3
   83f74:	280cd43a 	srli	r6,r5,16
   83f78:	4085883a 	add	r2,r8,r2
   83f7c:	2007d43a 	srai	r3,r4,16
   83f80:	117fffcc 	andi	r5,r2,65535
   83f84:	314bc83a 	sub	r5,r6,r5
   83f88:	28cb883a 	add	r5,r5,r3
   83f8c:	8940008d 	sth	r5,2(r17)
   83f90:	8900000d 	sth	r4,0(r17)
   83f94:	1006d43a 	srli	r3,r2,16
   83f98:	282fd43a 	srai	r23,r5,16
   83f9c:	8c400104 	addi	r17,r17,4
   83fa0:	b57fdf2e 	bgeu	r22,r21,83f20 <quorem+0x94>
   83fa4:	d8c00117 	ldw	r3,4(sp)
   83fa8:	18000f1e 	bne	r3,zero,83fe8 <quorem+0x15c>
   83fac:	a0800144 	addi	r2,r20,5
   83fb0:	1085883a 	add	r2,r2,r2
   83fb4:	1085883a 	add	r2,r2,r2
   83fb8:	9887883a 	add	r3,r19,r2
   83fbc:	18bfff04 	addi	r2,r3,-4
   83fc0:	e080082e 	bgeu	fp,r2,83fe4 <quorem+0x158>
   83fc4:	18ffff17 	ldw	r3,-4(r3)
   83fc8:	18000326 	beq	r3,zero,83fd8 <quorem+0x14c>
   83fcc:	00000506 	br	83fe4 <quorem+0x158>
   83fd0:	10c00017 	ldw	r3,0(r2)
   83fd4:	1800031e 	bne	r3,zero,83fe4 <quorem+0x158>
   83fd8:	10bfff04 	addi	r2,r2,-4
   83fdc:	a53fffc4 	addi	r20,r20,-1
   83fe0:	e0bffb36 	bltu	fp,r2,83fd0 <quorem+0x144>
   83fe4:	9d000415 	stw	r20,16(r19)
   83fe8:	d9400017 	ldw	r5,0(sp)
   83fec:	9809883a 	mov	r4,r19
   83ff0:	0087e2c0 	call	87e2c <__mcmp>
   83ff4:	10002516 	blt	r2,zero,8408c <quorem+0x200>
   83ff8:	94800044 	addi	r18,r18,1
   83ffc:	e007883a 	mov	r3,fp
   84000:	000d883a 	mov	r6,zero
   84004:	18800017 	ldw	r2,0(r3)
   84008:	82000017 	ldw	r8,0(r16)
   8400c:	84000104 	addi	r16,r16,4
   84010:	11ffffcc 	andi	r7,r2,65535
   84014:	413fffcc 	andi	r4,r8,65535
   84018:	398d883a 	add	r6,r7,r6
   8401c:	310fc83a 	sub	r7,r6,r4
   84020:	4010d43a 	srli	r8,r8,16
   84024:	100cd43a 	srli	r6,r2,16
   84028:	3809d43a 	srai	r4,r7,16
   8402c:	19c0000d 	sth	r7,0(r3)
   84030:	320dc83a 	sub	r6,r6,r8
   84034:	310d883a 	add	r6,r6,r4
   84038:	1980008d 	sth	r6,2(r3)
   8403c:	300dd43a 	srai	r6,r6,16
   84040:	18c00104 	addi	r3,r3,4
   84044:	b43fef2e 	bgeu	r22,r16,84004 <quorem+0x178>
   84048:	a0800144 	addi	r2,r20,5
   8404c:	1085883a 	add	r2,r2,r2
   84050:	1085883a 	add	r2,r2,r2
   84054:	9885883a 	add	r2,r19,r2
   84058:	10c00017 	ldw	r3,0(r2)
   8405c:	18000b1e 	bne	r3,zero,8408c <quorem+0x200>
   84060:	10ffff04 	addi	r3,r2,-4
   84064:	e0c0082e 	bgeu	fp,r3,84088 <quorem+0x1fc>
   84068:	10bfff17 	ldw	r2,-4(r2)
   8406c:	10000326 	beq	r2,zero,8407c <quorem+0x1f0>
   84070:	00000506 	br	84088 <quorem+0x1fc>
   84074:	18800017 	ldw	r2,0(r3)
   84078:	1000031e 	bne	r2,zero,84088 <quorem+0x1fc>
   8407c:	18ffff04 	addi	r3,r3,-4
   84080:	a53fffc4 	addi	r20,r20,-1
   84084:	e0fffb36 	bltu	fp,r3,84074 <quorem+0x1e8>
   84088:	9d000415 	stw	r20,16(r19)
   8408c:	9005883a 	mov	r2,r18
   84090:	dfc00d17 	ldw	ra,52(sp)
   84094:	df000c17 	ldw	fp,48(sp)
   84098:	ddc00b17 	ldw	r23,44(sp)
   8409c:	dd800a17 	ldw	r22,40(sp)
   840a0:	dd400917 	ldw	r21,36(sp)
   840a4:	dd000817 	ldw	r20,32(sp)
   840a8:	dcc00717 	ldw	r19,28(sp)
   840ac:	dc800617 	ldw	r18,24(sp)
   840b0:	dc400517 	ldw	r17,20(sp)
   840b4:	dc000417 	ldw	r16,16(sp)
   840b8:	dec00e04 	addi	sp,sp,56
   840bc:	f800283a 	ret
   840c0:	0005883a 	mov	r2,zero
   840c4:	003ff206 	br	84090 <quorem+0x204>

000840c8 <_dtoa_r>:
   840c8:	20801017 	ldw	r2,64(r4)
   840cc:	deffdf04 	addi	sp,sp,-132
   840d0:	dcc01a15 	stw	r19,104(sp)
   840d4:	dc801915 	stw	r18,100(sp)
   840d8:	dc401815 	stw	r17,96(sp)
   840dc:	dc001715 	stw	r16,92(sp)
   840e0:	dfc02015 	stw	ra,128(sp)
   840e4:	df001f15 	stw	fp,124(sp)
   840e8:	ddc01e15 	stw	r23,120(sp)
   840ec:	dd801d15 	stw	r22,116(sp)
   840f0:	dd401c15 	stw	r21,112(sp)
   840f4:	dd001b15 	stw	r20,108(sp)
   840f8:	d9400315 	stw	r5,12(sp)
   840fc:	d9c00415 	stw	r7,16(sp)
   84100:	2021883a 	mov	r16,r4
   84104:	3025883a 	mov	r18,r6
   84108:	dcc02317 	ldw	r19,140(sp)
   8410c:	3023883a 	mov	r17,r6
   84110:	10000826 	beq	r2,zero,84134 <_dtoa_r+0x6c>
   84114:	20c01117 	ldw	r3,68(r4)
   84118:	01800044 	movi	r6,1
   8411c:	100b883a 	mov	r5,r2
   84120:	30cc983a 	sll	r6,r6,r3
   84124:	10c00115 	stw	r3,4(r2)
   84128:	11800215 	stw	r6,8(r2)
   8412c:	00875880 	call	87588 <_Bfree>
   84130:	80001015 	stw	zero,64(r16)
   84134:	90002f16 	blt	r18,zero,841f4 <_dtoa_r+0x12c>
   84138:	98000015 	stw	zero,0(r19)
   8413c:	90dffc2c 	andhi	r3,r18,32752
   84140:	009ffc34 	movhi	r2,32752
   84144:	18801c26 	beq	r3,r2,841b8 <_dtoa_r+0xf0>
   84148:	d9000317 	ldw	r4,12(sp)
   8414c:	880b883a 	mov	r5,r17
   84150:	000d883a 	mov	r6,zero
   84154:	000f883a 	mov	r7,zero
   84158:	008a7800 	call	8a780 <__eqdf2>
   8415c:	10002c1e 	bne	r2,zero,84210 <_dtoa_r+0x148>
   84160:	d9002217 	ldw	r4,136(sp)
   84164:	d9c02417 	ldw	r7,144(sp)
   84168:	00800044 	movi	r2,1
   8416c:	20800015 	stw	r2,0(r4)
   84170:	38019426 	beq	r7,zero,847c4 <_dtoa_r+0x6fc>
   84174:	00800274 	movhi	r2,9
   84178:	10b8fa44 	addi	r2,r2,-7191
   8417c:	38800015 	stw	r2,0(r7)
   84180:	15ffffc4 	addi	r23,r2,-1
   84184:	b805883a 	mov	r2,r23
   84188:	dfc02017 	ldw	ra,128(sp)
   8418c:	df001f17 	ldw	fp,124(sp)
   84190:	ddc01e17 	ldw	r23,120(sp)
   84194:	dd801d17 	ldw	r22,116(sp)
   84198:	dd401c17 	ldw	r21,112(sp)
   8419c:	dd001b17 	ldw	r20,108(sp)
   841a0:	dcc01a17 	ldw	r19,104(sp)
   841a4:	dc801917 	ldw	r18,100(sp)
   841a8:	dc401817 	ldw	r17,96(sp)
   841ac:	dc001717 	ldw	r16,92(sp)
   841b0:	dec02104 	addi	sp,sp,132
   841b4:	f800283a 	ret
   841b8:	d8c02217 	ldw	r3,136(sp)
   841bc:	d9000317 	ldw	r4,12(sp)
   841c0:	0089c3c4 	movi	r2,9999
   841c4:	18800015 	stw	r2,0(r3)
   841c8:	20016c26 	beq	r4,zero,8477c <_dtoa_r+0x6b4>
   841cc:	05c00274 	movhi	r23,9
   841d0:	bdf90604 	addi	r23,r23,-7144
   841d4:	d9c02417 	ldw	r7,144(sp)
   841d8:	383fea26 	beq	r7,zero,84184 <_dtoa_r+0xbc>
   841dc:	b88000c7 	ldb	r2,3(r23)
   841e0:	10016d1e 	bne	r2,zero,84798 <_dtoa_r+0x6d0>
   841e4:	b88000c4 	addi	r2,r23,3
   841e8:	d8c02417 	ldw	r3,144(sp)
   841ec:	18800015 	stw	r2,0(r3)
   841f0:	003fe406 	br	84184 <_dtoa_r+0xbc>
   841f4:	04600034 	movhi	r17,32768
   841f8:	8c7fffc4 	addi	r17,r17,-1
   841fc:	9462703a 	and	r17,r18,r17
   84200:	00800044 	movi	r2,1
   84204:	98800015 	stw	r2,0(r19)
   84208:	8825883a 	mov	r18,r17
   8420c:	003fcb06 	br	8413c <_dtoa_r+0x74>
   84210:	d9400317 	ldw	r5,12(sp)
   84214:	9028d53a 	srli	r20,r18,20
   84218:	d8800204 	addi	r2,sp,8
   8421c:	d8800015 	stw	r2,0(sp)
   84220:	8009883a 	mov	r4,r16
   84224:	880d883a 	mov	r6,r17
   84228:	d9c00104 	addi	r7,sp,4
   8422c:	00881d40 	call	881d4 <__d2b>
   84230:	a501ffcc 	andi	r20,r20,2047
   84234:	1039883a 	mov	fp,r2
   84238:	a001591e 	bne	r20,zero,847a0 <_dtoa_r+0x6d8>
   8423c:	dd400217 	ldw	r21,8(sp)
   84240:	dd000117 	ldw	r20,4(sp)
   84244:	00befbc4 	movi	r2,-1041
   84248:	ad29883a 	add	r20,r21,r20
   8424c:	a082d216 	blt	r20,r2,84d98 <_dtoa_r+0xcd0>
   84250:	d8c00317 	ldw	r3,12(sp)
   84254:	013f0384 	movi	r4,-1010
   84258:	2509c83a 	sub	r4,r4,r20
   8425c:	a0810484 	addi	r2,r20,1042
   84260:	9124983a 	sll	r18,r18,r4
   84264:	1884d83a 	srl	r2,r3,r2
   84268:	9088b03a 	or	r4,r18,r2
   8426c:	008ab040 	call	8ab04 <__floatunsidf>
   84270:	1009883a 	mov	r4,r2
   84274:	017f8434 	movhi	r5,65040
   84278:	00800044 	movi	r2,1
   8427c:	194b883a 	add	r5,r3,r5
   84280:	a53fffc4 	addi	r20,r20,-1
   84284:	d8800f15 	stw	r2,60(sp)
   84288:	000d883a 	mov	r6,zero
   8428c:	01cffe34 	movhi	r7,16376
   84290:	008a2880 	call	8a288 <__subdf3>
   84294:	1009883a 	mov	r4,r2
   84298:	180b883a 	mov	r5,r3
   8429c:	0198dbf4 	movhi	r6,25455
   842a0:	3190d844 	addi	r6,r6,17249
   842a4:	01cff4f4 	movhi	r7,16339
   842a8:	39e1e9c4 	addi	r7,r7,-30809
   842ac:	008a2e80 	call	8a2e8 <__muldf3>
   842b0:	180b883a 	mov	r5,r3
   842b4:	01a2d874 	movhi	r6,35681
   842b8:	31b22cc4 	addi	r6,r6,-14157
   842bc:	01cff1f4 	movhi	r7,16327
   842c0:	39e28a04 	addi	r7,r7,-30168
   842c4:	1009883a 	mov	r4,r2
   842c8:	008a2340 	call	8a234 <__adddf3>
   842cc:	a009883a 	mov	r4,r20
   842d0:	1027883a 	mov	r19,r2
   842d4:	1825883a 	mov	r18,r3
   842d8:	008a95c0 	call	8a95c <__floatsidf>
   842dc:	1009883a 	mov	r4,r2
   842e0:	180b883a 	mov	r5,r3
   842e4:	019427f4 	movhi	r6,20639
   842e8:	319e7ec4 	addi	r6,r6,31227
   842ec:	01cff4f4 	movhi	r7,16339
   842f0:	39d104c4 	addi	r7,r7,17427
   842f4:	008a2e80 	call	8a2e8 <__muldf3>
   842f8:	9809883a 	mov	r4,r19
   842fc:	900b883a 	mov	r5,r18
   84300:	100d883a 	mov	r6,r2
   84304:	180f883a 	mov	r7,r3
   84308:	008a2340 	call	8a234 <__adddf3>
   8430c:	1009883a 	mov	r4,r2
   84310:	180b883a 	mov	r5,r3
   84314:	1027883a 	mov	r19,r2
   84318:	1825883a 	mov	r18,r3
   8431c:	008aa300 	call	8aa30 <__fixdfsi>
   84320:	9809883a 	mov	r4,r19
   84324:	900b883a 	mov	r5,r18
   84328:	000d883a 	mov	r6,zero
   8432c:	000f883a 	mov	r7,zero
   84330:	d8800615 	stw	r2,24(sp)
   84334:	008a9000 	call	8a900 <__ltdf2>
   84338:	10027e16 	blt	r2,zero,84d34 <_dtoa_r+0xc6c>
   8433c:	d8c00617 	ldw	r3,24(sp)
   84340:	00800584 	movi	r2,22
   84344:	10c26c36 	bltu	r2,r3,84cf8 <_dtoa_r+0xc30>
   84348:	180490fa 	slli	r2,r3,3
   8434c:	00c00274 	movhi	r3,9
   84350:	18f92c04 	addi	r3,r3,-6992
   84354:	d9800317 	ldw	r6,12(sp)
   84358:	1885883a 	add	r2,r3,r2
   8435c:	11000017 	ldw	r4,0(r2)
   84360:	11400117 	ldw	r5,4(r2)
   84364:	880f883a 	mov	r7,r17
   84368:	008a8380 	call	8a838 <__gtdf2>
   8436c:	00828f0e 	bge	zero,r2,84dac <_dtoa_r+0xce4>
   84370:	d8800617 	ldw	r2,24(sp)
   84374:	d8000d15 	stw	zero,52(sp)
   84378:	10bfffc4 	addi	r2,r2,-1
   8437c:	d8800615 	stw	r2,24(sp)
   84380:	ad29c83a 	sub	r20,r21,r20
   84384:	a53fffc4 	addi	r20,r20,-1
   84388:	a0026616 	blt	r20,zero,84d24 <_dtoa_r+0xc5c>
   8438c:	dd000715 	stw	r20,28(sp)
   84390:	d8000815 	stw	zero,32(sp)
   84394:	d8800617 	ldw	r2,24(sp)
   84398:	10025a16 	blt	r2,zero,84d04 <_dtoa_r+0xc3c>
   8439c:	d8c00717 	ldw	r3,28(sp)
   843a0:	d8800b15 	stw	r2,44(sp)
   843a4:	d8000a15 	stw	zero,40(sp)
   843a8:	1887883a 	add	r3,r3,r2
   843ac:	d8c00715 	stw	r3,28(sp)
   843b0:	d9c00417 	ldw	r7,16(sp)
   843b4:	00800244 	movi	r2,9
   843b8:	11c10536 	bltu	r2,r7,847d0 <_dtoa_r+0x708>
   843bc:	00800144 	movi	r2,5
   843c0:	11c4c60e 	bge	r2,r7,856dc <_dtoa_r+0x1614>
   843c4:	39ffff04 	addi	r7,r7,-4
   843c8:	d9c00415 	stw	r7,16(sp)
   843cc:	0027883a 	mov	r19,zero
   843d0:	d9c00417 	ldw	r7,16(sp)
   843d4:	008000c4 	movi	r2,3
   843d8:	3883a226 	beq	r7,r2,85264 <_dtoa_r+0x119c>
   843dc:	11c2bc16 	blt	r2,r7,84ed0 <_dtoa_r+0xe08>
   843e0:	00800084 	movi	r2,2
   843e4:	3880fb1e 	bne	r7,r2,847d4 <_dtoa_r+0x70c>
   843e8:	d8000c15 	stw	zero,48(sp)
   843ec:	d9002117 	ldw	r4,132(sp)
   843f0:	0103ae0e 	bge	zero,r4,852ac <_dtoa_r+0x11e4>
   843f4:	2025883a 	mov	r18,r4
   843f8:	d9000e15 	stw	r4,56(sp)
   843fc:	d9000915 	stw	r4,36(sp)
   84400:	80001115 	stw	zero,68(r16)
   84404:	008005c4 	movi	r2,23
   84408:	1484b22e 	bgeu	r2,r18,856d4 <_dtoa_r+0x160c>
   8440c:	00c00044 	movi	r3,1
   84410:	00800104 	movi	r2,4
   84414:	1085883a 	add	r2,r2,r2
   84418:	11000504 	addi	r4,r2,20
   8441c:	180b883a 	mov	r5,r3
   84420:	18c00044 	addi	r3,r3,1
   84424:	913ffb2e 	bgeu	r18,r4,84414 <_dtoa_r+0x34c>
   84428:	81401115 	stw	r5,68(r16)
   8442c:	8009883a 	mov	r4,r16
   84430:	00874e00 	call	874e0 <_Balloc>
   84434:	102f883a 	mov	r23,r2
   84438:	80801015 	stw	r2,64(r16)
   8443c:	00800384 	movi	r2,14
   84440:	1480f036 	bltu	r2,r18,84804 <_dtoa_r+0x73c>
   84444:	9800ef26 	beq	r19,zero,84804 <_dtoa_r+0x73c>
   84448:	d8800617 	ldw	r2,24(sp)
   8444c:	00839c0e 	bge	zero,r2,852c0 <_dtoa_r+0x11f8>
   84450:	d8c00617 	ldw	r3,24(sp)
   84454:	108003cc 	andi	r2,r2,15
   84458:	100490fa 	slli	r2,r2,3
   8445c:	182bd13a 	srai	r21,r3,4
   84460:	00c00274 	movhi	r3,9
   84464:	18f92c04 	addi	r3,r3,-6992
   84468:	1885883a 	add	r2,r3,r2
   8446c:	a8c0040c 	andi	r3,r21,16
   84470:	12800017 	ldw	r10,0(r2)
   84474:	15800117 	ldw	r22,4(r2)
   84478:	18038726 	beq	r3,zero,85298 <_dtoa_r+0x11d0>
   8447c:	00800274 	movhi	r2,9
   84480:	10b92204 	addi	r2,r2,-7032
   84484:	11800817 	ldw	r6,32(r2)
   84488:	11c00917 	ldw	r7,36(r2)
   8448c:	d9000317 	ldw	r4,12(sp)
   84490:	880b883a 	mov	r5,r17
   84494:	da801515 	stw	r10,84(sp)
   84498:	008a5cc0 	call	8a5cc <__divdf3>
   8449c:	da801517 	ldw	r10,84(sp)
   844a0:	d8801015 	stw	r2,64(sp)
   844a4:	1829883a 	mov	r20,r3
   844a8:	ad4003cc 	andi	r21,r21,15
   844ac:	048000c4 	movi	r18,3
   844b0:	a8001126 	beq	r21,zero,844f8 <_dtoa_r+0x430>
   844b4:	04c00274 	movhi	r19,9
   844b8:	9cf92204 	addi	r19,r19,-7032
   844bc:	5005883a 	mov	r2,r10
   844c0:	b007883a 	mov	r3,r22
   844c4:	a980004c 	andi	r6,r21,1
   844c8:	1009883a 	mov	r4,r2
   844cc:	a82bd07a 	srai	r21,r21,1
   844d0:	180b883a 	mov	r5,r3
   844d4:	30000426 	beq	r6,zero,844e8 <_dtoa_r+0x420>
   844d8:	99800017 	ldw	r6,0(r19)
   844dc:	99c00117 	ldw	r7,4(r19)
   844e0:	94800044 	addi	r18,r18,1
   844e4:	008a2e80 	call	8a2e8 <__muldf3>
   844e8:	9cc00204 	addi	r19,r19,8
   844ec:	a83ff51e 	bne	r21,zero,844c4 <_dtoa_r+0x3fc>
   844f0:	1015883a 	mov	r10,r2
   844f4:	182d883a 	mov	r22,r3
   844f8:	d9001017 	ldw	r4,64(sp)
   844fc:	a00b883a 	mov	r5,r20
   84500:	500d883a 	mov	r6,r10
   84504:	b00f883a 	mov	r7,r22
   84508:	008a5cc0 	call	8a5cc <__divdf3>
   8450c:	1027883a 	mov	r19,r2
   84510:	1829883a 	mov	r20,r3
   84514:	d8c00d17 	ldw	r3,52(sp)
   84518:	18000626 	beq	r3,zero,84534 <_dtoa_r+0x46c>
   8451c:	9809883a 	mov	r4,r19
   84520:	a00b883a 	mov	r5,r20
   84524:	000d883a 	mov	r6,zero
   84528:	01cffc34 	movhi	r7,16368
   8452c:	008a9000 	call	8a900 <__ltdf2>
   84530:	10040e16 	blt	r2,zero,8556c <_dtoa_r+0x14a4>
   84534:	9009883a 	mov	r4,r18
   84538:	008a95c0 	call	8a95c <__floatsidf>
   8453c:	1009883a 	mov	r4,r2
   84540:	180b883a 	mov	r5,r3
   84544:	980d883a 	mov	r6,r19
   84548:	a00f883a 	mov	r7,r20
   8454c:	008a2e80 	call	8a2e8 <__muldf3>
   84550:	1009883a 	mov	r4,r2
   84554:	180b883a 	mov	r5,r3
   84558:	000d883a 	mov	r6,zero
   8455c:	01d00734 	movhi	r7,16412
   84560:	008a2340 	call	8a234 <__adddf3>
   84564:	057f3034 	movhi	r21,64704
   84568:	1d6b883a 	add	r21,r3,r21
   8456c:	d8c00917 	ldw	r3,36(sp)
   84570:	1025883a 	mov	r18,r2
   84574:	18031f26 	beq	r3,zero,851f4 <_dtoa_r+0x112c>
   84578:	d8800617 	ldw	r2,24(sp)
   8457c:	dac00917 	ldw	r11,36(sp)
   84580:	d8801315 	stw	r2,76(sp)
   84584:	d8c00c17 	ldw	r3,48(sp)
   84588:	18039026 	beq	r3,zero,853cc <_dtoa_r+0x1304>
   8458c:	58bfffc4 	addi	r2,r11,-1
   84590:	100490fa 	slli	r2,r2,3
   84594:	00c00274 	movhi	r3,9
   84598:	18f92c04 	addi	r3,r3,-6992
   8459c:	0009883a 	mov	r4,zero
   845a0:	1885883a 	add	r2,r3,r2
   845a4:	11800017 	ldw	r6,0(r2)
   845a8:	11c00117 	ldw	r7,4(r2)
   845ac:	014ff834 	movhi	r5,16352
   845b0:	dac01615 	stw	r11,88(sp)
   845b4:	008a5cc0 	call	8a5cc <__divdf3>
   845b8:	900d883a 	mov	r6,r18
   845bc:	a80f883a 	mov	r7,r21
   845c0:	1009883a 	mov	r4,r2
   845c4:	180b883a 	mov	r5,r3
   845c8:	008a2880 	call	8a288 <__subdf3>
   845cc:	a00b883a 	mov	r5,r20
   845d0:	9809883a 	mov	r4,r19
   845d4:	182b883a 	mov	r21,r3
   845d8:	d8801015 	stw	r2,64(sp)
   845dc:	008aa300 	call	8aa30 <__fixdfsi>
   845e0:	1009883a 	mov	r4,r2
   845e4:	d8801515 	stw	r2,84(sp)
   845e8:	008a95c0 	call	8a95c <__floatsidf>
   845ec:	9809883a 	mov	r4,r19
   845f0:	a00b883a 	mov	r5,r20
   845f4:	100d883a 	mov	r6,r2
   845f8:	180f883a 	mov	r7,r3
   845fc:	008a2880 	call	8a288 <__subdf3>
   84600:	da401517 	ldw	r9,84(sp)
   84604:	d9001017 	ldw	r4,64(sp)
   84608:	a80b883a 	mov	r5,r21
   8460c:	4d000c04 	addi	r20,r9,48
   84610:	bd000005 	stb	r20,0(r23)
   84614:	100d883a 	mov	r6,r2
   84618:	180f883a 	mov	r7,r3
   8461c:	bd800044 	addi	r22,r23,1
   84620:	1025883a 	mov	r18,r2
   84624:	1827883a 	mov	r19,r3
   84628:	008a8380 	call	8a838 <__gtdf2>
   8462c:	00842216 	blt	zero,r2,856b8 <_dtoa_r+0x15f0>
   84630:	0009883a 	mov	r4,zero
   84634:	014ffc34 	movhi	r5,16368
   84638:	900d883a 	mov	r6,r18
   8463c:	980f883a 	mov	r7,r19
   84640:	008a2880 	call	8a288 <__subdf3>
   84644:	d9001017 	ldw	r4,64(sp)
   84648:	a80b883a 	mov	r5,r21
   8464c:	100d883a 	mov	r6,r2
   84650:	180f883a 	mov	r7,r3
   84654:	008a8380 	call	8a838 <__gtdf2>
   84658:	dac01617 	ldw	r11,88(sp)
   8465c:	00841316 	blt	zero,r2,856ac <_dtoa_r+0x15e4>
   84660:	00800044 	movi	r2,1
   84664:	12c0670e 	bge	r2,r11,84804 <_dtoa_r+0x73c>
   84668:	bad7883a 	add	r11,r23,r11
   8466c:	df001115 	stw	fp,68(sp)
   84670:	dc401215 	stw	r17,72(sp)
   84674:	5839883a 	mov	fp,r11
   84678:	dc401017 	ldw	r17,64(sp)
   8467c:	00000806 	br	846a0 <_dtoa_r+0x5d8>
   84680:	008a2880 	call	8a288 <__subdf3>
   84684:	1009883a 	mov	r4,r2
   84688:	180b883a 	mov	r5,r3
   8468c:	880d883a 	mov	r6,r17
   84690:	a80f883a 	mov	r7,r21
   84694:	008a9000 	call	8a900 <__ltdf2>
   84698:	1003ee16 	blt	r2,zero,85654 <_dtoa_r+0x158c>
   8469c:	b703f126 	beq	r22,fp,85664 <_dtoa_r+0x159c>
   846a0:	8809883a 	mov	r4,r17
   846a4:	a80b883a 	mov	r5,r21
   846a8:	000d883a 	mov	r6,zero
   846ac:	01d00934 	movhi	r7,16420
   846b0:	008a2e80 	call	8a2e8 <__muldf3>
   846b4:	000d883a 	mov	r6,zero
   846b8:	01d00934 	movhi	r7,16420
   846bc:	9009883a 	mov	r4,r18
   846c0:	980b883a 	mov	r5,r19
   846c4:	1023883a 	mov	r17,r2
   846c8:	182b883a 	mov	r21,r3
   846cc:	008a2e80 	call	8a2e8 <__muldf3>
   846d0:	180b883a 	mov	r5,r3
   846d4:	1009883a 	mov	r4,r2
   846d8:	1825883a 	mov	r18,r3
   846dc:	1027883a 	mov	r19,r2
   846e0:	008aa300 	call	8aa30 <__fixdfsi>
   846e4:	1009883a 	mov	r4,r2
   846e8:	1029883a 	mov	r20,r2
   846ec:	008a95c0 	call	8a95c <__floatsidf>
   846f0:	9809883a 	mov	r4,r19
   846f4:	900b883a 	mov	r5,r18
   846f8:	100d883a 	mov	r6,r2
   846fc:	180f883a 	mov	r7,r3
   84700:	008a2880 	call	8a288 <__subdf3>
   84704:	a5000c04 	addi	r20,r20,48
   84708:	b5000005 	stb	r20,0(r22)
   8470c:	1009883a 	mov	r4,r2
   84710:	180b883a 	mov	r5,r3
   84714:	880d883a 	mov	r6,r17
   84718:	a80f883a 	mov	r7,r21
   8471c:	1025883a 	mov	r18,r2
   84720:	1827883a 	mov	r19,r3
   84724:	008a9000 	call	8a900 <__ltdf2>
   84728:	b5800044 	addi	r22,r22,1
   8472c:	0009883a 	mov	r4,zero
   84730:	014ffc34 	movhi	r5,16368
   84734:	900d883a 	mov	r6,r18
   84738:	980f883a 	mov	r7,r19
   8473c:	103fd00e 	bge	r2,zero,84680 <_dtoa_r+0x5b8>
   84740:	d9001317 	ldw	r4,76(sp)
   84744:	df001117 	ldw	fp,68(sp)
   84748:	d9000615 	stw	r4,24(sp)
   8474c:	8009883a 	mov	r4,r16
   84750:	e00b883a 	mov	r5,fp
   84754:	00875880 	call	87588 <_Bfree>
   84758:	d9c00617 	ldw	r7,24(sp)
   8475c:	d8c02217 	ldw	r3,136(sp)
   84760:	d9002417 	ldw	r4,144(sp)
   84764:	b0000005 	stb	zero,0(r22)
   84768:	38800044 	addi	r2,r7,1
   8476c:	18800015 	stw	r2,0(r3)
   84770:	203e8426 	beq	r4,zero,84184 <_dtoa_r+0xbc>
   84774:	25800015 	stw	r22,0(r4)
   84778:	003e8206 	br	84184 <_dtoa_r+0xbc>
   8477c:	00800434 	movhi	r2,16
   84780:	10bfffc4 	addi	r2,r2,-1
   84784:	90a4703a 	and	r18,r18,r2
   84788:	903e901e 	bne	r18,zero,841cc <_dtoa_r+0x104>
   8478c:	05c00274 	movhi	r23,9
   84790:	bdf90304 	addi	r23,r23,-7156
   84794:	003e8f06 	br	841d4 <_dtoa_r+0x10c>
   84798:	b8800204 	addi	r2,r23,8
   8479c:	003e9206 	br	841e8 <_dtoa_r+0x120>
   847a0:	01400434 	movhi	r5,16
   847a4:	297fffc4 	addi	r5,r5,-1
   847a8:	894a703a 	and	r5,r17,r5
   847ac:	d9000317 	ldw	r4,12(sp)
   847b0:	294ffc34 	orhi	r5,r5,16368
   847b4:	a53f0044 	addi	r20,r20,-1023
   847b8:	dd400217 	ldw	r21,8(sp)
   847bc:	d8000f15 	stw	zero,60(sp)
   847c0:	003eb106 	br	84288 <_dtoa_r+0x1c0>
   847c4:	05c00274 	movhi	r23,9
   847c8:	bdf8fa04 	addi	r23,r23,-7192
   847cc:	003e6d06 	br	84184 <_dtoa_r+0xbc>
   847d0:	d8000415 	stw	zero,16(sp)
   847d4:	80001115 	stw	zero,68(r16)
   847d8:	8009883a 	mov	r4,r16
   847dc:	000b883a 	mov	r5,zero
   847e0:	00874e00 	call	874e0 <_Balloc>
   847e4:	01ffffc4 	movi	r7,-1
   847e8:	102f883a 	mov	r23,r2
   847ec:	80801015 	stw	r2,64(r16)
   847f0:	00800044 	movi	r2,1
   847f4:	d9c00915 	stw	r7,36(sp)
   847f8:	d8002115 	stw	zero,132(sp)
   847fc:	d9c00e15 	stw	r7,56(sp)
   84800:	d8800c15 	stw	r2,48(sp)
   84804:	d8800117 	ldw	r2,4(sp)
   84808:	10008b16 	blt	r2,zero,84a38 <_dtoa_r+0x970>
   8480c:	d9000617 	ldw	r4,24(sp)
   84810:	00c00384 	movi	r3,14
   84814:	19008816 	blt	r3,r4,84a38 <_dtoa_r+0x970>
   84818:	200490fa 	slli	r2,r4,3
   8481c:	d9c02117 	ldw	r7,132(sp)
   84820:	00c00274 	movhi	r3,9
   84824:	18f92c04 	addi	r3,r3,-6992
   84828:	1885883a 	add	r2,r3,r2
   8482c:	14800017 	ldw	r18,0(r2)
   84830:	14c00117 	ldw	r19,4(r2)
   84834:	3801c916 	blt	r7,zero,84f5c <_dtoa_r+0xe94>
   84838:	d9000317 	ldw	r4,12(sp)
   8483c:	900d883a 	mov	r6,r18
   84840:	980f883a 	mov	r7,r19
   84844:	880b883a 	mov	r5,r17
   84848:	008a5cc0 	call	8a5cc <__divdf3>
   8484c:	180b883a 	mov	r5,r3
   84850:	1009883a 	mov	r4,r2
   84854:	008aa300 	call	8aa30 <__fixdfsi>
   84858:	1009883a 	mov	r4,r2
   8485c:	102b883a 	mov	r21,r2
   84860:	008a95c0 	call	8a95c <__floatsidf>
   84864:	1009883a 	mov	r4,r2
   84868:	180b883a 	mov	r5,r3
   8486c:	900d883a 	mov	r6,r18
   84870:	980f883a 	mov	r7,r19
   84874:	008a2e80 	call	8a2e8 <__muldf3>
   84878:	d9000317 	ldw	r4,12(sp)
   8487c:	880b883a 	mov	r5,r17
   84880:	100d883a 	mov	r6,r2
   84884:	180f883a 	mov	r7,r3
   84888:	008a2880 	call	8a288 <__subdf3>
   8488c:	d9c00917 	ldw	r7,36(sp)
   84890:	1009883a 	mov	r4,r2
   84894:	a8800c04 	addi	r2,r21,48
   84898:	b8800005 	stb	r2,0(r23)
   8489c:	01800044 	movi	r6,1
   848a0:	180b883a 	mov	r5,r3
   848a4:	2005883a 	mov	r2,r4
   848a8:	bd800044 	addi	r22,r23,1
   848ac:	39803726 	beq	r7,r6,8498c <_dtoa_r+0x8c4>
   848b0:	000d883a 	mov	r6,zero
   848b4:	01d00934 	movhi	r7,16420
   848b8:	008a2e80 	call	8a2e8 <__muldf3>
   848bc:	1009883a 	mov	r4,r2
   848c0:	180b883a 	mov	r5,r3
   848c4:	000d883a 	mov	r6,zero
   848c8:	000f883a 	mov	r7,zero
   848cc:	1029883a 	mov	r20,r2
   848d0:	1823883a 	mov	r17,r3
   848d4:	008a7800 	call	8a780 <__eqdf2>
   848d8:	103f9c26 	beq	r2,zero,8474c <_dtoa_r+0x684>
   848dc:	dd400917 	ldw	r21,36(sp)
   848e0:	dc000415 	stw	r16,16(sp)
   848e4:	00000906 	br	8490c <_dtoa_r+0x844>
   848e8:	008a2e80 	call	8a2e8 <__muldf3>
   848ec:	1009883a 	mov	r4,r2
   848f0:	180b883a 	mov	r5,r3
   848f4:	000d883a 	mov	r6,zero
   848f8:	000f883a 	mov	r7,zero
   848fc:	1029883a 	mov	r20,r2
   84900:	1823883a 	mov	r17,r3
   84904:	008a7800 	call	8a780 <__eqdf2>
   84908:	10022926 	beq	r2,zero,851b0 <_dtoa_r+0x10e8>
   8490c:	900d883a 	mov	r6,r18
   84910:	980f883a 	mov	r7,r19
   84914:	a009883a 	mov	r4,r20
   84918:	880b883a 	mov	r5,r17
   8491c:	008a5cc0 	call	8a5cc <__divdf3>
   84920:	180b883a 	mov	r5,r3
   84924:	1009883a 	mov	r4,r2
   84928:	008aa300 	call	8aa30 <__fixdfsi>
   8492c:	1009883a 	mov	r4,r2
   84930:	1021883a 	mov	r16,r2
   84934:	008a95c0 	call	8a95c <__floatsidf>
   84938:	1009883a 	mov	r4,r2
   8493c:	180b883a 	mov	r5,r3
   84940:	900d883a 	mov	r6,r18
   84944:	980f883a 	mov	r7,r19
   84948:	008a2e80 	call	8a2e8 <__muldf3>
   8494c:	a009883a 	mov	r4,r20
   84950:	880b883a 	mov	r5,r17
   84954:	100d883a 	mov	r6,r2
   84958:	180f883a 	mov	r7,r3
   8495c:	008a2880 	call	8a288 <__subdf3>
   84960:	82400c04 	addi	r9,r16,48
   84964:	b2400005 	stb	r9,0(r22)
   84968:	b5800044 	addi	r22,r22,1
   8496c:	b5d3c83a 	sub	r9,r22,r23
   84970:	000d883a 	mov	r6,zero
   84974:	01d00934 	movhi	r7,16420
   84978:	1009883a 	mov	r4,r2
   8497c:	180b883a 	mov	r5,r3
   84980:	aa7fd91e 	bne	r21,r9,848e8 <_dtoa_r+0x820>
   84984:	802b883a 	mov	r21,r16
   84988:	dc000417 	ldw	r16,16(sp)
   8498c:	1009883a 	mov	r4,r2
   84990:	180b883a 	mov	r5,r3
   84994:	100d883a 	mov	r6,r2
   84998:	180f883a 	mov	r7,r3
   8499c:	008a2340 	call	8a234 <__adddf3>
   849a0:	9009883a 	mov	r4,r18
   849a4:	980b883a 	mov	r5,r19
   849a8:	100d883a 	mov	r6,r2
   849ac:	180f883a 	mov	r7,r3
   849b0:	1023883a 	mov	r17,r2
   849b4:	1829883a 	mov	r20,r3
   849b8:	008a9000 	call	8a900 <__ltdf2>
   849bc:	10000816 	blt	r2,zero,849e0 <_dtoa_r+0x918>
   849c0:	9009883a 	mov	r4,r18
   849c4:	980b883a 	mov	r5,r19
   849c8:	880d883a 	mov	r6,r17
   849cc:	a00f883a 	mov	r7,r20
   849d0:	008a7800 	call	8a780 <__eqdf2>
   849d4:	103f5d1e 	bne	r2,zero,8474c <_dtoa_r+0x684>
   849d8:	ad40004c 	andi	r21,r21,1
   849dc:	a83f5b26 	beq	r21,zero,8474c <_dtoa_r+0x684>
   849e0:	b53fffc3 	ldbu	r20,-1(r22)
   849e4:	b0ffff84 	addi	r3,r22,-2
   849e8:	01400e44 	movi	r5,57
   849ec:	00000306 	br	849fc <_dtoa_r+0x934>
   849f0:	1d000003 	ldbu	r20,0(r3)
   849f4:	102d883a 	mov	r22,r2
   849f8:	18ffffc4 	addi	r3,r3,-1
   849fc:	a1003fcc 	andi	r4,r20,255
   84a00:	2100201c 	xori	r4,r4,128
   84a04:	213fe004 	addi	r4,r4,-128
   84a08:	b0bfffc4 	addi	r2,r22,-1
   84a0c:	2142ca1e 	bne	r4,r5,85538 <_dtoa_r+0x1470>
   84a10:	b8bff71e 	bne	r23,r2,849f0 <_dtoa_r+0x928>
   84a14:	d8800617 	ldw	r2,24(sp)
   84a18:	05000c44 	movi	r20,49
   84a1c:	10800044 	addi	r2,r2,1
   84a20:	d8800615 	stw	r2,24(sp)
   84a24:	00800c04 	movi	r2,48
   84a28:	b8800005 	stb	r2,0(r23)
   84a2c:	b805883a 	mov	r2,r23
   84a30:	15000005 	stb	r20,0(r2)
   84a34:	003f4506 	br	8474c <_dtoa_r+0x684>
   84a38:	d9c00c17 	ldw	r7,48(sp)
   84a3c:	3800c926 	beq	r7,zero,84d64 <_dtoa_r+0xc9c>
   84a40:	d9c00417 	ldw	r7,16(sp)
   84a44:	00c00044 	movi	r3,1
   84a48:	19c16c0e 	bge	r3,r7,84ffc <_dtoa_r+0xf34>
   84a4c:	d9000917 	ldw	r4,36(sp)
   84a50:	d9c00a17 	ldw	r7,40(sp)
   84a54:	24ffffc4 	addi	r19,r4,-1
   84a58:	3cc20716 	blt	r7,r19,85278 <_dtoa_r+0x11b0>
   84a5c:	3ce7c83a 	sub	r19,r7,r19
   84a60:	d9c00917 	ldw	r7,36(sp)
   84a64:	3802ae16 	blt	r7,zero,85520 <_dtoa_r+0x1458>
   84a68:	dc800817 	ldw	r18,32(sp)
   84a6c:	d8800917 	ldw	r2,36(sp)
   84a70:	d8c00817 	ldw	r3,32(sp)
   84a74:	d9c00717 	ldw	r7,28(sp)
   84a78:	8009883a 	mov	r4,r16
   84a7c:	1887883a 	add	r3,r3,r2
   84a80:	388f883a 	add	r7,r7,r2
   84a84:	01400044 	movi	r5,1
   84a88:	d8c00815 	stw	r3,32(sp)
   84a8c:	d9c00715 	stw	r7,28(sp)
   84a90:	00879100 	call	87910 <__i2b>
   84a94:	102b883a 	mov	r21,r2
   84a98:	90000a26 	beq	r18,zero,84ac4 <_dtoa_r+0x9fc>
   84a9c:	d8800717 	ldw	r2,28(sp)
   84aa0:	0080080e 	bge	zero,r2,84ac4 <_dtoa_r+0x9fc>
   84aa4:	90812b16 	blt	r18,r2,84f54 <_dtoa_r+0xe8c>
   84aa8:	d8c00817 	ldw	r3,32(sp)
   84aac:	d9000717 	ldw	r4,28(sp)
   84ab0:	90a5c83a 	sub	r18,r18,r2
   84ab4:	1887c83a 	sub	r3,r3,r2
   84ab8:	2089c83a 	sub	r4,r4,r2
   84abc:	d8c00815 	stw	r3,32(sp)
   84ac0:	d9000715 	stw	r4,28(sp)
   84ac4:	d9c00a17 	ldw	r7,40(sp)
   84ac8:	01c0140e 	bge	zero,r7,84b1c <_dtoa_r+0xa54>
   84acc:	d8800c17 	ldw	r2,48(sp)
   84ad0:	1001de26 	beq	r2,zero,8524c <_dtoa_r+0x1184>
   84ad4:	04c00e0e 	bge	zero,r19,84b10 <_dtoa_r+0xa48>
   84ad8:	a80b883a 	mov	r5,r21
   84adc:	8009883a 	mov	r4,r16
   84ae0:	980d883a 	mov	r6,r19
   84ae4:	0087ba40 	call	87ba4 <__pow5mult>
   84ae8:	e00d883a 	mov	r6,fp
   84aec:	8009883a 	mov	r4,r16
   84af0:	100b883a 	mov	r5,r2
   84af4:	102b883a 	mov	r21,r2
   84af8:	008794c0 	call	8794c <__multiply>
   84afc:	1029883a 	mov	r20,r2
   84b00:	e00b883a 	mov	r5,fp
   84b04:	8009883a 	mov	r4,r16
   84b08:	00875880 	call	87588 <_Bfree>
   84b0c:	a039883a 	mov	fp,r20
   84b10:	d8c00a17 	ldw	r3,40(sp)
   84b14:	1ccdc83a 	sub	r6,r3,r19
   84b18:	3001291e 	bne	r6,zero,84fc0 <_dtoa_r+0xef8>
   84b1c:	8009883a 	mov	r4,r16
   84b20:	01400044 	movi	r5,1
   84b24:	00879100 	call	87910 <__i2b>
   84b28:	d9000b17 	ldw	r4,44(sp)
   84b2c:	1029883a 	mov	r20,r2
   84b30:	0100050e 	bge	zero,r4,84b48 <_dtoa_r+0xa80>
   84b34:	d9800b17 	ldw	r6,44(sp)
   84b38:	8009883a 	mov	r4,r16
   84b3c:	100b883a 	mov	r5,r2
   84b40:	0087ba40 	call	87ba4 <__pow5mult>
   84b44:	1029883a 	mov	r20,r2
   84b48:	d9c00417 	ldw	r7,16(sp)
   84b4c:	00800044 	movi	r2,1
   84b50:	11c0f00e 	bge	r2,r7,84f14 <_dtoa_r+0xe4c>
   84b54:	0023883a 	mov	r17,zero
   84b58:	d8800b17 	ldw	r2,44(sp)
   84b5c:	1001741e 	bne	r2,zero,85130 <_dtoa_r+0x1068>
   84b60:	00800044 	movi	r2,1
   84b64:	d8c00717 	ldw	r3,28(sp)
   84b68:	10c5883a 	add	r2,r2,r3
   84b6c:	108007cc 	andi	r2,r2,31
   84b70:	10008026 	beq	r2,zero,84d74 <_dtoa_r+0xcac>
   84b74:	01000804 	movi	r4,32
   84b78:	2089c83a 	sub	r4,r4,r2
   84b7c:	00c00104 	movi	r3,4
   84b80:	1902d00e 	bge	r3,r4,856c4 <_dtoa_r+0x15fc>
   84b84:	d9000817 	ldw	r4,32(sp)
   84b88:	d9c00717 	ldw	r7,28(sp)
   84b8c:	00c00704 	movi	r3,28
   84b90:	1885c83a 	sub	r2,r3,r2
   84b94:	2089883a 	add	r4,r4,r2
   84b98:	388f883a 	add	r7,r7,r2
   84b9c:	d9000815 	stw	r4,32(sp)
   84ba0:	90a5883a 	add	r18,r18,r2
   84ba4:	d9c00715 	stw	r7,28(sp)
   84ba8:	d9c00817 	ldw	r7,32(sp)
   84bac:	01c0050e 	bge	zero,r7,84bc4 <_dtoa_r+0xafc>
   84bb0:	e00b883a 	mov	r5,fp
   84bb4:	8009883a 	mov	r4,r16
   84bb8:	380d883a 	mov	r6,r7
   84bbc:	0087cd00 	call	87cd0 <__lshift>
   84bc0:	1039883a 	mov	fp,r2
   84bc4:	d8800717 	ldw	r2,28(sp)
   84bc8:	0080050e 	bge	zero,r2,84be0 <_dtoa_r+0xb18>
   84bcc:	a00b883a 	mov	r5,r20
   84bd0:	8009883a 	mov	r4,r16
   84bd4:	100d883a 	mov	r6,r2
   84bd8:	0087cd00 	call	87cd0 <__lshift>
   84bdc:	1029883a 	mov	r20,r2
   84be0:	d8c00d17 	ldw	r3,52(sp)
   84be4:	1801401e 	bne	r3,zero,850e8 <_dtoa_r+0x1020>
   84be8:	d8800917 	ldw	r2,36(sp)
   84bec:	00815a0e 	bge	zero,r2,85158 <_dtoa_r+0x1090>
   84bf0:	d8c00c17 	ldw	r3,48(sp)
   84bf4:	18006f1e 	bne	r3,zero,84db4 <_dtoa_r+0xcec>
   84bf8:	b823883a 	mov	r17,r23
   84bfc:	dc800917 	ldw	r18,36(sp)
   84c00:	00000206 	br	84c0c <_dtoa_r+0xb44>
   84c04:	00875b00 	call	875b0 <__multadd>
   84c08:	1039883a 	mov	fp,r2
   84c0c:	e009883a 	mov	r4,fp
   84c10:	a00b883a 	mov	r5,r20
   84c14:	0083e8c0 	call	83e8c <quorem>
   84c18:	10800c04 	addi	r2,r2,48
   84c1c:	88800005 	stb	r2,0(r17)
   84c20:	8c400044 	addi	r17,r17,1
   84c24:	8dc7c83a 	sub	r3,r17,r23
   84c28:	8009883a 	mov	r4,r16
   84c2c:	e00b883a 	mov	r5,fp
   84c30:	01800284 	movi	r6,10
   84c34:	000f883a 	mov	r7,zero
   84c38:	1cbff216 	blt	r3,r18,84c04 <_dtoa_r+0xb3c>
   84c3c:	dd800917 	ldw	r22,36(sp)
   84c40:	1007883a 	mov	r3,r2
   84c44:	05823a0e 	bge	zero,r22,85530 <_dtoa_r+0x1468>
   84c48:	bdad883a 	add	r22,r23,r22
   84c4c:	0023883a 	mov	r17,zero
   84c50:	e00b883a 	mov	r5,fp
   84c54:	01800044 	movi	r6,1
   84c58:	8009883a 	mov	r4,r16
   84c5c:	d8c01515 	stw	r3,84(sp)
   84c60:	0087cd00 	call	87cd0 <__lshift>
   84c64:	1009883a 	mov	r4,r2
   84c68:	a00b883a 	mov	r5,r20
   84c6c:	1039883a 	mov	fp,r2
   84c70:	0087e2c0 	call	87e2c <__mcmp>
   84c74:	d8c01517 	ldw	r3,84(sp)
   84c78:	0080d60e 	bge	zero,r2,84fd4 <_dtoa_r+0xf0c>
   84c7c:	b13fffc3 	ldbu	r4,-1(r22)
   84c80:	b0ffff84 	addi	r3,r22,-2
   84c84:	01800e44 	movi	r6,57
   84c88:	00000306 	br	84c98 <_dtoa_r+0xbd0>
   84c8c:	19000003 	ldbu	r4,0(r3)
   84c90:	102d883a 	mov	r22,r2
   84c94:	18ffffc4 	addi	r3,r3,-1
   84c98:	21403fcc 	andi	r5,r4,255
   84c9c:	2940201c 	xori	r5,r5,128
   84ca0:	297fe004 	addi	r5,r5,-128
   84ca4:	b0bfffc4 	addi	r2,r22,-1
   84ca8:	2981a71e 	bne	r5,r6,85348 <_dtoa_r+0x1280>
   84cac:	b8bff71e 	bne	r23,r2,84c8c <_dtoa_r+0xbc4>
   84cb0:	d8800617 	ldw	r2,24(sp)
   84cb4:	10800044 	addi	r2,r2,1
   84cb8:	d8800615 	stw	r2,24(sp)
   84cbc:	00800c44 	movi	r2,49
   84cc0:	b8800005 	stb	r2,0(r23)
   84cc4:	8009883a 	mov	r4,r16
   84cc8:	a00b883a 	mov	r5,r20
   84ccc:	00875880 	call	87588 <_Bfree>
   84cd0:	a83e9e26 	beq	r21,zero,8474c <_dtoa_r+0x684>
   84cd4:	88000426 	beq	r17,zero,84ce8 <_dtoa_r+0xc20>
   84cd8:	8d400326 	beq	r17,r21,84ce8 <_dtoa_r+0xc20>
   84cdc:	8009883a 	mov	r4,r16
   84ce0:	880b883a 	mov	r5,r17
   84ce4:	00875880 	call	87588 <_Bfree>
   84ce8:	8009883a 	mov	r4,r16
   84cec:	a80b883a 	mov	r5,r21
   84cf0:	00875880 	call	87588 <_Bfree>
   84cf4:	003e9506 	br	8474c <_dtoa_r+0x684>
   84cf8:	00c00044 	movi	r3,1
   84cfc:	d8c00d15 	stw	r3,52(sp)
   84d00:	003d9f06 	br	84380 <_dtoa_r+0x2b8>
   84d04:	d9000817 	ldw	r4,32(sp)
   84d08:	d8800617 	ldw	r2,24(sp)
   84d0c:	d8000b15 	stw	zero,44(sp)
   84d10:	2089c83a 	sub	r4,r4,r2
   84d14:	0087c83a 	sub	r3,zero,r2
   84d18:	d9000815 	stw	r4,32(sp)
   84d1c:	d8c00a15 	stw	r3,40(sp)
   84d20:	003da306 	br	843b0 <_dtoa_r+0x2e8>
   84d24:	0529c83a 	sub	r20,zero,r20
   84d28:	dd000815 	stw	r20,32(sp)
   84d2c:	d8000715 	stw	zero,28(sp)
   84d30:	003d9806 	br	84394 <_dtoa_r+0x2cc>
   84d34:	d9000617 	ldw	r4,24(sp)
   84d38:	008a95c0 	call	8a95c <__floatsidf>
   84d3c:	1009883a 	mov	r4,r2
   84d40:	180b883a 	mov	r5,r3
   84d44:	980d883a 	mov	r6,r19
   84d48:	900f883a 	mov	r7,r18
   84d4c:	008a7dc0 	call	8a7dc <__nedf2>
   84d50:	103d7a26 	beq	r2,zero,8433c <_dtoa_r+0x274>
   84d54:	d8800617 	ldw	r2,24(sp)
   84d58:	10bfffc4 	addi	r2,r2,-1
   84d5c:	d8800615 	stw	r2,24(sp)
   84d60:	003d7606 	br	8433c <_dtoa_r+0x274>
   84d64:	dcc00a17 	ldw	r19,40(sp)
   84d68:	dc800817 	ldw	r18,32(sp)
   84d6c:	002b883a 	mov	r21,zero
   84d70:	003f4906 	br	84a98 <_dtoa_r+0x9d0>
   84d74:	00800704 	movi	r2,28
   84d78:	d8c00817 	ldw	r3,32(sp)
   84d7c:	d9000717 	ldw	r4,28(sp)
   84d80:	90a5883a 	add	r18,r18,r2
   84d84:	1887883a 	add	r3,r3,r2
   84d88:	2089883a 	add	r4,r4,r2
   84d8c:	d8c00815 	stw	r3,32(sp)
   84d90:	d9000715 	stw	r4,28(sp)
   84d94:	003f8406 	br	84ba8 <_dtoa_r+0xae0>
   84d98:	d9c00317 	ldw	r7,12(sp)
   84d9c:	013efb84 	movi	r4,-1042
   84da0:	2509c83a 	sub	r4,r4,r20
   84da4:	3908983a 	sll	r4,r7,r4
   84da8:	003d3006 	br	8426c <_dtoa_r+0x1a4>
   84dac:	d8000d15 	stw	zero,52(sp)
   84db0:	003d7306 	br	84380 <_dtoa_r+0x2b8>
   84db4:	0480050e 	bge	zero,r18,84dcc <_dtoa_r+0xd04>
   84db8:	a80b883a 	mov	r5,r21
   84dbc:	8009883a 	mov	r4,r16
   84dc0:	900d883a 	mov	r6,r18
   84dc4:	0087cd00 	call	87cd0 <__lshift>
   84dc8:	102b883a 	mov	r21,r2
   84dcc:	8801611e 	bne	r17,zero,85354 <_dtoa_r+0x128c>
   84dd0:	a827883a 	mov	r19,r21
   84dd4:	d8c00317 	ldw	r3,12(sp)
   84dd8:	d9000917 	ldw	r4,36(sp)
   84ddc:	b8bfffc4 	addi	r2,r23,-1
   84de0:	18c0004c 	andi	r3,r3,1
   84de4:	1105883a 	add	r2,r2,r4
   84de8:	b825883a 	mov	r18,r23
   84dec:	d8800515 	stw	r2,20(sp)
   84df0:	a823883a 	mov	r17,r21
   84df4:	d8c00315 	stw	r3,12(sp)
   84df8:	ddc00715 	stw	r23,28(sp)
   84dfc:	e009883a 	mov	r4,fp
   84e00:	a00b883a 	mov	r5,r20
   84e04:	0083e8c0 	call	83e8c <quorem>
   84e08:	e009883a 	mov	r4,fp
   84e0c:	880b883a 	mov	r5,r17
   84e10:	102d883a 	mov	r22,r2
   84e14:	0087e2c0 	call	87e2c <__mcmp>
   84e18:	980d883a 	mov	r6,r19
   84e1c:	8009883a 	mov	r4,r16
   84e20:	a00b883a 	mov	r5,r20
   84e24:	102b883a 	mov	r21,r2
   84e28:	0087e840 	call	87e84 <__mdiff>
   84e2c:	100d883a 	mov	r6,r2
   84e30:	10800317 	ldw	r2,12(r2)
   84e34:	b5c00c04 	addi	r23,r22,48
   84e38:	10008c26 	beq	r2,zero,8506c <_dtoa_r+0xfa4>
   84e3c:	8009883a 	mov	r4,r16
   84e40:	300b883a 	mov	r5,r6
   84e44:	00875880 	call	87588 <_Bfree>
   84e48:	00800044 	movi	r2,1
   84e4c:	a8007116 	blt	r21,zero,85014 <_dtoa_r+0xf4c>
   84e50:	a800041e 	bne	r21,zero,84e64 <_dtoa_r+0xd9c>
   84e54:	d9c00417 	ldw	r7,16(sp)
   84e58:	3800021e 	bne	r7,zero,84e64 <_dtoa_r+0xd9c>
   84e5c:	d8c00317 	ldw	r3,12(sp)
   84e60:	18006c26 	beq	r3,zero,85014 <_dtoa_r+0xf4c>
   84e64:	00814c16 	blt	zero,r2,85398 <_dtoa_r+0x12d0>
   84e68:	d8c00517 	ldw	r3,20(sp)
   84e6c:	95400044 	addi	r21,r18,1
   84e70:	95c00005 	stb	r23,0(r18)
   84e74:	a82d883a 	mov	r22,r21
   84e78:	90c14d26 	beq	r18,r3,853b0 <_dtoa_r+0x12e8>
   84e7c:	e00b883a 	mov	r5,fp
   84e80:	8009883a 	mov	r4,r16
   84e84:	01800284 	movi	r6,10
   84e88:	000f883a 	mov	r7,zero
   84e8c:	00875b00 	call	875b0 <__multadd>
   84e90:	1039883a 	mov	fp,r2
   84e94:	8cc08b26 	beq	r17,r19,850c4 <_dtoa_r+0xffc>
   84e98:	880b883a 	mov	r5,r17
   84e9c:	01800284 	movi	r6,10
   84ea0:	000f883a 	mov	r7,zero
   84ea4:	8009883a 	mov	r4,r16
   84ea8:	00875b00 	call	875b0 <__multadd>
   84eac:	980b883a 	mov	r5,r19
   84eb0:	8009883a 	mov	r4,r16
   84eb4:	01800284 	movi	r6,10
   84eb8:	000f883a 	mov	r7,zero
   84ebc:	1023883a 	mov	r17,r2
   84ec0:	00875b00 	call	875b0 <__multadd>
   84ec4:	1027883a 	mov	r19,r2
   84ec8:	a825883a 	mov	r18,r21
   84ecc:	003fcb06 	br	84dfc <_dtoa_r+0xd34>
   84ed0:	d9c00417 	ldw	r7,16(sp)
   84ed4:	00800104 	movi	r2,4
   84ed8:	3880e426 	beq	r7,r2,8526c <_dtoa_r+0x11a4>
   84edc:	00800144 	movi	r2,5
   84ee0:	38be3c1e 	bne	r7,r2,847d4 <_dtoa_r+0x70c>
   84ee4:	00c00044 	movi	r3,1
   84ee8:	d8c00c15 	stw	r3,48(sp)
   84eec:	d9c02117 	ldw	r7,132(sp)
   84ef0:	d8800617 	ldw	r2,24(sp)
   84ef4:	388f883a 	add	r7,r7,r2
   84ef8:	3c800044 	addi	r18,r7,1
   84efc:	d9c00e15 	stw	r7,56(sp)
   84f00:	dc800915 	stw	r18,36(sp)
   84f04:	04bd3e16 	blt	zero,r18,84400 <_dtoa_r+0x338>
   84f08:	80001115 	stw	zero,68(r16)
   84f0c:	000b883a 	mov	r5,zero
   84f10:	003d4606 	br	8442c <_dtoa_r+0x364>
   84f14:	d8c00317 	ldw	r3,12(sp)
   84f18:	183f0e1e 	bne	r3,zero,84b54 <_dtoa_r+0xa8c>
   84f1c:	00c00434 	movhi	r3,16
   84f20:	18ffffc4 	addi	r3,r3,-1
   84f24:	88c6703a 	and	r3,r17,r3
   84f28:	183f0a1e 	bne	r3,zero,84b54 <_dtoa_r+0xa8c>
   84f2c:	8c5ffc2c 	andhi	r17,r17,32752
   84f30:	883f0826 	beq	r17,zero,84b54 <_dtoa_r+0xa8c>
   84f34:	d9000817 	ldw	r4,32(sp)
   84f38:	d9c00717 	ldw	r7,28(sp)
   84f3c:	1023883a 	mov	r17,r2
   84f40:	2089883a 	add	r4,r4,r2
   84f44:	388f883a 	add	r7,r7,r2
   84f48:	d9000815 	stw	r4,32(sp)
   84f4c:	d9c00715 	stw	r7,28(sp)
   84f50:	003f0106 	br	84b58 <_dtoa_r+0xa90>
   84f54:	9005883a 	mov	r2,r18
   84f58:	003ed306 	br	84aa8 <_dtoa_r+0x9e0>
   84f5c:	d8800917 	ldw	r2,36(sp)
   84f60:	00be3516 	blt	zero,r2,84838 <_dtoa_r+0x770>
   84f64:	1000b61e 	bne	r2,zero,85240 <_dtoa_r+0x1178>
   84f68:	9009883a 	mov	r4,r18
   84f6c:	980b883a 	mov	r5,r19
   84f70:	000d883a 	mov	r6,zero
   84f74:	01d00534 	movhi	r7,16404
   84f78:	008a2e80 	call	8a2e8 <__muldf3>
   84f7c:	d9800317 	ldw	r6,12(sp)
   84f80:	1009883a 	mov	r4,r2
   84f84:	180b883a 	mov	r5,r3
   84f88:	880f883a 	mov	r7,r17
   84f8c:	008a89c0 	call	8a89c <__gedf2>
   84f90:	0029883a 	mov	r20,zero
   84f94:	002b883a 	mov	r21,zero
   84f98:	10007e16 	blt	r2,zero,85194 <_dtoa_r+0x10cc>
   84f9c:	d8802117 	ldw	r2,132(sp)
   84fa0:	b82d883a 	mov	r22,r23
   84fa4:	0084303a 	nor	r2,zero,r2
   84fa8:	d8800615 	stw	r2,24(sp)
   84fac:	8009883a 	mov	r4,r16
   84fb0:	a00b883a 	mov	r5,r20
   84fb4:	00875880 	call	87588 <_Bfree>
   84fb8:	a83f4b1e 	bne	r21,zero,84ce8 <_dtoa_r+0xc20>
   84fbc:	003de306 	br	8474c <_dtoa_r+0x684>
   84fc0:	e00b883a 	mov	r5,fp
   84fc4:	8009883a 	mov	r4,r16
   84fc8:	0087ba40 	call	87ba4 <__pow5mult>
   84fcc:	1039883a 	mov	fp,r2
   84fd0:	003ed206 	br	84b1c <_dtoa_r+0xa54>
   84fd4:	1000021e 	bne	r2,zero,84fe0 <_dtoa_r+0xf18>
   84fd8:	18c0004c 	andi	r3,r3,1
   84fdc:	183f271e 	bne	r3,zero,84c7c <_dtoa_r+0xbb4>
   84fe0:	01000c04 	movi	r4,48
   84fe4:	00000106 	br	84fec <_dtoa_r+0xf24>
   84fe8:	102d883a 	mov	r22,r2
   84fec:	b0bfffc4 	addi	r2,r22,-1
   84ff0:	10c00007 	ldb	r3,0(r2)
   84ff4:	193ffc26 	beq	r3,r4,84fe8 <_dtoa_r+0xf20>
   84ff8:	003f3206 	br	84cc4 <_dtoa_r+0xbfc>
   84ffc:	d8c00f17 	ldw	r3,60(sp)
   85000:	18015026 	beq	r3,zero,85544 <_dtoa_r+0x147c>
   85004:	10810cc4 	addi	r2,r2,1075
   85008:	dcc00a17 	ldw	r19,40(sp)
   8500c:	dc800817 	ldw	r18,32(sp)
   85010:	003e9706 	br	84a70 <_dtoa_r+0x9a8>
   85014:	b807883a 	mov	r3,r23
   85018:	182b883a 	mov	r21,r3
   8501c:	ddc00717 	ldw	r23,28(sp)
   85020:	00800e0e 	bge	zero,r2,8505c <_dtoa_r+0xf94>
   85024:	e00b883a 	mov	r5,fp
   85028:	01800044 	movi	r6,1
   8502c:	8009883a 	mov	r4,r16
   85030:	d8c01515 	stw	r3,84(sp)
   85034:	0087cd00 	call	87cd0 <__lshift>
   85038:	1009883a 	mov	r4,r2
   8503c:	a00b883a 	mov	r5,r20
   85040:	1039883a 	mov	fp,r2
   85044:	0087e2c0 	call	87e2c <__mcmp>
   85048:	d8c01517 	ldw	r3,84(sp)
   8504c:	0081880e 	bge	zero,r2,85670 <_dtoa_r+0x15a8>
   85050:	00800e44 	movi	r2,57
   85054:	b0c00c44 	addi	r3,r22,49
   85058:	a8816326 	beq	r21,r2,855e8 <_dtoa_r+0x1520>
   8505c:	90c00005 	stb	r3,0(r18)
   85060:	95800044 	addi	r22,r18,1
   85064:	982b883a 	mov	r21,r19
   85068:	003f1606 	br	84cc4 <_dtoa_r+0xbfc>
   8506c:	300b883a 	mov	r5,r6
   85070:	e009883a 	mov	r4,fp
   85074:	d9801515 	stw	r6,84(sp)
   85078:	0087e2c0 	call	87e2c <__mcmp>
   8507c:	d9801517 	ldw	r6,84(sp)
   85080:	8009883a 	mov	r4,r16
   85084:	d8801515 	stw	r2,84(sp)
   85088:	300b883a 	mov	r5,r6
   8508c:	00875880 	call	87588 <_Bfree>
   85090:	d8801517 	ldw	r2,84(sp)
   85094:	103f6d1e 	bne	r2,zero,84e4c <_dtoa_r+0xd84>
   85098:	d9c00417 	ldw	r7,16(sp)
   8509c:	383f6b1e 	bne	r7,zero,84e4c <_dtoa_r+0xd84>
   850a0:	d8c00317 	ldw	r3,12(sp)
   850a4:	183f691e 	bne	r3,zero,84e4c <_dtoa_r+0xd84>
   850a8:	b807883a 	mov	r3,r23
   850ac:	00800e44 	movi	r2,57
   850b0:	ddc00717 	ldw	r23,28(sp)
   850b4:	18814c26 	beq	r3,r2,855e8 <_dtoa_r+0x1520>
   850b8:	057fe80e 	bge	zero,r21,8505c <_dtoa_r+0xf94>
   850bc:	b0c00c44 	addi	r3,r22,49
   850c0:	003fe606 	br	8505c <_dtoa_r+0xf94>
   850c4:	880b883a 	mov	r5,r17
   850c8:	8009883a 	mov	r4,r16
   850cc:	01800284 	movi	r6,10
   850d0:	000f883a 	mov	r7,zero
   850d4:	00875b00 	call	875b0 <__multadd>
   850d8:	1023883a 	mov	r17,r2
   850dc:	1027883a 	mov	r19,r2
   850e0:	a825883a 	mov	r18,r21
   850e4:	003f4506 	br	84dfc <_dtoa_r+0xd34>
   850e8:	e009883a 	mov	r4,fp
   850ec:	a00b883a 	mov	r5,r20
   850f0:	0087e2c0 	call	87e2c <__mcmp>
   850f4:	103ebc0e 	bge	r2,zero,84be8 <_dtoa_r+0xb20>
   850f8:	e00b883a 	mov	r5,fp
   850fc:	8009883a 	mov	r4,r16
   85100:	01800284 	movi	r6,10
   85104:	000f883a 	mov	r7,zero
   85108:	00875b00 	call	875b0 <__multadd>
   8510c:	1039883a 	mov	fp,r2
   85110:	d8800617 	ldw	r2,24(sp)
   85114:	d8c00c17 	ldw	r3,48(sp)
   85118:	10bfffc4 	addi	r2,r2,-1
   8511c:	d8800615 	stw	r2,24(sp)
   85120:	1801571e 	bne	r3,zero,85680 <_dtoa_r+0x15b8>
   85124:	d9c00e17 	ldw	r7,56(sp)
   85128:	d9c00915 	stw	r7,36(sp)
   8512c:	003eae06 	br	84be8 <_dtoa_r+0xb20>
   85130:	a0800417 	ldw	r2,16(r20)
   85134:	10800104 	addi	r2,r2,4
   85138:	1085883a 	add	r2,r2,r2
   8513c:	1085883a 	add	r2,r2,r2
   85140:	a085883a 	add	r2,r20,r2
   85144:	11000017 	ldw	r4,0(r2)
   85148:	00877f80 	call	877f8 <__hi0bits>
   8514c:	00c00804 	movi	r3,32
   85150:	1885c83a 	sub	r2,r3,r2
   85154:	003e8306 	br	84b64 <_dtoa_r+0xa9c>
   85158:	d9c00417 	ldw	r7,16(sp)
   8515c:	00800084 	movi	r2,2
   85160:	11fea30e 	bge	r2,r7,84bf0 <_dtoa_r+0xb28>
   85164:	d8800917 	ldw	r2,36(sp)
   85168:	103f8c1e 	bne	r2,zero,84f9c <_dtoa_r+0xed4>
   8516c:	a00b883a 	mov	r5,r20
   85170:	8009883a 	mov	r4,r16
   85174:	01800144 	movi	r6,5
   85178:	000f883a 	mov	r7,zero
   8517c:	00875b00 	call	875b0 <__multadd>
   85180:	e009883a 	mov	r4,fp
   85184:	100b883a 	mov	r5,r2
   85188:	1029883a 	mov	r20,r2
   8518c:	0087e2c0 	call	87e2c <__mcmp>
   85190:	00bf820e 	bge	zero,r2,84f9c <_dtoa_r+0xed4>
   85194:	00800c44 	movi	r2,49
   85198:	b8800005 	stb	r2,0(r23)
   8519c:	d8800617 	ldw	r2,24(sp)
   851a0:	bd800044 	addi	r22,r23,1
   851a4:	10800044 	addi	r2,r2,1
   851a8:	d8800615 	stw	r2,24(sp)
   851ac:	003f7f06 	br	84fac <_dtoa_r+0xee4>
   851b0:	dc000417 	ldw	r16,16(sp)
   851b4:	003d6506 	br	8474c <_dtoa_r+0x684>
   851b8:	9009883a 	mov	r4,r18
   851bc:	008a95c0 	call	8a95c <__floatsidf>
   851c0:	1009883a 	mov	r4,r2
   851c4:	180b883a 	mov	r5,r3
   851c8:	980d883a 	mov	r6,r19
   851cc:	a00f883a 	mov	r7,r20
   851d0:	008a2e80 	call	8a2e8 <__muldf3>
   851d4:	1009883a 	mov	r4,r2
   851d8:	180b883a 	mov	r5,r3
   851dc:	000d883a 	mov	r6,zero
   851e0:	01d00734 	movhi	r7,16412
   851e4:	008a2340 	call	8a234 <__adddf3>
   851e8:	057f3034 	movhi	r21,64704
   851ec:	1025883a 	mov	r18,r2
   851f0:	1d6b883a 	add	r21,r3,r21
   851f4:	9809883a 	mov	r4,r19
   851f8:	a00b883a 	mov	r5,r20
   851fc:	000d883a 	mov	r6,zero
   85200:	01d00534 	movhi	r7,16404
   85204:	008a2880 	call	8a288 <__subdf3>
   85208:	1009883a 	mov	r4,r2
   8520c:	180b883a 	mov	r5,r3
   85210:	900d883a 	mov	r6,r18
   85214:	a80f883a 	mov	r7,r21
   85218:	1027883a 	mov	r19,r2
   8521c:	1829883a 	mov	r20,r3
   85220:	008a8380 	call	8a838 <__gtdf2>
   85224:	00806616 	blt	zero,r2,853c0 <_dtoa_r+0x12f8>
   85228:	a9e0003c 	xorhi	r7,r21,32768
   8522c:	9809883a 	mov	r4,r19
   85230:	a00b883a 	mov	r5,r20
   85234:	900d883a 	mov	r6,r18
   85238:	008a9000 	call	8a900 <__ltdf2>
   8523c:	103d710e 	bge	r2,zero,84804 <_dtoa_r+0x73c>
   85240:	0029883a 	mov	r20,zero
   85244:	002b883a 	mov	r21,zero
   85248:	003f5406 	br	84f9c <_dtoa_r+0xed4>
   8524c:	d9800a17 	ldw	r6,40(sp)
   85250:	e00b883a 	mov	r5,fp
   85254:	8009883a 	mov	r4,r16
   85258:	0087ba40 	call	87ba4 <__pow5mult>
   8525c:	1039883a 	mov	fp,r2
   85260:	003e2e06 	br	84b1c <_dtoa_r+0xa54>
   85264:	d8000c15 	stw	zero,48(sp)
   85268:	003f2006 	br	84eec <_dtoa_r+0xe24>
   8526c:	00800044 	movi	r2,1
   85270:	d8800c15 	stw	r2,48(sp)
   85274:	003c5d06 	br	843ec <_dtoa_r+0x324>
   85278:	d8c00a17 	ldw	r3,40(sp)
   8527c:	d9000b17 	ldw	r4,44(sp)
   85280:	dcc00a15 	stw	r19,40(sp)
   85284:	98c5c83a 	sub	r2,r19,r3
   85288:	2089883a 	add	r4,r4,r2
   8528c:	d9000b15 	stw	r4,44(sp)
   85290:	0027883a 	mov	r19,zero
   85294:	003df206 	br	84a60 <_dtoa_r+0x998>
   85298:	d9000317 	ldw	r4,12(sp)
   8529c:	8829883a 	mov	r20,r17
   852a0:	04800084 	movi	r18,2
   852a4:	d9001015 	stw	r4,64(sp)
   852a8:	003c8106 	br	844b0 <_dtoa_r+0x3e8>
   852ac:	04800044 	movi	r18,1
   852b0:	dc800e15 	stw	r18,56(sp)
   852b4:	dc800915 	stw	r18,36(sp)
   852b8:	dc802115 	stw	r18,132(sp)
   852bc:	003f1206 	br	84f08 <_dtoa_r+0xe40>
   852c0:	d8800617 	ldw	r2,24(sp)
   852c4:	00abc83a 	sub	r21,zero,r2
   852c8:	a800a426 	beq	r21,zero,8555c <_dtoa_r+0x1494>
   852cc:	a88003cc 	andi	r2,r21,15
   852d0:	100490fa 	slli	r2,r2,3
   852d4:	00c00274 	movhi	r3,9
   852d8:	18f92c04 	addi	r3,r3,-6992
   852dc:	d9000317 	ldw	r4,12(sp)
   852e0:	1885883a 	add	r2,r3,r2
   852e4:	11800017 	ldw	r6,0(r2)
   852e8:	11c00117 	ldw	r7,4(r2)
   852ec:	a82bd13a 	srai	r21,r21,4
   852f0:	880b883a 	mov	r5,r17
   852f4:	008a2e80 	call	8a2e8 <__muldf3>
   852f8:	1027883a 	mov	r19,r2
   852fc:	1829883a 	mov	r20,r3
   85300:	a800e826 	beq	r21,zero,856a4 <_dtoa_r+0x15dc>
   85304:	05800274 	movhi	r22,9
   85308:	b5b92204 	addi	r22,r22,-7032
   8530c:	04800084 	movi	r18,2
   85310:	a980004c 	andi	r6,r21,1
   85314:	1009883a 	mov	r4,r2
   85318:	a82bd07a 	srai	r21,r21,1
   8531c:	180b883a 	mov	r5,r3
   85320:	30000426 	beq	r6,zero,85334 <_dtoa_r+0x126c>
   85324:	b1800017 	ldw	r6,0(r22)
   85328:	b1c00117 	ldw	r7,4(r22)
   8532c:	94800044 	addi	r18,r18,1
   85330:	008a2e80 	call	8a2e8 <__muldf3>
   85334:	b5800204 	addi	r22,r22,8
   85338:	a83ff51e 	bne	r21,zero,85310 <_dtoa_r+0x1248>
   8533c:	1027883a 	mov	r19,r2
   85340:	1829883a 	mov	r20,r3
   85344:	003c7306 	br	84514 <_dtoa_r+0x44c>
   85348:	21000044 	addi	r4,r4,1
   8534c:	11000005 	stb	r4,0(r2)
   85350:	003e5c06 	br	84cc4 <_dtoa_r+0xbfc>
   85354:	a9400117 	ldw	r5,4(r21)
   85358:	8009883a 	mov	r4,r16
   8535c:	00874e00 	call	874e0 <_Balloc>
   85360:	a9800417 	ldw	r6,16(r21)
   85364:	11000304 	addi	r4,r2,12
   85368:	a9400304 	addi	r5,r21,12
   8536c:	31800084 	addi	r6,r6,2
   85370:	318d883a 	add	r6,r6,r6
   85374:	318d883a 	add	r6,r6,r6
   85378:	1023883a 	mov	r17,r2
   8537c:	00871380 	call	87138 <memcpy>
   85380:	8009883a 	mov	r4,r16
   85384:	880b883a 	mov	r5,r17
   85388:	01800044 	movi	r6,1
   8538c:	0087cd00 	call	87cd0 <__lshift>
   85390:	1027883a 	mov	r19,r2
   85394:	003e8f06 	br	84dd4 <_dtoa_r+0xd0c>
   85398:	b807883a 	mov	r3,r23
   8539c:	00800e44 	movi	r2,57
   853a0:	ddc00717 	ldw	r23,28(sp)
   853a4:	18809026 	beq	r3,r2,855e8 <_dtoa_r+0x1520>
   853a8:	18c00044 	addi	r3,r3,1
   853ac:	003f2b06 	br	8505c <_dtoa_r+0xf94>
   853b0:	b807883a 	mov	r3,r23
   853b4:	982b883a 	mov	r21,r19
   853b8:	ddc00717 	ldw	r23,28(sp)
   853bc:	003e2406 	br	84c50 <_dtoa_r+0xb88>
   853c0:	0029883a 	mov	r20,zero
   853c4:	002b883a 	mov	r21,zero
   853c8:	003f7206 	br	85194 <_dtoa_r+0x10cc>
   853cc:	593fffc4 	addi	r4,r11,-1
   853d0:	200490fa 	slli	r2,r4,3
   853d4:	00c00274 	movhi	r3,9
   853d8:	18f92c04 	addi	r3,r3,-6992
   853dc:	d9001015 	stw	r4,64(sp)
   853e0:	1885883a 	add	r2,r3,r2
   853e4:	11000017 	ldw	r4,0(r2)
   853e8:	11400117 	ldw	r5,4(r2)
   853ec:	900d883a 	mov	r6,r18
   853f0:	a80f883a 	mov	r7,r21
   853f4:	dac01615 	stw	r11,88(sp)
   853f8:	008a2e80 	call	8a2e8 <__muldf3>
   853fc:	a00b883a 	mov	r5,r20
   85400:	9809883a 	mov	r4,r19
   85404:	d8c01215 	stw	r3,72(sp)
   85408:	d8801115 	stw	r2,68(sp)
   8540c:	008aa300 	call	8aa30 <__fixdfsi>
   85410:	1009883a 	mov	r4,r2
   85414:	1025883a 	mov	r18,r2
   85418:	008a95c0 	call	8a95c <__floatsidf>
   8541c:	9809883a 	mov	r4,r19
   85420:	a00b883a 	mov	r5,r20
   85424:	100d883a 	mov	r6,r2
   85428:	180f883a 	mov	r7,r3
   8542c:	94800c04 	addi	r18,r18,48
   85430:	008a2880 	call	8a288 <__subdf3>
   85434:	bc800005 	stb	r18,0(r23)
   85438:	dac01617 	ldw	r11,88(sp)
   8543c:	102b883a 	mov	r21,r2
   85440:	00800044 	movi	r2,1
   85444:	bd800044 	addi	r22,r23,1
   85448:	1815883a 	mov	r10,r3
   8544c:	58802226 	beq	r11,r2,854d8 <_dtoa_r+0x1410>
   85450:	bad7883a 	add	r11,r23,r11
   85454:	dc001415 	stw	r16,80(sp)
   85458:	a805883a 	mov	r2,r21
   8545c:	b027883a 	mov	r19,r22
   85460:	5821883a 	mov	r16,r11
   85464:	882b883a 	mov	r21,r17
   85468:	000d883a 	mov	r6,zero
   8546c:	01d00934 	movhi	r7,16420
   85470:	1009883a 	mov	r4,r2
   85474:	180b883a 	mov	r5,r3
   85478:	008a2e80 	call	8a2e8 <__muldf3>
   8547c:	180b883a 	mov	r5,r3
   85480:	1009883a 	mov	r4,r2
   85484:	1829883a 	mov	r20,r3
   85488:	1023883a 	mov	r17,r2
   8548c:	008aa300 	call	8aa30 <__fixdfsi>
   85490:	1009883a 	mov	r4,r2
   85494:	1025883a 	mov	r18,r2
   85498:	008a95c0 	call	8a95c <__floatsidf>
   8549c:	8809883a 	mov	r4,r17
   854a0:	a00b883a 	mov	r5,r20
   854a4:	100d883a 	mov	r6,r2
   854a8:	180f883a 	mov	r7,r3
   854ac:	94800c04 	addi	r18,r18,48
   854b0:	008a2880 	call	8a288 <__subdf3>
   854b4:	9cc00044 	addi	r19,r19,1
   854b8:	9cbfffc5 	stb	r18,-1(r19)
   854bc:	9c3fea1e 	bne	r19,r16,85468 <_dtoa_r+0x13a0>
   854c0:	1815883a 	mov	r10,r3
   854c4:	d8c01017 	ldw	r3,64(sp)
   854c8:	dc001417 	ldw	r16,80(sp)
   854cc:	a823883a 	mov	r17,r21
   854d0:	b0ed883a 	add	r22,r22,r3
   854d4:	102b883a 	mov	r21,r2
   854d8:	d9001117 	ldw	r4,68(sp)
   854dc:	d9401217 	ldw	r5,72(sp)
   854e0:	000d883a 	mov	r6,zero
   854e4:	01cff834 	movhi	r7,16352
   854e8:	da801515 	stw	r10,84(sp)
   854ec:	008a2340 	call	8a234 <__adddf3>
   854f0:	da801517 	ldw	r10,84(sp)
   854f4:	1009883a 	mov	r4,r2
   854f8:	180b883a 	mov	r5,r3
   854fc:	500f883a 	mov	r7,r10
   85500:	a80d883a 	mov	r6,r21
   85504:	008a9000 	call	8a900 <__ltdf2>
   85508:	da801517 	ldw	r10,84(sp)
   8550c:	10003b0e 	bge	r2,zero,855fc <_dtoa_r+0x1534>
   85510:	d9c01317 	ldw	r7,76(sp)
   85514:	b53fffc3 	ldbu	r20,-1(r22)
   85518:	d9c00615 	stw	r7,24(sp)
   8551c:	003d3106 	br	849e4 <_dtoa_r+0x91c>
   85520:	d8800817 	ldw	r2,32(sp)
   85524:	11e5c83a 	sub	r18,r2,r7
   85528:	0005883a 	mov	r2,zero
   8552c:	003d5006 	br	84a70 <_dtoa_r+0x9a8>
   85530:	05800044 	movi	r22,1
   85534:	003dc406 	br	84c48 <_dtoa_r+0xb80>
   85538:	a5000044 	addi	r20,r20,1
   8553c:	15000005 	stb	r20,0(r2)
   85540:	003c8206 	br	8474c <_dtoa_r+0x684>
   85544:	d8800217 	ldw	r2,8(sp)
   85548:	00c00d84 	movi	r3,54
   8554c:	dcc00a17 	ldw	r19,40(sp)
   85550:	1885c83a 	sub	r2,r3,r2
   85554:	dc800817 	ldw	r18,32(sp)
   85558:	003d4506 	br	84a70 <_dtoa_r+0x9a8>
   8555c:	dcc00317 	ldw	r19,12(sp)
   85560:	8829883a 	mov	r20,r17
   85564:	04800084 	movi	r18,2
   85568:	003bea06 	br	84514 <_dtoa_r+0x44c>
   8556c:	d9000917 	ldw	r4,36(sp)
   85570:	203f1126 	beq	r4,zero,851b8 <_dtoa_r+0x10f0>
   85574:	d9c00e17 	ldw	r7,56(sp)
   85578:	01fca20e 	bge	zero,r7,84804 <_dtoa_r+0x73c>
   8557c:	a00b883a 	mov	r5,r20
   85580:	9809883a 	mov	r4,r19
   85584:	000d883a 	mov	r6,zero
   85588:	01d00934 	movhi	r7,16420
   8558c:	008a2e80 	call	8a2e8 <__muldf3>
   85590:	91000044 	addi	r4,r18,1
   85594:	1027883a 	mov	r19,r2
   85598:	1829883a 	mov	r20,r3
   8559c:	008a95c0 	call	8a95c <__floatsidf>
   855a0:	9809883a 	mov	r4,r19
   855a4:	a00b883a 	mov	r5,r20
   855a8:	100d883a 	mov	r6,r2
   855ac:	180f883a 	mov	r7,r3
   855b0:	008a2e80 	call	8a2e8 <__muldf3>
   855b4:	1009883a 	mov	r4,r2
   855b8:	180b883a 	mov	r5,r3
   855bc:	000d883a 	mov	r6,zero
   855c0:	01d00734 	movhi	r7,16412
   855c4:	008a2340 	call	8a234 <__adddf3>
   855c8:	1025883a 	mov	r18,r2
   855cc:	d8800617 	ldw	r2,24(sp)
   855d0:	057f3034 	movhi	r21,64704
   855d4:	1d6b883a 	add	r21,r3,r21
   855d8:	10bfffc4 	addi	r2,r2,-1
   855dc:	d8801315 	stw	r2,76(sp)
   855e0:	dac00e17 	ldw	r11,56(sp)
   855e4:	003be706 	br	84584 <_dtoa_r+0x4bc>
   855e8:	01000e44 	movi	r4,57
   855ec:	91000005 	stb	r4,0(r18)
   855f0:	95800044 	addi	r22,r18,1
   855f4:	982b883a 	mov	r21,r19
   855f8:	003da106 	br	84c80 <_dtoa_r+0xbb8>
   855fc:	d9801117 	ldw	r6,68(sp)
   85600:	d9c01217 	ldw	r7,72(sp)
   85604:	0009883a 	mov	r4,zero
   85608:	014ff834 	movhi	r5,16352
   8560c:	da801515 	stw	r10,84(sp)
   85610:	008a2880 	call	8a288 <__subdf3>
   85614:	da801517 	ldw	r10,84(sp)
   85618:	1009883a 	mov	r4,r2
   8561c:	180b883a 	mov	r5,r3
   85620:	a80d883a 	mov	r6,r21
   85624:	500f883a 	mov	r7,r10
   85628:	008a8380 	call	8a838 <__gtdf2>
   8562c:	00bc750e 	bge	zero,r2,84804 <_dtoa_r+0x73c>
   85630:	01000c04 	movi	r4,48
   85634:	00000106 	br	8563c <_dtoa_r+0x1574>
   85638:	102d883a 	mov	r22,r2
   8563c:	b0bfffc4 	addi	r2,r22,-1
   85640:	10c00007 	ldb	r3,0(r2)
   85644:	193ffc26 	beq	r3,r4,85638 <_dtoa_r+0x1570>
   85648:	d8801317 	ldw	r2,76(sp)
   8564c:	d8800615 	stw	r2,24(sp)
   85650:	003c3e06 	br	8474c <_dtoa_r+0x684>
   85654:	d9001317 	ldw	r4,76(sp)
   85658:	df001117 	ldw	fp,68(sp)
   8565c:	d9000615 	stw	r4,24(sp)
   85660:	003ce006 	br	849e4 <_dtoa_r+0x91c>
   85664:	df001117 	ldw	fp,68(sp)
   85668:	dc401217 	ldw	r17,72(sp)
   8566c:	003c6506 	br	84804 <_dtoa_r+0x73c>
   85670:	103e7a1e 	bne	r2,zero,8505c <_dtoa_r+0xf94>
   85674:	1880004c 	andi	r2,r3,1
   85678:	103e7826 	beq	r2,zero,8505c <_dtoa_r+0xf94>
   8567c:	003e7406 	br	85050 <_dtoa_r+0xf88>
   85680:	8009883a 	mov	r4,r16
   85684:	a80b883a 	mov	r5,r21
   85688:	01800284 	movi	r6,10
   8568c:	000f883a 	mov	r7,zero
   85690:	00875b00 	call	875b0 <__multadd>
   85694:	d9000e17 	ldw	r4,56(sp)
   85698:	102b883a 	mov	r21,r2
   8569c:	d9000915 	stw	r4,36(sp)
   856a0:	003d5106 	br	84be8 <_dtoa_r+0xb20>
   856a4:	04800084 	movi	r18,2
   856a8:	003b9a06 	br	84514 <_dtoa_r+0x44c>
   856ac:	d8c01317 	ldw	r3,76(sp)
   856b0:	d8c00615 	stw	r3,24(sp)
   856b4:	003ccb06 	br	849e4 <_dtoa_r+0x91c>
   856b8:	d8c01317 	ldw	r3,76(sp)
   856bc:	d8c00615 	stw	r3,24(sp)
   856c0:	003c2206 	br	8474c <_dtoa_r+0x684>
   856c4:	20fd3826 	beq	r4,r3,84ba8 <_dtoa_r+0xae0>
   856c8:	00c00f04 	movi	r3,60
   856cc:	1885c83a 	sub	r2,r3,r2
   856d0:	003da906 	br	84d78 <_dtoa_r+0xcb0>
   856d4:	000b883a 	mov	r5,zero
   856d8:	003b5406 	br	8442c <_dtoa_r+0x364>
   856dc:	04c00044 	movi	r19,1
   856e0:	003b3b06 	br	843d0 <_dtoa_r+0x308>

000856e4 <_fflush_r>:
   856e4:	defffb04 	addi	sp,sp,-20
   856e8:	dcc00315 	stw	r19,12(sp)
   856ec:	dc400115 	stw	r17,4(sp)
   856f0:	dfc00415 	stw	ra,16(sp)
   856f4:	dc800215 	stw	r18,8(sp)
   856f8:	dc000015 	stw	r16,0(sp)
   856fc:	2027883a 	mov	r19,r4
   85700:	2823883a 	mov	r17,r5
   85704:	20000226 	beq	r4,zero,85710 <_fflush_r+0x2c>
   85708:	20800e17 	ldw	r2,56(r4)
   8570c:	10005726 	beq	r2,zero,8586c <_fflush_r+0x188>
   85710:	8880030b 	ldhu	r2,12(r17)
   85714:	10c0020c 	andi	r3,r2,8
   85718:	18ffffcc 	andi	r3,r3,65535
   8571c:	18e0001c 	xori	r3,r3,32768
   85720:	18e00004 	addi	r3,r3,-32768
   85724:	1800311e 	bne	r3,zero,857ec <_fflush_r+0x108>
   85728:	89000117 	ldw	r4,4(r17)
   8572c:	10c20014 	ori	r3,r2,2048
   85730:	88c0030d 	sth	r3,12(r17)
   85734:	180b883a 	mov	r5,r3
   85738:	0100520e 	bge	zero,r4,85884 <_fflush_r+0x1a0>
   8573c:	88c00a17 	ldw	r3,40(r17)
   85740:	18002226 	beq	r3,zero,857cc <_fflush_r+0xe8>
   85744:	1084000c 	andi	r2,r2,4096
   85748:	10bfffcc 	andi	r2,r2,65535
   8574c:	10a0001c 	xori	r2,r2,32768
   85750:	10a00004 	addi	r2,r2,-32768
   85754:	10004e26 	beq	r2,zero,85890 <_fflush_r+0x1ac>
   85758:	8c001417 	ldw	r16,80(r17)
   8575c:	2940010c 	andi	r5,r5,4
   85760:	297fffcc 	andi	r5,r5,65535
   85764:	2960001c 	xori	r5,r5,32768
   85768:	29600004 	addi	r5,r5,-32768
   8576c:	28000626 	beq	r5,zero,85788 <_fflush_r+0xa4>
   85770:	89000117 	ldw	r4,4(r17)
   85774:	88800c17 	ldw	r2,48(r17)
   85778:	8121c83a 	sub	r16,r16,r4
   8577c:	10000226 	beq	r2,zero,85788 <_fflush_r+0xa4>
   85780:	88800f17 	ldw	r2,60(r17)
   85784:	80a1c83a 	sub	r16,r16,r2
   85788:	89400717 	ldw	r5,28(r17)
   8578c:	9809883a 	mov	r4,r19
   85790:	800d883a 	mov	r6,r16
   85794:	000f883a 	mov	r7,zero
   85798:	183ee83a 	callr	r3
   8579c:	8080281e 	bne	r16,r2,85840 <_fflush_r+0x15c>
   857a0:	8880030b 	ldhu	r2,12(r17)
   857a4:	88c00417 	ldw	r3,16(r17)
   857a8:	88000115 	stw	zero,4(r17)
   857ac:	113dffcc 	andi	r4,r2,63487
   857b0:	1084000c 	andi	r2,r2,4096
   857b4:	10bfffcc 	andi	r2,r2,65535
   857b8:	10a0001c 	xori	r2,r2,32768
   857bc:	8900030d 	sth	r4,12(r17)
   857c0:	88c00015 	stw	r3,0(r17)
   857c4:	10a00004 	addi	r2,r2,-32768
   857c8:	10002c1e 	bne	r2,zero,8587c <_fflush_r+0x198>
   857cc:	0005883a 	mov	r2,zero
   857d0:	dfc00417 	ldw	ra,16(sp)
   857d4:	dcc00317 	ldw	r19,12(sp)
   857d8:	dc800217 	ldw	r18,8(sp)
   857dc:	dc400117 	ldw	r17,4(sp)
   857e0:	dc000017 	ldw	r16,0(sp)
   857e4:	dec00504 	addi	sp,sp,20
   857e8:	f800283a 	ret
   857ec:	8c800417 	ldw	r18,16(r17)
   857f0:	903ff626 	beq	r18,zero,857cc <_fflush_r+0xe8>
   857f4:	8c000017 	ldw	r16,0(r17)
   857f8:	108000cc 	andi	r2,r2,3
   857fc:	8c800015 	stw	r18,0(r17)
   85800:	84a1c83a 	sub	r16,r16,r18
   85804:	10001b1e 	bne	r2,zero,85874 <_fflush_r+0x190>
   85808:	88800517 	ldw	r2,20(r17)
   8580c:	88800215 	stw	r2,8(r17)
   85810:	04000316 	blt	zero,r16,85820 <_fflush_r+0x13c>
   85814:	003fed06 	br	857cc <_fflush_r+0xe8>
   85818:	90a5883a 	add	r18,r18,r2
   8581c:	043feb0e 	bge	zero,r16,857cc <_fflush_r+0xe8>
   85820:	88800917 	ldw	r2,36(r17)
   85824:	89400717 	ldw	r5,28(r17)
   85828:	800f883a 	mov	r7,r16
   8582c:	900d883a 	mov	r6,r18
   85830:	9809883a 	mov	r4,r19
   85834:	103ee83a 	callr	r2
   85838:	80a1c83a 	sub	r16,r16,r2
   8583c:	00bff616 	blt	zero,r2,85818 <_fflush_r+0x134>
   85840:	88c0030b 	ldhu	r3,12(r17)
   85844:	00bfffc4 	movi	r2,-1
   85848:	18c01014 	ori	r3,r3,64
   8584c:	88c0030d 	sth	r3,12(r17)
   85850:	dfc00417 	ldw	ra,16(sp)
   85854:	dcc00317 	ldw	r19,12(sp)
   85858:	dc800217 	ldw	r18,8(sp)
   8585c:	dc400117 	ldw	r17,4(sp)
   85860:	dc000017 	ldw	r16,0(sp)
   85864:	dec00504 	addi	sp,sp,20
   85868:	f800283a 	ret
   8586c:	00859a00 	call	859a0 <__sinit>
   85870:	003fa706 	br	85710 <_fflush_r+0x2c>
   85874:	0005883a 	mov	r2,zero
   85878:	003fe406 	br	8580c <_fflush_r+0x128>
   8587c:	8c001415 	stw	r16,80(r17)
   85880:	003fd206 	br	857cc <_fflush_r+0xe8>
   85884:	88c00f17 	ldw	r3,60(r17)
   85888:	00ffac16 	blt	zero,r3,8573c <_fflush_r+0x58>
   8588c:	003fcf06 	br	857cc <_fflush_r+0xe8>
   85890:	89400717 	ldw	r5,28(r17)
   85894:	9809883a 	mov	r4,r19
   85898:	000d883a 	mov	r6,zero
   8589c:	01c00044 	movi	r7,1
   858a0:	183ee83a 	callr	r3
   858a4:	1021883a 	mov	r16,r2
   858a8:	00bfffc4 	movi	r2,-1
   858ac:	80800326 	beq	r16,r2,858bc <_fflush_r+0x1d8>
   858b0:	8940030b 	ldhu	r5,12(r17)
   858b4:	88c00a17 	ldw	r3,40(r17)
   858b8:	003fa806 	br	8575c <_fflush_r+0x78>
   858bc:	98c00017 	ldw	r3,0(r19)
   858c0:	00800744 	movi	r2,29
   858c4:	18bfde1e 	bne	r3,r2,85840 <_fflush_r+0x15c>
   858c8:	003fc006 	br	857cc <_fflush_r+0xe8>

000858cc <fflush>:
   858cc:	200b883a 	mov	r5,r4
   858d0:	20000426 	beq	r4,zero,858e4 <fflush+0x18>
   858d4:	00800274 	movhi	r2,9
   858d8:	10823c04 	addi	r2,r2,2288
   858dc:	11000017 	ldw	r4,0(r2)
   858e0:	00856e41 	jmpi	856e4 <_fflush_r>
   858e4:	00800274 	movhi	r2,9
   858e8:	10823b04 	addi	r2,r2,2284
   858ec:	11000017 	ldw	r4,0(r2)
   858f0:	01400234 	movhi	r5,8
   858f4:	2955b904 	addi	r5,r5,22244
   858f8:	00865801 	jmpi	86580 <_fwalk_reent>

000858fc <__fp_lock>:
   858fc:	0005883a 	mov	r2,zero
   85900:	f800283a 	ret

00085904 <__fp_unlock>:
   85904:	0005883a 	mov	r2,zero
   85908:	f800283a 	ret

0008590c <_cleanup_r>:
   8590c:	01400274 	movhi	r5,9
   85910:	29642c04 	addi	r5,r5,-28496
   85914:	00864d81 	jmpi	864d8 <_fwalk>

00085918 <__sfmoreglue>:
   85918:	defffc04 	addi	sp,sp,-16
   8591c:	dc800215 	stw	r18,8(sp)
   85920:	2825883a 	mov	r18,r5
   85924:	dc000015 	stw	r16,0(sp)
   85928:	01401704 	movi	r5,92
   8592c:	2021883a 	mov	r16,r4
   85930:	9009883a 	mov	r4,r18
   85934:	dfc00315 	stw	ra,12(sp)
   85938:	dc400115 	stw	r17,4(sp)
   8593c:	0081c900 	call	81c90 <__mulsi3>
   85940:	8009883a 	mov	r4,r16
   85944:	11400304 	addi	r5,r2,12
   85948:	1023883a 	mov	r17,r2
   8594c:	00868bc0 	call	868bc <_malloc_r>
   85950:	1021883a 	mov	r16,r2
   85954:	10000726 	beq	r2,zero,85974 <__sfmoreglue+0x5c>
   85958:	11000304 	addi	r4,r2,12
   8595c:	10000015 	stw	zero,0(r2)
   85960:	14800115 	stw	r18,4(r2)
   85964:	11000215 	stw	r4,8(r2)
   85968:	000b883a 	mov	r5,zero
   8596c:	880d883a 	mov	r6,r17
   85970:	00874040 	call	87404 <memset>
   85974:	8005883a 	mov	r2,r16
   85978:	dfc00317 	ldw	ra,12(sp)
   8597c:	dc800217 	ldw	r18,8(sp)
   85980:	dc400117 	ldw	r17,4(sp)
   85984:	dc000017 	ldw	r16,0(sp)
   85988:	dec00404 	addi	sp,sp,16
   8598c:	f800283a 	ret

00085990 <_cleanup>:
   85990:	00800274 	movhi	r2,9
   85994:	10823b04 	addi	r2,r2,2284
   85998:	11000017 	ldw	r4,0(r2)
   8599c:	008590c1 	jmpi	8590c <_cleanup_r>

000859a0 <__sinit>:
   859a0:	20800e17 	ldw	r2,56(r4)
   859a4:	1000401e 	bne	r2,zero,85aa8 <__sinit+0x108>
   859a8:	21400117 	ldw	r5,4(r4)
   859ac:	01800234 	movhi	r6,8
   859b0:	31964304 	addi	r6,r6,22796
   859b4:	20c00217 	ldw	r3,8(r4)
   859b8:	21800f15 	stw	r6,60(r4)
   859bc:	2080bb04 	addi	r2,r4,748
   859c0:	02400044 	movi	r9,1
   859c4:	018000c4 	movi	r6,3
   859c8:	2180b915 	stw	r6,740(r4)
   859cc:	2080ba15 	stw	r2,744(r4)
   859d0:	22400e15 	stw	r9,56(r4)
   859d4:	20800317 	ldw	r2,12(r4)
   859d8:	2000b815 	stw	zero,736(r4)
   859dc:	02000274 	movhi	r8,9
   859e0:	4222fd04 	addi	r8,r8,-29708
   859e4:	01c00274 	movhi	r7,9
   859e8:	39e31204 	addi	r7,r7,-29624
   859ec:	01800274 	movhi	r6,9
   859f0:	31a33404 	addi	r6,r6,-29488
   859f4:	01000274 	movhi	r4,9
   859f8:	21234b04 	addi	r4,r4,-29396
   859fc:	02800104 	movi	r10,4
   85a00:	28000015 	stw	zero,0(r5)
   85a04:	28000115 	stw	zero,4(r5)
   85a08:	28000215 	stw	zero,8(r5)
   85a0c:	2a80030d 	sth	r10,12(r5)
   85a10:	2800038d 	sth	zero,14(r5)
   85a14:	28000415 	stw	zero,16(r5)
   85a18:	28000515 	stw	zero,20(r5)
   85a1c:	28000615 	stw	zero,24(r5)
   85a20:	29400715 	stw	r5,28(r5)
   85a24:	2a000815 	stw	r8,32(r5)
   85a28:	29c00915 	stw	r7,36(r5)
   85a2c:	29800a15 	stw	r6,40(r5)
   85a30:	29000b15 	stw	r4,44(r5)
   85a34:	01400284 	movi	r5,10
   85a38:	18000015 	stw	zero,0(r3)
   85a3c:	18000115 	stw	zero,4(r3)
   85a40:	18000215 	stw	zero,8(r3)
   85a44:	1940030d 	sth	r5,12(r3)
   85a48:	1a40038d 	sth	r9,14(r3)
   85a4c:	18000415 	stw	zero,16(r3)
   85a50:	18000515 	stw	zero,20(r3)
   85a54:	18000615 	stw	zero,24(r3)
   85a58:	18c00715 	stw	r3,28(r3)
   85a5c:	1a000815 	stw	r8,32(r3)
   85a60:	19c00915 	stw	r7,36(r3)
   85a64:	19800a15 	stw	r6,40(r3)
   85a68:	19000b15 	stw	r4,44(r3)
   85a6c:	00c00484 	movi	r3,18
   85a70:	10c0030d 	sth	r3,12(r2)
   85a74:	00c00084 	movi	r3,2
   85a78:	10000015 	stw	zero,0(r2)
   85a7c:	10000115 	stw	zero,4(r2)
   85a80:	10000215 	stw	zero,8(r2)
   85a84:	10c0038d 	sth	r3,14(r2)
   85a88:	10000415 	stw	zero,16(r2)
   85a8c:	10000515 	stw	zero,20(r2)
   85a90:	10000615 	stw	zero,24(r2)
   85a94:	10800715 	stw	r2,28(r2)
   85a98:	12000815 	stw	r8,32(r2)
   85a9c:	11c00915 	stw	r7,36(r2)
   85aa0:	11800a15 	stw	r6,40(r2)
   85aa4:	11000b15 	stw	r4,44(r2)
   85aa8:	f800283a 	ret

00085aac <__sfp>:
   85aac:	defffc04 	addi	sp,sp,-16
   85ab0:	00800274 	movhi	r2,9
   85ab4:	10823b04 	addi	r2,r2,2284
   85ab8:	dc400115 	stw	r17,4(sp)
   85abc:	14400017 	ldw	r17,0(r2)
   85ac0:	dc800215 	stw	r18,8(sp)
   85ac4:	dfc00315 	stw	ra,12(sp)
   85ac8:	88800e17 	ldw	r2,56(r17)
   85acc:	dc000015 	stw	r16,0(sp)
   85ad0:	2025883a 	mov	r18,r4
   85ad4:	10002826 	beq	r2,zero,85b78 <__sfp+0xcc>
   85ad8:	8c40b804 	addi	r17,r17,736
   85adc:	043fffc4 	movi	r16,-1
   85ae0:	89400117 	ldw	r5,4(r17)
   85ae4:	88800217 	ldw	r2,8(r17)
   85ae8:	297fffc4 	addi	r5,r5,-1
   85aec:	28000a16 	blt	r5,zero,85b18 <__sfp+0x6c>
   85af0:	10c0030f 	ldh	r3,12(r2)
   85af4:	18000c26 	beq	r3,zero,85b28 <__sfp+0x7c>
   85af8:	10c01a04 	addi	r3,r2,104
   85afc:	00000206 	br	85b08 <__sfp+0x5c>
   85b00:	19bfe90f 	ldh	r6,-92(r3)
   85b04:	30000826 	beq	r6,zero,85b28 <__sfp+0x7c>
   85b08:	297fffc4 	addi	r5,r5,-1
   85b0c:	18bffd04 	addi	r2,r3,-12
   85b10:	18c01704 	addi	r3,r3,92
   85b14:	2c3ffa1e 	bne	r5,r16,85b00 <__sfp+0x54>
   85b18:	88800017 	ldw	r2,0(r17)
   85b1c:	10001926 	beq	r2,zero,85b84 <__sfp+0xd8>
   85b20:	1023883a 	mov	r17,r2
   85b24:	003fee06 	br	85ae0 <__sfp+0x34>
   85b28:	00ffffc4 	movi	r3,-1
   85b2c:	10c0038d 	sth	r3,14(r2)
   85b30:	00c00044 	movi	r3,1
   85b34:	10c0030d 	sth	r3,12(r2)
   85b38:	10000015 	stw	zero,0(r2)
   85b3c:	10000215 	stw	zero,8(r2)
   85b40:	10000115 	stw	zero,4(r2)
   85b44:	10000415 	stw	zero,16(r2)
   85b48:	10000515 	stw	zero,20(r2)
   85b4c:	10000615 	stw	zero,24(r2)
   85b50:	10000c15 	stw	zero,48(r2)
   85b54:	10000d15 	stw	zero,52(r2)
   85b58:	10001115 	stw	zero,68(r2)
   85b5c:	10001215 	stw	zero,72(r2)
   85b60:	dfc00317 	ldw	ra,12(sp)
   85b64:	dc800217 	ldw	r18,8(sp)
   85b68:	dc400117 	ldw	r17,4(sp)
   85b6c:	dc000017 	ldw	r16,0(sp)
   85b70:	dec00404 	addi	sp,sp,16
   85b74:	f800283a 	ret
   85b78:	8809883a 	mov	r4,r17
   85b7c:	00859a00 	call	859a0 <__sinit>
   85b80:	003fd506 	br	85ad8 <__sfp+0x2c>
   85b84:	9009883a 	mov	r4,r18
   85b88:	01400104 	movi	r5,4
   85b8c:	00859180 	call	85918 <__sfmoreglue>
   85b90:	88800015 	stw	r2,0(r17)
   85b94:	103fe21e 	bne	r2,zero,85b20 <__sfp+0x74>
   85b98:	00800304 	movi	r2,12
   85b9c:	90800015 	stw	r2,0(r18)
   85ba0:	0005883a 	mov	r2,zero
   85ba4:	003fee06 	br	85b60 <__sfp+0xb4>

00085ba8 <__sfp_lock_acquire>:
   85ba8:	f800283a 	ret

00085bac <__sfp_lock_release>:
   85bac:	f800283a 	ret

00085bb0 <__sinit_lock_acquire>:
   85bb0:	f800283a 	ret

00085bb4 <__sinit_lock_release>:
   85bb4:	f800283a 	ret

00085bb8 <__fp_lock_all>:
   85bb8:	00800274 	movhi	r2,9
   85bbc:	10823c04 	addi	r2,r2,2288
   85bc0:	11000017 	ldw	r4,0(r2)
   85bc4:	01400234 	movhi	r5,8
   85bc8:	29563f04 	addi	r5,r5,22780
   85bcc:	00864d81 	jmpi	864d8 <_fwalk>

00085bd0 <__fp_unlock_all>:
   85bd0:	00800274 	movhi	r2,9
   85bd4:	10823c04 	addi	r2,r2,2288
   85bd8:	11000017 	ldw	r4,0(r2)
   85bdc:	01400234 	movhi	r5,8
   85be0:	29564104 	addi	r5,r5,22788
   85be4:	00864d81 	jmpi	864d8 <_fwalk>

00085be8 <_malloc_trim_r>:
   85be8:	defffb04 	addi	sp,sp,-20
   85bec:	dcc00315 	stw	r19,12(sp)
   85bf0:	dc800215 	stw	r18,8(sp)
   85bf4:	dc400115 	stw	r17,4(sp)
   85bf8:	dc000015 	stw	r16,0(sp)
   85bfc:	2827883a 	mov	r19,r5
   85c00:	dfc00415 	stw	ra,16(sp)
   85c04:	04400274 	movhi	r17,9
   85c08:	8c7cb704 	addi	r17,r17,-3364
   85c0c:	2021883a 	mov	r16,r4
   85c10:	008b9500 	call	8b950 <__malloc_lock>
   85c14:	88800217 	ldw	r2,8(r17)
   85c18:	14800117 	ldw	r18,4(r2)
   85c1c:	00bfff04 	movi	r2,-4
   85c20:	90a4703a 	and	r18,r18,r2
   85c24:	9083fbc4 	addi	r2,r18,4079
   85c28:	14e7c83a 	sub	r19,r2,r19
   85c2c:	9826d33a 	srli	r19,r19,12
   85c30:	0083ffc4 	movi	r2,4095
   85c34:	9cffffc4 	addi	r19,r19,-1
   85c38:	9826933a 	slli	r19,r19,12
   85c3c:	14c0060e 	bge	r2,r19,85c58 <_malloc_trim_r+0x70>
   85c40:	8009883a 	mov	r4,r16
   85c44:	000b883a 	mov	r5,zero
   85c48:	0088b900 	call	88b90 <_sbrk_r>
   85c4c:	88c00217 	ldw	r3,8(r17)
   85c50:	1c87883a 	add	r3,r3,r18
   85c54:	10c00a26 	beq	r2,r3,85c80 <_malloc_trim_r+0x98>
   85c58:	8009883a 	mov	r4,r16
   85c5c:	008b9700 	call	8b970 <__malloc_unlock>
   85c60:	0005883a 	mov	r2,zero
   85c64:	dfc00417 	ldw	ra,16(sp)
   85c68:	dcc00317 	ldw	r19,12(sp)
   85c6c:	dc800217 	ldw	r18,8(sp)
   85c70:	dc400117 	ldw	r17,4(sp)
   85c74:	dc000017 	ldw	r16,0(sp)
   85c78:	dec00504 	addi	sp,sp,20
   85c7c:	f800283a 	ret
   85c80:	8009883a 	mov	r4,r16
   85c84:	04cbc83a 	sub	r5,zero,r19
   85c88:	0088b900 	call	88b90 <_sbrk_r>
   85c8c:	00ffffc4 	movi	r3,-1
   85c90:	10c01326 	beq	r2,r3,85ce0 <_malloc_trim_r+0xf8>
   85c94:	00800274 	movhi	r2,9
   85c98:	108af904 	addi	r2,r2,11236
   85c9c:	11000017 	ldw	r4,0(r2)
   85ca0:	88c00217 	ldw	r3,8(r17)
   85ca4:	94e5c83a 	sub	r18,r18,r19
   85ca8:	94800054 	ori	r18,r18,1
   85cac:	24e7c83a 	sub	r19,r4,r19
   85cb0:	1c800115 	stw	r18,4(r3)
   85cb4:	8009883a 	mov	r4,r16
   85cb8:	14c00015 	stw	r19,0(r2)
   85cbc:	008b9700 	call	8b970 <__malloc_unlock>
   85cc0:	00800044 	movi	r2,1
   85cc4:	dfc00417 	ldw	ra,16(sp)
   85cc8:	dcc00317 	ldw	r19,12(sp)
   85ccc:	dc800217 	ldw	r18,8(sp)
   85cd0:	dc400117 	ldw	r17,4(sp)
   85cd4:	dc000017 	ldw	r16,0(sp)
   85cd8:	dec00504 	addi	sp,sp,20
   85cdc:	f800283a 	ret
   85ce0:	8009883a 	mov	r4,r16
   85ce4:	000b883a 	mov	r5,zero
   85ce8:	0088b900 	call	88b90 <_sbrk_r>
   85cec:	88c00217 	ldw	r3,8(r17)
   85cf0:	014003c4 	movi	r5,15
   85cf4:	10c9c83a 	sub	r4,r2,r3
   85cf8:	293fd70e 	bge	r5,r4,85c58 <_malloc_trim_r+0x70>
   85cfc:	01400274 	movhi	r5,9
   85d00:	29423e04 	addi	r5,r5,2296
   85d04:	29400017 	ldw	r5,0(r5)
   85d08:	21000054 	ori	r4,r4,1
   85d0c:	19000115 	stw	r4,4(r3)
   85d10:	1145c83a 	sub	r2,r2,r5
   85d14:	01400274 	movhi	r5,9
   85d18:	294af904 	addi	r5,r5,11236
   85d1c:	28800015 	stw	r2,0(r5)
   85d20:	003fcd06 	br	85c58 <_malloc_trim_r+0x70>

00085d24 <_free_r>:
   85d24:	defffd04 	addi	sp,sp,-12
   85d28:	dc400115 	stw	r17,4(sp)
   85d2c:	dc000015 	stw	r16,0(sp)
   85d30:	dfc00215 	stw	ra,8(sp)
   85d34:	2821883a 	mov	r16,r5
   85d38:	2023883a 	mov	r17,r4
   85d3c:	28004b26 	beq	r5,zero,85e6c <_free_r+0x148>
   85d40:	008b9500 	call	8b950 <__malloc_lock>
   85d44:	823fff17 	ldw	r8,-4(r16)
   85d48:	00bfff84 	movi	r2,-2
   85d4c:	81bffe04 	addi	r6,r16,-8
   85d50:	4084703a 	and	r2,r8,r2
   85d54:	3087883a 	add	r3,r6,r2
   85d58:	01400274 	movhi	r5,9
   85d5c:	297cb704 	addi	r5,r5,-3364
   85d60:	1a400117 	ldw	r9,4(r3)
   85d64:	29000217 	ldw	r4,8(r5)
   85d68:	01ffff04 	movi	r7,-4
   85d6c:	49ce703a 	and	r7,r9,r7
   85d70:	20c06526 	beq	r4,r3,85f08 <_free_r+0x1e4>
   85d74:	19c00115 	stw	r7,4(r3)
   85d78:	4200004c 	andi	r8,r8,1
   85d7c:	40003026 	beq	r8,zero,85e40 <_free_r+0x11c>
   85d80:	0009883a 	mov	r4,zero
   85d84:	19d1883a 	add	r8,r3,r7
   85d88:	42000117 	ldw	r8,4(r8)
   85d8c:	4200004c 	andi	r8,r8,1
   85d90:	4000061e 	bne	r8,zero,85dac <_free_r+0x88>
   85d94:	11c5883a 	add	r2,r2,r7
   85d98:	19c00217 	ldw	r7,8(r3)
   85d9c:	20004e26 	beq	r4,zero,85ed8 <_free_r+0x1b4>
   85da0:	18c00317 	ldw	r3,12(r3)
   85da4:	38c00315 	stw	r3,12(r7)
   85da8:	19c00215 	stw	r7,8(r3)
   85dac:	11c00054 	ori	r7,r2,1
   85db0:	3087883a 	add	r3,r6,r2
   85db4:	31c00115 	stw	r7,4(r6)
   85db8:	18800015 	stw	r2,0(r3)
   85dbc:	20001a1e 	bne	r4,zero,85e28 <_free_r+0x104>
   85dc0:	00c07fc4 	movi	r3,511
   85dc4:	18802e2e 	bgeu	r3,r2,85e80 <_free_r+0x15c>
   85dc8:	1006d27a 	srli	r3,r2,9
   85dcc:	01000104 	movi	r4,4
   85dd0:	20c06636 	bltu	r4,r3,85f6c <_free_r+0x248>
   85dd4:	1008d1ba 	srli	r4,r2,6
   85dd8:	21000e04 	addi	r4,r4,56
   85ddc:	210f883a 	add	r7,r4,r4
   85de0:	39cf883a 	add	r7,r7,r7
   85de4:	39cf883a 	add	r7,r7,r7
   85de8:	29cf883a 	add	r7,r5,r7
   85dec:	38c00217 	ldw	r3,8(r7)
   85df0:	01400274 	movhi	r5,9
   85df4:	297cb704 	addi	r5,r5,-3364
   85df8:	19c06126 	beq	r3,r7,85f80 <_free_r+0x25c>
   85dfc:	013fff04 	movi	r4,-4
   85e00:	19400117 	ldw	r5,4(r3)
   85e04:	290a703a 	and	r5,r5,r4
   85e08:	1140022e 	bgeu	r2,r5,85e14 <_free_r+0xf0>
   85e0c:	18c00217 	ldw	r3,8(r3)
   85e10:	38fffb1e 	bne	r7,r3,85e00 <_free_r+0xdc>
   85e14:	18800317 	ldw	r2,12(r3)
   85e18:	30800315 	stw	r2,12(r6)
   85e1c:	30c00215 	stw	r3,8(r6)
   85e20:	11800215 	stw	r6,8(r2)
   85e24:	19800315 	stw	r6,12(r3)
   85e28:	8809883a 	mov	r4,r17
   85e2c:	dfc00217 	ldw	ra,8(sp)
   85e30:	dc400117 	ldw	r17,4(sp)
   85e34:	dc000017 	ldw	r16,0(sp)
   85e38:	dec00304 	addi	sp,sp,12
   85e3c:	008b9701 	jmpi	8b970 <__malloc_unlock>
   85e40:	813ffe17 	ldw	r4,-8(r16)
   85e44:	2a400204 	addi	r9,r5,8
   85e48:	310dc83a 	sub	r6,r6,r4
   85e4c:	32000217 	ldw	r8,8(r6)
   85e50:	1105883a 	add	r2,r2,r4
   85e54:	42404326 	beq	r8,r9,85f64 <_free_r+0x240>
   85e58:	32400317 	ldw	r9,12(r6)
   85e5c:	0009883a 	mov	r4,zero
   85e60:	42400315 	stw	r9,12(r8)
   85e64:	4a000215 	stw	r8,8(r9)
   85e68:	003fc606 	br	85d84 <_free_r+0x60>
   85e6c:	dfc00217 	ldw	ra,8(sp)
   85e70:	dc400117 	ldw	r17,4(sp)
   85e74:	dc000017 	ldw	r16,0(sp)
   85e78:	dec00304 	addi	sp,sp,12
   85e7c:	f800283a 	ret
   85e80:	1004d0fa 	srli	r2,r2,3
   85e84:	02000044 	movi	r8,1
   85e88:	29c00117 	ldw	r7,4(r5)
   85e8c:	1087883a 	add	r3,r2,r2
   85e90:	18c7883a 	add	r3,r3,r3
   85e94:	1005d0ba 	srai	r2,r2,2
   85e98:	18c7883a 	add	r3,r3,r3
   85e9c:	28c7883a 	add	r3,r5,r3
   85ea0:	19000217 	ldw	r4,8(r3)
   85ea4:	4084983a 	sll	r2,r8,r2
   85ea8:	30c00315 	stw	r3,12(r6)
   85eac:	31000215 	stw	r4,8(r6)
   85eb0:	11c4b03a 	or	r2,r2,r7
   85eb4:	21800315 	stw	r6,12(r4)
   85eb8:	8809883a 	mov	r4,r17
   85ebc:	28800115 	stw	r2,4(r5)
   85ec0:	19800215 	stw	r6,8(r3)
   85ec4:	dfc00217 	ldw	ra,8(sp)
   85ec8:	dc400117 	ldw	r17,4(sp)
   85ecc:	dc000017 	ldw	r16,0(sp)
   85ed0:	dec00304 	addi	sp,sp,12
   85ed4:	008b9701 	jmpi	8b970 <__malloc_unlock>
   85ed8:	02000274 	movhi	r8,9
   85edc:	423cb904 	addi	r8,r8,-3356
   85ee0:	3a3faf1e 	bne	r7,r8,85da0 <_free_r+0x7c>
   85ee4:	29800515 	stw	r6,20(r5)
   85ee8:	29800415 	stw	r6,16(r5)
   85eec:	11000054 	ori	r4,r2,1
   85ef0:	3087883a 	add	r3,r6,r2
   85ef4:	31c00315 	stw	r7,12(r6)
   85ef8:	31c00215 	stw	r7,8(r6)
   85efc:	31000115 	stw	r4,4(r6)
   85f00:	18800015 	stw	r2,0(r3)
   85f04:	003fc806 	br	85e28 <_free_r+0x104>
   85f08:	4200004c 	andi	r8,r8,1
   85f0c:	3885883a 	add	r2,r7,r2
   85f10:	4000071e 	bne	r8,zero,85f30 <_free_r+0x20c>
   85f14:	81fffe17 	ldw	r7,-8(r16)
   85f18:	31cdc83a 	sub	r6,r6,r7
   85f1c:	30c00317 	ldw	r3,12(r6)
   85f20:	31000217 	ldw	r4,8(r6)
   85f24:	11c5883a 	add	r2,r2,r7
   85f28:	20c00315 	stw	r3,12(r4)
   85f2c:	19000215 	stw	r4,8(r3)
   85f30:	00c00274 	movhi	r3,9
   85f34:	18c23f04 	addi	r3,r3,2300
   85f38:	18c00017 	ldw	r3,0(r3)
   85f3c:	11000054 	ori	r4,r2,1
   85f40:	31000115 	stw	r4,4(r6)
   85f44:	29800215 	stw	r6,8(r5)
   85f48:	10ffb736 	bltu	r2,r3,85e28 <_free_r+0x104>
   85f4c:	00800274 	movhi	r2,9
   85f50:	108aef04 	addi	r2,r2,11196
   85f54:	11400017 	ldw	r5,0(r2)
   85f58:	8809883a 	mov	r4,r17
   85f5c:	0085be80 	call	85be8 <_malloc_trim_r>
   85f60:	003fb106 	br	85e28 <_free_r+0x104>
   85f64:	01000044 	movi	r4,1
   85f68:	003f8606 	br	85d84 <_free_r+0x60>
   85f6c:	01000504 	movi	r4,20
   85f70:	20c00b36 	bltu	r4,r3,85fa0 <_free_r+0x27c>
   85f74:	190016c4 	addi	r4,r3,91
   85f78:	210f883a 	add	r7,r4,r4
   85f7c:	003f9806 	br	85de0 <_free_r+0xbc>
   85f80:	2009d0ba 	srai	r4,r4,2
   85f84:	00800044 	movi	r2,1
   85f88:	29c00117 	ldw	r7,4(r5)
   85f8c:	1108983a 	sll	r4,r2,r4
   85f90:	1805883a 	mov	r2,r3
   85f94:	21c8b03a 	or	r4,r4,r7
   85f98:	29000115 	stw	r4,4(r5)
   85f9c:	003f9e06 	br	85e18 <_free_r+0xf4>
   85fa0:	01001504 	movi	r4,84
   85fa4:	20c00436 	bltu	r4,r3,85fb8 <_free_r+0x294>
   85fa8:	1008d33a 	srli	r4,r2,12
   85fac:	21001b84 	addi	r4,r4,110
   85fb0:	210f883a 	add	r7,r4,r4
   85fb4:	003f8a06 	br	85de0 <_free_r+0xbc>
   85fb8:	01005504 	movi	r4,340
   85fbc:	20c00436 	bltu	r4,r3,85fd0 <_free_r+0x2ac>
   85fc0:	1008d3fa 	srli	r4,r2,15
   85fc4:	21001dc4 	addi	r4,r4,119
   85fc8:	210f883a 	add	r7,r4,r4
   85fcc:	003f8406 	br	85de0 <_free_r+0xbc>
   85fd0:	01015504 	movi	r4,1364
   85fd4:	20c00436 	bltu	r4,r3,85fe8 <_free_r+0x2c4>
   85fd8:	1008d4ba 	srli	r4,r2,18
   85fdc:	21001f04 	addi	r4,r4,124
   85fe0:	210f883a 	add	r7,r4,r4
   85fe4:	003f7e06 	br	85de0 <_free_r+0xbc>
   85fe8:	01c03f04 	movi	r7,252
   85fec:	01001f84 	movi	r4,126
   85ff0:	003f7b06 	br	85de0 <_free_r+0xbc>

00085ff4 <__sfvwrite_r>:
   85ff4:	30800217 	ldw	r2,8(r6)
   85ff8:	defff504 	addi	sp,sp,-44
   85ffc:	dd400615 	stw	r21,24(sp)
   86000:	dd000515 	stw	r20,20(sp)
   86004:	dc000115 	stw	r16,4(sp)
   86008:	dfc00a15 	stw	ra,40(sp)
   8600c:	df000915 	stw	fp,36(sp)
   86010:	ddc00815 	stw	r23,32(sp)
   86014:	dd800715 	stw	r22,28(sp)
   86018:	dcc00415 	stw	r19,16(sp)
   8601c:	dc800315 	stw	r18,12(sp)
   86020:	dc400215 	stw	r17,8(sp)
   86024:	3029883a 	mov	r20,r6
   86028:	202b883a 	mov	r21,r4
   8602c:	2821883a 	mov	r16,r5
   86030:	10002126 	beq	r2,zero,860b8 <__sfvwrite_r+0xc4>
   86034:	2880030b 	ldhu	r2,12(r5)
   86038:	10c0020c 	andi	r3,r2,8
   8603c:	18ffffcc 	andi	r3,r3,65535
   86040:	18e0001c 	xori	r3,r3,32768
   86044:	18e00004 	addi	r3,r3,-32768
   86048:	18002826 	beq	r3,zero,860ec <__sfvwrite_r+0xf8>
   8604c:	28c00417 	ldw	r3,16(r5)
   86050:	18002626 	beq	r3,zero,860ec <__sfvwrite_r+0xf8>
   86054:	10c0008c 	andi	r3,r2,2
   86058:	18ffffcc 	andi	r3,r3,65535
   8605c:	18e0001c 	xori	r3,r3,32768
   86060:	18e00004 	addi	r3,r3,-32768
   86064:	a4400017 	ldw	r17,0(r20)
   86068:	18002b26 	beq	r3,zero,86118 <__sfvwrite_r+0x124>
   8606c:	0027883a 	mov	r19,zero
   86070:	0025883a 	mov	r18,zero
   86074:	05810004 	movi	r22,1024
   86078:	980d883a 	mov	r6,r19
   8607c:	a809883a 	mov	r4,r21
   86080:	90004f26 	beq	r18,zero,861c0 <__sfvwrite_r+0x1cc>
   86084:	900f883a 	mov	r7,r18
   86088:	81400717 	ldw	r5,28(r16)
   8608c:	b480012e 	bgeu	r22,r18,86094 <__sfvwrite_r+0xa0>
   86090:	01c10004 	movi	r7,1024
   86094:	80800917 	ldw	r2,36(r16)
   86098:	103ee83a 	callr	r2
   8609c:	0080540e 	bge	zero,r2,861f0 <__sfvwrite_r+0x1fc>
   860a0:	a0c00217 	ldw	r3,8(r20)
   860a4:	98a7883a 	add	r19,r19,r2
   860a8:	90a5c83a 	sub	r18,r18,r2
   860ac:	1885c83a 	sub	r2,r3,r2
   860b0:	a0800215 	stw	r2,8(r20)
   860b4:	103ff01e 	bne	r2,zero,86078 <__sfvwrite_r+0x84>
   860b8:	0005883a 	mov	r2,zero
   860bc:	dfc00a17 	ldw	ra,40(sp)
   860c0:	df000917 	ldw	fp,36(sp)
   860c4:	ddc00817 	ldw	r23,32(sp)
   860c8:	dd800717 	ldw	r22,28(sp)
   860cc:	dd400617 	ldw	r21,24(sp)
   860d0:	dd000517 	ldw	r20,20(sp)
   860d4:	dcc00417 	ldw	r19,16(sp)
   860d8:	dc800317 	ldw	r18,12(sp)
   860dc:	dc400217 	ldw	r17,8(sp)
   860e0:	dc000117 	ldw	r16,4(sp)
   860e4:	dec00b04 	addi	sp,sp,44
   860e8:	f800283a 	ret
   860ec:	a809883a 	mov	r4,r21
   860f0:	800b883a 	mov	r5,r16
   860f4:	0083d180 	call	83d18 <__swsetup_r>
   860f8:	1000f01e 	bne	r2,zero,864bc <__sfvwrite_r+0x4c8>
   860fc:	8080030b 	ldhu	r2,12(r16)
   86100:	a4400017 	ldw	r17,0(r20)
   86104:	10c0008c 	andi	r3,r2,2
   86108:	18ffffcc 	andi	r3,r3,65535
   8610c:	18e0001c 	xori	r3,r3,32768
   86110:	18e00004 	addi	r3,r3,-32768
   86114:	183fd51e 	bne	r3,zero,8606c <__sfvwrite_r+0x78>
   86118:	10c0004c 	andi	r3,r2,1
   8611c:	002d883a 	mov	r22,zero
   86120:	1800381e 	bne	r3,zero,86204 <__sfvwrite_r+0x210>
   86124:	0025883a 	mov	r18,zero
   86128:	90002126 	beq	r18,zero,861b0 <__sfvwrite_r+0x1bc>
   8612c:	10c0800c 	andi	r3,r2,512
   86130:	18ffffcc 	andi	r3,r3,65535
   86134:	18e0001c 	xori	r3,r3,32768
   86138:	18e00004 	addi	r3,r3,-32768
   8613c:	84c00217 	ldw	r19,8(r16)
   86140:	18006b26 	beq	r3,zero,862f0 <__sfvwrite_r+0x2fc>
   86144:	980f883a 	mov	r7,r19
   86148:	94c08636 	bltu	r18,r19,86364 <__sfvwrite_r+0x370>
   8614c:	10c1200c 	andi	r3,r2,1152
   86150:	18009f1e 	bne	r3,zero,863d0 <__sfvwrite_r+0x3dc>
   86154:	81000017 	ldw	r4,0(r16)
   86158:	982f883a 	mov	r23,r19
   8615c:	9039883a 	mov	fp,r18
   86160:	9027883a 	mov	r19,r18
   86164:	380d883a 	mov	r6,r7
   86168:	b00b883a 	mov	r5,r22
   8616c:	d9c00015 	stw	r7,0(sp)
   86170:	00872780 	call	87278 <memmove>
   86174:	d9c00017 	ldw	r7,0(sp)
   86178:	81000217 	ldw	r4,8(r16)
   8617c:	80800017 	ldw	r2,0(r16)
   86180:	25efc83a 	sub	r23,r4,r23
   86184:	11cf883a 	add	r7,r2,r7
   86188:	85c00215 	stw	r23,8(r16)
   8618c:	81c00015 	stw	r7,0(r16)
   86190:	a0800217 	ldw	r2,8(r20)
   86194:	b72d883a 	add	r22,r22,fp
   86198:	9725c83a 	sub	r18,r18,fp
   8619c:	14e7c83a 	sub	r19,r2,r19
   861a0:	a4c00215 	stw	r19,8(r20)
   861a4:	983fc426 	beq	r19,zero,860b8 <__sfvwrite_r+0xc4>
   861a8:	8080030b 	ldhu	r2,12(r16)
   861ac:	903fdf1e 	bne	r18,zero,8612c <__sfvwrite_r+0x138>
   861b0:	8d800017 	ldw	r22,0(r17)
   861b4:	8c800117 	ldw	r18,4(r17)
   861b8:	8c400204 	addi	r17,r17,8
   861bc:	003fda06 	br	86128 <__sfvwrite_r+0x134>
   861c0:	8cc00017 	ldw	r19,0(r17)
   861c4:	8c800117 	ldw	r18,4(r17)
   861c8:	8c400204 	addi	r17,r17,8
   861cc:	003faa06 	br	86078 <__sfvwrite_r+0x84>
   861d0:	00885300 	call	88530 <_realloc_r>
   861d4:	102f883a 	mov	r23,r2
   861d8:	10009f1e 	bne	r2,zero,86458 <__sfvwrite_r+0x464>
   861dc:	81400417 	ldw	r5,16(r16)
   861e0:	a809883a 	mov	r4,r21
   861e4:	0085d240 	call	85d24 <_free_r>
   861e8:	00800304 	movi	r2,12
   861ec:	a8800015 	stw	r2,0(r21)
   861f0:	80c0030b 	ldhu	r3,12(r16)
   861f4:	00bfffc4 	movi	r2,-1
   861f8:	18c01014 	ori	r3,r3,64
   861fc:	80c0030d 	sth	r3,12(r16)
   86200:	003fae06 	br	860bc <__sfvwrite_r+0xc8>
   86204:	0007883a 	mov	r3,zero
   86208:	0039883a 	mov	fp,zero
   8620c:	0025883a 	mov	r18,zero
   86210:	90001e26 	beq	r18,zero,8628c <__sfvwrite_r+0x298>
   86214:	18006526 	beq	r3,zero,863ac <__sfvwrite_r+0x3b8>
   86218:	b02f883a 	mov	r23,r22
   8621c:	9580012e 	bgeu	r18,r22,86224 <__sfvwrite_r+0x230>
   86220:	902f883a 	mov	r23,r18
   86224:	81000017 	ldw	r4,0(r16)
   86228:	80800417 	ldw	r2,16(r16)
   8622c:	84c00217 	ldw	r19,8(r16)
   86230:	81c00517 	ldw	r7,20(r16)
   86234:	1100022e 	bgeu	r2,r4,86240 <__sfvwrite_r+0x24c>
   86238:	99e7883a 	add	r19,r19,r7
   8623c:	9dc01816 	blt	r19,r23,862a0 <__sfvwrite_r+0x2ac>
   86240:	b9c03b16 	blt	r23,r7,86330 <__sfvwrite_r+0x33c>
   86244:	80800917 	ldw	r2,36(r16)
   86248:	81400717 	ldw	r5,28(r16)
   8624c:	a809883a 	mov	r4,r21
   86250:	d8c00015 	stw	r3,0(sp)
   86254:	e00d883a 	mov	r6,fp
   86258:	103ee83a 	callr	r2
   8625c:	1027883a 	mov	r19,r2
   86260:	d8c00017 	ldw	r3,0(sp)
   86264:	00bfe20e 	bge	zero,r2,861f0 <__sfvwrite_r+0x1fc>
   86268:	b4edc83a 	sub	r22,r22,r19
   8626c:	b0001a26 	beq	r22,zero,862d8 <__sfvwrite_r+0x2e4>
   86270:	a0800217 	ldw	r2,8(r20)
   86274:	e4f9883a 	add	fp,fp,r19
   86278:	94e5c83a 	sub	r18,r18,r19
   8627c:	14e7c83a 	sub	r19,r2,r19
   86280:	a4c00215 	stw	r19,8(r20)
   86284:	983f8c26 	beq	r19,zero,860b8 <__sfvwrite_r+0xc4>
   86288:	903fe21e 	bne	r18,zero,86214 <__sfvwrite_r+0x220>
   8628c:	8f000017 	ldw	fp,0(r17)
   86290:	8c800117 	ldw	r18,4(r17)
   86294:	0007883a 	mov	r3,zero
   86298:	8c400204 	addi	r17,r17,8
   8629c:	003fdc06 	br	86210 <__sfvwrite_r+0x21c>
   862a0:	e00b883a 	mov	r5,fp
   862a4:	980d883a 	mov	r6,r19
   862a8:	d8c00015 	stw	r3,0(sp)
   862ac:	00872780 	call	87278 <memmove>
   862b0:	80800017 	ldw	r2,0(r16)
   862b4:	a809883a 	mov	r4,r21
   862b8:	800b883a 	mov	r5,r16
   862bc:	14c5883a 	add	r2,r2,r19
   862c0:	80800015 	stw	r2,0(r16)
   862c4:	00856e40 	call	856e4 <_fflush_r>
   862c8:	d8c00017 	ldw	r3,0(sp)
   862cc:	103fc81e 	bne	r2,zero,861f0 <__sfvwrite_r+0x1fc>
   862d0:	b4edc83a 	sub	r22,r22,r19
   862d4:	b03fe61e 	bne	r22,zero,86270 <__sfvwrite_r+0x27c>
   862d8:	a809883a 	mov	r4,r21
   862dc:	800b883a 	mov	r5,r16
   862e0:	00856e40 	call	856e4 <_fflush_r>
   862e4:	103fc21e 	bne	r2,zero,861f0 <__sfvwrite_r+0x1fc>
   862e8:	0007883a 	mov	r3,zero
   862ec:	003fe006 	br	86270 <__sfvwrite_r+0x27c>
   862f0:	81000017 	ldw	r4,0(r16)
   862f4:	80800417 	ldw	r2,16(r16)
   862f8:	1100022e 	bgeu	r2,r4,86304 <__sfvwrite_r+0x310>
   862fc:	9839883a 	mov	fp,r19
   86300:	9c806036 	bltu	r19,r18,86484 <__sfvwrite_r+0x490>
   86304:	81c00517 	ldw	r7,20(r16)
   86308:	91c01c36 	bltu	r18,r7,8637c <__sfvwrite_r+0x388>
   8630c:	80800917 	ldw	r2,36(r16)
   86310:	81400717 	ldw	r5,28(r16)
   86314:	a809883a 	mov	r4,r21
   86318:	b00d883a 	mov	r6,r22
   8631c:	103ee83a 	callr	r2
   86320:	1027883a 	mov	r19,r2
   86324:	00bfb20e 	bge	zero,r2,861f0 <__sfvwrite_r+0x1fc>
   86328:	1039883a 	mov	fp,r2
   8632c:	003f9806 	br	86190 <__sfvwrite_r+0x19c>
   86330:	b80d883a 	mov	r6,r23
   86334:	e00b883a 	mov	r5,fp
   86338:	d8c00015 	stw	r3,0(sp)
   8633c:	00872780 	call	87278 <memmove>
   86340:	80800217 	ldw	r2,8(r16)
   86344:	81000017 	ldw	r4,0(r16)
   86348:	b827883a 	mov	r19,r23
   8634c:	15c5c83a 	sub	r2,r2,r23
   86350:	25ef883a 	add	r23,r4,r23
   86354:	80800215 	stw	r2,8(r16)
   86358:	85c00015 	stw	r23,0(r16)
   8635c:	d8c00017 	ldw	r3,0(sp)
   86360:	003fc106 	br	86268 <__sfvwrite_r+0x274>
   86364:	81000017 	ldw	r4,0(r16)
   86368:	902f883a 	mov	r23,r18
   8636c:	9039883a 	mov	fp,r18
   86370:	9027883a 	mov	r19,r18
   86374:	900f883a 	mov	r7,r18
   86378:	003f7a06 	br	86164 <__sfvwrite_r+0x170>
   8637c:	b00b883a 	mov	r5,r22
   86380:	900d883a 	mov	r6,r18
   86384:	00872780 	call	87278 <memmove>
   86388:	80c00217 	ldw	r3,8(r16)
   8638c:	80800017 	ldw	r2,0(r16)
   86390:	9027883a 	mov	r19,r18
   86394:	1c87c83a 	sub	r3,r3,r18
   86398:	1485883a 	add	r2,r2,r18
   8639c:	80c00215 	stw	r3,8(r16)
   863a0:	80800015 	stw	r2,0(r16)
   863a4:	9039883a 	mov	fp,r18
   863a8:	003f7906 	br	86190 <__sfvwrite_r+0x19c>
   863ac:	e009883a 	mov	r4,fp
   863b0:	01400284 	movi	r5,10
   863b4:	900d883a 	mov	r6,r18
   863b8:	00870400 	call	87040 <memchr>
   863bc:	10003c26 	beq	r2,zero,864b0 <__sfvwrite_r+0x4bc>
   863c0:	15800044 	addi	r22,r2,1
   863c4:	b72dc83a 	sub	r22,r22,fp
   863c8:	00c00044 	movi	r3,1
   863cc:	003f9206 	br	86218 <__sfvwrite_r+0x224>
   863d0:	81000517 	ldw	r4,20(r16)
   863d4:	81400417 	ldw	r5,16(r16)
   863d8:	80c00017 	ldw	r3,0(r16)
   863dc:	210d883a 	add	r6,r4,r4
   863e0:	3109883a 	add	r4,r6,r4
   863e4:	2026d7fa 	srli	r19,r4,31
   863e8:	1979c83a 	sub	fp,r3,r5
   863ec:	e1800044 	addi	r6,fp,1
   863f0:	9909883a 	add	r4,r19,r4
   863f4:	2027d07a 	srai	r19,r4,1
   863f8:	3489883a 	add	r4,r6,r18
   863fc:	980d883a 	mov	r6,r19
   86400:	9900022e 	bgeu	r19,r4,8640c <__sfvwrite_r+0x418>
   86404:	2027883a 	mov	r19,r4
   86408:	200d883a 	mov	r6,r4
   8640c:	1081000c 	andi	r2,r2,1024
   86410:	10bfffcc 	andi	r2,r2,65535
   86414:	10a0001c 	xori	r2,r2,32768
   86418:	10a00004 	addi	r2,r2,-32768
   8641c:	a809883a 	mov	r4,r21
   86420:	103f6b26 	beq	r2,zero,861d0 <__sfvwrite_r+0x1dc>
   86424:	300b883a 	mov	r5,r6
   86428:	00868bc0 	call	868bc <_malloc_r>
   8642c:	102f883a 	mov	r23,r2
   86430:	103f6d26 	beq	r2,zero,861e8 <__sfvwrite_r+0x1f4>
   86434:	81400417 	ldw	r5,16(r16)
   86438:	1009883a 	mov	r4,r2
   8643c:	e00d883a 	mov	r6,fp
   86440:	00871380 	call	87138 <memcpy>
   86444:	8080030b 	ldhu	r2,12(r16)
   86448:	00fedfc4 	movi	r3,-1153
   8644c:	10c4703a 	and	r2,r2,r3
   86450:	10802014 	ori	r2,r2,128
   86454:	8080030d 	sth	r2,12(r16)
   86458:	bf09883a 	add	r4,r23,fp
   8645c:	9f07c83a 	sub	r3,r19,fp
   86460:	85c00415 	stw	r23,16(r16)
   86464:	84c00515 	stw	r19,20(r16)
   86468:	81000015 	stw	r4,0(r16)
   8646c:	902f883a 	mov	r23,r18
   86470:	80c00215 	stw	r3,8(r16)
   86474:	9039883a 	mov	fp,r18
   86478:	9027883a 	mov	r19,r18
   8647c:	900f883a 	mov	r7,r18
   86480:	003f3806 	br	86164 <__sfvwrite_r+0x170>
   86484:	b00b883a 	mov	r5,r22
   86488:	980d883a 	mov	r6,r19
   8648c:	00872780 	call	87278 <memmove>
   86490:	80800017 	ldw	r2,0(r16)
   86494:	a809883a 	mov	r4,r21
   86498:	800b883a 	mov	r5,r16
   8649c:	14c5883a 	add	r2,r2,r19
   864a0:	80800015 	stw	r2,0(r16)
   864a4:	00856e40 	call	856e4 <_fflush_r>
   864a8:	103f3926 	beq	r2,zero,86190 <__sfvwrite_r+0x19c>
   864ac:	003f5006 	br	861f0 <__sfvwrite_r+0x1fc>
   864b0:	95800044 	addi	r22,r18,1
   864b4:	00c00044 	movi	r3,1
   864b8:	003f5706 	br	86218 <__sfvwrite_r+0x224>
   864bc:	80c0030b 	ldhu	r3,12(r16)
   864c0:	00bfffc4 	movi	r2,-1
   864c4:	18c01014 	ori	r3,r3,64
   864c8:	80c0030d 	sth	r3,12(r16)
   864cc:	00c00244 	movi	r3,9
   864d0:	a8c00015 	stw	r3,0(r21)
   864d4:	003ef906 	br	860bc <__sfvwrite_r+0xc8>

000864d8 <_fwalk>:
   864d8:	defff904 	addi	sp,sp,-28
   864dc:	dcc00315 	stw	r19,12(sp)
   864e0:	24c0b804 	addi	r19,r4,736
   864e4:	dd400515 	stw	r21,20(sp)
   864e8:	dd000415 	stw	r20,16(sp)
   864ec:	dfc00615 	stw	ra,24(sp)
   864f0:	dc800215 	stw	r18,8(sp)
   864f4:	dc400115 	stw	r17,4(sp)
   864f8:	dc000015 	stw	r16,0(sp)
   864fc:	282b883a 	mov	r21,r5
   86500:	0029883a 	mov	r20,zero
   86504:	0085ba80 	call	85ba8 <__sfp_lock_acquire>
   86508:	98001226 	beq	r19,zero,86554 <_fwalk+0x7c>
   8650c:	04bfffc4 	movi	r18,-1
   86510:	9c400117 	ldw	r17,4(r19)
   86514:	9c000217 	ldw	r16,8(r19)
   86518:	8c7fffc4 	addi	r17,r17,-1
   8651c:	88000b16 	blt	r17,zero,8654c <_fwalk+0x74>
   86520:	84000304 	addi	r16,r16,12
   86524:	80c0000f 	ldh	r3,0(r16)
   86528:	8c7fffc4 	addi	r17,r17,-1
   8652c:	813ffd04 	addi	r4,r16,-12
   86530:	18000426 	beq	r3,zero,86544 <_fwalk+0x6c>
   86534:	80c0008f 	ldh	r3,2(r16)
   86538:	1c800226 	beq	r3,r18,86544 <_fwalk+0x6c>
   8653c:	a83ee83a 	callr	r21
   86540:	a0a8b03a 	or	r20,r20,r2
   86544:	84001704 	addi	r16,r16,92
   86548:	8cbff61e 	bne	r17,r18,86524 <_fwalk+0x4c>
   8654c:	9cc00017 	ldw	r19,0(r19)
   86550:	983fef1e 	bne	r19,zero,86510 <_fwalk+0x38>
   86554:	0085bac0 	call	85bac <__sfp_lock_release>
   86558:	a005883a 	mov	r2,r20
   8655c:	dfc00617 	ldw	ra,24(sp)
   86560:	dd400517 	ldw	r21,20(sp)
   86564:	dd000417 	ldw	r20,16(sp)
   86568:	dcc00317 	ldw	r19,12(sp)
   8656c:	dc800217 	ldw	r18,8(sp)
   86570:	dc400117 	ldw	r17,4(sp)
   86574:	dc000017 	ldw	r16,0(sp)
   86578:	dec00704 	addi	sp,sp,28
   8657c:	f800283a 	ret

00086580 <_fwalk_reent>:
   86580:	defff804 	addi	sp,sp,-32
   86584:	dcc00315 	stw	r19,12(sp)
   86588:	24c0b804 	addi	r19,r4,736
   8658c:	dd800615 	stw	r22,24(sp)
   86590:	dd400515 	stw	r21,20(sp)
   86594:	dd000415 	stw	r20,16(sp)
   86598:	dfc00715 	stw	ra,28(sp)
   8659c:	dc800215 	stw	r18,8(sp)
   865a0:	dc400115 	stw	r17,4(sp)
   865a4:	dc000015 	stw	r16,0(sp)
   865a8:	2029883a 	mov	r20,r4
   865ac:	282b883a 	mov	r21,r5
   865b0:	002d883a 	mov	r22,zero
   865b4:	0085ba80 	call	85ba8 <__sfp_lock_acquire>
   865b8:	98001326 	beq	r19,zero,86608 <_fwalk_reent+0x88>
   865bc:	04bfffc4 	movi	r18,-1
   865c0:	9c400117 	ldw	r17,4(r19)
   865c4:	9c000217 	ldw	r16,8(r19)
   865c8:	8c7fffc4 	addi	r17,r17,-1
   865cc:	88000c16 	blt	r17,zero,86600 <_fwalk_reent+0x80>
   865d0:	84000304 	addi	r16,r16,12
   865d4:	80c0000f 	ldh	r3,0(r16)
   865d8:	8c7fffc4 	addi	r17,r17,-1
   865dc:	817ffd04 	addi	r5,r16,-12
   865e0:	18000526 	beq	r3,zero,865f8 <_fwalk_reent+0x78>
   865e4:	80c0008f 	ldh	r3,2(r16)
   865e8:	a009883a 	mov	r4,r20
   865ec:	1c800226 	beq	r3,r18,865f8 <_fwalk_reent+0x78>
   865f0:	a83ee83a 	callr	r21
   865f4:	b0acb03a 	or	r22,r22,r2
   865f8:	84001704 	addi	r16,r16,92
   865fc:	8cbff51e 	bne	r17,r18,865d4 <_fwalk_reent+0x54>
   86600:	9cc00017 	ldw	r19,0(r19)
   86604:	983fee1e 	bne	r19,zero,865c0 <_fwalk_reent+0x40>
   86608:	0085bac0 	call	85bac <__sfp_lock_release>
   8660c:	b005883a 	mov	r2,r22
   86610:	dfc00717 	ldw	ra,28(sp)
   86614:	dd800617 	ldw	r22,24(sp)
   86618:	dd400517 	ldw	r21,20(sp)
   8661c:	dd000417 	ldw	r20,16(sp)
   86620:	dcc00317 	ldw	r19,12(sp)
   86624:	dc800217 	ldw	r18,8(sp)
   86628:	dc400117 	ldw	r17,4(sp)
   8662c:	dc000017 	ldw	r16,0(sp)
   86630:	dec00804 	addi	sp,sp,32
   86634:	f800283a 	ret

00086638 <_setlocale_r>:
   86638:	defffc04 	addi	sp,sp,-16
   8663c:	dc800215 	stw	r18,8(sp)
   86640:	dc400115 	stw	r17,4(sp)
   86644:	dc000015 	stw	r16,0(sp)
   86648:	dfc00315 	stw	ra,12(sp)
   8664c:	3021883a 	mov	r16,r6
   86650:	2023883a 	mov	r17,r4
   86654:	2825883a 	mov	r18,r5
   86658:	30001626 	beq	r6,zero,866b4 <_setlocale_r+0x7c>
   8665c:	3009883a 	mov	r4,r6
   86660:	01400274 	movhi	r5,9
   86664:	29790704 	addi	r5,r5,-7140
   86668:	0088d340 	call	88d34 <strcmp>
   8666c:	10000a1e 	bne	r2,zero,86698 <_setlocale_r+0x60>
   86670:	8c800c15 	stw	r18,48(r17)
   86674:	8c000d15 	stw	r16,52(r17)
   86678:	00800274 	movhi	r2,9
   8667c:	10b90704 	addi	r2,r2,-7140
   86680:	dfc00317 	ldw	ra,12(sp)
   86684:	dc800217 	ldw	r18,8(sp)
   86688:	dc400117 	ldw	r17,4(sp)
   8668c:	dc000017 	ldw	r16,0(sp)
   86690:	dec00404 	addi	sp,sp,16
   86694:	f800283a 	ret
   86698:	8009883a 	mov	r4,r16
   8669c:	01400274 	movhi	r5,9
   866a0:	2978f204 	addi	r5,r5,-7224
   866a4:	0088d340 	call	88d34 <strcmp>
   866a8:	103ff126 	beq	r2,zero,86670 <_setlocale_r+0x38>
   866ac:	0005883a 	mov	r2,zero
   866b0:	003ff306 	br	86680 <_setlocale_r+0x48>
   866b4:	00800274 	movhi	r2,9
   866b8:	10b90704 	addi	r2,r2,-7140
   866bc:	dfc00317 	ldw	ra,12(sp)
   866c0:	dc800217 	ldw	r18,8(sp)
   866c4:	dc400117 	ldw	r17,4(sp)
   866c8:	dc000017 	ldw	r16,0(sp)
   866cc:	dec00404 	addi	sp,sp,16
   866d0:	f800283a 	ret

000866d4 <__locale_charset>:
   866d4:	00800274 	movhi	r2,9
   866d8:	10b90804 	addi	r2,r2,-7136
   866dc:	f800283a 	ret

000866e0 <_localeconv_r>:
   866e0:	00800274 	movhi	r2,9
   866e4:	10b90c04 	addi	r2,r2,-7120
   866e8:	f800283a 	ret

000866ec <setlocale>:
   866ec:	00c00274 	movhi	r3,9
   866f0:	18c23c04 	addi	r3,r3,2288
   866f4:	2005883a 	mov	r2,r4
   866f8:	19000017 	ldw	r4,0(r3)
   866fc:	280d883a 	mov	r6,r5
   86700:	100b883a 	mov	r5,r2
   86704:	00866381 	jmpi	86638 <_setlocale_r>

00086708 <localeconv>:
   86708:	00800274 	movhi	r2,9
   8670c:	10b90c04 	addi	r2,r2,-7120
   86710:	f800283a 	ret

00086714 <__smakebuf_r>:
   86714:	2880030b 	ldhu	r2,12(r5)
   86718:	deffed04 	addi	sp,sp,-76
   8671c:	dc401015 	stw	r17,64(sp)
   86720:	10c0008c 	andi	r3,r2,2
   86724:	18ffffcc 	andi	r3,r3,65535
   86728:	18e0001c 	xori	r3,r3,32768
   8672c:	dc000f15 	stw	r16,60(sp)
   86730:	dfc01215 	stw	ra,72(sp)
   86734:	dc801115 	stw	r18,68(sp)
   86738:	18e00004 	addi	r3,r3,-32768
   8673c:	2821883a 	mov	r16,r5
   86740:	2023883a 	mov	r17,r4
   86744:	1800381e 	bne	r3,zero,86828 <__smakebuf_r+0x114>
   86748:	2940038f 	ldh	r5,14(r5)
   8674c:	28002d16 	blt	r5,zero,86804 <__smakebuf_r+0xf0>
   86750:	d80d883a 	mov	r6,sp
   86754:	00890c40 	call	890c4 <_fstat_r>
   86758:	10002916 	blt	r2,zero,86800 <__smakebuf_r+0xec>
   8675c:	d8800117 	ldw	r2,4(sp)
   86760:	00e00014 	movui	r3,32768
   86764:	10bc000c 	andi	r2,r2,61440
   86768:	10c03c26 	beq	r2,r3,8685c <__smakebuf_r+0x148>
   8676c:	80c0030b 	ldhu	r3,12(r16)
   86770:	18c20014 	ori	r3,r3,2048
   86774:	80c0030d 	sth	r3,12(r16)
   86778:	00c80004 	movi	r3,8192
   8677c:	10c00c1e 	bne	r2,r3,867b0 <__smakebuf_r+0x9c>
   86780:	8140038f 	ldh	r5,14(r16)
   86784:	8809883a 	mov	r4,r17
   86788:	008912c0 	call	8912c <_isatty_r>
   8678c:	10000826 	beq	r2,zero,867b0 <__smakebuf_r+0x9c>
   86790:	80c0030b 	ldhu	r3,12(r16)
   86794:	808010c4 	addi	r2,r16,67
   86798:	80800015 	stw	r2,0(r16)
   8679c:	18c00054 	ori	r3,r3,1
   867a0:	80800415 	stw	r2,16(r16)
   867a4:	00800044 	movi	r2,1
   867a8:	80c0030d 	sth	r3,12(r16)
   867ac:	80800515 	stw	r2,20(r16)
   867b0:	04810004 	movi	r18,1024
   867b4:	8809883a 	mov	r4,r17
   867b8:	900b883a 	mov	r5,r18
   867bc:	00868bc0 	call	868bc <_malloc_r>
   867c0:	10003026 	beq	r2,zero,86884 <__smakebuf_r+0x170>
   867c4:	80c0030b 	ldhu	r3,12(r16)
   867c8:	01000234 	movhi	r4,8
   867cc:	21164304 	addi	r4,r4,22796
   867d0:	89000f15 	stw	r4,60(r17)
   867d4:	18c02014 	ori	r3,r3,128
   867d8:	80c0030d 	sth	r3,12(r16)
   867dc:	80800015 	stw	r2,0(r16)
   867e0:	80800415 	stw	r2,16(r16)
   867e4:	84800515 	stw	r18,20(r16)
   867e8:	dfc01217 	ldw	ra,72(sp)
   867ec:	dc801117 	ldw	r18,68(sp)
   867f0:	dc401017 	ldw	r17,64(sp)
   867f4:	dc000f17 	ldw	r16,60(sp)
   867f8:	dec01304 	addi	sp,sp,76
   867fc:	f800283a 	ret
   86800:	8080030b 	ldhu	r2,12(r16)
   86804:	10c0200c 	andi	r3,r2,128
   86808:	18ffffcc 	andi	r3,r3,65535
   8680c:	18e0001c 	xori	r3,r3,32768
   86810:	18e00004 	addi	r3,r3,-32768
   86814:	18000f1e 	bne	r3,zero,86854 <__smakebuf_r+0x140>
   86818:	04810004 	movi	r18,1024
   8681c:	10820014 	ori	r2,r2,2048
   86820:	8080030d 	sth	r2,12(r16)
   86824:	003fe306 	br	867b4 <__smakebuf_r+0xa0>
   86828:	288010c4 	addi	r2,r5,67
   8682c:	28800015 	stw	r2,0(r5)
   86830:	28800415 	stw	r2,16(r5)
   86834:	00800044 	movi	r2,1
   86838:	28800515 	stw	r2,20(r5)
   8683c:	dfc01217 	ldw	ra,72(sp)
   86840:	dc801117 	ldw	r18,68(sp)
   86844:	dc401017 	ldw	r17,64(sp)
   86848:	dc000f17 	ldw	r16,60(sp)
   8684c:	dec01304 	addi	sp,sp,76
   86850:	f800283a 	ret
   86854:	04801004 	movi	r18,64
   86858:	003ff006 	br	8681c <__smakebuf_r+0x108>
   8685c:	81000a17 	ldw	r4,40(r16)
   86860:	00c00274 	movhi	r3,9
   86864:	18e33404 	addi	r3,r3,-29488
   86868:	20ffc01e 	bne	r4,r3,8676c <__smakebuf_r+0x58>
   8686c:	8080030b 	ldhu	r2,12(r16)
   86870:	00c10004 	movi	r3,1024
   86874:	80c01315 	stw	r3,76(r16)
   86878:	10c4b03a 	or	r2,r2,r3
   8687c:	8080030d 	sth	r2,12(r16)
   86880:	003fcb06 	br	867b0 <__smakebuf_r+0x9c>
   86884:	8080030b 	ldhu	r2,12(r16)
   86888:	10c0800c 	andi	r3,r2,512
   8688c:	18ffffcc 	andi	r3,r3,65535
   86890:	18e0001c 	xori	r3,r3,32768
   86894:	18e00004 	addi	r3,r3,-32768
   86898:	183fd31e 	bne	r3,zero,867e8 <__smakebuf_r+0xd4>
   8689c:	10800094 	ori	r2,r2,2
   868a0:	80c010c4 	addi	r3,r16,67
   868a4:	8080030d 	sth	r2,12(r16)
   868a8:	00800044 	movi	r2,1
   868ac:	80c00015 	stw	r3,0(r16)
   868b0:	80c00415 	stw	r3,16(r16)
   868b4:	80800515 	stw	r2,20(r16)
   868b8:	003fcb06 	br	867e8 <__smakebuf_r+0xd4>

000868bc <_malloc_r>:
   868bc:	defff604 	addi	sp,sp,-40
   868c0:	dc800215 	stw	r18,8(sp)
   868c4:	dfc00915 	stw	ra,36(sp)
   868c8:	df000815 	stw	fp,32(sp)
   868cc:	ddc00715 	stw	r23,28(sp)
   868d0:	dd800615 	stw	r22,24(sp)
   868d4:	dd400515 	stw	r21,20(sp)
   868d8:	dd000415 	stw	r20,16(sp)
   868dc:	dcc00315 	stw	r19,12(sp)
   868e0:	dc400115 	stw	r17,4(sp)
   868e4:	dc000015 	stw	r16,0(sp)
   868e8:	288002c4 	addi	r2,r5,11
   868ec:	00c00584 	movi	r3,22
   868f0:	2025883a 	mov	r18,r4
   868f4:	18802b2e 	bgeu	r3,r2,869a4 <_malloc_r+0xe8>
   868f8:	047ffe04 	movi	r17,-8
   868fc:	1462703a 	and	r17,r2,r17
   86900:	88002a16 	blt	r17,zero,869ac <_malloc_r+0xf0>
   86904:	89402936 	bltu	r17,r5,869ac <_malloc_r+0xf0>
   86908:	9009883a 	mov	r4,r18
   8690c:	008b9500 	call	8b950 <__malloc_lock>
   86910:	00807dc4 	movi	r2,503
   86914:	14402936 	bltu	r2,r17,869bc <_malloc_r+0x100>
   86918:	8808d0fa 	srli	r4,r17,3
   8691c:	04c00274 	movhi	r19,9
   86920:	9cfcb704 	addi	r19,r19,-3364
   86924:	2105883a 	add	r2,r4,r4
   86928:	1085883a 	add	r2,r2,r2
   8692c:	1085883a 	add	r2,r2,r2
   86930:	9885883a 	add	r2,r19,r2
   86934:	14000317 	ldw	r16,12(r2)
   86938:	80815526 	beq	r16,r2,86e90 <_malloc_r+0x5d4>
   8693c:	81000117 	ldw	r4,4(r16)
   86940:	00bfff04 	movi	r2,-4
   86944:	80c00317 	ldw	r3,12(r16)
   86948:	2084703a 	and	r2,r4,r2
   8694c:	8085883a 	add	r2,r16,r2
   86950:	11800117 	ldw	r6,4(r2)
   86954:	81400217 	ldw	r5,8(r16)
   86958:	9009883a 	mov	r4,r18
   8695c:	31800054 	ori	r6,r6,1
   86960:	11800115 	stw	r6,4(r2)
   86964:	28c00315 	stw	r3,12(r5)
   86968:	19400215 	stw	r5,8(r3)
   8696c:	008b9700 	call	8b970 <__malloc_unlock>
   86970:	80800204 	addi	r2,r16,8
   86974:	dfc00917 	ldw	ra,36(sp)
   86978:	df000817 	ldw	fp,32(sp)
   8697c:	ddc00717 	ldw	r23,28(sp)
   86980:	dd800617 	ldw	r22,24(sp)
   86984:	dd400517 	ldw	r21,20(sp)
   86988:	dd000417 	ldw	r20,16(sp)
   8698c:	dcc00317 	ldw	r19,12(sp)
   86990:	dc800217 	ldw	r18,8(sp)
   86994:	dc400117 	ldw	r17,4(sp)
   86998:	dc000017 	ldw	r16,0(sp)
   8699c:	dec00a04 	addi	sp,sp,40
   869a0:	f800283a 	ret
   869a4:	04400404 	movi	r17,16
   869a8:	897fd72e 	bgeu	r17,r5,86908 <_malloc_r+0x4c>
   869ac:	00800304 	movi	r2,12
   869b0:	90800015 	stw	r2,0(r18)
   869b4:	0005883a 	mov	r2,zero
   869b8:	003fee06 	br	86974 <_malloc_r+0xb8>
   869bc:	8808d27a 	srli	r4,r17,9
   869c0:	20007126 	beq	r4,zero,86b88 <_malloc_r+0x2cc>
   869c4:	00800104 	movi	r2,4
   869c8:	1100eb36 	bltu	r2,r4,86d78 <_malloc_r+0x4bc>
   869cc:	8808d1ba 	srli	r4,r17,6
   869d0:	21000e04 	addi	r4,r4,56
   869d4:	210b883a 	add	r5,r4,r4
   869d8:	294b883a 	add	r5,r5,r5
   869dc:	294b883a 	add	r5,r5,r5
   869e0:	04c00274 	movhi	r19,9
   869e4:	9cfcb704 	addi	r19,r19,-3364
   869e8:	994b883a 	add	r5,r19,r5
   869ec:	2c000317 	ldw	r16,12(r5)
   869f0:	2c000e26 	beq	r5,r16,86a2c <_malloc_r+0x170>
   869f4:	80c00117 	ldw	r3,4(r16)
   869f8:	01ffff04 	movi	r7,-4
   869fc:	018003c4 	movi	r6,15
   86a00:	19c6703a 	and	r3,r3,r7
   86a04:	1c45c83a 	sub	r2,r3,r17
   86a08:	30800716 	blt	r6,r2,86a28 <_malloc_r+0x16c>
   86a0c:	1000610e 	bge	r2,zero,86b94 <_malloc_r+0x2d8>
   86a10:	84000317 	ldw	r16,12(r16)
   86a14:	2c000526 	beq	r5,r16,86a2c <_malloc_r+0x170>
   86a18:	80c00117 	ldw	r3,4(r16)
   86a1c:	19c6703a 	and	r3,r3,r7
   86a20:	1c45c83a 	sub	r2,r3,r17
   86a24:	30bff90e 	bge	r6,r2,86a0c <_malloc_r+0x150>
   86a28:	213fffc4 	addi	r4,r4,-1
   86a2c:	21000044 	addi	r4,r4,1
   86a30:	9c000417 	ldw	r16,16(r19)
   86a34:	00c00274 	movhi	r3,9
   86a38:	18fcb704 	addi	r3,r3,-3364
   86a3c:	1a400204 	addi	r9,r3,8
   86a40:	8240ff26 	beq	r16,r9,86e40 <_malloc_r+0x584>
   86a44:	81400117 	ldw	r5,4(r16)
   86a48:	00bfff04 	movi	r2,-4
   86a4c:	018003c4 	movi	r6,15
   86a50:	2884703a 	and	r2,r5,r2
   86a54:	144bc83a 	sub	r5,r2,r17
   86a58:	3140ea16 	blt	r6,r5,86e04 <_malloc_r+0x548>
   86a5c:	1a400515 	stw	r9,20(r3)
   86a60:	1a400415 	stw	r9,16(r3)
   86a64:	2800570e 	bge	r5,zero,86bc4 <_malloc_r+0x308>
   86a68:	01407fc4 	movi	r5,511
   86a6c:	2880ca36 	bltu	r5,r2,86d98 <_malloc_r+0x4dc>
   86a70:	1004d0fa 	srli	r2,r2,3
   86a74:	02000044 	movi	r8,1
   86a78:	19c00117 	ldw	r7,4(r3)
   86a7c:	108b883a 	add	r5,r2,r2
   86a80:	294b883a 	add	r5,r5,r5
   86a84:	1005d0ba 	srai	r2,r2,2
   86a88:	294b883a 	add	r5,r5,r5
   86a8c:	28cb883a 	add	r5,r5,r3
   86a90:	29800217 	ldw	r6,8(r5)
   86a94:	4084983a 	sll	r2,r8,r2
   86a98:	81400315 	stw	r5,12(r16)
   86a9c:	81800215 	stw	r6,8(r16)
   86aa0:	11c4b03a 	or	r2,r2,r7
   86aa4:	18800115 	stw	r2,4(r3)
   86aa8:	2c000215 	stw	r16,8(r5)
   86aac:	34000315 	stw	r16,12(r6)
   86ab0:	200bd0ba 	srai	r5,r4,2
   86ab4:	00c00044 	movi	r3,1
   86ab8:	194a983a 	sll	r5,r3,r5
   86abc:	11404936 	bltu	r2,r5,86be4 <_malloc_r+0x328>
   86ac0:	1146703a 	and	r3,r2,r5
   86ac4:	18000a1e 	bne	r3,zero,86af0 <_malloc_r+0x234>
   86ac8:	00ffff04 	movi	r3,-4
   86acc:	294b883a 	add	r5,r5,r5
   86ad0:	20c8703a 	and	r4,r4,r3
   86ad4:	1146703a 	and	r3,r2,r5
   86ad8:	21000104 	addi	r4,r4,4
   86adc:	1800041e 	bne	r3,zero,86af0 <_malloc_r+0x234>
   86ae0:	294b883a 	add	r5,r5,r5
   86ae4:	1146703a 	and	r3,r2,r5
   86ae8:	21000104 	addi	r4,r4,4
   86aec:	183ffc26 	beq	r3,zero,86ae0 <_malloc_r+0x224>
   86af0:	023fff04 	movi	r8,-4
   86af4:	01c003c4 	movi	r7,15
   86af8:	2105883a 	add	r2,r4,r4
   86afc:	1085883a 	add	r2,r2,r2
   86b00:	1085883a 	add	r2,r2,r2
   86b04:	9899883a 	add	r12,r19,r2
   86b08:	62800304 	addi	r10,r12,12
   86b0c:	2017883a 	mov	r11,r4
   86b10:	54000017 	ldw	r16,0(r10)
   86b14:	51bffd04 	addi	r6,r10,-12
   86b18:	8180041e 	bne	r16,r6,86b2c <_malloc_r+0x270>
   86b1c:	0000ca06 	br	86e48 <_malloc_r+0x58c>
   86b20:	10001c0e 	bge	r2,zero,86b94 <_malloc_r+0x2d8>
   86b24:	84000317 	ldw	r16,12(r16)
   86b28:	8180c726 	beq	r16,r6,86e48 <_malloc_r+0x58c>
   86b2c:	80c00117 	ldw	r3,4(r16)
   86b30:	1a06703a 	and	r3,r3,r8
   86b34:	1c45c83a 	sub	r2,r3,r17
   86b38:	38bff90e 	bge	r7,r2,86b20 <_malloc_r+0x264>
   86b3c:	81000317 	ldw	r4,12(r16)
   86b40:	81400217 	ldw	r5,8(r16)
   86b44:	8447883a 	add	r3,r16,r17
   86b48:	8c400054 	ori	r17,r17,1
   86b4c:	29000315 	stw	r4,12(r5)
   86b50:	21400215 	stw	r5,8(r4)
   86b54:	84400115 	stw	r17,4(r16)
   86b58:	1889883a 	add	r4,r3,r2
   86b5c:	11400054 	ori	r5,r2,1
   86b60:	98c00515 	stw	r3,20(r19)
   86b64:	98c00415 	stw	r3,16(r19)
   86b68:	20800015 	stw	r2,0(r4)
   86b6c:	1a400315 	stw	r9,12(r3)
   86b70:	1a400215 	stw	r9,8(r3)
   86b74:	19400115 	stw	r5,4(r3)
   86b78:	9009883a 	mov	r4,r18
   86b7c:	008b9700 	call	8b970 <__malloc_unlock>
   86b80:	80800204 	addi	r2,r16,8
   86b84:	003f7b06 	br	86974 <_malloc_r+0xb8>
   86b88:	8808d0fa 	srli	r4,r17,3
   86b8c:	210b883a 	add	r5,r4,r4
   86b90:	003f9106 	br	869d8 <_malloc_r+0x11c>
   86b94:	80c7883a 	add	r3,r16,r3
   86b98:	19400117 	ldw	r5,4(r3)
   86b9c:	80800317 	ldw	r2,12(r16)
   86ba0:	81000217 	ldw	r4,8(r16)
   86ba4:	29400054 	ori	r5,r5,1
   86ba8:	19400115 	stw	r5,4(r3)
   86bac:	20800315 	stw	r2,12(r4)
   86bb0:	11000215 	stw	r4,8(r2)
   86bb4:	9009883a 	mov	r4,r18
   86bb8:	008b9700 	call	8b970 <__malloc_unlock>
   86bbc:	80800204 	addi	r2,r16,8
   86bc0:	003f6c06 	br	86974 <_malloc_r+0xb8>
   86bc4:	8085883a 	add	r2,r16,r2
   86bc8:	10c00117 	ldw	r3,4(r2)
   86bcc:	9009883a 	mov	r4,r18
   86bd0:	18c00054 	ori	r3,r3,1
   86bd4:	10c00115 	stw	r3,4(r2)
   86bd8:	008b9700 	call	8b970 <__malloc_unlock>
   86bdc:	80800204 	addi	r2,r16,8
   86be0:	003f6406 	br	86974 <_malloc_r+0xb8>
   86be4:	9c000217 	ldw	r16,8(r19)
   86be8:	00bfff04 	movi	r2,-4
   86bec:	85400117 	ldw	r21,4(r16)
   86bf0:	a8aa703a 	and	r21,r21,r2
   86bf4:	ac400336 	bltu	r21,r17,86c04 <_malloc_r+0x348>
   86bf8:	ac45c83a 	sub	r2,r21,r17
   86bfc:	00c003c4 	movi	r3,15
   86c00:	18805316 	blt	r3,r2,86d50 <_malloc_r+0x494>
   86c04:	d5e8b417 	ldw	r23,-23856(gp)
   86c08:	d0e00317 	ldw	r3,-32756(gp)
   86c0c:	00bfffc4 	movi	r2,-1
   86c10:	8579883a 	add	fp,r16,r21
   86c14:	8def883a 	add	r23,r17,r23
   86c18:	1880d226 	beq	r3,r2,86f64 <_malloc_r+0x6a8>
   86c1c:	bdc403c4 	addi	r23,r23,4111
   86c20:	00bc0004 	movi	r2,-4096
   86c24:	b8ae703a 	and	r23,r23,r2
   86c28:	9009883a 	mov	r4,r18
   86c2c:	b80b883a 	mov	r5,r23
   86c30:	0088b900 	call	88b90 <_sbrk_r>
   86c34:	1029883a 	mov	r20,r2
   86c38:	00bfffc4 	movi	r2,-1
   86c3c:	a080d126 	beq	r20,r2,86f84 <_malloc_r+0x6c8>
   86c40:	a7009f36 	bltu	r20,fp,86ec0 <_malloc_r+0x604>
   86c44:	05800274 	movhi	r22,9
   86c48:	b58af904 	addi	r22,r22,11236
   86c4c:	b0800017 	ldw	r2,0(r22)
   86c50:	b885883a 	add	r2,r23,r2
   86c54:	b0800015 	stw	r2,0(r22)
   86c58:	e500cf26 	beq	fp,r20,86f98 <_malloc_r+0x6dc>
   86c5c:	d1200317 	ldw	r4,-32756(gp)
   86c60:	00ffffc4 	movi	r3,-1
   86c64:	20c0e026 	beq	r4,r3,86fe8 <_malloc_r+0x72c>
   86c68:	a739c83a 	sub	fp,r20,fp
   86c6c:	1705883a 	add	r2,r2,fp
   86c70:	b0800015 	stw	r2,0(r22)
   86c74:	a08001cc 	andi	r2,r20,7
   86c78:	1000a526 	beq	r2,zero,86f10 <_malloc_r+0x654>
   86c7c:	a0a9c83a 	sub	r20,r20,r2
   86c80:	00c40204 	movi	r3,4104
   86c84:	a5000204 	addi	r20,r20,8
   86c88:	1885c83a 	sub	r2,r3,r2
   86c8c:	a5c7883a 	add	r3,r20,r23
   86c90:	18c3ffcc 	andi	r3,r3,4095
   86c94:	10efc83a 	sub	r23,r2,r3
   86c98:	9009883a 	mov	r4,r18
   86c9c:	b80b883a 	mov	r5,r23
   86ca0:	0088b900 	call	88b90 <_sbrk_r>
   86ca4:	00ffffc4 	movi	r3,-1
   86ca8:	10c0cc26 	beq	r2,r3,86fdc <_malloc_r+0x720>
   86cac:	1505c83a 	sub	r2,r2,r20
   86cb0:	b887883a 	add	r3,r23,r2
   86cb4:	18c00054 	ori	r3,r3,1
   86cb8:	b0800017 	ldw	r2,0(r22)
   86cbc:	9d000215 	stw	r20,8(r19)
   86cc0:	a0c00115 	stw	r3,4(r20)
   86cc4:	b885883a 	add	r2,r23,r2
   86cc8:	b0800015 	stw	r2,0(r22)
   86ccc:	84c00e26 	beq	r16,r19,86d08 <_malloc_r+0x44c>
   86cd0:	00c003c4 	movi	r3,15
   86cd4:	1d40902e 	bgeu	r3,r21,86f18 <_malloc_r+0x65c>
   86cd8:	ad7ffd04 	addi	r21,r21,-12
   86cdc:	013ffe04 	movi	r4,-8
   86ce0:	a908703a 	and	r4,r21,r4
   86ce4:	810b883a 	add	r5,r16,r4
   86ce8:	01800144 	movi	r6,5
   86cec:	29800115 	stw	r6,4(r5)
   86cf0:	29800215 	stw	r6,8(r5)
   86cf4:	81400117 	ldw	r5,4(r16)
   86cf8:	2940004c 	andi	r5,r5,1
   86cfc:	214ab03a 	or	r5,r4,r5
   86d00:	81400115 	stw	r5,4(r16)
   86d04:	1900ae36 	bltu	r3,r4,86fc0 <_malloc_r+0x704>
   86d08:	d0e8b317 	ldw	r3,-23860(gp)
   86d0c:	1880012e 	bgeu	r3,r2,86d14 <_malloc_r+0x458>
   86d10:	d0a8b315 	stw	r2,-23860(gp)
   86d14:	d0e8b217 	ldw	r3,-23864(gp)
   86d18:	9c000217 	ldw	r16,8(r19)
   86d1c:	1880012e 	bgeu	r3,r2,86d24 <_malloc_r+0x468>
   86d20:	d0a8b215 	stw	r2,-23864(gp)
   86d24:	80c00117 	ldw	r3,4(r16)
   86d28:	00bfff04 	movi	r2,-4
   86d2c:	1886703a 	and	r3,r3,r2
   86d30:	1c45c83a 	sub	r2,r3,r17
   86d34:	1c400236 	bltu	r3,r17,86d40 <_malloc_r+0x484>
   86d38:	00c003c4 	movi	r3,15
   86d3c:	18800416 	blt	r3,r2,86d50 <_malloc_r+0x494>
   86d40:	9009883a 	mov	r4,r18
   86d44:	008b9700 	call	8b970 <__malloc_unlock>
   86d48:	0005883a 	mov	r2,zero
   86d4c:	003f0906 	br	86974 <_malloc_r+0xb8>
   86d50:	88c00054 	ori	r3,r17,1
   86d54:	10800054 	ori	r2,r2,1
   86d58:	80c00115 	stw	r3,4(r16)
   86d5c:	8463883a 	add	r17,r16,r17
   86d60:	88800115 	stw	r2,4(r17)
   86d64:	9009883a 	mov	r4,r18
   86d68:	9c400215 	stw	r17,8(r19)
   86d6c:	008b9700 	call	8b970 <__malloc_unlock>
   86d70:	80800204 	addi	r2,r16,8
   86d74:	003eff06 	br	86974 <_malloc_r+0xb8>
   86d78:	00800504 	movi	r2,20
   86d7c:	1100492e 	bgeu	r2,r4,86ea4 <_malloc_r+0x5e8>
   86d80:	00801504 	movi	r2,84
   86d84:	11005c36 	bltu	r2,r4,86ef8 <_malloc_r+0x63c>
   86d88:	8808d33a 	srli	r4,r17,12
   86d8c:	21001b84 	addi	r4,r4,110
   86d90:	210b883a 	add	r5,r4,r4
   86d94:	003f1006 	br	869d8 <_malloc_r+0x11c>
   86d98:	1006d27a 	srli	r3,r2,9
   86d9c:	01400104 	movi	r5,4
   86da0:	28c0432e 	bgeu	r5,r3,86eb0 <_malloc_r+0x5f4>
   86da4:	01400504 	movi	r5,20
   86da8:	28c07036 	bltu	r5,r3,86f6c <_malloc_r+0x6b0>
   86dac:	194016c4 	addi	r5,r3,91
   86db0:	294d883a 	add	r6,r5,r5
   86db4:	318d883a 	add	r6,r6,r6
   86db8:	318d883a 	add	r6,r6,r6
   86dbc:	998d883a 	add	r6,r19,r6
   86dc0:	30c00217 	ldw	r3,8(r6)
   86dc4:	01c00274 	movhi	r7,9
   86dc8:	39fcb704 	addi	r7,r7,-3364
   86dcc:	19805726 	beq	r3,r6,86f2c <_malloc_r+0x670>
   86dd0:	01ffff04 	movi	r7,-4
   86dd4:	19400117 	ldw	r5,4(r3)
   86dd8:	29ca703a 	and	r5,r5,r7
   86ddc:	1140022e 	bgeu	r2,r5,86de8 <_malloc_r+0x52c>
   86de0:	18c00217 	ldw	r3,8(r3)
   86de4:	30fffb1e 	bne	r6,r3,86dd4 <_malloc_r+0x518>
   86de8:	19400317 	ldw	r5,12(r3)
   86dec:	98800117 	ldw	r2,4(r19)
   86df0:	81400315 	stw	r5,12(r16)
   86df4:	80c00215 	stw	r3,8(r16)
   86df8:	2c000215 	stw	r16,8(r5)
   86dfc:	1c000315 	stw	r16,12(r3)
   86e00:	003f2b06 	br	86ab0 <_malloc_r+0x1f4>
   86e04:	8445883a 	add	r2,r16,r17
   86e08:	8c400054 	ori	r17,r17,1
   86e0c:	18800515 	stw	r2,20(r3)
   86e10:	18800415 	stw	r2,16(r3)
   86e14:	29000054 	ori	r4,r5,1
   86e18:	1147883a 	add	r3,r2,r5
   86e1c:	84400115 	stw	r17,4(r16)
   86e20:	11000115 	stw	r4,4(r2)
   86e24:	12400315 	stw	r9,12(r2)
   86e28:	12400215 	stw	r9,8(r2)
   86e2c:	19400015 	stw	r5,0(r3)
   86e30:	9009883a 	mov	r4,r18
   86e34:	008b9700 	call	8b970 <__malloc_unlock>
   86e38:	80800204 	addi	r2,r16,8
   86e3c:	003ecd06 	br	86974 <_malloc_r+0xb8>
   86e40:	18800117 	ldw	r2,4(r3)
   86e44:	003f1a06 	br	86ab0 <_malloc_r+0x1f4>
   86e48:	5ac00044 	addi	r11,r11,1
   86e4c:	588000cc 	andi	r2,r11,3
   86e50:	52800204 	addi	r10,r10,8
   86e54:	103f2e1e 	bne	r2,zero,86b10 <_malloc_r+0x254>
   86e58:	20c000cc 	andi	r3,r4,3
   86e5c:	60bffe04 	addi	r2,r12,-8
   86e60:	18006f26 	beq	r3,zero,87020 <_malloc_r+0x764>
   86e64:	63000017 	ldw	r12,0(r12)
   86e68:	213fffc4 	addi	r4,r4,-1
   86e6c:	60bffa26 	beq	r12,r2,86e58 <_malloc_r+0x59c>
   86e70:	98800117 	ldw	r2,4(r19)
   86e74:	294b883a 	add	r5,r5,r5
   86e78:	117f5a36 	bltu	r2,r5,86be4 <_malloc_r+0x328>
   86e7c:	283f5926 	beq	r5,zero,86be4 <_malloc_r+0x328>
   86e80:	1146703a 	and	r3,r2,r5
   86e84:	18001626 	beq	r3,zero,86ee0 <_malloc_r+0x624>
   86e88:	5809883a 	mov	r4,r11
   86e8c:	003f1a06 	br	86af8 <_malloc_r+0x23c>
   86e90:	80800204 	addi	r2,r16,8
   86e94:	84000517 	ldw	r16,20(r16)
   86e98:	143ea81e 	bne	r2,r16,8693c <_malloc_r+0x80>
   86e9c:	21000084 	addi	r4,r4,2
   86ea0:	003ee306 	br	86a30 <_malloc_r+0x174>
   86ea4:	210016c4 	addi	r4,r4,91
   86ea8:	210b883a 	add	r5,r4,r4
   86eac:	003eca06 	br	869d8 <_malloc_r+0x11c>
   86eb0:	100ad1ba 	srli	r5,r2,6
   86eb4:	29400e04 	addi	r5,r5,56
   86eb8:	294d883a 	add	r6,r5,r5
   86ebc:	003fbd06 	br	86db4 <_malloc_r+0x4f8>
   86ec0:	84ff6026 	beq	r16,r19,86c44 <_malloc_r+0x388>
   86ec4:	00800274 	movhi	r2,9
   86ec8:	10bcb704 	addi	r2,r2,-3364
   86ecc:	14000217 	ldw	r16,8(r2)
   86ed0:	00bfff04 	movi	r2,-4
   86ed4:	80c00117 	ldw	r3,4(r16)
   86ed8:	1886703a 	and	r3,r3,r2
   86edc:	003f9406 	br	86d30 <_malloc_r+0x474>
   86ee0:	294b883a 	add	r5,r5,r5
   86ee4:	1146703a 	and	r3,r2,r5
   86ee8:	5ac00104 	addi	r11,r11,4
   86eec:	183ffc26 	beq	r3,zero,86ee0 <_malloc_r+0x624>
   86ef0:	5809883a 	mov	r4,r11
   86ef4:	003f0006 	br	86af8 <_malloc_r+0x23c>
   86ef8:	00805504 	movi	r2,340
   86efc:	11001336 	bltu	r2,r4,86f4c <_malloc_r+0x690>
   86f00:	8808d3fa 	srli	r4,r17,15
   86f04:	21001dc4 	addi	r4,r4,119
   86f08:	210b883a 	add	r5,r4,r4
   86f0c:	003eb206 	br	869d8 <_malloc_r+0x11c>
   86f10:	00840004 	movi	r2,4096
   86f14:	003f5d06 	br	86c8c <_malloc_r+0x3d0>
   86f18:	00800044 	movi	r2,1
   86f1c:	a0800115 	stw	r2,4(r20)
   86f20:	a021883a 	mov	r16,r20
   86f24:	0007883a 	mov	r3,zero
   86f28:	003f8106 	br	86d30 <_malloc_r+0x474>
   86f2c:	280bd0ba 	srai	r5,r5,2
   86f30:	01800044 	movi	r6,1
   86f34:	38800117 	ldw	r2,4(r7)
   86f38:	314c983a 	sll	r6,r6,r5
   86f3c:	180b883a 	mov	r5,r3
   86f40:	3084b03a 	or	r2,r6,r2
   86f44:	38800115 	stw	r2,4(r7)
   86f48:	003fa906 	br	86df0 <_malloc_r+0x534>
   86f4c:	00815504 	movi	r2,1364
   86f50:	11001836 	bltu	r2,r4,86fb4 <_malloc_r+0x6f8>
   86f54:	8808d4ba 	srli	r4,r17,18
   86f58:	21001f04 	addi	r4,r4,124
   86f5c:	210b883a 	add	r5,r4,r4
   86f60:	003e9d06 	br	869d8 <_malloc_r+0x11c>
   86f64:	bdc00404 	addi	r23,r23,16
   86f68:	003f2f06 	br	86c28 <_malloc_r+0x36c>
   86f6c:	01401504 	movi	r5,84
   86f70:	28c01f36 	bltu	r5,r3,86ff0 <_malloc_r+0x734>
   86f74:	100ad33a 	srli	r5,r2,12
   86f78:	29401b84 	addi	r5,r5,110
   86f7c:	294d883a 	add	r6,r5,r5
   86f80:	003f8c06 	br	86db4 <_malloc_r+0x4f8>
   86f84:	9c000217 	ldw	r16,8(r19)
   86f88:	00bfff04 	movi	r2,-4
   86f8c:	80c00117 	ldw	r3,4(r16)
   86f90:	1886703a 	and	r3,r3,r2
   86f94:	003f6606 	br	86d30 <_malloc_r+0x474>
   86f98:	e0c3ffcc 	andi	r3,fp,4095
   86f9c:	183f2f1e 	bne	r3,zero,86c5c <_malloc_r+0x3a0>
   86fa0:	98c00217 	ldw	r3,8(r19)
   86fa4:	bd49883a 	add	r4,r23,r21
   86fa8:	21000054 	ori	r4,r4,1
   86fac:	19000115 	stw	r4,4(r3)
   86fb0:	003f5506 	br	86d08 <_malloc_r+0x44c>
   86fb4:	01403f04 	movi	r5,252
   86fb8:	01001f84 	movi	r4,126
   86fbc:	003e8606 	br	869d8 <_malloc_r+0x11c>
   86fc0:	9009883a 	mov	r4,r18
   86fc4:	81400204 	addi	r5,r16,8
   86fc8:	0085d240 	call	85d24 <_free_r>
   86fcc:	00800274 	movhi	r2,9
   86fd0:	108af904 	addi	r2,r2,11236
   86fd4:	10800017 	ldw	r2,0(r2)
   86fd8:	003f4b06 	br	86d08 <_malloc_r+0x44c>
   86fdc:	00c00044 	movi	r3,1
   86fe0:	002f883a 	mov	r23,zero
   86fe4:	003f3406 	br	86cb8 <_malloc_r+0x3fc>
   86fe8:	d5200315 	stw	r20,-32756(gp)
   86fec:	003f2106 	br	86c74 <_malloc_r+0x3b8>
   86ff0:	01405504 	movi	r5,340
   86ff4:	28c00436 	bltu	r5,r3,87008 <_malloc_r+0x74c>
   86ff8:	100ad3fa 	srli	r5,r2,15
   86ffc:	29401dc4 	addi	r5,r5,119
   87000:	294d883a 	add	r6,r5,r5
   87004:	003f6b06 	br	86db4 <_malloc_r+0x4f8>
   87008:	01415504 	movi	r5,1364
   8700c:	28c00936 	bltu	r5,r3,87034 <_malloc_r+0x778>
   87010:	100ad4ba 	srli	r5,r2,18
   87014:	29401f04 	addi	r5,r5,124
   87018:	294d883a 	add	r6,r5,r5
   8701c:	003f6506 	br	86db4 <_malloc_r+0x4f8>
   87020:	98800117 	ldw	r2,4(r19)
   87024:	0146303a 	nor	r3,zero,r5
   87028:	1884703a 	and	r2,r3,r2
   8702c:	98800115 	stw	r2,4(r19)
   87030:	003f9006 	br	86e74 <_malloc_r+0x5b8>
   87034:	01803f04 	movi	r6,252
   87038:	01401f84 	movi	r5,126
   8703c:	003f5d06 	br	86db4 <_malloc_r+0x4f8>

00087040 <memchr>:
   87040:	008000c4 	movi	r2,3
   87044:	29403fcc 	andi	r5,r5,255
   87048:	1180282e 	bgeu	r2,r6,870ec <memchr+0xac>
   8704c:	2086703a 	and	r3,r4,r2
   87050:	1800351e 	bne	r3,zero,87128 <memchr+0xe8>
   87054:	2816923a 	slli	r11,r5,8
   87058:	2093883a 	add	r9,r4,r2
   8705c:	22000084 	addi	r8,r4,2
   87060:	5957883a 	add	r11,r11,r5
   87064:	5816923a 	slli	r11,r11,8
   87068:	20c00044 	addi	r3,r4,1
   8706c:	037fbff4 	movhi	r13,65279
   87070:	6b7fbfc4 	addi	r13,r13,-257
   87074:	5957883a 	add	r11,r11,r5
   87078:	5816923a 	slli	r11,r11,8
   8707c:	03202074 	movhi	r12,32897
   87080:	63202004 	addi	r12,r12,-32640
   87084:	101d883a 	mov	r14,r2
   87088:	5957883a 	add	r11,r11,r5
   8708c:	21c00017 	ldw	r7,0(r4)
   87090:	31bfff04 	addi	r6,r6,-4
   87094:	1805883a 	mov	r2,r3
   87098:	3acef03a 	xor	r7,r7,r11
   8709c:	3b55883a 	add	r10,r7,r13
   870a0:	01ce303a 	nor	r7,zero,r7
   870a4:	51ce703a 	and	r7,r10,r7
   870a8:	3b0e703a 	and	r7,r7,r12
   870ac:	38000a26 	beq	r7,zero,870d8 <memchr+0x98>
   870b0:	21c00003 	ldbu	r7,0(r4)
   870b4:	39401e26 	beq	r7,r5,87130 <memchr+0xf0>
   870b8:	19c00003 	ldbu	r7,0(r3)
   870bc:	39401926 	beq	r7,r5,87124 <memchr+0xe4>
   870c0:	41c00003 	ldbu	r7,0(r8)
   870c4:	4005883a 	mov	r2,r8
   870c8:	39401626 	beq	r7,r5,87124 <memchr+0xe4>
   870cc:	49c00003 	ldbu	r7,0(r9)
   870d0:	4805883a 	mov	r2,r9
   870d4:	39401326 	beq	r7,r5,87124 <memchr+0xe4>
   870d8:	21000104 	addi	r4,r4,4
   870dc:	4a400104 	addi	r9,r9,4
   870e0:	42000104 	addi	r8,r8,4
   870e4:	18c00104 	addi	r3,r3,4
   870e8:	71bfe836 	bltu	r14,r6,8708c <memchr+0x4c>
   870ec:	2005883a 	mov	r2,r4
   870f0:	30000a26 	beq	r6,zero,8711c <memchr+0xdc>
   870f4:	10c00003 	ldbu	r3,0(r2)
   870f8:	19400a26 	beq	r3,r5,87124 <memchr+0xe4>
   870fc:	10c00044 	addi	r3,r2,1
   87100:	118d883a 	add	r6,r2,r6
   87104:	00000306 	br	87114 <memchr+0xd4>
   87108:	11000003 	ldbu	r4,0(r2)
   8710c:	18c00044 	addi	r3,r3,1
   87110:	21400426 	beq	r4,r5,87124 <memchr+0xe4>
   87114:	1805883a 	mov	r2,r3
   87118:	19bffb1e 	bne	r3,r6,87108 <memchr+0xc8>
   8711c:	0005883a 	mov	r2,zero
   87120:	f800283a 	ret
   87124:	f800283a 	ret
   87128:	2005883a 	mov	r2,r4
   8712c:	003ff106 	br	870f4 <memchr+0xb4>
   87130:	2005883a 	mov	r2,r4
   87134:	f800283a 	ret

00087138 <memcpy>:
   87138:	defffb04 	addi	sp,sp,-20
   8713c:	dc000015 	stw	r16,0(sp)
   87140:	dfc00415 	stw	ra,16(sp)
   87144:	dcc00315 	stw	r19,12(sp)
   87148:	dc800215 	stw	r18,8(sp)
   8714c:	dc400115 	stw	r17,4(sp)
   87150:	00c003c4 	movi	r3,15
   87154:	2021883a 	mov	r16,r4
   87158:	3005883a 	mov	r2,r6
   8715c:	1980032e 	bgeu	r3,r6,8716c <memcpy+0x34>
   87160:	2906b03a 	or	r3,r5,r4
   87164:	18c000cc 	andi	r3,r3,3
   87168:	18001026 	beq	r3,zero,871ac <memcpy+0x74>
   8716c:	8007883a 	mov	r3,r16
   87170:	288f883a 	add	r7,r5,r2
   87174:	10000526 	beq	r2,zero,8718c <memcpy+0x54>
   87178:	29800003 	ldbu	r6,0(r5)
   8717c:	18c00044 	addi	r3,r3,1
   87180:	29400044 	addi	r5,r5,1
   87184:	19bfffc5 	stb	r6,-1(r3)
   87188:	29fffb1e 	bne	r5,r7,87178 <memcpy+0x40>
   8718c:	8005883a 	mov	r2,r16
   87190:	dfc00417 	ldw	ra,16(sp)
   87194:	dcc00317 	ldw	r19,12(sp)
   87198:	dc800217 	ldw	r18,8(sp)
   8719c:	dc400117 	ldw	r17,4(sp)
   871a0:	dc000017 	ldw	r16,0(sp)
   871a4:	dec00504 	addi	sp,sp,20
   871a8:	f800283a 	ret
   871ac:	32bffc04 	addi	r10,r6,-16
   871b0:	5014d13a 	srli	r10,r10,4
   871b4:	20800404 	addi	r2,r4,16
   871b8:	2007883a 	mov	r3,r4
   871bc:	5008913a 	slli	r4,r10,4
   871c0:	280f883a 	mov	r7,r5
   871c4:	1105883a 	add	r2,r2,r4
   871c8:	3a000017 	ldw	r8,0(r7)
   871cc:	18c00404 	addi	r3,r3,16
   871d0:	39c00404 	addi	r7,r7,16
   871d4:	1a3ffc15 	stw	r8,-16(r3)
   871d8:	3a3ffd17 	ldw	r8,-12(r7)
   871dc:	1a3ffd15 	stw	r8,-12(r3)
   871e0:	3a3ffe17 	ldw	r8,-8(r7)
   871e4:	1a3ffe15 	stw	r8,-8(r3)
   871e8:	3a3fff17 	ldw	r8,-4(r7)
   871ec:	1a3fff15 	stw	r8,-4(r3)
   871f0:	18bff51e 	bne	r3,r2,871c8 <memcpy+0x90>
   871f4:	52800044 	addi	r10,r10,1
   871f8:	5014913a 	slli	r10,r10,4
   871fc:	308003cc 	andi	r2,r6,15
   87200:	010000c4 	movi	r4,3
   87204:	8287883a 	add	r3,r16,r10
   87208:	2a95883a 	add	r10,r5,r10
   8720c:	2080182e 	bgeu	r4,r2,87270 <memcpy+0x138>
   87210:	147fff04 	addi	r17,r2,-4
   87214:	8808d0ba 	srli	r4,r17,2
   87218:	1a400104 	addi	r9,r3,4
   8721c:	180d883a 	mov	r6,r3
   87220:	2105883a 	add	r2,r4,r4
   87224:	1085883a 	add	r2,r2,r2
   87228:	4893883a 	add	r9,r9,r2
   8722c:	500f883a 	mov	r7,r10
   87230:	3a000017 	ldw	r8,0(r7)
   87234:	31800104 	addi	r6,r6,4
   87238:	39c00104 	addi	r7,r7,4
   8723c:	323fff15 	stw	r8,-4(r6)
   87240:	327ffb1e 	bne	r6,r9,87230 <memcpy+0xf8>
   87244:	20800044 	addi	r2,r4,1
   87248:	1085883a 	add	r2,r2,r2
   8724c:	1085883a 	add	r2,r2,r2
   87250:	017fff04 	movi	r5,-4
   87254:	18a5883a 	add	r18,r3,r2
   87258:	50a7883a 	add	r19,r10,r2
   8725c:	0081c900 	call	81c90 <__mulsi3>
   87260:	1445883a 	add	r2,r2,r17
   87264:	980b883a 	mov	r5,r19
   87268:	9007883a 	mov	r3,r18
   8726c:	003fc006 	br	87170 <memcpy+0x38>
   87270:	500b883a 	mov	r5,r10
   87274:	003fbe06 	br	87170 <memcpy+0x38>

00087278 <memmove>:
   87278:	defffb04 	addi	sp,sp,-20
   8727c:	dc000015 	stw	r16,0(sp)
   87280:	dfc00415 	stw	ra,16(sp)
   87284:	dcc00315 	stw	r19,12(sp)
   87288:	dc800215 	stw	r18,8(sp)
   8728c:	dc400115 	stw	r17,4(sp)
   87290:	2021883a 	mov	r16,r4
   87294:	300f883a 	mov	r7,r6
   87298:	2900122e 	bgeu	r5,r4,872e4 <memmove+0x6c>
   8729c:	2987883a 	add	r3,r5,r6
   872a0:	20c0102e 	bgeu	r4,r3,872e4 <memmove+0x6c>
   872a4:	218b883a 	add	r5,r4,r6
   872a8:	1989c83a 	sub	r4,r3,r6
   872ac:	30000526 	beq	r6,zero,872c4 <memmove+0x4c>
   872b0:	18ffffc4 	addi	r3,r3,-1
   872b4:	18800003 	ldbu	r2,0(r3)
   872b8:	297fffc4 	addi	r5,r5,-1
   872bc:	28800005 	stb	r2,0(r5)
   872c0:	193ffb1e 	bne	r3,r4,872b0 <memmove+0x38>
   872c4:	8005883a 	mov	r2,r16
   872c8:	dfc00417 	ldw	ra,16(sp)
   872cc:	dcc00317 	ldw	r19,12(sp)
   872d0:	dc800217 	ldw	r18,8(sp)
   872d4:	dc400117 	ldw	r17,4(sp)
   872d8:	dc000017 	ldw	r16,0(sp)
   872dc:	dec00504 	addi	sp,sp,20
   872e0:	f800283a 	ret
   872e4:	008003c4 	movi	r2,15
   872e8:	1180422e 	bgeu	r2,r6,873f4 <memmove+0x17c>
   872ec:	2c04b03a 	or	r2,r5,r16
   872f0:	108000cc 	andi	r2,r2,3
   872f4:	10003f1e 	bne	r2,zero,873f4 <memmove+0x17c>
   872f8:	32bffc04 	addi	r10,r6,-16
   872fc:	5014d13a 	srli	r10,r10,4
   87300:	81000404 	addi	r4,r16,16
   87304:	8007883a 	mov	r3,r16
   87308:	5004913a 	slli	r2,r10,4
   8730c:	280f883a 	mov	r7,r5
   87310:	2089883a 	add	r4,r4,r2
   87314:	38800017 	ldw	r2,0(r7)
   87318:	18c00404 	addi	r3,r3,16
   8731c:	39c00404 	addi	r7,r7,16
   87320:	18bffc15 	stw	r2,-16(r3)
   87324:	38bffd17 	ldw	r2,-12(r7)
   87328:	18bffd15 	stw	r2,-12(r3)
   8732c:	38bffe17 	ldw	r2,-8(r7)
   87330:	18bffe15 	stw	r2,-8(r3)
   87334:	38bfff17 	ldw	r2,-4(r7)
   87338:	18bfff15 	stw	r2,-4(r3)
   8733c:	193ff51e 	bne	r3,r4,87314 <memmove+0x9c>
   87340:	52800044 	addi	r10,r10,1
   87344:	5014913a 	slli	r10,r10,4
   87348:	31c003cc 	andi	r7,r6,15
   8734c:	008000c4 	movi	r2,3
   87350:	8287883a 	add	r3,r16,r10
   87354:	2a95883a 	add	r10,r5,r10
   87358:	11c0282e 	bgeu	r2,r7,873fc <memmove+0x184>
   8735c:	3c7fff04 	addi	r17,r7,-4
   87360:	8808d0ba 	srli	r4,r17,2
   87364:	1a400104 	addi	r9,r3,4
   87368:	180d883a 	mov	r6,r3
   8736c:	2105883a 	add	r2,r4,r4
   87370:	1085883a 	add	r2,r2,r2
   87374:	4893883a 	add	r9,r9,r2
   87378:	5005883a 	mov	r2,r10
   8737c:	12000017 	ldw	r8,0(r2)
   87380:	31800104 	addi	r6,r6,4
   87384:	10800104 	addi	r2,r2,4
   87388:	323fff15 	stw	r8,-4(r6)
   8738c:	327ffb1e 	bne	r6,r9,8737c <memmove+0x104>
   87390:	20800044 	addi	r2,r4,1
   87394:	1085883a 	add	r2,r2,r2
   87398:	1085883a 	add	r2,r2,r2
   8739c:	017fff04 	movi	r5,-4
   873a0:	18a5883a 	add	r18,r3,r2
   873a4:	50a7883a 	add	r19,r10,r2
   873a8:	0081c900 	call	81c90 <__mulsi3>
   873ac:	144f883a 	add	r7,r2,r17
   873b0:	980b883a 	mov	r5,r19
   873b4:	9007883a 	mov	r3,r18
   873b8:	383fc226 	beq	r7,zero,872c4 <memmove+0x4c>
   873bc:	19cf883a 	add	r7,r3,r7
   873c0:	29800003 	ldbu	r6,0(r5)
   873c4:	18c00044 	addi	r3,r3,1
   873c8:	29400044 	addi	r5,r5,1
   873cc:	19bfffc5 	stb	r6,-1(r3)
   873d0:	19fffb1e 	bne	r3,r7,873c0 <memmove+0x148>
   873d4:	8005883a 	mov	r2,r16
   873d8:	dfc00417 	ldw	ra,16(sp)
   873dc:	dcc00317 	ldw	r19,12(sp)
   873e0:	dc800217 	ldw	r18,8(sp)
   873e4:	dc400117 	ldw	r17,4(sp)
   873e8:	dc000017 	ldw	r16,0(sp)
   873ec:	dec00504 	addi	sp,sp,20
   873f0:	f800283a 	ret
   873f4:	8007883a 	mov	r3,r16
   873f8:	003fef06 	br	873b8 <memmove+0x140>
   873fc:	500b883a 	mov	r5,r10
   87400:	003fed06 	br	873b8 <memmove+0x140>

00087404 <memset>:
   87404:	00c000c4 	movi	r3,3
   87408:	2005883a 	mov	r2,r4
   8740c:	29403fcc 	andi	r5,r5,255
   87410:	19802d2e 	bgeu	r3,r6,874c8 <memset+0xc4>
   87414:	20c6703a 	and	r3,r4,r3
   87418:	18002e1e 	bne	r3,zero,874d4 <memset+0xd0>
   8741c:	2806923a 	slli	r3,r5,8
   87420:	010003c4 	movi	r4,15
   87424:	3011883a 	mov	r8,r6
   87428:	1946b03a 	or	r3,r3,r5
   8742c:	180e943a 	slli	r7,r3,16
   87430:	38ceb03a 	or	r7,r7,r3
   87434:	1007883a 	mov	r3,r2
   87438:	21800f2e 	bgeu	r4,r6,87478 <memset+0x74>
   8743c:	19c00015 	stw	r7,0(r3)
   87440:	19c00115 	stw	r7,4(r3)
   87444:	19c00215 	stw	r7,8(r3)
   87448:	19c00315 	stw	r7,12(r3)
   8744c:	423ffc04 	addi	r8,r8,-16
   87450:	18c00404 	addi	r3,r3,16
   87454:	223ff936 	bltu	r4,r8,8743c <memset+0x38>
   87458:	30fffc04 	addi	r3,r6,-16
   8745c:	1806d13a 	srli	r3,r3,4
   87460:	318003cc 	andi	r6,r6,15
   87464:	010000c4 	movi	r4,3
   87468:	18c00044 	addi	r3,r3,1
   8746c:	1806913a 	slli	r3,r3,4
   87470:	10c7883a 	add	r3,r2,r3
   87474:	21800e2e 	bgeu	r4,r6,874b0 <memset+0xac>
   87478:	1813883a 	mov	r9,r3
   8747c:	3011883a 	mov	r8,r6
   87480:	010000c4 	movi	r4,3
   87484:	49c00015 	stw	r7,0(r9)
   87488:	423fff04 	addi	r8,r8,-4
   8748c:	4a400104 	addi	r9,r9,4
   87490:	223ffc36 	bltu	r4,r8,87484 <memset+0x80>
   87494:	313fff04 	addi	r4,r6,-4
   87498:	2008d0ba 	srli	r4,r4,2
   8749c:	318000cc 	andi	r6,r6,3
   874a0:	21000044 	addi	r4,r4,1
   874a4:	2109883a 	add	r4,r4,r4
   874a8:	2109883a 	add	r4,r4,r4
   874ac:	1907883a 	add	r3,r3,r4
   874b0:	30000a26 	beq	r6,zero,874dc <memset+0xd8>
   874b4:	198d883a 	add	r6,r3,r6
   874b8:	19400005 	stb	r5,0(r3)
   874bc:	18c00044 	addi	r3,r3,1
   874c0:	19bffd1e 	bne	r3,r6,874b8 <memset+0xb4>
   874c4:	f800283a 	ret
   874c8:	2007883a 	mov	r3,r4
   874cc:	303ff91e 	bne	r6,zero,874b4 <memset+0xb0>
   874d0:	00000206 	br	874dc <memset+0xd8>
   874d4:	2007883a 	mov	r3,r4
   874d8:	003ff606 	br	874b4 <memset+0xb0>
   874dc:	f800283a 	ret

000874e0 <_Balloc>:
   874e0:	20801317 	ldw	r2,76(r4)
   874e4:	defffc04 	addi	sp,sp,-16
   874e8:	dc400115 	stw	r17,4(sp)
   874ec:	dc000015 	stw	r16,0(sp)
   874f0:	dfc00315 	stw	ra,12(sp)
   874f4:	dc800215 	stw	r18,8(sp)
   874f8:	2023883a 	mov	r17,r4
   874fc:	2821883a 	mov	r16,r5
   87500:	10000f26 	beq	r2,zero,87540 <_Balloc+0x60>
   87504:	8407883a 	add	r3,r16,r16
   87508:	18c7883a 	add	r3,r3,r3
   8750c:	10c7883a 	add	r3,r2,r3
   87510:	18800017 	ldw	r2,0(r3)
   87514:	10001126 	beq	r2,zero,8755c <_Balloc+0x7c>
   87518:	11000017 	ldw	r4,0(r2)
   8751c:	19000015 	stw	r4,0(r3)
   87520:	10000415 	stw	zero,16(r2)
   87524:	10000315 	stw	zero,12(r2)
   87528:	dfc00317 	ldw	ra,12(sp)
   8752c:	dc800217 	ldw	r18,8(sp)
   87530:	dc400117 	ldw	r17,4(sp)
   87534:	dc000017 	ldw	r16,0(sp)
   87538:	dec00404 	addi	sp,sp,16
   8753c:	f800283a 	ret
   87540:	01400104 	movi	r5,4
   87544:	01800404 	movi	r6,16
   87548:	0088e440 	call	88e44 <_calloc_r>
   8754c:	88801315 	stw	r2,76(r17)
   87550:	103fec1e 	bne	r2,zero,87504 <_Balloc+0x24>
   87554:	0005883a 	mov	r2,zero
   87558:	003ff306 	br	87528 <_Balloc+0x48>
   8755c:	01400044 	movi	r5,1
   87560:	2c24983a 	sll	r18,r5,r16
   87564:	8809883a 	mov	r4,r17
   87568:	91800144 	addi	r6,r18,5
   8756c:	318d883a 	add	r6,r6,r6
   87570:	318d883a 	add	r6,r6,r6
   87574:	0088e440 	call	88e44 <_calloc_r>
   87578:	103ff626 	beq	r2,zero,87554 <_Balloc+0x74>
   8757c:	14000115 	stw	r16,4(r2)
   87580:	14800215 	stw	r18,8(r2)
   87584:	003fe606 	br	87520 <_Balloc+0x40>

00087588 <_Bfree>:
   87588:	28000826 	beq	r5,zero,875ac <_Bfree+0x24>
   8758c:	28c00117 	ldw	r3,4(r5)
   87590:	20801317 	ldw	r2,76(r4)
   87594:	18c7883a 	add	r3,r3,r3
   87598:	18c7883a 	add	r3,r3,r3
   8759c:	10c5883a 	add	r2,r2,r3
   875a0:	10c00017 	ldw	r3,0(r2)
   875a4:	28c00015 	stw	r3,0(r5)
   875a8:	11400015 	stw	r5,0(r2)
   875ac:	f800283a 	ret

000875b0 <__multadd>:
   875b0:	defff604 	addi	sp,sp,-40
   875b4:	dd400515 	stw	r21,20(sp)
   875b8:	2d400417 	ldw	r21,16(r5)
   875bc:	df000815 	stw	fp,32(sp)
   875c0:	ddc00715 	stw	r23,28(sp)
   875c4:	dd800615 	stw	r22,24(sp)
   875c8:	dd000415 	stw	r20,16(sp)
   875cc:	dc400115 	stw	r17,4(sp)
   875d0:	dc000015 	stw	r16,0(sp)
   875d4:	dfc00915 	stw	ra,36(sp)
   875d8:	dcc00315 	stw	r19,12(sp)
   875dc:	dc800215 	stw	r18,8(sp)
   875e0:	282d883a 	mov	r22,r5
   875e4:	202f883a 	mov	r23,r4
   875e8:	3029883a 	mov	r20,r6
   875ec:	3839883a 	mov	fp,r7
   875f0:	2c000504 	addi	r16,r5,20
   875f4:	0023883a 	mov	r17,zero
   875f8:	84c00017 	ldw	r19,0(r16)
   875fc:	a00b883a 	mov	r5,r20
   87600:	8c400044 	addi	r17,r17,1
   87604:	993fffcc 	andi	r4,r19,65535
   87608:	0081c900 	call	81c90 <__mulsi3>
   8760c:	1725883a 	add	r18,r2,fp
   87610:	9808d43a 	srli	r4,r19,16
   87614:	9026d43a 	srli	r19,r18,16
   87618:	a00b883a 	mov	r5,r20
   8761c:	0081c900 	call	81c90 <__mulsi3>
   87620:	988f883a 	add	r7,r19,r2
   87624:	3804943a 	slli	r2,r7,16
   87628:	94bfffcc 	andi	r18,r18,65535
   8762c:	3838d43a 	srli	fp,r7,16
   87630:	14a5883a 	add	r18,r2,r18
   87634:	84800015 	stw	r18,0(r16)
   87638:	84000104 	addi	r16,r16,4
   8763c:	8d7fee16 	blt	r17,r21,875f8 <__multadd+0x48>
   87640:	e0000926 	beq	fp,zero,87668 <__multadd+0xb8>
   87644:	b0800217 	ldw	r2,8(r22)
   87648:	a880140e 	bge	r21,r2,8769c <__multadd+0xec>
   8764c:	a8800144 	addi	r2,r21,5
   87650:	1085883a 	add	r2,r2,r2
   87654:	1085883a 	add	r2,r2,r2
   87658:	b085883a 	add	r2,r22,r2
   8765c:	ad400044 	addi	r21,r21,1
   87660:	17000015 	stw	fp,0(r2)
   87664:	b5400415 	stw	r21,16(r22)
   87668:	b005883a 	mov	r2,r22
   8766c:	dfc00917 	ldw	ra,36(sp)
   87670:	df000817 	ldw	fp,32(sp)
   87674:	ddc00717 	ldw	r23,28(sp)
   87678:	dd800617 	ldw	r22,24(sp)
   8767c:	dd400517 	ldw	r21,20(sp)
   87680:	dd000417 	ldw	r20,16(sp)
   87684:	dcc00317 	ldw	r19,12(sp)
   87688:	dc800217 	ldw	r18,8(sp)
   8768c:	dc400117 	ldw	r17,4(sp)
   87690:	dc000017 	ldw	r16,0(sp)
   87694:	dec00a04 	addi	sp,sp,40
   87698:	f800283a 	ret
   8769c:	b1400117 	ldw	r5,4(r22)
   876a0:	b809883a 	mov	r4,r23
   876a4:	29400044 	addi	r5,r5,1
   876a8:	00874e00 	call	874e0 <_Balloc>
   876ac:	b1800417 	ldw	r6,16(r22)
   876b0:	b1400304 	addi	r5,r22,12
   876b4:	11000304 	addi	r4,r2,12
   876b8:	31800084 	addi	r6,r6,2
   876bc:	318d883a 	add	r6,r6,r6
   876c0:	318d883a 	add	r6,r6,r6
   876c4:	1021883a 	mov	r16,r2
   876c8:	00871380 	call	87138 <memcpy>
   876cc:	b0c00117 	ldw	r3,4(r22)
   876d0:	b8801317 	ldw	r2,76(r23)
   876d4:	18c7883a 	add	r3,r3,r3
   876d8:	18c7883a 	add	r3,r3,r3
   876dc:	10c5883a 	add	r2,r2,r3
   876e0:	10c00017 	ldw	r3,0(r2)
   876e4:	b0c00015 	stw	r3,0(r22)
   876e8:	15800015 	stw	r22,0(r2)
   876ec:	802d883a 	mov	r22,r16
   876f0:	003fd606 	br	8764c <__multadd+0x9c>

000876f4 <__s2b>:
   876f4:	defff904 	addi	sp,sp,-28
   876f8:	dd000415 	stw	r20,16(sp)
   876fc:	dc400115 	stw	r17,4(sp)
   87700:	2829883a 	mov	r20,r5
   87704:	2023883a 	mov	r17,r4
   87708:	01400244 	movi	r5,9
   8770c:	39000204 	addi	r4,r7,8
   87710:	dcc00315 	stw	r19,12(sp)
   87714:	dc800215 	stw	r18,8(sp)
   87718:	dfc00615 	stw	ra,24(sp)
   8771c:	dd400515 	stw	r21,20(sp)
   87720:	dc000015 	stw	r16,0(sp)
   87724:	3825883a 	mov	r18,r7
   87728:	3027883a 	mov	r19,r6
   8772c:	008ac940 	call	8ac94 <__divsi3>
   87730:	00c00044 	movi	r3,1
   87734:	000b883a 	mov	r5,zero
   87738:	1880030e 	bge	r3,r2,87748 <__s2b+0x54>
   8773c:	18c7883a 	add	r3,r3,r3
   87740:	29400044 	addi	r5,r5,1
   87744:	18bffd16 	blt	r3,r2,8773c <__s2b+0x48>
   87748:	8809883a 	mov	r4,r17
   8774c:	00874e00 	call	874e0 <_Balloc>
   87750:	d8c00717 	ldw	r3,28(sp)
   87754:	10c00515 	stw	r3,20(r2)
   87758:	00c00044 	movi	r3,1
   8775c:	10c00415 	stw	r3,16(r2)
   87760:	00c00244 	movi	r3,9
   87764:	1cc0210e 	bge	r3,r19,877ec <__s2b+0xf8>
   87768:	a0eb883a 	add	r21,r20,r3
   8776c:	a821883a 	mov	r16,r21
   87770:	a4e9883a 	add	r20,r20,r19
   87774:	81c00007 	ldb	r7,0(r16)
   87778:	8809883a 	mov	r4,r17
   8777c:	84000044 	addi	r16,r16,1
   87780:	100b883a 	mov	r5,r2
   87784:	01800284 	movi	r6,10
   87788:	39fff404 	addi	r7,r7,-48
   8778c:	00875b00 	call	875b0 <__multadd>
   87790:	853ff81e 	bne	r16,r20,87774 <__s2b+0x80>
   87794:	ace1883a 	add	r16,r21,r19
   87798:	843ffe04 	addi	r16,r16,-8
   8779c:	9c800a0e 	bge	r19,r18,877c8 <__s2b+0xd4>
   877a0:	94e5c83a 	sub	r18,r18,r19
   877a4:	84a5883a 	add	r18,r16,r18
   877a8:	81c00007 	ldb	r7,0(r16)
   877ac:	8809883a 	mov	r4,r17
   877b0:	84000044 	addi	r16,r16,1
   877b4:	100b883a 	mov	r5,r2
   877b8:	01800284 	movi	r6,10
   877bc:	39fff404 	addi	r7,r7,-48
   877c0:	00875b00 	call	875b0 <__multadd>
   877c4:	84bff81e 	bne	r16,r18,877a8 <__s2b+0xb4>
   877c8:	dfc00617 	ldw	ra,24(sp)
   877cc:	dd400517 	ldw	r21,20(sp)
   877d0:	dd000417 	ldw	r20,16(sp)
   877d4:	dcc00317 	ldw	r19,12(sp)
   877d8:	dc800217 	ldw	r18,8(sp)
   877dc:	dc400117 	ldw	r17,4(sp)
   877e0:	dc000017 	ldw	r16,0(sp)
   877e4:	dec00704 	addi	sp,sp,28
   877e8:	f800283a 	ret
   877ec:	a4000284 	addi	r16,r20,10
   877f0:	1827883a 	mov	r19,r3
   877f4:	003fe906 	br	8779c <__s2b+0xa8>

000877f8 <__hi0bits>:
   877f8:	20bfffec 	andhi	r2,r4,65535
   877fc:	1000141e 	bne	r2,zero,87850 <__hi0bits+0x58>
   87800:	2008943a 	slli	r4,r4,16
   87804:	00800404 	movi	r2,16
   87808:	20ffc02c 	andhi	r3,r4,65280
   8780c:	1800021e 	bne	r3,zero,87818 <__hi0bits+0x20>
   87810:	2008923a 	slli	r4,r4,8
   87814:	10800204 	addi	r2,r2,8
   87818:	20fc002c 	andhi	r3,r4,61440
   8781c:	1800021e 	bne	r3,zero,87828 <__hi0bits+0x30>
   87820:	2008913a 	slli	r4,r4,4
   87824:	10800104 	addi	r2,r2,4
   87828:	20f0002c 	andhi	r3,r4,49152
   8782c:	1800031e 	bne	r3,zero,8783c <__hi0bits+0x44>
   87830:	2109883a 	add	r4,r4,r4
   87834:	10800084 	addi	r2,r2,2
   87838:	2109883a 	add	r4,r4,r4
   8783c:	20000316 	blt	r4,zero,8784c <__hi0bits+0x54>
   87840:	2110002c 	andhi	r4,r4,16384
   87844:	2000041e 	bne	r4,zero,87858 <__hi0bits+0x60>
   87848:	00800804 	movi	r2,32
   8784c:	f800283a 	ret
   87850:	0005883a 	mov	r2,zero
   87854:	003fec06 	br	87808 <__hi0bits+0x10>
   87858:	10800044 	addi	r2,r2,1
   8785c:	f800283a 	ret

00087860 <__lo0bits>:
   87860:	20c00017 	ldw	r3,0(r4)
   87864:	188001cc 	andi	r2,r3,7
   87868:	10000826 	beq	r2,zero,8788c <__lo0bits+0x2c>
   8786c:	1880004c 	andi	r2,r3,1
   87870:	1000211e 	bne	r2,zero,878f8 <__lo0bits+0x98>
   87874:	1880008c 	andi	r2,r3,2
   87878:	1000211e 	bne	r2,zero,87900 <__lo0bits+0xa0>
   8787c:	1806d0ba 	srli	r3,r3,2
   87880:	00800084 	movi	r2,2
   87884:	20c00015 	stw	r3,0(r4)
   87888:	f800283a 	ret
   8788c:	18bfffcc 	andi	r2,r3,65535
   87890:	10001326 	beq	r2,zero,878e0 <__lo0bits+0x80>
   87894:	0005883a 	mov	r2,zero
   87898:	19403fcc 	andi	r5,r3,255
   8789c:	2800021e 	bne	r5,zero,878a8 <__lo0bits+0x48>
   878a0:	1806d23a 	srli	r3,r3,8
   878a4:	10800204 	addi	r2,r2,8
   878a8:	194003cc 	andi	r5,r3,15
   878ac:	2800021e 	bne	r5,zero,878b8 <__lo0bits+0x58>
   878b0:	1806d13a 	srli	r3,r3,4
   878b4:	10800104 	addi	r2,r2,4
   878b8:	194000cc 	andi	r5,r3,3
   878bc:	2800021e 	bne	r5,zero,878c8 <__lo0bits+0x68>
   878c0:	1806d0ba 	srli	r3,r3,2
   878c4:	10800084 	addi	r2,r2,2
   878c8:	1940004c 	andi	r5,r3,1
   878cc:	2800081e 	bne	r5,zero,878f0 <__lo0bits+0x90>
   878d0:	1806d07a 	srli	r3,r3,1
   878d4:	1800051e 	bne	r3,zero,878ec <__lo0bits+0x8c>
   878d8:	00800804 	movi	r2,32
   878dc:	f800283a 	ret
   878e0:	1806d43a 	srli	r3,r3,16
   878e4:	00800404 	movi	r2,16
   878e8:	003feb06 	br	87898 <__lo0bits+0x38>
   878ec:	10800044 	addi	r2,r2,1
   878f0:	20c00015 	stw	r3,0(r4)
   878f4:	f800283a 	ret
   878f8:	0005883a 	mov	r2,zero
   878fc:	f800283a 	ret
   87900:	1806d07a 	srli	r3,r3,1
   87904:	00800044 	movi	r2,1
   87908:	20c00015 	stw	r3,0(r4)
   8790c:	f800283a 	ret

00087910 <__i2b>:
   87910:	defffd04 	addi	sp,sp,-12
   87914:	dc000015 	stw	r16,0(sp)
   87918:	04000044 	movi	r16,1
   8791c:	dc400115 	stw	r17,4(sp)
   87920:	2823883a 	mov	r17,r5
   87924:	800b883a 	mov	r5,r16
   87928:	dfc00215 	stw	ra,8(sp)
   8792c:	00874e00 	call	874e0 <_Balloc>
   87930:	14400515 	stw	r17,20(r2)
   87934:	14000415 	stw	r16,16(r2)
   87938:	dfc00217 	ldw	ra,8(sp)
   8793c:	dc400117 	ldw	r17,4(sp)
   87940:	dc000017 	ldw	r16,0(sp)
   87944:	dec00304 	addi	sp,sp,12
   87948:	f800283a 	ret

0008794c <__multiply>:
   8794c:	defff004 	addi	sp,sp,-64
   87950:	dc800815 	stw	r18,32(sp)
   87954:	dc400715 	stw	r17,28(sp)
   87958:	34800417 	ldw	r18,16(r6)
   8795c:	2c400417 	ldw	r17,16(r5)
   87960:	ddc00d15 	stw	r23,52(sp)
   87964:	dc000615 	stw	r16,24(sp)
   87968:	dfc00f15 	stw	ra,60(sp)
   8796c:	df000e15 	stw	fp,56(sp)
   87970:	dd800c15 	stw	r22,48(sp)
   87974:	dd400b15 	stw	r21,44(sp)
   87978:	dd000a15 	stw	r20,40(sp)
   8797c:	dcc00915 	stw	r19,36(sp)
   87980:	2821883a 	mov	r16,r5
   87984:	302f883a 	mov	r23,r6
   87988:	8c80050e 	bge	r17,r18,879a0 <__multiply+0x54>
   8798c:	8807883a 	mov	r3,r17
   87990:	3021883a 	mov	r16,r6
   87994:	9023883a 	mov	r17,r18
   87998:	282f883a 	mov	r23,r5
   8799c:	1825883a 	mov	r18,r3
   879a0:	80800217 	ldw	r2,8(r16)
   879a4:	8c87883a 	add	r3,r17,r18
   879a8:	d8c00115 	stw	r3,4(sp)
   879ac:	81400117 	ldw	r5,4(r16)
   879b0:	10c0010e 	bge	r2,r3,879b8 <__multiply+0x6c>
   879b4:	29400044 	addi	r5,r5,1
   879b8:	00874e00 	call	874e0 <_Balloc>
   879bc:	d8c00117 	ldw	r3,4(sp)
   879c0:	d8800515 	stw	r2,20(sp)
   879c4:	14c00504 	addi	r19,r2,20
   879c8:	1d400144 	addi	r21,r3,5
   879cc:	ad6b883a 	add	r21,r21,r21
   879d0:	ad6b883a 	add	r21,r21,r21
   879d4:	156b883a 	add	r21,r2,r21
   879d8:	dd400215 	stw	r21,8(sp)
   879dc:	9805883a 	mov	r2,r19
   879e0:	9d40042e 	bgeu	r19,r21,879f4 <__multiply+0xa8>
   879e4:	d8c00217 	ldw	r3,8(sp)
   879e8:	10000015 	stw	zero,0(r2)
   879ec:	10800104 	addi	r2,r2,4
   879f0:	10fffc36 	bltu	r2,r3,879e4 <__multiply+0x98>
   879f4:	94800144 	addi	r18,r18,5
   879f8:	94a5883a 	add	r18,r18,r18
   879fc:	94ad883a 	add	r22,r18,r18
   87a00:	8c400144 	addi	r17,r17,5
   87a04:	8c63883a 	add	r17,r17,r17
   87a08:	bdad883a 	add	r22,r23,r22
   87a0c:	80c00504 	addi	r3,r16,20
   87a10:	8c63883a 	add	r17,r17,r17
   87a14:	bc800504 	addi	r18,r23,20
   87a18:	dd800315 	stw	r22,12(sp)
   87a1c:	d8c00415 	stw	r3,16(sp)
   87a20:	dcc00015 	stw	r19,0(sp)
   87a24:	8463883a 	add	r17,r16,r17
   87a28:	9580412e 	bgeu	r18,r22,87b30 <__multiply+0x1e4>
   87a2c:	90800017 	ldw	r2,0(r18)
   87a30:	173fffcc 	andi	fp,r2,65535
   87a34:	e0001a26 	beq	fp,zero,87aa0 <__multiply+0x154>
   87a38:	dd000017 	ldw	r20,0(sp)
   87a3c:	dd800417 	ldw	r22,16(sp)
   87a40:	002b883a 	mov	r21,zero
   87a44:	b4c00017 	ldw	r19,0(r22)
   87a48:	a4000017 	ldw	r16,0(r20)
   87a4c:	e00b883a 	mov	r5,fp
   87a50:	993fffcc 	andi	r4,r19,65535
   87a54:	0081c900 	call	81c90 <__mulsi3>
   87a58:	9808d43a 	srli	r4,r19,16
   87a5c:	817fffcc 	andi	r5,r16,65535
   87a60:	1145883a 	add	r2,r2,r5
   87a64:	e00b883a 	mov	r5,fp
   87a68:	1567883a 	add	r19,r2,r21
   87a6c:	8020d43a 	srli	r16,r16,16
   87a70:	0081c900 	call	81c90 <__mulsi3>
   87a74:	9808d43a 	srli	r4,r19,16
   87a78:	1405883a 	add	r2,r2,r16
   87a7c:	a4c0000d 	sth	r19,0(r20)
   87a80:	110f883a 	add	r7,r2,r4
   87a84:	a1c0008d 	sth	r7,2(r20)
   87a88:	b5800104 	addi	r22,r22,4
   87a8c:	382ad43a 	srli	r21,r7,16
   87a90:	a5000104 	addi	r20,r20,4
   87a94:	b47feb36 	bltu	r22,r17,87a44 <__multiply+0xf8>
   87a98:	a5400015 	stw	r21,0(r20)
   87a9c:	90800017 	ldw	r2,0(r18)
   87aa0:	1038d43a 	srli	fp,r2,16
   87aa4:	e0001c26 	beq	fp,zero,87b18 <__multiply+0x1cc>
   87aa8:	d8c00017 	ldw	r3,0(sp)
   87aac:	dd000417 	ldw	r20,16(sp)
   87ab0:	002b883a 	mov	r21,zero
   87ab4:	1d800017 	ldw	r22,0(r3)
   87ab8:	182f883a 	mov	r23,r3
   87abc:	b021883a 	mov	r16,r22
   87ac0:	a4c00017 	ldw	r19,0(r20)
   87ac4:	8020d43a 	srli	r16,r16,16
   87ac8:	e00b883a 	mov	r5,fp
   87acc:	993fffcc 	andi	r4,r19,65535
   87ad0:	0081c900 	call	81c90 <__mulsi3>
   87ad4:	1405883a 	add	r2,r2,r16
   87ad8:	9808d43a 	srli	r4,r19,16
   87adc:	156b883a 	add	r21,r2,r21
   87ae0:	bdc00104 	addi	r23,r23,4
   87ae4:	bdbfff0d 	sth	r22,-4(r23)
   87ae8:	bd7fff8d 	sth	r21,-2(r23)
   87aec:	bc000017 	ldw	r16,0(r23)
   87af0:	e00b883a 	mov	r5,fp
   87af4:	0081c900 	call	81c90 <__mulsi3>
   87af8:	a80ed43a 	srli	r7,r21,16
   87afc:	813fffcc 	andi	r4,r16,65535
   87b00:	2085883a 	add	r2,r4,r2
   87b04:	11ed883a 	add	r22,r2,r7
   87b08:	a5000104 	addi	r20,r20,4
   87b0c:	b02ad43a 	srli	r21,r22,16
   87b10:	a47feb36 	bltu	r20,r17,87ac0 <__multiply+0x174>
   87b14:	bd800015 	stw	r22,0(r23)
   87b18:	d8c00017 	ldw	r3,0(sp)
   87b1c:	94800104 	addi	r18,r18,4
   87b20:	18c00104 	addi	r3,r3,4
   87b24:	d8c00015 	stw	r3,0(sp)
   87b28:	d8c00317 	ldw	r3,12(sp)
   87b2c:	90ffbf36 	bltu	r18,r3,87a2c <__multiply+0xe0>
   87b30:	d8c00117 	ldw	r3,4(sp)
   87b34:	00c00c0e 	bge	zero,r3,87b68 <__multiply+0x21c>
   87b38:	d8c00217 	ldw	r3,8(sp)
   87b3c:	18bfff17 	ldw	r2,-4(r3)
   87b40:	1d7fff04 	addi	r21,r3,-4
   87b44:	10000326 	beq	r2,zero,87b54 <__multiply+0x208>
   87b48:	00000706 	br	87b68 <__multiply+0x21c>
   87b4c:	a8800017 	ldw	r2,0(r21)
   87b50:	1000051e 	bne	r2,zero,87b68 <__multiply+0x21c>
   87b54:	d8c00117 	ldw	r3,4(sp)
   87b58:	ad7fff04 	addi	r21,r21,-4
   87b5c:	18ffffc4 	addi	r3,r3,-1
   87b60:	d8c00115 	stw	r3,4(sp)
   87b64:	183ff91e 	bne	r3,zero,87b4c <__multiply+0x200>
   87b68:	d8800517 	ldw	r2,20(sp)
   87b6c:	d8c00117 	ldw	r3,4(sp)
   87b70:	10c00415 	stw	r3,16(r2)
   87b74:	dfc00f17 	ldw	ra,60(sp)
   87b78:	df000e17 	ldw	fp,56(sp)
   87b7c:	ddc00d17 	ldw	r23,52(sp)
   87b80:	dd800c17 	ldw	r22,48(sp)
   87b84:	dd400b17 	ldw	r21,44(sp)
   87b88:	dd000a17 	ldw	r20,40(sp)
   87b8c:	dcc00917 	ldw	r19,36(sp)
   87b90:	dc800817 	ldw	r18,32(sp)
   87b94:	dc400717 	ldw	r17,28(sp)
   87b98:	dc000617 	ldw	r16,24(sp)
   87b9c:	dec01004 	addi	sp,sp,64
   87ba0:	f800283a 	ret

00087ba4 <__pow5mult>:
   87ba4:	defffb04 	addi	sp,sp,-20
   87ba8:	dcc00315 	stw	r19,12(sp)
   87bac:	dc800215 	stw	r18,8(sp)
   87bb0:	dc000015 	stw	r16,0(sp)
   87bb4:	dfc00415 	stw	ra,16(sp)
   87bb8:	dc400115 	stw	r17,4(sp)
   87bbc:	308000cc 	andi	r2,r6,3
   87bc0:	3021883a 	mov	r16,r6
   87bc4:	2027883a 	mov	r19,r4
   87bc8:	2825883a 	mov	r18,r5
   87bcc:	10002e1e 	bne	r2,zero,87c88 <__pow5mult+0xe4>
   87bd0:	8021d0ba 	srai	r16,r16,2
   87bd4:	80001a26 	beq	r16,zero,87c40 <__pow5mult+0x9c>
   87bd8:	9c401217 	ldw	r17,72(r19)
   87bdc:	8800061e 	bne	r17,zero,87bf8 <__pow5mult+0x54>
   87be0:	00003406 	br	87cb4 <__pow5mult+0x110>
   87be4:	8021d07a 	srai	r16,r16,1
   87be8:	80001526 	beq	r16,zero,87c40 <__pow5mult+0x9c>
   87bec:	88c00017 	ldw	r3,0(r17)
   87bf0:	18001b26 	beq	r3,zero,87c60 <__pow5mult+0xbc>
   87bf4:	1823883a 	mov	r17,r3
   87bf8:	80c0004c 	andi	r3,r16,1
   87bfc:	183ff926 	beq	r3,zero,87be4 <__pow5mult+0x40>
   87c00:	900b883a 	mov	r5,r18
   87c04:	880d883a 	mov	r6,r17
   87c08:	9809883a 	mov	r4,r19
   87c0c:	008794c0 	call	8794c <__multiply>
   87c10:	90001b26 	beq	r18,zero,87c80 <__pow5mult+0xdc>
   87c14:	91000117 	ldw	r4,4(r18)
   87c18:	98c01317 	ldw	r3,76(r19)
   87c1c:	8021d07a 	srai	r16,r16,1
   87c20:	2109883a 	add	r4,r4,r4
   87c24:	2109883a 	add	r4,r4,r4
   87c28:	1907883a 	add	r3,r3,r4
   87c2c:	19000017 	ldw	r4,0(r3)
   87c30:	91000015 	stw	r4,0(r18)
   87c34:	1c800015 	stw	r18,0(r3)
   87c38:	1025883a 	mov	r18,r2
   87c3c:	803feb1e 	bne	r16,zero,87bec <__pow5mult+0x48>
   87c40:	9005883a 	mov	r2,r18
   87c44:	dfc00417 	ldw	ra,16(sp)
   87c48:	dcc00317 	ldw	r19,12(sp)
   87c4c:	dc800217 	ldw	r18,8(sp)
   87c50:	dc400117 	ldw	r17,4(sp)
   87c54:	dc000017 	ldw	r16,0(sp)
   87c58:	dec00504 	addi	sp,sp,20
   87c5c:	f800283a 	ret
   87c60:	880b883a 	mov	r5,r17
   87c64:	880d883a 	mov	r6,r17
   87c68:	9809883a 	mov	r4,r19
   87c6c:	008794c0 	call	8794c <__multiply>
   87c70:	88800015 	stw	r2,0(r17)
   87c74:	10000015 	stw	zero,0(r2)
   87c78:	1023883a 	mov	r17,r2
   87c7c:	003fde06 	br	87bf8 <__pow5mult+0x54>
   87c80:	1025883a 	mov	r18,r2
   87c84:	003fd706 	br	87be4 <__pow5mult+0x40>
   87c88:	10bfffc4 	addi	r2,r2,-1
   87c8c:	1085883a 	add	r2,r2,r2
   87c90:	00c00274 	movhi	r3,9
   87c94:	18f95e04 	addi	r3,r3,-6792
   87c98:	1085883a 	add	r2,r2,r2
   87c9c:	1885883a 	add	r2,r3,r2
   87ca0:	11800017 	ldw	r6,0(r2)
   87ca4:	000f883a 	mov	r7,zero
   87ca8:	00875b00 	call	875b0 <__multadd>
   87cac:	1025883a 	mov	r18,r2
   87cb0:	003fc706 	br	87bd0 <__pow5mult+0x2c>
   87cb4:	9809883a 	mov	r4,r19
   87cb8:	01409c44 	movi	r5,625
   87cbc:	00879100 	call	87910 <__i2b>
   87cc0:	98801215 	stw	r2,72(r19)
   87cc4:	1023883a 	mov	r17,r2
   87cc8:	10000015 	stw	zero,0(r2)
   87ccc:	003fca06 	br	87bf8 <__pow5mult+0x54>

00087cd0 <__lshift>:
   87cd0:	defff904 	addi	sp,sp,-28
   87cd4:	dd400515 	stw	r21,20(sp)
   87cd8:	dc400115 	stw	r17,4(sp)
   87cdc:	2d400417 	ldw	r21,16(r5)
   87ce0:	3023d17a 	srai	r17,r6,5
   87ce4:	28800217 	ldw	r2,8(r5)
   87ce8:	dd000415 	stw	r20,16(sp)
   87cec:	8d6b883a 	add	r21,r17,r21
   87cf0:	dcc00315 	stw	r19,12(sp)
   87cf4:	dc800215 	stw	r18,8(sp)
   87cf8:	dc000015 	stw	r16,0(sp)
   87cfc:	dfc00615 	stw	ra,24(sp)
   87d00:	ac000044 	addi	r16,r21,1
   87d04:	2825883a 	mov	r18,r5
   87d08:	3029883a 	mov	r20,r6
   87d0c:	2027883a 	mov	r19,r4
   87d10:	29400117 	ldw	r5,4(r5)
   87d14:	1400030e 	bge	r2,r16,87d24 <__lshift+0x54>
   87d18:	1085883a 	add	r2,r2,r2
   87d1c:	29400044 	addi	r5,r5,1
   87d20:	143ffd16 	blt	r2,r16,87d18 <__lshift+0x48>
   87d24:	9809883a 	mov	r4,r19
   87d28:	00874e00 	call	874e0 <_Balloc>
   87d2c:	10c00504 	addi	r3,r2,20
   87d30:	0440090e 	bge	zero,r17,87d58 <__lshift+0x88>
   87d34:	000f883a 	mov	r7,zero
   87d38:	18000015 	stw	zero,0(r3)
   87d3c:	39c00044 	addi	r7,r7,1
   87d40:	18c00104 	addi	r3,r3,4
   87d44:	3c7ffc1e 	bne	r7,r17,87d38 <__lshift+0x68>
   87d48:	38c00144 	addi	r3,r7,5
   87d4c:	18c7883a 	add	r3,r3,r3
   87d50:	18c7883a 	add	r3,r3,r3
   87d54:	10c7883a 	add	r3,r2,r3
   87d58:	92000417 	ldw	r8,16(r18)
   87d5c:	a18007cc 	andi	r6,r20,31
   87d60:	91c00504 	addi	r7,r18,20
   87d64:	42000144 	addi	r8,r8,5
   87d68:	4211883a 	add	r8,r8,r8
   87d6c:	4211883a 	add	r8,r8,r8
   87d70:	9211883a 	add	r8,r18,r8
   87d74:	30002226 	beq	r6,zero,87e00 <__lshift+0x130>
   87d78:	02800804 	movi	r10,32
   87d7c:	5195c83a 	sub	r10,r10,r6
   87d80:	000b883a 	mov	r5,zero
   87d84:	3a400017 	ldw	r9,0(r7)
   87d88:	18c00104 	addi	r3,r3,4
   87d8c:	39c00104 	addi	r7,r7,4
   87d90:	4992983a 	sll	r9,r9,r6
   87d94:	2a4ab03a 	or	r5,r5,r9
   87d98:	197fff15 	stw	r5,-4(r3)
   87d9c:	397fff17 	ldw	r5,-4(r7)
   87da0:	2a8ad83a 	srl	r5,r5,r10
   87da4:	3a3ff736 	bltu	r7,r8,87d84 <__lshift+0xb4>
   87da8:	19400015 	stw	r5,0(r3)
   87dac:	28000126 	beq	r5,zero,87db4 <__lshift+0xe4>
   87db0:	ac000084 	addi	r16,r21,2
   87db4:	91000117 	ldw	r4,4(r18)
   87db8:	98c01317 	ldw	r3,76(r19)
   87dbc:	843fffc4 	addi	r16,r16,-1
   87dc0:	2109883a 	add	r4,r4,r4
   87dc4:	2109883a 	add	r4,r4,r4
   87dc8:	1907883a 	add	r3,r3,r4
   87dcc:	19000017 	ldw	r4,0(r3)
   87dd0:	14000415 	stw	r16,16(r2)
   87dd4:	91000015 	stw	r4,0(r18)
   87dd8:	1c800015 	stw	r18,0(r3)
   87ddc:	dfc00617 	ldw	ra,24(sp)
   87de0:	dd400517 	ldw	r21,20(sp)
   87de4:	dd000417 	ldw	r20,16(sp)
   87de8:	dcc00317 	ldw	r19,12(sp)
   87dec:	dc800217 	ldw	r18,8(sp)
   87df0:	dc400117 	ldw	r17,4(sp)
   87df4:	dc000017 	ldw	r16,0(sp)
   87df8:	dec00704 	addi	sp,sp,28
   87dfc:	f800283a 	ret
   87e00:	39400017 	ldw	r5,0(r7)
   87e04:	18c00104 	addi	r3,r3,4
   87e08:	39c00104 	addi	r7,r7,4
   87e0c:	197fff15 	stw	r5,-4(r3)
   87e10:	3a3fe82e 	bgeu	r7,r8,87db4 <__lshift+0xe4>
   87e14:	39400017 	ldw	r5,0(r7)
   87e18:	18c00104 	addi	r3,r3,4
   87e1c:	39c00104 	addi	r7,r7,4
   87e20:	197fff15 	stw	r5,-4(r3)
   87e24:	3a3ff636 	bltu	r7,r8,87e00 <__lshift+0x130>
   87e28:	003fe206 	br	87db4 <__lshift+0xe4>

00087e2c <__mcmp>:
   87e2c:	20800417 	ldw	r2,16(r4)
   87e30:	28c00417 	ldw	r3,16(r5)
   87e34:	10c5c83a 	sub	r2,r2,r3
   87e38:	10000f1e 	bne	r2,zero,87e78 <__mcmp+0x4c>
   87e3c:	18c00144 	addi	r3,r3,5
   87e40:	18c7883a 	add	r3,r3,r3
   87e44:	18c7883a 	add	r3,r3,r3
   87e48:	21c00504 	addi	r7,r4,20
   87e4c:	28cb883a 	add	r5,r5,r3
   87e50:	20c9883a 	add	r4,r4,r3
   87e54:	213fff04 	addi	r4,r4,-4
   87e58:	297fff04 	addi	r5,r5,-4
   87e5c:	21800017 	ldw	r6,0(r4)
   87e60:	28c00017 	ldw	r3,0(r5)
   87e64:	30c0021e 	bne	r6,r3,87e70 <__mcmp+0x44>
   87e68:	393ffa36 	bltu	r7,r4,87e54 <__mcmp+0x28>
   87e6c:	f800283a 	ret
   87e70:	30c00236 	bltu	r6,r3,87e7c <__mcmp+0x50>
   87e74:	00800044 	movi	r2,1
   87e78:	f800283a 	ret
   87e7c:	00bfffc4 	movi	r2,-1
   87e80:	f800283a 	ret

00087e84 <__mdiff>:
   87e84:	defffb04 	addi	sp,sp,-20
   87e88:	dc000015 	stw	r16,0(sp)
   87e8c:	2821883a 	mov	r16,r5
   87e90:	dc800215 	stw	r18,8(sp)
   87e94:	300b883a 	mov	r5,r6
   87e98:	2025883a 	mov	r18,r4
   87e9c:	8009883a 	mov	r4,r16
   87ea0:	dc400115 	stw	r17,4(sp)
   87ea4:	dfc00415 	stw	ra,16(sp)
   87ea8:	dcc00315 	stw	r19,12(sp)
   87eac:	3023883a 	mov	r17,r6
   87eb0:	0087e2c0 	call	87e2c <__mcmp>
   87eb4:	10005026 	beq	r2,zero,87ff8 <__mdiff+0x174>
   87eb8:	10004a16 	blt	r2,zero,87fe4 <__mdiff+0x160>
   87ebc:	0027883a 	mov	r19,zero
   87ec0:	81400117 	ldw	r5,4(r16)
   87ec4:	9009883a 	mov	r4,r18
   87ec8:	00874e00 	call	874e0 <_Balloc>
   87ecc:	82400417 	ldw	r9,16(r16)
   87ed0:	89800417 	ldw	r6,16(r17)
   87ed4:	14c00315 	stw	r19,12(r2)
   87ed8:	4b800144 	addi	r14,r9,5
   87edc:	31800144 	addi	r6,r6,5
   87ee0:	739d883a 	add	r14,r14,r14
   87ee4:	318d883a 	add	r6,r6,r6
   87ee8:	739d883a 	add	r14,r14,r14
   87eec:	318d883a 	add	r6,r6,r6
   87ef0:	81c00504 	addi	r7,r16,20
   87ef4:	839d883a 	add	r14,r16,r14
   87ef8:	8a000504 	addi	r8,r17,20
   87efc:	898d883a 	add	r6,r17,r6
   87f00:	10c00504 	addi	r3,r2,20
   87f04:	0009883a 	mov	r4,zero
   87f08:	3b000017 	ldw	r12,0(r7)
   87f0c:	42c00017 	ldw	r11,0(r8)
   87f10:	42000104 	addi	r8,r8,4
   87f14:	62bfffcc 	andi	r10,r12,65535
   87f18:	5b7fffcc 	andi	r13,r11,65535
   87f1c:	5109883a 	add	r4,r10,r4
   87f20:	2355c83a 	sub	r10,r4,r13
   87f24:	5816d43a 	srli	r11,r11,16
   87f28:	6008d43a 	srli	r4,r12,16
   87f2c:	501bd43a 	srai	r13,r10,16
   87f30:	1a80000d 	sth	r10,0(r3)
   87f34:	22c9c83a 	sub	r4,r4,r11
   87f38:	2349883a 	add	r4,r4,r13
   87f3c:	1900008d 	sth	r4,2(r3)
   87f40:	39c00104 	addi	r7,r7,4
   87f44:	2009d43a 	srai	r4,r4,16
   87f48:	18c00104 	addi	r3,r3,4
   87f4c:	41bfee36 	bltu	r8,r6,87f08 <__mdiff+0x84>
   87f50:	180b883a 	mov	r5,r3
   87f54:	3815883a 	mov	r10,r7
   87f58:	3b80132e 	bgeu	r7,r14,87fa8 <__mdiff+0x124>
   87f5c:	3a000017 	ldw	r8,0(r7)
   87f60:	18c00104 	addi	r3,r3,4
   87f64:	39c00104 	addi	r7,r7,4
   87f68:	41bfffcc 	andi	r6,r8,65535
   87f6c:	310d883a 	add	r6,r6,r4
   87f70:	3009d43a 	srai	r4,r6,16
   87f74:	4010d43a 	srli	r8,r8,16
   87f78:	19bfff0d 	sth	r6,-4(r3)
   87f7c:	2209883a 	add	r4,r4,r8
   87f80:	193fff8d 	sth	r4,-2(r3)
   87f84:	2009d43a 	srai	r4,r4,16
   87f88:	3bbff436 	bltu	r7,r14,87f5c <__mdiff+0xd8>
   87f8c:	0286303a 	nor	r3,zero,r10
   87f90:	1b87883a 	add	r3,r3,r14
   87f94:	1806d0ba 	srli	r3,r3,2
   87f98:	18c00044 	addi	r3,r3,1
   87f9c:	18c7883a 	add	r3,r3,r3
   87fa0:	18c7883a 	add	r3,r3,r3
   87fa4:	28c7883a 	add	r3,r5,r3
   87fa8:	193fff17 	ldw	r4,-4(r3)
   87fac:	18ffff04 	addi	r3,r3,-4
   87fb0:	2000041e 	bne	r4,zero,87fc4 <__mdiff+0x140>
   87fb4:	18ffff04 	addi	r3,r3,-4
   87fb8:	19000017 	ldw	r4,0(r3)
   87fbc:	4a7fffc4 	addi	r9,r9,-1
   87fc0:	203ffc26 	beq	r4,zero,87fb4 <__mdiff+0x130>
   87fc4:	12400415 	stw	r9,16(r2)
   87fc8:	dfc00417 	ldw	ra,16(sp)
   87fcc:	dcc00317 	ldw	r19,12(sp)
   87fd0:	dc800217 	ldw	r18,8(sp)
   87fd4:	dc400117 	ldw	r17,4(sp)
   87fd8:	dc000017 	ldw	r16,0(sp)
   87fdc:	dec00504 	addi	sp,sp,20
   87fe0:	f800283a 	ret
   87fe4:	8005883a 	mov	r2,r16
   87fe8:	04c00044 	movi	r19,1
   87fec:	8821883a 	mov	r16,r17
   87ff0:	1023883a 	mov	r17,r2
   87ff4:	003fb206 	br	87ec0 <__mdiff+0x3c>
   87ff8:	9009883a 	mov	r4,r18
   87ffc:	000b883a 	mov	r5,zero
   88000:	00874e00 	call	874e0 <_Balloc>
   88004:	00c00044 	movi	r3,1
   88008:	10c00415 	stw	r3,16(r2)
   8800c:	10000515 	stw	zero,20(r2)
   88010:	dfc00417 	ldw	ra,16(sp)
   88014:	dcc00317 	ldw	r19,12(sp)
   88018:	dc800217 	ldw	r18,8(sp)
   8801c:	dc400117 	ldw	r17,4(sp)
   88020:	dc000017 	ldw	r16,0(sp)
   88024:	dec00504 	addi	sp,sp,20
   88028:	f800283a 	ret

0008802c <__ulp>:
   8802c:	295ffc2c 	andhi	r5,r5,32752
   88030:	00bf3034 	movhi	r2,64704
   88034:	2887883a 	add	r3,r5,r2
   88038:	00c0020e 	bge	zero,r3,88044 <__ulp+0x18>
   8803c:	0005883a 	mov	r2,zero
   88040:	f800283a 	ret
   88044:	00c7c83a 	sub	r3,zero,r3
   88048:	1805d53a 	srai	r2,r3,20
   8804c:	00c004c4 	movi	r3,19
   88050:	18800a0e 	bge	r3,r2,8807c <__ulp+0x50>
   88054:	01000c84 	movi	r4,50
   88058:	0007883a 	mov	r3,zero
   8805c:	20800516 	blt	r4,r2,88074 <__ulp+0x48>
   88060:	01000cc4 	movi	r4,51
   88064:	2085c83a 	sub	r2,r4,r2
   88068:	01000044 	movi	r4,1
   8806c:	2084983a 	sll	r2,r4,r2
   88070:	f800283a 	ret
   88074:	00800044 	movi	r2,1
   88078:	f800283a 	ret
   8807c:	00c00234 	movhi	r3,8
   88080:	1887d83a 	sra	r3,r3,r2
   88084:	0005883a 	mov	r2,zero
   88088:	f800283a 	ret

0008808c <__b2d>:
   8808c:	defffa04 	addi	sp,sp,-24
   88090:	dc000015 	stw	r16,0(sp)
   88094:	24000417 	ldw	r16,16(r4)
   88098:	dc400115 	stw	r17,4(sp)
   8809c:	dcc00315 	stw	r19,12(sp)
   880a0:	84000144 	addi	r16,r16,5
   880a4:	8421883a 	add	r16,r16,r16
   880a8:	8421883a 	add	r16,r16,r16
   880ac:	2421883a 	add	r16,r4,r16
   880b0:	847fff17 	ldw	r17,-4(r16)
   880b4:	24c00504 	addi	r19,r4,20
   880b8:	dd000415 	stw	r20,16(sp)
   880bc:	8809883a 	mov	r4,r17
   880c0:	dc800215 	stw	r18,8(sp)
   880c4:	2829883a 	mov	r20,r5
   880c8:	dfc00515 	stw	ra,20(sp)
   880cc:	00877f80 	call	877f8 <__hi0bits>
   880d0:	00c00804 	movi	r3,32
   880d4:	1887c83a 	sub	r3,r3,r2
   880d8:	a0c00015 	stw	r3,0(r20)
   880dc:	00c00284 	movi	r3,10
   880e0:	84bfff04 	addi	r18,r16,-4
   880e4:	18801216 	blt	r3,r2,88130 <__b2d+0xa4>
   880e8:	010002c4 	movi	r4,11
   880ec:	2089c83a 	sub	r4,r4,r2
   880f0:	8906d83a 	srl	r3,r17,r4
   880f4:	18cffc34 	orhi	r3,r3,16368
   880f8:	9c80322e 	bgeu	r19,r18,881c4 <__b2d+0x138>
   880fc:	817ffe17 	ldw	r5,-8(r16)
   88100:	2908d83a 	srl	r4,r5,r4
   88104:	10800544 	addi	r2,r2,21
   88108:	88a2983a 	sll	r17,r17,r2
   8810c:	2444b03a 	or	r2,r4,r17
   88110:	dfc00517 	ldw	ra,20(sp)
   88114:	dd000417 	ldw	r20,16(sp)
   88118:	dcc00317 	ldw	r19,12(sp)
   8811c:	dc800217 	ldw	r18,8(sp)
   88120:	dc400117 	ldw	r17,4(sp)
   88124:	dc000017 	ldw	r16,0(sp)
   88128:	dec00604 	addi	sp,sp,24
   8812c:	f800283a 	ret
   88130:	9c801636 	bltu	r19,r18,8818c <__b2d+0x100>
   88134:	113ffd44 	addi	r4,r2,-11
   88138:	000b883a 	mov	r5,zero
   8813c:	20001726 	beq	r4,zero,8819c <__b2d+0x110>
   88140:	00c00ac4 	movi	r3,43
   88144:	1885c83a 	sub	r2,r3,r2
   88148:	8906983a 	sll	r3,r17,r4
   8814c:	288cd83a 	srl	r6,r5,r2
   88150:	18cffc34 	orhi	r3,r3,16368
   88154:	1986b03a 	or	r3,r3,r6
   88158:	9c801c2e 	bgeu	r19,r18,881cc <__b2d+0x140>
   8815c:	91bfff17 	ldw	r6,-4(r18)
   88160:	3084d83a 	srl	r2,r6,r2
   88164:	2908983a 	sll	r4,r5,r4
   88168:	1104b03a 	or	r2,r2,r4
   8816c:	dfc00517 	ldw	ra,20(sp)
   88170:	dd000417 	ldw	r20,16(sp)
   88174:	dcc00317 	ldw	r19,12(sp)
   88178:	dc800217 	ldw	r18,8(sp)
   8817c:	dc400117 	ldw	r17,4(sp)
   88180:	dc000017 	ldw	r16,0(sp)
   88184:	dec00604 	addi	sp,sp,24
   88188:	f800283a 	ret
   8818c:	113ffd44 	addi	r4,r2,-11
   88190:	84bffe04 	addi	r18,r16,-8
   88194:	817ffe17 	ldw	r5,-8(r16)
   88198:	203fe91e 	bne	r4,zero,88140 <__b2d+0xb4>
   8819c:	88cffc34 	orhi	r3,r17,16368
   881a0:	2805883a 	mov	r2,r5
   881a4:	dfc00517 	ldw	ra,20(sp)
   881a8:	dd000417 	ldw	r20,16(sp)
   881ac:	dcc00317 	ldw	r19,12(sp)
   881b0:	dc800217 	ldw	r18,8(sp)
   881b4:	dc400117 	ldw	r17,4(sp)
   881b8:	dc000017 	ldw	r16,0(sp)
   881bc:	dec00604 	addi	sp,sp,24
   881c0:	f800283a 	ret
   881c4:	0009883a 	mov	r4,zero
   881c8:	003fce06 	br	88104 <__b2d+0x78>
   881cc:	0005883a 	mov	r2,zero
   881d0:	003fe406 	br	88164 <__b2d+0xd8>

000881d4 <__d2b>:
   881d4:	defff804 	addi	sp,sp,-32
   881d8:	dc400315 	stw	r17,12(sp)
   881dc:	3023883a 	mov	r17,r6
   881e0:	dc800415 	stw	r18,16(sp)
   881e4:	8824907a 	slli	r18,r17,1
   881e8:	dcc00515 	stw	r19,20(sp)
   881ec:	2827883a 	mov	r19,r5
   881f0:	9024d57a 	srli	r18,r18,21
   881f4:	01400044 	movi	r5,1
   881f8:	dd000615 	stw	r20,24(sp)
   881fc:	dc000215 	stw	r16,8(sp)
   88200:	dfc00715 	stw	ra,28(sp)
   88204:	3829883a 	mov	r20,r7
   88208:	00874e00 	call	874e0 <_Balloc>
   8820c:	1021883a 	mov	r16,r2
   88210:	00800434 	movhi	r2,16
   88214:	10bfffc4 	addi	r2,r2,-1
   88218:	88a2703a 	and	r17,r17,r2
   8821c:	90000126 	beq	r18,zero,88224 <__d2b+0x50>
   88220:	8c400434 	orhi	r17,r17,16
   88224:	dc400015 	stw	r17,0(sp)
   88228:	98002226 	beq	r19,zero,882b4 <__d2b+0xe0>
   8822c:	d9000104 	addi	r4,sp,4
   88230:	dcc00115 	stw	r19,4(sp)
   88234:	00878600 	call	87860 <__lo0bits>
   88238:	d8c00017 	ldw	r3,0(sp)
   8823c:	10002d1e 	bne	r2,zero,882f4 <__d2b+0x120>
   88240:	d9000117 	ldw	r4,4(sp)
   88244:	81000515 	stw	r4,20(r16)
   88248:	1823003a 	cmpeq	r17,r3,zero
   8824c:	01000084 	movi	r4,2
   88250:	2463c83a 	sub	r17,r4,r17
   88254:	80c00615 	stw	r3,24(r16)
   88258:	84400415 	stw	r17,16(r16)
   8825c:	90001d1e 	bne	r18,zero,882d4 <__d2b+0x100>
   88260:	88c00104 	addi	r3,r17,4
   88264:	18c7883a 	add	r3,r3,r3
   88268:	18c7883a 	add	r3,r3,r3
   8826c:	80c7883a 	add	r3,r16,r3
   88270:	19000017 	ldw	r4,0(r3)
   88274:	10bef384 	addi	r2,r2,-1074
   88278:	a0800015 	stw	r2,0(r20)
   8827c:	00877f80 	call	877f8 <__hi0bits>
   88280:	8822917a 	slli	r17,r17,5
   88284:	d8c00817 	ldw	r3,32(sp)
   88288:	8885c83a 	sub	r2,r17,r2
   8828c:	18800015 	stw	r2,0(r3)
   88290:	8005883a 	mov	r2,r16
   88294:	dfc00717 	ldw	ra,28(sp)
   88298:	dd000617 	ldw	r20,24(sp)
   8829c:	dcc00517 	ldw	r19,20(sp)
   882a0:	dc800417 	ldw	r18,16(sp)
   882a4:	dc400317 	ldw	r17,12(sp)
   882a8:	dc000217 	ldw	r16,8(sp)
   882ac:	dec00804 	addi	sp,sp,32
   882b0:	f800283a 	ret
   882b4:	d809883a 	mov	r4,sp
   882b8:	00878600 	call	87860 <__lo0bits>
   882bc:	d8c00017 	ldw	r3,0(sp)
   882c0:	04400044 	movi	r17,1
   882c4:	84400415 	stw	r17,16(r16)
   882c8:	80c00515 	stw	r3,20(r16)
   882cc:	10800804 	addi	r2,r2,32
   882d0:	903fe326 	beq	r18,zero,88260 <__d2b+0x8c>
   882d4:	00c00d44 	movi	r3,53
   882d8:	94bef344 	addi	r18,r18,-1075
   882dc:	90a5883a 	add	r18,r18,r2
   882e0:	1885c83a 	sub	r2,r3,r2
   882e4:	d8c00817 	ldw	r3,32(sp)
   882e8:	a4800015 	stw	r18,0(r20)
   882ec:	18800015 	stw	r2,0(r3)
   882f0:	003fe706 	br	88290 <__d2b+0xbc>
   882f4:	01000804 	movi	r4,32
   882f8:	2089c83a 	sub	r4,r4,r2
   882fc:	1908983a 	sll	r4,r3,r4
   88300:	d9400117 	ldw	r5,4(sp)
   88304:	1886d83a 	srl	r3,r3,r2
   88308:	2148b03a 	or	r4,r4,r5
   8830c:	81000515 	stw	r4,20(r16)
   88310:	d8c00015 	stw	r3,0(sp)
   88314:	003fcc06 	br	88248 <__d2b+0x74>

00088318 <__ratio>:
   88318:	defff904 	addi	sp,sp,-28
   8831c:	dc400315 	stw	r17,12(sp)
   88320:	2823883a 	mov	r17,r5
   88324:	d9400104 	addi	r5,sp,4
   88328:	dfc00615 	stw	ra,24(sp)
   8832c:	dcc00515 	stw	r19,20(sp)
   88330:	dc800415 	stw	r18,16(sp)
   88334:	2027883a 	mov	r19,r4
   88338:	dc000215 	stw	r16,8(sp)
   8833c:	008808c0 	call	8808c <__b2d>
   88340:	8809883a 	mov	r4,r17
   88344:	d80b883a 	mov	r5,sp
   88348:	1025883a 	mov	r18,r2
   8834c:	1821883a 	mov	r16,r3
   88350:	008808c0 	call	8808c <__b2d>
   88354:	99400417 	ldw	r5,16(r19)
   88358:	89000417 	ldw	r4,16(r17)
   8835c:	d9800117 	ldw	r6,4(sp)
   88360:	2909c83a 	sub	r4,r5,r4
   88364:	d9400017 	ldw	r5,0(sp)
   88368:	2008917a 	slli	r4,r4,5
   8836c:	314bc83a 	sub	r5,r6,r5
   88370:	290b883a 	add	r5,r5,r4
   88374:	01400e0e 	bge	zero,r5,883b0 <__ratio+0x98>
   88378:	280a953a 	slli	r5,r5,20
   8837c:	2c21883a 	add	r16,r5,r16
   88380:	9009883a 	mov	r4,r18
   88384:	800b883a 	mov	r5,r16
   88388:	100d883a 	mov	r6,r2
   8838c:	180f883a 	mov	r7,r3
   88390:	008a5cc0 	call	8a5cc <__divdf3>
   88394:	dfc00617 	ldw	ra,24(sp)
   88398:	dcc00517 	ldw	r19,20(sp)
   8839c:	dc800417 	ldw	r18,16(sp)
   883a0:	dc400317 	ldw	r17,12(sp)
   883a4:	dc000217 	ldw	r16,8(sp)
   883a8:	dec00704 	addi	sp,sp,28
   883ac:	f800283a 	ret
   883b0:	280a953a 	slli	r5,r5,20
   883b4:	1947c83a 	sub	r3,r3,r5
   883b8:	003ff106 	br	88380 <__ratio+0x68>

000883bc <_mprec_log10>:
   883bc:	defffe04 	addi	sp,sp,-8
   883c0:	dc000015 	stw	r16,0(sp)
   883c4:	dfc00115 	stw	ra,4(sp)
   883c8:	008005c4 	movi	r2,23
   883cc:	2021883a 	mov	r16,r4
   883d0:	11000d0e 	bge	r2,r4,88408 <_mprec_log10+0x4c>
   883d4:	0005883a 	mov	r2,zero
   883d8:	00cffc34 	movhi	r3,16368
   883dc:	843fffc4 	addi	r16,r16,-1
   883e0:	1009883a 	mov	r4,r2
   883e4:	180b883a 	mov	r5,r3
   883e8:	000d883a 	mov	r6,zero
   883ec:	01d00934 	movhi	r7,16420
   883f0:	008a2e80 	call	8a2e8 <__muldf3>
   883f4:	803ff91e 	bne	r16,zero,883dc <_mprec_log10+0x20>
   883f8:	dfc00117 	ldw	ra,4(sp)
   883fc:	dc000017 	ldw	r16,0(sp)
   88400:	dec00204 	addi	sp,sp,8
   88404:	f800283a 	ret
   88408:	202090fa 	slli	r16,r4,3
   8840c:	00800274 	movhi	r2,9
   88410:	10b92c04 	addi	r2,r2,-6992
   88414:	1421883a 	add	r16,r2,r16
   88418:	80800017 	ldw	r2,0(r16)
   8841c:	80c00117 	ldw	r3,4(r16)
   88420:	dfc00117 	ldw	ra,4(sp)
   88424:	dc000017 	ldw	r16,0(sp)
   88428:	dec00204 	addi	sp,sp,8
   8842c:	f800283a 	ret

00088430 <__copybits>:
   88430:	297fffc4 	addi	r5,r5,-1
   88434:	31c00417 	ldw	r7,16(r6)
   88438:	2811d17a 	srai	r8,r5,5
   8843c:	30800504 	addi	r2,r6,20
   88440:	39c00144 	addi	r7,r7,5
   88444:	42000044 	addi	r8,r8,1
   88448:	39cf883a 	add	r7,r7,r7
   8844c:	4211883a 	add	r8,r8,r8
   88450:	39cf883a 	add	r7,r7,r7
   88454:	4211883a 	add	r8,r8,r8
   88458:	31cf883a 	add	r7,r6,r7
   8845c:	2211883a 	add	r8,r4,r8
   88460:	11c00d2e 	bgeu	r2,r7,88498 <__copybits+0x68>
   88464:	2007883a 	mov	r3,r4
   88468:	11400017 	ldw	r5,0(r2)
   8846c:	18c00104 	addi	r3,r3,4
   88470:	10800104 	addi	r2,r2,4
   88474:	197fff15 	stw	r5,-4(r3)
   88478:	11fffb36 	bltu	r2,r7,88468 <__copybits+0x38>
   8847c:	3985c83a 	sub	r2,r7,r6
   88480:	10bffac4 	addi	r2,r2,-21
   88484:	1004d0ba 	srli	r2,r2,2
   88488:	10800044 	addi	r2,r2,1
   8848c:	1085883a 	add	r2,r2,r2
   88490:	1085883a 	add	r2,r2,r2
   88494:	2089883a 	add	r4,r4,r2
   88498:	2200032e 	bgeu	r4,r8,884a8 <__copybits+0x78>
   8849c:	20000015 	stw	zero,0(r4)
   884a0:	21000104 	addi	r4,r4,4
   884a4:	223ffd36 	bltu	r4,r8,8849c <__copybits+0x6c>
   884a8:	f800283a 	ret

000884ac <__any_on>:
   884ac:	21800417 	ldw	r6,16(r4)
   884b0:	2805d17a 	srai	r2,r5,5
   884b4:	20c00504 	addi	r3,r4,20
   884b8:	30800f0e 	bge	r6,r2,884f8 <__any_on+0x4c>
   884bc:	3005883a 	mov	r2,r6
   884c0:	10800144 	addi	r2,r2,5
   884c4:	1085883a 	add	r2,r2,r2
   884c8:	1085883a 	add	r2,r2,r2
   884cc:	2089883a 	add	r4,r4,r2
   884d0:	1900152e 	bgeu	r3,r4,88528 <__any_on+0x7c>
   884d4:	20bfff17 	ldw	r2,-4(r4)
   884d8:	213fff04 	addi	r4,r4,-4
   884dc:	1000041e 	bne	r2,zero,884f0 <__any_on+0x44>
   884e0:	1900112e 	bgeu	r3,r4,88528 <__any_on+0x7c>
   884e4:	213fff04 	addi	r4,r4,-4
   884e8:	20800017 	ldw	r2,0(r4)
   884ec:	103ffc26 	beq	r2,zero,884e0 <__any_on+0x34>
   884f0:	00800044 	movi	r2,1
   884f4:	f800283a 	ret
   884f8:	11bff10e 	bge	r2,r6,884c0 <__any_on+0x14>
   884fc:	294007cc 	andi	r5,r5,31
   88500:	283fef26 	beq	r5,zero,884c0 <__any_on+0x14>
   88504:	11800144 	addi	r6,r2,5
   88508:	318d883a 	add	r6,r6,r6
   8850c:	318d883a 	add	r6,r6,r6
   88510:	218d883a 	add	r6,r4,r6
   88514:	31800017 	ldw	r6,0(r6)
   88518:	314ed83a 	srl	r7,r6,r5
   8851c:	394a983a 	sll	r5,r7,r5
   88520:	29bff31e 	bne	r5,r6,884f0 <__any_on+0x44>
   88524:	003fe606 	br	884c0 <__any_on+0x14>
   88528:	0005883a 	mov	r2,zero
   8852c:	f800283a 	ret

00088530 <_realloc_r>:
   88530:	defff504 	addi	sp,sp,-44
   88534:	dd400615 	stw	r21,24(sp)
   88538:	dc800315 	stw	r18,12(sp)
   8853c:	dc000115 	stw	r16,4(sp)
   88540:	dfc00a15 	stw	ra,40(sp)
   88544:	df000915 	stw	fp,36(sp)
   88548:	ddc00815 	stw	r23,32(sp)
   8854c:	dd800715 	stw	r22,28(sp)
   88550:	dd000515 	stw	r20,20(sp)
   88554:	dcc00415 	stw	r19,16(sp)
   88558:	dc400215 	stw	r17,8(sp)
   8855c:	2821883a 	mov	r16,r5
   88560:	202b883a 	mov	r21,r4
   88564:	3025883a 	mov	r18,r6
   88568:	28009626 	beq	r5,zero,887c4 <_realloc_r+0x294>
   8856c:	008b9500 	call	8b950 <__malloc_lock>
   88570:	80bfff17 	ldw	r2,-4(r16)
   88574:	04ffff04 	movi	r19,-4
   88578:	90c002c4 	addi	r3,r18,11
   8857c:	01000584 	movi	r4,22
   88580:	85bffe04 	addi	r22,r16,-8
   88584:	14e6703a 	and	r19,r2,r19
   88588:	20c0372e 	bgeu	r4,r3,88668 <_realloc_r+0x138>
   8858c:	047ffe04 	movi	r17,-8
   88590:	1c62703a 	and	r17,r3,r17
   88594:	8807883a 	mov	r3,r17
   88598:	88005a16 	blt	r17,zero,88704 <_realloc_r+0x1d4>
   8859c:	8c805936 	bltu	r17,r18,88704 <_realloc_r+0x1d4>
   885a0:	98c0340e 	bge	r19,r3,88674 <_realloc_r+0x144>
   885a4:	07000274 	movhi	fp,9
   885a8:	e73cb704 	addi	fp,fp,-3364
   885ac:	e1400217 	ldw	r5,8(fp)
   885b0:	b4c9883a 	add	r4,r22,r19
   885b4:	29009026 	beq	r5,r4,887f8 <_realloc_r+0x2c8>
   885b8:	21800117 	ldw	r6,4(r4)
   885bc:	01ffff84 	movi	r7,-2
   885c0:	31ce703a 	and	r7,r6,r7
   885c4:	21cf883a 	add	r7,r4,r7
   885c8:	39c00117 	ldw	r7,4(r7)
   885cc:	39c0004c 	andi	r7,r7,1
   885d0:	38004326 	beq	r7,zero,886e0 <_realloc_r+0x1b0>
   885d4:	000d883a 	mov	r6,zero
   885d8:	0009883a 	mov	r4,zero
   885dc:	1080004c 	andi	r2,r2,1
   885e0:	10005a1e 	bne	r2,zero,8874c <_realloc_r+0x21c>
   885e4:	85fffe17 	ldw	r23,-8(r16)
   885e8:	00bfff04 	movi	r2,-4
   885ec:	b5efc83a 	sub	r23,r22,r23
   885f0:	b9c00117 	ldw	r7,4(r23)
   885f4:	388e703a 	and	r7,r7,r2
   885f8:	3ccf883a 	add	r7,r7,r19
   885fc:	20005226 	beq	r4,zero,88748 <_realloc_r+0x218>
   88600:	31e9883a 	add	r20,r6,r7
   88604:	2140c726 	beq	r4,r5,88924 <_realloc_r+0x3f4>
   88608:	a0c04f16 	blt	r20,r3,88748 <_realloc_r+0x218>
   8860c:	20800317 	ldw	r2,12(r4)
   88610:	20c00217 	ldw	r3,8(r4)
   88614:	99bfff04 	addi	r6,r19,-4
   88618:	01000904 	movi	r4,36
   8861c:	18800315 	stw	r2,12(r3)
   88620:	10c00215 	stw	r3,8(r2)
   88624:	b8c00217 	ldw	r3,8(r23)
   88628:	b8800317 	ldw	r2,12(r23)
   8862c:	bc800204 	addi	r18,r23,8
   88630:	18800315 	stw	r2,12(r3)
   88634:	10c00215 	stw	r3,8(r2)
   88638:	2180ed36 	bltu	r4,r6,889f0 <_realloc_r+0x4c0>
   8863c:	008004c4 	movi	r2,19
   88640:	11809b2e 	bgeu	r2,r6,888b0 <_realloc_r+0x380>
   88644:	80800017 	ldw	r2,0(r16)
   88648:	b8800215 	stw	r2,8(r23)
   8864c:	80800117 	ldw	r2,4(r16)
   88650:	b8800315 	stw	r2,12(r23)
   88654:	008006c4 	movi	r2,27
   88658:	1180f936 	bltu	r2,r6,88a40 <_realloc_r+0x510>
   8865c:	b8800404 	addi	r2,r23,16
   88660:	80c00204 	addi	r3,r16,8
   88664:	00009406 	br	888b8 <_realloc_r+0x388>
   88668:	00c00404 	movi	r3,16
   8866c:	1823883a 	mov	r17,r3
   88670:	003fca06 	br	8859c <_realloc_r+0x6c>
   88674:	9829883a 	mov	r20,r19
   88678:	a447c83a 	sub	r3,r20,r17
   8867c:	010003c4 	movi	r4,15
   88680:	1080004c 	andi	r2,r2,1
   88684:	20c02336 	bltu	r4,r3,88714 <_realloc_r+0x1e4>
   88688:	1504b03a 	or	r2,r2,r20
   8868c:	b0800115 	stw	r2,4(r22)
   88690:	b52d883a 	add	r22,r22,r20
   88694:	b0800117 	ldw	r2,4(r22)
   88698:	10800054 	ori	r2,r2,1
   8869c:	b0800115 	stw	r2,4(r22)
   886a0:	a809883a 	mov	r4,r21
   886a4:	008b9700 	call	8b970 <__malloc_unlock>
   886a8:	8025883a 	mov	r18,r16
   886ac:	9005883a 	mov	r2,r18
   886b0:	dfc00a17 	ldw	ra,40(sp)
   886b4:	df000917 	ldw	fp,36(sp)
   886b8:	ddc00817 	ldw	r23,32(sp)
   886bc:	dd800717 	ldw	r22,28(sp)
   886c0:	dd400617 	ldw	r21,24(sp)
   886c4:	dd000517 	ldw	r20,20(sp)
   886c8:	dcc00417 	ldw	r19,16(sp)
   886cc:	dc800317 	ldw	r18,12(sp)
   886d0:	dc400217 	ldw	r17,8(sp)
   886d4:	dc000117 	ldw	r16,4(sp)
   886d8:	dec00b04 	addi	sp,sp,44
   886dc:	f800283a 	ret
   886e0:	01ffff04 	movi	r7,-4
   886e4:	31cc703a 	and	r6,r6,r7
   886e8:	34e9883a 	add	r20,r6,r19
   886ec:	a0ffbb16 	blt	r20,r3,885dc <_realloc_r+0xac>
   886f0:	20c00317 	ldw	r3,12(r4)
   886f4:	21000217 	ldw	r4,8(r4)
   886f8:	20c00315 	stw	r3,12(r4)
   886fc:	19000215 	stw	r4,8(r3)
   88700:	003fdd06 	br	88678 <_realloc_r+0x148>
   88704:	00800304 	movi	r2,12
   88708:	a8800015 	stw	r2,0(r21)
   8870c:	0025883a 	mov	r18,zero
   88710:	003fe606 	br	886ac <_realloc_r+0x17c>
   88714:	1444b03a 	or	r2,r2,r17
   88718:	b0800115 	stw	r2,4(r22)
   8871c:	b44b883a 	add	r5,r22,r17
   88720:	18800054 	ori	r2,r3,1
   88724:	28800115 	stw	r2,4(r5)
   88728:	28c7883a 	add	r3,r5,r3
   8872c:	18800117 	ldw	r2,4(r3)
   88730:	a809883a 	mov	r4,r21
   88734:	29400204 	addi	r5,r5,8
   88738:	10800054 	ori	r2,r2,1
   8873c:	18800115 	stw	r2,4(r3)
   88740:	0085d240 	call	85d24 <_free_r>
   88744:	003fd606 	br	886a0 <_realloc_r+0x170>
   88748:	38c0330e 	bge	r7,r3,88818 <_realloc_r+0x2e8>
   8874c:	900b883a 	mov	r5,r18
   88750:	a809883a 	mov	r4,r21
   88754:	00868bc0 	call	868bc <_malloc_r>
   88758:	1025883a 	mov	r18,r2
   8875c:	10001626 	beq	r2,zero,887b8 <_realloc_r+0x288>
   88760:	80bfff17 	ldw	r2,-4(r16)
   88764:	00ffff84 	movi	r3,-2
   88768:	913ffe04 	addi	r4,r18,-8
   8876c:	10c6703a 	and	r3,r2,r3
   88770:	b0c7883a 	add	r3,r22,r3
   88774:	20c09926 	beq	r4,r3,889dc <_realloc_r+0x4ac>
   88778:	99bfff04 	addi	r6,r19,-4
   8877c:	00800904 	movi	r2,36
   88780:	11806436 	bltu	r2,r6,88914 <_realloc_r+0x3e4>
   88784:	00c004c4 	movi	r3,19
   88788:	19804036 	bltu	r3,r6,8888c <_realloc_r+0x35c>
   8878c:	9005883a 	mov	r2,r18
   88790:	8007883a 	mov	r3,r16
   88794:	19000017 	ldw	r4,0(r3)
   88798:	11000015 	stw	r4,0(r2)
   8879c:	19000117 	ldw	r4,4(r3)
   887a0:	11000115 	stw	r4,4(r2)
   887a4:	18c00217 	ldw	r3,8(r3)
   887a8:	10c00215 	stw	r3,8(r2)
   887ac:	a809883a 	mov	r4,r21
   887b0:	800b883a 	mov	r5,r16
   887b4:	0085d240 	call	85d24 <_free_r>
   887b8:	a809883a 	mov	r4,r21
   887bc:	008b9700 	call	8b970 <__malloc_unlock>
   887c0:	003fba06 	br	886ac <_realloc_r+0x17c>
   887c4:	300b883a 	mov	r5,r6
   887c8:	dfc00a17 	ldw	ra,40(sp)
   887cc:	df000917 	ldw	fp,36(sp)
   887d0:	ddc00817 	ldw	r23,32(sp)
   887d4:	dd800717 	ldw	r22,28(sp)
   887d8:	dd400617 	ldw	r21,24(sp)
   887dc:	dd000517 	ldw	r20,20(sp)
   887e0:	dcc00417 	ldw	r19,16(sp)
   887e4:	dc800317 	ldw	r18,12(sp)
   887e8:	dc400217 	ldw	r17,8(sp)
   887ec:	dc000117 	ldw	r16,4(sp)
   887f0:	dec00b04 	addi	sp,sp,44
   887f4:	00868bc1 	jmpi	868bc <_malloc_r>
   887f8:	29800117 	ldw	r6,4(r5)
   887fc:	013fff04 	movi	r4,-4
   88800:	89c00404 	addi	r7,r17,16
   88804:	310c703a 	and	r6,r6,r4
   88808:	34c9883a 	add	r4,r6,r19
   8880c:	21c0340e 	bge	r4,r7,888e0 <_realloc_r+0x3b0>
   88810:	2809883a 	mov	r4,r5
   88814:	003f7106 	br	885dc <_realloc_r+0xac>
   88818:	b8800317 	ldw	r2,12(r23)
   8881c:	b8c00217 	ldw	r3,8(r23)
   88820:	99bfff04 	addi	r6,r19,-4
   88824:	01000904 	movi	r4,36
   88828:	18800315 	stw	r2,12(r3)
   8882c:	10c00215 	stw	r3,8(r2)
   88830:	bc800204 	addi	r18,r23,8
   88834:	21807836 	bltu	r4,r6,88a18 <_realloc_r+0x4e8>
   88838:	008004c4 	movi	r2,19
   8883c:	1180732e 	bgeu	r2,r6,88a0c <_realloc_r+0x4dc>
   88840:	80800017 	ldw	r2,0(r16)
   88844:	b8800215 	stw	r2,8(r23)
   88848:	80800117 	ldw	r2,4(r16)
   8884c:	b8800315 	stw	r2,12(r23)
   88850:	008006c4 	movi	r2,27
   88854:	11808936 	bltu	r2,r6,88a7c <_realloc_r+0x54c>
   88858:	b8800404 	addi	r2,r23,16
   8885c:	80c00204 	addi	r3,r16,8
   88860:	19000017 	ldw	r4,0(r3)
   88864:	9021883a 	mov	r16,r18
   88868:	3829883a 	mov	r20,r7
   8886c:	11000015 	stw	r4,0(r2)
   88870:	19000117 	ldw	r4,4(r3)
   88874:	b82d883a 	mov	r22,r23
   88878:	11000115 	stw	r4,4(r2)
   8887c:	18c00217 	ldw	r3,8(r3)
   88880:	10c00215 	stw	r3,8(r2)
   88884:	b8800117 	ldw	r2,4(r23)
   88888:	003f7b06 	br	88678 <_realloc_r+0x148>
   8888c:	80c00017 	ldw	r3,0(r16)
   88890:	90c00015 	stw	r3,0(r18)
   88894:	80c00117 	ldw	r3,4(r16)
   88898:	90c00115 	stw	r3,4(r18)
   8889c:	00c006c4 	movi	r3,27
   888a0:	19804636 	bltu	r3,r6,889bc <_realloc_r+0x48c>
   888a4:	90800204 	addi	r2,r18,8
   888a8:	80c00204 	addi	r3,r16,8
   888ac:	003fb906 	br	88794 <_realloc_r+0x264>
   888b0:	9005883a 	mov	r2,r18
   888b4:	8007883a 	mov	r3,r16
   888b8:	19000017 	ldw	r4,0(r3)
   888bc:	9021883a 	mov	r16,r18
   888c0:	b82d883a 	mov	r22,r23
   888c4:	11000015 	stw	r4,0(r2)
   888c8:	19000117 	ldw	r4,4(r3)
   888cc:	11000115 	stw	r4,4(r2)
   888d0:	18c00217 	ldw	r3,8(r3)
   888d4:	10c00215 	stw	r3,8(r2)
   888d8:	b8800117 	ldw	r2,4(r23)
   888dc:	003f6606 	br	88678 <_realloc_r+0x148>
   888e0:	2445c83a 	sub	r2,r4,r17
   888e4:	b46d883a 	add	r22,r22,r17
   888e8:	10800054 	ori	r2,r2,1
   888ec:	b0800115 	stw	r2,4(r22)
   888f0:	80bfff17 	ldw	r2,-4(r16)
   888f4:	a809883a 	mov	r4,r21
   888f8:	e5800215 	stw	r22,8(fp)
   888fc:	1080004c 	andi	r2,r2,1
   88900:	88a2b03a 	or	r17,r17,r2
   88904:	847fff15 	stw	r17,-4(r16)
   88908:	008b9700 	call	8b970 <__malloc_unlock>
   8890c:	8025883a 	mov	r18,r16
   88910:	003f6606 	br	886ac <_realloc_r+0x17c>
   88914:	9009883a 	mov	r4,r18
   88918:	800b883a 	mov	r5,r16
   8891c:	00872780 	call	87278 <memmove>
   88920:	003fa206 	br	887ac <_realloc_r+0x27c>
   88924:	88800404 	addi	r2,r17,16
   88928:	a0bf8716 	blt	r20,r2,88748 <_realloc_r+0x218>
   8892c:	b8800317 	ldw	r2,12(r23)
   88930:	b8c00217 	ldw	r3,8(r23)
   88934:	99bfff04 	addi	r6,r19,-4
   88938:	01000904 	movi	r4,36
   8893c:	18800315 	stw	r2,12(r3)
   88940:	10c00215 	stw	r3,8(r2)
   88944:	bc800204 	addi	r18,r23,8
   88948:	21806536 	bltu	r4,r6,88ae0 <_realloc_r+0x5b0>
   8894c:	008004c4 	movi	r2,19
   88950:	1180592e 	bgeu	r2,r6,88ab8 <_realloc_r+0x588>
   88954:	80800017 	ldw	r2,0(r16)
   88958:	b8800215 	stw	r2,8(r23)
   8895c:	80800117 	ldw	r2,4(r16)
   88960:	b8800315 	stw	r2,12(r23)
   88964:	008006c4 	movi	r2,27
   88968:	11806136 	bltu	r2,r6,88af0 <_realloc_r+0x5c0>
   8896c:	b8800404 	addi	r2,r23,16
   88970:	80c00204 	addi	r3,r16,8
   88974:	19000017 	ldw	r4,0(r3)
   88978:	11000015 	stw	r4,0(r2)
   8897c:	19000117 	ldw	r4,4(r3)
   88980:	11000115 	stw	r4,4(r2)
   88984:	18c00217 	ldw	r3,8(r3)
   88988:	10c00215 	stw	r3,8(r2)
   8898c:	a447c83a 	sub	r3,r20,r17
   88990:	bc45883a 	add	r2,r23,r17
   88994:	18c00054 	ori	r3,r3,1
   88998:	10c00115 	stw	r3,4(r2)
   8899c:	b8c00117 	ldw	r3,4(r23)
   889a0:	e0800215 	stw	r2,8(fp)
   889a4:	a809883a 	mov	r4,r21
   889a8:	1880004c 	andi	r2,r3,1
   889ac:	88a2b03a 	or	r17,r17,r2
   889b0:	bc400115 	stw	r17,4(r23)
   889b4:	008b9700 	call	8b970 <__malloc_unlock>
   889b8:	003f3c06 	br	886ac <_realloc_r+0x17c>
   889bc:	80c00217 	ldw	r3,8(r16)
   889c0:	90c00215 	stw	r3,8(r18)
   889c4:	80c00317 	ldw	r3,12(r16)
   889c8:	90c00315 	stw	r3,12(r18)
   889cc:	30802426 	beq	r6,r2,88a60 <_realloc_r+0x530>
   889d0:	90800404 	addi	r2,r18,16
   889d4:	80c00404 	addi	r3,r16,16
   889d8:	003f6e06 	br	88794 <_realloc_r+0x264>
   889dc:	953fff17 	ldw	r20,-4(r18)
   889e0:	00ffff04 	movi	r3,-4
   889e4:	a0e8703a 	and	r20,r20,r3
   889e8:	a4e9883a 	add	r20,r20,r19
   889ec:	003f2206 	br	88678 <_realloc_r+0x148>
   889f0:	800b883a 	mov	r5,r16
   889f4:	9009883a 	mov	r4,r18
   889f8:	00872780 	call	87278 <memmove>
   889fc:	9021883a 	mov	r16,r18
   88a00:	b8800117 	ldw	r2,4(r23)
   88a04:	b82d883a 	mov	r22,r23
   88a08:	003f1b06 	br	88678 <_realloc_r+0x148>
   88a0c:	9005883a 	mov	r2,r18
   88a10:	8007883a 	mov	r3,r16
   88a14:	003f9206 	br	88860 <_realloc_r+0x330>
   88a18:	800b883a 	mov	r5,r16
   88a1c:	9009883a 	mov	r4,r18
   88a20:	d9c00015 	stw	r7,0(sp)
   88a24:	00872780 	call	87278 <memmove>
   88a28:	d9c00017 	ldw	r7,0(sp)
   88a2c:	9021883a 	mov	r16,r18
   88a30:	b8800117 	ldw	r2,4(r23)
   88a34:	3829883a 	mov	r20,r7
   88a38:	b82d883a 	mov	r22,r23
   88a3c:	003f0e06 	br	88678 <_realloc_r+0x148>
   88a40:	80800217 	ldw	r2,8(r16)
   88a44:	b8800415 	stw	r2,16(r23)
   88a48:	80800317 	ldw	r2,12(r16)
   88a4c:	b8800515 	stw	r2,20(r23)
   88a50:	31001226 	beq	r6,r4,88a9c <_realloc_r+0x56c>
   88a54:	b8800604 	addi	r2,r23,24
   88a58:	80c00404 	addi	r3,r16,16
   88a5c:	003f9606 	br	888b8 <_realloc_r+0x388>
   88a60:	81000417 	ldw	r4,16(r16)
   88a64:	90800604 	addi	r2,r18,24
   88a68:	80c00604 	addi	r3,r16,24
   88a6c:	91000415 	stw	r4,16(r18)
   88a70:	81000517 	ldw	r4,20(r16)
   88a74:	91000515 	stw	r4,20(r18)
   88a78:	003f4606 	br	88794 <_realloc_r+0x264>
   88a7c:	80800217 	ldw	r2,8(r16)
   88a80:	b8800415 	stw	r2,16(r23)
   88a84:	80800317 	ldw	r2,12(r16)
   88a88:	b8800515 	stw	r2,20(r23)
   88a8c:	31000d26 	beq	r6,r4,88ac4 <_realloc_r+0x594>
   88a90:	b8800604 	addi	r2,r23,24
   88a94:	80c00404 	addi	r3,r16,16
   88a98:	003f7106 	br	88860 <_realloc_r+0x330>
   88a9c:	81000417 	ldw	r4,16(r16)
   88aa0:	b8800804 	addi	r2,r23,32
   88aa4:	80c00604 	addi	r3,r16,24
   88aa8:	b9000615 	stw	r4,24(r23)
   88aac:	81000517 	ldw	r4,20(r16)
   88ab0:	b9000715 	stw	r4,28(r23)
   88ab4:	003f8006 	br	888b8 <_realloc_r+0x388>
   88ab8:	9005883a 	mov	r2,r18
   88abc:	8007883a 	mov	r3,r16
   88ac0:	003fac06 	br	88974 <_realloc_r+0x444>
   88ac4:	81000417 	ldw	r4,16(r16)
   88ac8:	b8800804 	addi	r2,r23,32
   88acc:	80c00604 	addi	r3,r16,24
   88ad0:	b9000615 	stw	r4,24(r23)
   88ad4:	81000517 	ldw	r4,20(r16)
   88ad8:	b9000715 	stw	r4,28(r23)
   88adc:	003f6006 	br	88860 <_realloc_r+0x330>
   88ae0:	9009883a 	mov	r4,r18
   88ae4:	800b883a 	mov	r5,r16
   88ae8:	00872780 	call	87278 <memmove>
   88aec:	003fa706 	br	8898c <_realloc_r+0x45c>
   88af0:	80800217 	ldw	r2,8(r16)
   88af4:	b8800415 	stw	r2,16(r23)
   88af8:	80800317 	ldw	r2,12(r16)
   88afc:	b8800515 	stw	r2,20(r23)
   88b00:	31000326 	beq	r6,r4,88b10 <_realloc_r+0x5e0>
   88b04:	b8800604 	addi	r2,r23,24
   88b08:	80c00404 	addi	r3,r16,16
   88b0c:	003f9906 	br	88974 <_realloc_r+0x444>
   88b10:	81000417 	ldw	r4,16(r16)
   88b14:	b8800804 	addi	r2,r23,32
   88b18:	80c00604 	addi	r3,r16,24
   88b1c:	b9000615 	stw	r4,24(r23)
   88b20:	81000517 	ldw	r4,20(r16)
   88b24:	b9000715 	stw	r4,28(r23)
   88b28:	003f9206 	br	88974 <_realloc_r+0x444>

00088b2c <__isinfd>:
   88b2c:	0105c83a 	sub	r2,zero,r4
   88b30:	1108b03a 	or	r4,r2,r4
   88b34:	2004d7fa 	srli	r2,r4,31
   88b38:	00e00034 	movhi	r3,32768
   88b3c:	18ffffc4 	addi	r3,r3,-1
   88b40:	28ca703a 	and	r5,r5,r3
   88b44:	1144b03a 	or	r2,r2,r5
   88b48:	00dffc34 	movhi	r3,32752
   88b4c:	1885c83a 	sub	r2,r3,r2
   88b50:	0087c83a 	sub	r3,zero,r2
   88b54:	1884b03a 	or	r2,r3,r2
   88b58:	1005d7fa 	srai	r2,r2,31
   88b5c:	10800044 	addi	r2,r2,1
   88b60:	f800283a 	ret

00088b64 <__isnand>:
   88b64:	0105c83a 	sub	r2,zero,r4
   88b68:	1108b03a 	or	r4,r2,r4
   88b6c:	2004d7fa 	srli	r2,r4,31
   88b70:	00e00034 	movhi	r3,32768
   88b74:	18ffffc4 	addi	r3,r3,-1
   88b78:	28ca703a 	and	r5,r5,r3
   88b7c:	1144b03a 	or	r2,r2,r5
   88b80:	00dffc34 	movhi	r3,32752
   88b84:	1885c83a 	sub	r2,r3,r2
   88b88:	1004d7fa 	srli	r2,r2,31
   88b8c:	f800283a 	ret

00088b90 <_sbrk_r>:
   88b90:	defffd04 	addi	sp,sp,-12
   88b94:	dc400115 	stw	r17,4(sp)
   88b98:	dc000015 	stw	r16,0(sp)
   88b9c:	2023883a 	mov	r17,r4
   88ba0:	04000274 	movhi	r16,9
   88ba4:	840af004 	addi	r16,r16,11200
   88ba8:	2809883a 	mov	r4,r5
   88bac:	dfc00215 	stw	ra,8(sp)
   88bb0:	80000015 	stw	zero,0(r16)
   88bb4:	008bb540 	call	8bb54 <sbrk>
   88bb8:	00ffffc4 	movi	r3,-1
   88bbc:	10c00526 	beq	r2,r3,88bd4 <_sbrk_r+0x44>
   88bc0:	dfc00217 	ldw	ra,8(sp)
   88bc4:	dc400117 	ldw	r17,4(sp)
   88bc8:	dc000017 	ldw	r16,0(sp)
   88bcc:	dec00304 	addi	sp,sp,12
   88bd0:	f800283a 	ret
   88bd4:	80c00017 	ldw	r3,0(r16)
   88bd8:	183ff926 	beq	r3,zero,88bc0 <_sbrk_r+0x30>
   88bdc:	88c00015 	stw	r3,0(r17)
   88be0:	dfc00217 	ldw	ra,8(sp)
   88be4:	dc400117 	ldw	r17,4(sp)
   88be8:	dc000017 	ldw	r16,0(sp)
   88bec:	dec00304 	addi	sp,sp,12
   88bf0:	f800283a 	ret

00088bf4 <__sread>:
   88bf4:	defffe04 	addi	sp,sp,-8
   88bf8:	dc000015 	stw	r16,0(sp)
   88bfc:	2821883a 	mov	r16,r5
   88c00:	2940038f 	ldh	r5,14(r5)
   88c04:	dfc00115 	stw	ra,4(sp)
   88c08:	00891fc0 	call	891fc <_read_r>
   88c0c:	10000716 	blt	r2,zero,88c2c <__sread+0x38>
   88c10:	80c01417 	ldw	r3,80(r16)
   88c14:	1887883a 	add	r3,r3,r2
   88c18:	80c01415 	stw	r3,80(r16)
   88c1c:	dfc00117 	ldw	ra,4(sp)
   88c20:	dc000017 	ldw	r16,0(sp)
   88c24:	dec00204 	addi	sp,sp,8
   88c28:	f800283a 	ret
   88c2c:	80c0030b 	ldhu	r3,12(r16)
   88c30:	18fbffcc 	andi	r3,r3,61439
   88c34:	80c0030d 	sth	r3,12(r16)
   88c38:	dfc00117 	ldw	ra,4(sp)
   88c3c:	dc000017 	ldw	r16,0(sp)
   88c40:	dec00204 	addi	sp,sp,8
   88c44:	f800283a 	ret

00088c48 <__swrite>:
   88c48:	2880030b 	ldhu	r2,12(r5)
   88c4c:	defffb04 	addi	sp,sp,-20
   88c50:	dcc00315 	stw	r19,12(sp)
   88c54:	10c0400c 	andi	r3,r2,256
   88c58:	18ffffcc 	andi	r3,r3,65535
   88c5c:	18e0001c 	xori	r3,r3,32768
   88c60:	dc800215 	stw	r18,8(sp)
   88c64:	dc400115 	stw	r17,4(sp)
   88c68:	dc000015 	stw	r16,0(sp)
   88c6c:	dfc00415 	stw	ra,16(sp)
   88c70:	18e00004 	addi	r3,r3,-32768
   88c74:	2821883a 	mov	r16,r5
   88c78:	2027883a 	mov	r19,r4
   88c7c:	3025883a 	mov	r18,r6
   88c80:	3823883a 	mov	r17,r7
   88c84:	18000526 	beq	r3,zero,88c9c <__swrite+0x54>
   88c88:	2940038f 	ldh	r5,14(r5)
   88c8c:	000d883a 	mov	r6,zero
   88c90:	01c00084 	movi	r7,2
   88c94:	00891900 	call	89190 <_lseek_r>
   88c98:	8080030b 	ldhu	r2,12(r16)
   88c9c:	8140038f 	ldh	r5,14(r16)
   88ca0:	10bbffcc 	andi	r2,r2,61439
   88ca4:	9809883a 	mov	r4,r19
   88ca8:	900d883a 	mov	r6,r18
   88cac:	880f883a 	mov	r7,r17
   88cb0:	8080030d 	sth	r2,12(r16)
   88cb4:	dfc00417 	ldw	ra,16(sp)
   88cb8:	dcc00317 	ldw	r19,12(sp)
   88cbc:	dc800217 	ldw	r18,8(sp)
   88cc0:	dc400117 	ldw	r17,4(sp)
   88cc4:	dc000017 	ldw	r16,0(sp)
   88cc8:	dec00504 	addi	sp,sp,20
   88ccc:	0088dd81 	jmpi	88dd8 <_write_r>

00088cd0 <__sseek>:
   88cd0:	defffe04 	addi	sp,sp,-8
   88cd4:	dc000015 	stw	r16,0(sp)
   88cd8:	2821883a 	mov	r16,r5
   88cdc:	2940038f 	ldh	r5,14(r5)
   88ce0:	dfc00115 	stw	ra,4(sp)
   88ce4:	00891900 	call	89190 <_lseek_r>
   88ce8:	00ffffc4 	movi	r3,-1
   88cec:	10c00826 	beq	r2,r3,88d10 <__sseek+0x40>
   88cf0:	80c0030b 	ldhu	r3,12(r16)
   88cf4:	80801415 	stw	r2,80(r16)
   88cf8:	18c40014 	ori	r3,r3,4096
   88cfc:	80c0030d 	sth	r3,12(r16)
   88d00:	dfc00117 	ldw	ra,4(sp)
   88d04:	dc000017 	ldw	r16,0(sp)
   88d08:	dec00204 	addi	sp,sp,8
   88d0c:	f800283a 	ret
   88d10:	80c0030b 	ldhu	r3,12(r16)
   88d14:	18fbffcc 	andi	r3,r3,61439
   88d18:	80c0030d 	sth	r3,12(r16)
   88d1c:	dfc00117 	ldw	ra,4(sp)
   88d20:	dc000017 	ldw	r16,0(sp)
   88d24:	dec00204 	addi	sp,sp,8
   88d28:	f800283a 	ret

00088d2c <__sclose>:
   88d2c:	2940038f 	ldh	r5,14(r5)
   88d30:	0088f101 	jmpi	88f10 <_close_r>

00088d34 <strcmp>:
   88d34:	2904b03a 	or	r2,r5,r4
   88d38:	108000cc 	andi	r2,r2,3
   88d3c:	1000171e 	bne	r2,zero,88d9c <strcmp+0x68>
   88d40:	20800017 	ldw	r2,0(r4)
   88d44:	28c00017 	ldw	r3,0(r5)
   88d48:	10c0141e 	bne	r2,r3,88d9c <strcmp+0x68>
   88d4c:	027fbff4 	movhi	r9,65279
   88d50:	4a7fbfc4 	addi	r9,r9,-257
   88d54:	1247883a 	add	r3,r2,r9
   88d58:	0084303a 	nor	r2,zero,r2
   88d5c:	1884703a 	and	r2,r3,r2
   88d60:	02202074 	movhi	r8,32897
   88d64:	42202004 	addi	r8,r8,-32640
   88d68:	1204703a 	and	r2,r2,r8
   88d6c:	10000226 	beq	r2,zero,88d78 <strcmp+0x44>
   88d70:	00001706 	br	88dd0 <strcmp+0x9c>
   88d74:	3000161e 	bne	r6,zero,88dd0 <strcmp+0x9c>
   88d78:	21000104 	addi	r4,r4,4
   88d7c:	20800017 	ldw	r2,0(r4)
   88d80:	29400104 	addi	r5,r5,4
   88d84:	28c00017 	ldw	r3,0(r5)
   88d88:	124f883a 	add	r7,r2,r9
   88d8c:	008c303a 	nor	r6,zero,r2
   88d90:	398c703a 	and	r6,r7,r6
   88d94:	320c703a 	and	r6,r6,r8
   88d98:	10fff626 	beq	r2,r3,88d74 <strcmp+0x40>
   88d9c:	20800007 	ldb	r2,0(r4)
   88da0:	1000051e 	bne	r2,zero,88db8 <strcmp+0x84>
   88da4:	00000606 	br	88dc0 <strcmp+0x8c>
   88da8:	21000044 	addi	r4,r4,1
   88dac:	20800007 	ldb	r2,0(r4)
   88db0:	29400044 	addi	r5,r5,1
   88db4:	10000226 	beq	r2,zero,88dc0 <strcmp+0x8c>
   88db8:	28c00007 	ldb	r3,0(r5)
   88dbc:	10fffa26 	beq	r2,r3,88da8 <strcmp+0x74>
   88dc0:	20c00003 	ldbu	r3,0(r4)
   88dc4:	28800003 	ldbu	r2,0(r5)
   88dc8:	1885c83a 	sub	r2,r3,r2
   88dcc:	f800283a 	ret
   88dd0:	0005883a 	mov	r2,zero
   88dd4:	f800283a 	ret

00088dd8 <_write_r>:
   88dd8:	defffd04 	addi	sp,sp,-12
   88ddc:	dc400115 	stw	r17,4(sp)
   88de0:	dc000015 	stw	r16,0(sp)
   88de4:	2023883a 	mov	r17,r4
   88de8:	04000274 	movhi	r16,9
   88dec:	840af004 	addi	r16,r16,11200
   88df0:	2809883a 	mov	r4,r5
   88df4:	300b883a 	mov	r5,r6
   88df8:	380d883a 	mov	r6,r7
   88dfc:	dfc00215 	stw	ra,8(sp)
   88e00:	80000015 	stw	zero,0(r16)
   88e04:	008bc840 	call	8bc84 <write>
   88e08:	00ffffc4 	movi	r3,-1
   88e0c:	10c00526 	beq	r2,r3,88e24 <_write_r+0x4c>
   88e10:	dfc00217 	ldw	ra,8(sp)
   88e14:	dc400117 	ldw	r17,4(sp)
   88e18:	dc000017 	ldw	r16,0(sp)
   88e1c:	dec00304 	addi	sp,sp,12
   88e20:	f800283a 	ret
   88e24:	80c00017 	ldw	r3,0(r16)
   88e28:	183ff926 	beq	r3,zero,88e10 <_write_r+0x38>
   88e2c:	88c00015 	stw	r3,0(r17)
   88e30:	dfc00217 	ldw	ra,8(sp)
   88e34:	dc400117 	ldw	r17,4(sp)
   88e38:	dc000017 	ldw	r16,0(sp)
   88e3c:	dec00304 	addi	sp,sp,12
   88e40:	f800283a 	ret

00088e44 <_calloc_r>:
   88e44:	defffe04 	addi	sp,sp,-8
   88e48:	dc000015 	stw	r16,0(sp)
   88e4c:	2021883a 	mov	r16,r4
   88e50:	3009883a 	mov	r4,r6
   88e54:	dfc00115 	stw	ra,4(sp)
   88e58:	0081c900 	call	81c90 <__mulsi3>
   88e5c:	8009883a 	mov	r4,r16
   88e60:	100b883a 	mov	r5,r2
   88e64:	00868bc0 	call	868bc <_malloc_r>
   88e68:	1021883a 	mov	r16,r2
   88e6c:	10000c26 	beq	r2,zero,88ea0 <_calloc_r+0x5c>
   88e70:	11bfff17 	ldw	r6,-4(r2)
   88e74:	00ffff04 	movi	r3,-4
   88e78:	00800904 	movi	r2,36
   88e7c:	30cc703a 	and	r6,r6,r3
   88e80:	30cd883a 	add	r6,r6,r3
   88e84:	11801436 	bltu	r2,r6,88ed8 <_calloc_r+0x94>
   88e88:	00c004c4 	movi	r3,19
   88e8c:	19800936 	bltu	r3,r6,88eb4 <_calloc_r+0x70>
   88e90:	8005883a 	mov	r2,r16
   88e94:	10000015 	stw	zero,0(r2)
   88e98:	10000115 	stw	zero,4(r2)
   88e9c:	10000215 	stw	zero,8(r2)
   88ea0:	8005883a 	mov	r2,r16
   88ea4:	dfc00117 	ldw	ra,4(sp)
   88ea8:	dc000017 	ldw	r16,0(sp)
   88eac:	dec00204 	addi	sp,sp,8
   88eb0:	f800283a 	ret
   88eb4:	80000015 	stw	zero,0(r16)
   88eb8:	80000115 	stw	zero,4(r16)
   88ebc:	00c006c4 	movi	r3,27
   88ec0:	19800d2e 	bgeu	r3,r6,88ef8 <_calloc_r+0xb4>
   88ec4:	80000215 	stw	zero,8(r16)
   88ec8:	80000315 	stw	zero,12(r16)
   88ecc:	30800c26 	beq	r6,r2,88f00 <_calloc_r+0xbc>
   88ed0:	80800404 	addi	r2,r16,16
   88ed4:	003fef06 	br	88e94 <_calloc_r+0x50>
   88ed8:	8009883a 	mov	r4,r16
   88edc:	000b883a 	mov	r5,zero
   88ee0:	00874040 	call	87404 <memset>
   88ee4:	8005883a 	mov	r2,r16
   88ee8:	dfc00117 	ldw	ra,4(sp)
   88eec:	dc000017 	ldw	r16,0(sp)
   88ef0:	dec00204 	addi	sp,sp,8
   88ef4:	f800283a 	ret
   88ef8:	80800204 	addi	r2,r16,8
   88efc:	003fe506 	br	88e94 <_calloc_r+0x50>
   88f00:	80000415 	stw	zero,16(r16)
   88f04:	80000515 	stw	zero,20(r16)
   88f08:	80800604 	addi	r2,r16,24
   88f0c:	003fe106 	br	88e94 <_calloc_r+0x50>

00088f10 <_close_r>:
   88f10:	defffd04 	addi	sp,sp,-12
   88f14:	dc400115 	stw	r17,4(sp)
   88f18:	dc000015 	stw	r16,0(sp)
   88f1c:	2023883a 	mov	r17,r4
   88f20:	04000274 	movhi	r16,9
   88f24:	840af004 	addi	r16,r16,11200
   88f28:	2809883a 	mov	r4,r5
   88f2c:	dfc00215 	stw	ra,8(sp)
   88f30:	80000015 	stw	zero,0(r16)
   88f34:	008b3dc0 	call	8b3dc <close>
   88f38:	00ffffc4 	movi	r3,-1
   88f3c:	10c00526 	beq	r2,r3,88f54 <_close_r+0x44>
   88f40:	dfc00217 	ldw	ra,8(sp)
   88f44:	dc400117 	ldw	r17,4(sp)
   88f48:	dc000017 	ldw	r16,0(sp)
   88f4c:	dec00304 	addi	sp,sp,12
   88f50:	f800283a 	ret
   88f54:	80c00017 	ldw	r3,0(r16)
   88f58:	183ff926 	beq	r3,zero,88f40 <_close_r+0x30>
   88f5c:	88c00015 	stw	r3,0(r17)
   88f60:	dfc00217 	ldw	ra,8(sp)
   88f64:	dc400117 	ldw	r17,4(sp)
   88f68:	dc000017 	ldw	r16,0(sp)
   88f6c:	dec00304 	addi	sp,sp,12
   88f70:	f800283a 	ret

00088f74 <_fclose_r>:
   88f74:	defffc04 	addi	sp,sp,-16
   88f78:	dc400115 	stw	r17,4(sp)
   88f7c:	dc000015 	stw	r16,0(sp)
   88f80:	dfc00315 	stw	ra,12(sp)
   88f84:	dc800215 	stw	r18,8(sp)
   88f88:	2821883a 	mov	r16,r5
   88f8c:	2023883a 	mov	r17,r4
   88f90:	28003426 	beq	r5,zero,89064 <_fclose_r+0xf0>
   88f94:	0085ba80 	call	85ba8 <__sfp_lock_acquire>
   88f98:	88000226 	beq	r17,zero,88fa4 <_fclose_r+0x30>
   88f9c:	88800e17 	ldw	r2,56(r17)
   88fa0:	10003826 	beq	r2,zero,89084 <_fclose_r+0x110>
   88fa4:	8080030f 	ldh	r2,12(r16)
   88fa8:	10002526 	beq	r2,zero,89040 <_fclose_r+0xcc>
   88fac:	8809883a 	mov	r4,r17
   88fb0:	800b883a 	mov	r5,r16
   88fb4:	00856e40 	call	856e4 <_fflush_r>
   88fb8:	1025883a 	mov	r18,r2
   88fbc:	80800b17 	ldw	r2,44(r16)
   88fc0:	10000426 	beq	r2,zero,88fd4 <_fclose_r+0x60>
   88fc4:	81400717 	ldw	r5,28(r16)
   88fc8:	8809883a 	mov	r4,r17
   88fcc:	103ee83a 	callr	r2
   88fd0:	10003516 	blt	r2,zero,890a8 <_fclose_r+0x134>
   88fd4:	8080030b 	ldhu	r2,12(r16)
   88fd8:	1080200c 	andi	r2,r2,128
   88fdc:	10bfffcc 	andi	r2,r2,65535
   88fe0:	10a0001c 	xori	r2,r2,32768
   88fe4:	10a00004 	addi	r2,r2,-32768
   88fe8:	10002b1e 	bne	r2,zero,89098 <_fclose_r+0x124>
   88fec:	81400c17 	ldw	r5,48(r16)
   88ff0:	28000526 	beq	r5,zero,89008 <_fclose_r+0x94>
   88ff4:	80801004 	addi	r2,r16,64
   88ff8:	28800226 	beq	r5,r2,89004 <_fclose_r+0x90>
   88ffc:	8809883a 	mov	r4,r17
   89000:	0085d240 	call	85d24 <_free_r>
   89004:	80000c15 	stw	zero,48(r16)
   89008:	81401117 	ldw	r5,68(r16)
   8900c:	28000326 	beq	r5,zero,8901c <_fclose_r+0xa8>
   89010:	8809883a 	mov	r4,r17
   89014:	0085d240 	call	85d24 <_free_r>
   89018:	80001115 	stw	zero,68(r16)
   8901c:	8000030d 	sth	zero,12(r16)
   89020:	0085bac0 	call	85bac <__sfp_lock_release>
   89024:	9005883a 	mov	r2,r18
   89028:	dfc00317 	ldw	ra,12(sp)
   8902c:	dc800217 	ldw	r18,8(sp)
   89030:	dc400117 	ldw	r17,4(sp)
   89034:	dc000017 	ldw	r16,0(sp)
   89038:	dec00404 	addi	sp,sp,16
   8903c:	f800283a 	ret
   89040:	0085bac0 	call	85bac <__sfp_lock_release>
   89044:	0025883a 	mov	r18,zero
   89048:	9005883a 	mov	r2,r18
   8904c:	dfc00317 	ldw	ra,12(sp)
   89050:	dc800217 	ldw	r18,8(sp)
   89054:	dc400117 	ldw	r17,4(sp)
   89058:	dc000017 	ldw	r16,0(sp)
   8905c:	dec00404 	addi	sp,sp,16
   89060:	f800283a 	ret
   89064:	0025883a 	mov	r18,zero
   89068:	9005883a 	mov	r2,r18
   8906c:	dfc00317 	ldw	ra,12(sp)
   89070:	dc800217 	ldw	r18,8(sp)
   89074:	dc400117 	ldw	r17,4(sp)
   89078:	dc000017 	ldw	r16,0(sp)
   8907c:	dec00404 	addi	sp,sp,16
   89080:	f800283a 	ret
   89084:	8809883a 	mov	r4,r17
   89088:	00859a00 	call	859a0 <__sinit>
   8908c:	8080030f 	ldh	r2,12(r16)
   89090:	103fc61e 	bne	r2,zero,88fac <_fclose_r+0x38>
   89094:	003fea06 	br	89040 <_fclose_r+0xcc>
   89098:	81400417 	ldw	r5,16(r16)
   8909c:	8809883a 	mov	r4,r17
   890a0:	0085d240 	call	85d24 <_free_r>
   890a4:	003fd106 	br	88fec <_fclose_r+0x78>
   890a8:	04bfffc4 	movi	r18,-1
   890ac:	003fc906 	br	88fd4 <_fclose_r+0x60>

000890b0 <fclose>:
   890b0:	00800274 	movhi	r2,9
   890b4:	10823c04 	addi	r2,r2,2288
   890b8:	200b883a 	mov	r5,r4
   890bc:	11000017 	ldw	r4,0(r2)
   890c0:	0088f741 	jmpi	88f74 <_fclose_r>

000890c4 <_fstat_r>:
   890c4:	defffd04 	addi	sp,sp,-12
   890c8:	dc400115 	stw	r17,4(sp)
   890cc:	dc000015 	stw	r16,0(sp)
   890d0:	2023883a 	mov	r17,r4
   890d4:	04000274 	movhi	r16,9
   890d8:	840af004 	addi	r16,r16,11200
   890dc:	2809883a 	mov	r4,r5
   890e0:	300b883a 	mov	r5,r6
   890e4:	dfc00215 	stw	ra,8(sp)
   890e8:	80000015 	stw	zero,0(r16)
   890ec:	008b5240 	call	8b524 <fstat>
   890f0:	00ffffc4 	movi	r3,-1
   890f4:	10c00526 	beq	r2,r3,8910c <_fstat_r+0x48>
   890f8:	dfc00217 	ldw	ra,8(sp)
   890fc:	dc400117 	ldw	r17,4(sp)
   89100:	dc000017 	ldw	r16,0(sp)
   89104:	dec00304 	addi	sp,sp,12
   89108:	f800283a 	ret
   8910c:	80c00017 	ldw	r3,0(r16)
   89110:	183ff926 	beq	r3,zero,890f8 <_fstat_r+0x34>
   89114:	88c00015 	stw	r3,0(r17)
   89118:	dfc00217 	ldw	ra,8(sp)
   8911c:	dc400117 	ldw	r17,4(sp)
   89120:	dc000017 	ldw	r16,0(sp)
   89124:	dec00304 	addi	sp,sp,12
   89128:	f800283a 	ret

0008912c <_isatty_r>:
   8912c:	defffd04 	addi	sp,sp,-12
   89130:	dc400115 	stw	r17,4(sp)
   89134:	dc000015 	stw	r16,0(sp)
   89138:	2023883a 	mov	r17,r4
   8913c:	04000274 	movhi	r16,9
   89140:	840af004 	addi	r16,r16,11200
   89144:	2809883a 	mov	r4,r5
   89148:	dfc00215 	stw	ra,8(sp)
   8914c:	80000015 	stw	zero,0(r16)
   89150:	008b6240 	call	8b624 <isatty>
   89154:	00ffffc4 	movi	r3,-1
   89158:	10c00526 	beq	r2,r3,89170 <_isatty_r+0x44>
   8915c:	dfc00217 	ldw	ra,8(sp)
   89160:	dc400117 	ldw	r17,4(sp)
   89164:	dc000017 	ldw	r16,0(sp)
   89168:	dec00304 	addi	sp,sp,12
   8916c:	f800283a 	ret
   89170:	80c00017 	ldw	r3,0(r16)
   89174:	183ff926 	beq	r3,zero,8915c <_isatty_r+0x30>
   89178:	88c00015 	stw	r3,0(r17)
   8917c:	dfc00217 	ldw	ra,8(sp)
   89180:	dc400117 	ldw	r17,4(sp)
   89184:	dc000017 	ldw	r16,0(sp)
   89188:	dec00304 	addi	sp,sp,12
   8918c:	f800283a 	ret

00089190 <_lseek_r>:
   89190:	defffd04 	addi	sp,sp,-12
   89194:	dc400115 	stw	r17,4(sp)
   89198:	dc000015 	stw	r16,0(sp)
   8919c:	2023883a 	mov	r17,r4
   891a0:	04000274 	movhi	r16,9
   891a4:	840af004 	addi	r16,r16,11200
   891a8:	2809883a 	mov	r4,r5
   891ac:	300b883a 	mov	r5,r6
   891b0:	380d883a 	mov	r6,r7
   891b4:	dfc00215 	stw	ra,8(sp)
   891b8:	80000015 	stw	zero,0(r16)
   891bc:	008b8040 	call	8b804 <lseek>
   891c0:	00ffffc4 	movi	r3,-1
   891c4:	10c00526 	beq	r2,r3,891dc <_lseek_r+0x4c>
   891c8:	dfc00217 	ldw	ra,8(sp)
   891cc:	dc400117 	ldw	r17,4(sp)
   891d0:	dc000017 	ldw	r16,0(sp)
   891d4:	dec00304 	addi	sp,sp,12
   891d8:	f800283a 	ret
   891dc:	80c00017 	ldw	r3,0(r16)
   891e0:	183ff926 	beq	r3,zero,891c8 <_lseek_r+0x38>
   891e4:	88c00015 	stw	r3,0(r17)
   891e8:	dfc00217 	ldw	ra,8(sp)
   891ec:	dc400117 	ldw	r17,4(sp)
   891f0:	dc000017 	ldw	r16,0(sp)
   891f4:	dec00304 	addi	sp,sp,12
   891f8:	f800283a 	ret

000891fc <_read_r>:
   891fc:	defffd04 	addi	sp,sp,-12
   89200:	dc400115 	stw	r17,4(sp)
   89204:	dc000015 	stw	r16,0(sp)
   89208:	2023883a 	mov	r17,r4
   8920c:	04000274 	movhi	r16,9
   89210:	840af004 	addi	r16,r16,11200
   89214:	2809883a 	mov	r4,r5
   89218:	300b883a 	mov	r5,r6
   8921c:	380d883a 	mov	r6,r7
   89220:	dfc00215 	stw	ra,8(sp)
   89224:	80000015 	stw	zero,0(r16)
   89228:	008b9e00 	call	8b9e0 <read>
   8922c:	00ffffc4 	movi	r3,-1
   89230:	10c00526 	beq	r2,r3,89248 <_read_r+0x4c>
   89234:	dfc00217 	ldw	ra,8(sp)
   89238:	dc400117 	ldw	r17,4(sp)
   8923c:	dc000017 	ldw	r16,0(sp)
   89240:	dec00304 	addi	sp,sp,12
   89244:	f800283a 	ret
   89248:	80c00017 	ldw	r3,0(r16)
   8924c:	183ff926 	beq	r3,zero,89234 <_read_r+0x38>
   89250:	88c00015 	stw	r3,0(r17)
   89254:	dfc00217 	ldw	ra,8(sp)
   89258:	dc400117 	ldw	r17,4(sp)
   8925c:	dc000017 	ldw	r16,0(sp)
   89260:	dec00304 	addi	sp,sp,12
   89264:	f800283a 	ret

00089268 <__udivdi3>:
   89268:	defff504 	addi	sp,sp,-44
   8926c:	dd000515 	stw	r20,20(sp)
   89270:	dcc00415 	stw	r19,16(sp)
   89274:	dc800315 	stw	r18,12(sp)
   89278:	dc400215 	stw	r17,8(sp)
   8927c:	dc000115 	stw	r16,4(sp)
   89280:	dfc00a15 	stw	ra,40(sp)
   89284:	df000915 	stw	fp,36(sp)
   89288:	ddc00815 	stw	r23,32(sp)
   8928c:	dd800715 	stw	r22,28(sp)
   89290:	dd400615 	stw	r21,24(sp)
   89294:	2025883a 	mov	r18,r4
   89298:	2823883a 	mov	r17,r5
   8929c:	3021883a 	mov	r16,r6
   892a0:	2027883a 	mov	r19,r4
   892a4:	2829883a 	mov	r20,r5
   892a8:	3800451e 	bne	r7,zero,893c0 <__udivdi3+0x158>
   892ac:	2980652e 	bgeu	r5,r6,89444 <__udivdi3+0x1dc>
   892b0:	00bfffd4 	movui	r2,65535
   892b4:	1180b436 	bltu	r2,r6,89588 <__udivdi3+0x320>
   892b8:	00803fc4 	movi	r2,255
   892bc:	11816636 	bltu	r2,r6,89858 <__udivdi3+0x5f0>
   892c0:	0005883a 	mov	r2,zero
   892c4:	0007883a 	mov	r3,zero
   892c8:	3084d83a 	srl	r2,r6,r2
   892cc:	01000274 	movhi	r4,9
   892d0:	21396604 	addi	r4,r4,-6760
   892d4:	2085883a 	add	r2,r4,r2
   892d8:	10800003 	ldbu	r2,0(r2)
   892dc:	10c7883a 	add	r3,r2,r3
   892e0:	00800804 	movi	r2,32
   892e4:	10c5c83a 	sub	r2,r2,r3
   892e8:	10000526 	beq	r2,zero,89300 <__udivdi3+0x98>
   892ec:	88a2983a 	sll	r17,r17,r2
   892f0:	90c6d83a 	srl	r3,r18,r3
   892f4:	30a0983a 	sll	r16,r6,r2
   892f8:	90a6983a 	sll	r19,r18,r2
   892fc:	88e8b03a 	or	r20,r17,r3
   89300:	8022d43a 	srli	r17,r16,16
   89304:	a009883a 	mov	r4,r20
   89308:	857fffcc 	andi	r21,r16,65535
   8930c:	880b883a 	mov	r5,r17
   89310:	008ad480 	call	8ad48 <__umodsi3>
   89314:	a009883a 	mov	r4,r20
   89318:	880b883a 	mov	r5,r17
   8931c:	102d883a 	mov	r22,r2
   89320:	008ad400 	call	8ad40 <__udivsi3>
   89324:	1009883a 	mov	r4,r2
   89328:	a80b883a 	mov	r5,r21
   8932c:	1025883a 	mov	r18,r2
   89330:	0081c900 	call	81c90 <__mulsi3>
   89334:	1009883a 	mov	r4,r2
   89338:	b006943a 	slli	r3,r22,16
   8933c:	9804d43a 	srli	r2,r19,16
   89340:	1886b03a 	or	r3,r3,r2
   89344:	1900052e 	bgeu	r3,r4,8935c <__udivdi3+0xf4>
   89348:	1c07883a 	add	r3,r3,r16
   8934c:	90bfffc4 	addi	r2,r18,-1
   89350:	1c000136 	bltu	r3,r16,89358 <__udivdi3+0xf0>
   89354:	19015536 	bltu	r3,r4,898ac <__udivdi3+0x644>
   89358:	1025883a 	mov	r18,r2
   8935c:	1929c83a 	sub	r20,r3,r4
   89360:	880b883a 	mov	r5,r17
   89364:	a009883a 	mov	r4,r20
   89368:	008ad480 	call	8ad48 <__umodsi3>
   8936c:	102d883a 	mov	r22,r2
   89370:	880b883a 	mov	r5,r17
   89374:	a009883a 	mov	r4,r20
   89378:	b02c943a 	slli	r22,r22,16
   8937c:	008ad400 	call	8ad40 <__udivsi3>
   89380:	1009883a 	mov	r4,r2
   89384:	a80b883a 	mov	r5,r21
   89388:	9cffffcc 	andi	r19,r19,65535
   8938c:	1023883a 	mov	r17,r2
   89390:	b4e6b03a 	or	r19,r22,r19
   89394:	0081c900 	call	81c90 <__mulsi3>
   89398:	9880052e 	bgeu	r19,r2,893b0 <__udivdi3+0x148>
   8939c:	9c27883a 	add	r19,r19,r16
   893a0:	88ffffc4 	addi	r3,r17,-1
   893a4:	9c011436 	bltu	r19,r16,897f8 <__udivdi3+0x590>
   893a8:	9881132e 	bgeu	r19,r2,897f8 <__udivdi3+0x590>
   893ac:	8c7fff84 	addi	r17,r17,-2
   893b0:	9004943a 	slli	r2,r18,16
   893b4:	0007883a 	mov	r3,zero
   893b8:	8884b03a 	or	r2,r17,r2
   893bc:	00001506 	br	89414 <__udivdi3+0x1ac>
   893c0:	29c06a36 	bltu	r5,r7,8956c <__udivdi3+0x304>
   893c4:	00bfffd4 	movui	r2,65535
   893c8:	11c06a2e 	bgeu	r2,r7,89574 <__udivdi3+0x30c>
   893cc:	00804034 	movhi	r2,256
   893d0:	10bfffc4 	addi	r2,r2,-1
   893d4:	11c11436 	bltu	r2,r7,89828 <__udivdi3+0x5c0>
   893d8:	00c00404 	movi	r3,16
   893dc:	180b883a 	mov	r5,r3
   893e0:	38c6d83a 	srl	r3,r7,r3
   893e4:	01000274 	movhi	r4,9
   893e8:	21396604 	addi	r4,r4,-6760
   893ec:	04000804 	movi	r16,32
   893f0:	20c7883a 	add	r3,r4,r3
   893f4:	18800003 	ldbu	r2,0(r3)
   893f8:	1145883a 	add	r2,r2,r5
   893fc:	80a1c83a 	sub	r16,r16,r2
   89400:	80006e1e 	bne	r16,zero,895bc <__udivdi3+0x354>
   89404:	0007883a 	mov	r3,zero
   89408:	3c406a36 	bltu	r7,r17,895b4 <__udivdi3+0x34c>
   8940c:	9180692e 	bgeu	r18,r6,895b4 <__udivdi3+0x34c>
   89410:	0005883a 	mov	r2,zero
   89414:	dfc00a17 	ldw	ra,40(sp)
   89418:	df000917 	ldw	fp,36(sp)
   8941c:	ddc00817 	ldw	r23,32(sp)
   89420:	dd800717 	ldw	r22,28(sp)
   89424:	dd400617 	ldw	r21,24(sp)
   89428:	dd000517 	ldw	r20,20(sp)
   8942c:	dcc00417 	ldw	r19,16(sp)
   89430:	dc800317 	ldw	r18,12(sp)
   89434:	dc400217 	ldw	r17,8(sp)
   89438:	dc000117 	ldw	r16,4(sp)
   8943c:	dec00b04 	addi	sp,sp,44
   89440:	f800283a 	ret
   89444:	3000041e 	bne	r6,zero,89458 <__udivdi3+0x1f0>
   89448:	01000044 	movi	r4,1
   8944c:	000b883a 	mov	r5,zero
   89450:	008ad400 	call	8ad40 <__udivsi3>
   89454:	1021883a 	mov	r16,r2
   89458:	00bfffd4 	movui	r2,65535
   8945c:	1400502e 	bgeu	r2,r16,895a0 <__udivdi3+0x338>
   89460:	00804034 	movhi	r2,256
   89464:	10bfffc4 	addi	r2,r2,-1
   89468:	1400f536 	bltu	r2,r16,89840 <__udivdi3+0x5d8>
   8946c:	00800404 	movi	r2,16
   89470:	1007883a 	mov	r3,r2
   89474:	8084d83a 	srl	r2,r16,r2
   89478:	01000274 	movhi	r4,9
   8947c:	21396604 	addi	r4,r4,-6760
   89480:	2085883a 	add	r2,r4,r2
   89484:	10800003 	ldbu	r2,0(r2)
   89488:	10c7883a 	add	r3,r2,r3
   8948c:	00800804 	movi	r2,32
   89490:	10c5c83a 	sub	r2,r2,r3
   89494:	1000a01e 	bne	r2,zero,89718 <__udivdi3+0x4b0>
   89498:	8028d43a 	srli	r20,r16,16
   8949c:	8c23c83a 	sub	r17,r17,r16
   894a0:	857fffcc 	andi	r21,r16,65535
   894a4:	00c00044 	movi	r3,1
   894a8:	8809883a 	mov	r4,r17
   894ac:	a00b883a 	mov	r5,r20
   894b0:	d8c00015 	stw	r3,0(sp)
   894b4:	008ad480 	call	8ad48 <__umodsi3>
   894b8:	8809883a 	mov	r4,r17
   894bc:	a00b883a 	mov	r5,r20
   894c0:	102d883a 	mov	r22,r2
   894c4:	008ad400 	call	8ad40 <__udivsi3>
   894c8:	1009883a 	mov	r4,r2
   894cc:	a80b883a 	mov	r5,r21
   894d0:	1025883a 	mov	r18,r2
   894d4:	0081c900 	call	81c90 <__mulsi3>
   894d8:	1009883a 	mov	r4,r2
   894dc:	b00c943a 	slli	r6,r22,16
   894e0:	9804d43a 	srli	r2,r19,16
   894e4:	d8c00017 	ldw	r3,0(sp)
   894e8:	308cb03a 	or	r6,r6,r2
   894ec:	3100052e 	bgeu	r6,r4,89504 <__udivdi3+0x29c>
   894f0:	340d883a 	add	r6,r6,r16
   894f4:	90bfffc4 	addi	r2,r18,-1
   894f8:	34000136 	bltu	r6,r16,89500 <__udivdi3+0x298>
   894fc:	3100e836 	bltu	r6,r4,898a0 <__udivdi3+0x638>
   89500:	1025883a 	mov	r18,r2
   89504:	3123c83a 	sub	r17,r6,r4
   89508:	8809883a 	mov	r4,r17
   8950c:	a00b883a 	mov	r5,r20
   89510:	d8c00015 	stw	r3,0(sp)
   89514:	008ad480 	call	8ad48 <__umodsi3>
   89518:	102d883a 	mov	r22,r2
   8951c:	8809883a 	mov	r4,r17
   89520:	a00b883a 	mov	r5,r20
   89524:	b02c943a 	slli	r22,r22,16
   89528:	008ad400 	call	8ad40 <__udivsi3>
   8952c:	1009883a 	mov	r4,r2
   89530:	a80b883a 	mov	r5,r21
   89534:	9cffffcc 	andi	r19,r19,65535
   89538:	1023883a 	mov	r17,r2
   8953c:	b4e6b03a 	or	r19,r22,r19
   89540:	0081c900 	call	81c90 <__mulsi3>
   89544:	d8c00017 	ldw	r3,0(sp)
   89548:	9880052e 	bgeu	r19,r2,89560 <__udivdi3+0x2f8>
   8954c:	9c27883a 	add	r19,r19,r16
   89550:	893fffc4 	addi	r4,r17,-1
   89554:	9c00aa36 	bltu	r19,r16,89800 <__udivdi3+0x598>
   89558:	9880a92e 	bgeu	r19,r2,89800 <__udivdi3+0x598>
   8955c:	8c7fff84 	addi	r17,r17,-2
   89560:	9004943a 	slli	r2,r18,16
   89564:	8884b03a 	or	r2,r17,r2
   89568:	003faa06 	br	89414 <__udivdi3+0x1ac>
   8956c:	0007883a 	mov	r3,zero
   89570:	003fa706 	br	89410 <__udivdi3+0x1a8>
   89574:	00803fc4 	movi	r2,255
   89578:	11c0ae36 	bltu	r2,r7,89834 <__udivdi3+0x5cc>
   8957c:	0007883a 	mov	r3,zero
   89580:	000b883a 	mov	r5,zero
   89584:	003f9606 	br	893e0 <__udivdi3+0x178>
   89588:	00804034 	movhi	r2,256
   8958c:	10bfffc4 	addi	r2,r2,-1
   89590:	1180ae36 	bltu	r2,r6,8984c <__udivdi3+0x5e4>
   89594:	00800404 	movi	r2,16
   89598:	1007883a 	mov	r3,r2
   8959c:	003f4a06 	br	892c8 <__udivdi3+0x60>
   895a0:	00803fc4 	movi	r2,255
   895a4:	1400af36 	bltu	r2,r16,89864 <__udivdi3+0x5fc>
   895a8:	0005883a 	mov	r2,zero
   895ac:	0007883a 	mov	r3,zero
   895b0:	003fb006 	br	89474 <__udivdi3+0x20c>
   895b4:	00800044 	movi	r2,1
   895b8:	003f9606 	br	89414 <__udivdi3+0x1ac>
   895bc:	3c0e983a 	sll	r7,r7,r16
   895c0:	3086d83a 	srl	r3,r6,r2
   895c4:	88aed83a 	srl	r23,r17,r2
   895c8:	9084d83a 	srl	r2,r18,r2
   895cc:	38e6b03a 	or	r19,r7,r3
   895d0:	9828d43a 	srli	r20,r19,16
   895d4:	8c22983a 	sll	r17,r17,r16
   895d8:	b809883a 	mov	r4,r23
   895dc:	a00b883a 	mov	r5,r20
   895e0:	342a983a 	sll	r21,r6,r16
   895e4:	88a2b03a 	or	r17,r17,r2
   895e8:	008ad480 	call	8ad48 <__umodsi3>
   895ec:	b809883a 	mov	r4,r23
   895f0:	a00b883a 	mov	r5,r20
   895f4:	1039883a 	mov	fp,r2
   895f8:	9dbfffcc 	andi	r22,r19,65535
   895fc:	008ad400 	call	8ad40 <__udivsi3>
   89600:	1009883a 	mov	r4,r2
   89604:	b00b883a 	mov	r5,r22
   89608:	102f883a 	mov	r23,r2
   8960c:	0081c900 	call	81c90 <__mulsi3>
   89610:	1009883a 	mov	r4,r2
   89614:	e00e943a 	slli	r7,fp,16
   89618:	8804d43a 	srli	r2,r17,16
   8961c:	388eb03a 	or	r7,r7,r2
   89620:	3900042e 	bgeu	r7,r4,89634 <__udivdi3+0x3cc>
   89624:	3ccf883a 	add	r7,r7,r19
   89628:	b8bfffc4 	addi	r2,r23,-1
   8962c:	3cc0942e 	bgeu	r7,r19,89880 <__udivdi3+0x618>
   89630:	102f883a 	mov	r23,r2
   89634:	3939c83a 	sub	fp,r7,r4
   89638:	a00b883a 	mov	r5,r20
   8963c:	e009883a 	mov	r4,fp
   89640:	008ad480 	call	8ad48 <__umodsi3>
   89644:	a00b883a 	mov	r5,r20
   89648:	e009883a 	mov	r4,fp
   8964c:	d8800015 	stw	r2,0(sp)
   89650:	008ad400 	call	8ad40 <__udivsi3>
   89654:	1009883a 	mov	r4,r2
   89658:	b00b883a 	mov	r5,r22
   8965c:	1029883a 	mov	r20,r2
   89660:	0081c900 	call	81c90 <__mulsi3>
   89664:	d8c00017 	ldw	r3,0(sp)
   89668:	8c7fffcc 	andi	r17,r17,65535
   8966c:	1806943a 	slli	r3,r3,16
   89670:	1c46b03a 	or	r3,r3,r17
   89674:	1880042e 	bgeu	r3,r2,89688 <__udivdi3+0x420>
   89678:	1cc7883a 	add	r3,r3,r19
   8967c:	a13fffc4 	addi	r4,r20,-1
   89680:	1cc07b2e 	bgeu	r3,r19,89870 <__udivdi3+0x608>
   89684:	2029883a 	mov	r20,r4
   89688:	b82e943a 	slli	r23,r23,16
   8968c:	a822d43a 	srli	r17,r21,16
   89690:	ad7fffcc 	andi	r21,r21,65535
   89694:	a5e8b03a 	or	r20,r20,r23
   89698:	a5bfffcc 	andi	r22,r20,65535
   8969c:	b009883a 	mov	r4,r22
   896a0:	a80b883a 	mov	r5,r21
   896a4:	18afc83a 	sub	r23,r3,r2
   896a8:	a026d43a 	srli	r19,r20,16
   896ac:	0081c900 	call	81c90 <__mulsi3>
   896b0:	b009883a 	mov	r4,r22
   896b4:	880b883a 	mov	r5,r17
   896b8:	1039883a 	mov	fp,r2
   896bc:	0081c900 	call	81c90 <__mulsi3>
   896c0:	a80b883a 	mov	r5,r21
   896c4:	9809883a 	mov	r4,r19
   896c8:	102d883a 	mov	r22,r2
   896cc:	0081c900 	call	81c90 <__mulsi3>
   896d0:	9809883a 	mov	r4,r19
   896d4:	880b883a 	mov	r5,r17
   896d8:	102b883a 	mov	r21,r2
   896dc:	0081c900 	call	81c90 <__mulsi3>
   896e0:	100b883a 	mov	r5,r2
   896e4:	e004d43a 	srli	r2,fp,16
   896e8:	ad89883a 	add	r4,r21,r22
   896ec:	2089883a 	add	r4,r4,r2
   896f0:	2540022e 	bgeu	r4,r21,896fc <__udivdi3+0x494>
   896f4:	00800074 	movhi	r2,1
   896f8:	288b883a 	add	r5,r5,r2
   896fc:	2004d43a 	srli	r2,r4,16
   89700:	288b883a 	add	r5,r5,r2
   89704:	b9404536 	bltu	r23,r5,8981c <__udivdi3+0x5b4>
   89708:	b9403f26 	beq	r23,r5,89808 <__udivdi3+0x5a0>
   8970c:	a005883a 	mov	r2,r20
   89710:	0007883a 	mov	r3,zero
   89714:	003f3f06 	br	89414 <__udivdi3+0x1ac>
   89718:	80a0983a 	sll	r16,r16,r2
   8971c:	88eed83a 	srl	r23,r17,r3
   89720:	90c6d83a 	srl	r3,r18,r3
   89724:	8028d43a 	srli	r20,r16,16
   89728:	88a2983a 	sll	r17,r17,r2
   8972c:	b809883a 	mov	r4,r23
   89730:	a00b883a 	mov	r5,r20
   89734:	88ecb03a 	or	r22,r17,r3
   89738:	90a6983a 	sll	r19,r18,r2
   8973c:	008ad480 	call	8ad48 <__umodsi3>
   89740:	b809883a 	mov	r4,r23
   89744:	a00b883a 	mov	r5,r20
   89748:	1023883a 	mov	r17,r2
   8974c:	857fffcc 	andi	r21,r16,65535
   89750:	008ad400 	call	8ad40 <__udivsi3>
   89754:	1009883a 	mov	r4,r2
   89758:	a80b883a 	mov	r5,r21
   8975c:	102f883a 	mov	r23,r2
   89760:	0081c900 	call	81c90 <__mulsi3>
   89764:	1009883a 	mov	r4,r2
   89768:	880a943a 	slli	r5,r17,16
   8976c:	b004d43a 	srli	r2,r22,16
   89770:	288ab03a 	or	r5,r5,r2
   89774:	2900062e 	bgeu	r5,r4,89790 <__udivdi3+0x528>
   89778:	2c0b883a 	add	r5,r5,r16
   8977c:	b8bfffc4 	addi	r2,r23,-1
   89780:	2c004536 	bltu	r5,r16,89898 <__udivdi3+0x630>
   89784:	2900442e 	bgeu	r5,r4,89898 <__udivdi3+0x630>
   89788:	bdffff84 	addi	r23,r23,-2
   8978c:	2c0b883a 	add	r5,r5,r16
   89790:	2925c83a 	sub	r18,r5,r4
   89794:	9009883a 	mov	r4,r18
   89798:	a00b883a 	mov	r5,r20
   8979c:	008ad480 	call	8ad48 <__umodsi3>
   897a0:	1023883a 	mov	r17,r2
   897a4:	9009883a 	mov	r4,r18
   897a8:	a00b883a 	mov	r5,r20
   897ac:	8822943a 	slli	r17,r17,16
   897b0:	008ad400 	call	8ad40 <__udivsi3>
   897b4:	1009883a 	mov	r4,r2
   897b8:	a80b883a 	mov	r5,r21
   897bc:	b5bfffcc 	andi	r22,r22,65535
   897c0:	1025883a 	mov	r18,r2
   897c4:	8da2b03a 	or	r17,r17,r22
   897c8:	0081c900 	call	81c90 <__mulsi3>
   897cc:	8880062e 	bgeu	r17,r2,897e8 <__udivdi3+0x580>
   897d0:	8c23883a 	add	r17,r17,r16
   897d4:	90ffffc4 	addi	r3,r18,-1
   897d8:	8c002d36 	bltu	r17,r16,89890 <__udivdi3+0x628>
   897dc:	88802c2e 	bgeu	r17,r2,89890 <__udivdi3+0x628>
   897e0:	94bfff84 	addi	r18,r18,-2
   897e4:	8c23883a 	add	r17,r17,r16
   897e8:	b806943a 	slli	r3,r23,16
   897ec:	88a3c83a 	sub	r17,r17,r2
   897f0:	90c6b03a 	or	r3,r18,r3
   897f4:	003f2c06 	br	894a8 <__udivdi3+0x240>
   897f8:	1823883a 	mov	r17,r3
   897fc:	003eec06 	br	893b0 <__udivdi3+0x148>
   89800:	2023883a 	mov	r17,r4
   89804:	003f5606 	br	89560 <__udivdi3+0x2f8>
   89808:	2008943a 	slli	r4,r4,16
   8980c:	9420983a 	sll	r16,r18,r16
   89810:	e73fffcc 	andi	fp,fp,65535
   89814:	2709883a 	add	r4,r4,fp
   89818:	813fbc2e 	bgeu	r16,r4,8970c <__udivdi3+0x4a4>
   8981c:	a0bfffc4 	addi	r2,r20,-1
   89820:	0007883a 	mov	r3,zero
   89824:	003efb06 	br	89414 <__udivdi3+0x1ac>
   89828:	00c00604 	movi	r3,24
   8982c:	180b883a 	mov	r5,r3
   89830:	003eeb06 	br	893e0 <__udivdi3+0x178>
   89834:	00c00204 	movi	r3,8
   89838:	180b883a 	mov	r5,r3
   8983c:	003ee806 	br	893e0 <__udivdi3+0x178>
   89840:	00800604 	movi	r2,24
   89844:	1007883a 	mov	r3,r2
   89848:	003f0a06 	br	89474 <__udivdi3+0x20c>
   8984c:	00800604 	movi	r2,24
   89850:	1007883a 	mov	r3,r2
   89854:	003e9c06 	br	892c8 <__udivdi3+0x60>
   89858:	00800204 	movi	r2,8
   8985c:	1007883a 	mov	r3,r2
   89860:	003e9906 	br	892c8 <__udivdi3+0x60>
   89864:	00800204 	movi	r2,8
   89868:	1007883a 	mov	r3,r2
   8986c:	003f0106 	br	89474 <__udivdi3+0x20c>
   89870:	18bf842e 	bgeu	r3,r2,89684 <__udivdi3+0x41c>
   89874:	a53fff84 	addi	r20,r20,-2
   89878:	1cc7883a 	add	r3,r3,r19
   8987c:	003f8206 	br	89688 <__udivdi3+0x420>
   89880:	393f6b2e 	bgeu	r7,r4,89630 <__udivdi3+0x3c8>
   89884:	bdffff84 	addi	r23,r23,-2
   89888:	3ccf883a 	add	r7,r7,r19
   8988c:	003f6906 	br	89634 <__udivdi3+0x3cc>
   89890:	1825883a 	mov	r18,r3
   89894:	003fd406 	br	897e8 <__udivdi3+0x580>
   89898:	102f883a 	mov	r23,r2
   8989c:	003fbc06 	br	89790 <__udivdi3+0x528>
   898a0:	94bfff84 	addi	r18,r18,-2
   898a4:	340d883a 	add	r6,r6,r16
   898a8:	003f1606 	br	89504 <__udivdi3+0x29c>
   898ac:	94bfff84 	addi	r18,r18,-2
   898b0:	1c07883a 	add	r3,r3,r16
   898b4:	003ea906 	br	8935c <__udivdi3+0xf4>

000898b8 <__umoddi3>:
   898b8:	defff304 	addi	sp,sp,-52
   898bc:	dd000715 	stw	r20,28(sp)
   898c0:	dcc00615 	stw	r19,24(sp)
   898c4:	dc800515 	stw	r18,20(sp)
   898c8:	dc400415 	stw	r17,16(sp)
   898cc:	dc000315 	stw	r16,12(sp)
   898d0:	dfc00c15 	stw	ra,48(sp)
   898d4:	df000b15 	stw	fp,44(sp)
   898d8:	ddc00a15 	stw	r23,40(sp)
   898dc:	dd800915 	stw	r22,36(sp)
   898e0:	dd400815 	stw	r21,32(sp)
   898e4:	2025883a 	mov	r18,r4
   898e8:	2823883a 	mov	r17,r5
   898ec:	3021883a 	mov	r16,r6
   898f0:	2027883a 	mov	r19,r4
   898f4:	2829883a 	mov	r20,r5
   898f8:	38003a1e 	bne	r7,zero,899e4 <__umoddi3+0x12c>
   898fc:	2980522e 	bgeu	r5,r6,89a48 <__umoddi3+0x190>
   89900:	00bfffd4 	movui	r2,65535
   89904:	1180a436 	bltu	r2,r6,89b98 <__umoddi3+0x2e0>
   89908:	00803fc4 	movi	r2,255
   8990c:	11816036 	bltu	r2,r6,89e90 <__umoddi3+0x5d8>
   89910:	0005883a 	mov	r2,zero
   89914:	0009883a 	mov	r4,zero
   89918:	3084d83a 	srl	r2,r6,r2
   8991c:	00c00274 	movhi	r3,9
   89920:	18f96604 	addi	r3,r3,-6760
   89924:	05400804 	movi	r21,32
   89928:	1885883a 	add	r2,r3,r2
   8992c:	10800003 	ldbu	r2,0(r2)
   89930:	1109883a 	add	r4,r2,r4
   89934:	a92bc83a 	sub	r21,r21,r4
   89938:	a8010e26 	beq	r21,zero,89d74 <__umoddi3+0x4bc>
   8993c:	8d62983a 	sll	r17,r17,r21
   89940:	9108d83a 	srl	r4,r18,r4
   89944:	3560983a 	sll	r16,r6,r21
   89948:	9566983a 	sll	r19,r18,r21
   8994c:	8928b03a 	or	r20,r17,r4
   89950:	8022d43a 	srli	r17,r16,16
   89954:	a009883a 	mov	r4,r20
   89958:	84bfffcc 	andi	r18,r16,65535
   8995c:	880b883a 	mov	r5,r17
   89960:	008ad480 	call	8ad48 <__umodsi3>
   89964:	a009883a 	mov	r4,r20
   89968:	880b883a 	mov	r5,r17
   8996c:	102d883a 	mov	r22,r2
   89970:	008ad400 	call	8ad40 <__udivsi3>
   89974:	1009883a 	mov	r4,r2
   89978:	900b883a 	mov	r5,r18
   8997c:	0081c900 	call	81c90 <__mulsi3>
   89980:	1009883a 	mov	r4,r2
   89984:	b006943a 	slli	r3,r22,16
   89988:	9804d43a 	srli	r2,r19,16
   8998c:	1886b03a 	or	r3,r3,r2
   89990:	1900042e 	bgeu	r3,r4,899a4 <__umoddi3+0xec>
   89994:	1c07883a 	add	r3,r3,r16
   89998:	1c000236 	bltu	r3,r16,899a4 <__umoddi3+0xec>
   8999c:	1900012e 	bgeu	r3,r4,899a4 <__umoddi3+0xec>
   899a0:	1c07883a 	add	r3,r3,r16
   899a4:	1929c83a 	sub	r20,r3,r4
   899a8:	a009883a 	mov	r4,r20
   899ac:	880b883a 	mov	r5,r17
   899b0:	008ad480 	call	8ad48 <__umodsi3>
   899b4:	102d883a 	mov	r22,r2
   899b8:	a009883a 	mov	r4,r20
   899bc:	880b883a 	mov	r5,r17
   899c0:	b02c943a 	slli	r22,r22,16
   899c4:	008ad400 	call	8ad40 <__udivsi3>
   899c8:	1009883a 	mov	r4,r2
   899cc:	900b883a 	mov	r5,r18
   899d0:	9cffffcc 	andi	r19,r19,65535
   899d4:	0081c900 	call	81c90 <__mulsi3>
   899d8:	b4e6b03a 	or	r19,r22,r19
   899dc:	9880572e 	bgeu	r19,r2,89b3c <__umoddi3+0x284>
   899e0:	00005206 	br	89b2c <__umoddi3+0x274>
   899e4:	29c05936 	bltu	r5,r7,89b4c <__umoddi3+0x294>
   899e8:	00bfffd4 	movui	r2,65535
   899ec:	11c0652e 	bgeu	r2,r7,89b84 <__umoddi3+0x2cc>
   899f0:	00804034 	movhi	r2,256
   899f4:	10bfffc4 	addi	r2,r2,-1
   899f8:	11c11936 	bltu	r2,r7,89e60 <__umoddi3+0x5a8>
   899fc:	00c00404 	movi	r3,16
   89a00:	1827883a 	mov	r19,r3
   89a04:	38c6d83a 	srl	r3,r7,r3
   89a08:	01000274 	movhi	r4,9
   89a0c:	21396604 	addi	r4,r4,-6760
   89a10:	04000804 	movi	r16,32
   89a14:	20c7883a 	add	r3,r4,r3
   89a18:	18800003 	ldbu	r2,0(r3)
   89a1c:	14e7883a 	add	r19,r2,r19
   89a20:	84e1c83a 	sub	r16,r16,r19
   89a24:	8000671e 	bne	r16,zero,89bc4 <__umoddi3+0x30c>
   89a28:	3c400136 	bltu	r7,r17,89a30 <__umoddi3+0x178>
   89a2c:	91812536 	bltu	r18,r6,89ec4 <__umoddi3+0x60c>
   89a30:	9185c83a 	sub	r2,r18,r6
   89a34:	89e3c83a 	sub	r17,r17,r7
   89a38:	90a5803a 	cmpltu	r18,r18,r2
   89a3c:	8ca9c83a 	sub	r20,r17,r18
   89a40:	a007883a 	mov	r3,r20
   89a44:	00004306 	br	89b54 <__umoddi3+0x29c>
   89a48:	3000041e 	bne	r6,zero,89a5c <__umoddi3+0x1a4>
   89a4c:	01000044 	movi	r4,1
   89a50:	000b883a 	mov	r5,zero
   89a54:	008ad400 	call	8ad40 <__udivsi3>
   89a58:	1021883a 	mov	r16,r2
   89a5c:	00bfffd4 	movui	r2,65535
   89a60:	1400532e 	bgeu	r2,r16,89bb0 <__umoddi3+0x2f8>
   89a64:	00804034 	movhi	r2,256
   89a68:	10bfffc4 	addi	r2,r2,-1
   89a6c:	14010536 	bltu	r2,r16,89e84 <__umoddi3+0x5cc>
   89a70:	00800404 	movi	r2,16
   89a74:	1007883a 	mov	r3,r2
   89a78:	8084d83a 	srl	r2,r16,r2
   89a7c:	01000274 	movhi	r4,9
   89a80:	21396604 	addi	r4,r4,-6760
   89a84:	05400804 	movi	r21,32
   89a88:	2085883a 	add	r2,r4,r2
   89a8c:	10800003 	ldbu	r2,0(r2)
   89a90:	10c7883a 	add	r3,r2,r3
   89a94:	a8ebc83a 	sub	r21,r21,r3
   89a98:	a800b81e 	bne	r21,zero,89d7c <__umoddi3+0x4c4>
   89a9c:	8028d43a 	srli	r20,r16,16
   89aa0:	8c23c83a 	sub	r17,r17,r16
   89aa4:	85bfffcc 	andi	r22,r16,65535
   89aa8:	8809883a 	mov	r4,r17
   89aac:	a00b883a 	mov	r5,r20
   89ab0:	008ad480 	call	8ad48 <__umodsi3>
   89ab4:	8809883a 	mov	r4,r17
   89ab8:	a00b883a 	mov	r5,r20
   89abc:	1025883a 	mov	r18,r2
   89ac0:	008ad400 	call	8ad40 <__udivsi3>
   89ac4:	1009883a 	mov	r4,r2
   89ac8:	b00b883a 	mov	r5,r22
   89acc:	0081c900 	call	81c90 <__mulsi3>
   89ad0:	1009883a 	mov	r4,r2
   89ad4:	9006943a 	slli	r3,r18,16
   89ad8:	9804d43a 	srli	r2,r19,16
   89adc:	1886b03a 	or	r3,r3,r2
   89ae0:	1900032e 	bgeu	r3,r4,89af0 <__umoddi3+0x238>
   89ae4:	1c07883a 	add	r3,r3,r16
   89ae8:	1c000136 	bltu	r3,r16,89af0 <__umoddi3+0x238>
   89aec:	1900f336 	bltu	r3,r4,89ebc <__umoddi3+0x604>
   89af0:	1923c83a 	sub	r17,r3,r4
   89af4:	8809883a 	mov	r4,r17
   89af8:	a00b883a 	mov	r5,r20
   89afc:	008ad480 	call	8ad48 <__umodsi3>
   89b00:	102f883a 	mov	r23,r2
   89b04:	8809883a 	mov	r4,r17
   89b08:	a00b883a 	mov	r5,r20
   89b0c:	b82e943a 	slli	r23,r23,16
   89b10:	008ad400 	call	8ad40 <__udivsi3>
   89b14:	1009883a 	mov	r4,r2
   89b18:	b00b883a 	mov	r5,r22
   89b1c:	9cffffcc 	andi	r19,r19,65535
   89b20:	0081c900 	call	81c90 <__mulsi3>
   89b24:	bce6b03a 	or	r19,r23,r19
   89b28:	9880042e 	bgeu	r19,r2,89b3c <__umoddi3+0x284>
   89b2c:	9c27883a 	add	r19,r19,r16
   89b30:	9c000236 	bltu	r19,r16,89b3c <__umoddi3+0x284>
   89b34:	9880012e 	bgeu	r19,r2,89b3c <__umoddi3+0x284>
   89b38:	9c27883a 	add	r19,r19,r16
   89b3c:	9885c83a 	sub	r2,r19,r2
   89b40:	1544d83a 	srl	r2,r2,r21
   89b44:	0007883a 	mov	r3,zero
   89b48:	00000206 	br	89b54 <__umoddi3+0x29c>
   89b4c:	2005883a 	mov	r2,r4
   89b50:	2807883a 	mov	r3,r5
   89b54:	dfc00c17 	ldw	ra,48(sp)
   89b58:	df000b17 	ldw	fp,44(sp)
   89b5c:	ddc00a17 	ldw	r23,40(sp)
   89b60:	dd800917 	ldw	r22,36(sp)
   89b64:	dd400817 	ldw	r21,32(sp)
   89b68:	dd000717 	ldw	r20,28(sp)
   89b6c:	dcc00617 	ldw	r19,24(sp)
   89b70:	dc800517 	ldw	r18,20(sp)
   89b74:	dc400417 	ldw	r17,16(sp)
   89b78:	dc000317 	ldw	r16,12(sp)
   89b7c:	dec00d04 	addi	sp,sp,52
   89b80:	f800283a 	ret
   89b84:	00803fc4 	movi	r2,255
   89b88:	11c0b236 	bltu	r2,r7,89e54 <__umoddi3+0x59c>
   89b8c:	0007883a 	mov	r3,zero
   89b90:	0027883a 	mov	r19,zero
   89b94:	003f9b06 	br	89a04 <__umoddi3+0x14c>
   89b98:	00804034 	movhi	r2,256
   89b9c:	10bfffc4 	addi	r2,r2,-1
   89ba0:	1180b236 	bltu	r2,r6,89e6c <__umoddi3+0x5b4>
   89ba4:	00800404 	movi	r2,16
   89ba8:	1009883a 	mov	r4,r2
   89bac:	003f5a06 	br	89918 <__umoddi3+0x60>
   89bb0:	00803fc4 	movi	r2,255
   89bb4:	1400b036 	bltu	r2,r16,89e78 <__umoddi3+0x5c0>
   89bb8:	0005883a 	mov	r2,zero
   89bbc:	0007883a 	mov	r3,zero
   89bc0:	003fad06 	br	89a78 <__umoddi3+0x1c0>
   89bc4:	34c4d83a 	srl	r2,r6,r19
   89bc8:	3c0e983a 	sll	r7,r7,r16
   89bcc:	8cf8d83a 	srl	fp,r17,r19
   89bd0:	8c22983a 	sll	r17,r17,r16
   89bd4:	38a8b03a 	or	r20,r7,r2
   89bd8:	a02ad43a 	srli	r21,r20,16
   89bdc:	94c4d83a 	srl	r2,r18,r19
   89be0:	e009883a 	mov	r4,fp
   89be4:	a80b883a 	mov	r5,r21
   89be8:	342c983a 	sll	r22,r6,r16
   89bec:	88a2b03a 	or	r17,r17,r2
   89bf0:	008ad480 	call	8ad48 <__umodsi3>
   89bf4:	e009883a 	mov	r4,fp
   89bf8:	a80b883a 	mov	r5,r21
   89bfc:	a5ffffcc 	andi	r23,r20,65535
   89c00:	d8800215 	stw	r2,8(sp)
   89c04:	008ad400 	call	8ad40 <__udivsi3>
   89c08:	1009883a 	mov	r4,r2
   89c0c:	b80b883a 	mov	r5,r23
   89c10:	1039883a 	mov	fp,r2
   89c14:	0081c900 	call	81c90 <__mulsi3>
   89c18:	d8c00217 	ldw	r3,8(sp)
   89c1c:	1009883a 	mov	r4,r2
   89c20:	8804d43a 	srli	r2,r17,16
   89c24:	1806943a 	slli	r3,r3,16
   89c28:	9424983a 	sll	r18,r18,r16
   89c2c:	1886b03a 	or	r3,r3,r2
   89c30:	1900042e 	bgeu	r3,r4,89c44 <__umoddi3+0x38c>
   89c34:	1d07883a 	add	r3,r3,r20
   89c38:	e0bfffc4 	addi	r2,fp,-1
   89c3c:	1d009b2e 	bgeu	r3,r20,89eac <__umoddi3+0x5f4>
   89c40:	1039883a 	mov	fp,r2
   89c44:	1907c83a 	sub	r3,r3,r4
   89c48:	1809883a 	mov	r4,r3
   89c4c:	a80b883a 	mov	r5,r21
   89c50:	d8c00215 	stw	r3,8(sp)
   89c54:	008ad480 	call	8ad48 <__umodsi3>
   89c58:	d8c00217 	ldw	r3,8(sp)
   89c5c:	a80b883a 	mov	r5,r21
   89c60:	d8800015 	stw	r2,0(sp)
   89c64:	1809883a 	mov	r4,r3
   89c68:	008ad400 	call	8ad40 <__udivsi3>
   89c6c:	1009883a 	mov	r4,r2
   89c70:	b80b883a 	mov	r5,r23
   89c74:	102b883a 	mov	r21,r2
   89c78:	0081c900 	call	81c90 <__mulsi3>
   89c7c:	d9c00017 	ldw	r7,0(sp)
   89c80:	8c7fffcc 	andi	r17,r17,65535
   89c84:	380e943a 	slli	r7,r7,16
   89c88:	3c4eb03a 	or	r7,r7,r17
   89c8c:	3880042e 	bgeu	r7,r2,89ca0 <__umoddi3+0x3e8>
   89c90:	3d0f883a 	add	r7,r7,r20
   89c94:	a8ffffc4 	addi	r3,r21,-1
   89c98:	3d00802e 	bgeu	r7,r20,89e9c <__umoddi3+0x5e4>
   89c9c:	182b883a 	mov	r21,r3
   89ca0:	e038943a 	slli	fp,fp,16
   89ca4:	b010d43a 	srli	r8,r22,16
   89ca8:	b1bfffcc 	andi	r6,r22,65535
   89cac:	af2ab03a 	or	r21,r21,fp
   89cb0:	a82ed43a 	srli	r23,r21,16
   89cb4:	ad7fffcc 	andi	r21,r21,65535
   89cb8:	300b883a 	mov	r5,r6
   89cbc:	a809883a 	mov	r4,r21
   89cc0:	38a3c83a 	sub	r17,r7,r2
   89cc4:	d9800115 	stw	r6,4(sp)
   89cc8:	da000015 	stw	r8,0(sp)
   89ccc:	0081c900 	call	81c90 <__mulsi3>
   89cd0:	da000017 	ldw	r8,0(sp)
   89cd4:	a809883a 	mov	r4,r21
   89cd8:	1039883a 	mov	fp,r2
   89cdc:	400b883a 	mov	r5,r8
   89ce0:	da000215 	stw	r8,8(sp)
   89ce4:	0081c900 	call	81c90 <__mulsi3>
   89ce8:	d9800117 	ldw	r6,4(sp)
   89cec:	b809883a 	mov	r4,r23
   89cf0:	d8800015 	stw	r2,0(sp)
   89cf4:	300b883a 	mov	r5,r6
   89cf8:	0081c900 	call	81c90 <__mulsi3>
   89cfc:	d8c00217 	ldw	r3,8(sp)
   89d00:	b809883a 	mov	r4,r23
   89d04:	102b883a 	mov	r21,r2
   89d08:	180b883a 	mov	r5,r3
   89d0c:	0081c900 	call	81c90 <__mulsi3>
   89d10:	d9c00017 	ldw	r7,0(sp)
   89d14:	1007883a 	mov	r3,r2
   89d18:	e004d43a 	srli	r2,fp,16
   89d1c:	a9c9883a 	add	r4,r21,r7
   89d20:	2089883a 	add	r4,r4,r2
   89d24:	2540022e 	bgeu	r4,r21,89d30 <__umoddi3+0x478>
   89d28:	00800074 	movhi	r2,1
   89d2c:	1887883a 	add	r3,r3,r2
   89d30:	2004d43a 	srli	r2,r4,16
   89d34:	2008943a 	slli	r4,r4,16
   89d38:	e73fffcc 	andi	fp,fp,65535
   89d3c:	1887883a 	add	r3,r3,r2
   89d40:	2709883a 	add	r4,r4,fp
   89d44:	88c03d36 	bltu	r17,r3,89e3c <__umoddi3+0x584>
   89d48:	88c06126 	beq	r17,r3,89ed0 <__umoddi3+0x618>
   89d4c:	88c7c83a 	sub	r3,r17,r3
   89d50:	202d883a 	mov	r22,r4
   89d54:	95adc83a 	sub	r22,r18,r22
   89d58:	95a5803a 	cmpltu	r18,r18,r22
   89d5c:	1c87c83a 	sub	r3,r3,r18
   89d60:	1cc4983a 	sll	r2,r3,r19
   89d64:	b42cd83a 	srl	r22,r22,r16
   89d68:	1c06d83a 	srl	r3,r3,r16
   89d6c:	1584b03a 	or	r2,r2,r22
   89d70:	003f7806 	br	89b54 <__umoddi3+0x29c>
   89d74:	002b883a 	mov	r21,zero
   89d78:	003ef506 	br	89950 <__umoddi3+0x98>
   89d7c:	8560983a 	sll	r16,r16,r21
   89d80:	88e6d83a 	srl	r19,r17,r3
   89d84:	90c6d83a 	srl	r3,r18,r3
   89d88:	8028d43a 	srli	r20,r16,16
   89d8c:	8d62983a 	sll	r17,r17,r21
   89d90:	9809883a 	mov	r4,r19
   89d94:	a00b883a 	mov	r5,r20
   89d98:	88eeb03a 	or	r23,r17,r3
   89d9c:	008ad480 	call	8ad48 <__umodsi3>
   89da0:	9809883a 	mov	r4,r19
   89da4:	a00b883a 	mov	r5,r20
   89da8:	1023883a 	mov	r17,r2
   89dac:	85bfffcc 	andi	r22,r16,65535
   89db0:	008ad400 	call	8ad40 <__udivsi3>
   89db4:	1009883a 	mov	r4,r2
   89db8:	b00b883a 	mov	r5,r22
   89dbc:	0081c900 	call	81c90 <__mulsi3>
   89dc0:	1007883a 	mov	r3,r2
   89dc4:	8808943a 	slli	r4,r17,16
   89dc8:	b804d43a 	srli	r2,r23,16
   89dcc:	9566983a 	sll	r19,r18,r21
   89dd0:	2088b03a 	or	r4,r4,r2
   89dd4:	20c0042e 	bgeu	r4,r3,89de8 <__umoddi3+0x530>
   89dd8:	2409883a 	add	r4,r4,r16
   89ddc:	24000236 	bltu	r4,r16,89de8 <__umoddi3+0x530>
   89de0:	20c0012e 	bgeu	r4,r3,89de8 <__umoddi3+0x530>
   89de4:	2409883a 	add	r4,r4,r16
   89de8:	20e5c83a 	sub	r18,r4,r3
   89dec:	9009883a 	mov	r4,r18
   89df0:	a00b883a 	mov	r5,r20
   89df4:	008ad480 	call	8ad48 <__umodsi3>
   89df8:	1023883a 	mov	r17,r2
   89dfc:	9009883a 	mov	r4,r18
   89e00:	a00b883a 	mov	r5,r20
   89e04:	8822943a 	slli	r17,r17,16
   89e08:	008ad400 	call	8ad40 <__udivsi3>
   89e0c:	1009883a 	mov	r4,r2
   89e10:	b00b883a 	mov	r5,r22
   89e14:	bdffffcc 	andi	r23,r23,65535
   89e18:	0081c900 	call	81c90 <__mulsi3>
   89e1c:	8de2b03a 	or	r17,r17,r23
   89e20:	8880042e 	bgeu	r17,r2,89e34 <__umoddi3+0x57c>
   89e24:	8c23883a 	add	r17,r17,r16
   89e28:	8c000236 	bltu	r17,r16,89e34 <__umoddi3+0x57c>
   89e2c:	8880012e 	bgeu	r17,r2,89e34 <__umoddi3+0x57c>
   89e30:	8c23883a 	add	r17,r17,r16
   89e34:	88a3c83a 	sub	r17,r17,r2
   89e38:	003f1b06 	br	89aa8 <__umoddi3+0x1f0>
   89e3c:	25adc83a 	sub	r22,r4,r22
   89e40:	1d07c83a 	sub	r3,r3,r20
   89e44:	2589803a 	cmpltu	r4,r4,r22
   89e48:	1907c83a 	sub	r3,r3,r4
   89e4c:	88c7c83a 	sub	r3,r17,r3
   89e50:	003fc006 	br	89d54 <__umoddi3+0x49c>
   89e54:	00c00204 	movi	r3,8
   89e58:	1827883a 	mov	r19,r3
   89e5c:	003ee906 	br	89a04 <__umoddi3+0x14c>
   89e60:	00c00604 	movi	r3,24
   89e64:	1827883a 	mov	r19,r3
   89e68:	003ee606 	br	89a04 <__umoddi3+0x14c>
   89e6c:	00800604 	movi	r2,24
   89e70:	1009883a 	mov	r4,r2
   89e74:	003ea806 	br	89918 <__umoddi3+0x60>
   89e78:	00800204 	movi	r2,8
   89e7c:	1007883a 	mov	r3,r2
   89e80:	003efd06 	br	89a78 <__umoddi3+0x1c0>
   89e84:	00800604 	movi	r2,24
   89e88:	1007883a 	mov	r3,r2
   89e8c:	003efa06 	br	89a78 <__umoddi3+0x1c0>
   89e90:	00800204 	movi	r2,8
   89e94:	1009883a 	mov	r4,r2
   89e98:	003e9f06 	br	89918 <__umoddi3+0x60>
   89e9c:	38bf7f2e 	bgeu	r7,r2,89c9c <__umoddi3+0x3e4>
   89ea0:	ad7fff84 	addi	r21,r21,-2
   89ea4:	3d0f883a 	add	r7,r7,r20
   89ea8:	003f7d06 	br	89ca0 <__umoddi3+0x3e8>
   89eac:	193f642e 	bgeu	r3,r4,89c40 <__umoddi3+0x388>
   89eb0:	e73fff84 	addi	fp,fp,-2
   89eb4:	1d07883a 	add	r3,r3,r20
   89eb8:	003f6206 	br	89c44 <__umoddi3+0x38c>
   89ebc:	1c07883a 	add	r3,r3,r16
   89ec0:	003f0b06 	br	89af0 <__umoddi3+0x238>
   89ec4:	9005883a 	mov	r2,r18
   89ec8:	a007883a 	mov	r3,r20
   89ecc:	003f2106 	br	89b54 <__umoddi3+0x29c>
   89ed0:	913fda36 	bltu	r18,r4,89e3c <__umoddi3+0x584>
   89ed4:	202d883a 	mov	r22,r4
   89ed8:	0007883a 	mov	r3,zero
   89edc:	003f9d06 	br	89d54 <__umoddi3+0x49c>

00089ee0 <_fpadd_parts>:
   89ee0:	2005883a 	mov	r2,r4
   89ee4:	21000017 	ldw	r4,0(r4)
   89ee8:	01c00044 	movi	r7,1
   89eec:	3900622e 	bgeu	r7,r4,8a078 <_fpadd_parts+0x198>
   89ef0:	28c00017 	ldw	r3,0(r5)
   89ef4:	38c05f2e 	bgeu	r7,r3,8a074 <_fpadd_parts+0x194>
   89ef8:	01c00104 	movi	r7,4
   89efc:	21c0c626 	beq	r4,r7,8a218 <_fpadd_parts+0x338>
   89f00:	19c05c26 	beq	r3,r7,8a074 <_fpadd_parts+0x194>
   89f04:	01c00084 	movi	r7,2
   89f08:	19c06b26 	beq	r3,r7,8a0b8 <_fpadd_parts+0x1d8>
   89f0c:	21c05926 	beq	r4,r7,8a074 <_fpadd_parts+0x194>
   89f10:	11c00217 	ldw	r7,8(r2)
   89f14:	2ac00217 	ldw	r11,8(r5)
   89f18:	13000317 	ldw	r12,12(r2)
   89f1c:	13400417 	ldw	r13,16(r2)
   89f20:	3ac9c83a 	sub	r4,r7,r11
   89f24:	2a000317 	ldw	r8,12(r5)
   89f28:	2a400417 	ldw	r9,16(r5)
   89f2c:	2015883a 	mov	r10,r4
   89f30:	20007516 	blt	r4,zero,8a108 <_fpadd_parts+0x228>
   89f34:	00c00fc4 	movi	r3,63
   89f38:	1a805016 	blt	r3,r10,8a07c <_fpadd_parts+0x19c>
   89f3c:	0100870e 	bge	zero,r4,8a15c <_fpadd_parts+0x27c>
   89f40:	50fff804 	addi	r3,r10,-32
   89f44:	18009916 	blt	r3,zero,8a1ac <_fpadd_parts+0x2cc>
   89f48:	48d6d83a 	srl	r11,r9,r3
   89f4c:	001d883a 	mov	r14,zero
   89f50:	18009e16 	blt	r3,zero,8a1cc <_fpadd_parts+0x2ec>
   89f54:	01000044 	movi	r4,1
   89f58:	20c6983a 	sll	r3,r4,r3
   89f5c:	0015883a 	mov	r10,zero
   89f60:	513fffc4 	addi	r4,r10,-1
   89f64:	2295403a 	cmpgeu	r10,r4,r10
   89f68:	1a87c83a 	sub	r3,r3,r10
   89f6c:	1a52703a 	and	r9,r3,r9
   89f70:	2210703a 	and	r8,r4,r8
   89f74:	4250b03a 	or	r8,r8,r9
   89f78:	4010c03a 	cmpne	r8,r8,zero
   89f7c:	42d0b03a 	or	r8,r8,r11
   89f80:	7013883a 	mov	r9,r14
   89f84:	11000117 	ldw	r4,4(r2)
   89f88:	28800117 	ldw	r2,4(r5)
   89f8c:	20804126 	beq	r4,r2,8a094 <_fpadd_parts+0x1b4>
   89f90:	20006326 	beq	r4,zero,8a120 <_fpadd_parts+0x240>
   89f94:	4305c83a 	sub	r2,r8,r12
   89f98:	4091803a 	cmpltu	r8,r8,r2
   89f9c:	4b47c83a 	sub	r3,r9,r13
   89fa0:	1a07c83a 	sub	r3,r3,r8
   89fa4:	18006316 	blt	r3,zero,8a134 <_fpadd_parts+0x254>
   89fa8:	30000115 	stw	zero,4(r6)
   89fac:	31c00215 	stw	r7,8(r6)
   89fb0:	30800315 	stw	r2,12(r6)
   89fb4:	30c00415 	stw	r3,16(r6)
   89fb8:	11ffffc4 	addi	r7,r2,-1
   89fbc:	388b403a 	cmpgeu	r5,r7,r2
   89fc0:	194bc83a 	sub	r5,r3,r5
   89fc4:	01040034 	movhi	r4,4096
   89fc8:	213fffc4 	addi	r4,r4,-1
   89fcc:	21401736 	bltu	r4,r5,8a02c <_fpadd_parts+0x14c>
   89fd0:	29008226 	beq	r5,r4,8a1dc <_fpadd_parts+0x2fc>
   89fd4:	31400217 	ldw	r5,8(r6)
   89fd8:	02840034 	movhi	r10,4096
   89fdc:	52bfffc4 	addi	r10,r10,-1
   89fe0:	033fff84 	movi	r12,-2
   89fe4:	297fffc4 	addi	r5,r5,-1
   89fe8:	00000106 	br	89ff0 <_fpadd_parts+0x110>
   89fec:	3a804a26 	beq	r7,r10,8a118 <_fpadd_parts+0x238>
   89ff0:	1089883a 	add	r4,r2,r2
   89ff4:	2091803a 	cmpltu	r8,r4,r2
   89ff8:	18c7883a 	add	r3,r3,r3
   89ffc:	227fffc4 	addi	r9,r4,-1
   8a000:	40d1883a 	add	r8,r8,r3
   8a004:	490f403a 	cmpgeu	r7,r9,r4
   8a008:	41cfc83a 	sub	r7,r8,r7
   8a00c:	2817883a 	mov	r11,r5
   8a010:	2005883a 	mov	r2,r4
   8a014:	4007883a 	mov	r3,r8
   8a018:	297fffc4 	addi	r5,r5,-1
   8a01c:	51fff32e 	bgeu	r10,r7,89fec <_fpadd_parts+0x10c>
   8a020:	31000315 	stw	r4,12(r6)
   8a024:	32000415 	stw	r8,16(r6)
   8a028:	32c00215 	stw	r11,8(r6)
   8a02c:	010000c4 	movi	r4,3
   8a030:	31000015 	stw	r4,0(r6)
   8a034:	01080034 	movhi	r4,8192
   8a038:	213fffc4 	addi	r4,r4,-1
   8a03c:	20c00b2e 	bgeu	r4,r3,8a06c <_fpadd_parts+0x18c>
   8a040:	180e97fa 	slli	r7,r3,31
   8a044:	1008d07a 	srli	r4,r2,1
   8a048:	31400217 	ldw	r5,8(r6)
   8a04c:	1806d07a 	srli	r3,r3,1
   8a050:	1080004c 	andi	r2,r2,1
   8a054:	3908b03a 	or	r4,r7,r4
   8a058:	1108b03a 	or	r4,r2,r4
   8a05c:	29400044 	addi	r5,r5,1
   8a060:	31000315 	stw	r4,12(r6)
   8a064:	30c00415 	stw	r3,16(r6)
   8a068:	31400215 	stw	r5,8(r6)
   8a06c:	3005883a 	mov	r2,r6
   8a070:	f800283a 	ret
   8a074:	2805883a 	mov	r2,r5
   8a078:	f800283a 	ret
   8a07c:	59c01e0e 	bge	r11,r7,8a0f8 <_fpadd_parts+0x218>
   8a080:	11000117 	ldw	r4,4(r2)
   8a084:	28800117 	ldw	r2,4(r5)
   8a088:	0011883a 	mov	r8,zero
   8a08c:	0013883a 	mov	r9,zero
   8a090:	20bfbf1e 	bne	r4,r2,89f90 <_fpadd_parts+0xb0>
   8a094:	4305883a 	add	r2,r8,r12
   8a098:	1207803a 	cmpltu	r3,r2,r8
   8a09c:	4b53883a 	add	r9,r9,r13
   8a0a0:	1a47883a 	add	r3,r3,r9
   8a0a4:	31000115 	stw	r4,4(r6)
   8a0a8:	31c00215 	stw	r7,8(r6)
   8a0ac:	30800315 	stw	r2,12(r6)
   8a0b0:	30c00415 	stw	r3,16(r6)
   8a0b4:	003fdd06 	br	8a02c <_fpadd_parts+0x14c>
   8a0b8:	20ffef1e 	bne	r4,r3,8a078 <_fpadd_parts+0x198>
   8a0bc:	31000015 	stw	r4,0(r6)
   8a0c0:	10c00117 	ldw	r3,4(r2)
   8a0c4:	30c00115 	stw	r3,4(r6)
   8a0c8:	10c00217 	ldw	r3,8(r2)
   8a0cc:	11000117 	ldw	r4,4(r2)
   8a0d0:	29400117 	ldw	r5,4(r5)
   8a0d4:	30c00215 	stw	r3,8(r6)
   8a0d8:	10c00317 	ldw	r3,12(r2)
   8a0dc:	2908703a 	and	r4,r5,r4
   8a0e0:	30c00315 	stw	r3,12(r6)
   8a0e4:	10c00417 	ldw	r3,16(r2)
   8a0e8:	31000115 	stw	r4,4(r6)
   8a0ec:	3005883a 	mov	r2,r6
   8a0f0:	30c00415 	stw	r3,16(r6)
   8a0f4:	f800283a 	ret
   8a0f8:	580f883a 	mov	r7,r11
   8a0fc:	0019883a 	mov	r12,zero
   8a100:	001b883a 	mov	r13,zero
   8a104:	003f9f06 	br	89f84 <_fpadd_parts+0xa4>
   8a108:	0115c83a 	sub	r10,zero,r4
   8a10c:	00c00fc4 	movi	r3,63
   8a110:	1abfda16 	blt	r3,r10,8a07c <_fpadd_parts+0x19c>
   8a114:	003f8906 	br	89f3c <_fpadd_parts+0x5c>
   8a118:	627fb52e 	bgeu	r12,r9,89ff0 <_fpadd_parts+0x110>
   8a11c:	003fc006 	br	8a020 <_fpadd_parts+0x140>
   8a120:	6205c83a 	sub	r2,r12,r8
   8a124:	6099803a 	cmpltu	r12,r12,r2
   8a128:	6a47c83a 	sub	r3,r13,r9
   8a12c:	1b07c83a 	sub	r3,r3,r12
   8a130:	183f9d0e 	bge	r3,zero,89fa8 <_fpadd_parts+0xc8>
   8a134:	0085c83a 	sub	r2,zero,r2
   8a138:	1008c03a 	cmpne	r4,r2,zero
   8a13c:	00c7c83a 	sub	r3,zero,r3
   8a140:	1907c83a 	sub	r3,r3,r4
   8a144:	01000044 	movi	r4,1
   8a148:	31000115 	stw	r4,4(r6)
   8a14c:	31c00215 	stw	r7,8(r6)
   8a150:	30800315 	stw	r2,12(r6)
   8a154:	30c00415 	stw	r3,16(r6)
   8a158:	003f9706 	br	89fb8 <_fpadd_parts+0xd8>
   8a15c:	203f8926 	beq	r4,zero,89f84 <_fpadd_parts+0xa4>
   8a160:	50fff804 	addi	r3,r10,-32
   8a164:	3a8f883a 	add	r7,r7,r10
   8a168:	18002316 	blt	r3,zero,8a1f8 <_fpadd_parts+0x318>
   8a16c:	68d6d83a 	srl	r11,r13,r3
   8a170:	001d883a 	mov	r14,zero
   8a174:	18001c16 	blt	r3,zero,8a1e8 <_fpadd_parts+0x308>
   8a178:	01000044 	movi	r4,1
   8a17c:	20c6983a 	sll	r3,r4,r3
   8a180:	0015883a 	mov	r10,zero
   8a184:	513fffc4 	addi	r4,r10,-1
   8a188:	2295403a 	cmpgeu	r10,r4,r10
   8a18c:	1a87c83a 	sub	r3,r3,r10
   8a190:	1b5a703a 	and	r13,r3,r13
   8a194:	2318703a 	and	r12,r4,r12
   8a198:	6358b03a 	or	r12,r12,r13
   8a19c:	6018c03a 	cmpne	r12,r12,zero
   8a1a0:	62d8b03a 	or	r12,r12,r11
   8a1a4:	701b883a 	mov	r13,r14
   8a1a8:	003f7606 	br	89f84 <_fpadd_parts+0xa4>
   8a1ac:	4808907a 	slli	r4,r9,1
   8a1b0:	02c007c4 	movi	r11,31
   8a1b4:	5a97c83a 	sub	r11,r11,r10
   8a1b8:	22c8983a 	sll	r4,r4,r11
   8a1bc:	4296d83a 	srl	r11,r8,r10
   8a1c0:	4a9cd83a 	srl	r14,r9,r10
   8a1c4:	22d6b03a 	or	r11,r4,r11
   8a1c8:	003f6106 	br	89f50 <_fpadd_parts+0x70>
   8a1cc:	00c00044 	movi	r3,1
   8a1d0:	1a94983a 	sll	r10,r3,r10
   8a1d4:	0007883a 	mov	r3,zero
   8a1d8:	003f6106 	br	89f60 <_fpadd_parts+0x80>
   8a1dc:	013fff84 	movi	r4,-2
   8a1e0:	21ff7c2e 	bgeu	r4,r7,89fd4 <_fpadd_parts+0xf4>
   8a1e4:	003f9106 	br	8a02c <_fpadd_parts+0x14c>
   8a1e8:	00c00044 	movi	r3,1
   8a1ec:	1a94983a 	sll	r10,r3,r10
   8a1f0:	0007883a 	mov	r3,zero
   8a1f4:	003fe306 	br	8a184 <_fpadd_parts+0x2a4>
   8a1f8:	6816907a 	slli	r11,r13,1
   8a1fc:	010007c4 	movi	r4,31
   8a200:	2289c83a 	sub	r4,r4,r10
   8a204:	5908983a 	sll	r4,r11,r4
   8a208:	6296d83a 	srl	r11,r12,r10
   8a20c:	6a9cd83a 	srl	r14,r13,r10
   8a210:	22d6b03a 	or	r11,r4,r11
   8a214:	003fd706 	br	8a174 <_fpadd_parts+0x294>
   8a218:	193f971e 	bne	r3,r4,8a078 <_fpadd_parts+0x198>
   8a21c:	11000117 	ldw	r4,4(r2)
   8a220:	28c00117 	ldw	r3,4(r5)
   8a224:	20ff9426 	beq	r4,r3,8a078 <_fpadd_parts+0x198>
   8a228:	00800274 	movhi	r2,9
   8a22c:	10b96104 	addi	r2,r2,-6780
   8a230:	f800283a 	ret

0008a234 <__adddf3>:
   8a234:	deffec04 	addi	sp,sp,-80
   8a238:	d9001115 	stw	r4,68(sp)
   8a23c:	d9401215 	stw	r5,72(sp)
   8a240:	d9001104 	addi	r4,sp,68
   8a244:	d9400a04 	addi	r5,sp,40
   8a248:	dfc01315 	stw	ra,76(sp)
   8a24c:	d9c01015 	stw	r7,64(sp)
   8a250:	d9800f15 	stw	r6,60(sp)
   8a254:	008b1300 	call	8b130 <__unpack_d>
   8a258:	d9000f04 	addi	r4,sp,60
   8a25c:	d9400504 	addi	r5,sp,20
   8a260:	008b1300 	call	8b130 <__unpack_d>
   8a264:	d9000a04 	addi	r4,sp,40
   8a268:	d9400504 	addi	r5,sp,20
   8a26c:	d80d883a 	mov	r6,sp
   8a270:	0089ee00 	call	89ee0 <_fpadd_parts>
   8a274:	1009883a 	mov	r4,r2
   8a278:	008af0c0 	call	8af0c <__pack_d>
   8a27c:	dfc01317 	ldw	ra,76(sp)
   8a280:	dec01404 	addi	sp,sp,80
   8a284:	f800283a 	ret

0008a288 <__subdf3>:
   8a288:	deffec04 	addi	sp,sp,-80
   8a28c:	d9001115 	stw	r4,68(sp)
   8a290:	d9401215 	stw	r5,72(sp)
   8a294:	d9001104 	addi	r4,sp,68
   8a298:	d9400a04 	addi	r5,sp,40
   8a29c:	dfc01315 	stw	ra,76(sp)
   8a2a0:	d9c01015 	stw	r7,64(sp)
   8a2a4:	d9800f15 	stw	r6,60(sp)
   8a2a8:	008b1300 	call	8b130 <__unpack_d>
   8a2ac:	d9000f04 	addi	r4,sp,60
   8a2b0:	d9400504 	addi	r5,sp,20
   8a2b4:	008b1300 	call	8b130 <__unpack_d>
   8a2b8:	d8800617 	ldw	r2,24(sp)
   8a2bc:	d9000a04 	addi	r4,sp,40
   8a2c0:	d9400504 	addi	r5,sp,20
   8a2c4:	d80d883a 	mov	r6,sp
   8a2c8:	1080005c 	xori	r2,r2,1
   8a2cc:	d8800615 	stw	r2,24(sp)
   8a2d0:	0089ee00 	call	89ee0 <_fpadd_parts>
   8a2d4:	1009883a 	mov	r4,r2
   8a2d8:	008af0c0 	call	8af0c <__pack_d>
   8a2dc:	dfc01317 	ldw	ra,76(sp)
   8a2e0:	dec01404 	addi	sp,sp,80
   8a2e4:	f800283a 	ret

0008a2e8 <__muldf3>:
   8a2e8:	deffe404 	addi	sp,sp,-112
   8a2ec:	d9001115 	stw	r4,68(sp)
   8a2f0:	d9401215 	stw	r5,72(sp)
   8a2f4:	d9001104 	addi	r4,sp,68
   8a2f8:	d9400a04 	addi	r5,sp,40
   8a2fc:	dfc01b15 	stw	ra,108(sp)
   8a300:	d9800f15 	stw	r6,60(sp)
   8a304:	d9c01015 	stw	r7,64(sp)
   8a308:	ddc01a15 	stw	r23,104(sp)
   8a30c:	dd801915 	stw	r22,100(sp)
   8a310:	dd401815 	stw	r21,96(sp)
   8a314:	dd001715 	stw	r20,92(sp)
   8a318:	dcc01615 	stw	r19,88(sp)
   8a31c:	dc801515 	stw	r18,84(sp)
   8a320:	dc401415 	stw	r17,80(sp)
   8a324:	dc001315 	stw	r16,76(sp)
   8a328:	008b1300 	call	8b130 <__unpack_d>
   8a32c:	d9000f04 	addi	r4,sp,60
   8a330:	d9400504 	addi	r5,sp,20
   8a334:	008b1300 	call	8b130 <__unpack_d>
   8a338:	d8c00a17 	ldw	r3,40(sp)
   8a33c:	00800044 	movi	r2,1
   8a340:	10c01136 	bltu	r2,r3,8a388 <__muldf3+0xa0>
   8a344:	d8c00b17 	ldw	r3,44(sp)
   8a348:	d8800617 	ldw	r2,24(sp)
   8a34c:	d9000a04 	addi	r4,sp,40
   8a350:	1884c03a 	cmpne	r2,r3,r2
   8a354:	d8800b15 	stw	r2,44(sp)
   8a358:	008af0c0 	call	8af0c <__pack_d>
   8a35c:	dfc01b17 	ldw	ra,108(sp)
   8a360:	ddc01a17 	ldw	r23,104(sp)
   8a364:	dd801917 	ldw	r22,100(sp)
   8a368:	dd401817 	ldw	r21,96(sp)
   8a36c:	dd001717 	ldw	r20,92(sp)
   8a370:	dcc01617 	ldw	r19,88(sp)
   8a374:	dc801517 	ldw	r18,84(sp)
   8a378:	dc401417 	ldw	r17,80(sp)
   8a37c:	dc001317 	ldw	r16,76(sp)
   8a380:	dec01c04 	addi	sp,sp,112
   8a384:	f800283a 	ret
   8a388:	d9000517 	ldw	r4,20(sp)
   8a38c:	11000636 	bltu	r2,r4,8a3a8 <__muldf3+0xc0>
   8a390:	d8800617 	ldw	r2,24(sp)
   8a394:	d8c00b17 	ldw	r3,44(sp)
   8a398:	d9000504 	addi	r4,sp,20
   8a39c:	1884c03a 	cmpne	r2,r3,r2
   8a3a0:	d8800615 	stw	r2,24(sp)
   8a3a4:	003fec06 	br	8a358 <__muldf3+0x70>
   8a3a8:	00800104 	movi	r2,4
   8a3ac:	1880051e 	bne	r3,r2,8a3c4 <__muldf3+0xdc>
   8a3b0:	00800084 	movi	r2,2
   8a3b4:	20bfe31e 	bne	r4,r2,8a344 <__muldf3+0x5c>
   8a3b8:	01000274 	movhi	r4,9
   8a3bc:	21396104 	addi	r4,r4,-6780
   8a3c0:	003fe506 	br	8a358 <__muldf3+0x70>
   8a3c4:	2080031e 	bne	r4,r2,8a3d4 <__muldf3+0xec>
   8a3c8:	00800084 	movi	r2,2
   8a3cc:	18bffa26 	beq	r3,r2,8a3b8 <__muldf3+0xd0>
   8a3d0:	003fef06 	br	8a390 <__muldf3+0xa8>
   8a3d4:	00800084 	movi	r2,2
   8a3d8:	18bfda26 	beq	r3,r2,8a344 <__muldf3+0x5c>
   8a3dc:	20bfec26 	beq	r4,r2,8a390 <__muldf3+0xa8>
   8a3e0:	dc000d17 	ldw	r16,52(sp)
   8a3e4:	dd000817 	ldw	r20,32(sp)
   8a3e8:	dc800917 	ldw	r18,36(sp)
   8a3ec:	8009883a 	mov	r4,r16
   8a3f0:	000b883a 	mov	r5,zero
   8a3f4:	a00d883a 	mov	r6,r20
   8a3f8:	000f883a 	mov	r7,zero
   8a3fc:	008ad500 	call	8ad50 <__muldi3>
   8a400:	dc400e17 	ldw	r17,56(sp)
   8a404:	9009883a 	mov	r4,r18
   8a408:	800d883a 	mov	r6,r16
   8a40c:	000b883a 	mov	r5,zero
   8a410:	000f883a 	mov	r7,zero
   8a414:	102f883a 	mov	r23,r2
   8a418:	1827883a 	mov	r19,r3
   8a41c:	008ad500 	call	8ad50 <__muldi3>
   8a420:	900d883a 	mov	r6,r18
   8a424:	8809883a 	mov	r4,r17
   8a428:	000b883a 	mov	r5,zero
   8a42c:	000f883a 	mov	r7,zero
   8a430:	102b883a 	mov	r21,r2
   8a434:	1821883a 	mov	r16,r3
   8a438:	008ad500 	call	8ad50 <__muldi3>
   8a43c:	8809883a 	mov	r4,r17
   8a440:	000b883a 	mov	r5,zero
   8a444:	a00d883a 	mov	r6,r20
   8a448:	000f883a 	mov	r7,zero
   8a44c:	102d883a 	mov	r22,r2
   8a450:	1825883a 	mov	r18,r3
   8a454:	008ad500 	call	8ad50 <__muldi3>
   8a458:	154b883a 	add	r5,r2,r21
   8a45c:	2889803a 	cmpltu	r4,r5,r2
   8a460:	1c07883a 	add	r3,r3,r16
   8a464:	20c9883a 	add	r4,r4,r3
   8a468:	24004b36 	bltu	r4,r16,8a598 <__muldf3+0x2b0>
   8a46c:	8100011e 	bne	r16,r4,8a474 <__muldf3+0x18c>
   8a470:	2d404936 	bltu	r5,r21,8a598 <__muldf3+0x2b0>
   8a474:	0011883a 	mov	r8,zero
   8a478:	0007883a 	mov	r3,zero
   8a47c:	2ccb883a 	add	r5,r5,r19
   8a480:	b80d883a 	mov	r6,r23
   8a484:	2cc0012e 	bgeu	r5,r19,8a48c <__muldf3+0x1a4>
   8a488:	02000044 	movi	r8,1
   8a48c:	258f883a 	add	r7,r4,r22
   8a490:	3909803a 	cmpltu	r4,r7,r4
   8a494:	da400c17 	ldw	r9,48(sp)
   8a498:	2489883a 	add	r4,r4,r18
   8a49c:	d8800717 	ldw	r2,28(sp)
   8a4a0:	20c9883a 	add	r4,r4,r3
   8a4a4:	da800b17 	ldw	r10,44(sp)
   8a4a8:	d8c00617 	ldw	r3,24(sp)
   8a4ac:	3a11883a 	add	r8,r7,r8
   8a4b0:	4885883a 	add	r2,r9,r2
   8a4b4:	50c6c03a 	cmpne	r3,r10,r3
   8a4b8:	41cf803a 	cmpltu	r7,r8,r7
   8a4bc:	12400104 	addi	r9,r2,4
   8a4c0:	d8c00115 	stw	r3,4(sp)
   8a4c4:	3909883a 	add	r4,r7,r4
   8a4c8:	da400215 	stw	r9,8(sp)
   8a4cc:	03480034 	movhi	r13,8192
   8a4d0:	6b7fffc4 	addi	r13,r13,-1
   8a4d4:	4007883a 	mov	r3,r8
   8a4d8:	6900102e 	bgeu	r13,r4,8a51c <__muldf3+0x234>
   8a4dc:	10800144 	addi	r2,r2,5
   8a4e0:	180ed07a 	srli	r7,r3,1
   8a4e4:	18c0004c 	andi	r3,r3,1
   8a4e8:	201097fa 	slli	r8,r4,31
   8a4ec:	281697fa 	slli	r11,r5,31
   8a4f0:	2008d07a 	srli	r4,r4,1
   8a4f4:	3014d07a 	srli	r10,r6,1
   8a4f8:	2812d07a 	srli	r9,r5,1
   8a4fc:	1019883a 	mov	r12,r2
   8a500:	18000226 	beq	r3,zero,8a50c <__muldf3+0x224>
   8a504:	5a8cb03a 	or	r6,r11,r10
   8a508:	49600034 	orhi	r5,r9,32768
   8a50c:	41c6b03a 	or	r3,r8,r7
   8a510:	10800044 	addi	r2,r2,1
   8a514:	693ff236 	bltu	r13,r4,8a4e0 <__muldf3+0x1f8>
   8a518:	db000215 	stw	r12,8(sp)
   8a51c:	03440034 	movhi	r13,4096
   8a520:	6b7fffc4 	addi	r13,r13,-1
   8a524:	69001336 	bltu	r13,r4,8a574 <__muldf3+0x28c>
   8a528:	d8800217 	ldw	r2,8(sp)
   8a52c:	10bfffc4 	addi	r2,r2,-1
   8a530:	18d3883a 	add	r9,r3,r3
   8a534:	48c7803a 	cmpltu	r3,r9,r3
   8a538:	2109883a 	add	r4,r4,r4
   8a53c:	190f883a 	add	r7,r3,r4
   8a540:	3191883a 	add	r8,r6,r6
   8a544:	4197803a 	cmpltu	r11,r8,r6
   8a548:	2955883a 	add	r10,r5,r5
   8a54c:	1019883a 	mov	r12,r2
   8a550:	4807883a 	mov	r3,r9
   8a554:	3809883a 	mov	r4,r7
   8a558:	2800010e 	bge	r5,zero,8a560 <__muldf3+0x278>
   8a55c:	48c00054 	ori	r3,r9,1
   8a560:	400d883a 	mov	r6,r8
   8a564:	5a8b883a 	add	r5,r11,r10
   8a568:	10bfffc4 	addi	r2,r2,-1
   8a56c:	69fff02e 	bgeu	r13,r7,8a530 <__muldf3+0x248>
   8a570:	db000215 	stw	r12,8(sp)
   8a574:	18803fcc 	andi	r2,r3,255
   8a578:	01c02004 	movi	r7,128
   8a57c:	11c00926 	beq	r2,r7,8a5a4 <__muldf3+0x2bc>
   8a580:	008000c4 	movi	r2,3
   8a584:	d9000415 	stw	r4,16(sp)
   8a588:	d8c00315 	stw	r3,12(sp)
   8a58c:	d8800015 	stw	r2,0(sp)
   8a590:	d809883a 	mov	r4,sp
   8a594:	003f7006 	br	8a358 <__muldf3+0x70>
   8a598:	0011883a 	mov	r8,zero
   8a59c:	00c00044 	movi	r3,1
   8a5a0:	003fb606 	br	8a47c <__muldf3+0x194>
   8a5a4:	19c0400c 	andi	r7,r3,256
   8a5a8:	383ff51e 	bne	r7,zero,8a580 <__muldf3+0x298>
   8a5ac:	314ab03a 	or	r5,r6,r5
   8a5b0:	283ff326 	beq	r5,zero,8a580 <__muldf3+0x298>
   8a5b4:	1885883a 	add	r2,r3,r2
   8a5b8:	10cb803a 	cmpltu	r5,r2,r3
   8a5bc:	00ffc004 	movi	r3,-256
   8a5c0:	10c6703a 	and	r3,r2,r3
   8a5c4:	2909883a 	add	r4,r5,r4
   8a5c8:	003fed06 	br	8a580 <__muldf3+0x298>

0008a5cc <__divdf3>:
   8a5cc:	defff104 	addi	sp,sp,-60
   8a5d0:	d9000c15 	stw	r4,48(sp)
   8a5d4:	d9400d15 	stw	r5,52(sp)
   8a5d8:	d9000c04 	addi	r4,sp,48
   8a5dc:	d9400504 	addi	r5,sp,20
   8a5e0:	dfc00e15 	stw	ra,56(sp)
   8a5e4:	d9800a15 	stw	r6,40(sp)
   8a5e8:	d9c00b15 	stw	r7,44(sp)
   8a5ec:	008b1300 	call	8b130 <__unpack_d>
   8a5f0:	d9000a04 	addi	r4,sp,40
   8a5f4:	d80b883a 	mov	r5,sp
   8a5f8:	008b1300 	call	8b130 <__unpack_d>
   8a5fc:	d8c00517 	ldw	r3,20(sp)
   8a600:	00800044 	movi	r2,1
   8a604:	10c00536 	bltu	r2,r3,8a61c <__divdf3+0x50>
   8a608:	d9000504 	addi	r4,sp,20
   8a60c:	008af0c0 	call	8af0c <__pack_d>
   8a610:	dfc00e17 	ldw	ra,56(sp)
   8a614:	dec00f04 	addi	sp,sp,60
   8a618:	f800283a 	ret
   8a61c:	d9000017 	ldw	r4,0(sp)
   8a620:	11000536 	bltu	r2,r4,8a638 <__divdf3+0x6c>
   8a624:	d809883a 	mov	r4,sp
   8a628:	008af0c0 	call	8af0c <__pack_d>
   8a62c:	dfc00e17 	ldw	ra,56(sp)
   8a630:	dec00f04 	addi	sp,sp,60
   8a634:	f800283a 	ret
   8a638:	d9800617 	ldw	r6,24(sp)
   8a63c:	d9400117 	ldw	r5,4(sp)
   8a640:	00800104 	movi	r2,4
   8a644:	314af03a 	xor	r5,r6,r5
   8a648:	d9400615 	stw	r5,24(sp)
   8a64c:	18800226 	beq	r3,r2,8a658 <__divdf3+0x8c>
   8a650:	01400084 	movi	r5,2
   8a654:	1940041e 	bne	r3,r5,8a668 <__divdf3+0x9c>
   8a658:	193feb1e 	bne	r3,r4,8a608 <__divdf3+0x3c>
   8a65c:	01000274 	movhi	r4,9
   8a660:	21396104 	addi	r4,r4,-6780
   8a664:	003fe906 	br	8a60c <__divdf3+0x40>
   8a668:	20803326 	beq	r4,r2,8a738 <__divdf3+0x16c>
   8a66c:	21403726 	beq	r4,r5,8a74c <__divdf3+0x180>
   8a670:	d8800217 	ldw	r2,8(sp)
   8a674:	d9000717 	ldw	r4,28(sp)
   8a678:	d8c00917 	ldw	r3,36(sp)
   8a67c:	da000417 	ldw	r8,16(sp)
   8a680:	2089c83a 	sub	r4,r4,r2
   8a684:	d9000715 	stw	r4,28(sp)
   8a688:	d8800817 	ldw	r2,32(sp)
   8a68c:	dbc00317 	ldw	r15,12(sp)
   8a690:	1a000236 	bltu	r3,r8,8a69c <__divdf3+0xd0>
   8a694:	40c0081e 	bne	r8,r3,8a6b8 <__divdf3+0xec>
   8a698:	13c0072e 	bgeu	r2,r15,8a6b8 <__divdf3+0xec>
   8a69c:	108b883a 	add	r5,r2,r2
   8a6a0:	288d803a 	cmpltu	r6,r5,r2
   8a6a4:	18c7883a 	add	r3,r3,r3
   8a6a8:	213fffc4 	addi	r4,r4,-1
   8a6ac:	2805883a 	mov	r2,r5
   8a6b0:	30c7883a 	add	r3,r6,r3
   8a6b4:	d9000715 	stw	r4,28(sp)
   8a6b8:	01400f44 	movi	r5,61
   8a6bc:	000f883a 	mov	r7,zero
   8a6c0:	01040034 	movhi	r4,4096
   8a6c4:	0019883a 	mov	r12,zero
   8a6c8:	001b883a 	mov	r13,zero
   8a6cc:	201697fa 	slli	r11,r4,31
   8a6d0:	3814d07a 	srli	r10,r7,1
   8a6d4:	297fffc4 	addi	r5,r5,-1
   8a6d8:	1a000936 	bltu	r3,r8,8a700 <__divdf3+0x134>
   8a6dc:	13cdc83a 	sub	r6,r2,r15
   8a6e0:	1193803a 	cmpltu	r9,r2,r6
   8a6e4:	1a1dc83a 	sub	r14,r3,r8
   8a6e8:	40c0011e 	bne	r8,r3,8a6f0 <__divdf3+0x124>
   8a6ec:	13c00436 	bltu	r2,r15,8a700 <__divdf3+0x134>
   8a6f0:	3005883a 	mov	r2,r6
   8a6f4:	7247c83a 	sub	r3,r14,r9
   8a6f8:	61d8b03a 	or	r12,r12,r7
   8a6fc:	691ab03a 	or	r13,r13,r4
   8a700:	108d883a 	add	r6,r2,r2
   8a704:	3093803a 	cmpltu	r9,r6,r2
   8a708:	18c7883a 	add	r3,r3,r3
   8a70c:	5a8eb03a 	or	r7,r11,r10
   8a710:	2008d07a 	srli	r4,r4,1
   8a714:	3005883a 	mov	r2,r6
   8a718:	48c7883a 	add	r3,r9,r3
   8a71c:	283feb1e 	bne	r5,zero,8a6cc <__divdf3+0x100>
   8a720:	61003fcc 	andi	r4,r12,255
   8a724:	01402004 	movi	r5,128
   8a728:	21400b26 	beq	r4,r5,8a758 <__divdf3+0x18c>
   8a72c:	db000815 	stw	r12,32(sp)
   8a730:	db400915 	stw	r13,36(sp)
   8a734:	003fb406 	br	8a608 <__divdf3+0x3c>
   8a738:	d8000815 	stw	zero,32(sp)
   8a73c:	d8000915 	stw	zero,36(sp)
   8a740:	d8000715 	stw	zero,28(sp)
   8a744:	d9000504 	addi	r4,sp,20
   8a748:	003fb006 	br	8a60c <__divdf3+0x40>
   8a74c:	d8800515 	stw	r2,20(sp)
   8a750:	d9000504 	addi	r4,sp,20
   8a754:	003fad06 	br	8a60c <__divdf3+0x40>
   8a758:	6140400c 	andi	r5,r12,256
   8a75c:	283ff31e 	bne	r5,zero,8a72c <__divdf3+0x160>
   8a760:	30c4b03a 	or	r2,r6,r3
   8a764:	103ff126 	beq	r2,zero,8a72c <__divdf3+0x160>
   8a768:	6109883a 	add	r4,r12,r4
   8a76c:	2305803a 	cmpltu	r2,r4,r12
   8a770:	033fc004 	movi	r12,-256
   8a774:	2318703a 	and	r12,r4,r12
   8a778:	135b883a 	add	r13,r2,r13
   8a77c:	003feb06 	br	8a72c <__divdf3+0x160>

0008a780 <__eqdf2>:
   8a780:	defff104 	addi	sp,sp,-60
   8a784:	d9000c15 	stw	r4,48(sp)
   8a788:	d9400d15 	stw	r5,52(sp)
   8a78c:	d9000c04 	addi	r4,sp,48
   8a790:	d9400504 	addi	r5,sp,20
   8a794:	dfc00e15 	stw	ra,56(sp)
   8a798:	d9800a15 	stw	r6,40(sp)
   8a79c:	d9c00b15 	stw	r7,44(sp)
   8a7a0:	008b1300 	call	8b130 <__unpack_d>
   8a7a4:	d9000a04 	addi	r4,sp,40
   8a7a8:	d80b883a 	mov	r5,sp
   8a7ac:	008b1300 	call	8b130 <__unpack_d>
   8a7b0:	d8c00517 	ldw	r3,20(sp)
   8a7b4:	00800044 	movi	r2,1
   8a7b8:	10c0052e 	bgeu	r2,r3,8a7d0 <__eqdf2+0x50>
   8a7bc:	d8c00017 	ldw	r3,0(sp)
   8a7c0:	10c0032e 	bgeu	r2,r3,8a7d0 <__eqdf2+0x50>
   8a7c4:	d9000504 	addi	r4,sp,20
   8a7c8:	d80b883a 	mov	r5,sp
   8a7cc:	008b2340 	call	8b234 <__fpcmp_parts_d>
   8a7d0:	dfc00e17 	ldw	ra,56(sp)
   8a7d4:	dec00f04 	addi	sp,sp,60
   8a7d8:	f800283a 	ret

0008a7dc <__nedf2>:
   8a7dc:	defff104 	addi	sp,sp,-60
   8a7e0:	d9000c15 	stw	r4,48(sp)
   8a7e4:	d9400d15 	stw	r5,52(sp)
   8a7e8:	d9000c04 	addi	r4,sp,48
   8a7ec:	d9400504 	addi	r5,sp,20
   8a7f0:	dfc00e15 	stw	ra,56(sp)
   8a7f4:	d9800a15 	stw	r6,40(sp)
   8a7f8:	d9c00b15 	stw	r7,44(sp)
   8a7fc:	008b1300 	call	8b130 <__unpack_d>
   8a800:	d9000a04 	addi	r4,sp,40
   8a804:	d80b883a 	mov	r5,sp
   8a808:	008b1300 	call	8b130 <__unpack_d>
   8a80c:	d8c00517 	ldw	r3,20(sp)
   8a810:	00800044 	movi	r2,1
   8a814:	10c0052e 	bgeu	r2,r3,8a82c <__nedf2+0x50>
   8a818:	d8c00017 	ldw	r3,0(sp)
   8a81c:	10c0032e 	bgeu	r2,r3,8a82c <__nedf2+0x50>
   8a820:	d9000504 	addi	r4,sp,20
   8a824:	d80b883a 	mov	r5,sp
   8a828:	008b2340 	call	8b234 <__fpcmp_parts_d>
   8a82c:	dfc00e17 	ldw	ra,56(sp)
   8a830:	dec00f04 	addi	sp,sp,60
   8a834:	f800283a 	ret

0008a838 <__gtdf2>:
   8a838:	defff104 	addi	sp,sp,-60
   8a83c:	d9000c15 	stw	r4,48(sp)
   8a840:	d9400d15 	stw	r5,52(sp)
   8a844:	d9000c04 	addi	r4,sp,48
   8a848:	d9400504 	addi	r5,sp,20
   8a84c:	dfc00e15 	stw	ra,56(sp)
   8a850:	d9800a15 	stw	r6,40(sp)
   8a854:	d9c00b15 	stw	r7,44(sp)
   8a858:	008b1300 	call	8b130 <__unpack_d>
   8a85c:	d9000a04 	addi	r4,sp,40
   8a860:	d80b883a 	mov	r5,sp
   8a864:	008b1300 	call	8b130 <__unpack_d>
   8a868:	d8c00517 	ldw	r3,20(sp)
   8a86c:	00800044 	movi	r2,1
   8a870:	10c0082e 	bgeu	r2,r3,8a894 <__gtdf2+0x5c>
   8a874:	d8c00017 	ldw	r3,0(sp)
   8a878:	10c0062e 	bgeu	r2,r3,8a894 <__gtdf2+0x5c>
   8a87c:	d9000504 	addi	r4,sp,20
   8a880:	d80b883a 	mov	r5,sp
   8a884:	008b2340 	call	8b234 <__fpcmp_parts_d>
   8a888:	dfc00e17 	ldw	ra,56(sp)
   8a88c:	dec00f04 	addi	sp,sp,60
   8a890:	f800283a 	ret
   8a894:	00bfffc4 	movi	r2,-1
   8a898:	003ffb06 	br	8a888 <__gtdf2+0x50>

0008a89c <__gedf2>:
   8a89c:	defff104 	addi	sp,sp,-60
   8a8a0:	d9000c15 	stw	r4,48(sp)
   8a8a4:	d9400d15 	stw	r5,52(sp)
   8a8a8:	d9000c04 	addi	r4,sp,48
   8a8ac:	d9400504 	addi	r5,sp,20
   8a8b0:	dfc00e15 	stw	ra,56(sp)
   8a8b4:	d9800a15 	stw	r6,40(sp)
   8a8b8:	d9c00b15 	stw	r7,44(sp)
   8a8bc:	008b1300 	call	8b130 <__unpack_d>
   8a8c0:	d9000a04 	addi	r4,sp,40
   8a8c4:	d80b883a 	mov	r5,sp
   8a8c8:	008b1300 	call	8b130 <__unpack_d>
   8a8cc:	d8c00517 	ldw	r3,20(sp)
   8a8d0:	00800044 	movi	r2,1
   8a8d4:	10c0082e 	bgeu	r2,r3,8a8f8 <__gedf2+0x5c>
   8a8d8:	d8c00017 	ldw	r3,0(sp)
   8a8dc:	10c0062e 	bgeu	r2,r3,8a8f8 <__gedf2+0x5c>
   8a8e0:	d9000504 	addi	r4,sp,20
   8a8e4:	d80b883a 	mov	r5,sp
   8a8e8:	008b2340 	call	8b234 <__fpcmp_parts_d>
   8a8ec:	dfc00e17 	ldw	ra,56(sp)
   8a8f0:	dec00f04 	addi	sp,sp,60
   8a8f4:	f800283a 	ret
   8a8f8:	00bfffc4 	movi	r2,-1
   8a8fc:	003ffb06 	br	8a8ec <__gedf2+0x50>

0008a900 <__ltdf2>:
   8a900:	defff104 	addi	sp,sp,-60
   8a904:	d9000c15 	stw	r4,48(sp)
   8a908:	d9400d15 	stw	r5,52(sp)
   8a90c:	d9000c04 	addi	r4,sp,48
   8a910:	d9400504 	addi	r5,sp,20
   8a914:	dfc00e15 	stw	ra,56(sp)
   8a918:	d9800a15 	stw	r6,40(sp)
   8a91c:	d9c00b15 	stw	r7,44(sp)
   8a920:	008b1300 	call	8b130 <__unpack_d>
   8a924:	d9000a04 	addi	r4,sp,40
   8a928:	d80b883a 	mov	r5,sp
   8a92c:	008b1300 	call	8b130 <__unpack_d>
   8a930:	d8c00517 	ldw	r3,20(sp)
   8a934:	00800044 	movi	r2,1
   8a938:	10c0052e 	bgeu	r2,r3,8a950 <__ltdf2+0x50>
   8a93c:	d8c00017 	ldw	r3,0(sp)
   8a940:	10c0032e 	bgeu	r2,r3,8a950 <__ltdf2+0x50>
   8a944:	d9000504 	addi	r4,sp,20
   8a948:	d80b883a 	mov	r5,sp
   8a94c:	008b2340 	call	8b234 <__fpcmp_parts_d>
   8a950:	dfc00e17 	ldw	ra,56(sp)
   8a954:	dec00f04 	addi	sp,sp,60
   8a958:	f800283a 	ret

0008a95c <__floatsidf>:
   8a95c:	2004d7fa 	srli	r2,r4,31
   8a960:	defff904 	addi	sp,sp,-28
   8a964:	00c000c4 	movi	r3,3
   8a968:	dfc00615 	stw	ra,24(sp)
   8a96c:	dc000515 	stw	r16,20(sp)
   8a970:	d8c00015 	stw	r3,0(sp)
   8a974:	d8800115 	stw	r2,4(sp)
   8a978:	2000081e 	bne	r4,zero,8a99c <__floatsidf+0x40>
   8a97c:	00800084 	movi	r2,2
   8a980:	d8800015 	stw	r2,0(sp)
   8a984:	d809883a 	mov	r4,sp
   8a988:	008af0c0 	call	8af0c <__pack_d>
   8a98c:	dfc00617 	ldw	ra,24(sp)
   8a990:	dc000517 	ldw	r16,20(sp)
   8a994:	dec00704 	addi	sp,sp,28
   8a998:	f800283a 	ret
   8a99c:	00c00f04 	movi	r3,60
   8a9a0:	d8c00215 	stw	r3,8(sp)
   8a9a4:	10000f1e 	bne	r2,zero,8a9e4 <__floatsidf+0x88>
   8a9a8:	2021883a 	mov	r16,r4
   8a9ac:	8009883a 	mov	r4,r16
   8a9b0:	008ae600 	call	8ae60 <__clzsi2>
   8a9b4:	11000744 	addi	r4,r2,29
   8a9b8:	0100110e 	bge	zero,r4,8aa00 <__floatsidf+0xa4>
   8a9bc:	10ffff44 	addi	r3,r2,-3
   8a9c0:	18001216 	blt	r3,zero,8aa0c <__floatsidf+0xb0>
   8a9c4:	80c6983a 	sll	r3,r16,r3
   8a9c8:	0009883a 	mov	r4,zero
   8a9cc:	014007c4 	movi	r5,31
   8a9d0:	2885c83a 	sub	r2,r5,r2
   8a9d4:	d9000315 	stw	r4,12(sp)
   8a9d8:	d8c00415 	stw	r3,16(sp)
   8a9dc:	d8800215 	stw	r2,8(sp)
   8a9e0:	003fe806 	br	8a984 <__floatsidf+0x28>
   8a9e4:	00a00034 	movhi	r2,32768
   8a9e8:	20800e26 	beq	r4,r2,8aa24 <__floatsidf+0xc8>
   8a9ec:	0121c83a 	sub	r16,zero,r4
   8a9f0:	8009883a 	mov	r4,r16
   8a9f4:	008ae600 	call	8ae60 <__clzsi2>
   8a9f8:	11000744 	addi	r4,r2,29
   8a9fc:	013fef16 	blt	zero,r4,8a9bc <__floatsidf+0x60>
   8aa00:	dc000315 	stw	r16,12(sp)
   8aa04:	d8000415 	stw	zero,16(sp)
   8aa08:	003fde06 	br	8a984 <__floatsidf+0x28>
   8aa0c:	800ad07a 	srli	r5,r16,1
   8aa10:	00c007c4 	movi	r3,31
   8aa14:	1907c83a 	sub	r3,r3,r4
   8aa18:	28c6d83a 	srl	r3,r5,r3
   8aa1c:	8108983a 	sll	r4,r16,r4
   8aa20:	003fea06 	br	8a9cc <__floatsidf+0x70>
   8aa24:	0005883a 	mov	r2,zero
   8aa28:	00f07834 	movhi	r3,49632
   8aa2c:	003fd706 	br	8a98c <__floatsidf+0x30>

0008aa30 <__fixdfsi>:
   8aa30:	defff804 	addi	sp,sp,-32
   8aa34:	d9000515 	stw	r4,20(sp)
   8aa38:	d9400615 	stw	r5,24(sp)
   8aa3c:	d9000504 	addi	r4,sp,20
   8aa40:	d80b883a 	mov	r5,sp
   8aa44:	dfc00715 	stw	ra,28(sp)
   8aa48:	008b1300 	call	8b130 <__unpack_d>
   8aa4c:	d8800017 	ldw	r2,0(sp)
   8aa50:	00c00084 	movi	r3,2
   8aa54:	10c01c26 	beq	r2,r3,8aac8 <__fixdfsi+0x98>
   8aa58:	00c00044 	movi	r3,1
   8aa5c:	18801a2e 	bgeu	r3,r2,8aac8 <__fixdfsi+0x98>
   8aa60:	00c00104 	movi	r3,4
   8aa64:	10c01126 	beq	r2,r3,8aaac <__fixdfsi+0x7c>
   8aa68:	d8800217 	ldw	r2,8(sp)
   8aa6c:	10001616 	blt	r2,zero,8aac8 <__fixdfsi+0x98>
   8aa70:	00c00784 	movi	r3,30
   8aa74:	18800d16 	blt	r3,r2,8aaac <__fixdfsi+0x7c>
   8aa78:	00c00f04 	movi	r3,60
   8aa7c:	1885c83a 	sub	r2,r3,r2
   8aa80:	10fff804 	addi	r3,r2,-32
   8aa84:	d9400317 	ldw	r5,12(sp)
   8aa88:	d9000417 	ldw	r4,16(sp)
   8aa8c:	18001616 	blt	r3,zero,8aae8 <__fixdfsi+0xb8>
   8aa90:	20c4d83a 	srl	r2,r4,r3
   8aa94:	d8c00117 	ldw	r3,4(sp)
   8aa98:	18000126 	beq	r3,zero,8aaa0 <__fixdfsi+0x70>
   8aa9c:	0085c83a 	sub	r2,zero,r2
   8aaa0:	dfc00717 	ldw	ra,28(sp)
   8aaa4:	dec00804 	addi	sp,sp,32
   8aaa8:	f800283a 	ret
   8aaac:	d8800117 	ldw	r2,4(sp)
   8aab0:	1000091e 	bne	r2,zero,8aad8 <__fixdfsi+0xa8>
   8aab4:	00a00034 	movhi	r2,32768
   8aab8:	10bfffc4 	addi	r2,r2,-1
   8aabc:	dfc00717 	ldw	ra,28(sp)
   8aac0:	dec00804 	addi	sp,sp,32
   8aac4:	f800283a 	ret
   8aac8:	0005883a 	mov	r2,zero
   8aacc:	dfc00717 	ldw	ra,28(sp)
   8aad0:	dec00804 	addi	sp,sp,32
   8aad4:	f800283a 	ret
   8aad8:	00a00034 	movhi	r2,32768
   8aadc:	dfc00717 	ldw	ra,28(sp)
   8aae0:	dec00804 	addi	sp,sp,32
   8aae4:	f800283a 	ret
   8aae8:	2008907a 	slli	r4,r4,1
   8aaec:	018007c4 	movi	r6,31
   8aaf0:	308dc83a 	sub	r6,r6,r2
   8aaf4:	2188983a 	sll	r4,r4,r6
   8aaf8:	2884d83a 	srl	r2,r5,r2
   8aafc:	2084b03a 	or	r2,r4,r2
   8ab00:	003fe406 	br	8aa94 <__fixdfsi+0x64>

0008ab04 <__floatunsidf>:
   8ab04:	defff904 	addi	sp,sp,-28
   8ab08:	dc000515 	stw	r16,20(sp)
   8ab0c:	dfc00615 	stw	ra,24(sp)
   8ab10:	d8000115 	stw	zero,4(sp)
   8ab14:	2021883a 	mov	r16,r4
   8ab18:	20001726 	beq	r4,zero,8ab78 <__floatunsidf+0x74>
   8ab1c:	008000c4 	movi	r2,3
   8ab20:	d8800015 	stw	r2,0(sp)
   8ab24:	00800f04 	movi	r2,60
   8ab28:	d8800215 	stw	r2,8(sp)
   8ab2c:	008ae600 	call	8ae60 <__clzsi2>
   8ab30:	10c00744 	addi	r3,r2,29
   8ab34:	18001816 	blt	r3,zero,8ab98 <__floatunsidf+0x94>
   8ab38:	18002d26 	beq	r3,zero,8abf0 <__floatunsidf+0xec>
   8ab3c:	113fff44 	addi	r4,r2,-3
   8ab40:	20002e16 	blt	r4,zero,8abfc <__floatunsidf+0xf8>
   8ab44:	8108983a 	sll	r4,r16,r4
   8ab48:	0021883a 	mov	r16,zero
   8ab4c:	014007c4 	movi	r5,31
   8ab50:	2885c83a 	sub	r2,r5,r2
   8ab54:	dc000315 	stw	r16,12(sp)
   8ab58:	d9000415 	stw	r4,16(sp)
   8ab5c:	d8800215 	stw	r2,8(sp)
   8ab60:	d809883a 	mov	r4,sp
   8ab64:	008af0c0 	call	8af0c <__pack_d>
   8ab68:	dfc00617 	ldw	ra,24(sp)
   8ab6c:	dc000517 	ldw	r16,20(sp)
   8ab70:	dec00704 	addi	sp,sp,28
   8ab74:	f800283a 	ret
   8ab78:	00800084 	movi	r2,2
   8ab7c:	d809883a 	mov	r4,sp
   8ab80:	d8800015 	stw	r2,0(sp)
   8ab84:	008af0c0 	call	8af0c <__pack_d>
   8ab88:	dfc00617 	ldw	ra,24(sp)
   8ab8c:	dc000517 	ldw	r16,20(sp)
   8ab90:	dec00704 	addi	sp,sp,28
   8ab94:	f800283a 	ret
   8ab98:	00c7c83a 	sub	r3,zero,r3
   8ab9c:	193ff804 	addi	r4,r3,-32
   8aba0:	20001c16 	blt	r4,zero,8ac14 <__floatunsidf+0x110>
   8aba4:	000b883a 	mov	r5,zero
   8aba8:	2009d7fa 	srai	r4,r4,31
   8abac:	80c6d83a 	srl	r3,r16,r3
   8abb0:	297fffc4 	addi	r5,r5,-1
   8abb4:	2c20703a 	and	r16,r5,r16
   8abb8:	8020c03a 	cmpne	r16,r16,zero
   8abbc:	1906703a 	and	r3,r3,r4
   8abc0:	010007c4 	movi	r4,31
   8abc4:	80c6b03a 	or	r3,r16,r3
   8abc8:	2085c83a 	sub	r2,r4,r2
   8abcc:	d809883a 	mov	r4,sp
   8abd0:	d8c00315 	stw	r3,12(sp)
   8abd4:	d8000415 	stw	zero,16(sp)
   8abd8:	d8800215 	stw	r2,8(sp)
   8abdc:	008af0c0 	call	8af0c <__pack_d>
   8abe0:	dfc00617 	ldw	ra,24(sp)
   8abe4:	dc000517 	ldw	r16,20(sp)
   8abe8:	dec00704 	addi	sp,sp,28
   8abec:	f800283a 	ret
   8abf0:	dc000315 	stw	r16,12(sp)
   8abf4:	d8000415 	stw	zero,16(sp)
   8abf8:	003fd906 	br	8ab60 <__floatunsidf+0x5c>
   8abfc:	800ad07a 	srli	r5,r16,1
   8ac00:	010007c4 	movi	r4,31
   8ac04:	20c9c83a 	sub	r4,r4,r3
   8ac08:	2908d83a 	srl	r4,r5,r4
   8ac0c:	80e0983a 	sll	r16,r16,r3
   8ac10:	003fce06 	br	8ab4c <__floatunsidf+0x48>
   8ac14:	01400044 	movi	r5,1
   8ac18:	28ca983a 	sll	r5,r5,r3
   8ac1c:	003fe206 	br	8aba8 <__floatunsidf+0xa4>

0008ac20 <udivmodsi4>:
   8ac20:	2005883a 	mov	r2,r4
   8ac24:	2900182e 	bgeu	r5,r4,8ac88 <udivmodsi4+0x68>
   8ac28:	28001716 	blt	r5,zero,8ac88 <udivmodsi4+0x68>
   8ac2c:	01000804 	movi	r4,32
   8ac30:	00c00044 	movi	r3,1
   8ac34:	00000206 	br	8ac40 <udivmodsi4+0x20>
   8ac38:	20001126 	beq	r4,zero,8ac80 <udivmodsi4+0x60>
   8ac3c:	28000516 	blt	r5,zero,8ac54 <udivmodsi4+0x34>
   8ac40:	294b883a 	add	r5,r5,r5
   8ac44:	213fffc4 	addi	r4,r4,-1
   8ac48:	18c7883a 	add	r3,r3,r3
   8ac4c:	28bffa36 	bltu	r5,r2,8ac38 <udivmodsi4+0x18>
   8ac50:	18000b26 	beq	r3,zero,8ac80 <udivmodsi4+0x60>
   8ac54:	0009883a 	mov	r4,zero
   8ac58:	11400236 	bltu	r2,r5,8ac64 <udivmodsi4+0x44>
   8ac5c:	1145c83a 	sub	r2,r2,r5
   8ac60:	20c8b03a 	or	r4,r4,r3
   8ac64:	1806d07a 	srli	r3,r3,1
   8ac68:	280ad07a 	srli	r5,r5,1
   8ac6c:	183ffa1e 	bne	r3,zero,8ac58 <udivmodsi4+0x38>
   8ac70:	3000021e 	bne	r6,zero,8ac7c <udivmodsi4+0x5c>
   8ac74:	2005883a 	mov	r2,r4
   8ac78:	f800283a 	ret
   8ac7c:	f800283a 	ret
   8ac80:	0009883a 	mov	r4,zero
   8ac84:	003ffa06 	br	8ac70 <udivmodsi4+0x50>
   8ac88:	00c00044 	movi	r3,1
   8ac8c:	0009883a 	mov	r4,zero
   8ac90:	003ff106 	br	8ac58 <udivmodsi4+0x38>

0008ac94 <__divsi3>:
   8ac94:	defffe04 	addi	sp,sp,-8
   8ac98:	dfc00115 	stw	ra,4(sp)
   8ac9c:	dc000015 	stw	r16,0(sp)
   8aca0:	20000a16 	blt	r4,zero,8accc <__divsi3+0x38>
   8aca4:	0021883a 	mov	r16,zero
   8aca8:	28000b16 	blt	r5,zero,8acd8 <__divsi3+0x44>
   8acac:	000d883a 	mov	r6,zero
   8acb0:	008ac200 	call	8ac20 <udivmodsi4>
   8acb4:	80000126 	beq	r16,zero,8acbc <__divsi3+0x28>
   8acb8:	0085c83a 	sub	r2,zero,r2
   8acbc:	dfc00117 	ldw	ra,4(sp)
   8acc0:	dc000017 	ldw	r16,0(sp)
   8acc4:	dec00204 	addi	sp,sp,8
   8acc8:	f800283a 	ret
   8accc:	0109c83a 	sub	r4,zero,r4
   8acd0:	04000044 	movi	r16,1
   8acd4:	283ff50e 	bge	r5,zero,8acac <__divsi3+0x18>
   8acd8:	014bc83a 	sub	r5,zero,r5
   8acdc:	8400005c 	xori	r16,r16,1
   8ace0:	003ff206 	br	8acac <__divsi3+0x18>

0008ace4 <__modsi3>:
   8ace4:	deffff04 	addi	sp,sp,-4
   8ace8:	dfc00015 	stw	ra,0(sp)
   8acec:	20000516 	blt	r4,zero,8ad04 <__modsi3+0x20>
   8acf0:	28000c16 	blt	r5,zero,8ad24 <__modsi3+0x40>
   8acf4:	01800044 	movi	r6,1
   8acf8:	dfc00017 	ldw	ra,0(sp)
   8acfc:	dec00104 	addi	sp,sp,4
   8ad00:	008ac201 	jmpi	8ac20 <udivmodsi4>
   8ad04:	0109c83a 	sub	r4,zero,r4
   8ad08:	28000b16 	blt	r5,zero,8ad38 <__modsi3+0x54>
   8ad0c:	01800044 	movi	r6,1
   8ad10:	008ac200 	call	8ac20 <udivmodsi4>
   8ad14:	0085c83a 	sub	r2,zero,r2
   8ad18:	dfc00017 	ldw	ra,0(sp)
   8ad1c:	dec00104 	addi	sp,sp,4
   8ad20:	f800283a 	ret
   8ad24:	014bc83a 	sub	r5,zero,r5
   8ad28:	01800044 	movi	r6,1
   8ad2c:	dfc00017 	ldw	ra,0(sp)
   8ad30:	dec00104 	addi	sp,sp,4
   8ad34:	008ac201 	jmpi	8ac20 <udivmodsi4>
   8ad38:	014bc83a 	sub	r5,zero,r5
   8ad3c:	003ff306 	br	8ad0c <__modsi3+0x28>

0008ad40 <__udivsi3>:
   8ad40:	000d883a 	mov	r6,zero
   8ad44:	008ac201 	jmpi	8ac20 <udivmodsi4>

0008ad48 <__umodsi3>:
   8ad48:	01800044 	movi	r6,1
   8ad4c:	008ac201 	jmpi	8ac20 <udivmodsi4>

0008ad50 <__muldi3>:
   8ad50:	defff604 	addi	sp,sp,-40
   8ad54:	dd400515 	stw	r21,20(sp)
   8ad58:	dd000415 	stw	r20,16(sp)
   8ad5c:	257fffcc 	andi	r21,r4,65535
   8ad60:	353fffcc 	andi	r20,r6,65535
   8ad64:	dcc00315 	stw	r19,12(sp)
   8ad68:	3026d43a 	srli	r19,r6,16
   8ad6c:	dd800615 	stw	r22,24(sp)
   8ad70:	dc800215 	stw	r18,8(sp)
   8ad74:	dc400115 	stw	r17,4(sp)
   8ad78:	2024d43a 	srli	r18,r4,16
   8ad7c:	2023883a 	mov	r17,r4
   8ad80:	282d883a 	mov	r22,r5
   8ad84:	a009883a 	mov	r4,r20
   8ad88:	a80b883a 	mov	r5,r21
   8ad8c:	dfc00915 	stw	ra,36(sp)
   8ad90:	df000815 	stw	fp,32(sp)
   8ad94:	ddc00715 	stw	r23,28(sp)
   8ad98:	3839883a 	mov	fp,r7
   8ad9c:	dc000015 	stw	r16,0(sp)
   8ada0:	3021883a 	mov	r16,r6
   8ada4:	0081c900 	call	81c90 <__mulsi3>
   8ada8:	a80b883a 	mov	r5,r21
   8adac:	9809883a 	mov	r4,r19
   8adb0:	102f883a 	mov	r23,r2
   8adb4:	0081c900 	call	81c90 <__mulsi3>
   8adb8:	a009883a 	mov	r4,r20
   8adbc:	900b883a 	mov	r5,r18
   8adc0:	102b883a 	mov	r21,r2
   8adc4:	0081c900 	call	81c90 <__mulsi3>
   8adc8:	9809883a 	mov	r4,r19
   8adcc:	900b883a 	mov	r5,r18
   8add0:	1029883a 	mov	r20,r2
   8add4:	0081c900 	call	81c90 <__mulsi3>
   8add8:	1007883a 	mov	r3,r2
   8addc:	b804d43a 	srli	r2,r23,16
   8ade0:	a549883a 	add	r4,r20,r21
   8ade4:	2089883a 	add	r4,r4,r2
   8ade8:	2500022e 	bgeu	r4,r20,8adf4 <__muldi3+0xa4>
   8adec:	00800074 	movhi	r2,1
   8adf0:	1887883a 	add	r3,r3,r2
   8adf4:	200cd43a 	srli	r6,r4,16
   8adf8:	2004943a 	slli	r2,r4,16
   8adfc:	e00b883a 	mov	r5,fp
   8ae00:	8809883a 	mov	r4,r17
   8ae04:	bdffffcc 	andi	r23,r23,65535
   8ae08:	19a3883a 	add	r17,r3,r6
   8ae0c:	15ef883a 	add	r23,r2,r23
   8ae10:	0081c900 	call	81c90 <__mulsi3>
   8ae14:	8009883a 	mov	r4,r16
   8ae18:	b00b883a 	mov	r5,r22
   8ae1c:	1025883a 	mov	r18,r2
   8ae20:	0081c900 	call	81c90 <__mulsi3>
   8ae24:	9085883a 	add	r2,r18,r2
   8ae28:	1447883a 	add	r3,r2,r17
   8ae2c:	b805883a 	mov	r2,r23
   8ae30:	dfc00917 	ldw	ra,36(sp)
   8ae34:	df000817 	ldw	fp,32(sp)
   8ae38:	ddc00717 	ldw	r23,28(sp)
   8ae3c:	dd800617 	ldw	r22,24(sp)
   8ae40:	dd400517 	ldw	r21,20(sp)
   8ae44:	dd000417 	ldw	r20,16(sp)
   8ae48:	dcc00317 	ldw	r19,12(sp)
   8ae4c:	dc800217 	ldw	r18,8(sp)
   8ae50:	dc400117 	ldw	r17,4(sp)
   8ae54:	dc000017 	ldw	r16,0(sp)
   8ae58:	dec00a04 	addi	sp,sp,40
   8ae5c:	f800283a 	ret

0008ae60 <__clzsi2>:
   8ae60:	00bfffd4 	movui	r2,65535
   8ae64:	11000b36 	bltu	r2,r4,8ae94 <__clzsi2+0x34>
   8ae68:	00803fc4 	movi	r2,255
   8ae6c:	11001e2e 	bgeu	r2,r4,8aee8 <__clzsi2+0x88>
   8ae70:	00c00204 	movi	r3,8
   8ae74:	20c8d83a 	srl	r4,r4,r3
   8ae78:	00c00274 	movhi	r3,9
   8ae7c:	18f96604 	addi	r3,r3,-6760
   8ae80:	00800604 	movi	r2,24
   8ae84:	1909883a 	add	r4,r3,r4
   8ae88:	20c00003 	ldbu	r3,0(r4)
   8ae8c:	10c5c83a 	sub	r2,r2,r3
   8ae90:	f800283a 	ret
   8ae94:	00804034 	movhi	r2,256
   8ae98:	10bfffc4 	addi	r2,r2,-1
   8ae9c:	11000936 	bltu	r2,r4,8aec4 <__clzsi2+0x64>
   8aea0:	00800404 	movi	r2,16
   8aea4:	1007883a 	mov	r3,r2
   8aea8:	20c8d83a 	srl	r4,r4,r3
   8aeac:	00c00274 	movhi	r3,9
   8aeb0:	18f96604 	addi	r3,r3,-6760
   8aeb4:	1909883a 	add	r4,r3,r4
   8aeb8:	20c00003 	ldbu	r3,0(r4)
   8aebc:	10c5c83a 	sub	r2,r2,r3
   8aec0:	f800283a 	ret
   8aec4:	00c00604 	movi	r3,24
   8aec8:	20c8d83a 	srl	r4,r4,r3
   8aecc:	00c00274 	movhi	r3,9
   8aed0:	18f96604 	addi	r3,r3,-6760
   8aed4:	00800204 	movi	r2,8
   8aed8:	1909883a 	add	r4,r3,r4
   8aedc:	20c00003 	ldbu	r3,0(r4)
   8aee0:	10c5c83a 	sub	r2,r2,r3
   8aee4:	f800283a 	ret
   8aee8:	0007883a 	mov	r3,zero
   8aeec:	20c8d83a 	srl	r4,r4,r3
   8aef0:	00c00274 	movhi	r3,9
   8aef4:	18f96604 	addi	r3,r3,-6760
   8aef8:	00800804 	movi	r2,32
   8aefc:	1909883a 	add	r4,r3,r4
   8af00:	20c00003 	ldbu	r3,0(r4)
   8af04:	10c5c83a 	sub	r2,r2,r3
   8af08:	f800283a 	ret

0008af0c <__pack_d>:
   8af0c:	20800017 	ldw	r2,0(r4)
   8af10:	defff804 	addi	sp,sp,-32
   8af14:	dcc00315 	stw	r19,12(sp)
   8af18:	dc800215 	stw	r18,8(sp)
   8af1c:	dfc00715 	stw	ra,28(sp)
   8af20:	dd800615 	stw	r22,24(sp)
   8af24:	dd400515 	stw	r21,20(sp)
   8af28:	dd000415 	stw	r20,16(sp)
   8af2c:	dc400115 	stw	r17,4(sp)
   8af30:	dc000015 	stw	r16,0(sp)
   8af34:	04800044 	movi	r18,1
   8af38:	24400317 	ldw	r17,12(r4)
   8af3c:	24000417 	ldw	r16,16(r4)
   8af40:	24c00117 	ldw	r19,4(r4)
   8af44:	9080422e 	bgeu	r18,r2,8b050 <__pack_d+0x144>
   8af48:	00c00104 	movi	r3,4
   8af4c:	10c03c26 	beq	r2,r3,8b040 <__pack_d+0x134>
   8af50:	00c00084 	movi	r3,2
   8af54:	10c01926 	beq	r2,r3,8afbc <__pack_d+0xb0>
   8af58:	8c04b03a 	or	r2,r17,r16
   8af5c:	10001726 	beq	r2,zero,8afbc <__pack_d+0xb0>
   8af60:	21000217 	ldw	r4,8(r4)
   8af64:	00bf0084 	movi	r2,-1022
   8af68:	20804016 	blt	r4,r2,8b06c <__pack_d+0x160>
   8af6c:	0080ffc4 	movi	r2,1023
   8af70:	11003316 	blt	r2,r4,8b040 <__pack_d+0x134>
   8af74:	88803fcc 	andi	r2,r17,255
   8af78:	00c02004 	movi	r3,128
   8af7c:	10c02926 	beq	r2,r3,8b024 <__pack_d+0x118>
   8af80:	88801fc4 	addi	r2,r17,127
   8af84:	1463803a 	cmpltu	r17,r2,r17
   8af88:	8c21883a 	add	r16,r17,r16
   8af8c:	1023883a 	mov	r17,r2
   8af90:	00880034 	movhi	r2,8192
   8af94:	10bfffc4 	addi	r2,r2,-1
   8af98:	14001c36 	bltu	r2,r16,8b00c <__pack_d+0x100>
   8af9c:	2100ffc4 	addi	r4,r4,1023
   8afa0:	8006963a 	slli	r3,r16,24
   8afa4:	8804d23a 	srli	r2,r17,8
   8afa8:	8020913a 	slli	r16,r16,4
   8afac:	2101ffcc 	andi	r4,r4,2047
   8afb0:	1884b03a 	or	r2,r3,r2
   8afb4:	8020d33a 	srli	r16,r16,12
   8afb8:	00000306 	br	8afc8 <__pack_d+0xbc>
   8afbc:	0009883a 	mov	r4,zero
   8afc0:	0005883a 	mov	r2,zero
   8afc4:	0021883a 	mov	r16,zero
   8afc8:	2008953a 	slli	r4,r4,20
   8afcc:	982697fa 	slli	r19,r19,31
   8afd0:	00c00434 	movhi	r3,16
   8afd4:	18ffffc4 	addi	r3,r3,-1
   8afd8:	80e0703a 	and	r16,r16,r3
   8afdc:	8106b03a 	or	r3,r16,r4
   8afe0:	1cc6b03a 	or	r3,r3,r19
   8afe4:	dfc00717 	ldw	ra,28(sp)
   8afe8:	dd800617 	ldw	r22,24(sp)
   8afec:	dd400517 	ldw	r21,20(sp)
   8aff0:	dd000417 	ldw	r20,16(sp)
   8aff4:	dcc00317 	ldw	r19,12(sp)
   8aff8:	dc800217 	ldw	r18,8(sp)
   8affc:	dc400117 	ldw	r17,4(sp)
   8b000:	dc000017 	ldw	r16,0(sp)
   8b004:	dec00804 	addi	sp,sp,32
   8b008:	f800283a 	ret
   8b00c:	800697fa 	slli	r3,r16,31
   8b010:	8804d07a 	srli	r2,r17,1
   8b014:	21010004 	addi	r4,r4,1024
   8b018:	8020d07a 	srli	r16,r16,1
   8b01c:	18a2b03a 	or	r17,r3,r2
   8b020:	003fdf06 	br	8afa0 <__pack_d+0x94>
   8b024:	88c0400c 	andi	r3,r17,256
   8b028:	183fd926 	beq	r3,zero,8af90 <__pack_d+0x84>
   8b02c:	8885883a 	add	r2,r17,r2
   8b030:	1463803a 	cmpltu	r17,r2,r17
   8b034:	8c21883a 	add	r16,r17,r16
   8b038:	1023883a 	mov	r17,r2
   8b03c:	003fd406 	br	8af90 <__pack_d+0x84>
   8b040:	0101ffc4 	movi	r4,2047
   8b044:	0005883a 	mov	r2,zero
   8b048:	0021883a 	mov	r16,zero
   8b04c:	003fde06 	br	8afc8 <__pack_d+0xbc>
   8b050:	84000234 	orhi	r16,r16,8
   8b054:	00c00434 	movhi	r3,16
   8b058:	18ffffc4 	addi	r3,r3,-1
   8b05c:	8805883a 	mov	r2,r17
   8b060:	80e0703a 	and	r16,r16,r3
   8b064:	0101ffc4 	movi	r4,2047
   8b068:	003fd706 	br	8afc8 <__pack_d+0xbc>
   8b06c:	1129c83a 	sub	r20,r2,r4
   8b070:	00800e04 	movi	r2,56
   8b074:	15002716 	blt	r2,r20,8b114 <__pack_d+0x208>
   8b078:	800b883a 	mov	r5,r16
   8b07c:	a00d883a 	mov	r6,r20
   8b080:	8809883a 	mov	r4,r17
   8b084:	008b3040 	call	8b304 <__lshrdi3>
   8b088:	9009883a 	mov	r4,r18
   8b08c:	000b883a 	mov	r5,zero
   8b090:	a00d883a 	mov	r6,r20
   8b094:	102d883a 	mov	r22,r2
   8b098:	182b883a 	mov	r21,r3
   8b09c:	008b3480 	call	8b348 <__ashldi3>
   8b0a0:	1009003a 	cmpeq	r4,r2,zero
   8b0a4:	1907c83a 	sub	r3,r3,r4
   8b0a8:	10bfffc4 	addi	r2,r2,-1
   8b0ac:	1c20703a 	and	r16,r3,r16
   8b0b0:	1444703a 	and	r2,r2,r17
   8b0b4:	1404b03a 	or	r2,r2,r16
   8b0b8:	1004c03a 	cmpne	r2,r2,zero
   8b0bc:	1584b03a 	or	r2,r2,r22
   8b0c0:	11003fcc 	andi	r4,r2,255
   8b0c4:	01402004 	movi	r5,128
   8b0c8:	a807883a 	mov	r3,r21
   8b0cc:	2140131e 	bne	r4,r5,8b11c <__pack_d+0x210>
   8b0d0:	1140400c 	andi	r5,r2,256
   8b0d4:	28000426 	beq	r5,zero,8b0e8 <__pack_d+0x1dc>
   8b0d8:	1109883a 	add	r4,r2,r4
   8b0dc:	2085803a 	cmpltu	r2,r4,r2
   8b0e0:	1547883a 	add	r3,r2,r21
   8b0e4:	2005883a 	mov	r2,r4
   8b0e8:	1808963a 	slli	r4,r3,24
   8b0ec:	1004d23a 	srli	r2,r2,8
   8b0f0:	1820913a 	slli	r16,r3,4
   8b0f4:	01440034 	movhi	r5,4096
   8b0f8:	297fffc4 	addi	r5,r5,-1
   8b0fc:	2084b03a 	or	r2,r4,r2
   8b100:	8020d33a 	srli	r16,r16,12
   8b104:	01000044 	movi	r4,1
   8b108:	28ffaf36 	bltu	r5,r3,8afc8 <__pack_d+0xbc>
   8b10c:	0009883a 	mov	r4,zero
   8b110:	003fad06 	br	8afc8 <__pack_d+0xbc>
   8b114:	0005883a 	mov	r2,zero
   8b118:	0007883a 	mov	r3,zero
   8b11c:	11001fc4 	addi	r4,r2,127
   8b120:	2085803a 	cmpltu	r2,r4,r2
   8b124:	10c7883a 	add	r3,r2,r3
   8b128:	2005883a 	mov	r2,r4
   8b12c:	003fee06 	br	8b0e8 <__pack_d+0x1dc>

0008b130 <__unpack_d>:
   8b130:	21800117 	ldw	r6,4(r4)
   8b134:	20c00017 	ldw	r3,0(r4)
   8b138:	3004d7fa 	srli	r2,r6,31
   8b13c:	3008d53a 	srli	r4,r6,20
   8b140:	28800115 	stw	r2,4(r5)
   8b144:	2101ffcc 	andi	r4,r4,2047
   8b148:	00800434 	movhi	r2,16
   8b14c:	10bfffc4 	addi	r2,r2,-1
   8b150:	3084703a 	and	r2,r6,r2
   8b154:	20001a1e 	bne	r4,zero,8b1c0 <__unpack_d+0x90>
   8b158:	1888b03a 	or	r4,r3,r2
   8b15c:	20002626 	beq	r4,zero,8b1f8 <__unpack_d+0xc8>
   8b160:	1808d63a 	srli	r4,r3,24
   8b164:	1004923a 	slli	r2,r2,8
   8b168:	01bf0084 	movi	r6,-1022
   8b16c:	29800215 	stw	r6,8(r5)
   8b170:	2084b03a 	or	r2,r4,r2
   8b174:	010000c4 	movi	r4,3
   8b178:	29000015 	stw	r4,0(r5)
   8b17c:	02040034 	movhi	r8,4096
   8b180:	423fffc4 	addi	r8,r8,-1
   8b184:	1806923a 	slli	r3,r3,8
   8b188:	40801836 	bltu	r8,r2,8b1ec <__unpack_d+0xbc>
   8b18c:	013f0044 	movi	r4,-1023
   8b190:	18cd883a 	add	r6,r3,r3
   8b194:	30c7803a 	cmpltu	r3,r6,r3
   8b198:	1085883a 	add	r2,r2,r2
   8b19c:	1885883a 	add	r2,r3,r2
   8b1a0:	200f883a 	mov	r7,r4
   8b1a4:	3007883a 	mov	r3,r6
   8b1a8:	213fffc4 	addi	r4,r4,-1
   8b1ac:	40bff82e 	bgeu	r8,r2,8b190 <__unpack_d+0x60>
   8b1b0:	29c00215 	stw	r7,8(r5)
   8b1b4:	28c00315 	stw	r3,12(r5)
   8b1b8:	28800415 	stw	r2,16(r5)
   8b1bc:	f800283a 	ret
   8b1c0:	01c1ffc4 	movi	r7,2047
   8b1c4:	21c00f26 	beq	r4,r7,8b204 <__unpack_d+0xd4>
   8b1c8:	180cd63a 	srli	r6,r3,24
   8b1cc:	1004923a 	slli	r2,r2,8
   8b1d0:	213f0044 	addi	r4,r4,-1023
   8b1d4:	1806923a 	slli	r3,r3,8
   8b1d8:	3084b03a 	or	r2,r6,r2
   8b1dc:	29000215 	stw	r4,8(r5)
   8b1e0:	010000c4 	movi	r4,3
   8b1e4:	10840034 	orhi	r2,r2,4096
   8b1e8:	29000015 	stw	r4,0(r5)
   8b1ec:	28c00315 	stw	r3,12(r5)
   8b1f0:	28800415 	stw	r2,16(r5)
   8b1f4:	f800283a 	ret
   8b1f8:	00800084 	movi	r2,2
   8b1fc:	28800015 	stw	r2,0(r5)
   8b200:	f800283a 	ret
   8b204:	1888b03a 	or	r4,r3,r2
   8b208:	20000526 	beq	r4,zero,8b220 <__unpack_d+0xf0>
   8b20c:	3180022c 	andhi	r6,r6,8
   8b210:	30000626 	beq	r6,zero,8b22c <__unpack_d+0xfc>
   8b214:	01000044 	movi	r4,1
   8b218:	29000015 	stw	r4,0(r5)
   8b21c:	003ff306 	br	8b1ec <__unpack_d+0xbc>
   8b220:	00800104 	movi	r2,4
   8b224:	28800015 	stw	r2,0(r5)
   8b228:	f800283a 	ret
   8b22c:	28000015 	stw	zero,0(r5)
   8b230:	003fee06 	br	8b1ec <__unpack_d+0xbc>

0008b234 <__fpcmp_parts_d>:
   8b234:	20c00017 	ldw	r3,0(r4)
   8b238:	00800044 	movi	r2,1
   8b23c:	10c0142e 	bgeu	r2,r3,8b290 <__fpcmp_parts_d+0x5c>
   8b240:	29800017 	ldw	r6,0(r5)
   8b244:	1180122e 	bgeu	r2,r6,8b290 <__fpcmp_parts_d+0x5c>
   8b248:	01c00104 	movi	r7,4
   8b24c:	19c02826 	beq	r3,r7,8b2f0 <__fpcmp_parts_d+0xbc>
   8b250:	31c00926 	beq	r6,r7,8b278 <__fpcmp_parts_d+0x44>
   8b254:	01c00084 	movi	r7,2
   8b258:	19c00626 	beq	r3,r7,8b274 <__fpcmp_parts_d+0x40>
   8b25c:	31c00a26 	beq	r6,r7,8b288 <__fpcmp_parts_d+0x54>
   8b260:	20c00117 	ldw	r3,4(r4)
   8b264:	29800117 	ldw	r6,4(r5)
   8b268:	19800b26 	beq	r3,r6,8b298 <__fpcmp_parts_d+0x64>
   8b26c:	1800041e 	bne	r3,zero,8b280 <__fpcmp_parts_d+0x4c>
   8b270:	f800283a 	ret
   8b274:	30c01a26 	beq	r6,r3,8b2e0 <__fpcmp_parts_d+0xac>
   8b278:	28800117 	ldw	r2,4(r5)
   8b27c:	1000041e 	bne	r2,zero,8b290 <__fpcmp_parts_d+0x5c>
   8b280:	00bfffc4 	movi	r2,-1
   8b284:	f800283a 	ret
   8b288:	20800117 	ldw	r2,4(r4)
   8b28c:	103ffc1e 	bne	r2,zero,8b280 <__fpcmp_parts_d+0x4c>
   8b290:	00800044 	movi	r2,1
   8b294:	f800283a 	ret
   8b298:	21c00217 	ldw	r7,8(r4)
   8b29c:	29800217 	ldw	r6,8(r5)
   8b2a0:	31c0020e 	bge	r6,r7,8b2ac <__fpcmp_parts_d+0x78>
   8b2a4:	183ff61e 	bne	r3,zero,8b280 <__fpcmp_parts_d+0x4c>
   8b2a8:	f800283a 	ret
   8b2ac:	39800a16 	blt	r7,r6,8b2d8 <__fpcmp_parts_d+0xa4>
   8b2b0:	20800417 	ldw	r2,16(r4)
   8b2b4:	29800417 	ldw	r6,16(r5)
   8b2b8:	21c00317 	ldw	r7,12(r4)
   8b2bc:	29000317 	ldw	r4,12(r5)
   8b2c0:	30800936 	bltu	r6,r2,8b2e8 <__fpcmp_parts_d+0xb4>
   8b2c4:	1180011e 	bne	r2,r6,8b2cc <__fpcmp_parts_d+0x98>
   8b2c8:	21c00736 	bltu	r4,r7,8b2e8 <__fpcmp_parts_d+0xb4>
   8b2cc:	11800236 	bltu	r2,r6,8b2d8 <__fpcmp_parts_d+0xa4>
   8b2d0:	3080031e 	bne	r6,r2,8b2e0 <__fpcmp_parts_d+0xac>
   8b2d4:	3900022e 	bgeu	r7,r4,8b2e0 <__fpcmp_parts_d+0xac>
   8b2d8:	183fe926 	beq	r3,zero,8b280 <__fpcmp_parts_d+0x4c>
   8b2dc:	003fec06 	br	8b290 <__fpcmp_parts_d+0x5c>
   8b2e0:	0005883a 	mov	r2,zero
   8b2e4:	f800283a 	ret
   8b2e8:	183fe926 	beq	r3,zero,8b290 <__fpcmp_parts_d+0x5c>
   8b2ec:	003fe406 	br	8b280 <__fpcmp_parts_d+0x4c>
   8b2f0:	30ffe51e 	bne	r6,r3,8b288 <__fpcmp_parts_d+0x54>
   8b2f4:	28c00117 	ldw	r3,4(r5)
   8b2f8:	20800117 	ldw	r2,4(r4)
   8b2fc:	1885c83a 	sub	r2,r3,r2
   8b300:	f800283a 	ret

0008b304 <__lshrdi3>:
   8b304:	2005883a 	mov	r2,r4
   8b308:	2807883a 	mov	r3,r5
   8b30c:	30000826 	beq	r6,zero,8b330 <__lshrdi3+0x2c>
   8b310:	01000804 	movi	r4,32
   8b314:	2189c83a 	sub	r4,r4,r6
   8b318:	0100060e 	bge	zero,r4,8b334 <__lshrdi3+0x30>
   8b31c:	1184d83a 	srl	r2,r2,r6
   8b320:	2908983a 	sll	r4,r5,r4
   8b324:	298cd83a 	srl	r6,r5,r6
   8b328:	2084b03a 	or	r2,r4,r2
   8b32c:	3007883a 	mov	r3,r6
   8b330:	f800283a 	ret
   8b334:	0105c83a 	sub	r2,zero,r4
   8b338:	000d883a 	mov	r6,zero
   8b33c:	2884d83a 	srl	r2,r5,r2
   8b340:	3007883a 	mov	r3,r6
   8b344:	003ffa06 	br	8b330 <__lshrdi3+0x2c>

0008b348 <__ashldi3>:
   8b348:	2005883a 	mov	r2,r4
   8b34c:	2807883a 	mov	r3,r5
   8b350:	30000826 	beq	r6,zero,8b374 <__ashldi3+0x2c>
   8b354:	01000804 	movi	r4,32
   8b358:	2189c83a 	sub	r4,r4,r6
   8b35c:	0100060e 	bge	zero,r4,8b378 <__ashldi3+0x30>
   8b360:	1108d83a 	srl	r4,r2,r4
   8b364:	2986983a 	sll	r3,r5,r6
   8b368:	118c983a 	sll	r6,r2,r6
   8b36c:	20c6b03a 	or	r3,r4,r3
   8b370:	3005883a 	mov	r2,r6
   8b374:	f800283a 	ret
   8b378:	0107c83a 	sub	r3,zero,r4
   8b37c:	000d883a 	mov	r6,zero
   8b380:	10c6983a 	sll	r3,r2,r3
   8b384:	3005883a 	mov	r2,r6
   8b388:	003ffa06 	br	8b374 <__ashldi3+0x2c>

0008b38c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b38c:	defffe04 	addi	sp,sp,-8
   8b390:	dfc00115 	stw	ra,4(sp)
   8b394:	df000015 	stw	fp,0(sp)
   8b398:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8b39c:	00800274 	movhi	r2,9
   8b3a0:	10824504 	addi	r2,r2,2324
   8b3a4:	10800017 	ldw	r2,0(r2)
   8b3a8:	10000526 	beq	r2,zero,8b3c0 <alt_get_errno+0x34>
   8b3ac:	00800274 	movhi	r2,9
   8b3b0:	10824504 	addi	r2,r2,2324
   8b3b4:	10800017 	ldw	r2,0(r2)
   8b3b8:	103ee83a 	callr	r2
   8b3bc:	00000206 	br	8b3c8 <alt_get_errno+0x3c>
   8b3c0:	00800274 	movhi	r2,9
   8b3c4:	108af004 	addi	r2,r2,11200
}
   8b3c8:	e037883a 	mov	sp,fp
   8b3cc:	dfc00117 	ldw	ra,4(sp)
   8b3d0:	df000017 	ldw	fp,0(sp)
   8b3d4:	dec00204 	addi	sp,sp,8
   8b3d8:	f800283a 	ret

0008b3dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8b3dc:	defffb04 	addi	sp,sp,-20
   8b3e0:	dfc00415 	stw	ra,16(sp)
   8b3e4:	df000315 	stw	fp,12(sp)
   8b3e8:	df000304 	addi	fp,sp,12
   8b3ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8b3f0:	e0bfff17 	ldw	r2,-4(fp)
   8b3f4:	10000716 	blt	r2,zero,8b414 <close+0x38>
   8b3f8:	e13fff17 	ldw	r4,-4(fp)
   8b3fc:	01400304 	movi	r5,12
   8b400:	0081c900 	call	81c90 <__mulsi3>
   8b404:	00c00274 	movhi	r3,9
   8b408:	18fdc304 	addi	r3,r3,-2292
   8b40c:	10c5883a 	add	r2,r2,r3
   8b410:	00000106 	br	8b418 <close+0x3c>
   8b414:	0005883a 	mov	r2,zero
   8b418:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8b41c:	e0bffd17 	ldw	r2,-12(fp)
   8b420:	10001826 	beq	r2,zero,8b484 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8b424:	e0bffd17 	ldw	r2,-12(fp)
   8b428:	10800017 	ldw	r2,0(r2)
   8b42c:	10800417 	ldw	r2,16(r2)
   8b430:	10000626 	beq	r2,zero,8b44c <close+0x70>
   8b434:	e0bffd17 	ldw	r2,-12(fp)
   8b438:	10800017 	ldw	r2,0(r2)
   8b43c:	10800417 	ldw	r2,16(r2)
   8b440:	e13ffd17 	ldw	r4,-12(fp)
   8b444:	103ee83a 	callr	r2
   8b448:	00000106 	br	8b450 <close+0x74>
   8b44c:	0005883a 	mov	r2,zero
   8b450:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8b454:	e13fff17 	ldw	r4,-4(fp)
   8b458:	008bad40 	call	8bad4 <alt_release_fd>
    if (rval < 0)
   8b45c:	e0bffe17 	ldw	r2,-8(fp)
   8b460:	1000060e 	bge	r2,zero,8b47c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   8b464:	008b38c0 	call	8b38c <alt_get_errno>
   8b468:	e0fffe17 	ldw	r3,-8(fp)
   8b46c:	00c7c83a 	sub	r3,zero,r3
   8b470:	10c00015 	stw	r3,0(r2)
      return -1;
   8b474:	00bfffc4 	movi	r2,-1
   8b478:	00000606 	br	8b494 <close+0xb8>
    }
    return 0;
   8b47c:	0005883a 	mov	r2,zero
   8b480:	00000406 	br	8b494 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b484:	008b38c0 	call	8b38c <alt_get_errno>
   8b488:	00c01444 	movi	r3,81
   8b48c:	10c00015 	stw	r3,0(r2)
    return -1;
   8b490:	00bfffc4 	movi	r2,-1
  }
}
   8b494:	e037883a 	mov	sp,fp
   8b498:	dfc00117 	ldw	ra,4(sp)
   8b49c:	df000017 	ldw	fp,0(sp)
   8b4a0:	dec00204 	addi	sp,sp,8
   8b4a4:	f800283a 	ret

0008b4a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8b4a8:	defffc04 	addi	sp,sp,-16
   8b4ac:	df000315 	stw	fp,12(sp)
   8b4b0:	df000304 	addi	fp,sp,12
   8b4b4:	e13ffd15 	stw	r4,-12(fp)
   8b4b8:	e17ffe15 	stw	r5,-8(fp)
   8b4bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8b4c0:	e0bfff17 	ldw	r2,-4(fp)
}
   8b4c4:	e037883a 	mov	sp,fp
   8b4c8:	df000017 	ldw	fp,0(sp)
   8b4cc:	dec00104 	addi	sp,sp,4
   8b4d0:	f800283a 	ret

0008b4d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b4d4:	defffe04 	addi	sp,sp,-8
   8b4d8:	dfc00115 	stw	ra,4(sp)
   8b4dc:	df000015 	stw	fp,0(sp)
   8b4e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8b4e4:	00800274 	movhi	r2,9
   8b4e8:	10824504 	addi	r2,r2,2324
   8b4ec:	10800017 	ldw	r2,0(r2)
   8b4f0:	10000526 	beq	r2,zero,8b508 <alt_get_errno+0x34>
   8b4f4:	00800274 	movhi	r2,9
   8b4f8:	10824504 	addi	r2,r2,2324
   8b4fc:	10800017 	ldw	r2,0(r2)
   8b500:	103ee83a 	callr	r2
   8b504:	00000206 	br	8b510 <alt_get_errno+0x3c>
   8b508:	00800274 	movhi	r2,9
   8b50c:	108af004 	addi	r2,r2,11200
}
   8b510:	e037883a 	mov	sp,fp
   8b514:	dfc00117 	ldw	ra,4(sp)
   8b518:	df000017 	ldw	fp,0(sp)
   8b51c:	dec00204 	addi	sp,sp,8
   8b520:	f800283a 	ret

0008b524 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8b524:	defffb04 	addi	sp,sp,-20
   8b528:	dfc00415 	stw	ra,16(sp)
   8b52c:	df000315 	stw	fp,12(sp)
   8b530:	df000304 	addi	fp,sp,12
   8b534:	e13ffe15 	stw	r4,-8(fp)
   8b538:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b53c:	e0bffe17 	ldw	r2,-8(fp)
   8b540:	10000716 	blt	r2,zero,8b560 <fstat+0x3c>
   8b544:	e13ffe17 	ldw	r4,-8(fp)
   8b548:	01400304 	movi	r5,12
   8b54c:	0081c900 	call	81c90 <__mulsi3>
   8b550:	00c00274 	movhi	r3,9
   8b554:	18fdc304 	addi	r3,r3,-2292
   8b558:	10c5883a 	add	r2,r2,r3
   8b55c:	00000106 	br	8b564 <fstat+0x40>
   8b560:	0005883a 	mov	r2,zero
   8b564:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   8b568:	e0bffd17 	ldw	r2,-12(fp)
   8b56c:	10001026 	beq	r2,zero,8b5b0 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8b570:	e0bffd17 	ldw	r2,-12(fp)
   8b574:	10800017 	ldw	r2,0(r2)
   8b578:	10800817 	ldw	r2,32(r2)
   8b57c:	10000726 	beq	r2,zero,8b59c <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   8b580:	e0bffd17 	ldw	r2,-12(fp)
   8b584:	10800017 	ldw	r2,0(r2)
   8b588:	10800817 	ldw	r2,32(r2)
   8b58c:	e13ffd17 	ldw	r4,-12(fp)
   8b590:	e17fff17 	ldw	r5,-4(fp)
   8b594:	103ee83a 	callr	r2
   8b598:	00000906 	br	8b5c0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8b59c:	e0bfff17 	ldw	r2,-4(fp)
   8b5a0:	00c80004 	movi	r3,8192
   8b5a4:	10c00115 	stw	r3,4(r2)
      return 0;
   8b5a8:	0005883a 	mov	r2,zero
   8b5ac:	00000406 	br	8b5c0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b5b0:	008b4d40 	call	8b4d4 <alt_get_errno>
   8b5b4:	00c01444 	movi	r3,81
   8b5b8:	10c00015 	stw	r3,0(r2)
    return -1;
   8b5bc:	00bfffc4 	movi	r2,-1
  }
}
   8b5c0:	e037883a 	mov	sp,fp
   8b5c4:	dfc00117 	ldw	ra,4(sp)
   8b5c8:	df000017 	ldw	fp,0(sp)
   8b5cc:	dec00204 	addi	sp,sp,8
   8b5d0:	f800283a 	ret

0008b5d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b5d4:	defffe04 	addi	sp,sp,-8
   8b5d8:	dfc00115 	stw	ra,4(sp)
   8b5dc:	df000015 	stw	fp,0(sp)
   8b5e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8b5e4:	00800274 	movhi	r2,9
   8b5e8:	10824504 	addi	r2,r2,2324
   8b5ec:	10800017 	ldw	r2,0(r2)
   8b5f0:	10000526 	beq	r2,zero,8b608 <alt_get_errno+0x34>
   8b5f4:	00800274 	movhi	r2,9
   8b5f8:	10824504 	addi	r2,r2,2324
   8b5fc:	10800017 	ldw	r2,0(r2)
   8b600:	103ee83a 	callr	r2
   8b604:	00000206 	br	8b610 <alt_get_errno+0x3c>
   8b608:	00800274 	movhi	r2,9
   8b60c:	108af004 	addi	r2,r2,11200
}
   8b610:	e037883a 	mov	sp,fp
   8b614:	dfc00117 	ldw	ra,4(sp)
   8b618:	df000017 	ldw	fp,0(sp)
   8b61c:	dec00204 	addi	sp,sp,8
   8b620:	f800283a 	ret

0008b624 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8b624:	deffed04 	addi	sp,sp,-76
   8b628:	dfc01215 	stw	ra,72(sp)
   8b62c:	df001115 	stw	fp,68(sp)
   8b630:	df001104 	addi	fp,sp,68
   8b634:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b638:	e0bfff17 	ldw	r2,-4(fp)
   8b63c:	10000716 	blt	r2,zero,8b65c <isatty+0x38>
   8b640:	e13fff17 	ldw	r4,-4(fp)
   8b644:	01400304 	movi	r5,12
   8b648:	0081c900 	call	81c90 <__mulsi3>
   8b64c:	00c00274 	movhi	r3,9
   8b650:	18fdc304 	addi	r3,r3,-2292
   8b654:	10c5883a 	add	r2,r2,r3
   8b658:	00000106 	br	8b660 <isatty+0x3c>
   8b65c:	0005883a 	mov	r2,zero
   8b660:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   8b664:	e0bfef17 	ldw	r2,-68(fp)
   8b668:	10000e26 	beq	r2,zero,8b6a4 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8b66c:	e0bfef17 	ldw	r2,-68(fp)
   8b670:	10800017 	ldw	r2,0(r2)
   8b674:	10800817 	ldw	r2,32(r2)
   8b678:	1000021e 	bne	r2,zero,8b684 <isatty+0x60>
    {
      return 1;
   8b67c:	00800044 	movi	r2,1
   8b680:	00000c06 	br	8b6b4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8b684:	e0bff004 	addi	r2,fp,-64
   8b688:	e13fff17 	ldw	r4,-4(fp)
   8b68c:	100b883a 	mov	r5,r2
   8b690:	008b5240 	call	8b524 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8b694:	e0bff117 	ldw	r2,-60(fp)
   8b698:	10880020 	cmpeqi	r2,r2,8192
   8b69c:	10803fcc 	andi	r2,r2,255
   8b6a0:	00000406 	br	8b6b4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b6a4:	008b5d40 	call	8b5d4 <alt_get_errno>
   8b6a8:	00c01444 	movi	r3,81
   8b6ac:	10c00015 	stw	r3,0(r2)
    return 0;
   8b6b0:	0005883a 	mov	r2,zero
  }
}
   8b6b4:	e037883a 	mov	sp,fp
   8b6b8:	dfc00117 	ldw	ra,4(sp)
   8b6bc:	df000017 	ldw	fp,0(sp)
   8b6c0:	dec00204 	addi	sp,sp,8
   8b6c4:	f800283a 	ret

0008b6c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8b6c8:	defffc04 	addi	sp,sp,-16
   8b6cc:	df000315 	stw	fp,12(sp)
   8b6d0:	df000304 	addi	fp,sp,12
   8b6d4:	e13ffd15 	stw	r4,-12(fp)
   8b6d8:	e17ffe15 	stw	r5,-8(fp)
   8b6dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8b6e0:	e0fffe17 	ldw	r3,-8(fp)
   8b6e4:	e0bffd17 	ldw	r2,-12(fp)
   8b6e8:	18800e26 	beq	r3,r2,8b724 <alt_load_section+0x5c>
  {
    while( to != end )
   8b6ec:	00000a06 	br	8b718 <alt_load_section+0x50>
    {
      *to++ = *from++;
   8b6f0:	e0bffd17 	ldw	r2,-12(fp)
   8b6f4:	10c00017 	ldw	r3,0(r2)
   8b6f8:	e0bffe17 	ldw	r2,-8(fp)
   8b6fc:	10c00015 	stw	r3,0(r2)
   8b700:	e0bffe17 	ldw	r2,-8(fp)
   8b704:	10800104 	addi	r2,r2,4
   8b708:	e0bffe15 	stw	r2,-8(fp)
   8b70c:	e0bffd17 	ldw	r2,-12(fp)
   8b710:	10800104 	addi	r2,r2,4
   8b714:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8b718:	e0fffe17 	ldw	r3,-8(fp)
   8b71c:	e0bfff17 	ldw	r2,-4(fp)
   8b720:	18bff31e 	bne	r3,r2,8b6f0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8b724:	e037883a 	mov	sp,fp
   8b728:	df000017 	ldw	fp,0(sp)
   8b72c:	dec00104 	addi	sp,sp,4
   8b730:	f800283a 	ret

0008b734 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8b734:	defffe04 	addi	sp,sp,-8
   8b738:	dfc00115 	stw	ra,4(sp)
   8b73c:	df000015 	stw	fp,0(sp)
   8b740:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8b744:	01000274 	movhi	r4,9
   8b748:	21024a04 	addi	r4,r4,2344
   8b74c:	01400274 	movhi	r5,9
   8b750:	2979af04 	addi	r5,r5,-6468
   8b754:	01800274 	movhi	r6,9
   8b758:	31824a04 	addi	r6,r6,2344
   8b75c:	008b6c80 	call	8b6c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8b760:	01000234 	movhi	r4,8
   8b764:	21000804 	addi	r4,r4,32
   8b768:	01400234 	movhi	r5,8
   8b76c:	29400804 	addi	r5,r5,32
   8b770:	01800234 	movhi	r6,8
   8b774:	31806e04 	addi	r6,r6,440
   8b778:	008b6c80 	call	8b6c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8b77c:	01000274 	movhi	r4,9
   8b780:	2138a604 	addi	r4,r4,-7528
   8b784:	01400274 	movhi	r5,9
   8b788:	2978a604 	addi	r5,r5,-7528
   8b78c:	01800274 	movhi	r6,9
   8b790:	31b9af04 	addi	r6,r6,-6468
   8b794:	008b6c80 	call	8b6c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8b798:	008d1580 	call	8d158 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8b79c:	008d31c0 	call	8d31c <alt_icache_flush_all>
}
   8b7a0:	e037883a 	mov	sp,fp
   8b7a4:	dfc00117 	ldw	ra,4(sp)
   8b7a8:	df000017 	ldw	fp,0(sp)
   8b7ac:	dec00204 	addi	sp,sp,8
   8b7b0:	f800283a 	ret

0008b7b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b7b4:	defffe04 	addi	sp,sp,-8
   8b7b8:	dfc00115 	stw	ra,4(sp)
   8b7bc:	df000015 	stw	fp,0(sp)
   8b7c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8b7c4:	00800274 	movhi	r2,9
   8b7c8:	10824504 	addi	r2,r2,2324
   8b7cc:	10800017 	ldw	r2,0(r2)
   8b7d0:	10000526 	beq	r2,zero,8b7e8 <alt_get_errno+0x34>
   8b7d4:	00800274 	movhi	r2,9
   8b7d8:	10824504 	addi	r2,r2,2324
   8b7dc:	10800017 	ldw	r2,0(r2)
   8b7e0:	103ee83a 	callr	r2
   8b7e4:	00000206 	br	8b7f0 <alt_get_errno+0x3c>
   8b7e8:	00800274 	movhi	r2,9
   8b7ec:	108af004 	addi	r2,r2,11200
}
   8b7f0:	e037883a 	mov	sp,fp
   8b7f4:	dfc00117 	ldw	ra,4(sp)
   8b7f8:	df000017 	ldw	fp,0(sp)
   8b7fc:	dec00204 	addi	sp,sp,8
   8b800:	f800283a 	ret

0008b804 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8b804:	defff904 	addi	sp,sp,-28
   8b808:	dfc00615 	stw	ra,24(sp)
   8b80c:	df000515 	stw	fp,20(sp)
   8b810:	df000504 	addi	fp,sp,20
   8b814:	e13ffd15 	stw	r4,-12(fp)
   8b818:	e17ffe15 	stw	r5,-8(fp)
   8b81c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8b820:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b824:	e0bffd17 	ldw	r2,-12(fp)
   8b828:	10000716 	blt	r2,zero,8b848 <lseek+0x44>
   8b82c:	e13ffd17 	ldw	r4,-12(fp)
   8b830:	01400304 	movi	r5,12
   8b834:	0081c900 	call	81c90 <__mulsi3>
   8b838:	00c00274 	movhi	r3,9
   8b83c:	18fdc304 	addi	r3,r3,-2292
   8b840:	10c5883a 	add	r2,r2,r3
   8b844:	00000106 	br	8b84c <lseek+0x48>
   8b848:	0005883a 	mov	r2,zero
   8b84c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   8b850:	e0bffc17 	ldw	r2,-16(fp)
   8b854:	10001026 	beq	r2,zero,8b898 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8b858:	e0bffc17 	ldw	r2,-16(fp)
   8b85c:	10800017 	ldw	r2,0(r2)
   8b860:	10800717 	ldw	r2,28(r2)
   8b864:	10000926 	beq	r2,zero,8b88c <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8b868:	e0bffc17 	ldw	r2,-16(fp)
   8b86c:	10800017 	ldw	r2,0(r2)
   8b870:	10800717 	ldw	r2,28(r2)
   8b874:	e13ffc17 	ldw	r4,-16(fp)
   8b878:	e17ffe17 	ldw	r5,-8(fp)
   8b87c:	e1bfff17 	ldw	r6,-4(fp)
   8b880:	103ee83a 	callr	r2
   8b884:	e0bffb15 	stw	r2,-20(fp)
   8b888:	00000506 	br	8b8a0 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8b88c:	00bfde84 	movi	r2,-134
   8b890:	e0bffb15 	stw	r2,-20(fp)
   8b894:	00000206 	br	8b8a0 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   8b898:	00bfebc4 	movi	r2,-81
   8b89c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   8b8a0:	e0bffb17 	ldw	r2,-20(fp)
   8b8a4:	1000060e 	bge	r2,zero,8b8c0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   8b8a8:	008b7b40 	call	8b7b4 <alt_get_errno>
   8b8ac:	e0fffb17 	ldw	r3,-20(fp)
   8b8b0:	00c7c83a 	sub	r3,zero,r3
   8b8b4:	10c00015 	stw	r3,0(r2)
    rc = -1;
   8b8b8:	00bfffc4 	movi	r2,-1
   8b8bc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   8b8c0:	e0bffb17 	ldw	r2,-20(fp)
}
   8b8c4:	e037883a 	mov	sp,fp
   8b8c8:	dfc00117 	ldw	ra,4(sp)
   8b8cc:	df000017 	ldw	fp,0(sp)
   8b8d0:	dec00204 	addi	sp,sp,8
   8b8d4:	f800283a 	ret

0008b8d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8b8d8:	defffd04 	addi	sp,sp,-12
   8b8dc:	dfc00215 	stw	ra,8(sp)
   8b8e0:	df000115 	stw	fp,4(sp)
   8b8e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8b8e8:	0009883a 	mov	r4,zero
   8b8ec:	008bdac0 	call	8bdac <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8b8f0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8b8f4:	008bde00 	call	8bde0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8b8f8:	01000274 	movhi	r4,9
   8b8fc:	2139a904 	addi	r4,r4,-6492
   8b900:	01400274 	movhi	r5,9
   8b904:	2979a904 	addi	r5,r5,-6492
   8b908:	01800274 	movhi	r6,9
   8b90c:	31b9a904 	addi	r6,r6,-6492
   8b910:	008d6f40 	call	8d6f4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8b914:	008d2640 	call	8d264 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8b918:	01000274 	movhi	r4,9
   8b91c:	2134b004 	addi	r4,r4,-11584
   8b920:	008dec40 	call	8dec4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8b924:	d128b617 	ldw	r4,-23848(gp)
   8b928:	d0e8b717 	ldw	r3,-23844(gp)
   8b92c:	d0a8b817 	ldw	r2,-23840(gp)
   8b930:	180b883a 	mov	r5,r3
   8b934:	100d883a 	mov	r6,r2
   8b938:	008024c0 	call	8024c <main>
   8b93c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8b940:	01000044 	movi	r4,1
   8b944:	008b3dc0 	call	8b3dc <close>
  exit (result);
   8b948:	e13fff17 	ldw	r4,-4(fp)
   8b94c:	008ded80 	call	8ded8 <exit>

0008b950 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8b950:	defffe04 	addi	sp,sp,-8
   8b954:	df000115 	stw	fp,4(sp)
   8b958:	df000104 	addi	fp,sp,4
   8b95c:	e13fff15 	stw	r4,-4(fp)
}
   8b960:	e037883a 	mov	sp,fp
   8b964:	df000017 	ldw	fp,0(sp)
   8b968:	dec00104 	addi	sp,sp,4
   8b96c:	f800283a 	ret

0008b970 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8b970:	defffe04 	addi	sp,sp,-8
   8b974:	df000115 	stw	fp,4(sp)
   8b978:	df000104 	addi	fp,sp,4
   8b97c:	e13fff15 	stw	r4,-4(fp)
}
   8b980:	e037883a 	mov	sp,fp
   8b984:	df000017 	ldw	fp,0(sp)
   8b988:	dec00104 	addi	sp,sp,4
   8b98c:	f800283a 	ret

0008b990 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b990:	defffe04 	addi	sp,sp,-8
   8b994:	dfc00115 	stw	ra,4(sp)
   8b998:	df000015 	stw	fp,0(sp)
   8b99c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8b9a0:	00800274 	movhi	r2,9
   8b9a4:	10824504 	addi	r2,r2,2324
   8b9a8:	10800017 	ldw	r2,0(r2)
   8b9ac:	10000526 	beq	r2,zero,8b9c4 <alt_get_errno+0x34>
   8b9b0:	00800274 	movhi	r2,9
   8b9b4:	10824504 	addi	r2,r2,2324
   8b9b8:	10800017 	ldw	r2,0(r2)
   8b9bc:	103ee83a 	callr	r2
   8b9c0:	00000206 	br	8b9cc <alt_get_errno+0x3c>
   8b9c4:	00800274 	movhi	r2,9
   8b9c8:	108af004 	addi	r2,r2,11200
}
   8b9cc:	e037883a 	mov	sp,fp
   8b9d0:	dfc00117 	ldw	ra,4(sp)
   8b9d4:	df000017 	ldw	fp,0(sp)
   8b9d8:	dec00204 	addi	sp,sp,8
   8b9dc:	f800283a 	ret

0008b9e0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8b9e0:	defff904 	addi	sp,sp,-28
   8b9e4:	dfc00615 	stw	ra,24(sp)
   8b9e8:	df000515 	stw	fp,20(sp)
   8b9ec:	df000504 	addi	fp,sp,20
   8b9f0:	e13ffd15 	stw	r4,-12(fp)
   8b9f4:	e17ffe15 	stw	r5,-8(fp)
   8b9f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b9fc:	e0bffd17 	ldw	r2,-12(fp)
   8ba00:	10000716 	blt	r2,zero,8ba20 <read+0x40>
   8ba04:	e13ffd17 	ldw	r4,-12(fp)
   8ba08:	01400304 	movi	r5,12
   8ba0c:	0081c900 	call	81c90 <__mulsi3>
   8ba10:	00c00274 	movhi	r3,9
   8ba14:	18fdc304 	addi	r3,r3,-2292
   8ba18:	10c5883a 	add	r2,r2,r3
   8ba1c:	00000106 	br	8ba24 <read+0x44>
   8ba20:	0005883a 	mov	r2,zero
   8ba24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8ba28:	e0bffb17 	ldw	r2,-20(fp)
   8ba2c:	10002026 	beq	r2,zero,8bab0 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8ba30:	e0bffb17 	ldw	r2,-20(fp)
   8ba34:	10800217 	ldw	r2,8(r2)
   8ba38:	108000cc 	andi	r2,r2,3
   8ba3c:	10800060 	cmpeqi	r2,r2,1
   8ba40:	1000171e 	bne	r2,zero,8baa0 <read+0xc0>
        (fd->dev->read))
   8ba44:	e0bffb17 	ldw	r2,-20(fp)
   8ba48:	10800017 	ldw	r2,0(r2)
   8ba4c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8ba50:	10001326 	beq	r2,zero,8baa0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8ba54:	e0bffb17 	ldw	r2,-20(fp)
   8ba58:	10800017 	ldw	r2,0(r2)
   8ba5c:	10c00517 	ldw	r3,20(r2)
   8ba60:	e0bfff17 	ldw	r2,-4(fp)
   8ba64:	e13ffb17 	ldw	r4,-20(fp)
   8ba68:	e17ffe17 	ldw	r5,-8(fp)
   8ba6c:	100d883a 	mov	r6,r2
   8ba70:	183ee83a 	callr	r3
   8ba74:	e0bffc15 	stw	r2,-16(fp)
   8ba78:	e0bffc17 	ldw	r2,-16(fp)
   8ba7c:	1000060e 	bge	r2,zero,8ba98 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   8ba80:	008b9900 	call	8b990 <alt_get_errno>
   8ba84:	e0fffc17 	ldw	r3,-16(fp)
   8ba88:	00c7c83a 	sub	r3,zero,r3
   8ba8c:	10c00015 	stw	r3,0(r2)
          return -1;
   8ba90:	00bfffc4 	movi	r2,-1
   8ba94:	00000a06 	br	8bac0 <read+0xe0>
        }
        return rval;
   8ba98:	e0bffc17 	ldw	r2,-16(fp)
   8ba9c:	00000806 	br	8bac0 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8baa0:	008b9900 	call	8b990 <alt_get_errno>
   8baa4:	00c00344 	movi	r3,13
   8baa8:	10c00015 	stw	r3,0(r2)
   8baac:	00000306 	br	8babc <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8bab0:	008b9900 	call	8b990 <alt_get_errno>
   8bab4:	00c01444 	movi	r3,81
   8bab8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   8babc:	00bfffc4 	movi	r2,-1
}
   8bac0:	e037883a 	mov	sp,fp
   8bac4:	dfc00117 	ldw	ra,4(sp)
   8bac8:	df000017 	ldw	fp,0(sp)
   8bacc:	dec00204 	addi	sp,sp,8
   8bad0:	f800283a 	ret

0008bad4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8bad4:	defffc04 	addi	sp,sp,-16
   8bad8:	dfc00315 	stw	ra,12(sp)
   8badc:	df000215 	stw	fp,8(sp)
   8bae0:	dc000115 	stw	r16,4(sp)
   8bae4:	df000104 	addi	fp,sp,4
   8bae8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8baec:	e0bfff17 	ldw	r2,-4(fp)
   8baf0:	108000d0 	cmplti	r2,r2,3
   8baf4:	1000111e 	bne	r2,zero,8bb3c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   8baf8:	04000274 	movhi	r16,9
   8bafc:	843dc304 	addi	r16,r16,-2292
   8bb00:	e0bfff17 	ldw	r2,-4(fp)
   8bb04:	1009883a 	mov	r4,r2
   8bb08:	01400304 	movi	r5,12
   8bb0c:	0081c900 	call	81c90 <__mulsi3>
   8bb10:	8085883a 	add	r2,r16,r2
   8bb14:	10800204 	addi	r2,r2,8
   8bb18:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8bb1c:	04000274 	movhi	r16,9
   8bb20:	843dc304 	addi	r16,r16,-2292
   8bb24:	e0bfff17 	ldw	r2,-4(fp)
   8bb28:	1009883a 	mov	r4,r2
   8bb2c:	01400304 	movi	r5,12
   8bb30:	0081c900 	call	81c90 <__mulsi3>
   8bb34:	8085883a 	add	r2,r16,r2
   8bb38:	10000015 	stw	zero,0(r2)
  }
}
   8bb3c:	e037883a 	mov	sp,fp
   8bb40:	dfc00217 	ldw	ra,8(sp)
   8bb44:	df000117 	ldw	fp,4(sp)
   8bb48:	dc000017 	ldw	r16,0(sp)
   8bb4c:	dec00304 	addi	sp,sp,12
   8bb50:	f800283a 	ret

0008bb54 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8bb54:	defff904 	addi	sp,sp,-28
   8bb58:	df000615 	stw	fp,24(sp)
   8bb5c:	df000604 	addi	fp,sp,24
   8bb60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bb64:	0005303a 	rdctl	r2,status
   8bb68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bb6c:	e0fffc17 	ldw	r3,-16(fp)
   8bb70:	00bfff84 	movi	r2,-2
   8bb74:	1884703a 	and	r2,r3,r2
   8bb78:	1001703a 	wrctl	status,r2
  
  return context;
   8bb7c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8bb80:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8bb84:	d0a00b17 	ldw	r2,-32724(gp)
   8bb88:	10c000c4 	addi	r3,r2,3
   8bb8c:	00bfff04 	movi	r2,-4
   8bb90:	1884703a 	and	r2,r3,r2
   8bb94:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8bb98:	d0e00b17 	ldw	r3,-32724(gp)
   8bb9c:	e0bfff17 	ldw	r2,-4(fp)
   8bba0:	1885883a 	add	r2,r3,r2
   8bba4:	00c002b4 	movhi	r3,10
   8bba8:	18c00004 	addi	r3,r3,0
   8bbac:	1880062e 	bgeu	r3,r2,8bbc8 <sbrk+0x74>
   8bbb0:	e0bffa17 	ldw	r2,-24(fp)
   8bbb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bbb8:	e0bffd17 	ldw	r2,-12(fp)
   8bbbc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8bbc0:	00bfffc4 	movi	r2,-1
   8bbc4:	00000b06 	br	8bbf4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8bbc8:	d0a00b17 	ldw	r2,-32724(gp)
   8bbcc:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   8bbd0:	d0e00b17 	ldw	r3,-32724(gp)
   8bbd4:	e0bfff17 	ldw	r2,-4(fp)
   8bbd8:	1885883a 	add	r2,r3,r2
   8bbdc:	d0a00b15 	stw	r2,-32724(gp)
   8bbe0:	e0bffa17 	ldw	r2,-24(fp)
   8bbe4:	e0bffe15 	stw	r2,-8(fp)
   8bbe8:	e0bffe17 	ldw	r2,-8(fp)
   8bbec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8bbf0:	e0bffb17 	ldw	r2,-20(fp)
} 
   8bbf4:	e037883a 	mov	sp,fp
   8bbf8:	df000017 	ldw	fp,0(sp)
   8bbfc:	dec00104 	addi	sp,sp,4
   8bc00:	f800283a 	ret

0008bc04 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   8bc04:	defffd04 	addi	sp,sp,-12
   8bc08:	dfc00215 	stw	ra,8(sp)
   8bc0c:	df000115 	stw	fp,4(sp)
   8bc10:	df000104 	addi	fp,sp,4
   8bc14:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   8bc18:	e13fff17 	ldw	r4,-4(fp)
   8bc1c:	008d0040 	call	8d004 <alt_busy_sleep>
}
   8bc20:	e037883a 	mov	sp,fp
   8bc24:	dfc00117 	ldw	ra,4(sp)
   8bc28:	df000017 	ldw	fp,0(sp)
   8bc2c:	dec00204 	addi	sp,sp,8
   8bc30:	f800283a 	ret

0008bc34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8bc34:	defffe04 	addi	sp,sp,-8
   8bc38:	dfc00115 	stw	ra,4(sp)
   8bc3c:	df000015 	stw	fp,0(sp)
   8bc40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8bc44:	00800274 	movhi	r2,9
   8bc48:	10824504 	addi	r2,r2,2324
   8bc4c:	10800017 	ldw	r2,0(r2)
   8bc50:	10000526 	beq	r2,zero,8bc68 <alt_get_errno+0x34>
   8bc54:	00800274 	movhi	r2,9
   8bc58:	10824504 	addi	r2,r2,2324
   8bc5c:	10800017 	ldw	r2,0(r2)
   8bc60:	103ee83a 	callr	r2
   8bc64:	00000206 	br	8bc70 <alt_get_errno+0x3c>
   8bc68:	00800274 	movhi	r2,9
   8bc6c:	108af004 	addi	r2,r2,11200
}
   8bc70:	e037883a 	mov	sp,fp
   8bc74:	dfc00117 	ldw	ra,4(sp)
   8bc78:	df000017 	ldw	fp,0(sp)
   8bc7c:	dec00204 	addi	sp,sp,8
   8bc80:	f800283a 	ret

0008bc84 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8bc84:	defff904 	addi	sp,sp,-28
   8bc88:	dfc00615 	stw	ra,24(sp)
   8bc8c:	df000515 	stw	fp,20(sp)
   8bc90:	df000504 	addi	fp,sp,20
   8bc94:	e13ffd15 	stw	r4,-12(fp)
   8bc98:	e17ffe15 	stw	r5,-8(fp)
   8bc9c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8bca0:	e0bffd17 	ldw	r2,-12(fp)
   8bca4:	10000716 	blt	r2,zero,8bcc4 <write+0x40>
   8bca8:	e13ffd17 	ldw	r4,-12(fp)
   8bcac:	01400304 	movi	r5,12
   8bcb0:	0081c900 	call	81c90 <__mulsi3>
   8bcb4:	00c00274 	movhi	r3,9
   8bcb8:	18fdc304 	addi	r3,r3,-2292
   8bcbc:	10c5883a 	add	r2,r2,r3
   8bcc0:	00000106 	br	8bcc8 <write+0x44>
   8bcc4:	0005883a 	mov	r2,zero
   8bcc8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8bccc:	e0bffb17 	ldw	r2,-20(fp)
   8bcd0:	10001f26 	beq	r2,zero,8bd50 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8bcd4:	e0bffb17 	ldw	r2,-20(fp)
   8bcd8:	10800217 	ldw	r2,8(r2)
   8bcdc:	108000cc 	andi	r2,r2,3
   8bce0:	10001726 	beq	r2,zero,8bd40 <write+0xbc>
   8bce4:	e0bffb17 	ldw	r2,-20(fp)
   8bce8:	10800017 	ldw	r2,0(r2)
   8bcec:	10800617 	ldw	r2,24(r2)
   8bcf0:	10001326 	beq	r2,zero,8bd40 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8bcf4:	e0bffb17 	ldw	r2,-20(fp)
   8bcf8:	10800017 	ldw	r2,0(r2)
   8bcfc:	10c00617 	ldw	r3,24(r2)
   8bd00:	e0bfff17 	ldw	r2,-4(fp)
   8bd04:	e13ffb17 	ldw	r4,-20(fp)
   8bd08:	e17ffe17 	ldw	r5,-8(fp)
   8bd0c:	100d883a 	mov	r6,r2
   8bd10:	183ee83a 	callr	r3
   8bd14:	e0bffc15 	stw	r2,-16(fp)
   8bd18:	e0bffc17 	ldw	r2,-16(fp)
   8bd1c:	1000060e 	bge	r2,zero,8bd38 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   8bd20:	008bc340 	call	8bc34 <alt_get_errno>
   8bd24:	e0fffc17 	ldw	r3,-16(fp)
   8bd28:	00c7c83a 	sub	r3,zero,r3
   8bd2c:	10c00015 	stw	r3,0(r2)
        return -1;
   8bd30:	00bfffc4 	movi	r2,-1
   8bd34:	00000a06 	br	8bd60 <write+0xdc>
      }
      return rval;
   8bd38:	e0bffc17 	ldw	r2,-16(fp)
   8bd3c:	00000806 	br	8bd60 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8bd40:	008bc340 	call	8bc34 <alt_get_errno>
   8bd44:	00c00344 	movi	r3,13
   8bd48:	10c00015 	stw	r3,0(r2)
   8bd4c:	00000306 	br	8bd5c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8bd50:	008bc340 	call	8bc34 <alt_get_errno>
   8bd54:	00c01444 	movi	r3,81
   8bd58:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   8bd5c:	00bfffc4 	movi	r2,-1
}
   8bd60:	e037883a 	mov	sp,fp
   8bd64:	dfc00117 	ldw	ra,4(sp)
   8bd68:	df000017 	ldw	fp,0(sp)
   8bd6c:	dec00204 	addi	sp,sp,8
   8bd70:	f800283a 	ret

0008bd74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8bd74:	defffd04 	addi	sp,sp,-12
   8bd78:	dfc00215 	stw	ra,8(sp)
   8bd7c:	df000115 	stw	fp,4(sp)
   8bd80:	df000104 	addi	fp,sp,4
   8bd84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8bd88:	e13fff17 	ldw	r4,-4(fp)
   8bd8c:	01400274 	movhi	r5,9
   8bd90:	29424204 	addi	r5,r5,2312
   8bd94:	008d1c40 	call	8d1c4 <alt_dev_llist_insert>
}
   8bd98:	e037883a 	mov	sp,fp
   8bd9c:	dfc00117 	ldw	ra,4(sp)
   8bda0:	df000017 	ldw	fp,0(sp)
   8bda4:	dec00204 	addi	sp,sp,8
   8bda8:	f800283a 	ret

0008bdac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8bdac:	defffd04 	addi	sp,sp,-12
   8bdb0:	dfc00215 	stw	ra,8(sp)
   8bdb4:	df000115 	stw	fp,4(sp)
   8bdb8:	df000104 	addi	fp,sp,4
   8bdbc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_E, cpu_E);
   8bdc0:	008dba00 	call	8dba0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8bdc4:	00800044 	movi	r2,1
   8bdc8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8bdcc:	e037883a 	mov	sp,fp
   8bdd0:	dfc00117 	ldw	ra,4(sp)
   8bdd4:	df000017 	ldw	fp,0(sp)
   8bdd8:	dec00204 	addi	sp,sp,8
   8bddc:	f800283a 	ret

0008bde0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8bde0:	defffe04 	addi	sp,sp,-8
   8bde4:	dfc00115 	stw	ra,4(sp)
   8bde8:	df000015 	stw	fp,0(sp)
   8bdec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGHTIMER_E, highTimer_E);
   8bdf0:	00800274 	movhi	r2,9
   8bdf4:	108af404 	addi	r2,r2,11216
   8bdf8:	00c20074 	movhi	r3,2049
   8bdfc:	18c42004 	addi	r3,r3,4224
   8be00:	10c00015 	stw	r3,0(r2)
   8be04:	00800274 	movhi	r2,9
   8be08:	108af504 	addi	r2,r2,11220
   8be0c:	00c17db4 	movhi	r3,1526
   8be10:	18f84004 	addi	r3,r3,-7936
   8be14:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_E, timer_E);
   8be18:	01020074 	movhi	r4,2049
   8be1c:	21041804 	addi	r4,r4,4192
   8be20:	000b883a 	mov	r5,zero
   8be24:	000d883a 	mov	r6,zero
   8be28:	01c0fa04 	movi	r7,1000
   8be2c:	008ce3c0 	call	8ce3c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_AE, fifo_AE);
   8be30:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_DE, fifo_DE);
   8be34:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_EF, fifo_EF);
   8be38:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_E, jtag_E);
   8be3c:	01000274 	movhi	r4,9
   8be40:	213e2d04 	addi	r4,r4,-1868
   8be44:	000b883a 	mov	r5,zero
   8be48:	01800084 	movi	r6,2
   8be4c:	008c4c80 	call	8c4c8 <altera_avalon_jtag_uart_init>
   8be50:	01000274 	movhi	r4,9
   8be54:	213e2304 	addi	r4,r4,-1908
   8be58:	008bd740 	call	8bd74 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_E, sysid_E);
   8be5c:	0001883a 	nop
}
   8be60:	e037883a 	mov	sp,fp
   8be64:	dfc00117 	ldw	ra,4(sp)
   8be68:	df000017 	ldw	fp,0(sp)
   8be6c:	dec00204 	addi	sp,sp,8
   8be70:	f800283a 	ret

0008be74 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   8be74:	defffa04 	addi	sp,sp,-24
   8be78:	dfc00515 	stw	ra,20(sp)
   8be7c:	df000415 	stw	fp,16(sp)
   8be80:	df000404 	addi	fp,sp,16
   8be84:	e13ffc15 	stw	r4,-16(fp)
   8be88:	e17ffd15 	stw	r5,-12(fp)
   8be8c:	e1bffe15 	stw	r6,-8(fp)
   8be90:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   8be94:	e13ffc17 	ldw	r4,-16(fp)
   8be98:	01400fc4 	movi	r5,63
   8be9c:	008c0400 	call	8c040 <altera_avalon_fifo_clear_event>
   8bea0:	10000226 	beq	r2,zero,8beac <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   8bea4:	00bfffc4 	movi	r2,-1
   8bea8:	00001306 	br	8bef8 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   8beac:	e13ffc17 	ldw	r4,-16(fp)
   8beb0:	e17ffd17 	ldw	r5,-12(fp)
   8beb4:	008c09c0 	call	8c09c <altera_avalon_fifo_write_ienable>
   8beb8:	10000226 	beq	r2,zero,8bec4 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   8bebc:	00bfff84 	movi	r2,-2
   8bec0:	00000d06 	br	8bef8 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   8bec4:	e13ffc17 	ldw	r4,-16(fp)
   8bec8:	e17fff17 	ldw	r5,-4(fp)
   8becc:	008c0f40 	call	8c0f4 <altera_avalon_fifo_write_almostfull>
   8bed0:	10000226 	beq	r2,zero,8bedc <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   8bed4:	00bfff44 	movi	r2,-3
   8bed8:	00000706 	br	8bef8 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   8bedc:	e13ffc17 	ldw	r4,-16(fp)
   8bee0:	e17ffe17 	ldw	r5,-8(fp)
   8bee4:	008c14c0 	call	8c14c <altera_avalon_fifo_write_almostempty>
   8bee8:	10000226 	beq	r2,zero,8bef4 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   8beec:	00bfff44 	movi	r2,-3
   8bef0:	00000106 	br	8bef8 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   8bef4:	0005883a 	mov	r2,zero
}
   8bef8:	e037883a 	mov	sp,fp
   8befc:	dfc00117 	ldw	ra,4(sp)
   8bf00:	df000017 	ldw	fp,0(sp)
   8bf04:	dec00204 	addi	sp,sp,8
   8bf08:	f800283a 	ret

0008bf0c <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   8bf0c:	defffd04 	addi	sp,sp,-12
   8bf10:	df000215 	stw	fp,8(sp)
   8bf14:	df000204 	addi	fp,sp,8
   8bf18:	e13ffe15 	stw	r4,-8(fp)
   8bf1c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   8bf20:	e0bffe17 	ldw	r2,-8(fp)
   8bf24:	10800104 	addi	r2,r2,4
   8bf28:	10800037 	ldwio	r2,0(r2)
   8bf2c:	1007883a 	mov	r3,r2
   8bf30:	e0bfff17 	ldw	r2,-4(fp)
   8bf34:	1884703a 	and	r2,r3,r2
}
   8bf38:	e037883a 	mov	sp,fp
   8bf3c:	df000017 	ldw	fp,0(sp)
   8bf40:	dec00104 	addi	sp,sp,4
   8bf44:	f800283a 	ret

0008bf48 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   8bf48:	defffd04 	addi	sp,sp,-12
   8bf4c:	df000215 	stw	fp,8(sp)
   8bf50:	df000204 	addi	fp,sp,8
   8bf54:	e13ffe15 	stw	r4,-8(fp)
   8bf58:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   8bf5c:	e0bffe17 	ldw	r2,-8(fp)
   8bf60:	10800304 	addi	r2,r2,12
   8bf64:	10800037 	ldwio	r2,0(r2)
   8bf68:	1007883a 	mov	r3,r2
   8bf6c:	e0bfff17 	ldw	r2,-4(fp)
   8bf70:	1884703a 	and	r2,r3,r2
}
   8bf74:	e037883a 	mov	sp,fp
   8bf78:	df000017 	ldw	fp,0(sp)
   8bf7c:	dec00104 	addi	sp,sp,4
   8bf80:	f800283a 	ret

0008bf84 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   8bf84:	defffe04 	addi	sp,sp,-8
   8bf88:	df000115 	stw	fp,4(sp)
   8bf8c:	df000104 	addi	fp,sp,4
   8bf90:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   8bf94:	e0bfff17 	ldw	r2,-4(fp)
   8bf98:	10800404 	addi	r2,r2,16
   8bf9c:	10800037 	ldwio	r2,0(r2)
}
   8bfa0:	e037883a 	mov	sp,fp
   8bfa4:	df000017 	ldw	fp,0(sp)
   8bfa8:	dec00104 	addi	sp,sp,4
   8bfac:	f800283a 	ret

0008bfb0 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   8bfb0:	defffe04 	addi	sp,sp,-8
   8bfb4:	df000115 	stw	fp,4(sp)
   8bfb8:	df000104 	addi	fp,sp,4
   8bfbc:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   8bfc0:	e0bfff17 	ldw	r2,-4(fp)
   8bfc4:	10800504 	addi	r2,r2,20
   8bfc8:	10800037 	ldwio	r2,0(r2)
}
   8bfcc:	e037883a 	mov	sp,fp
   8bfd0:	df000017 	ldw	fp,0(sp)
   8bfd4:	dec00104 	addi	sp,sp,4
   8bfd8:	f800283a 	ret

0008bfdc <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   8bfdc:	defffd04 	addi	sp,sp,-12
   8bfe0:	df000215 	stw	fp,8(sp)
   8bfe4:	df000204 	addi	fp,sp,8
   8bfe8:	e13ffe15 	stw	r4,-8(fp)
   8bfec:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   8bff0:	e0bffe17 	ldw	r2,-8(fp)
   8bff4:	10800204 	addi	r2,r2,8
   8bff8:	10800037 	ldwio	r2,0(r2)
   8bffc:	1007883a 	mov	r3,r2
   8c000:	e0bfff17 	ldw	r2,-4(fp)
   8c004:	1884703a 	and	r2,r3,r2
}
   8c008:	e037883a 	mov	sp,fp
   8c00c:	df000017 	ldw	fp,0(sp)
   8c010:	dec00104 	addi	sp,sp,4
   8c014:	f800283a 	ret

0008c018 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   8c018:	defffe04 	addi	sp,sp,-8
   8c01c:	df000115 	stw	fp,4(sp)
   8c020:	df000104 	addi	fp,sp,4
   8c024:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   8c028:	e0bfff17 	ldw	r2,-4(fp)
   8c02c:	10800037 	ldwio	r2,0(r2)
}
   8c030:	e037883a 	mov	sp,fp
   8c034:	df000017 	ldw	fp,0(sp)
   8c038:	dec00104 	addi	sp,sp,4
   8c03c:	f800283a 	ret

0008c040 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   8c040:	defffd04 	addi	sp,sp,-12
   8c044:	df000215 	stw	fp,8(sp)
   8c048:	df000204 	addi	fp,sp,8
   8c04c:	e13ffe15 	stw	r4,-8(fp)
   8c050:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   8c054:	e0bffe17 	ldw	r2,-8(fp)
   8c058:	10800204 	addi	r2,r2,8
   8c05c:	e0ffff17 	ldw	r3,-4(fp)
   8c060:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   8c064:	e0bffe17 	ldw	r2,-8(fp)
   8c068:	10800204 	addi	r2,r2,8
   8c06c:	10800037 	ldwio	r2,0(r2)
   8c070:	1007883a 	mov	r3,r2
   8c074:	e0bfff17 	ldw	r2,-4(fp)
   8c078:	1884703a 	and	r2,r3,r2
   8c07c:	1000021e 	bne	r2,zero,8c088 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   8c080:	0005883a 	mov	r2,zero
   8c084:	00000106 	br	8c08c <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   8c088:	00bfffc4 	movi	r2,-1
}
   8c08c:	e037883a 	mov	sp,fp
   8c090:	df000017 	ldw	fp,0(sp)
   8c094:	dec00104 	addi	sp,sp,4
   8c098:	f800283a 	ret

0008c09c <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   8c09c:	defffd04 	addi	sp,sp,-12
   8c0a0:	df000215 	stw	fp,8(sp)
   8c0a4:	df000204 	addi	fp,sp,8
   8c0a8:	e13ffe15 	stw	r4,-8(fp)
   8c0ac:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   8c0b0:	e0bffe17 	ldw	r2,-8(fp)
   8c0b4:	10800304 	addi	r2,r2,12
   8c0b8:	e0ffff17 	ldw	r3,-4(fp)
   8c0bc:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   8c0c0:	e0bffe17 	ldw	r2,-8(fp)
   8c0c4:	10800304 	addi	r2,r2,12
   8c0c8:	10800037 	ldwio	r2,0(r2)
   8c0cc:	1007883a 	mov	r3,r2
   8c0d0:	e0bfff17 	ldw	r2,-4(fp)
   8c0d4:	1880021e 	bne	r3,r2,8c0e0 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   8c0d8:	0005883a 	mov	r2,zero
   8c0dc:	00000106 	br	8c0e4 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   8c0e0:	00bfff84 	movi	r2,-2
}
   8c0e4:	e037883a 	mov	sp,fp
   8c0e8:	df000017 	ldw	fp,0(sp)
   8c0ec:	dec00104 	addi	sp,sp,4
   8c0f0:	f800283a 	ret

0008c0f4 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   8c0f4:	defffd04 	addi	sp,sp,-12
   8c0f8:	df000215 	stw	fp,8(sp)
   8c0fc:	df000204 	addi	fp,sp,8
   8c100:	e13ffe15 	stw	r4,-8(fp)
   8c104:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   8c108:	e0bffe17 	ldw	r2,-8(fp)
   8c10c:	10800404 	addi	r2,r2,16
   8c110:	e0ffff17 	ldw	r3,-4(fp)
   8c114:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   8c118:	e0bffe17 	ldw	r2,-8(fp)
   8c11c:	10800404 	addi	r2,r2,16
   8c120:	10800037 	ldwio	r2,0(r2)
   8c124:	1007883a 	mov	r3,r2
   8c128:	e0bfff17 	ldw	r2,-4(fp)
   8c12c:	1880021e 	bne	r3,r2,8c138 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   8c130:	0005883a 	mov	r2,zero
   8c134:	00000106 	br	8c13c <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   8c138:	00bfff44 	movi	r2,-3
}
   8c13c:	e037883a 	mov	sp,fp
   8c140:	df000017 	ldw	fp,0(sp)
   8c144:	dec00104 	addi	sp,sp,4
   8c148:	f800283a 	ret

0008c14c <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   8c14c:	defffd04 	addi	sp,sp,-12
   8c150:	df000215 	stw	fp,8(sp)
   8c154:	df000204 	addi	fp,sp,8
   8c158:	e13ffe15 	stw	r4,-8(fp)
   8c15c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   8c160:	e0bffe17 	ldw	r2,-8(fp)
   8c164:	10800504 	addi	r2,r2,20
   8c168:	e0ffff17 	ldw	r3,-4(fp)
   8c16c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   8c170:	e0bffe17 	ldw	r2,-8(fp)
   8c174:	10800504 	addi	r2,r2,20
   8c178:	10800037 	ldwio	r2,0(r2)
   8c17c:	1007883a 	mov	r3,r2
   8c180:	e0bfff17 	ldw	r2,-4(fp)
   8c184:	1880021e 	bne	r3,r2,8c190 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   8c188:	0005883a 	mov	r2,zero
   8c18c:	00000106 	br	8c194 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   8c190:	00bfff44 	movi	r2,-3
}
   8c194:	e037883a 	mov	sp,fp
   8c198:	df000017 	ldw	fp,0(sp)
   8c19c:	dec00104 	addi	sp,sp,4
   8c1a0:	f800283a 	ret

0008c1a4 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   8c1a4:	defffb04 	addi	sp,sp,-20
   8c1a8:	dfc00415 	stw	ra,16(sp)
   8c1ac:	df000315 	stw	fp,12(sp)
   8c1b0:	df000304 	addi	fp,sp,12
   8c1b4:	e13ffd15 	stw	r4,-12(fp)
   8c1b8:	e17ffe15 	stw	r5,-8(fp)
   8c1bc:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   8c1c0:	e13ffe17 	ldw	r4,-8(fp)
   8c1c4:	01400044 	movi	r5,1
   8c1c8:	008bf0c0 	call	8bf0c <altera_avalon_fifo_read_status>
   8c1cc:	1000051e 	bne	r2,zero,8c1e4 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   8c1d0:	e0bffd17 	ldw	r2,-12(fp)
   8c1d4:	e0ffff17 	ldw	r3,-4(fp)
   8c1d8:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   8c1dc:	0005883a 	mov	r2,zero
   8c1e0:	00000106 	br	8c1e8 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   8c1e4:	00bfff04 	movi	r2,-4
    }
}
   8c1e8:	e037883a 	mov	sp,fp
   8c1ec:	dfc00117 	ldw	ra,4(sp)
   8c1f0:	df000017 	ldw	fp,0(sp)
   8c1f4:	dec00204 	addi	sp,sp,8
   8c1f8:	f800283a 	ret

0008c1fc <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   8c1fc:	defffa04 	addi	sp,sp,-24
   8c200:	dfc00515 	stw	ra,20(sp)
   8c204:	df000415 	stw	fp,16(sp)
   8c208:	df000404 	addi	fp,sp,16
   8c20c:	e13ffd15 	stw	r4,-12(fp)
   8c210:	e17ffe15 	stw	r5,-8(fp)
   8c214:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   8c218:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   8c21c:	e0bfff17 	ldw	r2,-4(fp)
   8c220:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   8c224:	e13ffe17 	ldw	r4,-8(fp)
   8c228:	01400084 	movi	r5,2
   8c22c:	008bf0c0 	call	8bf0c <altera_avalon_fifo_read_status>
   8c230:	1000071e 	bne	r2,zero,8c250 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   8c234:	e13ffe17 	ldw	r4,-8(fp)
   8c238:	008c0180 	call	8c018 <altera_avalon_fifo_read_level>
   8c23c:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   8c240:	e0bffd17 	ldw	r2,-12(fp)
   8c244:	10c00037 	ldwio	r3,0(r2)
   8c248:	e0bfff17 	ldw	r2,-4(fp)
   8c24c:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   8c250:	e0bffc17 	ldw	r2,-16(fp)
}
   8c254:	e037883a 	mov	sp,fp
   8c258:	dfc00117 	ldw	ra,4(sp)
   8c25c:	df000017 	ldw	fp,0(sp)
   8c260:	dec00204 	addi	sp,sp,8
   8c264:	f800283a 	ret

0008c268 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   8c268:	defffc04 	addi	sp,sp,-16
   8c26c:	dfc00315 	stw	ra,12(sp)
   8c270:	df000215 	stw	fp,8(sp)
   8c274:	df000204 	addi	fp,sp,8
   8c278:	e13ffe15 	stw	r4,-8(fp)
   8c27c:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   8c280:	e13fff17 	ldw	r4,-4(fp)
   8c284:	01400084 	movi	r5,2
   8c288:	008bf0c0 	call	8bf0c <altera_avalon_fifo_read_status>
   8c28c:	1000031e 	bne	r2,zero,8c29c <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   8c290:	e0bffe17 	ldw	r2,-8(fp)
   8c294:	10800037 	ldwio	r2,0(r2)
   8c298:	00000106 	br	8c2a0 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   8c29c:	0005883a 	mov	r2,zero
}
   8c2a0:	e037883a 	mov	sp,fp
   8c2a4:	dfc00117 	ldw	ra,4(sp)
   8c2a8:	df000017 	ldw	fp,0(sp)
   8c2ac:	dec00204 	addi	sp,sp,8
   8c2b0:	f800283a 	ret

0008c2b4 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   8c2b4:	defffb04 	addi	sp,sp,-20
   8c2b8:	dfc00415 	stw	ra,16(sp)
   8c2bc:	df000315 	stw	fp,12(sp)
   8c2c0:	df000304 	addi	fp,sp,12
   8c2c4:	e13ffd15 	stw	r4,-12(fp)
   8c2c8:	e17ffe15 	stw	r5,-8(fp)
   8c2cc:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   8c2d0:	e13ffe17 	ldw	r4,-8(fp)
   8c2d4:	01400044 	movi	r5,1
   8c2d8:	008bf0c0 	call	8bf0c <altera_avalon_fifo_read_status>
   8c2dc:	1000061e 	bne	r2,zero,8c2f8 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   8c2e0:	e0bffd17 	ldw	r2,-12(fp)
   8c2e4:	10800104 	addi	r2,r2,4
   8c2e8:	e0ffff17 	ldw	r3,-4(fp)
   8c2ec:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   8c2f0:	0005883a 	mov	r2,zero
   8c2f4:	00000106 	br	8c2fc <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   8c2f8:	00bfff04 	movi	r2,-4
    }
}
   8c2fc:	e037883a 	mov	sp,fp
   8c300:	dfc00117 	ldw	ra,4(sp)
   8c304:	df000017 	ldw	fp,0(sp)
   8c308:	dec00204 	addi	sp,sp,8
   8c30c:	f800283a 	ret

0008c310 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   8c310:	defffe04 	addi	sp,sp,-8
   8c314:	df000115 	stw	fp,4(sp)
   8c318:	df000104 	addi	fp,sp,4
   8c31c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   8c320:	e0bfff17 	ldw	r2,-4(fp)
   8c324:	10800104 	addi	r2,r2,4
   8c328:	10800037 	ldwio	r2,0(r2)
}
   8c32c:	e037883a 	mov	sp,fp
   8c330:	df000017 	ldw	fp,0(sp)
   8c334:	dec00104 	addi	sp,sp,4
   8c338:	f800283a 	ret

0008c33c <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   8c33c:	defffe04 	addi	sp,sp,-8
   8c340:	df000115 	stw	fp,4(sp)
   8c344:	df000104 	addi	fp,sp,4
   8c348:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   8c34c:	e0bfff17 	ldw	r2,-4(fp)
   8c350:	10800037 	ldwio	r2,0(r2)
}
   8c354:	e037883a 	mov	sp,fp
   8c358:	df000017 	ldw	fp,0(sp)
   8c35c:	dec00104 	addi	sp,sp,4
   8c360:	f800283a 	ret

0008c364 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8c364:	defffa04 	addi	sp,sp,-24
   8c368:	dfc00515 	stw	ra,20(sp)
   8c36c:	df000415 	stw	fp,16(sp)
   8c370:	df000404 	addi	fp,sp,16
   8c374:	e13ffd15 	stw	r4,-12(fp)
   8c378:	e17ffe15 	stw	r5,-8(fp)
   8c37c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8c380:	e0bffd17 	ldw	r2,-12(fp)
   8c384:	10800017 	ldw	r2,0(r2)
   8c388:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8c38c:	e0bffc17 	ldw	r2,-16(fp)
   8c390:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   8c394:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8c398:	10800217 	ldw	r2,8(r2)
   8c39c:	1809883a 	mov	r4,r3
   8c3a0:	e17ffe17 	ldw	r5,-8(fp)
   8c3a4:	e1bfff17 	ldw	r6,-4(fp)
   8c3a8:	100f883a 	mov	r7,r2
   8c3ac:	008c98c0 	call	8c98c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8c3b0:	e037883a 	mov	sp,fp
   8c3b4:	dfc00117 	ldw	ra,4(sp)
   8c3b8:	df000017 	ldw	fp,0(sp)
   8c3bc:	dec00204 	addi	sp,sp,8
   8c3c0:	f800283a 	ret

0008c3c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8c3c4:	defffa04 	addi	sp,sp,-24
   8c3c8:	dfc00515 	stw	ra,20(sp)
   8c3cc:	df000415 	stw	fp,16(sp)
   8c3d0:	df000404 	addi	fp,sp,16
   8c3d4:	e13ffd15 	stw	r4,-12(fp)
   8c3d8:	e17ffe15 	stw	r5,-8(fp)
   8c3dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8c3e0:	e0bffd17 	ldw	r2,-12(fp)
   8c3e4:	10800017 	ldw	r2,0(r2)
   8c3e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8c3ec:	e0bffc17 	ldw	r2,-16(fp)
   8c3f0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   8c3f4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8c3f8:	10800217 	ldw	r2,8(r2)
   8c3fc:	1809883a 	mov	r4,r3
   8c400:	e17ffe17 	ldw	r5,-8(fp)
   8c404:	e1bfff17 	ldw	r6,-4(fp)
   8c408:	100f883a 	mov	r7,r2
   8c40c:	008cba40 	call	8cba4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8c410:	e037883a 	mov	sp,fp
   8c414:	dfc00117 	ldw	ra,4(sp)
   8c418:	df000017 	ldw	fp,0(sp)
   8c41c:	dec00204 	addi	sp,sp,8
   8c420:	f800283a 	ret

0008c424 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8c424:	defffc04 	addi	sp,sp,-16
   8c428:	dfc00315 	stw	ra,12(sp)
   8c42c:	df000215 	stw	fp,8(sp)
   8c430:	df000204 	addi	fp,sp,8
   8c434:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8c438:	e0bfff17 	ldw	r2,-4(fp)
   8c43c:	10800017 	ldw	r2,0(r2)
   8c440:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8c444:	e0bffe17 	ldw	r2,-8(fp)
   8c448:	10c00a04 	addi	r3,r2,40
   8c44c:	e0bfff17 	ldw	r2,-4(fp)
   8c450:	10800217 	ldw	r2,8(r2)
   8c454:	1809883a 	mov	r4,r3
   8c458:	100b883a 	mov	r5,r2
   8c45c:	008c8300 	call	8c830 <altera_avalon_jtag_uart_close>
}
   8c460:	e037883a 	mov	sp,fp
   8c464:	dfc00117 	ldw	ra,4(sp)
   8c468:	df000017 	ldw	fp,0(sp)
   8c46c:	dec00204 	addi	sp,sp,8
   8c470:	f800283a 	ret

0008c474 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8c474:	defffa04 	addi	sp,sp,-24
   8c478:	dfc00515 	stw	ra,20(sp)
   8c47c:	df000415 	stw	fp,16(sp)
   8c480:	df000404 	addi	fp,sp,16
   8c484:	e13ffd15 	stw	r4,-12(fp)
   8c488:	e17ffe15 	stw	r5,-8(fp)
   8c48c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8c490:	e0bffd17 	ldw	r2,-12(fp)
   8c494:	10800017 	ldw	r2,0(r2)
   8c498:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8c49c:	e0bffc17 	ldw	r2,-16(fp)
   8c4a0:	10800a04 	addi	r2,r2,40
   8c4a4:	1009883a 	mov	r4,r2
   8c4a8:	e17ffe17 	ldw	r5,-8(fp)
   8c4ac:	e1bfff17 	ldw	r6,-4(fp)
   8c4b0:	008c8980 	call	8c898 <altera_avalon_jtag_uart_ioctl>
}
   8c4b4:	e037883a 	mov	sp,fp
   8c4b8:	dfc00117 	ldw	ra,4(sp)
   8c4bc:	df000017 	ldw	fp,0(sp)
   8c4c0:	dec00204 	addi	sp,sp,8
   8c4c4:	f800283a 	ret

0008c4c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8c4c8:	defffa04 	addi	sp,sp,-24
   8c4cc:	dfc00515 	stw	ra,20(sp)
   8c4d0:	df000415 	stw	fp,16(sp)
   8c4d4:	df000404 	addi	fp,sp,16
   8c4d8:	e13ffd15 	stw	r4,-12(fp)
   8c4dc:	e17ffe15 	stw	r5,-8(fp)
   8c4e0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c4e4:	e0bffd17 	ldw	r2,-12(fp)
   8c4e8:	00c00044 	movi	r3,1
   8c4ec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8c4f0:	e0bffd17 	ldw	r2,-12(fp)
   8c4f4:	10800017 	ldw	r2,0(r2)
   8c4f8:	10800104 	addi	r2,r2,4
   8c4fc:	e0fffd17 	ldw	r3,-12(fp)
   8c500:	18c00817 	ldw	r3,32(r3)
   8c504:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8c508:	e0fffe17 	ldw	r3,-8(fp)
   8c50c:	e0bfff17 	ldw	r2,-4(fp)
   8c510:	d8000015 	stw	zero,0(sp)
   8c514:	1809883a 	mov	r4,r3
   8c518:	100b883a 	mov	r5,r2
   8c51c:	01800274 	movhi	r6,9
   8c520:	31b16204 	addi	r6,r6,-14968
   8c524:	e1fffd17 	ldw	r7,-12(fp)
   8c528:	008d34c0 	call	8d34c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8c52c:	e0bffd17 	ldw	r2,-12(fp)
   8c530:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8c534:	e0bffd17 	ldw	r2,-12(fp)
   8c538:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8c53c:	00800274 	movhi	r2,9
   8c540:	108af704 	addi	r2,r2,11228
   8c544:	10800017 	ldw	r2,0(r2)
   8c548:	1809883a 	mov	r4,r3
   8c54c:	100b883a 	mov	r5,r2
   8c550:	01800274 	movhi	r6,9
   8c554:	31b1e304 	addi	r6,r6,-14452
   8c558:	e1fffd17 	ldw	r7,-12(fp)
   8c55c:	008cec40 	call	8cec4 <alt_alarm_start>
   8c560:	1000040e 	bge	r2,zero,8c574 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8c564:	e0bffd17 	ldw	r2,-12(fp)
   8c568:	00e00034 	movhi	r3,32768
   8c56c:	18ffffc4 	addi	r3,r3,-1
   8c570:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8c574:	e037883a 	mov	sp,fp
   8c578:	dfc00117 	ldw	ra,4(sp)
   8c57c:	df000017 	ldw	fp,0(sp)
   8c580:	dec00204 	addi	sp,sp,8
   8c584:	f800283a 	ret

0008c588 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8c588:	defff804 	addi	sp,sp,-32
   8c58c:	df000715 	stw	fp,28(sp)
   8c590:	df000704 	addi	fp,sp,28
   8c594:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8c598:	e0bfff17 	ldw	r2,-4(fp)
   8c59c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   8c5a0:	e0bffb17 	ldw	r2,-20(fp)
   8c5a4:	10800017 	ldw	r2,0(r2)
   8c5a8:	e0bffc15 	stw	r2,-16(fp)
   8c5ac:	00000106 	br	8c5b4 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   8c5b0:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c5b4:	e0bffc17 	ldw	r2,-16(fp)
   8c5b8:	10800104 	addi	r2,r2,4
   8c5bc:	10800037 	ldwio	r2,0(r2)
   8c5c0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8c5c4:	e0bffd17 	ldw	r2,-12(fp)
   8c5c8:	1080c00c 	andi	r2,r2,768
   8c5cc:	10006a26 	beq	r2,zero,8c778 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8c5d0:	e0bffd17 	ldw	r2,-12(fp)
   8c5d4:	1080400c 	andi	r2,r2,256
   8c5d8:	10003326 	beq	r2,zero,8c6a8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8c5dc:	00800074 	movhi	r2,1
   8c5e0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c5e4:	e0bffb17 	ldw	r2,-20(fp)
   8c5e8:	10800a17 	ldw	r2,40(r2)
   8c5ec:	10800044 	addi	r2,r2,1
   8c5f0:	1081ffcc 	andi	r2,r2,2047
   8c5f4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   8c5f8:	e0bffb17 	ldw	r2,-20(fp)
   8c5fc:	10c00b17 	ldw	r3,44(r2)
   8c600:	e0bffe17 	ldw	r2,-8(fp)
   8c604:	18801426 	beq	r3,r2,8c658 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8c608:	e0bffc17 	ldw	r2,-16(fp)
   8c60c:	10800037 	ldwio	r2,0(r2)
   8c610:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8c614:	e0bff917 	ldw	r2,-28(fp)
   8c618:	10a0000c 	andi	r2,r2,32768
   8c61c:	10001026 	beq	r2,zero,8c660 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8c620:	e0bffb17 	ldw	r2,-20(fp)
   8c624:	10800a17 	ldw	r2,40(r2)
   8c628:	e0fff917 	ldw	r3,-28(fp)
   8c62c:	e13ffb17 	ldw	r4,-20(fp)
   8c630:	2085883a 	add	r2,r4,r2
   8c634:	10800e04 	addi	r2,r2,56
   8c638:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c63c:	e0bffb17 	ldw	r2,-20(fp)
   8c640:	10800a17 	ldw	r2,40(r2)
   8c644:	10800044 	addi	r2,r2,1
   8c648:	10c1ffcc 	andi	r3,r2,2047
   8c64c:	e0bffb17 	ldw	r2,-20(fp)
   8c650:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8c654:	003fe306 	br	8c5e4 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   8c658:	0001883a 	nop
   8c65c:	00000106 	br	8c664 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   8c660:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8c664:	e0bff917 	ldw	r2,-28(fp)
   8c668:	10bfffec 	andhi	r2,r2,65535
   8c66c:	10000e26 	beq	r2,zero,8c6a8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c670:	e0bffb17 	ldw	r2,-20(fp)
   8c674:	10c00817 	ldw	r3,32(r2)
   8c678:	00bfff84 	movi	r2,-2
   8c67c:	1886703a 	and	r3,r3,r2
   8c680:	e0bffb17 	ldw	r2,-20(fp)
   8c684:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8c688:	e0bffc17 	ldw	r2,-16(fp)
   8c68c:	10800104 	addi	r2,r2,4
   8c690:	e0fffb17 	ldw	r3,-20(fp)
   8c694:	18c00817 	ldw	r3,32(r3)
   8c698:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c69c:	e0bffc17 	ldw	r2,-16(fp)
   8c6a0:	10800104 	addi	r2,r2,4
   8c6a4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8c6a8:	e0bffd17 	ldw	r2,-12(fp)
   8c6ac:	1080800c 	andi	r2,r2,512
   8c6b0:	103fbf26 	beq	r2,zero,8c5b0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8c6b4:	e0bffd17 	ldw	r2,-12(fp)
   8c6b8:	1004d43a 	srli	r2,r2,16
   8c6bc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8c6c0:	00001406 	br	8c714 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8c6c4:	e0bffc17 	ldw	r2,-16(fp)
   8c6c8:	e0fffb17 	ldw	r3,-20(fp)
   8c6cc:	18c00d17 	ldw	r3,52(r3)
   8c6d0:	e13ffb17 	ldw	r4,-20(fp)
   8c6d4:	20c7883a 	add	r3,r4,r3
   8c6d8:	18c20e04 	addi	r3,r3,2104
   8c6dc:	18c00003 	ldbu	r3,0(r3)
   8c6e0:	18c03fcc 	andi	r3,r3,255
   8c6e4:	18c0201c 	xori	r3,r3,128
   8c6e8:	18ffe004 	addi	r3,r3,-128
   8c6ec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c6f0:	e0bffb17 	ldw	r2,-20(fp)
   8c6f4:	10800d17 	ldw	r2,52(r2)
   8c6f8:	10800044 	addi	r2,r2,1
   8c6fc:	10c1ffcc 	andi	r3,r2,2047
   8c700:	e0bffb17 	ldw	r2,-20(fp)
   8c704:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8c708:	e0bffa17 	ldw	r2,-24(fp)
   8c70c:	10bfffc4 	addi	r2,r2,-1
   8c710:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8c714:	e0bffa17 	ldw	r2,-24(fp)
   8c718:	10000526 	beq	r2,zero,8c730 <altera_avalon_jtag_uart_irq+0x1a8>
   8c71c:	e0bffb17 	ldw	r2,-20(fp)
   8c720:	10c00d17 	ldw	r3,52(r2)
   8c724:	e0bffb17 	ldw	r2,-20(fp)
   8c728:	10800c17 	ldw	r2,48(r2)
   8c72c:	18bfe51e 	bne	r3,r2,8c6c4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8c730:	e0bffa17 	ldw	r2,-24(fp)
   8c734:	103f9e26 	beq	r2,zero,8c5b0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8c738:	e0bffb17 	ldw	r2,-20(fp)
   8c73c:	10c00817 	ldw	r3,32(r2)
   8c740:	00bfff44 	movi	r2,-3
   8c744:	1886703a 	and	r3,r3,r2
   8c748:	e0bffb17 	ldw	r2,-20(fp)
   8c74c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c750:	e0bffb17 	ldw	r2,-20(fp)
   8c754:	10800017 	ldw	r2,0(r2)
   8c758:	10800104 	addi	r2,r2,4
   8c75c:	e0fffb17 	ldw	r3,-20(fp)
   8c760:	18c00817 	ldw	r3,32(r3)
   8c764:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c768:	e0bffc17 	ldw	r2,-16(fp)
   8c76c:	10800104 	addi	r2,r2,4
   8c770:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8c774:	003f8e06 	br	8c5b0 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   8c778:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   8c77c:	e037883a 	mov	sp,fp
   8c780:	df000017 	ldw	fp,0(sp)
   8c784:	dec00104 	addi	sp,sp,4
   8c788:	f800283a 	ret

0008c78c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8c78c:	defffc04 	addi	sp,sp,-16
   8c790:	df000315 	stw	fp,12(sp)
   8c794:	df000304 	addi	fp,sp,12
   8c798:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8c79c:	e0bfff17 	ldw	r2,-4(fp)
   8c7a0:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8c7a4:	e0bffd17 	ldw	r2,-12(fp)
   8c7a8:	10800017 	ldw	r2,0(r2)
   8c7ac:	10800104 	addi	r2,r2,4
   8c7b0:	10800037 	ldwio	r2,0(r2)
   8c7b4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8c7b8:	e0bffe17 	ldw	r2,-8(fp)
   8c7bc:	1081000c 	andi	r2,r2,1024
   8c7c0:	10000a26 	beq	r2,zero,8c7ec <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8c7c4:	e0bffd17 	ldw	r2,-12(fp)
   8c7c8:	10800017 	ldw	r2,0(r2)
   8c7cc:	10800104 	addi	r2,r2,4
   8c7d0:	e0fffd17 	ldw	r3,-12(fp)
   8c7d4:	18c00817 	ldw	r3,32(r3)
   8c7d8:	18c10014 	ori	r3,r3,1024
   8c7dc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8c7e0:	e0bffd17 	ldw	r2,-12(fp)
   8c7e4:	10000915 	stw	zero,36(r2)
   8c7e8:	00000a06 	br	8c814 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8c7ec:	e0bffd17 	ldw	r2,-12(fp)
   8c7f0:	10800917 	ldw	r2,36(r2)
   8c7f4:	00e00034 	movhi	r3,32768
   8c7f8:	18ffff04 	addi	r3,r3,-4
   8c7fc:	18800536 	bltu	r3,r2,8c814 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   8c800:	e0bffd17 	ldw	r2,-12(fp)
   8c804:	10800917 	ldw	r2,36(r2)
   8c808:	10c00044 	addi	r3,r2,1
   8c80c:	e0bffd17 	ldw	r2,-12(fp)
   8c810:	10c00915 	stw	r3,36(r2)
   8c814:	00800274 	movhi	r2,9
   8c818:	108af704 	addi	r2,r2,11228
   8c81c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8c820:	e037883a 	mov	sp,fp
   8c824:	df000017 	ldw	fp,0(sp)
   8c828:	dec00104 	addi	sp,sp,4
   8c82c:	f800283a 	ret

0008c830 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8c830:	defffd04 	addi	sp,sp,-12
   8c834:	df000215 	stw	fp,8(sp)
   8c838:	df000204 	addi	fp,sp,8
   8c83c:	e13ffe15 	stw	r4,-8(fp)
   8c840:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8c844:	00000506 	br	8c85c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8c848:	e0bfff17 	ldw	r2,-4(fp)
   8c84c:	1090000c 	andi	r2,r2,16384
   8c850:	10000226 	beq	r2,zero,8c85c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8c854:	00bffd44 	movi	r2,-11
   8c858:	00000b06 	br	8c888 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8c85c:	e0bffe17 	ldw	r2,-8(fp)
   8c860:	10c00d17 	ldw	r3,52(r2)
   8c864:	e0bffe17 	ldw	r2,-8(fp)
   8c868:	10800c17 	ldw	r2,48(r2)
   8c86c:	18800526 	beq	r3,r2,8c884 <altera_avalon_jtag_uart_close+0x54>
   8c870:	e0bffe17 	ldw	r2,-8(fp)
   8c874:	10c00917 	ldw	r3,36(r2)
   8c878:	e0bffe17 	ldw	r2,-8(fp)
   8c87c:	10800117 	ldw	r2,4(r2)
   8c880:	18bff136 	bltu	r3,r2,8c848 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8c884:	0005883a 	mov	r2,zero
}
   8c888:	e037883a 	mov	sp,fp
   8c88c:	df000017 	ldw	fp,0(sp)
   8c890:	dec00104 	addi	sp,sp,4
   8c894:	f800283a 	ret

0008c898 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8c898:	defffa04 	addi	sp,sp,-24
   8c89c:	df000515 	stw	fp,20(sp)
   8c8a0:	df000504 	addi	fp,sp,20
   8c8a4:	e13ffd15 	stw	r4,-12(fp)
   8c8a8:	e17ffe15 	stw	r5,-8(fp)
   8c8ac:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   8c8b0:	00bff9c4 	movi	r2,-25
   8c8b4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   8c8b8:	e0bffe17 	ldw	r2,-8(fp)
   8c8bc:	10da8060 	cmpeqi	r3,r2,27137
   8c8c0:	1800031e 	bne	r3,zero,8c8d0 <altera_avalon_jtag_uart_ioctl+0x38>
   8c8c4:	109a80a0 	cmpeqi	r2,r2,27138
   8c8c8:	1000181e 	bne	r2,zero,8c92c <altera_avalon_jtag_uart_ioctl+0x94>
   8c8cc:	00002606 	br	8c968 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8c8d0:	e0bffd17 	ldw	r2,-12(fp)
   8c8d4:	10c00117 	ldw	r3,4(r2)
   8c8d8:	00a00034 	movhi	r2,32768
   8c8dc:	10bfffc4 	addi	r2,r2,-1
   8c8e0:	18802226 	beq	r3,r2,8c96c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   8c8e4:	e0bfff17 	ldw	r2,-4(fp)
   8c8e8:	10800017 	ldw	r2,0(r2)
   8c8ec:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8c8f0:	e0bffc17 	ldw	r2,-16(fp)
   8c8f4:	10800090 	cmplti	r2,r2,2
   8c8f8:	1000061e 	bne	r2,zero,8c914 <altera_avalon_jtag_uart_ioctl+0x7c>
   8c8fc:	e0fffc17 	ldw	r3,-16(fp)
   8c900:	00a00034 	movhi	r2,32768
   8c904:	10bfffc4 	addi	r2,r2,-1
   8c908:	18800226 	beq	r3,r2,8c914 <altera_avalon_jtag_uart_ioctl+0x7c>
   8c90c:	e0bffc17 	ldw	r2,-16(fp)
   8c910:	00000206 	br	8c91c <altera_avalon_jtag_uart_ioctl+0x84>
   8c914:	00a00034 	movhi	r2,32768
   8c918:	10bfff84 	addi	r2,r2,-2
   8c91c:	e0fffd17 	ldw	r3,-12(fp)
   8c920:	18800115 	stw	r2,4(r3)
      rc = 0;
   8c924:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8c928:	00001006 	br	8c96c <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8c92c:	e0bffd17 	ldw	r2,-12(fp)
   8c930:	10c00117 	ldw	r3,4(r2)
   8c934:	00a00034 	movhi	r2,32768
   8c938:	10bfffc4 	addi	r2,r2,-1
   8c93c:	18800d26 	beq	r3,r2,8c974 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8c940:	e0bffd17 	ldw	r2,-12(fp)
   8c944:	10c00917 	ldw	r3,36(r2)
   8c948:	e0bffd17 	ldw	r2,-12(fp)
   8c94c:	10800117 	ldw	r2,4(r2)
   8c950:	1885803a 	cmpltu	r2,r3,r2
   8c954:	10c03fcc 	andi	r3,r2,255
   8c958:	e0bfff17 	ldw	r2,-4(fp)
   8c95c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   8c960:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8c964:	00000306 	br	8c974 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   8c968:	00000306 	br	8c978 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   8c96c:	0001883a 	nop
   8c970:	00000106 	br	8c978 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   8c974:	0001883a 	nop

  default:
    break;
  }

  return rc;
   8c978:	e0bffb17 	ldw	r2,-20(fp)
}
   8c97c:	e037883a 	mov	sp,fp
   8c980:	df000017 	ldw	fp,0(sp)
   8c984:	dec00104 	addi	sp,sp,4
   8c988:	f800283a 	ret

0008c98c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8c98c:	defff304 	addi	sp,sp,-52
   8c990:	dfc00c15 	stw	ra,48(sp)
   8c994:	df000b15 	stw	fp,44(sp)
   8c998:	df000b04 	addi	fp,sp,44
   8c99c:	e13ffc15 	stw	r4,-16(fp)
   8c9a0:	e17ffd15 	stw	r5,-12(fp)
   8c9a4:	e1bffe15 	stw	r6,-8(fp)
   8c9a8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8c9ac:	e0bffd17 	ldw	r2,-12(fp)
   8c9b0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8c9b4:	00004706 	br	8cad4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8c9b8:	e0bffc17 	ldw	r2,-16(fp)
   8c9bc:	10800a17 	ldw	r2,40(r2)
   8c9c0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8c9c4:	e0bffc17 	ldw	r2,-16(fp)
   8c9c8:	10800b17 	ldw	r2,44(r2)
   8c9cc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   8c9d0:	e0fff717 	ldw	r3,-36(fp)
   8c9d4:	e0bff817 	ldw	r2,-32(fp)
   8c9d8:	18800536 	bltu	r3,r2,8c9f0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8c9dc:	e0fff717 	ldw	r3,-36(fp)
   8c9e0:	e0bff817 	ldw	r2,-32(fp)
   8c9e4:	1885c83a 	sub	r2,r3,r2
   8c9e8:	e0bff615 	stw	r2,-40(fp)
   8c9ec:	00000406 	br	8ca00 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8c9f0:	00c20004 	movi	r3,2048
   8c9f4:	e0bff817 	ldw	r2,-32(fp)
   8c9f8:	1885c83a 	sub	r2,r3,r2
   8c9fc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8ca00:	e0bff617 	ldw	r2,-40(fp)
   8ca04:	10001e26 	beq	r2,zero,8ca80 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   8ca08:	e0fffe17 	ldw	r3,-8(fp)
   8ca0c:	e0bff617 	ldw	r2,-40(fp)
   8ca10:	1880022e 	bgeu	r3,r2,8ca1c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   8ca14:	e0bffe17 	ldw	r2,-8(fp)
   8ca18:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8ca1c:	e0bff817 	ldw	r2,-32(fp)
   8ca20:	10800e04 	addi	r2,r2,56
   8ca24:	e0fffc17 	ldw	r3,-16(fp)
   8ca28:	1885883a 	add	r2,r3,r2
   8ca2c:	e13ff517 	ldw	r4,-44(fp)
   8ca30:	100b883a 	mov	r5,r2
   8ca34:	e1bff617 	ldw	r6,-40(fp)
   8ca38:	00871380 	call	87138 <memcpy>
      ptr   += n;
   8ca3c:	e0fff517 	ldw	r3,-44(fp)
   8ca40:	e0bff617 	ldw	r2,-40(fp)
   8ca44:	1885883a 	add	r2,r3,r2
   8ca48:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   8ca4c:	e0fffe17 	ldw	r3,-8(fp)
   8ca50:	e0bff617 	ldw	r2,-40(fp)
   8ca54:	1885c83a 	sub	r2,r3,r2
   8ca58:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ca5c:	e0fff817 	ldw	r3,-32(fp)
   8ca60:	e0bff617 	ldw	r2,-40(fp)
   8ca64:	1885883a 	add	r2,r3,r2
   8ca68:	10c1ffcc 	andi	r3,r2,2047
   8ca6c:	e0bffc17 	ldw	r2,-16(fp)
   8ca70:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8ca74:	e0bffe17 	ldw	r2,-8(fp)
   8ca78:	00bfcf16 	blt	zero,r2,8c9b8 <altera_avalon_jtag_uart_read+0x2c>
   8ca7c:	00000106 	br	8ca84 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   8ca80:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   8ca84:	e0fff517 	ldw	r3,-44(fp)
   8ca88:	e0bffd17 	ldw	r2,-12(fp)
   8ca8c:	1880141e 	bne	r3,r2,8cae0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8ca90:	e0bfff17 	ldw	r2,-4(fp)
   8ca94:	1090000c 	andi	r2,r2,16384
   8ca98:	1000131e 	bne	r2,zero,8cae8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8ca9c:	0001883a 	nop
   8caa0:	e0bffc17 	ldw	r2,-16(fp)
   8caa4:	10c00a17 	ldw	r3,40(r2)
   8caa8:	e0bff717 	ldw	r2,-36(fp)
   8caac:	1880051e 	bne	r3,r2,8cac4 <altera_avalon_jtag_uart_read+0x138>
   8cab0:	e0bffc17 	ldw	r2,-16(fp)
   8cab4:	10c00917 	ldw	r3,36(r2)
   8cab8:	e0bffc17 	ldw	r2,-16(fp)
   8cabc:	10800117 	ldw	r2,4(r2)
   8cac0:	18bff736 	bltu	r3,r2,8caa0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8cac4:	e0bffc17 	ldw	r2,-16(fp)
   8cac8:	10c00a17 	ldw	r3,40(r2)
   8cacc:	e0bff717 	ldw	r2,-36(fp)
   8cad0:	18800726 	beq	r3,r2,8caf0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8cad4:	e0bffe17 	ldw	r2,-8(fp)
   8cad8:	00bfb716 	blt	zero,r2,8c9b8 <altera_avalon_jtag_uart_read+0x2c>
   8cadc:	00000506 	br	8caf4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   8cae0:	0001883a 	nop
   8cae4:	00000306 	br	8caf4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   8cae8:	0001883a 	nop
   8caec:	00000106 	br	8caf4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   8caf0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8caf4:	e0fff517 	ldw	r3,-44(fp)
   8caf8:	e0bffd17 	ldw	r2,-12(fp)
   8cafc:	18801726 	beq	r3,r2,8cb5c <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cb00:	0005303a 	rdctl	r2,status
   8cb04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cb08:	e0fffa17 	ldw	r3,-24(fp)
   8cb0c:	00bfff84 	movi	r2,-2
   8cb10:	1884703a 	and	r2,r3,r2
   8cb14:	1001703a 	wrctl	status,r2
  
  return context;
   8cb18:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8cb1c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8cb20:	e0bffc17 	ldw	r2,-16(fp)
   8cb24:	10800817 	ldw	r2,32(r2)
   8cb28:	10c00054 	ori	r3,r2,1
   8cb2c:	e0bffc17 	ldw	r2,-16(fp)
   8cb30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8cb34:	e0bffc17 	ldw	r2,-16(fp)
   8cb38:	10800017 	ldw	r2,0(r2)
   8cb3c:	10800104 	addi	r2,r2,4
   8cb40:	e0fffc17 	ldw	r3,-16(fp)
   8cb44:	18c00817 	ldw	r3,32(r3)
   8cb48:	10c00035 	stwio	r3,0(r2)
   8cb4c:	e0bff917 	ldw	r2,-28(fp)
   8cb50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cb54:	e0bffb17 	ldw	r2,-20(fp)
   8cb58:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8cb5c:	e0fff517 	ldw	r3,-44(fp)
   8cb60:	e0bffd17 	ldw	r2,-12(fp)
   8cb64:	18800426 	beq	r3,r2,8cb78 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   8cb68:	e0fff517 	ldw	r3,-44(fp)
   8cb6c:	e0bffd17 	ldw	r2,-12(fp)
   8cb70:	1885c83a 	sub	r2,r3,r2
   8cb74:	00000606 	br	8cb90 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   8cb78:	e0bfff17 	ldw	r2,-4(fp)
   8cb7c:	1090000c 	andi	r2,r2,16384
   8cb80:	10000226 	beq	r2,zero,8cb8c <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   8cb84:	00bffd44 	movi	r2,-11
   8cb88:	00000106 	br	8cb90 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   8cb8c:	00bffec4 	movi	r2,-5
}
   8cb90:	e037883a 	mov	sp,fp
   8cb94:	dfc00117 	ldw	ra,4(sp)
   8cb98:	df000017 	ldw	fp,0(sp)
   8cb9c:	dec00204 	addi	sp,sp,8
   8cba0:	f800283a 	ret

0008cba4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8cba4:	defff304 	addi	sp,sp,-52
   8cba8:	dfc00c15 	stw	ra,48(sp)
   8cbac:	df000b15 	stw	fp,44(sp)
   8cbb0:	df000b04 	addi	fp,sp,44
   8cbb4:	e13ffc15 	stw	r4,-16(fp)
   8cbb8:	e17ffd15 	stw	r5,-12(fp)
   8cbbc:	e1bffe15 	stw	r6,-8(fp)
   8cbc0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8cbc4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8cbc8:	e0bffd17 	ldw	r2,-12(fp)
   8cbcc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8cbd0:	00003706 	br	8ccb0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8cbd4:	e0bffc17 	ldw	r2,-16(fp)
   8cbd8:	10800c17 	ldw	r2,48(r2)
   8cbdc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   8cbe0:	e0bffc17 	ldw	r2,-16(fp)
   8cbe4:	10800d17 	ldw	r2,52(r2)
   8cbe8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   8cbec:	e0fff817 	ldw	r3,-32(fp)
   8cbf0:	e0bff517 	ldw	r2,-44(fp)
   8cbf4:	1880062e 	bgeu	r3,r2,8cc10 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8cbf8:	e0fff517 	ldw	r3,-44(fp)
   8cbfc:	e0bff817 	ldw	r2,-32(fp)
   8cc00:	1885c83a 	sub	r2,r3,r2
   8cc04:	10bfffc4 	addi	r2,r2,-1
   8cc08:	e0bff615 	stw	r2,-40(fp)
   8cc0c:	00000b06 	br	8cc3c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   8cc10:	e0bff517 	ldw	r2,-44(fp)
   8cc14:	10000526 	beq	r2,zero,8cc2c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8cc18:	00c20004 	movi	r3,2048
   8cc1c:	e0bff817 	ldw	r2,-32(fp)
   8cc20:	1885c83a 	sub	r2,r3,r2
   8cc24:	e0bff615 	stw	r2,-40(fp)
   8cc28:	00000406 	br	8cc3c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8cc2c:	00c1ffc4 	movi	r3,2047
   8cc30:	e0bff817 	ldw	r2,-32(fp)
   8cc34:	1885c83a 	sub	r2,r3,r2
   8cc38:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8cc3c:	e0bff617 	ldw	r2,-40(fp)
   8cc40:	10001e26 	beq	r2,zero,8ccbc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   8cc44:	e0fffe17 	ldw	r3,-8(fp)
   8cc48:	e0bff617 	ldw	r2,-40(fp)
   8cc4c:	1880022e 	bgeu	r3,r2,8cc58 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   8cc50:	e0bffe17 	ldw	r2,-8(fp)
   8cc54:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8cc58:	e0bff817 	ldw	r2,-32(fp)
   8cc5c:	10820e04 	addi	r2,r2,2104
   8cc60:	e0fffc17 	ldw	r3,-16(fp)
   8cc64:	1885883a 	add	r2,r3,r2
   8cc68:	1009883a 	mov	r4,r2
   8cc6c:	e17ffd17 	ldw	r5,-12(fp)
   8cc70:	e1bff617 	ldw	r6,-40(fp)
   8cc74:	00871380 	call	87138 <memcpy>
      ptr   += n;
   8cc78:	e0fffd17 	ldw	r3,-12(fp)
   8cc7c:	e0bff617 	ldw	r2,-40(fp)
   8cc80:	1885883a 	add	r2,r3,r2
   8cc84:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   8cc88:	e0fffe17 	ldw	r3,-8(fp)
   8cc8c:	e0bff617 	ldw	r2,-40(fp)
   8cc90:	1885c83a 	sub	r2,r3,r2
   8cc94:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8cc98:	e0fff817 	ldw	r3,-32(fp)
   8cc9c:	e0bff617 	ldw	r2,-40(fp)
   8cca0:	1885883a 	add	r2,r3,r2
   8cca4:	10c1ffcc 	andi	r3,r2,2047
   8cca8:	e0bffc17 	ldw	r2,-16(fp)
   8ccac:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8ccb0:	e0bffe17 	ldw	r2,-8(fp)
   8ccb4:	00bfc716 	blt	zero,r2,8cbd4 <altera_avalon_jtag_uart_write+0x30>
   8ccb8:	00000106 	br	8ccc0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   8ccbc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ccc0:	0005303a 	rdctl	r2,status
   8ccc4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ccc8:	e0fffa17 	ldw	r3,-24(fp)
   8cccc:	00bfff84 	movi	r2,-2
   8ccd0:	1884703a 	and	r2,r3,r2
   8ccd4:	1001703a 	wrctl	status,r2
  
  return context;
   8ccd8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8ccdc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8cce0:	e0bffc17 	ldw	r2,-16(fp)
   8cce4:	10800817 	ldw	r2,32(r2)
   8cce8:	10c00094 	ori	r3,r2,2
   8ccec:	e0bffc17 	ldw	r2,-16(fp)
   8ccf0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8ccf4:	e0bffc17 	ldw	r2,-16(fp)
   8ccf8:	10800017 	ldw	r2,0(r2)
   8ccfc:	10800104 	addi	r2,r2,4
   8cd00:	e0fffc17 	ldw	r3,-16(fp)
   8cd04:	18c00817 	ldw	r3,32(r3)
   8cd08:	10c00035 	stwio	r3,0(r2)
   8cd0c:	e0bff917 	ldw	r2,-28(fp)
   8cd10:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cd14:	e0bffb17 	ldw	r2,-20(fp)
   8cd18:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8cd1c:	e0bffe17 	ldw	r2,-8(fp)
   8cd20:	0080110e 	bge	zero,r2,8cd68 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   8cd24:	e0bfff17 	ldw	r2,-4(fp)
   8cd28:	1090000c 	andi	r2,r2,16384
   8cd2c:	1000111e 	bne	r2,zero,8cd74 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8cd30:	0001883a 	nop
   8cd34:	e0bffc17 	ldw	r2,-16(fp)
   8cd38:	10c00d17 	ldw	r3,52(r2)
   8cd3c:	e0bff517 	ldw	r2,-44(fp)
   8cd40:	1880051e 	bne	r3,r2,8cd58 <altera_avalon_jtag_uart_write+0x1b4>
   8cd44:	e0bffc17 	ldw	r2,-16(fp)
   8cd48:	10c00917 	ldw	r3,36(r2)
   8cd4c:	e0bffc17 	ldw	r2,-16(fp)
   8cd50:	10800117 	ldw	r2,4(r2)
   8cd54:	18bff736 	bltu	r3,r2,8cd34 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8cd58:	e0bffc17 	ldw	r2,-16(fp)
   8cd5c:	10c00d17 	ldw	r3,52(r2)
   8cd60:	e0bff517 	ldw	r2,-44(fp)
   8cd64:	18800526 	beq	r3,r2,8cd7c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   8cd68:	e0bffe17 	ldw	r2,-8(fp)
   8cd6c:	00bfd016 	blt	zero,r2,8ccb0 <altera_avalon_jtag_uart_write+0x10c>
   8cd70:	00000306 	br	8cd80 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   8cd74:	0001883a 	nop
   8cd78:	00000106 	br	8cd80 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   8cd7c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8cd80:	e0fffd17 	ldw	r3,-12(fp)
   8cd84:	e0bff717 	ldw	r2,-36(fp)
   8cd88:	18800426 	beq	r3,r2,8cd9c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   8cd8c:	e0fffd17 	ldw	r3,-12(fp)
   8cd90:	e0bff717 	ldw	r2,-36(fp)
   8cd94:	1885c83a 	sub	r2,r3,r2
   8cd98:	00000606 	br	8cdb4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   8cd9c:	e0bfff17 	ldw	r2,-4(fp)
   8cda0:	1090000c 	andi	r2,r2,16384
   8cda4:	10000226 	beq	r2,zero,8cdb0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   8cda8:	00bffd44 	movi	r2,-11
   8cdac:	00000106 	br	8cdb4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8cdb0:	00bffec4 	movi	r2,-5
}
   8cdb4:	e037883a 	mov	sp,fp
   8cdb8:	dfc00117 	ldw	ra,4(sp)
   8cdbc:	df000017 	ldw	fp,0(sp)
   8cdc0:	dec00204 	addi	sp,sp,8
   8cdc4:	f800283a 	ret

0008cdc8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   8cdc8:	defffa04 	addi	sp,sp,-24
   8cdcc:	dfc00515 	stw	ra,20(sp)
   8cdd0:	df000415 	stw	fp,16(sp)
   8cdd4:	df000404 	addi	fp,sp,16
   8cdd8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   8cddc:	0007883a 	mov	r3,zero
   8cde0:	e0bfff17 	ldw	r2,-4(fp)
   8cde4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   8cde8:	e0bfff17 	ldw	r2,-4(fp)
   8cdec:	10800104 	addi	r2,r2,4
   8cdf0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cdf4:	0005303a 	rdctl	r2,status
   8cdf8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cdfc:	e0fffd17 	ldw	r3,-12(fp)
   8ce00:	00bfff84 	movi	r2,-2
   8ce04:	1884703a 	and	r2,r3,r2
   8ce08:	1001703a 	wrctl	status,r2
  
  return context;
   8ce0c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   8ce10:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   8ce14:	008da9c0 	call	8da9c <alt_tick>
   8ce18:	e0bffc17 	ldw	r2,-16(fp)
   8ce1c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ce20:	e0bffe17 	ldw	r2,-8(fp)
   8ce24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   8ce28:	e037883a 	mov	sp,fp
   8ce2c:	dfc00117 	ldw	ra,4(sp)
   8ce30:	df000017 	ldw	fp,0(sp)
   8ce34:	dec00204 	addi	sp,sp,8
   8ce38:	f800283a 	ret

0008ce3c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   8ce3c:	defff804 	addi	sp,sp,-32
   8ce40:	dfc00715 	stw	ra,28(sp)
   8ce44:	df000615 	stw	fp,24(sp)
   8ce48:	df000604 	addi	fp,sp,24
   8ce4c:	e13ffc15 	stw	r4,-16(fp)
   8ce50:	e17ffd15 	stw	r5,-12(fp)
   8ce54:	e1bffe15 	stw	r6,-8(fp)
   8ce58:	e1ffff15 	stw	r7,-4(fp)
   8ce5c:	e0bfff17 	ldw	r2,-4(fp)
   8ce60:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   8ce64:	00800274 	movhi	r2,9
   8ce68:	108af704 	addi	r2,r2,11228
   8ce6c:	10800017 	ldw	r2,0(r2)
   8ce70:	1000041e 	bne	r2,zero,8ce84 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   8ce74:	00800274 	movhi	r2,9
   8ce78:	108af704 	addi	r2,r2,11228
   8ce7c:	e0fffb17 	ldw	r3,-20(fp)
   8ce80:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   8ce84:	e0bffc17 	ldw	r2,-16(fp)
   8ce88:	10800104 	addi	r2,r2,4
   8ce8c:	00c001c4 	movi	r3,7
   8ce90:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   8ce94:	d8000015 	stw	zero,0(sp)
   8ce98:	e13ffd17 	ldw	r4,-12(fp)
   8ce9c:	e17ffe17 	ldw	r5,-8(fp)
   8cea0:	01800274 	movhi	r6,9
   8cea4:	31b37204 	addi	r6,r6,-12856
   8cea8:	e1fffc17 	ldw	r7,-16(fp)
   8ceac:	008d34c0 	call	8d34c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   8ceb0:	e037883a 	mov	sp,fp
   8ceb4:	dfc00117 	ldw	ra,4(sp)
   8ceb8:	df000017 	ldw	fp,0(sp)
   8cebc:	dec00204 	addi	sp,sp,8
   8cec0:	f800283a 	ret

0008cec4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8cec4:	defff504 	addi	sp,sp,-44
   8cec8:	df000a15 	stw	fp,40(sp)
   8cecc:	df000a04 	addi	fp,sp,40
   8ced0:	e13ffc15 	stw	r4,-16(fp)
   8ced4:	e17ffd15 	stw	r5,-12(fp)
   8ced8:	e1bffe15 	stw	r6,-8(fp)
   8cedc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8cee0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8cee4:	00800274 	movhi	r2,9
   8cee8:	108af704 	addi	r2,r2,11228
   8ceec:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8cef0:	10003f26 	beq	r2,zero,8cff0 <alt_alarm_start+0x12c>
  {
    if (alarm)
   8cef4:	e0bffc17 	ldw	r2,-16(fp)
   8cef8:	10003b26 	beq	r2,zero,8cfe8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   8cefc:	e0bffc17 	ldw	r2,-16(fp)
   8cf00:	e0fffe17 	ldw	r3,-8(fp)
   8cf04:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   8cf08:	e0bffc17 	ldw	r2,-16(fp)
   8cf0c:	e0ffff17 	ldw	r3,-4(fp)
   8cf10:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cf14:	0005303a 	rdctl	r2,status
   8cf18:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cf1c:	e0fff817 	ldw	r3,-32(fp)
   8cf20:	00bfff84 	movi	r2,-2
   8cf24:	1884703a 	and	r2,r3,r2
   8cf28:	1001703a 	wrctl	status,r2
  
  return context;
   8cf2c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8cf30:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8cf34:	00800274 	movhi	r2,9
   8cf38:	108af804 	addi	r2,r2,11232
   8cf3c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8cf40:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8cf44:	e0fffd17 	ldw	r3,-12(fp)
   8cf48:	e0bff617 	ldw	r2,-40(fp)
   8cf4c:	1885883a 	add	r2,r3,r2
   8cf50:	10c00044 	addi	r3,r2,1
   8cf54:	e0bffc17 	ldw	r2,-16(fp)
   8cf58:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8cf5c:	e0bffc17 	ldw	r2,-16(fp)
   8cf60:	10c00217 	ldw	r3,8(r2)
   8cf64:	e0bff617 	ldw	r2,-40(fp)
   8cf68:	1880042e 	bgeu	r3,r2,8cf7c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   8cf6c:	e0bffc17 	ldw	r2,-16(fp)
   8cf70:	00c00044 	movi	r3,1
   8cf74:	10c00405 	stb	r3,16(r2)
   8cf78:	00000206 	br	8cf84 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   8cf7c:	e0bffc17 	ldw	r2,-16(fp)
   8cf80:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8cf84:	e0bffc17 	ldw	r2,-16(fp)
   8cf88:	00c00274 	movhi	r3,9
   8cf8c:	18c24804 	addi	r3,r3,2336
   8cf90:	e0fff915 	stw	r3,-28(fp)
   8cf94:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8cf98:	e0bffa17 	ldw	r2,-24(fp)
   8cf9c:	e0fff917 	ldw	r3,-28(fp)
   8cfa0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8cfa4:	e0bff917 	ldw	r2,-28(fp)
   8cfa8:	10c00017 	ldw	r3,0(r2)
   8cfac:	e0bffa17 	ldw	r2,-24(fp)
   8cfb0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8cfb4:	e0bff917 	ldw	r2,-28(fp)
   8cfb8:	10800017 	ldw	r2,0(r2)
   8cfbc:	e0fffa17 	ldw	r3,-24(fp)
   8cfc0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8cfc4:	e0bff917 	ldw	r2,-28(fp)
   8cfc8:	e0fffa17 	ldw	r3,-24(fp)
   8cfcc:	10c00015 	stw	r3,0(r2)
   8cfd0:	e0bff717 	ldw	r2,-36(fp)
   8cfd4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cfd8:	e0bffb17 	ldw	r2,-20(fp)
   8cfdc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8cfe0:	0005883a 	mov	r2,zero
   8cfe4:	00000306 	br	8cff4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   8cfe8:	00bffa84 	movi	r2,-22
   8cfec:	00000106 	br	8cff4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   8cff0:	00bfde84 	movi	r2,-134
  }
}
   8cff4:	e037883a 	mov	sp,fp
   8cff8:	df000017 	ldw	fp,0(sp)
   8cffc:	dec00104 	addi	sp,sp,4
   8d000:	f800283a 	ret

0008d004 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   8d004:	defffa04 	addi	sp,sp,-24
   8d008:	dfc00515 	stw	ra,20(sp)
   8d00c:	df000415 	stw	fp,16(sp)
   8d010:	df000404 	addi	fp,sp,16
   8d014:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   8d018:	008000c4 	movi	r2,3
   8d01c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   8d020:	e13ffd17 	ldw	r4,-12(fp)
   8d024:	014003f4 	movhi	r5,15
   8d028:	29509004 	addi	r5,r5,16960
   8d02c:	0081c900 	call	81c90 <__mulsi3>
   8d030:	01017db4 	movhi	r4,1526
   8d034:	21384004 	addi	r4,r4,-7936
   8d038:	100b883a 	mov	r5,r2
   8d03c:	008ad400 	call	8ad40 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   8d040:	01200034 	movhi	r4,32768
   8d044:	213fffc4 	addi	r4,r4,-1
   8d048:	100b883a 	mov	r5,r2
   8d04c:	008ad400 	call	8ad40 <__udivsi3>
   8d050:	e13fff17 	ldw	r4,-4(fp)
   8d054:	100b883a 	mov	r5,r2
   8d058:	008ad400 	call	8ad40 <__udivsi3>
   8d05c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   8d060:	e0bffe17 	ldw	r2,-8(fp)
   8d064:	10002926 	beq	r2,zero,8d10c <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   8d068:	e03ffc15 	stw	zero,-16(fp)
   8d06c:	00001606 	br	8d0c8 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   8d070:	00a00034 	movhi	r2,32768
   8d074:	10bfffc4 	addi	r2,r2,-1
   8d078:	10bfffc4 	addi	r2,r2,-1
   8d07c:	103ffe1e 	bne	r2,zero,8d078 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   8d080:	e13ffd17 	ldw	r4,-12(fp)
   8d084:	014003f4 	movhi	r5,15
   8d088:	29509004 	addi	r5,r5,16960
   8d08c:	0081c900 	call	81c90 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   8d090:	01017db4 	movhi	r4,1526
   8d094:	21384004 	addi	r4,r4,-7936
   8d098:	100b883a 	mov	r5,r2
   8d09c:	008ad400 	call	8ad40 <__udivsi3>
   8d0a0:	01200034 	movhi	r4,32768
   8d0a4:	213fffc4 	addi	r4,r4,-1
   8d0a8:	100b883a 	mov	r5,r2
   8d0ac:	008ad400 	call	8ad40 <__udivsi3>
   8d0b0:	e0ffff17 	ldw	r3,-4(fp)
   8d0b4:	1885c83a 	sub	r2,r3,r2
   8d0b8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   8d0bc:	e0bffc17 	ldw	r2,-16(fp)
   8d0c0:	10800044 	addi	r2,r2,1
   8d0c4:	e0bffc15 	stw	r2,-16(fp)
   8d0c8:	e0fffc17 	ldw	r3,-16(fp)
   8d0cc:	e0bffe17 	ldw	r2,-8(fp)
   8d0d0:	18bfe716 	blt	r3,r2,8d070 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   8d0d4:	e13ffd17 	ldw	r4,-12(fp)
   8d0d8:	014003f4 	movhi	r5,15
   8d0dc:	29509004 	addi	r5,r5,16960
   8d0e0:	0081c900 	call	81c90 <__mulsi3>
   8d0e4:	01017db4 	movhi	r4,1526
   8d0e8:	21384004 	addi	r4,r4,-7936
   8d0ec:	100b883a 	mov	r5,r2
   8d0f0:	008ad400 	call	8ad40 <__udivsi3>
   8d0f4:	1009883a 	mov	r4,r2
   8d0f8:	e17fff17 	ldw	r5,-4(fp)
   8d0fc:	0081c900 	call	81c90 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8d100:	10bfffc4 	addi	r2,r2,-1
   8d104:	103ffe1e 	bne	r2,zero,8d100 <alt_busy_sleep+0xfc>
   8d108:	00000d06 	br	8d140 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   8d10c:	e13ffd17 	ldw	r4,-12(fp)
   8d110:	014003f4 	movhi	r5,15
   8d114:	29509004 	addi	r5,r5,16960
   8d118:	0081c900 	call	81c90 <__mulsi3>
   8d11c:	01017db4 	movhi	r4,1526
   8d120:	21384004 	addi	r4,r4,-7936
   8d124:	100b883a 	mov	r5,r2
   8d128:	008ad400 	call	8ad40 <__udivsi3>
   8d12c:	1009883a 	mov	r4,r2
   8d130:	e17fff17 	ldw	r5,-4(fp)
   8d134:	0081c900 	call	81c90 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8d138:	10bfffc4 	addi	r2,r2,-1
   8d13c:	00bffe16 	blt	zero,r2,8d138 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   8d140:	0005883a 	mov	r2,zero
}
   8d144:	e037883a 	mov	sp,fp
   8d148:	dfc00117 	ldw	ra,4(sp)
   8d14c:	df000017 	ldw	fp,0(sp)
   8d150:	dec00204 	addi	sp,sp,8
   8d154:	f800283a 	ret

0008d158 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8d158:	deffff04 	addi	sp,sp,-4
   8d15c:	df000015 	stw	fp,0(sp)
   8d160:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8d164:	e037883a 	mov	sp,fp
   8d168:	df000017 	ldw	fp,0(sp)
   8d16c:	dec00104 	addi	sp,sp,4
   8d170:	f800283a 	ret

0008d174 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d174:	defffe04 	addi	sp,sp,-8
   8d178:	dfc00115 	stw	ra,4(sp)
   8d17c:	df000015 	stw	fp,0(sp)
   8d180:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8d184:	00800274 	movhi	r2,9
   8d188:	10824504 	addi	r2,r2,2324
   8d18c:	10800017 	ldw	r2,0(r2)
   8d190:	10000526 	beq	r2,zero,8d1a8 <alt_get_errno+0x34>
   8d194:	00800274 	movhi	r2,9
   8d198:	10824504 	addi	r2,r2,2324
   8d19c:	10800017 	ldw	r2,0(r2)
   8d1a0:	103ee83a 	callr	r2
   8d1a4:	00000206 	br	8d1b0 <alt_get_errno+0x3c>
   8d1a8:	00800274 	movhi	r2,9
   8d1ac:	108af004 	addi	r2,r2,11200
}
   8d1b0:	e037883a 	mov	sp,fp
   8d1b4:	dfc00117 	ldw	ra,4(sp)
   8d1b8:	df000017 	ldw	fp,0(sp)
   8d1bc:	dec00204 	addi	sp,sp,8
   8d1c0:	f800283a 	ret

0008d1c4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8d1c4:	defffa04 	addi	sp,sp,-24
   8d1c8:	dfc00515 	stw	ra,20(sp)
   8d1cc:	df000415 	stw	fp,16(sp)
   8d1d0:	df000404 	addi	fp,sp,16
   8d1d4:	e13ffe15 	stw	r4,-8(fp)
   8d1d8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8d1dc:	e0bffe17 	ldw	r2,-8(fp)
   8d1e0:	10000326 	beq	r2,zero,8d1f0 <alt_dev_llist_insert+0x2c>
   8d1e4:	e0bffe17 	ldw	r2,-8(fp)
   8d1e8:	10800217 	ldw	r2,8(r2)
   8d1ec:	1000051e 	bne	r2,zero,8d204 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   8d1f0:	008d1740 	call	8d174 <alt_get_errno>
   8d1f4:	00c00584 	movi	r3,22
   8d1f8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   8d1fc:	00bffa84 	movi	r2,-22
   8d200:	00001306 	br	8d250 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8d204:	e0bffe17 	ldw	r2,-8(fp)
   8d208:	e0ffff17 	ldw	r3,-4(fp)
   8d20c:	e0fffc15 	stw	r3,-16(fp)
   8d210:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8d214:	e0bffd17 	ldw	r2,-12(fp)
   8d218:	e0fffc17 	ldw	r3,-16(fp)
   8d21c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8d220:	e0bffc17 	ldw	r2,-16(fp)
   8d224:	10c00017 	ldw	r3,0(r2)
   8d228:	e0bffd17 	ldw	r2,-12(fp)
   8d22c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8d230:	e0bffc17 	ldw	r2,-16(fp)
   8d234:	10800017 	ldw	r2,0(r2)
   8d238:	e0fffd17 	ldw	r3,-12(fp)
   8d23c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8d240:	e0bffc17 	ldw	r2,-16(fp)
   8d244:	e0fffd17 	ldw	r3,-12(fp)
   8d248:	10c00015 	stw	r3,0(r2)

  return 0;  
   8d24c:	0005883a 	mov	r2,zero
}
   8d250:	e037883a 	mov	sp,fp
   8d254:	dfc00117 	ldw	ra,4(sp)
   8d258:	df000017 	ldw	fp,0(sp)
   8d25c:	dec00204 	addi	sp,sp,8
   8d260:	f800283a 	ret

0008d264 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8d264:	defffd04 	addi	sp,sp,-12
   8d268:	dfc00215 	stw	ra,8(sp)
   8d26c:	df000115 	stw	fp,4(sp)
   8d270:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8d274:	00800274 	movhi	r2,9
   8d278:	10b8a504 	addi	r2,r2,-7532
   8d27c:	e0bfff15 	stw	r2,-4(fp)
   8d280:	00000606 	br	8d29c <_do_ctors+0x38>
        (*ctor) (); 
   8d284:	e0bfff17 	ldw	r2,-4(fp)
   8d288:	10800017 	ldw	r2,0(r2)
   8d28c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8d290:	e0bfff17 	ldw	r2,-4(fp)
   8d294:	10bfff04 	addi	r2,r2,-4
   8d298:	e0bfff15 	stw	r2,-4(fp)
   8d29c:	e0ffff17 	ldw	r3,-4(fp)
   8d2a0:	00800274 	movhi	r2,9
   8d2a4:	10b8a604 	addi	r2,r2,-7528
   8d2a8:	18bff62e 	bgeu	r3,r2,8d284 <_do_ctors+0x20>
        (*ctor) (); 
}
   8d2ac:	e037883a 	mov	sp,fp
   8d2b0:	dfc00117 	ldw	ra,4(sp)
   8d2b4:	df000017 	ldw	fp,0(sp)
   8d2b8:	dec00204 	addi	sp,sp,8
   8d2bc:	f800283a 	ret

0008d2c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8d2c0:	defffd04 	addi	sp,sp,-12
   8d2c4:	dfc00215 	stw	ra,8(sp)
   8d2c8:	df000115 	stw	fp,4(sp)
   8d2cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8d2d0:	00800274 	movhi	r2,9
   8d2d4:	10b8a504 	addi	r2,r2,-7532
   8d2d8:	e0bfff15 	stw	r2,-4(fp)
   8d2dc:	00000606 	br	8d2f8 <_do_dtors+0x38>
        (*dtor) (); 
   8d2e0:	e0bfff17 	ldw	r2,-4(fp)
   8d2e4:	10800017 	ldw	r2,0(r2)
   8d2e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8d2ec:	e0bfff17 	ldw	r2,-4(fp)
   8d2f0:	10bfff04 	addi	r2,r2,-4
   8d2f4:	e0bfff15 	stw	r2,-4(fp)
   8d2f8:	e0ffff17 	ldw	r3,-4(fp)
   8d2fc:	00800274 	movhi	r2,9
   8d300:	10b8a604 	addi	r2,r2,-7528
   8d304:	18bff62e 	bgeu	r3,r2,8d2e0 <_do_dtors+0x20>
        (*dtor) (); 
}
   8d308:	e037883a 	mov	sp,fp
   8d30c:	dfc00117 	ldw	ra,4(sp)
   8d310:	df000017 	ldw	fp,0(sp)
   8d314:	dec00204 	addi	sp,sp,8
   8d318:	f800283a 	ret

0008d31c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8d31c:	defffe04 	addi	sp,sp,-8
   8d320:	dfc00115 	stw	ra,4(sp)
   8d324:	df000015 	stw	fp,0(sp)
   8d328:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   8d32c:	0009883a 	mov	r4,zero
   8d330:	01440004 	movi	r5,4096
   8d334:	008de380 	call	8de38 <alt_icache_flush>
#endif
}
   8d338:	e037883a 	mov	sp,fp
   8d33c:	dfc00117 	ldw	ra,4(sp)
   8d340:	df000017 	ldw	fp,0(sp)
   8d344:	dec00204 	addi	sp,sp,8
   8d348:	f800283a 	ret

0008d34c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8d34c:	defff904 	addi	sp,sp,-28
   8d350:	dfc00615 	stw	ra,24(sp)
   8d354:	df000515 	stw	fp,20(sp)
   8d358:	df000504 	addi	fp,sp,20
   8d35c:	e13ffc15 	stw	r4,-16(fp)
   8d360:	e17ffd15 	stw	r5,-12(fp)
   8d364:	e1bffe15 	stw	r6,-8(fp)
   8d368:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8d36c:	e0800217 	ldw	r2,8(fp)
   8d370:	d8800015 	stw	r2,0(sp)
   8d374:	e13ffc17 	ldw	r4,-16(fp)
   8d378:	e17ffd17 	ldw	r5,-12(fp)
   8d37c:	e1bffe17 	ldw	r6,-8(fp)
   8d380:	e1ffff17 	ldw	r7,-4(fp)
   8d384:	008d5240 	call	8d524 <alt_iic_isr_register>
}  
   8d388:	e037883a 	mov	sp,fp
   8d38c:	dfc00117 	ldw	ra,4(sp)
   8d390:	df000017 	ldw	fp,0(sp)
   8d394:	dec00204 	addi	sp,sp,8
   8d398:	f800283a 	ret

0008d39c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8d39c:	defff904 	addi	sp,sp,-28
   8d3a0:	df000615 	stw	fp,24(sp)
   8d3a4:	df000604 	addi	fp,sp,24
   8d3a8:	e13ffe15 	stw	r4,-8(fp)
   8d3ac:	e17fff15 	stw	r5,-4(fp)
   8d3b0:	e0bfff17 	ldw	r2,-4(fp)
   8d3b4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d3b8:	0005303a 	rdctl	r2,status
   8d3bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d3c0:	e0fffb17 	ldw	r3,-20(fp)
   8d3c4:	00bfff84 	movi	r2,-2
   8d3c8:	1884703a 	and	r2,r3,r2
   8d3cc:	1001703a 	wrctl	status,r2
  
  return context;
   8d3d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8d3d4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   8d3d8:	e0bffa17 	ldw	r2,-24(fp)
   8d3dc:	00c00044 	movi	r3,1
   8d3e0:	1884983a 	sll	r2,r3,r2
   8d3e4:	1007883a 	mov	r3,r2
   8d3e8:	00800274 	movhi	r2,9
   8d3ec:	108af604 	addi	r2,r2,11224
   8d3f0:	10800017 	ldw	r2,0(r2)
   8d3f4:	1886b03a 	or	r3,r3,r2
   8d3f8:	00800274 	movhi	r2,9
   8d3fc:	108af604 	addi	r2,r2,11224
   8d400:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8d404:	00800274 	movhi	r2,9
   8d408:	108af604 	addi	r2,r2,11224
   8d40c:	10800017 	ldw	r2,0(r2)
   8d410:	100170fa 	wrctl	ienable,r2
   8d414:	e0bffc17 	ldw	r2,-16(fp)
   8d418:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d41c:	e0bffd17 	ldw	r2,-12(fp)
   8d420:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8d424:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8d428:	e037883a 	mov	sp,fp
   8d42c:	df000017 	ldw	fp,0(sp)
   8d430:	dec00104 	addi	sp,sp,4
   8d434:	f800283a 	ret

0008d438 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8d438:	defff904 	addi	sp,sp,-28
   8d43c:	df000615 	stw	fp,24(sp)
   8d440:	df000604 	addi	fp,sp,24
   8d444:	e13ffe15 	stw	r4,-8(fp)
   8d448:	e17fff15 	stw	r5,-4(fp)
   8d44c:	e0bfff17 	ldw	r2,-4(fp)
   8d450:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d454:	0005303a 	rdctl	r2,status
   8d458:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d45c:	e0fffb17 	ldw	r3,-20(fp)
   8d460:	00bfff84 	movi	r2,-2
   8d464:	1884703a 	and	r2,r3,r2
   8d468:	1001703a 	wrctl	status,r2
  
  return context;
   8d46c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8d470:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   8d474:	e0bffa17 	ldw	r2,-24(fp)
   8d478:	00c00044 	movi	r3,1
   8d47c:	1884983a 	sll	r2,r3,r2
   8d480:	0084303a 	nor	r2,zero,r2
   8d484:	1007883a 	mov	r3,r2
   8d488:	00800274 	movhi	r2,9
   8d48c:	108af604 	addi	r2,r2,11224
   8d490:	10800017 	ldw	r2,0(r2)
   8d494:	1886703a 	and	r3,r3,r2
   8d498:	00800274 	movhi	r2,9
   8d49c:	108af604 	addi	r2,r2,11224
   8d4a0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8d4a4:	00800274 	movhi	r2,9
   8d4a8:	108af604 	addi	r2,r2,11224
   8d4ac:	10800017 	ldw	r2,0(r2)
   8d4b0:	100170fa 	wrctl	ienable,r2
   8d4b4:	e0bffc17 	ldw	r2,-16(fp)
   8d4b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d4bc:	e0bffd17 	ldw	r2,-12(fp)
   8d4c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8d4c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8d4c8:	e037883a 	mov	sp,fp
   8d4cc:	df000017 	ldw	fp,0(sp)
   8d4d0:	dec00104 	addi	sp,sp,4
   8d4d4:	f800283a 	ret

0008d4d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8d4d8:	defffc04 	addi	sp,sp,-16
   8d4dc:	df000315 	stw	fp,12(sp)
   8d4e0:	df000304 	addi	fp,sp,12
   8d4e4:	e13ffe15 	stw	r4,-8(fp)
   8d4e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8d4ec:	000530fa 	rdctl	r2,ienable
   8d4f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8d4f4:	e0bfff17 	ldw	r2,-4(fp)
   8d4f8:	00c00044 	movi	r3,1
   8d4fc:	1884983a 	sll	r2,r3,r2
   8d500:	1007883a 	mov	r3,r2
   8d504:	e0bffd17 	ldw	r2,-12(fp)
   8d508:	1884703a 	and	r2,r3,r2
   8d50c:	1004c03a 	cmpne	r2,r2,zero
   8d510:	10803fcc 	andi	r2,r2,255
}
   8d514:	e037883a 	mov	sp,fp
   8d518:	df000017 	ldw	fp,0(sp)
   8d51c:	dec00104 	addi	sp,sp,4
   8d520:	f800283a 	ret

0008d524 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8d524:	defff504 	addi	sp,sp,-44
   8d528:	dfc00a15 	stw	ra,40(sp)
   8d52c:	df000915 	stw	fp,36(sp)
   8d530:	df000904 	addi	fp,sp,36
   8d534:	e13ffc15 	stw	r4,-16(fp)
   8d538:	e17ffd15 	stw	r5,-12(fp)
   8d53c:	e1bffe15 	stw	r6,-8(fp)
   8d540:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   8d544:	00bffa84 	movi	r2,-22
   8d548:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8d54c:	e0bffd17 	ldw	r2,-12(fp)
   8d550:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8d554:	e0bff817 	ldw	r2,-32(fp)
   8d558:	10800808 	cmpgei	r2,r2,32
   8d55c:	1000271e 	bne	r2,zero,8d5fc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d560:	0005303a 	rdctl	r2,status
   8d564:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d568:	e0fffa17 	ldw	r3,-24(fp)
   8d56c:	00bfff84 	movi	r2,-2
   8d570:	1884703a 	and	r2,r3,r2
   8d574:	1001703a 	wrctl	status,r2
  
  return context;
   8d578:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8d57c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   8d580:	00c00274 	movhi	r3,9
   8d584:	18cb0304 	addi	r3,r3,11276
   8d588:	e0bff817 	ldw	r2,-32(fp)
   8d58c:	100490fa 	slli	r2,r2,3
   8d590:	1885883a 	add	r2,r3,r2
   8d594:	e0fffe17 	ldw	r3,-8(fp)
   8d598:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   8d59c:	00c00274 	movhi	r3,9
   8d5a0:	18cb0304 	addi	r3,r3,11276
   8d5a4:	e0bff817 	ldw	r2,-32(fp)
   8d5a8:	100490fa 	slli	r2,r2,3
   8d5ac:	1885883a 	add	r2,r3,r2
   8d5b0:	10800104 	addi	r2,r2,4
   8d5b4:	e0ffff17 	ldw	r3,-4(fp)
   8d5b8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8d5bc:	e0bffe17 	ldw	r2,-8(fp)
   8d5c0:	10000526 	beq	r2,zero,8d5d8 <alt_iic_isr_register+0xb4>
   8d5c4:	e0bff817 	ldw	r2,-32(fp)
   8d5c8:	e13ffc17 	ldw	r4,-16(fp)
   8d5cc:	100b883a 	mov	r5,r2
   8d5d0:	008d39c0 	call	8d39c <alt_ic_irq_enable>
   8d5d4:	00000406 	br	8d5e8 <alt_iic_isr_register+0xc4>
   8d5d8:	e0bff817 	ldw	r2,-32(fp)
   8d5dc:	e13ffc17 	ldw	r4,-16(fp)
   8d5e0:	100b883a 	mov	r5,r2
   8d5e4:	008d4380 	call	8d438 <alt_ic_irq_disable>
   8d5e8:	e0bff715 	stw	r2,-36(fp)
   8d5ec:	e0bff917 	ldw	r2,-28(fp)
   8d5f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d5f4:	e0bffb17 	ldw	r2,-20(fp)
   8d5f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8d5fc:	e0bff717 	ldw	r2,-36(fp)
}
   8d600:	e037883a 	mov	sp,fp
   8d604:	dfc00117 	ldw	ra,4(sp)
   8d608:	df000017 	ldw	fp,0(sp)
   8d60c:	dec00204 	addi	sp,sp,8
   8d610:	f800283a 	ret

0008d614 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8d614:	defff804 	addi	sp,sp,-32
   8d618:	dfc00715 	stw	ra,28(sp)
   8d61c:	df000615 	stw	fp,24(sp)
   8d620:	dc000515 	stw	r16,20(sp)
   8d624:	df000504 	addi	fp,sp,20
   8d628:	e13ffc15 	stw	r4,-16(fp)
   8d62c:	e17ffd15 	stw	r5,-12(fp)
   8d630:	e1bffe15 	stw	r6,-8(fp)
   8d634:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8d638:	e13ffd17 	ldw	r4,-12(fp)
   8d63c:	e17ffe17 	ldw	r5,-8(fp)
   8d640:	e1bfff17 	ldw	r6,-4(fp)
   8d644:	008d8ac0 	call	8d8ac <open>
   8d648:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8d64c:	e0bffb17 	ldw	r2,-20(fp)
   8d650:	10002216 	blt	r2,zero,8d6dc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   8d654:	04000274 	movhi	r16,9
   8d658:	843dc304 	addi	r16,r16,-2292
   8d65c:	e0bffb17 	ldw	r2,-20(fp)
   8d660:	1009883a 	mov	r4,r2
   8d664:	01400304 	movi	r5,12
   8d668:	0081c900 	call	81c90 <__mulsi3>
   8d66c:	8085883a 	add	r2,r16,r2
   8d670:	10c00017 	ldw	r3,0(r2)
   8d674:	e0bffc17 	ldw	r2,-16(fp)
   8d678:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8d67c:	04000274 	movhi	r16,9
   8d680:	843dc304 	addi	r16,r16,-2292
   8d684:	e0bffb17 	ldw	r2,-20(fp)
   8d688:	1009883a 	mov	r4,r2
   8d68c:	01400304 	movi	r5,12
   8d690:	0081c900 	call	81c90 <__mulsi3>
   8d694:	8085883a 	add	r2,r16,r2
   8d698:	10800104 	addi	r2,r2,4
   8d69c:	10c00017 	ldw	r3,0(r2)
   8d6a0:	e0bffc17 	ldw	r2,-16(fp)
   8d6a4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8d6a8:	04000274 	movhi	r16,9
   8d6ac:	843dc304 	addi	r16,r16,-2292
   8d6b0:	e0bffb17 	ldw	r2,-20(fp)
   8d6b4:	1009883a 	mov	r4,r2
   8d6b8:	01400304 	movi	r5,12
   8d6bc:	0081c900 	call	81c90 <__mulsi3>
   8d6c0:	8085883a 	add	r2,r16,r2
   8d6c4:	10800204 	addi	r2,r2,8
   8d6c8:	10c00017 	ldw	r3,0(r2)
   8d6cc:	e0bffc17 	ldw	r2,-16(fp)
   8d6d0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8d6d4:	e13ffb17 	ldw	r4,-20(fp)
   8d6d8:	008bad40 	call	8bad4 <alt_release_fd>
  }
} 
   8d6dc:	e037883a 	mov	sp,fp
   8d6e0:	dfc00217 	ldw	ra,8(sp)
   8d6e4:	df000117 	ldw	fp,4(sp)
   8d6e8:	dc000017 	ldw	r16,0(sp)
   8d6ec:	dec00304 	addi	sp,sp,12
   8d6f0:	f800283a 	ret

0008d6f4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8d6f4:	defffb04 	addi	sp,sp,-20
   8d6f8:	dfc00415 	stw	ra,16(sp)
   8d6fc:	df000315 	stw	fp,12(sp)
   8d700:	df000304 	addi	fp,sp,12
   8d704:	e13ffd15 	stw	r4,-12(fp)
   8d708:	e17ffe15 	stw	r5,-8(fp)
   8d70c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8d710:	01000274 	movhi	r4,9
   8d714:	213dc604 	addi	r4,r4,-2280
   8d718:	e17ffd17 	ldw	r5,-12(fp)
   8d71c:	01800044 	movi	r6,1
   8d720:	01c07fc4 	movi	r7,511
   8d724:	008d6140 	call	8d614 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8d728:	01000274 	movhi	r4,9
   8d72c:	213dc304 	addi	r4,r4,-2292
   8d730:	e17ffe17 	ldw	r5,-8(fp)
   8d734:	000d883a 	mov	r6,zero
   8d738:	01c07fc4 	movi	r7,511
   8d73c:	008d6140 	call	8d614 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8d740:	01000274 	movhi	r4,9
   8d744:	213dc904 	addi	r4,r4,-2268
   8d748:	e17fff17 	ldw	r5,-4(fp)
   8d74c:	01800044 	movi	r6,1
   8d750:	01c07fc4 	movi	r7,511
   8d754:	008d6140 	call	8d614 <alt_open_fd>
}  
   8d758:	e037883a 	mov	sp,fp
   8d75c:	dfc00117 	ldw	ra,4(sp)
   8d760:	df000017 	ldw	fp,0(sp)
   8d764:	dec00204 	addi	sp,sp,8
   8d768:	f800283a 	ret

0008d76c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d76c:	defffe04 	addi	sp,sp,-8
   8d770:	dfc00115 	stw	ra,4(sp)
   8d774:	df000015 	stw	fp,0(sp)
   8d778:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8d77c:	00800274 	movhi	r2,9
   8d780:	10824504 	addi	r2,r2,2324
   8d784:	10800017 	ldw	r2,0(r2)
   8d788:	10000526 	beq	r2,zero,8d7a0 <alt_get_errno+0x34>
   8d78c:	00800274 	movhi	r2,9
   8d790:	10824504 	addi	r2,r2,2324
   8d794:	10800017 	ldw	r2,0(r2)
   8d798:	103ee83a 	callr	r2
   8d79c:	00000206 	br	8d7a8 <alt_get_errno+0x3c>
   8d7a0:	00800274 	movhi	r2,9
   8d7a4:	108af004 	addi	r2,r2,11200
}
   8d7a8:	e037883a 	mov	sp,fp
   8d7ac:	dfc00117 	ldw	ra,4(sp)
   8d7b0:	df000017 	ldw	fp,0(sp)
   8d7b4:	dec00204 	addi	sp,sp,8
   8d7b8:	f800283a 	ret

0008d7bc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8d7bc:	defffb04 	addi	sp,sp,-20
   8d7c0:	dfc00415 	stw	ra,16(sp)
   8d7c4:	df000315 	stw	fp,12(sp)
   8d7c8:	dc000215 	stw	r16,8(sp)
   8d7cc:	df000204 	addi	fp,sp,8
   8d7d0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8d7d4:	e0bfff17 	ldw	r2,-4(fp)
   8d7d8:	10800217 	ldw	r2,8(r2)
   8d7dc:	10d00034 	orhi	r3,r2,16384
   8d7e0:	e0bfff17 	ldw	r2,-4(fp)
   8d7e4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8d7e8:	e03ffe15 	stw	zero,-8(fp)
   8d7ec:	00002206 	br	8d878 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8d7f0:	04000274 	movhi	r16,9
   8d7f4:	843dc304 	addi	r16,r16,-2292
   8d7f8:	e0bffe17 	ldw	r2,-8(fp)
   8d7fc:	1009883a 	mov	r4,r2
   8d800:	01400304 	movi	r5,12
   8d804:	0081c900 	call	81c90 <__mulsi3>
   8d808:	8085883a 	add	r2,r16,r2
   8d80c:	10c00017 	ldw	r3,0(r2)
   8d810:	e0bfff17 	ldw	r2,-4(fp)
   8d814:	10800017 	ldw	r2,0(r2)
   8d818:	1880141e 	bne	r3,r2,8d86c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8d81c:	04000274 	movhi	r16,9
   8d820:	843dc304 	addi	r16,r16,-2292
   8d824:	e0bffe17 	ldw	r2,-8(fp)
   8d828:	1009883a 	mov	r4,r2
   8d82c:	01400304 	movi	r5,12
   8d830:	0081c900 	call	81c90 <__mulsi3>
   8d834:	8085883a 	add	r2,r16,r2
   8d838:	10800204 	addi	r2,r2,8
   8d83c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8d840:	10000a0e 	bge	r2,zero,8d86c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   8d844:	e13ffe17 	ldw	r4,-8(fp)
   8d848:	01400304 	movi	r5,12
   8d84c:	0081c900 	call	81c90 <__mulsi3>
   8d850:	00c00274 	movhi	r3,9
   8d854:	18fdc304 	addi	r3,r3,-2292
   8d858:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8d85c:	e0bfff17 	ldw	r2,-4(fp)
   8d860:	18800226 	beq	r3,r2,8d86c <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8d864:	00bffcc4 	movi	r2,-13
   8d868:	00000a06 	br	8d894 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8d86c:	e0bffe17 	ldw	r2,-8(fp)
   8d870:	10800044 	addi	r2,r2,1
   8d874:	e0bffe15 	stw	r2,-8(fp)
   8d878:	00800274 	movhi	r2,9
   8d87c:	10824404 	addi	r2,r2,2320
   8d880:	10800017 	ldw	r2,0(r2)
   8d884:	1007883a 	mov	r3,r2
   8d888:	e0bffe17 	ldw	r2,-8(fp)
   8d88c:	18bfd82e 	bgeu	r3,r2,8d7f0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8d890:	0005883a 	mov	r2,zero
}
   8d894:	e037883a 	mov	sp,fp
   8d898:	dfc00217 	ldw	ra,8(sp)
   8d89c:	df000117 	ldw	fp,4(sp)
   8d8a0:	dc000017 	ldw	r16,0(sp)
   8d8a4:	dec00304 	addi	sp,sp,12
   8d8a8:	f800283a 	ret

0008d8ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8d8ac:	defff604 	addi	sp,sp,-40
   8d8b0:	dfc00915 	stw	ra,36(sp)
   8d8b4:	df000815 	stw	fp,32(sp)
   8d8b8:	df000804 	addi	fp,sp,32
   8d8bc:	e13ffd15 	stw	r4,-12(fp)
   8d8c0:	e17ffe15 	stw	r5,-8(fp)
   8d8c4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8d8c8:	00bfffc4 	movi	r2,-1
   8d8cc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   8d8d0:	00bffb44 	movi	r2,-19
   8d8d4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   8d8d8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8d8dc:	e13ffd17 	ldw	r4,-12(fp)
   8d8e0:	01400274 	movhi	r5,9
   8d8e4:	29424204 	addi	r5,r5,2312
   8d8e8:	008dbc00 	call	8dbc0 <alt_find_dev>
   8d8ec:	e0bff815 	stw	r2,-32(fp)
   8d8f0:	e0bff817 	ldw	r2,-32(fp)
   8d8f4:	1000051e 	bne	r2,zero,8d90c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8d8f8:	e13ffd17 	ldw	r4,-12(fp)
   8d8fc:	008dc500 	call	8dc50 <alt_find_file>
   8d900:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   8d904:	00800044 	movi	r2,1
   8d908:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8d90c:	e0bff817 	ldw	r2,-32(fp)
   8d910:	10002a26 	beq	r2,zero,8d9bc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8d914:	e13ff817 	ldw	r4,-32(fp)
   8d918:	008dd640 	call	8dd64 <alt_get_fd>
   8d91c:	e0bff915 	stw	r2,-28(fp)
   8d920:	e0bff917 	ldw	r2,-28(fp)
   8d924:	1000030e 	bge	r2,zero,8d934 <open+0x88>
    {
      status = index;
   8d928:	e0bff917 	ldw	r2,-28(fp)
   8d92c:	e0bffa15 	stw	r2,-24(fp)
   8d930:	00002406 	br	8d9c4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   8d934:	e13ff917 	ldw	r4,-28(fp)
   8d938:	01400304 	movi	r5,12
   8d93c:	0081c900 	call	81c90 <__mulsi3>
   8d940:	00c00274 	movhi	r3,9
   8d944:	18fdc304 	addi	r3,r3,-2292
   8d948:	10c5883a 	add	r2,r2,r3
   8d94c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8d950:	e0fffe17 	ldw	r3,-8(fp)
   8d954:	00900034 	movhi	r2,16384
   8d958:	10bfffc4 	addi	r2,r2,-1
   8d95c:	1886703a 	and	r3,r3,r2
   8d960:	e0bffc17 	ldw	r2,-16(fp)
   8d964:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8d968:	e0bffb17 	ldw	r2,-20(fp)
   8d96c:	1000051e 	bne	r2,zero,8d984 <open+0xd8>
   8d970:	e13ffc17 	ldw	r4,-16(fp)
   8d974:	008d7bc0 	call	8d7bc <alt_file_locked>
   8d978:	e0bffa15 	stw	r2,-24(fp)
   8d97c:	e0bffa17 	ldw	r2,-24(fp)
   8d980:	10001016 	blt	r2,zero,8d9c4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8d984:	e0bff817 	ldw	r2,-32(fp)
   8d988:	10800317 	ldw	r2,12(r2)
   8d98c:	10000826 	beq	r2,zero,8d9b0 <open+0x104>
   8d990:	e0bff817 	ldw	r2,-32(fp)
   8d994:	10800317 	ldw	r2,12(r2)
   8d998:	e13ffc17 	ldw	r4,-16(fp)
   8d99c:	e17ffd17 	ldw	r5,-12(fp)
   8d9a0:	e1bffe17 	ldw	r6,-8(fp)
   8d9a4:	e1ffff17 	ldw	r7,-4(fp)
   8d9a8:	103ee83a 	callr	r2
   8d9ac:	00000106 	br	8d9b4 <open+0x108>
   8d9b0:	0005883a 	mov	r2,zero
   8d9b4:	e0bffa15 	stw	r2,-24(fp)
   8d9b8:	00000206 	br	8d9c4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8d9bc:	00bffb44 	movi	r2,-19
   8d9c0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8d9c4:	e0bffa17 	ldw	r2,-24(fp)
   8d9c8:	1000080e 	bge	r2,zero,8d9ec <open+0x140>
  {
    alt_release_fd (index);  
   8d9cc:	e13ff917 	ldw	r4,-28(fp)
   8d9d0:	008bad40 	call	8bad4 <alt_release_fd>
    ALT_ERRNO = -status;
   8d9d4:	008d76c0 	call	8d76c <alt_get_errno>
   8d9d8:	e0fffa17 	ldw	r3,-24(fp)
   8d9dc:	00c7c83a 	sub	r3,zero,r3
   8d9e0:	10c00015 	stw	r3,0(r2)
    return -1;
   8d9e4:	00bfffc4 	movi	r2,-1
   8d9e8:	00000106 	br	8d9f0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   8d9ec:	e0bff917 	ldw	r2,-28(fp)
}
   8d9f0:	e037883a 	mov	sp,fp
   8d9f4:	dfc00117 	ldw	ra,4(sp)
   8d9f8:	df000017 	ldw	fp,0(sp)
   8d9fc:	dec00204 	addi	sp,sp,8
   8da00:	f800283a 	ret

0008da04 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8da04:	defffa04 	addi	sp,sp,-24
   8da08:	df000515 	stw	fp,20(sp)
   8da0c:	df000504 	addi	fp,sp,20
   8da10:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8da14:	0005303a 	rdctl	r2,status
   8da18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8da1c:	e0fffc17 	ldw	r3,-16(fp)
   8da20:	00bfff84 	movi	r2,-2
   8da24:	1884703a 	and	r2,r3,r2
   8da28:	1001703a 	wrctl	status,r2
  
  return context;
   8da2c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8da30:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   8da34:	e0bfff17 	ldw	r2,-4(fp)
   8da38:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8da3c:	e0bffd17 	ldw	r2,-12(fp)
   8da40:	10800017 	ldw	r2,0(r2)
   8da44:	e0fffd17 	ldw	r3,-12(fp)
   8da48:	18c00117 	ldw	r3,4(r3)
   8da4c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   8da50:	e0bffd17 	ldw	r2,-12(fp)
   8da54:	10800117 	ldw	r2,4(r2)
   8da58:	e0fffd17 	ldw	r3,-12(fp)
   8da5c:	18c00017 	ldw	r3,0(r3)
   8da60:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8da64:	e0bffd17 	ldw	r2,-12(fp)
   8da68:	e0fffd17 	ldw	r3,-12(fp)
   8da6c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   8da70:	e0bffd17 	ldw	r2,-12(fp)
   8da74:	e0fffd17 	ldw	r3,-12(fp)
   8da78:	10c00015 	stw	r3,0(r2)
   8da7c:	e0bffb17 	ldw	r2,-20(fp)
   8da80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8da84:	e0bffe17 	ldw	r2,-8(fp)
   8da88:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8da8c:	e037883a 	mov	sp,fp
   8da90:	df000017 	ldw	fp,0(sp)
   8da94:	dec00104 	addi	sp,sp,4
   8da98:	f800283a 	ret

0008da9c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8da9c:	defffb04 	addi	sp,sp,-20
   8daa0:	dfc00415 	stw	ra,16(sp)
   8daa4:	df000315 	stw	fp,12(sp)
   8daa8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8daac:	d0a00d17 	ldw	r2,-32716(gp)
   8dab0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8dab4:	d0a8bd17 	ldw	r2,-23820(gp)
   8dab8:	10800044 	addi	r2,r2,1
   8dabc:	d0a8bd15 	stw	r2,-23820(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8dac0:	00002e06 	br	8db7c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   8dac4:	e0bffd17 	ldw	r2,-12(fp)
   8dac8:	10800017 	ldw	r2,0(r2)
   8dacc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8dad0:	e0bffd17 	ldw	r2,-12(fp)
   8dad4:	10800403 	ldbu	r2,16(r2)
   8dad8:	10803fcc 	andi	r2,r2,255
   8dadc:	10000426 	beq	r2,zero,8daf0 <alt_tick+0x54>
   8dae0:	d0a8bd17 	ldw	r2,-23820(gp)
   8dae4:	1000021e 	bne	r2,zero,8daf0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   8dae8:	e0bffd17 	ldw	r2,-12(fp)
   8daec:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8daf0:	e0bffd17 	ldw	r2,-12(fp)
   8daf4:	10800217 	ldw	r2,8(r2)
   8daf8:	d0e8bd17 	ldw	r3,-23820(gp)
   8dafc:	18801d36 	bltu	r3,r2,8db74 <alt_tick+0xd8>
   8db00:	e0bffd17 	ldw	r2,-12(fp)
   8db04:	10800403 	ldbu	r2,16(r2)
   8db08:	10803fcc 	andi	r2,r2,255
   8db0c:	1000191e 	bne	r2,zero,8db74 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   8db10:	e0bffd17 	ldw	r2,-12(fp)
   8db14:	10c00317 	ldw	r3,12(r2)
   8db18:	e0bffd17 	ldw	r2,-12(fp)
   8db1c:	10800517 	ldw	r2,20(r2)
   8db20:	1009883a 	mov	r4,r2
   8db24:	183ee83a 	callr	r3
   8db28:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8db2c:	e0bfff17 	ldw	r2,-4(fp)
   8db30:	1000031e 	bne	r2,zero,8db40 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   8db34:	e13ffd17 	ldw	r4,-12(fp)
   8db38:	008da040 	call	8da04 <alt_alarm_stop>
   8db3c:	00000d06 	br	8db74 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   8db40:	e0bffd17 	ldw	r2,-12(fp)
   8db44:	10c00217 	ldw	r3,8(r2)
   8db48:	e0bfff17 	ldw	r2,-4(fp)
   8db4c:	1887883a 	add	r3,r3,r2
   8db50:	e0bffd17 	ldw	r2,-12(fp)
   8db54:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8db58:	e0bffd17 	ldw	r2,-12(fp)
   8db5c:	10c00217 	ldw	r3,8(r2)
   8db60:	d0a8bd17 	ldw	r2,-23820(gp)
   8db64:	1880032e 	bgeu	r3,r2,8db74 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   8db68:	e0bffd17 	ldw	r2,-12(fp)
   8db6c:	00c00044 	movi	r3,1
   8db70:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   8db74:	e0bffe17 	ldw	r2,-8(fp)
   8db78:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8db7c:	e0fffd17 	ldw	r3,-12(fp)
   8db80:	d0a00d04 	addi	r2,gp,-32716
   8db84:	18bfcf1e 	bne	r3,r2,8dac4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   8db88:	0001883a 	nop
}
   8db8c:	e037883a 	mov	sp,fp
   8db90:	dfc00117 	ldw	ra,4(sp)
   8db94:	df000017 	ldw	fp,0(sp)
   8db98:	dec00204 	addi	sp,sp,8
   8db9c:	f800283a 	ret

0008dba0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   8dba0:	deffff04 	addi	sp,sp,-4
   8dba4:	df000015 	stw	fp,0(sp)
   8dba8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8dbac:	000170fa 	wrctl	ienable,zero
}
   8dbb0:	e037883a 	mov	sp,fp
   8dbb4:	df000017 	ldw	fp,0(sp)
   8dbb8:	dec00104 	addi	sp,sp,4
   8dbbc:	f800283a 	ret

0008dbc0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8dbc0:	defffa04 	addi	sp,sp,-24
   8dbc4:	dfc00515 	stw	ra,20(sp)
   8dbc8:	df000415 	stw	fp,16(sp)
   8dbcc:	df000404 	addi	fp,sp,16
   8dbd0:	e13ffe15 	stw	r4,-8(fp)
   8dbd4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8dbd8:	e0bfff17 	ldw	r2,-4(fp)
   8dbdc:	10800017 	ldw	r2,0(r2)
   8dbe0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8dbe4:	e13ffe17 	ldw	r4,-8(fp)
   8dbe8:	0081db80 	call	81db8 <strlen>
   8dbec:	10800044 	addi	r2,r2,1
   8dbf0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8dbf4:	00000d06 	br	8dc2c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8dbf8:	e0bffc17 	ldw	r2,-16(fp)
   8dbfc:	10c00217 	ldw	r3,8(r2)
   8dc00:	e0bffd17 	ldw	r2,-12(fp)
   8dc04:	1809883a 	mov	r4,r3
   8dc08:	e17ffe17 	ldw	r5,-8(fp)
   8dc0c:	100d883a 	mov	r6,r2
   8dc10:	008df100 	call	8df10 <memcmp>
   8dc14:	1000021e 	bne	r2,zero,8dc20 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8dc18:	e0bffc17 	ldw	r2,-16(fp)
   8dc1c:	00000706 	br	8dc3c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8dc20:	e0bffc17 	ldw	r2,-16(fp)
   8dc24:	10800017 	ldw	r2,0(r2)
   8dc28:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8dc2c:	e0fffc17 	ldw	r3,-16(fp)
   8dc30:	e0bfff17 	ldw	r2,-4(fp)
   8dc34:	18bff01e 	bne	r3,r2,8dbf8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8dc38:	0005883a 	mov	r2,zero
}
   8dc3c:	e037883a 	mov	sp,fp
   8dc40:	dfc00117 	ldw	ra,4(sp)
   8dc44:	df000017 	ldw	fp,0(sp)
   8dc48:	dec00204 	addi	sp,sp,8
   8dc4c:	f800283a 	ret

0008dc50 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8dc50:	defffb04 	addi	sp,sp,-20
   8dc54:	dfc00415 	stw	ra,16(sp)
   8dc58:	df000315 	stw	fp,12(sp)
   8dc5c:	df000304 	addi	fp,sp,12
   8dc60:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8dc64:	00800274 	movhi	r2,9
   8dc68:	10824004 	addi	r2,r2,2304
   8dc6c:	10800017 	ldw	r2,0(r2)
   8dc70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8dc74:	00003106 	br	8dd3c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   8dc78:	e0bffd17 	ldw	r2,-12(fp)
   8dc7c:	10800217 	ldw	r2,8(r2)
   8dc80:	1009883a 	mov	r4,r2
   8dc84:	0081db80 	call	81db8 <strlen>
   8dc88:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   8dc8c:	e0bffd17 	ldw	r2,-12(fp)
   8dc90:	10c00217 	ldw	r3,8(r2)
   8dc94:	e0bffe17 	ldw	r2,-8(fp)
   8dc98:	10bfffc4 	addi	r2,r2,-1
   8dc9c:	1885883a 	add	r2,r3,r2
   8dca0:	10800003 	ldbu	r2,0(r2)
   8dca4:	10803fcc 	andi	r2,r2,255
   8dca8:	1080201c 	xori	r2,r2,128
   8dcac:	10bfe004 	addi	r2,r2,-128
   8dcb0:	10800bd8 	cmpnei	r2,r2,47
   8dcb4:	1000031e 	bne	r2,zero,8dcc4 <alt_find_file+0x74>
    {
      len -= 1;
   8dcb8:	e0bffe17 	ldw	r2,-8(fp)
   8dcbc:	10bfffc4 	addi	r2,r2,-1
   8dcc0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8dcc4:	e0bffe17 	ldw	r2,-8(fp)
   8dcc8:	e0ffff17 	ldw	r3,-4(fp)
   8dccc:	1885883a 	add	r2,r3,r2
   8dcd0:	10800003 	ldbu	r2,0(r2)
   8dcd4:	10803fcc 	andi	r2,r2,255
   8dcd8:	1080201c 	xori	r2,r2,128
   8dcdc:	10bfe004 	addi	r2,r2,-128
   8dce0:	10800be0 	cmpeqi	r2,r2,47
   8dce4:	1000081e 	bne	r2,zero,8dd08 <alt_find_file+0xb8>
   8dce8:	e0bffe17 	ldw	r2,-8(fp)
   8dcec:	e0ffff17 	ldw	r3,-4(fp)
   8dcf0:	1885883a 	add	r2,r3,r2
   8dcf4:	10800003 	ldbu	r2,0(r2)
   8dcf8:	10803fcc 	andi	r2,r2,255
   8dcfc:	1080201c 	xori	r2,r2,128
   8dd00:	10bfe004 	addi	r2,r2,-128
   8dd04:	10000a1e 	bne	r2,zero,8dd30 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   8dd08:	e0bffd17 	ldw	r2,-12(fp)
   8dd0c:	10c00217 	ldw	r3,8(r2)
   8dd10:	e0bffe17 	ldw	r2,-8(fp)
   8dd14:	1809883a 	mov	r4,r3
   8dd18:	e17fff17 	ldw	r5,-4(fp)
   8dd1c:	100d883a 	mov	r6,r2
   8dd20:	008df100 	call	8df10 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8dd24:	1000021e 	bne	r2,zero,8dd30 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8dd28:	e0bffd17 	ldw	r2,-12(fp)
   8dd2c:	00000806 	br	8dd50 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   8dd30:	e0bffd17 	ldw	r2,-12(fp)
   8dd34:	10800017 	ldw	r2,0(r2)
   8dd38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8dd3c:	e0fffd17 	ldw	r3,-12(fp)
   8dd40:	00800274 	movhi	r2,9
   8dd44:	10824004 	addi	r2,r2,2304
   8dd48:	18bfcb1e 	bne	r3,r2,8dc78 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8dd4c:	0005883a 	mov	r2,zero
}
   8dd50:	e037883a 	mov	sp,fp
   8dd54:	dfc00117 	ldw	ra,4(sp)
   8dd58:	df000017 	ldw	fp,0(sp)
   8dd5c:	dec00204 	addi	sp,sp,8
   8dd60:	f800283a 	ret

0008dd64 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8dd64:	defffa04 	addi	sp,sp,-24
   8dd68:	dfc00515 	stw	ra,20(sp)
   8dd6c:	df000415 	stw	fp,16(sp)
   8dd70:	dc000315 	stw	r16,12(sp)
   8dd74:	df000304 	addi	fp,sp,12
   8dd78:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8dd7c:	00bffa04 	movi	r2,-24
   8dd80:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8dd84:	e03ffd15 	stw	zero,-12(fp)
   8dd88:	00002106 	br	8de10 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   8dd8c:	04000274 	movhi	r16,9
   8dd90:	843dc304 	addi	r16,r16,-2292
   8dd94:	e0bffd17 	ldw	r2,-12(fp)
   8dd98:	1009883a 	mov	r4,r2
   8dd9c:	01400304 	movi	r5,12
   8dda0:	0081c900 	call	81c90 <__mulsi3>
   8dda4:	8085883a 	add	r2,r16,r2
   8dda8:	10800017 	ldw	r2,0(r2)
   8ddac:	1000151e 	bne	r2,zero,8de04 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   8ddb0:	04000274 	movhi	r16,9
   8ddb4:	843dc304 	addi	r16,r16,-2292
   8ddb8:	e0bffd17 	ldw	r2,-12(fp)
   8ddbc:	1009883a 	mov	r4,r2
   8ddc0:	01400304 	movi	r5,12
   8ddc4:	0081c900 	call	81c90 <__mulsi3>
   8ddc8:	8085883a 	add	r2,r16,r2
   8ddcc:	e0ffff17 	ldw	r3,-4(fp)
   8ddd0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   8ddd4:	00800274 	movhi	r2,9
   8ddd8:	10824404 	addi	r2,r2,2320
   8dddc:	10c00017 	ldw	r3,0(r2)
   8dde0:	e0bffd17 	ldw	r2,-12(fp)
   8dde4:	1880040e 	bge	r3,r2,8ddf8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   8dde8:	00800274 	movhi	r2,9
   8ddec:	10824404 	addi	r2,r2,2320
   8ddf0:	e0fffd17 	ldw	r3,-12(fp)
   8ddf4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   8ddf8:	e0bffd17 	ldw	r2,-12(fp)
   8ddfc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   8de00:	00000606 	br	8de1c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8de04:	e0bffd17 	ldw	r2,-12(fp)
   8de08:	10800044 	addi	r2,r2,1
   8de0c:	e0bffd15 	stw	r2,-12(fp)
   8de10:	e0bffd17 	ldw	r2,-12(fp)
   8de14:	10800810 	cmplti	r2,r2,32
   8de18:	103fdc1e 	bne	r2,zero,8dd8c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8de1c:	e0bffe17 	ldw	r2,-8(fp)
}
   8de20:	e037883a 	mov	sp,fp
   8de24:	dfc00217 	ldw	ra,8(sp)
   8de28:	df000117 	ldw	fp,4(sp)
   8de2c:	dc000017 	ldw	r16,0(sp)
   8de30:	dec00304 	addi	sp,sp,12
   8de34:	f800283a 	ret

0008de38 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   8de38:	defffb04 	addi	sp,sp,-20
   8de3c:	df000415 	stw	fp,16(sp)
   8de40:	df000404 	addi	fp,sp,16
   8de44:	e13ffe15 	stw	r4,-8(fp)
   8de48:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   8de4c:	e0bfff17 	ldw	r2,-4(fp)
   8de50:	10840070 	cmpltui	r2,r2,4097
   8de54:	1000021e 	bne	r2,zero,8de60 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   8de58:	00840004 	movi	r2,4096
   8de5c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   8de60:	e0fffe17 	ldw	r3,-8(fp)
   8de64:	e0bfff17 	ldw	r2,-4(fp)
   8de68:	1885883a 	add	r2,r3,r2
   8de6c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   8de70:	e0bffe17 	ldw	r2,-8(fp)
   8de74:	e0bffc15 	stw	r2,-16(fp)
   8de78:	00000506 	br	8de90 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   8de7c:	e0bffc17 	ldw	r2,-16(fp)
   8de80:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   8de84:	e0bffc17 	ldw	r2,-16(fp)
   8de88:	10800804 	addi	r2,r2,32
   8de8c:	e0bffc15 	stw	r2,-16(fp)
   8de90:	e0fffc17 	ldw	r3,-16(fp)
   8de94:	e0bffd17 	ldw	r2,-12(fp)
   8de98:	18bff836 	bltu	r3,r2,8de7c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   8de9c:	e0bffe17 	ldw	r2,-8(fp)
   8dea0:	108007cc 	andi	r2,r2,31
   8dea4:	10000226 	beq	r2,zero,8deb0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   8dea8:	e0bffc17 	ldw	r2,-16(fp)
   8deac:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   8deb0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   8deb4:	e037883a 	mov	sp,fp
   8deb8:	df000017 	ldw	fp,0(sp)
   8debc:	dec00104 	addi	sp,sp,4
   8dec0:	f800283a 	ret

0008dec4 <atexit>:
   8dec4:	200b883a 	mov	r5,r4
   8dec8:	000d883a 	mov	r6,zero
   8decc:	0009883a 	mov	r4,zero
   8ded0:	000f883a 	mov	r7,zero
   8ded4:	008df8c1 	jmpi	8df8c <__register_exitproc>

0008ded8 <exit>:
   8ded8:	defffe04 	addi	sp,sp,-8
   8dedc:	000b883a 	mov	r5,zero
   8dee0:	dc000015 	stw	r16,0(sp)
   8dee4:	dfc00115 	stw	ra,4(sp)
   8dee8:	2021883a 	mov	r16,r4
   8deec:	008e0bc0 	call	8e0bc <__call_exitprocs>
   8def0:	00800274 	movhi	r2,9
   8def4:	10823b04 	addi	r2,r2,2284
   8def8:	11000017 	ldw	r4,0(r2)
   8defc:	20800f17 	ldw	r2,60(r4)
   8df00:	10000126 	beq	r2,zero,8df08 <exit+0x30>
   8df04:	103ee83a 	callr	r2
   8df08:	8009883a 	mov	r4,r16
   8df0c:	008e25c0 	call	8e25c <_exit>

0008df10 <memcmp>:
   8df10:	01c000c4 	movi	r7,3
   8df14:	3980192e 	bgeu	r7,r6,8df7c <memcmp+0x6c>
   8df18:	2904b03a 	or	r2,r5,r4
   8df1c:	11c4703a 	and	r2,r2,r7
   8df20:	10000f26 	beq	r2,zero,8df60 <memcmp+0x50>
   8df24:	20c00003 	ldbu	r3,0(r4)
   8df28:	28800003 	ldbu	r2,0(r5)
   8df2c:	1880151e 	bne	r3,r2,8df84 <memcmp+0x74>
   8df30:	31bfff84 	addi	r6,r6,-2
   8df34:	01ffffc4 	movi	r7,-1
   8df38:	00000406 	br	8df4c <memcmp+0x3c>
   8df3c:	20c00003 	ldbu	r3,0(r4)
   8df40:	28800003 	ldbu	r2,0(r5)
   8df44:	31bfffc4 	addi	r6,r6,-1
   8df48:	18800e1e 	bne	r3,r2,8df84 <memcmp+0x74>
   8df4c:	21000044 	addi	r4,r4,1
   8df50:	29400044 	addi	r5,r5,1
   8df54:	31fff91e 	bne	r6,r7,8df3c <memcmp+0x2c>
   8df58:	0005883a 	mov	r2,zero
   8df5c:	f800283a 	ret
   8df60:	20c00017 	ldw	r3,0(r4)
   8df64:	28800017 	ldw	r2,0(r5)
   8df68:	1880041e 	bne	r3,r2,8df7c <memcmp+0x6c>
   8df6c:	31bfff04 	addi	r6,r6,-4
   8df70:	21000104 	addi	r4,r4,4
   8df74:	29400104 	addi	r5,r5,4
   8df78:	39bff936 	bltu	r7,r6,8df60 <memcmp+0x50>
   8df7c:	303fe91e 	bne	r6,zero,8df24 <memcmp+0x14>
   8df80:	003ff506 	br	8df58 <memcmp+0x48>
   8df84:	1885c83a 	sub	r2,r3,r2
   8df88:	f800283a 	ret

0008df8c <__register_exitproc>:
   8df8c:	defffa04 	addi	sp,sp,-24
   8df90:	00800274 	movhi	r2,9
   8df94:	10823b04 	addi	r2,r2,2284
   8df98:	dc000315 	stw	r16,12(sp)
   8df9c:	14000017 	ldw	r16,0(r2)
   8dfa0:	dc400415 	stw	r17,16(sp)
   8dfa4:	dfc00515 	stw	ra,20(sp)
   8dfa8:	80805217 	ldw	r2,328(r16)
   8dfac:	2023883a 	mov	r17,r4
   8dfb0:	10003e26 	beq	r2,zero,8e0ac <__register_exitproc+0x120>
   8dfb4:	10c00117 	ldw	r3,4(r2)
   8dfb8:	020007c4 	movi	r8,31
   8dfbc:	40c0180e 	bge	r8,r3,8e020 <__register_exitproc+0x94>
   8dfc0:	00800034 	movhi	r2,0
   8dfc4:	10800004 	addi	r2,r2,0
   8dfc8:	1000061e 	bne	r2,zero,8dfe4 <__register_exitproc+0x58>
   8dfcc:	00bfffc4 	movi	r2,-1
   8dfd0:	dfc00517 	ldw	ra,20(sp)
   8dfd4:	dc400417 	ldw	r17,16(sp)
   8dfd8:	dc000317 	ldw	r16,12(sp)
   8dfdc:	dec00604 	addi	sp,sp,24
   8dfe0:	f800283a 	ret
   8dfe4:	01006404 	movi	r4,400
   8dfe8:	d9400015 	stw	r5,0(sp)
   8dfec:	d9800115 	stw	r6,4(sp)
   8dff0:	d9c00215 	stw	r7,8(sp)
   8dff4:	00000000 	call	0 <__alt_mem_SDRAM_controller>
   8dff8:	d9400017 	ldw	r5,0(sp)
   8dffc:	d9800117 	ldw	r6,4(sp)
   8e000:	d9c00217 	ldw	r7,8(sp)
   8e004:	103ff126 	beq	r2,zero,8dfcc <__register_exitproc+0x40>
   8e008:	80c05217 	ldw	r3,328(r16)
   8e00c:	10000115 	stw	zero,4(r2)
   8e010:	10c00015 	stw	r3,0(r2)
   8e014:	80805215 	stw	r2,328(r16)
   8e018:	10006215 	stw	zero,392(r2)
   8e01c:	10006315 	stw	zero,396(r2)
   8e020:	10c00117 	ldw	r3,4(r2)
   8e024:	88000d1e 	bne	r17,zero,8e05c <__register_exitproc+0xd0>
   8e028:	19000084 	addi	r4,r3,2
   8e02c:	2109883a 	add	r4,r4,r4
   8e030:	18c00044 	addi	r3,r3,1
   8e034:	2109883a 	add	r4,r4,r4
   8e038:	1109883a 	add	r4,r2,r4
   8e03c:	10c00115 	stw	r3,4(r2)
   8e040:	0005883a 	mov	r2,zero
   8e044:	21400015 	stw	r5,0(r4)
   8e048:	dfc00517 	ldw	ra,20(sp)
   8e04c:	dc400417 	ldw	r17,16(sp)
   8e050:	dc000317 	ldw	r16,12(sp)
   8e054:	dec00604 	addi	sp,sp,24
   8e058:	f800283a 	ret
   8e05c:	02400044 	movi	r9,1
   8e060:	12806217 	ldw	r10,392(r2)
   8e064:	48d2983a 	sll	r9,r9,r3
   8e068:	19000804 	addi	r4,r3,32
   8e06c:	18d1883a 	add	r8,r3,r3
   8e070:	2109883a 	add	r4,r4,r4
   8e074:	4211883a 	add	r8,r8,r8
   8e078:	2109883a 	add	r4,r4,r4
   8e07c:	1109883a 	add	r4,r2,r4
   8e080:	1211883a 	add	r8,r2,r8
   8e084:	5254b03a 	or	r10,r10,r9
   8e088:	21c02215 	stw	r7,136(r4)
   8e08c:	41802215 	stw	r6,136(r8)
   8e090:	12806215 	stw	r10,392(r2)
   8e094:	01000084 	movi	r4,2
   8e098:	893fe31e 	bne	r17,r4,8e028 <__register_exitproc+0x9c>
   8e09c:	11006317 	ldw	r4,396(r2)
   8e0a0:	2252b03a 	or	r9,r4,r9
   8e0a4:	12406315 	stw	r9,396(r2)
   8e0a8:	003fdf06 	br	8e028 <__register_exitproc+0x9c>
   8e0ac:	00800274 	movhi	r2,9
   8e0b0:	108b4304 	addi	r2,r2,11532
   8e0b4:	80805215 	stw	r2,328(r16)
   8e0b8:	003fbe06 	br	8dfb4 <__register_exitproc+0x28>

0008e0bc <__call_exitprocs>:
   8e0bc:	00800274 	movhi	r2,9
   8e0c0:	10823b04 	addi	r2,r2,2284
   8e0c4:	10800017 	ldw	r2,0(r2)
   8e0c8:	defff304 	addi	sp,sp,-52
   8e0cc:	df000b15 	stw	fp,44(sp)
   8e0d0:	d8800015 	stw	r2,0(sp)
   8e0d4:	10805204 	addi	r2,r2,328
   8e0d8:	dd400815 	stw	r21,32(sp)
   8e0dc:	dfc00c15 	stw	ra,48(sp)
   8e0e0:	ddc00a15 	stw	r23,40(sp)
   8e0e4:	dd800915 	stw	r22,36(sp)
   8e0e8:	dd000715 	stw	r20,28(sp)
   8e0ec:	dcc00615 	stw	r19,24(sp)
   8e0f0:	dc800515 	stw	r18,20(sp)
   8e0f4:	dc400415 	stw	r17,16(sp)
   8e0f8:	dc000315 	stw	r16,12(sp)
   8e0fc:	d9000115 	stw	r4,4(sp)
   8e100:	2839883a 	mov	fp,r5
   8e104:	d8800215 	stw	r2,8(sp)
   8e108:	057fffc4 	movi	r21,-1
   8e10c:	d8800017 	ldw	r2,0(sp)
   8e110:	ddc00217 	ldw	r23,8(sp)
   8e114:	14805217 	ldw	r18,328(r2)
   8e118:	90001726 	beq	r18,zero,8e178 <__call_exitprocs+0xbc>
   8e11c:	94400117 	ldw	r17,4(r18)
   8e120:	8c3fffc4 	addi	r16,r17,-1
   8e124:	80001116 	blt	r16,zero,8e16c <__call_exitprocs+0xb0>
   8e128:	8c400044 	addi	r17,r17,1
   8e12c:	8427883a 	add	r19,r16,r16
   8e130:	8c63883a 	add	r17,r17,r17
   8e134:	95802204 	addi	r22,r18,136
   8e138:	9ce7883a 	add	r19,r19,r19
   8e13c:	8c63883a 	add	r17,r17,r17
   8e140:	b4e7883a 	add	r19,r22,r19
   8e144:	9463883a 	add	r17,r18,r17
   8e148:	e0001726 	beq	fp,zero,8e1a8 <__call_exitprocs+0xec>
   8e14c:	8c87c83a 	sub	r3,r17,r18
   8e150:	b0c7883a 	add	r3,r22,r3
   8e154:	18c01e17 	ldw	r3,120(r3)
   8e158:	1f001326 	beq	r3,fp,8e1a8 <__call_exitprocs+0xec>
   8e15c:	843fffc4 	addi	r16,r16,-1
   8e160:	9cffff04 	addi	r19,r19,-4
   8e164:	8c7fff04 	addi	r17,r17,-4
   8e168:	857ff71e 	bne	r16,r21,8e148 <__call_exitprocs+0x8c>
   8e16c:	00800034 	movhi	r2,0
   8e170:	10800004 	addi	r2,r2,0
   8e174:	10002a1e 	bne	r2,zero,8e220 <__call_exitprocs+0x164>
   8e178:	dfc00c17 	ldw	ra,48(sp)
   8e17c:	df000b17 	ldw	fp,44(sp)
   8e180:	ddc00a17 	ldw	r23,40(sp)
   8e184:	dd800917 	ldw	r22,36(sp)
   8e188:	dd400817 	ldw	r21,32(sp)
   8e18c:	dd000717 	ldw	r20,28(sp)
   8e190:	dcc00617 	ldw	r19,24(sp)
   8e194:	dc800517 	ldw	r18,20(sp)
   8e198:	dc400417 	ldw	r17,16(sp)
   8e19c:	dc000317 	ldw	r16,12(sp)
   8e1a0:	dec00d04 	addi	sp,sp,52
   8e1a4:	f800283a 	ret
   8e1a8:	91000117 	ldw	r4,4(r18)
   8e1ac:	88c00017 	ldw	r3,0(r17)
   8e1b0:	213fffc4 	addi	r4,r4,-1
   8e1b4:	24001526 	beq	r4,r16,8e20c <__call_exitprocs+0x150>
   8e1b8:	88000015 	stw	zero,0(r17)
   8e1bc:	183fe726 	beq	r3,zero,8e15c <__call_exitprocs+0xa0>
   8e1c0:	00800044 	movi	r2,1
   8e1c4:	1408983a 	sll	r4,r2,r16
   8e1c8:	91406217 	ldw	r5,392(r18)
   8e1cc:	95000117 	ldw	r20,4(r18)
   8e1d0:	214a703a 	and	r5,r4,r5
   8e1d4:	28000b26 	beq	r5,zero,8e204 <__call_exitprocs+0x148>
   8e1d8:	91406317 	ldw	r5,396(r18)
   8e1dc:	2148703a 	and	r4,r4,r5
   8e1e0:	20000c1e 	bne	r4,zero,8e214 <__call_exitprocs+0x158>
   8e1e4:	99400017 	ldw	r5,0(r19)
   8e1e8:	d9000117 	ldw	r4,4(sp)
   8e1ec:	183ee83a 	callr	r3
   8e1f0:	90c00117 	ldw	r3,4(r18)
   8e1f4:	1d3fc51e 	bne	r3,r20,8e10c <__call_exitprocs+0x50>
   8e1f8:	b8c00017 	ldw	r3,0(r23)
   8e1fc:	1cbfd726 	beq	r3,r18,8e15c <__call_exitprocs+0xa0>
   8e200:	003fc206 	br	8e10c <__call_exitprocs+0x50>
   8e204:	183ee83a 	callr	r3
   8e208:	003ff906 	br	8e1f0 <__call_exitprocs+0x134>
   8e20c:	94000115 	stw	r16,4(r18)
   8e210:	003fea06 	br	8e1bc <__call_exitprocs+0x100>
   8e214:	99000017 	ldw	r4,0(r19)
   8e218:	183ee83a 	callr	r3
   8e21c:	003ff406 	br	8e1f0 <__call_exitprocs+0x134>
   8e220:	90c00117 	ldw	r3,4(r18)
   8e224:	1800071e 	bne	r3,zero,8e244 <__call_exitprocs+0x188>
   8e228:	90c00017 	ldw	r3,0(r18)
   8e22c:	18000926 	beq	r3,zero,8e254 <__call_exitprocs+0x198>
   8e230:	9009883a 	mov	r4,r18
   8e234:	b8c00015 	stw	r3,0(r23)
   8e238:	00000000 	call	0 <__alt_mem_SDRAM_controller>
   8e23c:	bc800017 	ldw	r18,0(r23)
   8e240:	003fb506 	br	8e118 <__call_exitprocs+0x5c>
   8e244:	90c00017 	ldw	r3,0(r18)
   8e248:	902f883a 	mov	r23,r18
   8e24c:	1825883a 	mov	r18,r3
   8e250:	003fb106 	br	8e118 <__call_exitprocs+0x5c>
   8e254:	0007883a 	mov	r3,zero
   8e258:	003ffb06 	br	8e248 <__call_exitprocs+0x18c>

0008e25c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8e25c:	defffc04 	addi	sp,sp,-16
   8e260:	df000315 	stw	fp,12(sp)
   8e264:	df000304 	addi	fp,sp,12
   8e268:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   8e26c:	0001883a 	nop
   8e270:	e0bfff17 	ldw	r2,-4(fp)
   8e274:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   8e278:	e0bffd17 	ldw	r2,-12(fp)
   8e27c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8e280:	e0bffe17 	ldw	r2,-8(fp)
   8e284:	10000226 	beq	r2,zero,8e290 <_exit+0x34>
    ALT_SIM_FAIL();
   8e288:	002af070 	cmpltui	zero,zero,43969
   8e28c:	00000106 	br	8e294 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   8e290:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8e294:	003fff06 	br	8e294 <_exit+0x38>
