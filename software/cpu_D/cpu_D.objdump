
cpu_D.elf:     file format elf32-littlenios2
cpu_D.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000601b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00060000 paddr 0x00060000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00060020 paddr 0x00060020 align 2**12
         filesz 0x0000df44 memsz 0x0000df44 flags r-x
    LOAD off    0x0000ef64 vaddr 0x0006df64 paddr 0x0006f9fc align 2**12
         filesz 0x00001a98 memsz 0x00001a98 flags rw-
    LOAD off    0x00011494 vaddr 0x00071494 paddr 0x00071494 align 2**12
         filesz 0x00000000 memsz 0x000004fc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00060000  00060000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00060020  00060020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d904  000601b8  000601b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004a8  0006dabc  0006dabc  0000eabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a98  0006df64  0006f9fc  0000ef64  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000004fc  00071494  00071494  00011494  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000109fc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e38  00000000  00000000  00010a20  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00023a8c  00000000  00000000  00011858  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000093d7  00000000  00000000  000352e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a821  00000000  00000000  0003e6bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002084  00000000  00000000  00048edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003395  00000000  00000000  0004af60  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001191f  00000000  00000000  0004e2f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  0005fc14  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005fc68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000640fa  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  000640fd  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00064102  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00064103  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00064104  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00064108  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0006410c  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000006  00000000  00000000  00064110  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000006  00000000  00000000  00064116  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000006  00000000  00000000  0006411c  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000006  00000000  00000000  00064122  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001d  00000000  00000000  00064128  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     001b94d0  00000000  00000000  00064145  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00060000 l    d  .entry	00000000 .entry
00060020 l    d  .exceptions	00000000 .exceptions
000601b8 l    d  .text	00000000 .text
0006dabc l    d  .rodata	00000000 .rodata
0006df64 l    d  .rwdata	00000000 .rwdata
00071494 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu_D_bsp//obj/HAL/src/crt0.o
000601f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00060094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 IOMap.c
00000000 l    df *ABS*	00000000 utility.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000617a8 l     F .text	00000034 __sprint_r
0006dc92 l     O .rodata	00000010 blanks.3515
0006dca2 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000637f0 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00065260 l     F .text	00000008 __fp_lock
00065268 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0006dfa4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0006dcd8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0006de20 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00069704 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0006a444 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0006abb0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0006accc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0006acf8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0006adf8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0006aeec l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0006afd8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0006b1b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0006f9ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0006b458 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0006b598 l     F .text	00000038 alt_dev_reg
0006e960 l     O .rwdata	00001060 jtag_D
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0006bdac l     F .text	00000204 altera_avalon_jtag_uart_irq
0006bfb0 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0006c5ec l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0006c998 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0006ce38 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0006cf90 l     F .text	00000050 alt_get_errno
0006cfe0 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0006125c g     F .text	00000030 readStatus_DE
00067be0 g     F .text	00000074 _mprec_log10
00067cd0 g     F .text	00000084 __any_on
00068950 g     F .text	00000064 _isatty_r
0006dd08 g     O .rodata	00000028 __mprec_tinytens
0006b0fc g     F .text	00000078 alt_main
0006ab6c g     F .text	00000044 __ashldi3
00061684 g     F .text	00000084 _puts_r
00071494 g     O .bss	00000004 t
00071700 g     O .bss	00000100 alt_irq
000689b4 g     F .text	0000006c _lseek_r
00060674 g     F .text	00000104 quantization
0006b918 g     F .text	00000058 altera_avalon_fifo_write_almostfull
0006f9fc g       *ABS*	00000000 __flash_rwdata_start
00060e30 g     F .text	0000004c write_AE
00069fa4 g     F .text	0000005c __eqdf2
00071990 g       *ABS*	00000000 __alt_heap_start
00061648 g     F .text	0000003c printf
000684f4 g     F .text	0000005c __sseek
00065304 g     F .text	0000010c __sinit
00065f9c g     F .text	0000009c _setlocale_r
000611cc g     F .text	00000044 read_DE
0006527c g     F .text	00000078 __sfmoreglue
0006b194 g     F .text	00000020 __malloc_unlock
00060260 g     F .text	00000094 processLoop
000714c8 g     O .bss	00000004 altera_avalon_timer_ts_freq
00066a9c g     F .text	0000018c memmove
0006b698 g     F .text	00000098 altera_avalon_fifo_init
000652f4 g     F .text	00000010 _cleanup
0006b9c8 g     F .text	00000058 altera_avalon_fifo_write_fifo
00066d04 g     F .text	000000a8 _Balloc
00061118 g     F .text	0000004c write_CD
00060fa4 g     F .text	00000038 init_BC
0006a05c g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00060000 g     F .entry	0000001c __reset
0006bb60 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00060020 g       *ABS*	00000000 __flash_exceptions_start
000688e8 g     F .text	00000068 _fstat_r
000714b4 g     O .bss	00000004 errno
000714bc g     O .bss	00000004 alt_argv
000779c0 g       *ABS*	00000000 _gp
0006b428 g     F .text	00000030 usleep
0006b864 g     F .text	0000005c altera_avalon_fifo_clear_event
00060acc g     F .text	00000038 init_AB_1
000610d4 g     F .text	00000044 read_CD
0006e7e0 g     O .rwdata	00000180 alt_fd_list
00060a10 g     F .text	00000044 read_AB_0
0006d3e4 g     F .text	00000090 alt_find_dev
000614dc g     F .text	00000140 memcpy
00065270 g     F .text	0000000c _cleanup_r
0006a180 g     F .text	000000d4 __floatsidf
0006106c g     F .text	00000030 readStatus_BC
0006cf18 g     F .text	00000078 alt_io_redirect
0006a124 g     F .text	0000005c __ltdf2
00060db4 g     F .text	00000038 init_AE
0006dabc g       *ABS*	00000000 __DTOR_END__
00061708 g     F .text	00000014 puts
00067b3c g     F .text	000000a4 __ratio
0006c1b0 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0006161c g     F .text	0000002c _printf_r
0006a564 g     F .text	00000008 __udivsi3
0006ae48 g     F .text	000000a4 isatty
0006dd58 g     O .rodata	000000c8 __mprec_tens
0006085c g     F .text	0000006c READ_B
00066038 g     F .text	0000000c __locale_charset
0006d65c g     F .text	0000008c alt_icache_flush
00060f74 g     F .text	00000030 readStatus_AF
000714b0 g     O .bss	00000004 __malloc_top_pad
0006038c g     F .text	000002e8 initialize_quantization_tables
0006f9c8 g     O .rwdata	00000004 __mb_cur_max
00066044 g     F .text	0000000c _localeconv_r
00067134 g     F .text	0000003c __i2b
00065958 g     F .text	000004e4 __sfvwrite_r
000683b4 g     F .text	00000064 _sbrk_r
00060a54 g     F .text	00000048 write_AB_0
00071500 g     O .bss	00000080 Temp
00061194 g     F .text	00000038 init_DE
00068a20 g     F .text	0000006c _read_r
0006e3a4 g     O .rwdata	0000000c __lc_ctype
0006f9e4 g     O .rwdata	00000004 alt_max_fd
0006a954 g     F .text	00000104 __unpack_d
00068798 g     F .text	0000013c _fclose_r
00065230 g     F .text	00000030 fflush
000714ac g     O .bss	00000004 __malloc_max_sbrked_mem
00069a58 g     F .text	00000054 __adddf3
000678b0 g     F .text	00000148 __b2d
000690dc g     F .text	00000628 __umoddi3
00060cf4 g     F .text	00000044 read_AD
0006b028 g     F .text	000000d4 lseek
00060eac g     F .text	00000038 init_AF
0006f9c0 g     O .rwdata	00000004 _global_impure_ptr
00067d54 g     F .text	000005fc _realloc_r
00071990 g       *ABS*	00000000 __bss_end
0006cd48 g     F .text	000000f0 alt_iic_isr_register
0006d2c0 g     F .text	00000104 alt_tick
00068a8c g     F .text	00000650 __udivdi3
0006dd30 g     O .rodata	00000028 __mprec_bigtens
00066f18 g     F .text	00000104 __s2b
00060ee4 g     F .text	00000044 read_AF
00060b48 g     F .text	0000004c write_AB_1
0006a328 g     F .text	0000011c __floatunsidf
00067650 g     F .text	00000058 __mcmp
0006551c g     F .text	00000018 __fp_lock_all
0006ccfc g     F .text	0000004c alt_ic_irq_enabled
00060908 g     F .text	0000001c FIFO_INIT
0006d228 g     F .text	00000098 alt_alarm_stop
000714cc g     O .bss	00000004 alt_irq_active
00060d38 g     F .text	0000004c write_AD
000600ec g     F .exceptions	000000cc alt_irq_handler
0006e7b8 g     O .rwdata	00000028 alt_dev_null
0006c97c g     F .text	0000001c alt_dcache_flush_all
0006701c g     F .text	00000068 __hi0bits
00071580 g     O .bss	00000040 Lqt
0006a254 g     F .text	000000d4 __fixdfsi
0006b8c0 g     F .text	00000058 altera_avalon_fifo_write_ienable
0006f9fc g       *ABS*	00000000 __ram_rwdata_end
0006b7d4 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00061164 g     F .text	00000030 readStatus_CD
0006f9dc g     O .rwdata	00000008 alt_dev_list
0006b4a8 g     F .text	000000f0 write
00061308 g     F .text	0000004c write_EF
0006df64 g       *ABS*	00000000 __ram_rodata_end
0006ad48 g     F .text	000000b0 fstat
0006ab28 g     F .text	00000044 __lshrdi3
00060dec g     F .text	00000044 read_AE
000673c8 g     F .text	0000012c __pow5mult
000714a4 g     O .bss	00000004 __nlocale_changed
0006a56c g     F .text	00000008 __umodsi3
00071990 g       *ABS*	00000000 end
0006128c g     F .text	00000038 init_EF
00060b94 g     F .text	00000030 readStatus_AB_1
0006bcec g     F .text	000000c0 altera_avalon_jtag_uart_init
0006b800 g     F .text	0000003c altera_avalon_fifo_read_event
0006dabc g       *ABS*	00000000 __CTOR_LIST__
00080000 g       *ABS*	00000000 __alt_stack_pointer
0006c660 g     F .text	00000088 alt_avalon_timer_sc_init
0006a684 g     F .text	000000ac __clzsi2
0006c3c8 g     F .text	00000224 altera_avalon_jtag_uart_write
00071498 g     O .bss	00000004 input_fifo_wrclk_irq_event
0006550c g     F .text	00000004 __sfp_lock_acquire
0006ba8c g     F .text	0000004c altera_avalon_fifo_read_fifo
000669a4 g     F .text	000000f8 memchr
000617dc g     F .text	00001e7c ___vfprintf_internal_r
00065688 g     F .text	000002d0 _free_r
0006d8e0 g     F .text	000001a0 __call_exitprocs
000602f4 g     F .text	00000098 DSP_Division
000714a0 g     O .bss	00000004 __mlocale_changed
0006f9cc g     O .rwdata	00000004 __malloc_sbrk_base
000601b8 g     F .text	0000003c _start
000714d0 g     O .bss	00000004 _alt_tick_rate
000674f4 g     F .text	0000015c __lshift
000714d4 g     O .bss	00000004 _alt_nticks
0006b204 g     F .text	000000f4 read
0006b604 g     F .text	00000094 alt_sys_init
0006d7b0 g     F .text	00000130 __register_exitproc
00067170 g     F .text	00000258 __multiply
0006c054 g     F .text	00000068 altera_avalon_jtag_uart_close
000614b4 g     F .text	00000028 __mulsi3
0006df64 g       *ABS*	00000000 __ram_rwdata_start
0006dabc g       *ABS*	00000000 __ram_rodata_start
000714d8 g     O .bss	00000028 __malloc_current_mallinfo
000679f8 g     F .text	00000144 __d2b
00060778 g     F .text	0000006c INIT_B
00061354 g     F .text	00000030 readStatus_EF
0006bb88 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0006d588 g     F .text	000000d4 alt_get_fd
0006c828 g     F .text	00000154 alt_busy_sleep
0006aa58 g     F .text	000000d0 __fpcmp_parts_d
00068734 g     F .text	00000064 _close_r
0006d734 g     F .text	0000007c memcmp
0006bc48 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00071990 g       *ABS*	00000000 __alt_stack_base
0006bc98 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00060924 g     F .text	000000b4 print_status
0006367c g     F .text	00000174 __swsetup_r
0006b730 g     F .text	0000003c altera_avalon_fifo_read_status
00069df0 g     F .text	000001b4 __divdf3
00065410 g     F .text	000000fc __sfp
00067c54 g     F .text	0000007c __copybits
0006e3b0 g     O .rwdata	00000408 __malloc_av_
00065518 g     F .text	00000004 __sinit_lock_release
00069b0c g     F .text	000002e4 __muldf3
00068418 g     F .text	00000054 __sread
00060b04 g     F .text	00000044 read_AB_1
0006bb34 g     F .text	0000002c altera_avalon_fifo_read_other_info
0006d474 g     F .text	00000114 alt_find_file
0006c9e8 g     F .text	000000a0 alt_dev_llist_insert
0006b174 g     F .text	00000020 __malloc_lock
0006b378 g     F .text	000000b0 sbrk
00065048 g     F .text	000001e8 _fflush_r
00068668 g     F .text	000000cc _calloc_r
00071494 g       *ABS*	00000000 __bss_start
00066c28 g     F .text	000000dc memset
00060228 g     F .text	00000038 main
000715c0 g     O .bss	00000080 ILqt
000714c0 g     O .bss	00000004 alt_envp
000714a8 g     O .bss	00000004 __malloc_max_total_mem
0006bbe8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0006b83c g     F .text	00000028 altera_avalon_fifo_read_level
00061210 g     F .text	0000004c write_DE
000612c4 g     F .text	00000044 read_EF
00068550 g     F .text	00000008 __sclose
00080000 g       *ABS*	00000000 __alt_heap_limit
000688d4 g     F .text	00000014 fclose
00060bc4 g     F .text	00000038 init_AB_2
000609d8 g     F .text	00000038 init_AB_0
00071800 g     O .bss	00000190 _atexit0
00061458 g     F .text	0000005c ledBlink
00063a2c g     F .text	0000161c _dtoa_r
00066220 g     F .text	00000784 _malloc_r
0006f9e8 g     O .rwdata	00000004 alt_errno
00060e7c g     F .text	00000030 readStatus_AE
00065e3c g     F .text	000000a8 _fwalk
0006a4b8 g     F .text	00000050 __divsi3
0006de2c g     O .rodata	00000014 __thenan_df
0006554c g     F .text	0000013c _malloc_trim_r
0006dabc g       *ABS*	00000000 __CTOR_END__
00068558 g     F .text	000000a4 strcmp
00060cbc g     F .text	00000038 init_AD
0006dabc g       *ABS*	00000000 __flash_rodata_start
00060f28 g     F .text	0000004c write_AF
0006dabc g       *ABS*	00000000 __DTOR_LIST__
00061384 g     F .text	0000003c delay
0006a000 g     F .text	0000005c __nedf2
00000000 g       *ABS*	00000000 __alt_mem_SDRAM_controller
0006b5d0 g     F .text	00000034 alt_irq_init
00060c40 g     F .text	0000004c write_AB_2
0006b2f8 g     F .text	00000080 alt_release_fd
0006de40 g     O .rodata	00000100 __clz_tab
0007149c g     O .bss	00000004 _PathLocale
00060a9c g     F .text	00000030 readStatus_AB_0
0006d6e8 g     F .text	00000014 atexit
000685fc g     F .text	0000006c _write_r
00066050 g     F .text	0000001c setlocale
000601f4 g     F .text	00000034 SEND
00060fdc g     F .text	00000044 read_BC
0006f9c4 g     O .rwdata	00000004 _impure_ptr
000714b8 g     O .bss	00000004 alt_argc
000714c4 g     O .bss	00000004 altera_avalon_timer_ts_base
0006cae4 g     F .text	0000005c _do_dtors
00071640 g     O .bss	00000040 Cqt
000608e8 g     F .text	00000020 READ_FIFO
0006df64 g     O .rwdata	00000040 zigzag_table
00060020 g       .exceptions	00000000 alt_irq_entry
00067850 g     F .text	00000060 __ulp
00068350 g     F .text	00000038 __isinfd
00065534 g     F .text	00000018 __fp_unlock_all
0006f9d4 g     O .rwdata	00000008 alt_fs_list
000613c0 g     F .text	00000098 ledUpdate
00060020 g       *ABS*	00000000 __ram_exceptions_start
0006606c g     F .text	0000000c localeconv
0006bad8 g     F .text	0000005c altera_avalon_fifo_write_other_info
0006cb70 g     F .text	00000050 alt_ic_isr_register
00060d84 g     F .text	00000030 readStatus_AD
0006f9fc g       *ABS*	00000000 _edata
00071990 g       *ABS*	00000000 _end
000601b8 g       *ABS*	00000000 __ram_exceptions_end
0006c0bc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00060bfc g     F .text	00000044 read_AB_2
0006cc5c g     F .text	000000a0 alt_ic_irq_disable
0006846c g     F .text	00000088 __swrite
0006f9d0 g     O .rwdata	00000004 __malloc_trim_threshold
0006d3c4 g     F .text	00000020 altera_nios2_qsys_irq_init
0006d6fc g     F .text	00000038 exit
00065ee4 g     F .text	000000b8 _fwalk_reent
000676a8 g     F .text	000001a8 __mdiff
0006a508 g     F .text	0000005c __modsi3
0006b76c g     F .text	0000003c altera_avalon_fifo_read_ienable
00080000 g       *ABS*	00000000 __alt_data_end
00060020 g     F .exceptions	00000000 alt_exception
00065510 g     F .text	00000004 __sfp_lock_release
000607e4 g     F .text	00000078 WRITE_B
00071680 g     O .bss	00000080 ICqt
0006da80 g     F .text	0000003c _exit
00068388 g     F .text	0000002c __isnand
0006c6e8 g     F .text	00000140 alt_alarm_start
0006a574 g     F .text	00000110 __muldi3
0006b7a8 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00066078 g     F .text	000001a8 __smakebuf_r
0006171c g     F .text	0000008c strlen
0006d0d0 g     F .text	00000158 open
0006ba20 g     F .text	0000006c altera_avalon_read_fifo
0006a0c0 g     F .text	00000064 __gedf2
0006109c g     F .text	00000038 init_CD
0006cb40 g     F .text	00000030 alt_icache_flush_all
000608c8 g     F .text	00000020 WRITE_FIFO
0006f9f0 g     O .rwdata	00000004 alt_priority_mask
0006cbc0 g     F .text	0000009c alt_ic_irq_enable
00063658 g     F .text	00000024 __vfprintf_internal
00060c8c g     F .text	00000030 readStatus_AB_2
00061020 g     F .text	0000004c write_BC
00069aac g     F .text	00000060 __subdf3
00067084 g     F .text	000000b0 __lo0bits
0006b970 g     F .text	00000058 altera_avalon_fifo_write_almostempty
0006f9f4 g     O .rwdata	00000008 alt_alarm_list
0006ca88 g     F .text	0000005c _do_ctors
0006ac00 g     F .text	000000cc close
0006af58 g     F .text	00000080 alt_load
0006a730 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
00065514 g     F .text	00000004 __sinit_lock_acquire
00066dd4 g     F .text	00000144 __multadd
00066dac g     F .text	00000028 _Bfree



Disassembly of section .entry:

00060000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   60000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   60004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   60008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   6000c:	00bffd16 	blt	zero,r2,60004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   60010:	004001b4 	movhi	at,6
    ori r1, r1, %lo(_start)
   60014:	08406e14 	ori	at,at,440
    jmp r1
   60018:	0800683a 	jmp	at
   6001c:	00000000 	call	0 <__alt_mem_SDRAM_controller>

Disassembly of section .exceptions:

00060020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   60020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   60024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   60028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   6002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   60030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   60034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   60038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   6003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   60040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   60044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   60048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   6004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   60050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   60054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   60058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   6005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   60060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   60064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   60068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   6006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   60070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   60074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   60078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   6007c:	10000326 	beq	r2,zero,6008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   60080:	20000226 	beq	r4,zero,6008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   60084:	00600ec0 	call	600ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   60088:	00000306 	br	60098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   6008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   60090:	e8bfff17 	ldw	r2,-4(ea)

00060094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   60094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   60098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   6009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   600a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   600a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   600a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   600ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   600b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   600b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   600b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   600bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   600c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   600c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   600c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   600cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   600d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   600d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   600d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   600dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   600e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   600e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   600e8:	ef80083a 	eret

000600ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   600ec:	defff904 	addi	sp,sp,-28
   600f0:	dfc00615 	stw	ra,24(sp)
   600f4:	df000515 	stw	fp,20(sp)
   600f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   600fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   60100:	0005313a 	rdctl	r2,ipending
   60104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   60108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   6010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   60110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   60114:	00800044 	movi	r2,1
   60118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   6011c:	e0fffb17 	ldw	r3,-20(fp)
   60120:	e0bffc17 	ldw	r2,-16(fp)
   60124:	1884703a 	and	r2,r3,r2
   60128:	10001726 	beq	r2,zero,60188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   6012c:	00c001f4 	movhi	r3,7
   60130:	18c5c004 	addi	r3,r3,5888
   60134:	e0bffd17 	ldw	r2,-12(fp)
   60138:	100490fa 	slli	r2,r2,3
   6013c:	1885883a 	add	r2,r3,r2
   60140:	10c00017 	ldw	r3,0(r2)
   60144:	010001f4 	movhi	r4,7
   60148:	2105c004 	addi	r4,r4,5888
   6014c:	e0bffd17 	ldw	r2,-12(fp)
   60150:	100490fa 	slli	r2,r2,3
   60154:	2085883a 	add	r2,r4,r2
   60158:	10800104 	addi	r2,r2,4
   6015c:	10800017 	ldw	r2,0(r2)
   60160:	1009883a 	mov	r4,r2
   60164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   60168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   6016c:	0005313a 	rdctl	r2,ipending
   60170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   60174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   60178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   6017c:	e0bffb17 	ldw	r2,-20(fp)
   60180:	103fe31e 	bne	r2,zero,60110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   60184:	00000706 	br	601a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   60188:	e0bffc17 	ldw	r2,-16(fp)
   6018c:	1085883a 	add	r2,r2,r2
   60190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   60194:	e0bffd17 	ldw	r2,-12(fp)
   60198:	10800044 	addi	r2,r2,1
   6019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   601a0:	003fde06 	br	6011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   601a4:	e037883a 	mov	sp,fp
   601a8:	dfc00117 	ldw	ra,4(sp)
   601ac:	df000017 	ldw	fp,0(sp)
   601b0:	dec00204 	addi	sp,sp,8
   601b4:	f800283a 	ret

Disassembly of section .text:

000601b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   601b8:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   601bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   601c0:	068001f4 	movhi	gp,7
    ori gp, gp, %lo(_gp)
   601c4:	d69e7014 	ori	gp,gp,31168
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   601c8:	008001f4 	movhi	r2,7
    ori r2, r2, %lo(__bss_start)
   601cc:	10852514 	ori	r2,r2,5268

    movhi r3, %hi(__bss_end)
   601d0:	00c001f4 	movhi	r3,7
    ori r3, r3, %lo(__bss_end)
   601d4:	18c66414 	ori	r3,r3,6544

    beq r2, r3, 1f
   601d8:	10c00326 	beq	r2,r3,601e8 <_start+0x30>

0:
    stw zero, (r2)
   601dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   601e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   601e4:	10fffd36 	bltu	r2,r3,601dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   601e8:	006af580 	call	6af58 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   601ec:	006b0fc0 	call	6b0fc <alt_main>

000601f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   601f0:	003fff06 	br	601f0 <alt_after_alt_main>

000601f4 <SEND>:
void processLoop();
uint16_t DSP_Division(uint32_t numer, uint32_t denom);
void initialize_quantization_tables (void);
void quantization(uint16_t* const quant_table_ptr);

void SEND(uint8_t val){
   601f4:	defffd04 	addi	sp,sp,-12
   601f8:	dfc00215 	stw	ra,8(sp)
   601fc:	df000115 	stw	fp,4(sp)
   60200:	df000104 	addi	fp,sp,4
   60204:	2005883a 	mov	r2,r4
   60208:	e0bfff05 	stb	r2,-4(fp)
	write_DE(&val);
   6020c:	e13fff04 	addi	r4,fp,-4
   60210:	00612100 	call	61210 <write_DE>
}
   60214:	e037883a 	mov	sp,fp
   60218:	dfc00117 	ldw	ra,4(sp)
   6021c:	df000017 	ldw	fp,0(sp)
   60220:	dec00204 	addi	sp,sp,8
   60224:	f800283a 	ret

00060228 <main>:

int main(void){
   60228:	defffe04 	addi	sp,sp,-8
   6022c:	dfc00115 	stw	ra,4(sp)
   60230:	df000015 	stw	fp,0(sp)
   60234:	d839883a 	mov	fp,sp

	printf("Hardware JSoC_D begins\n\n");
   60238:	010001f4 	movhi	r4,7
   6023c:	2136af04 	addi	r4,r4,-9540
   60240:	00617080 	call	61708 <puts>

	init_AD();
   60244:	0060cbc0 	call	60cbc <init_AD>
	init_CD();
   60248:	006109c0 	call	6109c <init_CD>
	init_DE();
   6024c:	00611940 	call	61194 <init_DE>

	ledBlink(4);
   60250:	01000104 	movi	r4,4
   60254:	00614580 	call	61458 <ledBlink>

	while(1){
		processLoop();
   60258:	00602600 	call	60260 <processLoop>
	}
   6025c:	003ffe06 	br	60258 <main+0x30>

00060260 <processLoop>:
	return 0;
}

void processLoop(){
   60260:	defffd04 	addi	sp,sp,-12
   60264:	dfc00215 	stw	ra,8(sp)
   60268:	df000115 	stw	fp,4(sp)
   6026c:	df000104 	addi	fp,sp,4
	uint32_t count  = (uint32_t)read_AD(); // RECV1();
   60270:	0060cf40 	call	60cf4 <read_AD>
   60274:	e0bfff15 	stw	r2,-4(fp)
	ledBlink(4);
   60278:	01000104 	movi	r4,4
   6027c:	00614580 	call	61458 <ledBlink>
	printf("Count: %d\n", count);
   60280:	010001f4 	movhi	r4,7
   60284:	2136b504 	addi	r4,r4,-9516
   60288:	e17fff17 	ldw	r5,-4(fp)
   6028c:	00616480 	call	61648 <printf>

	initialize_quantization_tables();
   60290:	006038c0 	call	6038c <initialize_quantization_tables>

	for(;count>0;count--){
   60294:	00000e06 	br	602d0 <processLoop+0x70>
		quantization(ILqt);
   60298:	010001f4 	movhi	r4,7
   6029c:	21057004 	addi	r4,r4,5568
   602a0:	00606740 	call	60674 <quantization>
		quantization(ICqt);
   602a4:	010001f4 	movhi	r4,7
   602a8:	2105a004 	addi	r4,r4,5760
   602ac:	00606740 	call	60674 <quantization>
		quantization(ICqt);
   602b0:	010001f4 	movhi	r4,7
   602b4:	2105a004 	addi	r4,r4,5760
   602b8:	00606740 	call	60674 <quantization>
		ledBlink(4);
   602bc:	01000104 	movi	r4,4
   602c0:	00614580 	call	61458 <ledBlink>
	ledBlink(4);
	printf("Count: %d\n", count);

	initialize_quantization_tables();

	for(;count>0;count--){
   602c4:	e0bfff17 	ldw	r2,-4(fp)
   602c8:	10bfffc4 	addi	r2,r2,-1
   602cc:	e0bfff15 	stw	r2,-4(fp)
   602d0:	e0bfff17 	ldw	r2,-4(fp)
   602d4:	103ff01e 	bne	r2,zero,60298 <processLoop+0x38>
		quantization(ICqt);
		quantization(ICqt);
		ledBlink(4);
	}

	ledBlink(4);
   602d8:	01000104 	movi	r4,4
   602dc:	00614580 	call	61458 <ledBlink>
}
   602e0:	e037883a 	mov	sp,fp
   602e4:	dfc00117 	ldw	ra,4(sp)
   602e8:	df000017 	ldw	fp,0(sp)
   602ec:	dec00204 	addi	sp,sp,8
   602f0:	f800283a 	ret

000602f4 <DSP_Division>:



/*	This function implements 16 Step division for Q.15 format data */
uint16_t DSP_Division(uint32_t numer, uint32_t denom){
   602f4:	defffc04 	addi	sp,sp,-16
   602f8:	df000315 	stw	fp,12(sp)
   602fc:	df000304 	addi	fp,sp,12
   60300:	e13ffe15 	stw	r4,-8(fp)
   60304:	e17fff15 	stw	r5,-4(fp)
	uint16_t i;
	denom <<= 15;
   60308:	e0bfff17 	ldw	r2,-4(fp)
   6030c:	100493fa 	slli	r2,r2,15
   60310:	e0bfff15 	stw	r2,-4(fp)

	for (i=16; i>0; i--){
   60314:	00800404 	movi	r2,16
   60318:	e0bffd0d 	sth	r2,-12(fp)
   6031c:	00001406 	br	60370 <DSP_Division+0x7c>
		if (numer > denom){
   60320:	e0bffe17 	ldw	r2,-8(fp)
   60324:	e0ffff17 	ldw	r3,-4(fp)
   60328:	18800b2e 	bgeu	r3,r2,60358 <DSP_Division+0x64>
			numer -= denom;
   6032c:	e0fffe17 	ldw	r3,-8(fp)
   60330:	e0bfff17 	ldw	r2,-4(fp)
   60334:	1885c83a 	sub	r2,r3,r2
   60338:	e0bffe15 	stw	r2,-8(fp)
			numer <<= 1;
   6033c:	e0bffe17 	ldw	r2,-8(fp)
   60340:	1085883a 	add	r2,r2,r2
   60344:	e0bffe15 	stw	r2,-8(fp)
			numer++;
   60348:	e0bffe17 	ldw	r2,-8(fp)
   6034c:	10800044 	addi	r2,r2,1
   60350:	e0bffe15 	stw	r2,-8(fp)
   60354:	00000306 	br	60364 <DSP_Division+0x70>
		}else{
			numer <<= 1;
   60358:	e0bffe17 	ldw	r2,-8(fp)
   6035c:	1085883a 	add	r2,r2,r2
   60360:	e0bffe15 	stw	r2,-8(fp)
/*	This function implements 16 Step division for Q.15 format data */
uint16_t DSP_Division(uint32_t numer, uint32_t denom){
	uint16_t i;
	denom <<= 15;

	for (i=16; i>0; i--){
   60364:	e0bffd0b 	ldhu	r2,-12(fp)
   60368:	10bfffc4 	addi	r2,r2,-1
   6036c:	e0bffd0d 	sth	r2,-12(fp)
   60370:	e0bffd0b 	ldhu	r2,-12(fp)
   60374:	103fea1e 	bne	r2,zero,60320 <DSP_Division+0x2c>
			numer++;
		}else{
			numer <<= 1;
		}
	}
	return (uint16_t) numer;
   60378:	e0bffe17 	ldw	r2,-8(fp)
}
   6037c:	e037883a 	mov	sp,fp
   60380:	df000017 	ldw	fp,0(sp)
   60384:	dec00104 	addi	sp,sp,4
   60388:	f800283a 	ret

0006038c <initialize_quantization_tables>:

/* Multiply Quantization table with quality factor to get LQT and CQT */
void initialize_quantization_tables(void){
   6038c:	deffd904 	addi	sp,sp,-156
   60390:	dfc02615 	stw	ra,152(sp)
   60394:	df002515 	stw	fp,148(sp)
   60398:	dc002415 	stw	r16,144(sp)
   6039c:	df002404 	addi	fp,sp,144

	uint16_t i, index;
	uint32_t value;

	uint8_t luminance_quant_table [] ={
   603a0:	008001f4 	movhi	r2,7
   603a4:	10b6d044 	addi	r2,r2,-9407
   603a8:	e13fdf84 	addi	r4,fp,-130
   603ac:	1007883a 	mov	r3,r2
   603b0:	00801004 	movi	r2,64
   603b4:	180b883a 	mov	r5,r3
   603b8:	100d883a 	mov	r6,r2
   603bc:	00614dc0 	call	614dc <memcpy>
		24, 35, 55, 64,  81, 104, 113,  92,
		49, 64, 78, 87, 103, 121, 120, 101,
		72, 92, 95, 98, 112, 100, 103,  99
	};

	uint8_t chrominance_quant_table [] =
   603c0:	008001f4 	movhi	r2,7
   603c4:	10b6e044 	addi	r2,r2,-9343
   603c8:	e13fef84 	addi	r4,fp,-66
   603cc:	1007883a 	mov	r3,r2
   603d0:	00801004 	movi	r2,64
   603d4:	180b883a 	mov	r5,r3
   603d8:	100d883a 	mov	r6,r2
   603dc:	00614dc0 	call	614dc <memcpy>
		99, 99, 99, 99, 99, 99, 99, 99,
		99, 99, 99, 99, 99, 99, 99, 99,
		99, 99, 99, 99, 99, 99, 99, 99
	};

	uint32_t quality_factor = (uint32_t)read_CD();
   603e0:	00610d40 	call	610d4 <read_CD>
   603e4:	e0bfde15 	stw	r2,-136(fp)
	printf("Quality Factor: %d\n", quality_factor);
   603e8:	010001f4 	movhi	r4,7
   603ec:	2136b804 	addi	r4,r4,-9504
   603f0:	e17fde17 	ldw	r5,-136(fp)
   603f4:	00616480 	call	61648 <printf>

	for (i=0; i<64; i++){
   603f8:	e03fdc0d 	sth	zero,-144(fp)
   603fc:	00005606 	br	60558 <initialize_quantization_tables+0x1cc>
		index = zigzag_table [i];
   60400:	e0bfdc0b 	ldhu	r2,-144(fp)
   60404:	00c001f4 	movhi	r3,7
   60408:	18f7d904 	addi	r3,r3,-8348
   6040c:	1885883a 	add	r2,r3,r2
   60410:	10800003 	ldbu	r2,0(r2)
   60414:	10803fcc 	andi	r2,r2,255
   60418:	e0bfdf0d 	sth	r2,-132(fp)

		/* luminance quantization table * quality factor */
		value = luminance_quant_table [i] * quality_factor;
   6041c:	e0bfdc0b 	ldhu	r2,-144(fp)
   60420:	e0ffdf84 	addi	r3,fp,-130
   60424:	1885883a 	add	r2,r3,r2
   60428:	10800003 	ldbu	r2,0(r2)
   6042c:	10803fcc 	andi	r2,r2,255
   60430:	1009883a 	mov	r4,r2
   60434:	e17fde17 	ldw	r5,-136(fp)
   60438:	00614b40 	call	614b4 <__mulsi3>
   6043c:	e0bfdd15 	stw	r2,-140(fp)
		value = (value + 0x200) >> 10;
   60440:	e0bfdd17 	ldw	r2,-140(fp)
   60444:	10808004 	addi	r2,r2,512
   60448:	1004d2ba 	srli	r2,r2,10
   6044c:	e0bfdd15 	stw	r2,-140(fp)

		if (value == 0)
   60450:	e0bfdd17 	ldw	r2,-140(fp)
   60454:	1000031e 	bne	r2,zero,60464 <initialize_quantization_tables+0xd8>
		value = 1;
   60458:	00800044 	movi	r2,1
   6045c:	e0bfdd15 	stw	r2,-140(fp)
   60460:	00000506 	br	60478 <initialize_quantization_tables+0xec>
		else if (value > 255)
   60464:	e0bfdd17 	ldw	r2,-140(fp)
   60468:	10804030 	cmpltui	r2,r2,256
   6046c:	1000021e 	bne	r2,zero,60478 <initialize_quantization_tables+0xec>
		value = 255;
   60470:	00803fc4 	movi	r2,255
   60474:	e0bfdd15 	stw	r2,-140(fp)

		Lqt [index] = (uint8_t) value;
   60478:	e0bfdf0b 	ldhu	r2,-132(fp)
   6047c:	e0ffdd17 	ldw	r3,-140(fp)
   60480:	010001f4 	movhi	r4,7
   60484:	21056004 	addi	r4,r4,5504
   60488:	2085883a 	add	r2,r4,r2
   6048c:	10c00005 	stb	r3,0(r2)
		ILqt [i] = DSP_Division(0x8000, value);
   60490:	e43fdc0b 	ldhu	r16,-144(fp)
   60494:	01200014 	movui	r4,32768
   60498:	e17fdd17 	ldw	r5,-140(fp)
   6049c:	00602f40 	call	602f4 <DSP_Division>
   604a0:	010001f4 	movhi	r4,7
   604a4:	21057004 	addi	r4,r4,5568
   604a8:	8407883a 	add	r3,r16,r16
   604ac:	20c7883a 	add	r3,r4,r3
   604b0:	1880000d 	sth	r2,0(r3)

		/* chrominance quantization table * quality factor */
		value = chrominance_quant_table [i] * quality_factor;
   604b4:	e0bfdc0b 	ldhu	r2,-144(fp)
   604b8:	e0ffef84 	addi	r3,fp,-66
   604bc:	1885883a 	add	r2,r3,r2
   604c0:	10800003 	ldbu	r2,0(r2)
   604c4:	10803fcc 	andi	r2,r2,255
   604c8:	1009883a 	mov	r4,r2
   604cc:	e17fde17 	ldw	r5,-136(fp)
   604d0:	00614b40 	call	614b4 <__mulsi3>
   604d4:	e0bfdd15 	stw	r2,-140(fp)
		value = (value + 0x200) >> 10;
   604d8:	e0bfdd17 	ldw	r2,-140(fp)
   604dc:	10808004 	addi	r2,r2,512
   604e0:	1004d2ba 	srli	r2,r2,10
   604e4:	e0bfdd15 	stw	r2,-140(fp)

		if (value == 0)
   604e8:	e0bfdd17 	ldw	r2,-140(fp)
   604ec:	1000031e 	bne	r2,zero,604fc <initialize_quantization_tables+0x170>
		value = 1;
   604f0:	00800044 	movi	r2,1
   604f4:	e0bfdd15 	stw	r2,-140(fp)
   604f8:	00000506 	br	60510 <initialize_quantization_tables+0x184>
		else if (value > 255)
   604fc:	e0bfdd17 	ldw	r2,-140(fp)
   60500:	10804030 	cmpltui	r2,r2,256
   60504:	1000021e 	bne	r2,zero,60510 <initialize_quantization_tables+0x184>
		value = 255;
   60508:	00803fc4 	movi	r2,255
   6050c:	e0bfdd15 	stw	r2,-140(fp)

		Cqt [index] = (uint8_t) value;
   60510:	e0bfdf0b 	ldhu	r2,-132(fp)
   60514:	e0ffdd17 	ldw	r3,-140(fp)
   60518:	010001f4 	movhi	r4,7
   6051c:	21059004 	addi	r4,r4,5696
   60520:	2085883a 	add	r2,r4,r2
   60524:	10c00005 	stb	r3,0(r2)
		ICqt [i] = DSP_Division(0x8000, value);
   60528:	e43fdc0b 	ldhu	r16,-144(fp)
   6052c:	01200014 	movui	r4,32768
   60530:	e17fdd17 	ldw	r5,-140(fp)
   60534:	00602f40 	call	602f4 <DSP_Division>
   60538:	010001f4 	movhi	r4,7
   6053c:	2105a004 	addi	r4,r4,5760
   60540:	8407883a 	add	r3,r16,r16
   60544:	20c7883a 	add	r3,r4,r3
   60548:	1880000d 	sth	r2,0(r3)
	};

	uint32_t quality_factor = (uint32_t)read_CD();
	printf("Quality Factor: %d\n", quality_factor);

	for (i=0; i<64; i++){
   6054c:	e0bfdc0b 	ldhu	r2,-144(fp)
   60550:	10800044 	addi	r2,r2,1
   60554:	e0bfdc0d 	sth	r2,-144(fp)
   60558:	e0bfdc0b 	ldhu	r2,-144(fp)
   6055c:	10801030 	cmpltui	r2,r2,64
   60560:	103fa71e 	bne	r2,zero,60400 <initialize_quantization_tables+0x74>
		value = 255;

		Cqt [index] = (uint8_t) value;
		ICqt [i] = DSP_Division(0x8000, value);
	}
	for (i=0; i<64; i++){
   60564:	e03fdc0d 	sth	zero,-144(fp)
   60568:	00001706 	br	605c8 <initialize_quantization_tables+0x23c>
		SEND(Lqt[i]);	//SEND(Lqt[i]);
   6056c:	e0bfdc0b 	ldhu	r2,-144(fp)
   60570:	00c001f4 	movhi	r3,7
   60574:	18c56004 	addi	r3,r3,5504
   60578:	1885883a 	add	r2,r3,r2
   6057c:	10800003 	ldbu	r2,0(r2)
   60580:	10803fcc 	andi	r2,r2,255
   60584:	1009883a 	mov	r4,r2
   60588:	00601f40 	call	601f4 <SEND>
		printf("Lqt[%d] > %d\n", i, Lqt[i]);
   6058c:	e0ffdc0b 	ldhu	r3,-144(fp)
   60590:	e0bfdc0b 	ldhu	r2,-144(fp)
   60594:	010001f4 	movhi	r4,7
   60598:	21056004 	addi	r4,r4,5504
   6059c:	2085883a 	add	r2,r4,r2
   605a0:	10800003 	ldbu	r2,0(r2)
   605a4:	10803fcc 	andi	r2,r2,255
   605a8:	010001f4 	movhi	r4,7
   605ac:	2136bd04 	addi	r4,r4,-9484
   605b0:	180b883a 	mov	r5,r3
   605b4:	100d883a 	mov	r6,r2
   605b8:	00616480 	call	61648 <printf>
		value = 255;

		Cqt [index] = (uint8_t) value;
		ICqt [i] = DSP_Division(0x8000, value);
	}
	for (i=0; i<64; i++){
   605bc:	e0bfdc0b 	ldhu	r2,-144(fp)
   605c0:	10800044 	addi	r2,r2,1
   605c4:	e0bfdc0d 	sth	r2,-144(fp)
   605c8:	e0bfdc0b 	ldhu	r2,-144(fp)
   605cc:	10801030 	cmpltui	r2,r2,64
   605d0:	103fe61e 	bne	r2,zero,6056c <initialize_quantization_tables+0x1e0>
		SEND(Lqt[i]);	//SEND(Lqt[i]);
		printf("Lqt[%d] > %d\n", i, Lqt[i]);
	}
	//ledBlink(4);

	for (i=0; i<64; i++){
   605d4:	e03fdc0d 	sth	zero,-144(fp)
   605d8:	00001706 	br	60638 <initialize_quantization_tables+0x2ac>
		SEND(Cqt[i]);	//SEND(Cqt[i]);
   605dc:	e0bfdc0b 	ldhu	r2,-144(fp)
   605e0:	00c001f4 	movhi	r3,7
   605e4:	18c59004 	addi	r3,r3,5696
   605e8:	1885883a 	add	r2,r3,r2
   605ec:	10800003 	ldbu	r2,0(r2)
   605f0:	10803fcc 	andi	r2,r2,255
   605f4:	1009883a 	mov	r4,r2
   605f8:	00601f40 	call	601f4 <SEND>
		printf("Cqt[%d] > %d\n", i, Lqt[i]);
   605fc:	e0ffdc0b 	ldhu	r3,-144(fp)
   60600:	e0bfdc0b 	ldhu	r2,-144(fp)
   60604:	010001f4 	movhi	r4,7
   60608:	21056004 	addi	r4,r4,5504
   6060c:	2085883a 	add	r2,r4,r2
   60610:	10800003 	ldbu	r2,0(r2)
   60614:	10803fcc 	andi	r2,r2,255
   60618:	010001f4 	movhi	r4,7
   6061c:	2136c104 	addi	r4,r4,-9468
   60620:	180b883a 	mov	r5,r3
   60624:	100d883a 	mov	r6,r2
   60628:	00616480 	call	61648 <printf>
		SEND(Lqt[i]);	//SEND(Lqt[i]);
		printf("Lqt[%d] > %d\n", i, Lqt[i]);
	}
	//ledBlink(4);

	for (i=0; i<64; i++){
   6062c:	e0bfdc0b 	ldhu	r2,-144(fp)
   60630:	10800044 	addi	r2,r2,1
   60634:	e0bfdc0d 	sth	r2,-144(fp)
   60638:	e0bfdc0b 	ldhu	r2,-144(fp)
   6063c:	10801030 	cmpltui	r2,r2,64
   60640:	103fe61e 	bne	r2,zero,605dc <initialize_quantization_tables+0x250>
		SEND(Cqt[i]);	//SEND(Cqt[i]);
		printf("Cqt[%d] > %d\n", i, Lqt[i]);
	}
	ledBlink(4);
   60644:	01000104 	movi	r4,4
   60648:	00614580 	call	61458 <ledBlink>

	printf("initialize_quantization_tables is completed\n\n");
   6064c:	010001f4 	movhi	r4,7
   60650:	2136c504 	addi	r4,r4,-9452
   60654:	00617080 	call	61708 <puts>
	readStatus_DE();
   60658:	006125c0 	call	6125c <readStatus_DE>
}
   6065c:	e037883a 	mov	sp,fp
   60660:	dfc00217 	ldw	ra,8(sp)
   60664:	df000117 	ldw	fp,4(sp)
   60668:	dc000017 	ldw	r16,0(sp)
   6066c:	dec00304 	addi	sp,sp,12
   60670:	f800283a 	ret

00060674 <quantization>:


void quantization(uint16_t* const quant_table_ptr){
   60674:	defffb04 	addi	sp,sp,-20
   60678:	dfc00415 	stw	ra,16(sp)
   6067c:	df000315 	stw	fp,12(sp)
   60680:	df000304 	addi	fp,sp,12
   60684:	e13fff15 	stw	r4,-4(fp)
	int16_t i;
	int32_t value;

	for (i=0; i<=63; i++){
   60688:	e03ffd0d 	sth	zero,-12(fp)
   6068c:	00002106 	br	60714 <quantization+0xa0>
		value = (int16_t)read_CD() * quant_table_ptr[i];		// RECV2()
   60690:	00610d40 	call	610d4 <read_CD>
   60694:	10ffffcc 	andi	r3,r2,65535
   60698:	18e0001c 	xori	r3,r3,32768
   6069c:	18e00004 	addi	r3,r3,-32768
   606a0:	e0bffd0f 	ldh	r2,-12(fp)
   606a4:	1085883a 	add	r2,r2,r2
   606a8:	e13fff17 	ldw	r4,-4(fp)
   606ac:	2085883a 	add	r2,r4,r2
   606b0:	1080000b 	ldhu	r2,0(r2)
   606b4:	10bfffcc 	andi	r2,r2,65535
   606b8:	1809883a 	mov	r4,r3
   606bc:	100b883a 	mov	r5,r2
   606c0:	00614b40 	call	614b4 <__mulsi3>
   606c4:	e0bffe15 	stw	r2,-8(fp)
		value = (value + 0x4000) >> 15;
   606c8:	e0bffe17 	ldw	r2,-8(fp)
   606cc:	10900004 	addi	r2,r2,16384
   606d0:	1005d3fa 	srai	r2,r2,15
   606d4:	e0bffe15 	stw	r2,-8(fp)
		Temp[zigzag_table[i]] = (int16_t) value;
   606d8:	e0bffd0f 	ldh	r2,-12(fp)
   606dc:	00c001f4 	movhi	r3,7
   606e0:	18f7d904 	addi	r3,r3,-8348
   606e4:	1885883a 	add	r2,r3,r2
   606e8:	10800003 	ldbu	r2,0(r2)
   606ec:	10803fcc 	andi	r2,r2,255
   606f0:	e0fffe17 	ldw	r3,-8(fp)
   606f4:	010001f4 	movhi	r4,7
   606f8:	21054004 	addi	r4,r4,5376
   606fc:	1085883a 	add	r2,r2,r2
   60700:	2085883a 	add	r2,r4,r2
   60704:	10c0000d 	sth	r3,0(r2)

void quantization(uint16_t* const quant_table_ptr){
	int16_t i;
	int32_t value;

	for (i=0; i<=63; i++){
   60708:	e0bffd0b 	ldhu	r2,-12(fp)
   6070c:	10800044 	addi	r2,r2,1
   60710:	e0bffd0d 	sth	r2,-12(fp)
   60714:	e0bffd0f 	ldh	r2,-12(fp)
   60718:	10801010 	cmplti	r2,r2,64
   6071c:	103fdc1e 	bne	r2,zero,60690 <quantization+0x1c>
		//printf("quant %d -> %d\n", i, value);
	}
	//readStatus_CD();
	//printf("----------------\n");

	for (i=0; i<=63; i++){
   60720:	e03ffd0d 	sth	zero,-12(fp)
   60724:	00000c06 	br	60758 <quantization+0xe4>
		SEND(Temp[i]); //SEND(Temp [i]);
   60728:	e0bffd0f 	ldh	r2,-12(fp)
   6072c:	00c001f4 	movhi	r3,7
   60730:	18c54004 	addi	r3,r3,5376
   60734:	1085883a 	add	r2,r2,r2
   60738:	1885883a 	add	r2,r3,r2
   6073c:	1080000b 	ldhu	r2,0(r2)
   60740:	10803fcc 	andi	r2,r2,255
   60744:	1009883a 	mov	r4,r2
   60748:	00601f40 	call	601f4 <SEND>
		//printf("quant %d -> %d\n", i, value);
	}
	//readStatus_CD();
	//printf("----------------\n");

	for (i=0; i<=63; i++){
   6074c:	e0bffd0b 	ldhu	r2,-12(fp)
   60750:	10800044 	addi	r2,r2,1
   60754:	e0bffd0d 	sth	r2,-12(fp)
   60758:	e0bffd0f 	ldh	r2,-12(fp)
   6075c:	10801010 	cmplti	r2,r2,64
   60760:	103ff11e 	bne	r2,zero,60728 <quantization+0xb4>
		SEND(Temp[i]); //SEND(Temp [i]);
	}
	//ledBlink(4);
}
   60764:	e037883a 	mov	sp,fp
   60768:	dfc00117 	ldw	ra,4(sp)
   6076c:	df000017 	ldw	fp,0(sp)
   60770:	dec00204 	addi	sp,sp,8
   60774:	f800283a 	ret

00060778 <INIT_B>:
#include <stdlib.h>

//#include "sys/alt_timestamp.h"
#include "FIFO.h"

void INIT_B(uint32_t csrAddr, uint8_t id, uint8_t size){
   60778:	defffa04 	addi	sp,sp,-24
   6077c:	dfc00515 	stw	ra,20(sp)
   60780:	df000415 	stw	fp,16(sp)
   60784:	df000404 	addi	fp,sp,16
   60788:	e13ffd15 	stw	r4,-12(fp)
   6078c:	2807883a 	mov	r3,r5
   60790:	3005883a 	mov	r2,r6
   60794:	e0fffe05 	stb	r3,-8(fp)
   60798:	e0bfff05 	stb	r2,-4(fp)

	//int resp = altera_avalon_fifo_init(csrAddr, 0, ALMOST_EMPTY, ALMOST_FULL);
	int resp = altera_avalon_fifo_init(csrAddr, 0, 2, size-5);
   6079c:	e0bfff03 	ldbu	r2,-4(fp)
   607a0:	10bffec4 	addi	r2,r2,-5
   607a4:	e13ffd17 	ldw	r4,-12(fp)
   607a8:	000b883a 	mov	r5,zero
   607ac:	01800084 	movi	r6,2
   607b0:	100f883a 	mov	r7,r2
   607b4:	006b6980 	call	6b698 <altera_avalon_fifo_init>
   607b8:	e0bffc15 	stw	r2,-16(fp)

	printf("FIFO %d Init\n", id);
   607bc:	e0bffe03 	ldbu	r2,-8(fp)
   607c0:	010001f4 	movhi	r4,7
   607c4:	2136f104 	addi	r4,r4,-9276
   607c8:	100b883a 	mov	r5,r2
   607cc:	00616480 	call	61648 <printf>
	else if(resp == ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR)  printf("ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR\n\n");
	else if(resp == ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR)  printf("ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR\n\n");
	else printf("Unknown\n\n");
*/
	//print_status(csrAddr);
}
   607d0:	e037883a 	mov	sp,fp
   607d4:	dfc00117 	ldw	ra,4(sp)
   607d8:	df000017 	ldw	fp,0(sp)
   607dc:	dec00204 	addi	sp,sp,8
   607e0:	f800283a 	ret

000607e4 <WRITE_B>:

void WRITE_B(int *buffer, uint32_t writeAddr, uint32_t csrAddr, uint8_t size, uint8_t id){
   607e4:	defff804 	addi	sp,sp,-32
   607e8:	dfc00715 	stw	ra,28(sp)
   607ec:	df000615 	stw	fp,24(sp)
   607f0:	df000604 	addi	fp,sp,24
   607f4:	e13ffb15 	stw	r4,-20(fp)
   607f8:	e17ffc15 	stw	r5,-16(fp)
   607fc:	e1bffd15 	stw	r6,-12(fp)
   60800:	3805883a 	mov	r2,r7
   60804:	e0c00217 	ldw	r3,8(fp)
   60808:	e0bffe05 	stb	r2,-8(fp)
   6080c:	e0ffff05 	stb	r3,-4(fp)

	while(altera_avalon_fifo_read_level(csrAddr)>=size){
   60810:	0001883a 	nop
   60814:	00000106 	br	6081c <WRITE_B+0x38>
		continue;
   60818:	0001883a 	nop
	//print_status(csrAddr);
}

void WRITE_B(int *buffer, uint32_t writeAddr, uint32_t csrAddr, uint8_t size, uint8_t id){

	while(altera_avalon_fifo_read_level(csrAddr)>=size){
   6081c:	e13ffd17 	ldw	r4,-12(fp)
   60820:	006b83c0 	call	6b83c <altera_avalon_fifo_read_level>
   60824:	e0fffe03 	ldbu	r3,-8(fp)
   60828:	10fffb0e 	bge	r2,r3,60818 <WRITE_B+0x34>
		continue;
	}
	int resp = altera_avalon_fifo_write_fifo(writeAddr, csrAddr , *buffer);
   6082c:	e0bffb17 	ldw	r2,-20(fp)
   60830:	10800017 	ldw	r2,0(r2)
   60834:	e13ffc17 	ldw	r4,-16(fp)
   60838:	e17ffd17 	ldw	r5,-12(fp)
   6083c:	100d883a 	mov	r6,r2
   60840:	006b9c80 	call	6b9c8 <altera_avalon_fifo_write_fifo>
   60844:	e0bffa15 	stw	r2,-24(fp)
	else if(resp== ALTERA_AVALON_FIFO_FULL) printf("resp: ALTERA_AVALON_FIFO_FULL\n");
	int level = altera_avalon_fifo_read_level(csrAddr);
	printf("%d > write %d to FIFO, resp=%d level=%d\n\n", id, (int)*buffer, resp, level);
	#endif

}
   60848:	e037883a 	mov	sp,fp
   6084c:	dfc00117 	ldw	ra,4(sp)
   60850:	df000017 	ldw	fp,0(sp)
   60854:	dec00204 	addi	sp,sp,8
   60858:	f800283a 	ret

0006085c <READ_B>:

void READ_B(int *buffer, uint32_t readAddr, uint32_t csrAddr, uint8_t id){
   6085c:	defff904 	addi	sp,sp,-28
   60860:	dfc00615 	stw	ra,24(sp)
   60864:	df000515 	stw	fp,20(sp)
   60868:	df000504 	addi	fp,sp,20
   6086c:	e13ffc15 	stw	r4,-16(fp)
   60870:	e17ffd15 	stw	r5,-12(fp)
   60874:	e1bffe15 	stw	r6,-8(fp)
   60878:	3805883a 	mov	r2,r7
   6087c:	e0bfff05 	stb	r2,-4(fp)

	while(altera_avalon_fifo_read_level(csrAddr)==0){
   60880:	0001883a 	nop
   60884:	00000106 	br	6088c <READ_B+0x30>
		continue;
   60888:	0001883a 	nop

}

void READ_B(int *buffer, uint32_t readAddr, uint32_t csrAddr, uint8_t id){

	while(altera_avalon_fifo_read_level(csrAddr)==0){
   6088c:	e13ffe17 	ldw	r4,-8(fp)
   60890:	006b83c0 	call	6b83c <altera_avalon_fifo_read_level>
   60894:	103ffc26 	beq	r2,zero,60888 <READ_B+0x2c>
		continue;
	}

	int resp = altera_avalon_fifo_read_fifo(readAddr, csrAddr);
   60898:	e13ffd17 	ldw	r4,-12(fp)
   6089c:	e17ffe17 	ldw	r5,-8(fp)
   608a0:	006ba8c0 	call	6ba8c <altera_avalon_fifo_read_fifo>
   608a4:	e0bffb15 	stw	r2,-20(fp)
	*buffer = resp;
   608a8:	e0bffc17 	ldw	r2,-16(fp)
   608ac:	e0fffb17 	ldw	r3,-20(fp)
   608b0:	10c00015 	stw	r3,0(r2)
	else if(resp== ALTERA_AVALON_FIFO_FULL) printf("ALTERA_AVALON_FIFO_FULL\n\n");
	int level = altera_avalon_fifo_read_level(csrAddr);
	printf("reading from FIFO, resp=%d level=%d\n", resp, level);
	#endif

}
   608b4:	e037883a 	mov	sp,fp
   608b8:	dfc00117 	ldw	ra,4(sp)
   608bc:	df000017 	ldw	fp,0(sp)
   608c0:	dec00204 	addi	sp,sp,8
   608c4:	f800283a 	ret

000608c8 <WRITE_FIFO>:



//------------------------------------------------------------------------------

void WRITE_FIFO(int *buffer){
   608c8:	defffe04 	addi	sp,sp,-8
   608cc:	df000115 	stw	fp,4(sp)
   608d0:	df000104 	addi	fp,sp,4
   608d4:	e13fff15 	stw	r4,-4(fp)
#endif

//printf("%lu \n",(unsigned long)((sw_timeB - sw_timeA)));
//t= t+(sw_timeB - sw_timeA);
*/
}
   608d8:	e037883a 	mov	sp,fp
   608dc:	df000017 	ldw	fp,0(sp)
   608e0:	dec00104 	addi	sp,sp,4
   608e4:	f800283a 	ret

000608e8 <READ_FIFO>:

void READ_FIFO(int *buffer){
   608e8:	defffe04 	addi	sp,sp,-8
   608ec:	df000115 	stw	fp,4(sp)
   608f0:	df000104 	addi	fp,sp,4
   608f4:	e13fff15 	stw	r4,-4(fp)
#endif

//printf("%lu \n",(unsigned long)((sw_timeB - sw_timeA)));
//t= t+(sw_timeB - sw_timeA);
*/
}
   608f8:	e037883a 	mov	sp,fp
   608fc:	df000017 	ldw	fp,0(sp)
   60900:	dec00104 	addi	sp,sp,4
   60904:	f800283a 	ret

00060908 <FIFO_INIT>:

//Initialization
void FIFO_INIT(){
   60908:	deffff04 	addi	sp,sp,-4
   6090c:	df000015 	stw	fp,0(sp)
   60910:	d839883a 	mov	fp,sp
	else if(resp == ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR)  printf("ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR\n\n");
	else printf("Unknown\n\n");

	print_status(INPUT_FIFO_IN_CSR_BASE);
	*/
}
   60914:	e037883a 	mov	sp,fp
   60918:	df000017 	ldw	fp,0(sp)
   6091c:	dec00104 	addi	sp,sp,4
   60920:	f800283a 	ret

00060924 <print_status>:


volatile int input_fifo_wrclk_irq_event;

void print_status(alt_u32 control_base_address){
   60924:	defffd04 	addi	sp,sp,-12
   60928:	dfc00215 	stw	ra,8(sp)
   6092c:	df000115 	stw	fp,4(sp)
   60930:	df000104 	addi	fp,sp,4
   60934:	e13fff15 	stw	r4,-4(fp)
	printf("--------------------------------------\n");
   60938:	010001f4 	movhi	r4,7
   6093c:	2136f504 	addi	r4,r4,-9260
   60940:	00617080 	call	61708 <puts>
	printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   60944:	e13fff17 	ldw	r4,-4(fp)
   60948:	006b83c0 	call	6b83c <altera_avalon_fifo_read_level>
   6094c:	010001f4 	movhi	r4,7
   60950:	2136ff04 	addi	r4,r4,-9220
   60954:	100b883a 	mov	r5,r2
   60958:	00616480 	call	61648 <printf>
	printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address, ALTERA_AVALON_FIFO_STATUS_ALL) );
   6095c:	e13fff17 	ldw	r4,-4(fp)
   60960:	01400fc4 	movi	r5,63
   60964:	006b7300 	call	6b730 <altera_avalon_fifo_read_status>
   60968:	010001f4 	movhi	r4,7
   6096c:	21370204 	addi	r4,r4,-9208
   60970:	100b883a 	mov	r5,r2
   60974:	00616480 	call	61648 <printf>
	printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address, ALTERA_AVALON_FIFO_EVENT_ALL) );
   60978:	e13fff17 	ldw	r4,-4(fp)
   6097c:	01400fc4 	movi	r5,63
   60980:	006b8000 	call	6b800 <altera_avalon_fifo_read_event>
   60984:	010001f4 	movhi	r4,7
   60988:	21370604 	addi	r4,r4,-9192
   6098c:	100b883a 	mov	r5,r2
   60990:	00616480 	call	61648 <printf>
	//printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address, ALTERA_AVALON_FIFO_IENABLE_ALL) );
	printf("ALMOSTEMPTY = %u\n", altera_avalon_fifo_read_almostempty(control_base_address) );
   60994:	e13fff17 	ldw	r4,-4(fp)
   60998:	006b7d40 	call	6b7d4 <altera_avalon_fifo_read_almostempty>
   6099c:	010001f4 	movhi	r4,7
   609a0:	21370904 	addi	r4,r4,-9180
   609a4:	100b883a 	mov	r5,r2
   609a8:	00616480 	call	61648 <printf>
	printf("ALMOSTFULL = %u\n\n", 	altera_avalon_fifo_read_almostfull(control_base_address));
   609ac:	e13fff17 	ldw	r4,-4(fp)
   609b0:	006b7a80 	call	6b7a8 <altera_avalon_fifo_read_almostfull>
   609b4:	010001f4 	movhi	r4,7
   609b8:	21370e04 	addi	r4,r4,-9160
   609bc:	100b883a 	mov	r5,r2
   609c0:	00616480 	call	61648 <printf>
}
   609c4:	e037883a 	mov	sp,fp
   609c8:	dfc00117 	ldw	ra,4(sp)
   609cc:	df000017 	ldw	fp,0(sp)
   609d0:	dec00204 	addi	sp,sp,8
   609d4:	f800283a 	ret

000609d8 <init_AB_0>:
#include "FIFO.h"



// FIFO_AB_0 -------------------------------------------------------------------
void init_AB_0(){
   609d8:	defffe04 	addi	sp,sp,-8
   609dc:	dfc00115 	stw	ra,4(sp)
   609e0:	df000015 	stw	fp,0(sp)
   609e4:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AB_0_CSR, FIFO_AB_0_ID, FIFO_AB_0_SIZE);
   609e8:	01020074 	movhi	r4,2049
   609ec:	21042804 	addi	r4,r4,4256
   609f0:	000b883a 	mov	r5,zero
   609f4:	01801f44 	movi	r6,125
   609f8:	00607780 	call	60778 <INIT_B>
}
   609fc:	e037883a 	mov	sp,fp
   60a00:	dfc00117 	ldw	ra,4(sp)
   60a04:	df000017 	ldw	fp,0(sp)
   60a08:	dec00204 	addi	sp,sp,8
   60a0c:	f800283a 	ret

00060a10 <read_AB_0>:
int read_AB_0(){
   60a10:	defffd04 	addi	sp,sp,-12
   60a14:	dfc00215 	stw	ra,8(sp)
   60a18:	df000115 	stw	fp,4(sp)
   60a1c:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AB_0_READ, FIFO_AB_0_CSR, FIFO_AB_0_ID);
   60a20:	e13fff04 	addi	r4,fp,-4
   60a24:	01420074 	movhi	r5,2049
   60a28:	29445604 	addi	r5,r5,4440
   60a2c:	01820074 	movhi	r6,2049
   60a30:	31842804 	addi	r6,r6,4256
   60a34:	000f883a 	mov	r7,zero
   60a38:	006085c0 	call	6085c <READ_B>
   return val;
   60a3c:	e0bfff17 	ldw	r2,-4(fp)
}
   60a40:	e037883a 	mov	sp,fp
   60a44:	dfc00117 	ldw	ra,4(sp)
   60a48:	df000017 	ldw	fp,0(sp)
   60a4c:	dec00204 	addi	sp,sp,8
   60a50:	f800283a 	ret

00060a54 <write_AB_0>:
void write_AB_0(int *buffer){
   60a54:	defffc04 	addi	sp,sp,-16
   60a58:	dfc00315 	stw	ra,12(sp)
   60a5c:	df000215 	stw	fp,8(sp)
   60a60:	df000204 	addi	fp,sp,8
   60a64:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AB_0_WRITE, FIFO_AB_0_CSR, FIFO_AB_0_SIZE, FIFO_AB_0_ID);
   60a68:	d8000015 	stw	zero,0(sp)
   60a6c:	e13fff17 	ldw	r4,-4(fp)
   60a70:	01420074 	movhi	r5,2049
   60a74:	29445904 	addi	r5,r5,4452
   60a78:	01820074 	movhi	r6,2049
   60a7c:	31842804 	addi	r6,r6,4256
   60a80:	01c01f44 	movi	r7,125
   60a84:	00607e40 	call	607e4 <WRITE_B>
}
   60a88:	e037883a 	mov	sp,fp
   60a8c:	dfc00117 	ldw	ra,4(sp)
   60a90:	df000017 	ldw	fp,0(sp)
   60a94:	dec00204 	addi	sp,sp,8
   60a98:	f800283a 	ret

00060a9c <readStatus_AB_0>:
void readStatus_AB_0(){
   60a9c:	defffe04 	addi	sp,sp,-8
   60aa0:	dfc00115 	stw	ra,4(sp)
   60aa4:	df000015 	stw	fp,0(sp)
   60aa8:	d839883a 	mov	fp,sp
   print_status(FIFO_AB_0_CSR);
   60aac:	01020074 	movhi	r4,2049
   60ab0:	21042804 	addi	r4,r4,4256
   60ab4:	00609240 	call	60924 <print_status>
}
   60ab8:	e037883a 	mov	sp,fp
   60abc:	dfc00117 	ldw	ra,4(sp)
   60ac0:	df000017 	ldw	fp,0(sp)
   60ac4:	dec00204 	addi	sp,sp,8
   60ac8:	f800283a 	ret

00060acc <init_AB_1>:

// FIFO_AB_1 -------------------------------------------------------------------
void init_AB_1(){
   60acc:	defffe04 	addi	sp,sp,-8
   60ad0:	dfc00115 	stw	ra,4(sp)
   60ad4:	df000015 	stw	fp,0(sp)
   60ad8:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AB_1_CSR, FIFO_AB_1_ID, FIFO_AB_1_SIZE);
   60adc:	01020074 	movhi	r4,2049
   60ae0:	21042004 	addi	r4,r4,4224
   60ae4:	01400044 	movi	r5,1
   60ae8:	01801f44 	movi	r6,125
   60aec:	00607780 	call	60778 <INIT_B>
}
   60af0:	e037883a 	mov	sp,fp
   60af4:	dfc00117 	ldw	ra,4(sp)
   60af8:	df000017 	ldw	fp,0(sp)
   60afc:	dec00204 	addi	sp,sp,8
   60b00:	f800283a 	ret

00060b04 <read_AB_1>:
int read_AB_1(){
   60b04:	defffd04 	addi	sp,sp,-12
   60b08:	dfc00215 	stw	ra,8(sp)
   60b0c:	df000115 	stw	fp,4(sp)
   60b10:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AB_1_READ, FIFO_AB_1_CSR, FIFO_AB_1_ID);
   60b14:	e13fff04 	addi	r4,fp,-4
   60b18:	01420074 	movhi	r5,2049
   60b1c:	29445504 	addi	r5,r5,4436
   60b20:	01820074 	movhi	r6,2049
   60b24:	31842004 	addi	r6,r6,4224
   60b28:	01c00044 	movi	r7,1
   60b2c:	006085c0 	call	6085c <READ_B>
   return val;
   60b30:	e0bfff17 	ldw	r2,-4(fp)
}
   60b34:	e037883a 	mov	sp,fp
   60b38:	dfc00117 	ldw	ra,4(sp)
   60b3c:	df000017 	ldw	fp,0(sp)
   60b40:	dec00204 	addi	sp,sp,8
   60b44:	f800283a 	ret

00060b48 <write_AB_1>:
void write_AB_1(int *buffer){
   60b48:	defffc04 	addi	sp,sp,-16
   60b4c:	dfc00315 	stw	ra,12(sp)
   60b50:	df000215 	stw	fp,8(sp)
   60b54:	df000204 	addi	fp,sp,8
   60b58:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AB_1_WRITE, FIFO_AB_1_CSR, FIFO_AB_1_SIZE, FIFO_AB_1_ID);
   60b5c:	00800044 	movi	r2,1
   60b60:	d8800015 	stw	r2,0(sp)
   60b64:	e13fff17 	ldw	r4,-4(fp)
   60b68:	01420074 	movhi	r5,2049
   60b6c:	29445804 	addi	r5,r5,4448
   60b70:	01820074 	movhi	r6,2049
   60b74:	31842004 	addi	r6,r6,4224
   60b78:	01c01f44 	movi	r7,125
   60b7c:	00607e40 	call	607e4 <WRITE_B>
}
   60b80:	e037883a 	mov	sp,fp
   60b84:	dfc00117 	ldw	ra,4(sp)
   60b88:	df000017 	ldw	fp,0(sp)
   60b8c:	dec00204 	addi	sp,sp,8
   60b90:	f800283a 	ret

00060b94 <readStatus_AB_1>:
void readStatus_AB_1(){
   60b94:	defffe04 	addi	sp,sp,-8
   60b98:	dfc00115 	stw	ra,4(sp)
   60b9c:	df000015 	stw	fp,0(sp)
   60ba0:	d839883a 	mov	fp,sp
   print_status(FIFO_AB_1_CSR);
   60ba4:	01020074 	movhi	r4,2049
   60ba8:	21042004 	addi	r4,r4,4224
   60bac:	00609240 	call	60924 <print_status>
}
   60bb0:	e037883a 	mov	sp,fp
   60bb4:	dfc00117 	ldw	ra,4(sp)
   60bb8:	df000017 	ldw	fp,0(sp)
   60bbc:	dec00204 	addi	sp,sp,8
   60bc0:	f800283a 	ret

00060bc4 <init_AB_2>:

// FIFO_AB_2 -------------------------------------------------------------------
void init_AB_2(){
   60bc4:	defffe04 	addi	sp,sp,-8
   60bc8:	dfc00115 	stw	ra,4(sp)
   60bcc:	df000015 	stw	fp,0(sp)
   60bd0:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AB_2_CSR, FIFO_AB_2_ID, FIFO_AB_2_SIZE);
   60bd4:	01020074 	movhi	r4,2049
   60bd8:	21041804 	addi	r4,r4,4192
   60bdc:	01400084 	movi	r5,2
   60be0:	01801f44 	movi	r6,125
   60be4:	00607780 	call	60778 <INIT_B>
}
   60be8:	e037883a 	mov	sp,fp
   60bec:	dfc00117 	ldw	ra,4(sp)
   60bf0:	df000017 	ldw	fp,0(sp)
   60bf4:	dec00204 	addi	sp,sp,8
   60bf8:	f800283a 	ret

00060bfc <read_AB_2>:
int read_AB_2(){
   60bfc:	defffd04 	addi	sp,sp,-12
   60c00:	dfc00215 	stw	ra,8(sp)
   60c04:	df000115 	stw	fp,4(sp)
   60c08:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AB_2_READ, FIFO_AB_2_CSR, FIFO_AB_2_ID);
   60c0c:	e13fff04 	addi	r4,fp,-4
   60c10:	01420074 	movhi	r5,2049
   60c14:	29445404 	addi	r5,r5,4432
   60c18:	01820074 	movhi	r6,2049
   60c1c:	31841804 	addi	r6,r6,4192
   60c20:	01c00084 	movi	r7,2
   60c24:	006085c0 	call	6085c <READ_B>
   return val;
   60c28:	e0bfff17 	ldw	r2,-4(fp)
}
   60c2c:	e037883a 	mov	sp,fp
   60c30:	dfc00117 	ldw	ra,4(sp)
   60c34:	df000017 	ldw	fp,0(sp)
   60c38:	dec00204 	addi	sp,sp,8
   60c3c:	f800283a 	ret

00060c40 <write_AB_2>:
void write_AB_2(int *buffer){
   60c40:	defffc04 	addi	sp,sp,-16
   60c44:	dfc00315 	stw	ra,12(sp)
   60c48:	df000215 	stw	fp,8(sp)
   60c4c:	df000204 	addi	fp,sp,8
   60c50:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AB_2_WRITE, FIFO_AB_2_CSR, FIFO_AB_2_SIZE, FIFO_AB_2_ID);
   60c54:	00800084 	movi	r2,2
   60c58:	d8800015 	stw	r2,0(sp)
   60c5c:	e13fff17 	ldw	r4,-4(fp)
   60c60:	01420074 	movhi	r5,2049
   60c64:	29445704 	addi	r5,r5,4444
   60c68:	01820074 	movhi	r6,2049
   60c6c:	31841804 	addi	r6,r6,4192
   60c70:	01c01f44 	movi	r7,125
   60c74:	00607e40 	call	607e4 <WRITE_B>
}
   60c78:	e037883a 	mov	sp,fp
   60c7c:	dfc00117 	ldw	ra,4(sp)
   60c80:	df000017 	ldw	fp,0(sp)
   60c84:	dec00204 	addi	sp,sp,8
   60c88:	f800283a 	ret

00060c8c <readStatus_AB_2>:
void readStatus_AB_2(){
   60c8c:	defffe04 	addi	sp,sp,-8
   60c90:	dfc00115 	stw	ra,4(sp)
   60c94:	df000015 	stw	fp,0(sp)
   60c98:	d839883a 	mov	fp,sp
   print_status(FIFO_AB_2_CSR);
   60c9c:	01020074 	movhi	r4,2049
   60ca0:	21041804 	addi	r4,r4,4192
   60ca4:	00609240 	call	60924 <print_status>
}
   60ca8:	e037883a 	mov	sp,fp
   60cac:	dfc00117 	ldw	ra,4(sp)
   60cb0:	df000017 	ldw	fp,0(sp)
   60cb4:	dec00204 	addi	sp,sp,8
   60cb8:	f800283a 	ret

00060cbc <init_AD>:

// FIFO_AD -------------------------------------------------------------------
void init_AD(){
   60cbc:	defffe04 	addi	sp,sp,-8
   60cc0:	dfc00115 	stw	ra,4(sp)
   60cc4:	df000015 	stw	fp,0(sp)
   60cc8:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AD_CSR, FIFO_AD_ID, FIFO_AD_SIZE);
   60ccc:	01020074 	movhi	r4,2049
   60cd0:	21041004 	addi	r4,r4,4160
   60cd4:	014000c4 	movi	r5,3
   60cd8:	01800744 	movi	r6,29
   60cdc:	00607780 	call	60778 <INIT_B>
}
   60ce0:	e037883a 	mov	sp,fp
   60ce4:	dfc00117 	ldw	ra,4(sp)
   60ce8:	df000017 	ldw	fp,0(sp)
   60cec:	dec00204 	addi	sp,sp,8
   60cf0:	f800283a 	ret

00060cf4 <read_AD>:
int read_AD(){
   60cf4:	defffd04 	addi	sp,sp,-12
   60cf8:	dfc00215 	stw	ra,8(sp)
   60cfc:	df000115 	stw	fp,4(sp)
   60d00:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AD_READ, FIFO_AD_CSR, FIFO_AD_ID);
   60d04:	e13fff04 	addi	r4,fp,-4
   60d08:	01420074 	movhi	r5,2049
   60d0c:	29445204 	addi	r5,r5,4424
   60d10:	01820074 	movhi	r6,2049
   60d14:	31841004 	addi	r6,r6,4160
   60d18:	01c000c4 	movi	r7,3
   60d1c:	006085c0 	call	6085c <READ_B>
   return val;
   60d20:	e0bfff17 	ldw	r2,-4(fp)
}
   60d24:	e037883a 	mov	sp,fp
   60d28:	dfc00117 	ldw	ra,4(sp)
   60d2c:	df000017 	ldw	fp,0(sp)
   60d30:	dec00204 	addi	sp,sp,8
   60d34:	f800283a 	ret

00060d38 <write_AD>:
void write_AD(int *buffer){
   60d38:	defffc04 	addi	sp,sp,-16
   60d3c:	dfc00315 	stw	ra,12(sp)
   60d40:	df000215 	stw	fp,8(sp)
   60d44:	df000204 	addi	fp,sp,8
   60d48:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AD_WRITE, FIFO_AD_CSR, FIFO_AD_SIZE, FIFO_AD_ID);
   60d4c:	008000c4 	movi	r2,3
   60d50:	d8800015 	stw	r2,0(sp)
   60d54:	e13fff17 	ldw	r4,-4(fp)
   60d58:	01420074 	movhi	r5,2049
   60d5c:	29445304 	addi	r5,r5,4428
   60d60:	01820074 	movhi	r6,2049
   60d64:	31841004 	addi	r6,r6,4160
   60d68:	01c00744 	movi	r7,29
   60d6c:	00607e40 	call	607e4 <WRITE_B>
}
   60d70:	e037883a 	mov	sp,fp
   60d74:	dfc00117 	ldw	ra,4(sp)
   60d78:	df000017 	ldw	fp,0(sp)
   60d7c:	dec00204 	addi	sp,sp,8
   60d80:	f800283a 	ret

00060d84 <readStatus_AD>:
void readStatus_AD(){
   60d84:	defffe04 	addi	sp,sp,-8
   60d88:	dfc00115 	stw	ra,4(sp)
   60d8c:	df000015 	stw	fp,0(sp)
   60d90:	d839883a 	mov	fp,sp
   print_status(FIFO_AD_CSR);
   60d94:	01020074 	movhi	r4,2049
   60d98:	21041004 	addi	r4,r4,4160
   60d9c:	00609240 	call	60924 <print_status>
}
   60da0:	e037883a 	mov	sp,fp
   60da4:	dfc00117 	ldw	ra,4(sp)
   60da8:	df000017 	ldw	fp,0(sp)
   60dac:	dec00204 	addi	sp,sp,8
   60db0:	f800283a 	ret

00060db4 <init_AE>:


// FIFO_AE -------------------------------------------------------------------
void init_AE(){
   60db4:	defffe04 	addi	sp,sp,-8
   60db8:	dfc00115 	stw	ra,4(sp)
   60dbc:	df000015 	stw	fp,0(sp)
   60dc0:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AE_CSR, FIFO_AE_ID, FIFO_AE_SIZE);
   60dc4:	01020074 	movhi	r4,2049
   60dc8:	21040804 	addi	r4,r4,4128
   60dcc:	01400104 	movi	r5,4
   60dd0:	01800744 	movi	r6,29
   60dd4:	00607780 	call	60778 <INIT_B>
}
   60dd8:	e037883a 	mov	sp,fp
   60ddc:	dfc00117 	ldw	ra,4(sp)
   60de0:	df000017 	ldw	fp,0(sp)
   60de4:	dec00204 	addi	sp,sp,8
   60de8:	f800283a 	ret

00060dec <read_AE>:
int read_AE(){
   60dec:	defffd04 	addi	sp,sp,-12
   60df0:	dfc00215 	stw	ra,8(sp)
   60df4:	df000115 	stw	fp,4(sp)
   60df8:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AE_READ, FIFO_AE_CSR, FIFO_AE_ID);
   60dfc:	e13fff04 	addi	r4,fp,-4
   60e00:	01420074 	movhi	r5,2049
   60e04:	29445004 	addi	r5,r5,4416
   60e08:	01820074 	movhi	r6,2049
   60e0c:	31840804 	addi	r6,r6,4128
   60e10:	01c00104 	movi	r7,4
   60e14:	006085c0 	call	6085c <READ_B>
   return val;
   60e18:	e0bfff17 	ldw	r2,-4(fp)
}
   60e1c:	e037883a 	mov	sp,fp
   60e20:	dfc00117 	ldw	ra,4(sp)
   60e24:	df000017 	ldw	fp,0(sp)
   60e28:	dec00204 	addi	sp,sp,8
   60e2c:	f800283a 	ret

00060e30 <write_AE>:
void write_AE(int *buffer){
   60e30:	defffc04 	addi	sp,sp,-16
   60e34:	dfc00315 	stw	ra,12(sp)
   60e38:	df000215 	stw	fp,8(sp)
   60e3c:	df000204 	addi	fp,sp,8
   60e40:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AE_WRITE, FIFO_AE_CSR, FIFO_AE_SIZE, FIFO_AE_ID);
   60e44:	00800104 	movi	r2,4
   60e48:	d8800015 	stw	r2,0(sp)
   60e4c:	e13fff17 	ldw	r4,-4(fp)
   60e50:	01420074 	movhi	r5,2049
   60e54:	29445104 	addi	r5,r5,4420
   60e58:	01820074 	movhi	r6,2049
   60e5c:	31840804 	addi	r6,r6,4128
   60e60:	01c00744 	movi	r7,29
   60e64:	00607e40 	call	607e4 <WRITE_B>
}
   60e68:	e037883a 	mov	sp,fp
   60e6c:	dfc00117 	ldw	ra,4(sp)
   60e70:	df000017 	ldw	fp,0(sp)
   60e74:	dec00204 	addi	sp,sp,8
   60e78:	f800283a 	ret

00060e7c <readStatus_AE>:
void readStatus_AE(){
   60e7c:	defffe04 	addi	sp,sp,-8
   60e80:	dfc00115 	stw	ra,4(sp)
   60e84:	df000015 	stw	fp,0(sp)
   60e88:	d839883a 	mov	fp,sp
   print_status(FIFO_AE_CSR);
   60e8c:	01020074 	movhi	r4,2049
   60e90:	21040804 	addi	r4,r4,4128
   60e94:	00609240 	call	60924 <print_status>
}
   60e98:	e037883a 	mov	sp,fp
   60e9c:	dfc00117 	ldw	ra,4(sp)
   60ea0:	df000017 	ldw	fp,0(sp)
   60ea4:	dec00204 	addi	sp,sp,8
   60ea8:	f800283a 	ret

00060eac <init_AF>:

// FIFO_AF -------------------------------------------------------------------
void init_AF(){
   60eac:	defffe04 	addi	sp,sp,-8
   60eb0:	dfc00115 	stw	ra,4(sp)
   60eb4:	df000015 	stw	fp,0(sp)
   60eb8:	d839883a 	mov	fp,sp
   INIT_B(FIFO_AF_CSR, FIFO_AF_ID, FIFO_AF_SIZE);
   60ebc:	01020074 	movhi	r4,2049
   60ec0:	21040004 	addi	r4,r4,4096
   60ec4:	01400144 	movi	r5,5
   60ec8:	01800744 	movi	r6,29
   60ecc:	00607780 	call	60778 <INIT_B>
}
   60ed0:	e037883a 	mov	sp,fp
   60ed4:	dfc00117 	ldw	ra,4(sp)
   60ed8:	df000017 	ldw	fp,0(sp)
   60edc:	dec00204 	addi	sp,sp,8
   60ee0:	f800283a 	ret

00060ee4 <read_AF>:
int read_AF(){
   60ee4:	defffd04 	addi	sp,sp,-12
   60ee8:	dfc00215 	stw	ra,8(sp)
   60eec:	df000115 	stw	fp,4(sp)
   60ef0:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_AF_READ, FIFO_AF_CSR, FIFO_AF_ID);
   60ef4:	e13fff04 	addi	r4,fp,-4
   60ef8:	01420074 	movhi	r5,2049
   60efc:	29444e04 	addi	r5,r5,4408
   60f00:	01820074 	movhi	r6,2049
   60f04:	31840004 	addi	r6,r6,4096
   60f08:	01c00144 	movi	r7,5
   60f0c:	006085c0 	call	6085c <READ_B>
   return val;
   60f10:	e0bfff17 	ldw	r2,-4(fp)
}
   60f14:	e037883a 	mov	sp,fp
   60f18:	dfc00117 	ldw	ra,4(sp)
   60f1c:	df000017 	ldw	fp,0(sp)
   60f20:	dec00204 	addi	sp,sp,8
   60f24:	f800283a 	ret

00060f28 <write_AF>:
void write_AF(int *buffer){
   60f28:	defffc04 	addi	sp,sp,-16
   60f2c:	dfc00315 	stw	ra,12(sp)
   60f30:	df000215 	stw	fp,8(sp)
   60f34:	df000204 	addi	fp,sp,8
   60f38:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_AF_WRITE, FIFO_AF_CSR, FIFO_AF_SIZE, FIFO_AF_ID);
   60f3c:	00800144 	movi	r2,5
   60f40:	d8800015 	stw	r2,0(sp)
   60f44:	e13fff17 	ldw	r4,-4(fp)
   60f48:	01420074 	movhi	r5,2049
   60f4c:	29444f04 	addi	r5,r5,4412
   60f50:	01820074 	movhi	r6,2049
   60f54:	31840004 	addi	r6,r6,4096
   60f58:	01c00744 	movi	r7,29
   60f5c:	00607e40 	call	607e4 <WRITE_B>
}
   60f60:	e037883a 	mov	sp,fp
   60f64:	dfc00117 	ldw	ra,4(sp)
   60f68:	df000017 	ldw	fp,0(sp)
   60f6c:	dec00204 	addi	sp,sp,8
   60f70:	f800283a 	ret

00060f74 <readStatus_AF>:
void readStatus_AF(){
   60f74:	defffe04 	addi	sp,sp,-8
   60f78:	dfc00115 	stw	ra,4(sp)
   60f7c:	df000015 	stw	fp,0(sp)
   60f80:	d839883a 	mov	fp,sp
   print_status(FIFO_AF_CSR);
   60f84:	01020074 	movhi	r4,2049
   60f88:	21040004 	addi	r4,r4,4096
   60f8c:	00609240 	call	60924 <print_status>
}
   60f90:	e037883a 	mov	sp,fp
   60f94:	dfc00117 	ldw	ra,4(sp)
   60f98:	df000017 	ldw	fp,0(sp)
   60f9c:	dec00204 	addi	sp,sp,8
   60fa0:	f800283a 	ret

00060fa4 <init_BC>:

// FIFO_BC -------------------------------------------------------------------
void init_BC(){
   60fa4:	defffe04 	addi	sp,sp,-8
   60fa8:	dfc00115 	stw	ra,4(sp)
   60fac:	df000015 	stw	fp,0(sp)
   60fb0:	d839883a 	mov	fp,sp
   INIT_B(FIFO_BC_CSR, FIFO_BC_ID, FIFO_BC_SIZE);
   60fb4:	01020074 	movhi	r4,2049
   60fb8:	21040004 	addi	r4,r4,4096
   60fbc:	01400184 	movi	r5,6
   60fc0:	01803f44 	movi	r6,253
   60fc4:	00607780 	call	60778 <INIT_B>
}
   60fc8:	e037883a 	mov	sp,fp
   60fcc:	dfc00117 	ldw	ra,4(sp)
   60fd0:	df000017 	ldw	fp,0(sp)
   60fd4:	dec00204 	addi	sp,sp,8
   60fd8:	f800283a 	ret

00060fdc <read_BC>:
int read_BC(){
   60fdc:	defffd04 	addi	sp,sp,-12
   60fe0:	dfc00215 	stw	ra,8(sp)
   60fe4:	df000115 	stw	fp,4(sp)
   60fe8:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_BC_READ, FIFO_BC_CSR, FIFO_BC_ID);
   60fec:	e13fff04 	addi	r4,fp,-4
   60ff0:	01420074 	movhi	r5,2049
   60ff4:	29443604 	addi	r5,r5,4312
   60ff8:	01820074 	movhi	r6,2049
   60ffc:	31840004 	addi	r6,r6,4096
   61000:	01c00184 	movi	r7,6
   61004:	006085c0 	call	6085c <READ_B>
   return val;
   61008:	e0bfff17 	ldw	r2,-4(fp)
}
   6100c:	e037883a 	mov	sp,fp
   61010:	dfc00117 	ldw	ra,4(sp)
   61014:	df000017 	ldw	fp,0(sp)
   61018:	dec00204 	addi	sp,sp,8
   6101c:	f800283a 	ret

00061020 <write_BC>:
void write_BC(int *buffer){
   61020:	defffc04 	addi	sp,sp,-16
   61024:	dfc00315 	stw	ra,12(sp)
   61028:	df000215 	stw	fp,8(sp)
   6102c:	df000204 	addi	fp,sp,8
   61030:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_BC_WRITE, FIFO_BC_CSR, FIFO_BC_SIZE, FIFO_BC_ID);
   61034:	00800184 	movi	r2,6
   61038:	d8800015 	stw	r2,0(sp)
   6103c:	e13fff17 	ldw	r4,-4(fp)
   61040:	01420074 	movhi	r5,2049
   61044:	29443704 	addi	r5,r5,4316
   61048:	01820074 	movhi	r6,2049
   6104c:	31840004 	addi	r6,r6,4096
   61050:	01c03f44 	movi	r7,253
   61054:	00607e40 	call	607e4 <WRITE_B>
}
   61058:	e037883a 	mov	sp,fp
   6105c:	dfc00117 	ldw	ra,4(sp)
   61060:	df000017 	ldw	fp,0(sp)
   61064:	dec00204 	addi	sp,sp,8
   61068:	f800283a 	ret

0006106c <readStatus_BC>:
void readStatus_BC(){
   6106c:	defffe04 	addi	sp,sp,-8
   61070:	dfc00115 	stw	ra,4(sp)
   61074:	df000015 	stw	fp,0(sp)
   61078:	d839883a 	mov	fp,sp
   print_status(FIFO_BC_CSR);
   6107c:	01020074 	movhi	r4,2049
   61080:	21040004 	addi	r4,r4,4096
   61084:	00609240 	call	60924 <print_status>
}
   61088:	e037883a 	mov	sp,fp
   6108c:	dfc00117 	ldw	ra,4(sp)
   61090:	df000017 	ldw	fp,0(sp)
   61094:	dec00204 	addi	sp,sp,8
   61098:	f800283a 	ret

0006109c <init_CD>:

// FIFO_CD -------------------------------------------------------------------
void init_CD(){
   6109c:	defffe04 	addi	sp,sp,-8
   610a0:	dfc00115 	stw	ra,4(sp)
   610a4:	df000015 	stw	fp,0(sp)
   610a8:	d839883a 	mov	fp,sp
   INIT_B(FIFO_CD_CSR, FIFO_CD_ID, FIFO_CD_SIZE);
   610ac:	01020074 	movhi	r4,2049
   610b0:	21040804 	addi	r4,r4,4128
   610b4:	014001c4 	movi	r5,7
   610b8:	01803f44 	movi	r6,253
   610bc:	00607780 	call	60778 <INIT_B>
}
   610c0:	e037883a 	mov	sp,fp
   610c4:	dfc00117 	ldw	ra,4(sp)
   610c8:	df000017 	ldw	fp,0(sp)
   610cc:	dec00204 	addi	sp,sp,8
   610d0:	f800283a 	ret

000610d4 <read_CD>:
int read_CD(){
   610d4:	defffd04 	addi	sp,sp,-12
   610d8:	dfc00215 	stw	ra,8(sp)
   610dc:	df000115 	stw	fp,4(sp)
   610e0:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_CD_READ, FIFO_CD_CSR, FIFO_CD_ID);
   610e4:	e13fff04 	addi	r4,fp,-4
   610e8:	01420074 	movhi	r5,2049
   610ec:	29442604 	addi	r5,r5,4248
   610f0:	01820074 	movhi	r6,2049
   610f4:	31840804 	addi	r6,r6,4128
   610f8:	01c001c4 	movi	r7,7
   610fc:	006085c0 	call	6085c <READ_B>
   return val;
   61100:	e0bfff17 	ldw	r2,-4(fp)
}
   61104:	e037883a 	mov	sp,fp
   61108:	dfc00117 	ldw	ra,4(sp)
   6110c:	df000017 	ldw	fp,0(sp)
   61110:	dec00204 	addi	sp,sp,8
   61114:	f800283a 	ret

00061118 <write_CD>:
void write_CD(int *buffer){
   61118:	defffc04 	addi	sp,sp,-16
   6111c:	dfc00315 	stw	ra,12(sp)
   61120:	df000215 	stw	fp,8(sp)
   61124:	df000204 	addi	fp,sp,8
   61128:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_CD_WRITE, FIFO_CD_CSR, FIFO_CD_SIZE, FIFO_CD_ID);
   6112c:	008001c4 	movi	r2,7
   61130:	d8800015 	stw	r2,0(sp)
   61134:	e13fff17 	ldw	r4,-4(fp)
   61138:	01420074 	movhi	r5,2049
   6113c:	29442704 	addi	r5,r5,4252
   61140:	01820074 	movhi	r6,2049
   61144:	31840804 	addi	r6,r6,4128
   61148:	01c03f44 	movi	r7,253
   6114c:	00607e40 	call	607e4 <WRITE_B>
}
   61150:	e037883a 	mov	sp,fp
   61154:	dfc00117 	ldw	ra,4(sp)
   61158:	df000017 	ldw	fp,0(sp)
   6115c:	dec00204 	addi	sp,sp,8
   61160:	f800283a 	ret

00061164 <readStatus_CD>:
void readStatus_CD(){
   61164:	defffe04 	addi	sp,sp,-8
   61168:	dfc00115 	stw	ra,4(sp)
   6116c:	df000015 	stw	fp,0(sp)
   61170:	d839883a 	mov	fp,sp
   print_status(FIFO_CD_CSR);
   61174:	01020074 	movhi	r4,2049
   61178:	21040804 	addi	r4,r4,4128
   6117c:	00609240 	call	60924 <print_status>
}
   61180:	e037883a 	mov	sp,fp
   61184:	dfc00117 	ldw	ra,4(sp)
   61188:	df000017 	ldw	fp,0(sp)
   6118c:	dec00204 	addi	sp,sp,8
   61190:	f800283a 	ret

00061194 <init_DE>:

// FIFO_DE -------------------------------------------------------------------
void init_DE(){
   61194:	defffe04 	addi	sp,sp,-8
   61198:	dfc00115 	stw	ra,4(sp)
   6119c:	df000015 	stw	fp,0(sp)
   611a0:	d839883a 	mov	fp,sp
   INIT_B(FIFO_DE_CSR, FIFO_DE_ID, FIFO_DE_SIZE);
   611a4:	01020074 	movhi	r4,2049
   611a8:	21040004 	addi	r4,r4,4096
   611ac:	01400204 	movi	r5,8
   611b0:	01803f44 	movi	r6,253
   611b4:	00607780 	call	60778 <INIT_B>
}
   611b8:	e037883a 	mov	sp,fp
   611bc:	dfc00117 	ldw	ra,4(sp)
   611c0:	df000017 	ldw	fp,0(sp)
   611c4:	dec00204 	addi	sp,sp,8
   611c8:	f800283a 	ret

000611cc <read_DE>:
int read_DE(){
   611cc:	defffd04 	addi	sp,sp,-12
   611d0:	dfc00215 	stw	ra,8(sp)
   611d4:	df000115 	stw	fp,4(sp)
   611d8:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_DE_READ, FIFO_DE_CSR, FIFO_DE_ID);
   611dc:	e13fff04 	addi	r4,fp,-4
   611e0:	01420074 	movhi	r5,2049
   611e4:	29443004 	addi	r5,r5,4288
   611e8:	01820074 	movhi	r6,2049
   611ec:	31840004 	addi	r6,r6,4096
   611f0:	01c00204 	movi	r7,8
   611f4:	006085c0 	call	6085c <READ_B>
   return val;
   611f8:	e0bfff17 	ldw	r2,-4(fp)
}
   611fc:	e037883a 	mov	sp,fp
   61200:	dfc00117 	ldw	ra,4(sp)
   61204:	df000017 	ldw	fp,0(sp)
   61208:	dec00204 	addi	sp,sp,8
   6120c:	f800283a 	ret

00061210 <write_DE>:
void write_DE(int *buffer){
   61210:	defffc04 	addi	sp,sp,-16
   61214:	dfc00315 	stw	ra,12(sp)
   61218:	df000215 	stw	fp,8(sp)
   6121c:	df000204 	addi	fp,sp,8
   61220:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_DE_WRITE, FIFO_DE_CSR, FIFO_DE_SIZE, FIFO_DE_ID);
   61224:	00800204 	movi	r2,8
   61228:	d8800015 	stw	r2,0(sp)
   6122c:	e13fff17 	ldw	r4,-4(fp)
   61230:	01420074 	movhi	r5,2049
   61234:	29443104 	addi	r5,r5,4292
   61238:	01820074 	movhi	r6,2049
   6123c:	31840004 	addi	r6,r6,4096
   61240:	01c03f44 	movi	r7,253
   61244:	00607e40 	call	607e4 <WRITE_B>
}
   61248:	e037883a 	mov	sp,fp
   6124c:	dfc00117 	ldw	ra,4(sp)
   61250:	df000017 	ldw	fp,0(sp)
   61254:	dec00204 	addi	sp,sp,8
   61258:	f800283a 	ret

0006125c <readStatus_DE>:
void readStatus_DE(){
   6125c:	defffe04 	addi	sp,sp,-8
   61260:	dfc00115 	stw	ra,4(sp)
   61264:	df000015 	stw	fp,0(sp)
   61268:	d839883a 	mov	fp,sp
   print_status(FIFO_DE_CSR);
   6126c:	01020074 	movhi	r4,2049
   61270:	21040004 	addi	r4,r4,4096
   61274:	00609240 	call	60924 <print_status>
}
   61278:	e037883a 	mov	sp,fp
   6127c:	dfc00117 	ldw	ra,4(sp)
   61280:	df000017 	ldw	fp,0(sp)
   61284:	dec00204 	addi	sp,sp,8
   61288:	f800283a 	ret

0006128c <init_EF>:

// FIFO_EF -------------------------------------------------------------------
void init_EF(){
   6128c:	defffe04 	addi	sp,sp,-8
   61290:	dfc00115 	stw	ra,4(sp)
   61294:	df000015 	stw	fp,0(sp)
   61298:	d839883a 	mov	fp,sp
   INIT_B(FIFO_EF_CSR, FIFO_EF_ID, FIFO_EF_SIZE);
   6129c:	01020074 	movhi	r4,2049
   612a0:	21041004 	addi	r4,r4,4160
   612a4:	01400244 	movi	r5,9
   612a8:	01803f44 	movi	r6,253
   612ac:	00607780 	call	60778 <INIT_B>
}
   612b0:	e037883a 	mov	sp,fp
   612b4:	dfc00117 	ldw	ra,4(sp)
   612b8:	df000017 	ldw	fp,0(sp)
   612bc:	dec00204 	addi	sp,sp,8
   612c0:	f800283a 	ret

000612c4 <read_EF>:
int read_EF(){
   612c4:	defffd04 	addi	sp,sp,-12
   612c8:	dfc00215 	stw	ra,8(sp)
   612cc:	df000115 	stw	fp,4(sp)
   612d0:	df000104 	addi	fp,sp,4
   int val;
   READ_B(&val, FIFO_EF_READ, FIFO_EF_CSR, FIFO_EF_ID);
   612d4:	e13fff04 	addi	r4,fp,-4
   612d8:	01420074 	movhi	r5,2049
   612dc:	29442e04 	addi	r5,r5,4280
   612e0:	01820074 	movhi	r6,2049
   612e4:	31841004 	addi	r6,r6,4160
   612e8:	01c00244 	movi	r7,9
   612ec:	006085c0 	call	6085c <READ_B>
   return val;
   612f0:	e0bfff17 	ldw	r2,-4(fp)
}
   612f4:	e037883a 	mov	sp,fp
   612f8:	dfc00117 	ldw	ra,4(sp)
   612fc:	df000017 	ldw	fp,0(sp)
   61300:	dec00204 	addi	sp,sp,8
   61304:	f800283a 	ret

00061308 <write_EF>:
void write_EF(int *buffer){
   61308:	defffc04 	addi	sp,sp,-16
   6130c:	dfc00315 	stw	ra,12(sp)
   61310:	df000215 	stw	fp,8(sp)
   61314:	df000204 	addi	fp,sp,8
   61318:	e13fff15 	stw	r4,-4(fp)
   WRITE_B(buffer, FIFO_EF_WRITE, FIFO_EF_CSR, FIFO_EF_SIZE, FIFO_EF_ID);
   6131c:	00800244 	movi	r2,9
   61320:	d8800015 	stw	r2,0(sp)
   61324:	e13fff17 	ldw	r4,-4(fp)
   61328:	01420074 	movhi	r5,2049
   6132c:	29442f04 	addi	r5,r5,4284
   61330:	01820074 	movhi	r6,2049
   61334:	31841004 	addi	r6,r6,4160
   61338:	01c03f44 	movi	r7,253
   6133c:	00607e40 	call	607e4 <WRITE_B>
}
   61340:	e037883a 	mov	sp,fp
   61344:	dfc00117 	ldw	ra,4(sp)
   61348:	df000017 	ldw	fp,0(sp)
   6134c:	dec00204 	addi	sp,sp,8
   61350:	f800283a 	ret

00061354 <readStatus_EF>:
void readStatus_EF(){
   61354:	defffe04 	addi	sp,sp,-8
   61358:	dfc00115 	stw	ra,4(sp)
   6135c:	df000015 	stw	fp,0(sp)
   61360:	d839883a 	mov	fp,sp
   print_status(FIFO_EF_CSR);
   61364:	01020074 	movhi	r4,2049
   61368:	21041004 	addi	r4,r4,4160
   6136c:	00609240 	call	60924 <print_status>
}
   61370:	e037883a 	mov	sp,fp
   61374:	dfc00117 	ldw	ra,4(sp)
   61378:	df000017 	ldw	fp,0(sp)
   6137c:	dec00204 	addi	sp,sp,8
   61380:	f800283a 	ret

00061384 <delay>:

#include "./utility.h"
#include "./IOMap.h"


void delay(int ms){
   61384:	defffd04 	addi	sp,sp,-12
   61388:	dfc00215 	stw	ra,8(sp)
   6138c:	df000115 	stw	fp,4(sp)
   61390:	df000104 	addi	fp,sp,4
   61394:	e13fff15 	stw	r4,-4(fp)
	usleep(ms*1000);
   61398:	e13fff17 	ldw	r4,-4(fp)
   6139c:	0140fa04 	movi	r5,1000
   613a0:	00614b40 	call	614b4 <__mulsi3>
   613a4:	1009883a 	mov	r4,r2
   613a8:	006b4280 	call	6b428 <usleep>
}
   613ac:	e037883a 	mov	sp,fp
   613b0:	dfc00117 	ldw	ra,4(sp)
   613b4:	df000017 	ldw	fp,0(sp)
   613b8:	dec00204 	addi	sp,sp,8
   613bc:	f800283a 	ret

000613c0 <ledUpdate>:

void ledUpdate(uint8_t digit, uint8_t status){
   613c0:	defffc04 	addi	sp,sp,-16
   613c4:	df000315 	stw	fp,12(sp)
   613c8:	df000304 	addi	fp,sp,12
   613cc:	2007883a 	mov	r3,r4
   613d0:	2805883a 	mov	r2,r5
   613d4:	e0fffe05 	stb	r3,-8(fp)
   613d8:	e0bfff05 	stb	r2,-4(fp)
	uint8_t value =  (uint8_t)IORD_32DIRECT(LED_BASE, OFFSET);
   613dc:	00820074 	movhi	r2,2049
   613e0:	10844004 	addi	r2,r2,4352
   613e4:	10800037 	ldwio	r2,0(r2)
   613e8:	e0bffd05 	stb	r2,-12(fp)

	if(status==1){
   613ec:	e0bfff03 	ldbu	r2,-4(fp)
   613f0:	10800058 	cmpnei	r2,r2,1
   613f4:	1000081e 	bne	r2,zero,61418 <ledUpdate+0x58>
		value = value | (1<<digit);
   613f8:	e0bffe03 	ldbu	r2,-8(fp)
   613fc:	00c00044 	movi	r3,1
   61400:	1884983a 	sll	r2,r3,r2
   61404:	1007883a 	mov	r3,r2
   61408:	e0bffd03 	ldbu	r2,-12(fp)
   6140c:	1884b03a 	or	r2,r3,r2
   61410:	e0bffd05 	stb	r2,-12(fp)
   61414:	00000806 	br	61438 <ledUpdate+0x78>
	}else{
		value = value & (~(1<<digit));
   61418:	e0bffe03 	ldbu	r2,-8(fp)
   6141c:	00c00044 	movi	r3,1
   61420:	1884983a 	sll	r2,r3,r2
   61424:	0084303a 	nor	r2,zero,r2
   61428:	1007883a 	mov	r3,r2
   6142c:	e0bffd03 	ldbu	r2,-12(fp)
   61430:	1884703a 	and	r2,r3,r2
   61434:	e0bffd05 	stb	r2,-12(fp)
	}
	IOWR_8DIRECT(LED_BASE,OFFSET,value);
   61438:	e0fffd03 	ldbu	r3,-12(fp)
   6143c:	00820074 	movhi	r2,2049
   61440:	10844004 	addi	r2,r2,4352
   61444:	10c00025 	stbio	r3,0(r2)
}
   61448:	e037883a 	mov	sp,fp
   6144c:	df000017 	ldw	fp,0(sp)
   61450:	dec00104 	addi	sp,sp,4
   61454:	f800283a 	ret

00061458 <ledBlink>:

void ledBlink(uint8_t id){
   61458:	defffd04 	addi	sp,sp,-12
   6145c:	dfc00215 	stw	ra,8(sp)
   61460:	df000115 	stw	fp,4(sp)
   61464:	df000104 	addi	fp,sp,4
   61468:	2005883a 	mov	r2,r4
   6146c:	e0bfff05 	stb	r2,-4(fp)
	ledUpdate(id,1);
   61470:	e0bfff03 	ldbu	r2,-4(fp)
   61474:	1009883a 	mov	r4,r2
   61478:	01400044 	movi	r5,1
   6147c:	00613c00 	call	613c0 <ledUpdate>
	delay(200);
   61480:	01003204 	movi	r4,200
   61484:	00613840 	call	61384 <delay>
	ledUpdate(id,0);
   61488:	e0bfff03 	ldbu	r2,-4(fp)
   6148c:	1009883a 	mov	r4,r2
   61490:	000b883a 	mov	r5,zero
   61494:	00613c00 	call	613c0 <ledUpdate>
	delay(50);
   61498:	01000c84 	movi	r4,50
   6149c:	00613840 	call	61384 <delay>
}
   614a0:	e037883a 	mov	sp,fp
   614a4:	dfc00117 	ldw	ra,4(sp)
   614a8:	df000017 	ldw	fp,0(sp)
   614ac:	dec00204 	addi	sp,sp,8
   614b0:	f800283a 	ret

000614b4 <__mulsi3>:
   614b4:	0005883a 	mov	r2,zero
   614b8:	20000726 	beq	r4,zero,614d8 <__mulsi3+0x24>
   614bc:	20c0004c 	andi	r3,r4,1
   614c0:	2008d07a 	srli	r4,r4,1
   614c4:	18000126 	beq	r3,zero,614cc <__mulsi3+0x18>
   614c8:	1145883a 	add	r2,r2,r5
   614cc:	294b883a 	add	r5,r5,r5
   614d0:	203ffa1e 	bne	r4,zero,614bc <__mulsi3+0x8>
   614d4:	f800283a 	ret
   614d8:	f800283a 	ret

000614dc <memcpy>:
   614dc:	defffb04 	addi	sp,sp,-20
   614e0:	dc000015 	stw	r16,0(sp)
   614e4:	dfc00415 	stw	ra,16(sp)
   614e8:	dcc00315 	stw	r19,12(sp)
   614ec:	dc800215 	stw	r18,8(sp)
   614f0:	dc400115 	stw	r17,4(sp)
   614f4:	00c003c4 	movi	r3,15
   614f8:	2021883a 	mov	r16,r4
   614fc:	3005883a 	mov	r2,r6
   61500:	1980032e 	bgeu	r3,r6,61510 <memcpy+0x34>
   61504:	2906b03a 	or	r3,r5,r4
   61508:	18c000cc 	andi	r3,r3,3
   6150c:	18001026 	beq	r3,zero,61550 <memcpy+0x74>
   61510:	8007883a 	mov	r3,r16
   61514:	288f883a 	add	r7,r5,r2
   61518:	10000526 	beq	r2,zero,61530 <memcpy+0x54>
   6151c:	29800003 	ldbu	r6,0(r5)
   61520:	18c00044 	addi	r3,r3,1
   61524:	29400044 	addi	r5,r5,1
   61528:	19bfffc5 	stb	r6,-1(r3)
   6152c:	29fffb1e 	bne	r5,r7,6151c <memcpy+0x40>
   61530:	8005883a 	mov	r2,r16
   61534:	dfc00417 	ldw	ra,16(sp)
   61538:	dcc00317 	ldw	r19,12(sp)
   6153c:	dc800217 	ldw	r18,8(sp)
   61540:	dc400117 	ldw	r17,4(sp)
   61544:	dc000017 	ldw	r16,0(sp)
   61548:	dec00504 	addi	sp,sp,20
   6154c:	f800283a 	ret
   61550:	32bffc04 	addi	r10,r6,-16
   61554:	5014d13a 	srli	r10,r10,4
   61558:	20800404 	addi	r2,r4,16
   6155c:	2007883a 	mov	r3,r4
   61560:	5008913a 	slli	r4,r10,4
   61564:	280f883a 	mov	r7,r5
   61568:	1105883a 	add	r2,r2,r4
   6156c:	3a000017 	ldw	r8,0(r7)
   61570:	18c00404 	addi	r3,r3,16
   61574:	39c00404 	addi	r7,r7,16
   61578:	1a3ffc15 	stw	r8,-16(r3)
   6157c:	3a3ffd17 	ldw	r8,-12(r7)
   61580:	1a3ffd15 	stw	r8,-12(r3)
   61584:	3a3ffe17 	ldw	r8,-8(r7)
   61588:	1a3ffe15 	stw	r8,-8(r3)
   6158c:	3a3fff17 	ldw	r8,-4(r7)
   61590:	1a3fff15 	stw	r8,-4(r3)
   61594:	18bff51e 	bne	r3,r2,6156c <memcpy+0x90>
   61598:	52800044 	addi	r10,r10,1
   6159c:	5014913a 	slli	r10,r10,4
   615a0:	308003cc 	andi	r2,r6,15
   615a4:	010000c4 	movi	r4,3
   615a8:	8287883a 	add	r3,r16,r10
   615ac:	2a95883a 	add	r10,r5,r10
   615b0:	2080182e 	bgeu	r4,r2,61614 <memcpy+0x138>
   615b4:	147fff04 	addi	r17,r2,-4
   615b8:	8808d0ba 	srli	r4,r17,2
   615bc:	1a400104 	addi	r9,r3,4
   615c0:	180d883a 	mov	r6,r3
   615c4:	2105883a 	add	r2,r4,r4
   615c8:	1085883a 	add	r2,r2,r2
   615cc:	4893883a 	add	r9,r9,r2
   615d0:	500f883a 	mov	r7,r10
   615d4:	3a000017 	ldw	r8,0(r7)
   615d8:	31800104 	addi	r6,r6,4
   615dc:	39c00104 	addi	r7,r7,4
   615e0:	323fff15 	stw	r8,-4(r6)
   615e4:	327ffb1e 	bne	r6,r9,615d4 <memcpy+0xf8>
   615e8:	20800044 	addi	r2,r4,1
   615ec:	1085883a 	add	r2,r2,r2
   615f0:	1085883a 	add	r2,r2,r2
   615f4:	017fff04 	movi	r5,-4
   615f8:	18a5883a 	add	r18,r3,r2
   615fc:	50a7883a 	add	r19,r10,r2
   61600:	00614b40 	call	614b4 <__mulsi3>
   61604:	1445883a 	add	r2,r2,r17
   61608:	980b883a 	mov	r5,r19
   6160c:	9007883a 	mov	r3,r18
   61610:	003fc006 	br	61514 <memcpy+0x38>
   61614:	500b883a 	mov	r5,r10
   61618:	003fbe06 	br	61514 <memcpy+0x38>

0006161c <_printf_r>:
   6161c:	defffd04 	addi	sp,sp,-12
   61620:	dfc00015 	stw	ra,0(sp)
   61624:	d9800115 	stw	r6,4(sp)
   61628:	d9c00215 	stw	r7,8(sp)
   6162c:	280d883a 	mov	r6,r5
   61630:	21400217 	ldw	r5,8(r4)
   61634:	d9c00104 	addi	r7,sp,4
   61638:	00617dc0 	call	617dc <___vfprintf_internal_r>
   6163c:	dfc00017 	ldw	ra,0(sp)
   61640:	dec00304 	addi	sp,sp,12
   61644:	f800283a 	ret

00061648 <printf>:
   61648:	defffc04 	addi	sp,sp,-16
   6164c:	dfc00015 	stw	ra,0(sp)
   61650:	d9400115 	stw	r5,4(sp)
   61654:	d9800215 	stw	r6,8(sp)
   61658:	d9c00315 	stw	r7,12(sp)
   6165c:	008001f4 	movhi	r2,7
   61660:	10be7104 	addi	r2,r2,-1596
   61664:	10800017 	ldw	r2,0(r2)
   61668:	200b883a 	mov	r5,r4
   6166c:	d9800104 	addi	r6,sp,4
   61670:	11000217 	ldw	r4,8(r2)
   61674:	00636580 	call	63658 <__vfprintf_internal>
   61678:	dfc00017 	ldw	ra,0(sp)
   6167c:	dec00404 	addi	sp,sp,16
   61680:	f800283a 	ret

00061684 <_puts_r>:
   61684:	defff604 	addi	sp,sp,-40
   61688:	dc400815 	stw	r17,32(sp)
   6168c:	2023883a 	mov	r17,r4
   61690:	2809883a 	mov	r4,r5
   61694:	dc000715 	stw	r16,28(sp)
   61698:	dfc00915 	stw	ra,36(sp)
   6169c:	2821883a 	mov	r16,r5
   616a0:	006171c0 	call	6171c <strlen>
   616a4:	10c00044 	addi	r3,r2,1
   616a8:	d8800115 	stw	r2,4(sp)
   616ac:	89400217 	ldw	r5,8(r17)
   616b0:	008001f4 	movhi	r2,7
   616b4:	10b71304 	addi	r2,r2,-9140
   616b8:	d8800215 	stw	r2,8(sp)
   616bc:	00800044 	movi	r2,1
   616c0:	d8800315 	stw	r2,12(sp)
   616c4:	8809883a 	mov	r4,r17
   616c8:	00800084 	movi	r2,2
   616cc:	d9800404 	addi	r6,sp,16
   616d0:	dc000015 	stw	r16,0(sp)
   616d4:	d8c00615 	stw	r3,24(sp)
   616d8:	dec00415 	stw	sp,16(sp)
   616dc:	d8800515 	stw	r2,20(sp)
   616e0:	00659580 	call	65958 <__sfvwrite_r>
   616e4:	1000061e 	bne	r2,zero,61700 <_puts_r+0x7c>
   616e8:	00800284 	movi	r2,10
   616ec:	dfc00917 	ldw	ra,36(sp)
   616f0:	dc400817 	ldw	r17,32(sp)
   616f4:	dc000717 	ldw	r16,28(sp)
   616f8:	dec00a04 	addi	sp,sp,40
   616fc:	f800283a 	ret
   61700:	00bfffc4 	movi	r2,-1
   61704:	003ff906 	br	616ec <_puts_r+0x68>

00061708 <puts>:
   61708:	008001f4 	movhi	r2,7
   6170c:	10be7104 	addi	r2,r2,-1596
   61710:	200b883a 	mov	r5,r4
   61714:	11000017 	ldw	r4,0(r2)
   61718:	00616841 	jmpi	61684 <_puts_r>

0006171c <strlen>:
   6171c:	208000cc 	andi	r2,r4,3
   61720:	10001f1e 	bne	r2,zero,617a0 <strlen+0x84>
   61724:	20800017 	ldw	r2,0(r4)
   61728:	01ffbff4 	movhi	r7,65279
   6172c:	39ffbfc4 	addi	r7,r7,-257
   61730:	01a02074 	movhi	r6,32897
   61734:	31a02004 	addi	r6,r6,-32640
   61738:	11c7883a 	add	r3,r2,r7
   6173c:	0084303a 	nor	r2,zero,r2
   61740:	1886703a 	and	r3,r3,r2
   61744:	1986703a 	and	r3,r3,r6
   61748:	2005883a 	mov	r2,r4
   6174c:	1800101e 	bne	r3,zero,61790 <strlen+0x74>
   61750:	10800104 	addi	r2,r2,4
   61754:	10c00017 	ldw	r3,0(r2)
   61758:	19cb883a 	add	r5,r3,r7
   6175c:	00c6303a 	nor	r3,zero,r3
   61760:	28c6703a 	and	r3,r5,r3
   61764:	1986703a 	and	r3,r3,r6
   61768:	1800091e 	bne	r3,zero,61790 <strlen+0x74>
   6176c:	10800104 	addi	r2,r2,4
   61770:	10c00017 	ldw	r3,0(r2)
   61774:	19cb883a 	add	r5,r3,r7
   61778:	00c6303a 	nor	r3,zero,r3
   6177c:	28c6703a 	and	r3,r5,r3
   61780:	1986703a 	and	r3,r3,r6
   61784:	183ff226 	beq	r3,zero,61750 <strlen+0x34>
   61788:	00000106 	br	61790 <strlen+0x74>
   6178c:	10800044 	addi	r2,r2,1
   61790:	10c00007 	ldb	r3,0(r2)
   61794:	183ffd1e 	bne	r3,zero,6178c <strlen+0x70>
   61798:	1105c83a 	sub	r2,r2,r4
   6179c:	f800283a 	ret
   617a0:	2005883a 	mov	r2,r4
   617a4:	003ffa06 	br	61790 <strlen+0x74>

000617a8 <__sprint_r>:
   617a8:	30800217 	ldw	r2,8(r6)
   617ac:	defffe04 	addi	sp,sp,-8
   617b0:	dc000015 	stw	r16,0(sp)
   617b4:	dfc00115 	stw	ra,4(sp)
   617b8:	3021883a 	mov	r16,r6
   617bc:	10000226 	beq	r2,zero,617c8 <__sprint_r+0x20>
   617c0:	00659580 	call	65958 <__sfvwrite_r>
   617c4:	80000215 	stw	zero,8(r16)
   617c8:	80000115 	stw	zero,4(r16)
   617cc:	dfc00117 	ldw	ra,4(sp)
   617d0:	dc000017 	ldw	r16,0(sp)
   617d4:	dec00204 	addi	sp,sp,8
   617d8:	f800283a 	ret

000617dc <___vfprintf_internal_r>:
   617dc:	defeb904 	addi	sp,sp,-1308
   617e0:	dc013d15 	stw	r16,1268(sp)
   617e4:	d9013015 	stw	r4,1216(sp)
   617e8:	dfc14615 	stw	ra,1304(sp)
   617ec:	df014515 	stw	fp,1300(sp)
   617f0:	ddc14415 	stw	r23,1296(sp)
   617f4:	dd814315 	stw	r22,1292(sp)
   617f8:	dd414215 	stw	r21,1288(sp)
   617fc:	dd014115 	stw	r20,1284(sp)
   61800:	dcc14015 	stw	r19,1280(sp)
   61804:	dc813f15 	stw	r18,1276(sp)
   61808:	dc413e15 	stw	r17,1272(sp)
   6180c:	d9412915 	stw	r5,1188(sp)
   61810:	3021883a 	mov	r16,r6
   61814:	d9c12d15 	stw	r7,1204(sp)
   61818:	00660440 	call	66044 <_localeconv_r>
   6181c:	10800017 	ldw	r2,0(r2)
   61820:	d9013017 	ldw	r4,1216(sp)
   61824:	d8013315 	stw	zero,1228(sp)
   61828:	d8813715 	stw	r2,1244(sp)
   6182c:	d8013415 	stw	zero,1232(sp)
   61830:	20000226 	beq	r4,zero,6183c <___vfprintf_internal_r+0x60>
   61834:	20800e17 	ldw	r2,56(r4)
   61838:	10014b26 	beq	r2,zero,61d68 <___vfprintf_internal_r+0x58c>
   6183c:	d8c12917 	ldw	r3,1188(sp)
   61840:	1880030b 	ldhu	r2,12(r3)
   61844:	10c0020c 	andi	r3,r2,8
   61848:	18ffffcc 	andi	r3,r3,65535
   6184c:	18e0001c 	xori	r3,r3,32768
   61850:	18e00004 	addi	r3,r3,-32768
   61854:	1800ed26 	beq	r3,zero,61c0c <___vfprintf_internal_r+0x430>
   61858:	d9012917 	ldw	r4,1188(sp)
   6185c:	20c00417 	ldw	r3,16(r4)
   61860:	1800ea26 	beq	r3,zero,61c0c <___vfprintf_internal_r+0x430>
   61864:	1100068c 	andi	r4,r2,26
   61868:	00c00284 	movi	r3,10
   6186c:	20c0f026 	beq	r4,r3,61c30 <___vfprintf_internal_r+0x454>
   61870:	d9010dc4 	addi	r4,sp,1079
   61874:	d8810e04 	addi	r2,sp,1080
   61878:	dc413017 	ldw	r17,1216(sp)
   6187c:	d8c00404 	addi	r3,sp,16
   61880:	d9012615 	stw	r4,1176(sp)
   61884:	1109c83a 	sub	r4,r2,r4
   61888:	d8812715 	stw	r2,1180(sp)
   6188c:	d8c11b15 	stw	r3,1132(sp)
   61890:	d8011d15 	stw	zero,1140(sp)
   61894:	d8011c15 	stw	zero,1136(sp)
   61898:	802b883a 	mov	r21,r16
   6189c:	d8013215 	stw	zero,1224(sp)
   618a0:	d8013615 	stw	zero,1240(sp)
   618a4:	d8013515 	stw	zero,1236(sp)
   618a8:	d8012c15 	stw	zero,1200(sp)
   618ac:	1813883a 	mov	r9,r3
   618b0:	d9013915 	stw	r4,1252(sp)
   618b4:	a8800007 	ldb	r2,0(r21)
   618b8:	1002f326 	beq	r2,zero,62488 <___vfprintf_internal_r+0xcac>
   618bc:	00c00944 	movi	r3,37
   618c0:	a825883a 	mov	r18,r21
   618c4:	10c0021e 	bne	r2,r3,618d0 <___vfprintf_internal_r+0xf4>
   618c8:	00001406 	br	6191c <___vfprintf_internal_r+0x140>
   618cc:	10c00326 	beq	r2,r3,618dc <___vfprintf_internal_r+0x100>
   618d0:	94800044 	addi	r18,r18,1
   618d4:	90800007 	ldb	r2,0(r18)
   618d8:	103ffc1e 	bne	r2,zero,618cc <___vfprintf_internal_r+0xf0>
   618dc:	9561c83a 	sub	r16,r18,r21
   618e0:	80000e26 	beq	r16,zero,6191c <___vfprintf_internal_r+0x140>
   618e4:	da011d17 	ldw	r8,1140(sp)
   618e8:	d8c11c17 	ldw	r3,1136(sp)
   618ec:	4d400015 	stw	r21,0(r9)
   618f0:	4c000115 	stw	r16,4(r9)
   618f4:	4411883a 	add	r8,r8,r16
   618f8:	18c00044 	addi	r3,r3,1
   618fc:	da011d15 	stw	r8,1140(sp)
   61900:	d8c11c15 	stw	r3,1136(sp)
   61904:	008001c4 	movi	r2,7
   61908:	10c11016 	blt	r2,r3,61d4c <___vfprintf_internal_r+0x570>
   6190c:	4a400204 	addi	r9,r9,8
   61910:	d8812c17 	ldw	r2,1200(sp)
   61914:	1405883a 	add	r2,r2,r16
   61918:	d8812c15 	stw	r2,1200(sp)
   6191c:	90800007 	ldb	r2,0(r18)
   61920:	1000ee26 	beq	r2,zero,61cdc <___vfprintf_internal_r+0x500>
   61924:	95400044 	addi	r21,r18,1
   61928:	94800047 	ldb	r18,1(r18)
   6192c:	073fffc4 	movi	fp,-1
   61930:	e007883a 	mov	r3,fp
   61934:	d8012585 	stb	zero,1174(sp)
   61938:	d8012e15 	stw	zero,1208(sp)
   6193c:	0021883a 	mov	r16,zero
   61940:	05001604 	movi	r20,88
   61944:	04c00244 	movi	r19,9
   61948:	4839883a 	mov	fp,r9
   6194c:	ad400044 	addi	r21,r21,1
   61950:	90bff804 	addi	r2,r18,-32
   61954:	a080462e 	bgeu	r20,r2,61a70 <___vfprintf_internal_r+0x294>
   61958:	e013883a 	mov	r9,fp
   6195c:	9000df26 	beq	r18,zero,61cdc <___vfprintf_internal_r+0x500>
   61960:	00c00044 	movi	r3,1
   61964:	d8c12815 	stw	r3,1184(sp)
   61968:	dc810405 	stb	r18,1040(sp)
   6196c:	d8012585 	stb	zero,1174(sp)
   61970:	d8c12b15 	stw	r3,1196(sp)
   61974:	dcc10404 	addi	r19,sp,1040
   61978:	d8013115 	stw	zero,1220(sp)
   6197c:	80c0008c 	andi	r3,r16,2
   61980:	d8c12a15 	stw	r3,1192(sp)
   61984:	18000326 	beq	r3,zero,61994 <___vfprintf_internal_r+0x1b8>
   61988:	d8c12817 	ldw	r3,1184(sp)
   6198c:	18c00084 	addi	r3,r3,2
   61990:	d8c12815 	stw	r3,1184(sp)
   61994:	80c0210c 	andi	r3,r16,132
   61998:	d8c12f15 	stw	r3,1212(sp)
   6199c:	1802251e 	bne	r3,zero,62234 <___vfprintf_internal_r+0xa58>
   619a0:	d9012e17 	ldw	r4,1208(sp)
   619a4:	d8c12817 	ldw	r3,1184(sp)
   619a8:	20edc83a 	sub	r22,r4,r3
   619ac:	0582210e 	bge	zero,r22,62234 <___vfprintf_internal_r+0xa58>
   619b0:	02800404 	movi	r10,16
   619b4:	da011d17 	ldw	r8,1140(sp)
   619b8:	d8c11c17 	ldw	r3,1136(sp)
   619bc:	05c001f4 	movhi	r23,7
   619c0:	bdf72484 	addi	r23,r23,-9070
   619c4:	5580200e 	bge	r10,r22,61a48 <___vfprintf_internal_r+0x26c>
   619c8:	dc813815 	stw	r18,1248(sp)
   619cc:	5039883a 	mov	fp,r10
   619d0:	b825883a 	mov	r18,r23
   619d4:	050001c4 	movi	r20,7
   619d8:	b02f883a 	mov	r23,r22
   619dc:	802d883a 	mov	r22,r16
   619e0:	dc012917 	ldw	r16,1188(sp)
   619e4:	00000306 	br	619f4 <___vfprintf_internal_r+0x218>
   619e8:	bdfffc04 	addi	r23,r23,-16
   619ec:	4a400204 	addi	r9,r9,8
   619f0:	e5c0110e 	bge	fp,r23,61a38 <___vfprintf_internal_r+0x25c>
   619f4:	4c800015 	stw	r18,0(r9)
   619f8:	4f000115 	stw	fp,4(r9)
   619fc:	42000404 	addi	r8,r8,16
   61a00:	18c00044 	addi	r3,r3,1
   61a04:	da011d15 	stw	r8,1140(sp)
   61a08:	d8c11c15 	stw	r3,1136(sp)
   61a0c:	a0fff60e 	bge	r20,r3,619e8 <___vfprintf_internal_r+0x20c>
   61a10:	8809883a 	mov	r4,r17
   61a14:	800b883a 	mov	r5,r16
   61a18:	d9811b04 	addi	r6,sp,1132
   61a1c:	00617a80 	call	617a8 <__sprint_r>
   61a20:	1000b41e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   61a24:	bdfffc04 	addi	r23,r23,-16
   61a28:	da011d17 	ldw	r8,1140(sp)
   61a2c:	d8c11c17 	ldw	r3,1136(sp)
   61a30:	da400404 	addi	r9,sp,16
   61a34:	e5ffef16 	blt	fp,r23,619f4 <___vfprintf_internal_r+0x218>
   61a38:	b021883a 	mov	r16,r22
   61a3c:	b82d883a 	mov	r22,r23
   61a40:	902f883a 	mov	r23,r18
   61a44:	dc813817 	ldw	r18,1248(sp)
   61a48:	4dc00015 	stw	r23,0(r9)
   61a4c:	4d800115 	stw	r22,4(r9)
   61a50:	4591883a 	add	r8,r8,r22
   61a54:	18c00044 	addi	r3,r3,1
   61a58:	da011d15 	stw	r8,1140(sp)
   61a5c:	d8c11c15 	stw	r3,1136(sp)
   61a60:	008001c4 	movi	r2,7
   61a64:	10c3fe16 	blt	r2,r3,62a60 <___vfprintf_internal_r+0x1284>
   61a68:	4a400204 	addi	r9,r9,8
   61a6c:	0001f306 	br	6223c <___vfprintf_internal_r+0xa60>
   61a70:	1085883a 	add	r2,r2,r2
   61a74:	1085883a 	add	r2,r2,r2
   61a78:	010001b4 	movhi	r4,6
   61a7c:	2106a304 	addi	r4,r4,6796
   61a80:	1105883a 	add	r2,r2,r4
   61a84:	10800017 	ldw	r2,0(r2)
   61a88:	1000683a 	jmp	r2
   61a8c:	00062168 	cmpgeui	zero,zero,6277
   61a90:	00061958 	cmpnei	zero,zero,6245
   61a94:	00061958 	cmpnei	zero,zero,6245
   61a98:	00062180 	call	6218 <__alt_mem_SDRAM_controller+0x6218>
   61a9c:	00061958 	cmpnei	zero,zero,6245
   61aa0:	00061958 	cmpnei	zero,zero,6245
   61aa4:	00061958 	cmpnei	zero,zero,6245
   61aa8:	00061958 	cmpnei	zero,zero,6245
   61aac:	00061958 	cmpnei	zero,zero,6245
   61ab0:	00061958 	cmpnei	zero,zero,6245
   61ab4:	00062038 	rdprs	zero,zero,6272
   61ab8:	000621cc 	andi	zero,zero,6279
   61abc:	00061958 	cmpnei	zero,zero,6245
   61ac0:	00061c00 	call	61c0 <__alt_mem_SDRAM_controller+0x61c0>
   61ac4:	00061fa0 	cmpeqi	zero,zero,6270
   61ac8:	00061958 	cmpnei	zero,zero,6245
   61acc:	0006218c 	andi	zero,zero,6278
   61ad0:	00062198 	cmpnei	zero,zero,6278
   61ad4:	00062198 	cmpnei	zero,zero,6278
   61ad8:	00062198 	cmpnei	zero,zero,6278
   61adc:	00062198 	cmpnei	zero,zero,6278
   61ae0:	00062198 	cmpnei	zero,zero,6278
   61ae4:	00062198 	cmpnei	zero,zero,6278
   61ae8:	00062198 	cmpnei	zero,zero,6278
   61aec:	00062198 	cmpnei	zero,zero,6278
   61af0:	00062198 	cmpnei	zero,zero,6278
   61af4:	00061958 	cmpnei	zero,zero,6245
   61af8:	00061958 	cmpnei	zero,zero,6245
   61afc:	00061958 	cmpnei	zero,zero,6245
   61b00:	00061958 	cmpnei	zero,zero,6245
   61b04:	00061958 	cmpnei	zero,zero,6245
   61b08:	00061958 	cmpnei	zero,zero,6245
   61b0c:	00061958 	cmpnei	zero,zero,6245
   61b10:	00061958 	cmpnei	zero,zero,6245
   61b14:	00061958 	cmpnei	zero,zero,6245
   61b18:	00061958 	cmpnei	zero,zero,6245
   61b1c:	00061d70 	cmpltui	zero,zero,6261
   61b20:	00061e30 	cmpltui	zero,zero,6264
   61b24:	00061958 	cmpnei	zero,zero,6245
   61b28:	00061e30 	cmpltui	zero,zero,6264
   61b2c:	00061958 	cmpnei	zero,zero,6245
   61b30:	00061958 	cmpnei	zero,zero,6245
   61b34:	00061958 	cmpnei	zero,zero,6245
   61b38:	00061958 	cmpnei	zero,zero,6245
   61b3c:	00061ec4 	movi	zero,6267
   61b40:	00061958 	cmpnei	zero,zero,6245
   61b44:	00061958 	cmpnei	zero,zero,6245
   61b48:	00061ed0 	cmplti	zero,zero,6267
   61b4c:	00061958 	cmpnei	zero,zero,6245
   61b50:	00061958 	cmpnei	zero,zero,6245
   61b54:	00061958 	cmpnei	zero,zero,6245
   61b58:	00061958 	cmpnei	zero,zero,6245
   61b5c:	00061958 	cmpnei	zero,zero,6245
   61b60:	00061f08 	cmpgei	zero,zero,6268
   61b64:	00061958 	cmpnei	zero,zero,6245
   61b68:	00061958 	cmpnei	zero,zero,6245
   61b6c:	00061f44 	movi	zero,6269
   61b70:	00061958 	cmpnei	zero,zero,6245
   61b74:	00061958 	cmpnei	zero,zero,6245
   61b78:	00061958 	cmpnei	zero,zero,6245
   61b7c:	00061958 	cmpnei	zero,zero,6245
   61b80:	00061958 	cmpnei	zero,zero,6245
   61b84:	00061958 	cmpnei	zero,zero,6245
   61b88:	00061958 	cmpnei	zero,zero,6245
   61b8c:	00061958 	cmpnei	zero,zero,6245
   61b90:	00061958 	cmpnei	zero,zero,6245
   61b94:	00061958 	cmpnei	zero,zero,6245
   61b98:	000621dc 	xori	zero,zero,6279
   61b9c:	00062210 	cmplti	zero,zero,6280
   61ba0:	00061e30 	cmpltui	zero,zero,6264
   61ba4:	00061e30 	cmpltui	zero,zero,6264
   61ba8:	00061e30 	cmpltui	zero,zero,6264
   61bac:	0006215c 	xori	zero,zero,6277
   61bb0:	00062210 	cmplti	zero,zero,6280
   61bb4:	00061958 	cmpnei	zero,zero,6245
   61bb8:	00061958 	cmpnei	zero,zero,6245
   61bbc:	00061fe8 	cmpgeui	zero,zero,6271
   61bc0:	00061958 	cmpnei	zero,zero,6245
   61bc4:	00062000 	call	6200 <__alt_mem_SDRAM_controller+0x6200>
   61bc8:	0006221c 	xori	zero,zero,6280
   61bcc:	00062060 	cmpeqi	zero,zero,6273
   61bd0:	000620b0 	cmpltui	zero,zero,6274
   61bd4:	00061958 	cmpnei	zero,zero,6245
   61bd8:	000620bc 	xorhi	zero,zero,6274
   61bdc:	00061958 	cmpnei	zero,zero,6245
   61be0:	00062228 	cmpgeui	zero,zero,6280
   61be4:	00061958 	cmpnei	zero,zero,6245
   61be8:	00061958 	cmpnei	zero,zero,6245
   61bec:	00062120 	cmpeqi	zero,zero,6276
   61bf0:	d9012e17 	ldw	r4,1208(sp)
   61bf4:	d8812d15 	stw	r2,1204(sp)
   61bf8:	0109c83a 	sub	r4,zero,r4
   61bfc:	d9012e15 	stw	r4,1208(sp)
   61c00:	84000114 	ori	r16,r16,4
   61c04:	ac800007 	ldb	r18,0(r21)
   61c08:	003f5006 	br	6194c <___vfprintf_internal_r+0x170>
   61c0c:	d9013017 	ldw	r4,1216(sp)
   61c10:	d9412917 	ldw	r5,1188(sp)
   61c14:	006367c0 	call	6367c <__swsetup_r>
   61c18:	10003d1e 	bne	r2,zero,61d10 <___vfprintf_internal_r+0x534>
   61c1c:	d8c12917 	ldw	r3,1188(sp)
   61c20:	1880030b 	ldhu	r2,12(r3)
   61c24:	00c00284 	movi	r3,10
   61c28:	1100068c 	andi	r4,r2,26
   61c2c:	20ff101e 	bne	r4,r3,61870 <___vfprintf_internal_r+0x94>
   61c30:	d9012917 	ldw	r4,1188(sp)
   61c34:	20c0038b 	ldhu	r3,14(r4)
   61c38:	193fffcc 	andi	r4,r3,65535
   61c3c:	2120001c 	xori	r4,r4,32768
   61c40:	21200004 	addi	r4,r4,-32768
   61c44:	203f0a16 	blt	r4,zero,61870 <___vfprintf_internal_r+0x94>
   61c48:	d9012917 	ldw	r4,1188(sp)
   61c4c:	d9c12d17 	ldw	r7,1204(sp)
   61c50:	10bfff4c 	andi	r2,r2,65533
   61c54:	22800717 	ldw	r10,28(r4)
   61c58:	22400917 	ldw	r9,36(r4)
   61c5c:	d9013017 	ldw	r4,1216(sp)
   61c60:	02010004 	movi	r8,1024
   61c64:	d881070d 	sth	r2,1052(sp)
   61c68:	d9410404 	addi	r5,sp,1040
   61c6c:	d8800404 	addi	r2,sp,16
   61c70:	800d883a 	mov	r6,r16
   61c74:	d8c1078d 	sth	r3,1054(sp)
   61c78:	da810b15 	stw	r10,1068(sp)
   61c7c:	da410d15 	stw	r9,1076(sp)
   61c80:	d8810415 	stw	r2,1040(sp)
   61c84:	d8810815 	stw	r2,1056(sp)
   61c88:	da010615 	stw	r8,1048(sp)
   61c8c:	da010915 	stw	r8,1060(sp)
   61c90:	d8010a15 	stw	zero,1064(sp)
   61c94:	00617dc0 	call	617dc <___vfprintf_internal_r>
   61c98:	d8812c15 	stw	r2,1200(sp)
   61c9c:	10000416 	blt	r2,zero,61cb0 <___vfprintf_internal_r+0x4d4>
   61ca0:	d9013017 	ldw	r4,1216(sp)
   61ca4:	d9410404 	addi	r5,sp,1040
   61ca8:	00650480 	call	65048 <_fflush_r>
   61cac:	1006501e 	bne	r2,zero,635f0 <___vfprintf_internal_r+0x1e14>
   61cb0:	d881070b 	ldhu	r2,1052(sp)
   61cb4:	1080100c 	andi	r2,r2,64
   61cb8:	10bfffcc 	andi	r2,r2,65535
   61cbc:	10a0001c 	xori	r2,r2,32768
   61cc0:	10a00004 	addi	r2,r2,-32768
   61cc4:	10001426 	beq	r2,zero,61d18 <___vfprintf_internal_r+0x53c>
   61cc8:	d8c12917 	ldw	r3,1188(sp)
   61ccc:	1880030b 	ldhu	r2,12(r3)
   61cd0:	10801014 	ori	r2,r2,64
   61cd4:	1880030d 	sth	r2,12(r3)
   61cd8:	00000f06 	br	61d18 <___vfprintf_internal_r+0x53c>
   61cdc:	d8811d17 	ldw	r2,1140(sp)
   61ce0:	10000426 	beq	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   61ce4:	d9013017 	ldw	r4,1216(sp)
   61ce8:	d9412917 	ldw	r5,1188(sp)
   61cec:	d9811b04 	addi	r6,sp,1132
   61cf0:	00617a80 	call	617a8 <__sprint_r>
   61cf4:	d8c12917 	ldw	r3,1188(sp)
   61cf8:	1880030b 	ldhu	r2,12(r3)
   61cfc:	1080100c 	andi	r2,r2,64
   61d00:	10bfffcc 	andi	r2,r2,65535
   61d04:	10a0001c 	xori	r2,r2,32768
   61d08:	10a00004 	addi	r2,r2,-32768
   61d0c:	10000226 	beq	r2,zero,61d18 <___vfprintf_internal_r+0x53c>
   61d10:	00bfffc4 	movi	r2,-1
   61d14:	d8812c15 	stw	r2,1200(sp)
   61d18:	d8812c17 	ldw	r2,1200(sp)
   61d1c:	dfc14617 	ldw	ra,1304(sp)
   61d20:	df014517 	ldw	fp,1300(sp)
   61d24:	ddc14417 	ldw	r23,1296(sp)
   61d28:	dd814317 	ldw	r22,1292(sp)
   61d2c:	dd414217 	ldw	r21,1288(sp)
   61d30:	dd014117 	ldw	r20,1284(sp)
   61d34:	dcc14017 	ldw	r19,1280(sp)
   61d38:	dc813f17 	ldw	r18,1276(sp)
   61d3c:	dc413e17 	ldw	r17,1272(sp)
   61d40:	dc013d17 	ldw	r16,1268(sp)
   61d44:	dec14704 	addi	sp,sp,1308
   61d48:	f800283a 	ret
   61d4c:	d9412917 	ldw	r5,1188(sp)
   61d50:	8809883a 	mov	r4,r17
   61d54:	d9811b04 	addi	r6,sp,1132
   61d58:	00617a80 	call	617a8 <__sprint_r>
   61d5c:	103fe51e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   61d60:	da400404 	addi	r9,sp,16
   61d64:	003eea06 	br	61910 <___vfprintf_internal_r+0x134>
   61d68:	00653040 	call	65304 <__sinit>
   61d6c:	003eb306 	br	6183c <___vfprintf_internal_r+0x60>
   61d70:	e013883a 	mov	r9,fp
   61d74:	84000414 	ori	r16,r16,16
   61d78:	1839883a 	mov	fp,r3
   61d7c:	8080080c 	andi	r2,r16,32
   61d80:	10034426 	beq	r2,zero,62a94 <___vfprintf_internal_r+0x12b8>
   61d84:	d8c12d17 	ldw	r3,1204(sp)
   61d88:	18800117 	ldw	r2,4(r3)
   61d8c:	1dc00017 	ldw	r23,0(r3)
   61d90:	18c00204 	addi	r3,r3,8
   61d94:	d8c12d15 	stw	r3,1204(sp)
   61d98:	102d883a 	mov	r22,r2
   61d9c:	1003020e 	bge	r2,zero,629a8 <___vfprintf_internal_r+0x11cc>
   61da0:	05efc83a 	sub	r23,zero,r23
   61da4:	b804c03a 	cmpne	r2,r23,zero
   61da8:	05adc83a 	sub	r22,zero,r22
   61dac:	b0adc83a 	sub	r22,r22,r2
   61db0:	00800b44 	movi	r2,45
   61db4:	d8812585 	stb	r2,1174(sp)
   61db8:	00c00044 	movi	r3,1
   61dbc:	bd84b03a 	or	r2,r23,r22
   61dc0:	e0000216 	blt	fp,zero,61dcc <___vfprintf_internal_r+0x5f0>
   61dc4:	013fdfc4 	movi	r4,-129
   61dc8:	8120703a 	and	r16,r16,r4
   61dcc:	1001cc1e 	bne	r2,zero,62500 <___vfprintf_internal_r+0xd24>
   61dd0:	e001cb1e 	bne	fp,zero,62500 <___vfprintf_internal_r+0xd24>
   61dd4:	18c03fcc 	andi	r3,r3,255
   61dd8:	1802ca1e 	bne	r3,zero,62904 <___vfprintf_internal_r+0x1128>
   61ddc:	8080004c 	andi	r2,r16,1
   61de0:	1002c826 	beq	r2,zero,62904 <___vfprintf_internal_r+0x1128>
   61de4:	d8c13917 	ldw	r3,1252(sp)
   61de8:	00800c04 	movi	r2,48
   61dec:	d8810dc5 	stb	r2,1079(sp)
   61df0:	d8c12b15 	stw	r3,1196(sp)
   61df4:	dcc10dc4 	addi	r19,sp,1079
   61df8:	d8812b17 	ldw	r2,1196(sp)
   61dfc:	d8812815 	stw	r2,1184(sp)
   61e00:	1700010e 	bge	r2,fp,61e08 <___vfprintf_internal_r+0x62c>
   61e04:	df012815 	stw	fp,1184(sp)
   61e08:	d8812583 	ldbu	r2,1174(sp)
   61e0c:	df013115 	stw	fp,1220(sp)
   61e10:	10803fcc 	andi	r2,r2,255
   61e14:	1080201c 	xori	r2,r2,128
   61e18:	10bfe004 	addi	r2,r2,-128
   61e1c:	103ed726 	beq	r2,zero,6197c <___vfprintf_internal_r+0x1a0>
   61e20:	d8c12817 	ldw	r3,1184(sp)
   61e24:	18c00044 	addi	r3,r3,1
   61e28:	d8c12815 	stw	r3,1184(sp)
   61e2c:	003ed306 	br	6197c <___vfprintf_internal_r+0x1a0>
   61e30:	8080020c 	andi	r2,r16,8
   61e34:	e013883a 	mov	r9,fp
   61e38:	1839883a 	mov	fp,r3
   61e3c:	1003a626 	beq	r2,zero,62cd8 <___vfprintf_internal_r+0x14fc>
   61e40:	d9012d17 	ldw	r4,1204(sp)
   61e44:	25800017 	ldw	r22,0(r4)
   61e48:	25000117 	ldw	r20,4(r4)
   61e4c:	21000204 	addi	r4,r4,8
   61e50:	d9012d15 	stw	r4,1204(sp)
   61e54:	dd813315 	stw	r22,1228(sp)
   61e58:	dd013415 	stw	r20,1232(sp)
   61e5c:	b009883a 	mov	r4,r22
   61e60:	a00b883a 	mov	r5,r20
   61e64:	da413c15 	stw	r9,1264(sp)
   61e68:	00683500 	call	68350 <__isinfd>
   61e6c:	da413c17 	ldw	r9,1264(sp)
   61e70:	b009883a 	mov	r4,r22
   61e74:	a00b883a 	mov	r5,r20
   61e78:	10041d26 	beq	r2,zero,62ef0 <___vfprintf_internal_r+0x1714>
   61e7c:	000d883a 	mov	r6,zero
   61e80:	000f883a 	mov	r7,zero
   61e84:	006a1240 	call	6a124 <__ltdf2>
   61e88:	da413c17 	ldw	r9,1264(sp)
   61e8c:	1004da16 	blt	r2,zero,631f8 <___vfprintf_internal_r+0x1a1c>
   61e90:	d8812583 	ldbu	r2,1174(sp)
   61e94:	00c011c4 	movi	r3,71
   61e98:	1c83d116 	blt	r3,r18,62de0 <___vfprintf_internal_r+0x1604>
   61e9c:	04c001f4 	movhi	r19,7
   61ea0:	9cf71404 	addi	r19,r19,-9136
   61ea4:	00c000c4 	movi	r3,3
   61ea8:	d8c12815 	stw	r3,1184(sp)
   61eac:	00ffdfc4 	movi	r3,-129
   61eb0:	80e0703a 	and	r16,r16,r3
   61eb4:	d8c12817 	ldw	r3,1184(sp)
   61eb8:	d8013115 	stw	zero,1220(sp)
   61ebc:	d8c12b15 	stw	r3,1196(sp)
   61ec0:	003fd306 	br	61e10 <___vfprintf_internal_r+0x634>
   61ec4:	84000214 	ori	r16,r16,8
   61ec8:	ac800007 	ldb	r18,0(r21)
   61ecc:	003e9f06 	br	6194c <___vfprintf_internal_r+0x170>
   61ed0:	e013883a 	mov	r9,fp
   61ed4:	84000414 	ori	r16,r16,16
   61ed8:	1839883a 	mov	fp,r3
   61edc:	8080080c 	andi	r2,r16,32
   61ee0:	10031d26 	beq	r2,zero,62b58 <___vfprintf_internal_r+0x137c>
   61ee4:	d8812d17 	ldw	r2,1204(sp)
   61ee8:	0007883a 	mov	r3,zero
   61eec:	15c00017 	ldw	r23,0(r2)
   61ef0:	15800117 	ldw	r22,4(r2)
   61ef4:	10800204 	addi	r2,r2,8
   61ef8:	d8812d15 	stw	r2,1204(sp)
   61efc:	d8012585 	stb	zero,1174(sp)
   61f00:	bd84b03a 	or	r2,r23,r22
   61f04:	003fae06 	br	61dc0 <___vfprintf_internal_r+0x5e4>
   61f08:	e013883a 	mov	r9,fp
   61f0c:	84000414 	ori	r16,r16,16
   61f10:	1839883a 	mov	fp,r3
   61f14:	8080080c 	andi	r2,r16,32
   61f18:	1002e726 	beq	r2,zero,62ab8 <___vfprintf_internal_r+0x12dc>
   61f1c:	d8c12d17 	ldw	r3,1204(sp)
   61f20:	d9012d17 	ldw	r4,1204(sp)
   61f24:	1dc00017 	ldw	r23,0(r3)
   61f28:	1d800117 	ldw	r22,4(r3)
   61f2c:	21000204 	addi	r4,r4,8
   61f30:	00c00044 	movi	r3,1
   61f34:	d9012d15 	stw	r4,1204(sp)
   61f38:	bd84b03a 	or	r2,r23,r22
   61f3c:	d8012585 	stb	zero,1174(sp)
   61f40:	003f9f06 	br	61dc0 <___vfprintf_internal_r+0x5e4>
   61f44:	e013883a 	mov	r9,fp
   61f48:	1839883a 	mov	fp,r3
   61f4c:	00c001f4 	movhi	r3,7
   61f50:	18f71804 	addi	r3,r3,-9120
   61f54:	d8c13615 	stw	r3,1240(sp)
   61f58:	8080080c 	andi	r2,r16,32
   61f5c:	10007726 	beq	r2,zero,6213c <___vfprintf_internal_r+0x960>
   61f60:	d9012d17 	ldw	r4,1204(sp)
   61f64:	25c00017 	ldw	r23,0(r4)
   61f68:	25800117 	ldw	r22,4(r4)
   61f6c:	21000204 	addi	r4,r4,8
   61f70:	d9012d15 	stw	r4,1204(sp)
   61f74:	8080004c 	andi	r2,r16,1
   61f78:	1002c226 	beq	r2,zero,62a84 <___vfprintf_internal_r+0x12a8>
   61f7c:	bd84b03a 	or	r2,r23,r22
   61f80:	10035d26 	beq	r2,zero,62cf8 <___vfprintf_internal_r+0x151c>
   61f84:	00c00c04 	movi	r3,48
   61f88:	d8c12505 	stb	r3,1172(sp)
   61f8c:	dc812545 	stb	r18,1173(sp)
   61f90:	84000094 	ori	r16,r16,2
   61f94:	00c00084 	movi	r3,2
   61f98:	d8012585 	stb	zero,1174(sp)
   61f9c:	003f8806 	br	61dc0 <___vfprintf_internal_r+0x5e4>
   61fa0:	ac800007 	ldb	r18,0(r21)
   61fa4:	00c00a84 	movi	r3,42
   61fa8:	adc00044 	addi	r23,r21,1
   61fac:	90c57526 	beq	r18,r3,63584 <___vfprintf_internal_r+0x1da8>
   61fb0:	95bff404 	addi	r22,r18,-48
   61fb4:	0009883a 	mov	r4,zero
   61fb8:	9d84ff36 	bltu	r19,r22,633b8 <___vfprintf_internal_r+0x1bdc>
   61fbc:	01400284 	movi	r5,10
   61fc0:	00614b40 	call	614b4 <__mulsi3>
   61fc4:	bc800007 	ldb	r18,0(r23)
   61fc8:	b089883a 	add	r4,r22,r2
   61fcc:	bdc00044 	addi	r23,r23,1
   61fd0:	95bff404 	addi	r22,r18,-48
   61fd4:	9dbff92e 	bgeu	r19,r22,61fbc <___vfprintf_internal_r+0x7e0>
   61fd8:	2007883a 	mov	r3,r4
   61fdc:	20044316 	blt	r4,zero,630ec <___vfprintf_internal_r+0x1910>
   61fe0:	b82b883a 	mov	r21,r23
   61fe4:	003e5a06 	br	61950 <___vfprintf_internal_r+0x174>
   61fe8:	ac800007 	ldb	r18,0(r21)
   61fec:	01001b04 	movi	r4,108
   61ff0:	a805883a 	mov	r2,r21
   61ff4:	91045526 	beq	r18,r4,6314c <___vfprintf_internal_r+0x1970>
   61ff8:	84000414 	ori	r16,r16,16
   61ffc:	003e5306 	br	6194c <___vfprintf_internal_r+0x170>
   62000:	8080080c 	andi	r2,r16,32
   62004:	e013883a 	mov	r9,fp
   62008:	10034026 	beq	r2,zero,62d0c <___vfprintf_internal_r+0x1530>
   6200c:	d9012d17 	ldw	r4,1204(sp)
   62010:	20800017 	ldw	r2,0(r4)
   62014:	d9012c17 	ldw	r4,1200(sp)
   62018:	2007d7fa 	srai	r3,r4,31
   6201c:	d9012d17 	ldw	r4,1204(sp)
   62020:	10c00115 	stw	r3,4(r2)
   62024:	21000104 	addi	r4,r4,4
   62028:	d9012d15 	stw	r4,1204(sp)
   6202c:	d9012c17 	ldw	r4,1200(sp)
   62030:	11000015 	stw	r4,0(r2)
   62034:	003e1f06 	br	618b4 <___vfprintf_internal_r+0xd8>
   62038:	d9012d17 	ldw	r4,1204(sp)
   6203c:	21000017 	ldw	r4,0(r4)
   62040:	d9012e15 	stw	r4,1208(sp)
   62044:	d9012d17 	ldw	r4,1204(sp)
   62048:	20800104 	addi	r2,r4,4
   6204c:	d9012e17 	ldw	r4,1208(sp)
   62050:	203ee716 	blt	r4,zero,61bf0 <___vfprintf_internal_r+0x414>
   62054:	d8812d15 	stw	r2,1204(sp)
   62058:	ac800007 	ldb	r18,0(r21)
   6205c:	003e3b06 	br	6194c <___vfprintf_internal_r+0x170>
   62060:	e013883a 	mov	r9,fp
   62064:	1839883a 	mov	fp,r3
   62068:	d8c12d17 	ldw	r3,1204(sp)
   6206c:	00800c04 	movi	r2,48
   62070:	010001f4 	movhi	r4,7
   62074:	21371d04 	addi	r4,r4,-9100
   62078:	1dc00017 	ldw	r23,0(r3)
   6207c:	18c00104 	addi	r3,r3,4
   62080:	d8812505 	stb	r2,1172(sp)
   62084:	00801e04 	movi	r2,120
   62088:	d8812545 	stb	r2,1173(sp)
   6208c:	d8c12d15 	stw	r3,1204(sp)
   62090:	002d883a 	mov	r22,zero
   62094:	84000094 	ori	r16,r16,2
   62098:	d9013615 	stw	r4,1240(sp)
   6209c:	00c00084 	movi	r3,2
   620a0:	04801e04 	movi	r18,120
   620a4:	b805883a 	mov	r2,r23
   620a8:	d8012585 	stb	zero,1174(sp)
   620ac:	003f4406 	br	61dc0 <___vfprintf_internal_r+0x5e4>
   620b0:	84000814 	ori	r16,r16,32
   620b4:	ac800007 	ldb	r18,0(r21)
   620b8:	003e2406 	br	6194c <___vfprintf_internal_r+0x170>
   620bc:	d8812d17 	ldw	r2,1204(sp)
   620c0:	d8012585 	stb	zero,1174(sp)
   620c4:	e013883a 	mov	r9,fp
   620c8:	14c00017 	ldw	r19,0(r2)
   620cc:	1839883a 	mov	fp,r3
   620d0:	15c00104 	addi	r23,r2,4
   620d4:	98045526 	beq	r19,zero,6322c <___vfprintf_internal_r+0x1a50>
   620d8:	9809883a 	mov	r4,r19
   620dc:	18043116 	blt	r3,zero,631a4 <___vfprintf_internal_r+0x19c8>
   620e0:	000b883a 	mov	r5,zero
   620e4:	180d883a 	mov	r6,r3
   620e8:	da413c15 	stw	r9,1264(sp)
   620ec:	00669a40 	call	669a4 <memchr>
   620f0:	da413c17 	ldw	r9,1264(sp)
   620f4:	10047a26 	beq	r2,zero,632e0 <___vfprintf_internal_r+0x1b04>
   620f8:	14c5c83a 	sub	r2,r2,r19
   620fc:	d8812b15 	stw	r2,1196(sp)
   62100:	e083d40e 	bge	fp,r2,63054 <___vfprintf_internal_r+0x1878>
   62104:	df012815 	stw	fp,1184(sp)
   62108:	e004e416 	blt	fp,zero,6349c <___vfprintf_internal_r+0x1cc0>
   6210c:	d8812583 	ldbu	r2,1174(sp)
   62110:	df012b15 	stw	fp,1196(sp)
   62114:	ddc12d15 	stw	r23,1204(sp)
   62118:	d8013115 	stw	zero,1220(sp)
   6211c:	003f3c06 	br	61e10 <___vfprintf_internal_r+0x634>
   62120:	008001f4 	movhi	r2,7
   62124:	10b71d04 	addi	r2,r2,-9100
   62128:	d8813615 	stw	r2,1240(sp)
   6212c:	8080080c 	andi	r2,r16,32
   62130:	e013883a 	mov	r9,fp
   62134:	1839883a 	mov	fp,r3
   62138:	103f891e 	bne	r2,zero,61f60 <___vfprintf_internal_r+0x784>
   6213c:	8080040c 	andi	r2,r16,16
   62140:	1002c326 	beq	r2,zero,62c50 <___vfprintf_internal_r+0x1474>
   62144:	d8812d17 	ldw	r2,1204(sp)
   62148:	002d883a 	mov	r22,zero
   6214c:	15c00017 	ldw	r23,0(r2)
   62150:	10800104 	addi	r2,r2,4
   62154:	d8812d15 	stw	r2,1204(sp)
   62158:	003f8606 	br	61f74 <___vfprintf_internal_r+0x798>
   6215c:	84001014 	ori	r16,r16,64
   62160:	ac800007 	ldb	r18,0(r21)
   62164:	003df906 	br	6194c <___vfprintf_internal_r+0x170>
   62168:	d8812587 	ldb	r2,1174(sp)
   6216c:	1002e51e 	bne	r2,zero,62d04 <___vfprintf_internal_r+0x1528>
   62170:	00800804 	movi	r2,32
   62174:	d8812585 	stb	r2,1174(sp)
   62178:	ac800007 	ldb	r18,0(r21)
   6217c:	003df306 	br	6194c <___vfprintf_internal_r+0x170>
   62180:	84000054 	ori	r16,r16,1
   62184:	ac800007 	ldb	r18,0(r21)
   62188:	003df006 	br	6194c <___vfprintf_internal_r+0x170>
   6218c:	84002014 	ori	r16,r16,128
   62190:	ac800007 	ldb	r18,0(r21)
   62194:	003ded06 	br	6194c <___vfprintf_internal_r+0x170>
   62198:	0009883a 	mov	r4,zero
   6219c:	95bff404 	addi	r22,r18,-48
   621a0:	182f883a 	mov	r23,r3
   621a4:	01400284 	movi	r5,10
   621a8:	00614b40 	call	614b4 <__mulsi3>
   621ac:	ac800007 	ldb	r18,0(r21)
   621b0:	1589883a 	add	r4,r2,r22
   621b4:	ad400044 	addi	r21,r21,1
   621b8:	95bff404 	addi	r22,r18,-48
   621bc:	9dbff92e 	bgeu	r19,r22,621a4 <___vfprintf_internal_r+0x9c8>
   621c0:	b807883a 	mov	r3,r23
   621c4:	d9012e15 	stw	r4,1208(sp)
   621c8:	003de106 	br	61950 <___vfprintf_internal_r+0x174>
   621cc:	00800ac4 	movi	r2,43
   621d0:	d8812585 	stb	r2,1174(sp)
   621d4:	ac800007 	ldb	r18,0(r21)
   621d8:	003ddc06 	br	6194c <___vfprintf_internal_r+0x170>
   621dc:	d8c12d17 	ldw	r3,1204(sp)
   621e0:	d9012d17 	ldw	r4,1204(sp)
   621e4:	e013883a 	mov	r9,fp
   621e8:	18800017 	ldw	r2,0(r3)
   621ec:	21000104 	addi	r4,r4,4
   621f0:	00c00044 	movi	r3,1
   621f4:	d8c12815 	stw	r3,1184(sp)
   621f8:	d8012585 	stb	zero,1174(sp)
   621fc:	d8810405 	stb	r2,1040(sp)
   62200:	d9012d15 	stw	r4,1204(sp)
   62204:	d8c12b15 	stw	r3,1196(sp)
   62208:	dcc10404 	addi	r19,sp,1040
   6220c:	003dda06 	br	61978 <___vfprintf_internal_r+0x19c>
   62210:	e013883a 	mov	r9,fp
   62214:	1839883a 	mov	fp,r3
   62218:	003ed806 	br	61d7c <___vfprintf_internal_r+0x5a0>
   6221c:	e013883a 	mov	r9,fp
   62220:	1839883a 	mov	fp,r3
   62224:	003f2d06 	br	61edc <___vfprintf_internal_r+0x700>
   62228:	e013883a 	mov	r9,fp
   6222c:	1839883a 	mov	fp,r3
   62230:	003f3806 	br	61f14 <___vfprintf_internal_r+0x738>
   62234:	da011d17 	ldw	r8,1140(sp)
   62238:	d8c11c17 	ldw	r3,1136(sp)
   6223c:	d8812587 	ldb	r2,1174(sp)
   62240:	10000b26 	beq	r2,zero,62270 <___vfprintf_internal_r+0xa94>
   62244:	d8812584 	addi	r2,sp,1174
   62248:	48800015 	stw	r2,0(r9)
   6224c:	00800044 	movi	r2,1
   62250:	48800115 	stw	r2,4(r9)
   62254:	4091883a 	add	r8,r8,r2
   62258:	1887883a 	add	r3,r3,r2
   6225c:	da011d15 	stw	r8,1140(sp)
   62260:	d8c11c15 	stw	r3,1136(sp)
   62264:	008001c4 	movi	r2,7
   62268:	10c18e16 	blt	r2,r3,628a4 <___vfprintf_internal_r+0x10c8>
   6226c:	4a400204 	addi	r9,r9,8
   62270:	d9012a17 	ldw	r4,1192(sp)
   62274:	20000b26 	beq	r4,zero,622a4 <___vfprintf_internal_r+0xac8>
   62278:	d8812504 	addi	r2,sp,1172
   6227c:	48800015 	stw	r2,0(r9)
   62280:	00800084 	movi	r2,2
   62284:	48800115 	stw	r2,4(r9)
   62288:	4091883a 	add	r8,r8,r2
   6228c:	18c00044 	addi	r3,r3,1
   62290:	da011d15 	stw	r8,1140(sp)
   62294:	d8c11c15 	stw	r3,1136(sp)
   62298:	008001c4 	movi	r2,7
   6229c:	10c17816 	blt	r2,r3,62880 <___vfprintf_internal_r+0x10a4>
   622a0:	4a400204 	addi	r9,r9,8
   622a4:	d9012f17 	ldw	r4,1212(sp)
   622a8:	00802004 	movi	r2,128
   622ac:	2080fc26 	beq	r4,r2,626a0 <___vfprintf_internal_r+0xec4>
   622b0:	d8813117 	ldw	r2,1220(sp)
   622b4:	d9012b17 	ldw	r4,1196(sp)
   622b8:	112fc83a 	sub	r23,r2,r4
   622bc:	05c02a0e 	bge	zero,r23,62368 <___vfprintf_internal_r+0xb8c>
   622c0:	07000404 	movi	fp,16
   622c4:	050001f4 	movhi	r20,7
   622c8:	a5372884 	addi	r20,r20,-9054
   622cc:	e5c01d0e 	bge	fp,r23,62344 <___vfprintf_internal_r+0xb68>
   622d0:	dc812a15 	stw	r18,1192(sp)
   622d4:	058001c4 	movi	r22,7
   622d8:	a025883a 	mov	r18,r20
   622dc:	8029883a 	mov	r20,r16
   622e0:	dc012917 	ldw	r16,1188(sp)
   622e4:	00000306 	br	622f4 <___vfprintf_internal_r+0xb18>
   622e8:	bdfffc04 	addi	r23,r23,-16
   622ec:	4a400204 	addi	r9,r9,8
   622f0:	e5c0110e 	bge	fp,r23,62338 <___vfprintf_internal_r+0xb5c>
   622f4:	4c800015 	stw	r18,0(r9)
   622f8:	4f000115 	stw	fp,4(r9)
   622fc:	42000404 	addi	r8,r8,16
   62300:	18c00044 	addi	r3,r3,1
   62304:	da011d15 	stw	r8,1140(sp)
   62308:	d8c11c15 	stw	r3,1136(sp)
   6230c:	b0fff60e 	bge	r22,r3,622e8 <___vfprintf_internal_r+0xb0c>
   62310:	8809883a 	mov	r4,r17
   62314:	800b883a 	mov	r5,r16
   62318:	d9811b04 	addi	r6,sp,1132
   6231c:	00617a80 	call	617a8 <__sprint_r>
   62320:	103e741e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   62324:	bdfffc04 	addi	r23,r23,-16
   62328:	da011d17 	ldw	r8,1140(sp)
   6232c:	d8c11c17 	ldw	r3,1136(sp)
   62330:	da400404 	addi	r9,sp,16
   62334:	e5ffef16 	blt	fp,r23,622f4 <___vfprintf_internal_r+0xb18>
   62338:	a021883a 	mov	r16,r20
   6233c:	9029883a 	mov	r20,r18
   62340:	dc812a17 	ldw	r18,1192(sp)
   62344:	4d000015 	stw	r20,0(r9)
   62348:	4dc00115 	stw	r23,4(r9)
   6234c:	45d1883a 	add	r8,r8,r23
   62350:	18c00044 	addi	r3,r3,1
   62354:	da011d15 	stw	r8,1140(sp)
   62358:	d8c11c15 	stw	r3,1136(sp)
   6235c:	008001c4 	movi	r2,7
   62360:	10c13e16 	blt	r2,r3,6285c <___vfprintf_internal_r+0x1080>
   62364:	4a400204 	addi	r9,r9,8
   62368:	8080400c 	andi	r2,r16,256
   6236c:	1000831e 	bne	r2,zero,6257c <___vfprintf_internal_r+0xda0>
   62370:	d8812b17 	ldw	r2,1196(sp)
   62374:	4cc00015 	stw	r19,0(r9)
   62378:	48800115 	stw	r2,4(r9)
   6237c:	4091883a 	add	r8,r8,r2
   62380:	18c00044 	addi	r3,r3,1
   62384:	da011d15 	stw	r8,1140(sp)
   62388:	d8c11c15 	stw	r3,1136(sp)
   6238c:	008001c4 	movi	r2,7
   62390:	10c05316 	blt	r2,r3,624e0 <___vfprintf_internal_r+0xd04>
   62394:	4a400204 	addi	r9,r9,8
   62398:	8400010c 	andi	r16,r16,4
   6239c:	80002e26 	beq	r16,zero,62458 <___vfprintf_internal_r+0xc7c>
   623a0:	d8812e17 	ldw	r2,1208(sp)
   623a4:	d8c12817 	ldw	r3,1184(sp)
   623a8:	10e1c83a 	sub	r16,r2,r3
   623ac:	04002a0e 	bge	zero,r16,62458 <___vfprintf_internal_r+0xc7c>
   623b0:	04800404 	movi	r18,16
   623b4:	d8c11c17 	ldw	r3,1136(sp)
   623b8:	05c001f4 	movhi	r23,7
   623bc:	bdf72484 	addi	r23,r23,-9070
   623c0:	9400170e 	bge	r18,r16,62420 <___vfprintf_internal_r+0xc44>
   623c4:	04c001c4 	movi	r19,7
   623c8:	dd012917 	ldw	r20,1188(sp)
   623cc:	00000306 	br	623dc <___vfprintf_internal_r+0xc00>
   623d0:	843ffc04 	addi	r16,r16,-16
   623d4:	4a400204 	addi	r9,r9,8
   623d8:	9400110e 	bge	r18,r16,62420 <___vfprintf_internal_r+0xc44>
   623dc:	4dc00015 	stw	r23,0(r9)
   623e0:	4c800115 	stw	r18,4(r9)
   623e4:	42000404 	addi	r8,r8,16
   623e8:	18c00044 	addi	r3,r3,1
   623ec:	da011d15 	stw	r8,1140(sp)
   623f0:	d8c11c15 	stw	r3,1136(sp)
   623f4:	98fff60e 	bge	r19,r3,623d0 <___vfprintf_internal_r+0xbf4>
   623f8:	8809883a 	mov	r4,r17
   623fc:	a00b883a 	mov	r5,r20
   62400:	d9811b04 	addi	r6,sp,1132
   62404:	00617a80 	call	617a8 <__sprint_r>
   62408:	103e3a1e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   6240c:	843ffc04 	addi	r16,r16,-16
   62410:	da011d17 	ldw	r8,1140(sp)
   62414:	d8c11c17 	ldw	r3,1136(sp)
   62418:	da400404 	addi	r9,sp,16
   6241c:	943fef16 	blt	r18,r16,623dc <___vfprintf_internal_r+0xc00>
   62420:	4dc00015 	stw	r23,0(r9)
   62424:	4c000115 	stw	r16,4(r9)
   62428:	8211883a 	add	r8,r16,r8
   6242c:	18c00044 	addi	r3,r3,1
   62430:	da011d15 	stw	r8,1140(sp)
   62434:	d8c11c15 	stw	r3,1136(sp)
   62438:	008001c4 	movi	r2,7
   6243c:	10c0060e 	bge	r2,r3,62458 <___vfprintf_internal_r+0xc7c>
   62440:	d9412917 	ldw	r5,1188(sp)
   62444:	8809883a 	mov	r4,r17
   62448:	d9811b04 	addi	r6,sp,1132
   6244c:	00617a80 	call	617a8 <__sprint_r>
   62450:	103e281e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   62454:	da011d17 	ldw	r8,1140(sp)
   62458:	dd012817 	ldw	r20,1184(sp)
   6245c:	d9012e17 	ldw	r4,1208(sp)
   62460:	a100010e 	bge	r20,r4,62468 <___vfprintf_internal_r+0xc8c>
   62464:	2029883a 	mov	r20,r4
   62468:	d8812c17 	ldw	r2,1200(sp)
   6246c:	1505883a 	add	r2,r2,r20
   62470:	d8812c15 	stw	r2,1200(sp)
   62474:	4000b91e 	bne	r8,zero,6275c <___vfprintf_internal_r+0xf80>
   62478:	d8011c15 	stw	zero,1136(sp)
   6247c:	a8800007 	ldb	r2,0(r21)
   62480:	da400404 	addi	r9,sp,16
   62484:	103d0d1e 	bne	r2,zero,618bc <___vfprintf_internal_r+0xe0>
   62488:	a825883a 	mov	r18,r21
   6248c:	003d2306 	br	6191c <___vfprintf_internal_r+0x140>
   62490:	d9412917 	ldw	r5,1188(sp)
   62494:	8809883a 	mov	r4,r17
   62498:	d9811b04 	addi	r6,sp,1132
   6249c:	00617a80 	call	617a8 <__sprint_r>
   624a0:	103e141e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   624a4:	da011d17 	ldw	r8,1140(sp)
   624a8:	da400404 	addi	r9,sp,16
   624ac:	8080004c 	andi	r2,r16,1
   624b0:	103fb926 	beq	r2,zero,62398 <___vfprintf_internal_r+0xbbc>
   624b4:	d8c11c17 	ldw	r3,1136(sp)
   624b8:	d9013717 	ldw	r4,1244(sp)
   624bc:	00800044 	movi	r2,1
   624c0:	48800115 	stw	r2,4(r9)
   624c4:	49000015 	stw	r4,0(r9)
   624c8:	4091883a 	add	r8,r8,r2
   624cc:	1887883a 	add	r3,r3,r2
   624d0:	da011d15 	stw	r8,1140(sp)
   624d4:	d8c11c15 	stw	r3,1136(sp)
   624d8:	008001c4 	movi	r2,7
   624dc:	10ffad0e 	bge	r2,r3,62394 <___vfprintf_internal_r+0xbb8>
   624e0:	d9412917 	ldw	r5,1188(sp)
   624e4:	8809883a 	mov	r4,r17
   624e8:	d9811b04 	addi	r6,sp,1132
   624ec:	00617a80 	call	617a8 <__sprint_r>
   624f0:	103e001e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   624f4:	da400404 	addi	r9,sp,16
   624f8:	da011d17 	ldw	r8,1140(sp)
   624fc:	003fa606 	br	62398 <___vfprintf_internal_r+0xbbc>
   62500:	18803fcc 	andi	r2,r3,255
   62504:	00c00044 	movi	r3,1
   62508:	10c10126 	beq	r2,r3,62910 <___vfprintf_internal_r+0x1134>
   6250c:	00c00084 	movi	r3,2
   62510:	10c0ed26 	beq	r2,r3,628c8 <___vfprintf_internal_r+0x10ec>
   62514:	d8c10dc4 	addi	r3,sp,1079
   62518:	b808d0fa 	srli	r4,r23,3
   6251c:	b00a977a 	slli	r5,r22,29
   62520:	b02cd0fa 	srli	r22,r22,3
   62524:	bdc001cc 	andi	r23,r23,7
   62528:	b8800c04 	addi	r2,r23,48
   6252c:	292eb03a 	or	r23,r5,r4
   62530:	18800005 	stb	r2,0(r3)
   62534:	bd88b03a 	or	r4,r23,r22
   62538:	1827883a 	mov	r19,r3
   6253c:	18ffffc4 	addi	r3,r3,-1
   62540:	203ff51e 	bne	r4,zero,62518 <___vfprintf_internal_r+0xd3c>
   62544:	8100004c 	andi	r4,r16,1
   62548:	980b883a 	mov	r5,r19
   6254c:	20000726 	beq	r4,zero,6256c <___vfprintf_internal_r+0xd90>
   62550:	10803fcc 	andi	r2,r2,255
   62554:	1080201c 	xori	r2,r2,128
   62558:	10bfe004 	addi	r2,r2,-128
   6255c:	01000c04 	movi	r4,48
   62560:	11000226 	beq	r2,r4,6256c <___vfprintf_internal_r+0xd90>
   62564:	1827883a 	mov	r19,r3
   62568:	293fffc5 	stb	r4,-1(r5)
   6256c:	d8812717 	ldw	r2,1180(sp)
   62570:	14c5c83a 	sub	r2,r2,r19
   62574:	d8812b15 	stw	r2,1196(sp)
   62578:	003e1f06 	br	61df8 <___vfprintf_internal_r+0x61c>
   6257c:	00801944 	movi	r2,101
   62580:	14807c0e 	bge	r2,r18,62774 <___vfprintf_internal_r+0xf98>
   62584:	d9013317 	ldw	r4,1228(sp)
   62588:	d9413417 	ldw	r5,1232(sp)
   6258c:	000d883a 	mov	r6,zero
   62590:	000f883a 	mov	r7,zero
   62594:	d8c13b15 	stw	r3,1260(sp)
   62598:	da013a15 	stw	r8,1256(sp)
   6259c:	da413c15 	stw	r9,1264(sp)
   625a0:	0069fa40 	call	69fa4 <__eqdf2>
   625a4:	d8c13b17 	ldw	r3,1260(sp)
   625a8:	da013a17 	ldw	r8,1256(sp)
   625ac:	da413c17 	ldw	r9,1264(sp)
   625b0:	1001001e 	bne	r2,zero,629b4 <___vfprintf_internal_r+0x11d8>
   625b4:	008001f4 	movhi	r2,7
   625b8:	10b72404 	addi	r2,r2,-9072
   625bc:	48800015 	stw	r2,0(r9)
   625c0:	00800044 	movi	r2,1
   625c4:	48800115 	stw	r2,4(r9)
   625c8:	4091883a 	add	r8,r8,r2
   625cc:	1887883a 	add	r3,r3,r2
   625d0:	da011d15 	stw	r8,1140(sp)
   625d4:	d8c11c15 	stw	r3,1136(sp)
   625d8:	008001c4 	movi	r2,7
   625dc:	10c20316 	blt	r2,r3,62dec <___vfprintf_internal_r+0x1610>
   625e0:	4a400204 	addi	r9,r9,8
   625e4:	d8812417 	ldw	r2,1168(sp)
   625e8:	d8c13217 	ldw	r3,1224(sp)
   625ec:	10c00216 	blt	r2,r3,625f8 <___vfprintf_internal_r+0xe1c>
   625f0:	8080004c 	andi	r2,r16,1
   625f4:	103f6826 	beq	r2,zero,62398 <___vfprintf_internal_r+0xbbc>
   625f8:	d8c11c17 	ldw	r3,1136(sp)
   625fc:	d9013717 	ldw	r4,1244(sp)
   62600:	00800044 	movi	r2,1
   62604:	48800115 	stw	r2,4(r9)
   62608:	49000015 	stw	r4,0(r9)
   6260c:	4091883a 	add	r8,r8,r2
   62610:	1887883a 	add	r3,r3,r2
   62614:	da011d15 	stw	r8,1140(sp)
   62618:	d8c11c15 	stw	r3,1136(sp)
   6261c:	008001c4 	movi	r2,7
   62620:	10c2ce16 	blt	r2,r3,6315c <___vfprintf_internal_r+0x1980>
   62624:	4a400204 	addi	r9,r9,8
   62628:	d8813217 	ldw	r2,1224(sp)
   6262c:	14bfffc4 	addi	r18,r2,-1
   62630:	04bf590e 	bge	zero,r18,62398 <___vfprintf_internal_r+0xbbc>
   62634:	04c00404 	movi	r19,16
   62638:	d8c11c17 	ldw	r3,1136(sp)
   6263c:	050001f4 	movhi	r20,7
   62640:	a5372884 	addi	r20,r20,-9054
   62644:	9c818a0e 	bge	r19,r18,62c70 <___vfprintf_internal_r+0x1494>
   62648:	058001c4 	movi	r22,7
   6264c:	ddc12917 	ldw	r23,1188(sp)
   62650:	00000306 	br	62660 <___vfprintf_internal_r+0xe84>
   62654:	4a400204 	addi	r9,r9,8
   62658:	94bffc04 	addi	r18,r18,-16
   6265c:	9c81840e 	bge	r19,r18,62c70 <___vfprintf_internal_r+0x1494>
   62660:	4d000015 	stw	r20,0(r9)
   62664:	4cc00115 	stw	r19,4(r9)
   62668:	42000404 	addi	r8,r8,16
   6266c:	18c00044 	addi	r3,r3,1
   62670:	da011d15 	stw	r8,1140(sp)
   62674:	d8c11c15 	stw	r3,1136(sp)
   62678:	b0fff60e 	bge	r22,r3,62654 <___vfprintf_internal_r+0xe78>
   6267c:	8809883a 	mov	r4,r17
   62680:	b80b883a 	mov	r5,r23
   62684:	d9811b04 	addi	r6,sp,1132
   62688:	00617a80 	call	617a8 <__sprint_r>
   6268c:	103d991e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   62690:	da011d17 	ldw	r8,1140(sp)
   62694:	d8c11c17 	ldw	r3,1136(sp)
   62698:	da400404 	addi	r9,sp,16
   6269c:	003fee06 	br	62658 <___vfprintf_internal_r+0xe7c>
   626a0:	d8812e17 	ldw	r2,1208(sp)
   626a4:	d9012817 	ldw	r4,1184(sp)
   626a8:	112fc83a 	sub	r23,r2,r4
   626ac:	05ff000e 	bge	zero,r23,622b0 <___vfprintf_internal_r+0xad4>
   626b0:	07000404 	movi	fp,16
   626b4:	050001f4 	movhi	r20,7
   626b8:	a5372884 	addi	r20,r20,-9054
   626bc:	e5c01d0e 	bge	fp,r23,62734 <___vfprintf_internal_r+0xf58>
   626c0:	dc812a15 	stw	r18,1192(sp)
   626c4:	058001c4 	movi	r22,7
   626c8:	a025883a 	mov	r18,r20
   626cc:	8029883a 	mov	r20,r16
   626d0:	dc012917 	ldw	r16,1188(sp)
   626d4:	00000306 	br	626e4 <___vfprintf_internal_r+0xf08>
   626d8:	bdfffc04 	addi	r23,r23,-16
   626dc:	4a400204 	addi	r9,r9,8
   626e0:	e5c0110e 	bge	fp,r23,62728 <___vfprintf_internal_r+0xf4c>
   626e4:	4c800015 	stw	r18,0(r9)
   626e8:	4f000115 	stw	fp,4(r9)
   626ec:	42000404 	addi	r8,r8,16
   626f0:	18c00044 	addi	r3,r3,1
   626f4:	da011d15 	stw	r8,1140(sp)
   626f8:	d8c11c15 	stw	r3,1136(sp)
   626fc:	b0fff60e 	bge	r22,r3,626d8 <___vfprintf_internal_r+0xefc>
   62700:	8809883a 	mov	r4,r17
   62704:	800b883a 	mov	r5,r16
   62708:	d9811b04 	addi	r6,sp,1132
   6270c:	00617a80 	call	617a8 <__sprint_r>
   62710:	103d781e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   62714:	bdfffc04 	addi	r23,r23,-16
   62718:	da011d17 	ldw	r8,1140(sp)
   6271c:	d8c11c17 	ldw	r3,1136(sp)
   62720:	da400404 	addi	r9,sp,16
   62724:	e5ffef16 	blt	fp,r23,626e4 <___vfprintf_internal_r+0xf08>
   62728:	a021883a 	mov	r16,r20
   6272c:	9029883a 	mov	r20,r18
   62730:	dc812a17 	ldw	r18,1192(sp)
   62734:	4d000015 	stw	r20,0(r9)
   62738:	4dc00115 	stw	r23,4(r9)
   6273c:	45d1883a 	add	r8,r8,r23
   62740:	18c00044 	addi	r3,r3,1
   62744:	da011d15 	stw	r8,1140(sp)
   62748:	d8c11c15 	stw	r3,1136(sp)
   6274c:	008001c4 	movi	r2,7
   62750:	10c13616 	blt	r2,r3,62c2c <___vfprintf_internal_r+0x1450>
   62754:	4a400204 	addi	r9,r9,8
   62758:	003ed506 	br	622b0 <___vfprintf_internal_r+0xad4>
   6275c:	d9412917 	ldw	r5,1188(sp)
   62760:	8809883a 	mov	r4,r17
   62764:	d9811b04 	addi	r6,sp,1132
   62768:	00617a80 	call	617a8 <__sprint_r>
   6276c:	103f4226 	beq	r2,zero,62478 <___vfprintf_internal_r+0xc9c>
   62770:	003d6006 	br	61cf4 <___vfprintf_internal_r+0x518>
   62774:	d9013217 	ldw	r4,1224(sp)
   62778:	00800044 	movi	r2,1
   6277c:	4cc00015 	stw	r19,0(r9)
   62780:	1101000e 	bge	r2,r4,62b84 <___vfprintf_internal_r+0x13a8>
   62784:	00800044 	movi	r2,1
   62788:	48800115 	stw	r2,4(r9)
   6278c:	4091883a 	add	r8,r8,r2
   62790:	1887883a 	add	r3,r3,r2
   62794:	da011d15 	stw	r8,1140(sp)
   62798:	d8c11c15 	stw	r3,1136(sp)
   6279c:	008001c4 	movi	r2,7
   627a0:	10c10c16 	blt	r2,r3,62bd4 <___vfprintf_internal_r+0x13f8>
   627a4:	4a400204 	addi	r9,r9,8
   627a8:	d8813717 	ldw	r2,1244(sp)
   627ac:	48800015 	stw	r2,0(r9)
   627b0:	00800044 	movi	r2,1
   627b4:	48800115 	stw	r2,4(r9)
   627b8:	4091883a 	add	r8,r8,r2
   627bc:	1887883a 	add	r3,r3,r2
   627c0:	da011d15 	stw	r8,1140(sp)
   627c4:	d8c11c15 	stw	r3,1136(sp)
   627c8:	008001c4 	movi	r2,7
   627cc:	10c10a16 	blt	r2,r3,62bf8 <___vfprintf_internal_r+0x141c>
   627d0:	4c800204 	addi	r18,r9,8
   627d4:	d9013317 	ldw	r4,1228(sp)
   627d8:	d9413417 	ldw	r5,1232(sp)
   627dc:	000d883a 	mov	r6,zero
   627e0:	000f883a 	mov	r7,zero
   627e4:	d8c13b15 	stw	r3,1260(sp)
   627e8:	da013a15 	stw	r8,1256(sp)
   627ec:	006a0000 	call	6a000 <__nedf2>
   627f0:	d8c13b17 	ldw	r3,1260(sp)
   627f4:	da013a17 	ldw	r8,1256(sp)
   627f8:	1000ba26 	beq	r2,zero,62ae4 <___vfprintf_internal_r+0x1308>
   627fc:	d9013217 	ldw	r4,1224(sp)
   62800:	9cc00044 	addi	r19,r19,1
   62804:	94c00015 	stw	r19,0(r18)
   62808:	20bfffc4 	addi	r2,r4,-1
   6280c:	90800115 	stw	r2,4(r18)
   62810:	4091883a 	add	r8,r8,r2
   62814:	18c00044 	addi	r3,r3,1
   62818:	da011d15 	stw	r8,1140(sp)
   6281c:	d8c11c15 	stw	r3,1136(sp)
   62820:	008001c4 	movi	r2,7
   62824:	10c0e216 	blt	r2,r3,62bb0 <___vfprintf_internal_r+0x13d4>
   62828:	94800204 	addi	r18,r18,8
   6282c:	d9013517 	ldw	r4,1236(sp)
   62830:	d8811fc4 	addi	r2,sp,1151
   62834:	90800015 	stw	r2,0(r18)
   62838:	91000115 	stw	r4,4(r18)
   6283c:	4111883a 	add	r8,r8,r4
   62840:	18c00044 	addi	r3,r3,1
   62844:	da011d15 	stw	r8,1140(sp)
   62848:	d8c11c15 	stw	r3,1136(sp)
   6284c:	008001c4 	movi	r2,7
   62850:	10ff2316 	blt	r2,r3,624e0 <___vfprintf_internal_r+0xd04>
   62854:	92400204 	addi	r9,r18,8
   62858:	003ecf06 	br	62398 <___vfprintf_internal_r+0xbbc>
   6285c:	d9412917 	ldw	r5,1188(sp)
   62860:	8809883a 	mov	r4,r17
   62864:	d9811b04 	addi	r6,sp,1132
   62868:	00617a80 	call	617a8 <__sprint_r>
   6286c:	103d211e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   62870:	da011d17 	ldw	r8,1140(sp)
   62874:	d8c11c17 	ldw	r3,1136(sp)
   62878:	da400404 	addi	r9,sp,16
   6287c:	003eba06 	br	62368 <___vfprintf_internal_r+0xb8c>
   62880:	d9412917 	ldw	r5,1188(sp)
   62884:	8809883a 	mov	r4,r17
   62888:	d9811b04 	addi	r6,sp,1132
   6288c:	00617a80 	call	617a8 <__sprint_r>
   62890:	103d181e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   62894:	da011d17 	ldw	r8,1140(sp)
   62898:	d8c11c17 	ldw	r3,1136(sp)
   6289c:	da400404 	addi	r9,sp,16
   628a0:	003e8006 	br	622a4 <___vfprintf_internal_r+0xac8>
   628a4:	d9412917 	ldw	r5,1188(sp)
   628a8:	8809883a 	mov	r4,r17
   628ac:	d9811b04 	addi	r6,sp,1132
   628b0:	00617a80 	call	617a8 <__sprint_r>
   628b4:	103d0f1e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   628b8:	da011d17 	ldw	r8,1140(sp)
   628bc:	d8c11c17 	ldw	r3,1136(sp)
   628c0:	da400404 	addi	r9,sp,16
   628c4:	003e6a06 	br	62270 <___vfprintf_internal_r+0xa94>
   628c8:	d9413617 	ldw	r5,1240(sp)
   628cc:	d8810dc4 	addi	r2,sp,1079
   628d0:	b8c003cc 	andi	r3,r23,15
   628d4:	b008973a 	slli	r4,r22,28
   628d8:	28c7883a 	add	r3,r5,r3
   628dc:	b82ed13a 	srli	r23,r23,4
   628e0:	18c00003 	ldbu	r3,0(r3)
   628e4:	b02cd13a 	srli	r22,r22,4
   628e8:	25eeb03a 	or	r23,r4,r23
   628ec:	10c00005 	stb	r3,0(r2)
   628f0:	bd86b03a 	or	r3,r23,r22
   628f4:	1027883a 	mov	r19,r2
   628f8:	10bfffc4 	addi	r2,r2,-1
   628fc:	183ff41e 	bne	r3,zero,628d0 <___vfprintf_internal_r+0x10f4>
   62900:	003f1a06 	br	6256c <___vfprintf_internal_r+0xd90>
   62904:	d8012b15 	stw	zero,1196(sp)
   62908:	dcc10e04 	addi	r19,sp,1080
   6290c:	003d3a06 	br	61df8 <___vfprintf_internal_r+0x61c>
   62910:	b0025426 	beq	r22,zero,63264 <___vfprintf_internal_r+0x1a88>
   62914:	b807883a 	mov	r3,r23
   62918:	d8810dc4 	addi	r2,sp,1079
   6291c:	882f883a 	mov	r23,r17
   62920:	04c00244 	movi	r19,9
   62924:	8023883a 	mov	r17,r16
   62928:	da412815 	stw	r9,1184(sp)
   6292c:	1821883a 	mov	r16,r3
   62930:	8009883a 	mov	r4,r16
   62934:	b00b883a 	mov	r5,r22
   62938:	01800284 	movi	r6,10
   6293c:	000f883a 	mov	r7,zero
   62940:	1029883a 	mov	r20,r2
   62944:	00690dc0 	call	690dc <__umoddi3>
   62948:	10800c04 	addi	r2,r2,48
   6294c:	8009883a 	mov	r4,r16
   62950:	b00b883a 	mov	r5,r22
   62954:	a0800005 	stb	r2,0(r20)
   62958:	01800284 	movi	r6,10
   6295c:	000f883a 	mov	r7,zero
   62960:	0068a8c0 	call	68a8c <__udivdi3>
   62964:	1021883a 	mov	r16,r2
   62968:	182d883a 	mov	r22,r3
   6296c:	a0bfffc4 	addi	r2,r20,-1
   62970:	183fef1e 	bne	r3,zero,62930 <___vfprintf_internal_r+0x1154>
   62974:	9c3fee36 	bltu	r19,r16,62930 <___vfprintf_internal_r+0x1154>
   62978:	da412817 	ldw	r9,1184(sp)
   6297c:	8005883a 	mov	r2,r16
   62980:	8821883a 	mov	r16,r17
   62984:	b823883a 	mov	r17,r23
   62988:	102f883a 	mov	r23,r2
   6298c:	d8812717 	ldw	r2,1180(sp)
   62990:	a4ffffc4 	addi	r19,r20,-1
   62994:	bdc00c04 	addi	r23,r23,48
   62998:	14c5c83a 	sub	r2,r2,r19
   6299c:	a5ffffc5 	stb	r23,-1(r20)
   629a0:	d8812b15 	stw	r2,1196(sp)
   629a4:	003d1406 	br	61df8 <___vfprintf_internal_r+0x61c>
   629a8:	00c00044 	movi	r3,1
   629ac:	bd84b03a 	or	r2,r23,r22
   629b0:	003d0306 	br	61dc0 <___vfprintf_internal_r+0x5e4>
   629b4:	dc812417 	ldw	r18,1168(sp)
   629b8:	0481140e 	bge	zero,r18,62e0c <___vfprintf_internal_r+0x1630>
   629bc:	d9013217 	ldw	r4,1224(sp)
   629c0:	4cc00015 	stw	r19,0(r9)
   629c4:	9100ec16 	blt	r18,r4,62d78 <___vfprintf_internal_r+0x159c>
   629c8:	49000115 	stw	r4,4(r9)
   629cc:	4111883a 	add	r8,r8,r4
   629d0:	18c00044 	addi	r3,r3,1
   629d4:	da011d15 	stw	r8,1140(sp)
   629d8:	d8c11c15 	stw	r3,1136(sp)
   629dc:	008001c4 	movi	r2,7
   629e0:	10c23616 	blt	r2,r3,632bc <___vfprintf_internal_r+0x1ae0>
   629e4:	4a400204 	addi	r9,r9,8
   629e8:	d8813217 	ldw	r2,1224(sp)
   629ec:	90a5c83a 	sub	r18,r18,r2
   629f0:	04beae0e 	bge	zero,r18,624ac <___vfprintf_internal_r+0xcd0>
   629f4:	04c00404 	movi	r19,16
   629f8:	d8c11c17 	ldw	r3,1136(sp)
   629fc:	050001f4 	movhi	r20,7
   62a00:	a5372884 	addi	r20,r20,-9054
   62a04:	9c81dd0e 	bge	r19,r18,6317c <___vfprintf_internal_r+0x19a0>
   62a08:	058001c4 	movi	r22,7
   62a0c:	ddc12917 	ldw	r23,1188(sp)
   62a10:	00000306 	br	62a20 <___vfprintf_internal_r+0x1244>
   62a14:	4a400204 	addi	r9,r9,8
   62a18:	94bffc04 	addi	r18,r18,-16
   62a1c:	9c81d70e 	bge	r19,r18,6317c <___vfprintf_internal_r+0x19a0>
   62a20:	4d000015 	stw	r20,0(r9)
   62a24:	4cc00115 	stw	r19,4(r9)
   62a28:	42000404 	addi	r8,r8,16
   62a2c:	18c00044 	addi	r3,r3,1
   62a30:	da011d15 	stw	r8,1140(sp)
   62a34:	d8c11c15 	stw	r3,1136(sp)
   62a38:	b0fff60e 	bge	r22,r3,62a14 <___vfprintf_internal_r+0x1238>
   62a3c:	8809883a 	mov	r4,r17
   62a40:	b80b883a 	mov	r5,r23
   62a44:	d9811b04 	addi	r6,sp,1132
   62a48:	00617a80 	call	617a8 <__sprint_r>
   62a4c:	103ca91e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   62a50:	da011d17 	ldw	r8,1140(sp)
   62a54:	d8c11c17 	ldw	r3,1136(sp)
   62a58:	da400404 	addi	r9,sp,16
   62a5c:	003fee06 	br	62a18 <___vfprintf_internal_r+0x123c>
   62a60:	d9412917 	ldw	r5,1188(sp)
   62a64:	8809883a 	mov	r4,r17
   62a68:	d9811b04 	addi	r6,sp,1132
   62a6c:	00617a80 	call	617a8 <__sprint_r>
   62a70:	103ca01e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   62a74:	da011d17 	ldw	r8,1140(sp)
   62a78:	d8c11c17 	ldw	r3,1136(sp)
   62a7c:	da400404 	addi	r9,sp,16
   62a80:	003dee06 	br	6223c <___vfprintf_internal_r+0xa60>
   62a84:	00c00084 	movi	r3,2
   62a88:	bd84b03a 	or	r2,r23,r22
   62a8c:	d8012585 	stb	zero,1174(sp)
   62a90:	003ccb06 	br	61dc0 <___vfprintf_internal_r+0x5e4>
   62a94:	8080040c 	andi	r2,r16,16
   62a98:	1000ae26 	beq	r2,zero,62d54 <___vfprintf_internal_r+0x1578>
   62a9c:	d9012d17 	ldw	r4,1204(sp)
   62aa0:	25c00017 	ldw	r23,0(r4)
   62aa4:	21000104 	addi	r4,r4,4
   62aa8:	d9012d15 	stw	r4,1204(sp)
   62aac:	b82dd7fa 	srai	r22,r23,31
   62ab0:	b005883a 	mov	r2,r22
   62ab4:	003cb906 	br	61d9c <___vfprintf_internal_r+0x5c0>
   62ab8:	8080040c 	andi	r2,r16,16
   62abc:	10007026 	beq	r2,zero,62c80 <___vfprintf_internal_r+0x14a4>
   62ac0:	d8812d17 	ldw	r2,1204(sp)
   62ac4:	002d883a 	mov	r22,zero
   62ac8:	00c00044 	movi	r3,1
   62acc:	15c00017 	ldw	r23,0(r2)
   62ad0:	10800104 	addi	r2,r2,4
   62ad4:	d8812d15 	stw	r2,1204(sp)
   62ad8:	d8012585 	stb	zero,1174(sp)
   62adc:	b805883a 	mov	r2,r23
   62ae0:	003cb706 	br	61dc0 <___vfprintf_internal_r+0x5e4>
   62ae4:	d8813217 	ldw	r2,1224(sp)
   62ae8:	14ffffc4 	addi	r19,r2,-1
   62aec:	04ff4f0e 	bge	zero,r19,6282c <___vfprintf_internal_r+0x1050>
   62af0:	05800404 	movi	r22,16
   62af4:	050001f4 	movhi	r20,7
   62af8:	a5372884 	addi	r20,r20,-9054
   62afc:	b4c0470e 	bge	r22,r19,62c1c <___vfprintf_internal_r+0x1440>
   62b00:	05c001c4 	movi	r23,7
   62b04:	df012917 	ldw	fp,1188(sp)
   62b08:	00000306 	br	62b18 <___vfprintf_internal_r+0x133c>
   62b0c:	94800204 	addi	r18,r18,8
   62b10:	9cfffc04 	addi	r19,r19,-16
   62b14:	b4c0410e 	bge	r22,r19,62c1c <___vfprintf_internal_r+0x1440>
   62b18:	95000015 	stw	r20,0(r18)
   62b1c:	95800115 	stw	r22,4(r18)
   62b20:	42000404 	addi	r8,r8,16
   62b24:	18c00044 	addi	r3,r3,1
   62b28:	da011d15 	stw	r8,1140(sp)
   62b2c:	d8c11c15 	stw	r3,1136(sp)
   62b30:	b8fff60e 	bge	r23,r3,62b0c <___vfprintf_internal_r+0x1330>
   62b34:	8809883a 	mov	r4,r17
   62b38:	e00b883a 	mov	r5,fp
   62b3c:	d9811b04 	addi	r6,sp,1132
   62b40:	00617a80 	call	617a8 <__sprint_r>
   62b44:	103c6b1e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   62b48:	da011d17 	ldw	r8,1140(sp)
   62b4c:	d8c11c17 	ldw	r3,1136(sp)
   62b50:	dc800404 	addi	r18,sp,16
   62b54:	003fee06 	br	62b10 <___vfprintf_internal_r+0x1334>
   62b58:	8080040c 	andi	r2,r16,16
   62b5c:	10005326 	beq	r2,zero,62cac <___vfprintf_internal_r+0x14d0>
   62b60:	d8c12d17 	ldw	r3,1204(sp)
   62b64:	002d883a 	mov	r22,zero
   62b68:	1dc00017 	ldw	r23,0(r3)
   62b6c:	18c00104 	addi	r3,r3,4
   62b70:	d8c12d15 	stw	r3,1204(sp)
   62b74:	b805883a 	mov	r2,r23
   62b78:	0007883a 	mov	r3,zero
   62b7c:	d8012585 	stb	zero,1174(sp)
   62b80:	003c8f06 	br	61dc0 <___vfprintf_internal_r+0x5e4>
   62b84:	8088703a 	and	r4,r16,r2
   62b88:	203efe1e 	bne	r4,zero,62784 <___vfprintf_internal_r+0xfa8>
   62b8c:	48800115 	stw	r2,4(r9)
   62b90:	42000044 	addi	r8,r8,1
   62b94:	18c00044 	addi	r3,r3,1
   62b98:	da011d15 	stw	r8,1140(sp)
   62b9c:	d8c11c15 	stw	r3,1136(sp)
   62ba0:	008001c4 	movi	r2,7
   62ba4:	10c00216 	blt	r2,r3,62bb0 <___vfprintf_internal_r+0x13d4>
   62ba8:	4c800204 	addi	r18,r9,8
   62bac:	003f1f06 	br	6282c <___vfprintf_internal_r+0x1050>
   62bb0:	d9412917 	ldw	r5,1188(sp)
   62bb4:	8809883a 	mov	r4,r17
   62bb8:	d9811b04 	addi	r6,sp,1132
   62bbc:	00617a80 	call	617a8 <__sprint_r>
   62bc0:	103c4c1e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   62bc4:	dc800404 	addi	r18,sp,16
   62bc8:	da011d17 	ldw	r8,1140(sp)
   62bcc:	d8c11c17 	ldw	r3,1136(sp)
   62bd0:	003f1606 	br	6282c <___vfprintf_internal_r+0x1050>
   62bd4:	d9412917 	ldw	r5,1188(sp)
   62bd8:	8809883a 	mov	r4,r17
   62bdc:	d9811b04 	addi	r6,sp,1132
   62be0:	00617a80 	call	617a8 <__sprint_r>
   62be4:	103c431e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   62be8:	da011d17 	ldw	r8,1140(sp)
   62bec:	d8c11c17 	ldw	r3,1136(sp)
   62bf0:	da400404 	addi	r9,sp,16
   62bf4:	003eec06 	br	627a8 <___vfprintf_internal_r+0xfcc>
   62bf8:	d9412917 	ldw	r5,1188(sp)
   62bfc:	8809883a 	mov	r4,r17
   62c00:	d9811b04 	addi	r6,sp,1132
   62c04:	00617a80 	call	617a8 <__sprint_r>
   62c08:	103c3a1e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   62c0c:	da011d17 	ldw	r8,1140(sp)
   62c10:	d8c11c17 	ldw	r3,1136(sp)
   62c14:	dc800404 	addi	r18,sp,16
   62c18:	003eee06 	br	627d4 <___vfprintf_internal_r+0xff8>
   62c1c:	95000015 	stw	r20,0(r18)
   62c20:	94c00115 	stw	r19,4(r18)
   62c24:	44d1883a 	add	r8,r8,r19
   62c28:	003efa06 	br	62814 <___vfprintf_internal_r+0x1038>
   62c2c:	d9412917 	ldw	r5,1188(sp)
   62c30:	8809883a 	mov	r4,r17
   62c34:	d9811b04 	addi	r6,sp,1132
   62c38:	00617a80 	call	617a8 <__sprint_r>
   62c3c:	103c2d1e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   62c40:	da011d17 	ldw	r8,1140(sp)
   62c44:	d8c11c17 	ldw	r3,1136(sp)
   62c48:	da400404 	addi	r9,sp,16
   62c4c:	003d9806 	br	622b0 <___vfprintf_internal_r+0xad4>
   62c50:	8080100c 	andi	r2,r16,64
   62c54:	10011626 	beq	r2,zero,630b0 <___vfprintf_internal_r+0x18d4>
   62c58:	d8c12d17 	ldw	r3,1204(sp)
   62c5c:	002d883a 	mov	r22,zero
   62c60:	1dc0000b 	ldhu	r23,0(r3)
   62c64:	18c00104 	addi	r3,r3,4
   62c68:	d8c12d15 	stw	r3,1204(sp)
   62c6c:	003cc106 	br	61f74 <___vfprintf_internal_r+0x798>
   62c70:	4d000015 	stw	r20,0(r9)
   62c74:	4c800115 	stw	r18,4(r9)
   62c78:	4491883a 	add	r8,r8,r18
   62c7c:	003dc006 	br	62380 <___vfprintf_internal_r+0xba4>
   62c80:	8080100c 	andi	r2,r16,64
   62c84:	10010126 	beq	r2,zero,6308c <___vfprintf_internal_r+0x18b0>
   62c88:	d8c12d17 	ldw	r3,1204(sp)
   62c8c:	002d883a 	mov	r22,zero
   62c90:	1dc0000b 	ldhu	r23,0(r3)
   62c94:	18c00104 	addi	r3,r3,4
   62c98:	d8c12d15 	stw	r3,1204(sp)
   62c9c:	b805883a 	mov	r2,r23
   62ca0:	00c00044 	movi	r3,1
   62ca4:	d8012585 	stb	zero,1174(sp)
   62ca8:	003c4506 	br	61dc0 <___vfprintf_internal_r+0x5e4>
   62cac:	8080100c 	andi	r2,r16,64
   62cb0:	10010526 	beq	r2,zero,630c8 <___vfprintf_internal_r+0x18ec>
   62cb4:	d9012d17 	ldw	r4,1204(sp)
   62cb8:	002d883a 	mov	r22,zero
   62cbc:	0007883a 	mov	r3,zero
   62cc0:	25c0000b 	ldhu	r23,0(r4)
   62cc4:	21000104 	addi	r4,r4,4
   62cc8:	d9012d15 	stw	r4,1204(sp)
   62ccc:	b805883a 	mov	r2,r23
   62cd0:	d8012585 	stb	zero,1174(sp)
   62cd4:	003c3a06 	br	61dc0 <___vfprintf_internal_r+0x5e4>
   62cd8:	d8812d17 	ldw	r2,1204(sp)
   62cdc:	15800017 	ldw	r22,0(r2)
   62ce0:	15000117 	ldw	r20,4(r2)
   62ce4:	10800204 	addi	r2,r2,8
   62ce8:	d8812d15 	stw	r2,1204(sp)
   62cec:	dd813315 	stw	r22,1228(sp)
   62cf0:	dd013415 	stw	r20,1232(sp)
   62cf4:	003c5906 	br	61e5c <___vfprintf_internal_r+0x680>
   62cf8:	00c00084 	movi	r3,2
   62cfc:	d8012585 	stb	zero,1174(sp)
   62d00:	003c2f06 	br	61dc0 <___vfprintf_internal_r+0x5e4>
   62d04:	ac800007 	ldb	r18,0(r21)
   62d08:	003b1006 	br	6194c <___vfprintf_internal_r+0x170>
   62d0c:	8080040c 	andi	r2,r16,16
   62d10:	1000091e 	bne	r2,zero,62d38 <___vfprintf_internal_r+0x155c>
   62d14:	8400100c 	andi	r16,r16,64
   62d18:	80000726 	beq	r16,zero,62d38 <___vfprintf_internal_r+0x155c>
   62d1c:	d8c12d17 	ldw	r3,1204(sp)
   62d20:	d9012c17 	ldw	r4,1200(sp)
   62d24:	18800017 	ldw	r2,0(r3)
   62d28:	18c00104 	addi	r3,r3,4
   62d2c:	d8c12d15 	stw	r3,1204(sp)
   62d30:	1100000d 	sth	r4,0(r2)
   62d34:	003adf06 	br	618b4 <___vfprintf_internal_r+0xd8>
   62d38:	d8c12d17 	ldw	r3,1204(sp)
   62d3c:	d9012c17 	ldw	r4,1200(sp)
   62d40:	18800017 	ldw	r2,0(r3)
   62d44:	18c00104 	addi	r3,r3,4
   62d48:	d8c12d15 	stw	r3,1204(sp)
   62d4c:	11000015 	stw	r4,0(r2)
   62d50:	003ad806 	br	618b4 <___vfprintf_internal_r+0xd8>
   62d54:	8080100c 	andi	r2,r16,64
   62d58:	1000c526 	beq	r2,zero,63070 <___vfprintf_internal_r+0x1894>
   62d5c:	d8812d17 	ldw	r2,1204(sp)
   62d60:	15c0000f 	ldh	r23,0(r2)
   62d64:	10800104 	addi	r2,r2,4
   62d68:	d8812d15 	stw	r2,1204(sp)
   62d6c:	b82dd7fa 	srai	r22,r23,31
   62d70:	b005883a 	mov	r2,r22
   62d74:	003c0906 	br	61d9c <___vfprintf_internal_r+0x5c0>
   62d78:	4c800115 	stw	r18,4(r9)
   62d7c:	9211883a 	add	r8,r18,r8
   62d80:	18c00044 	addi	r3,r3,1
   62d84:	da011d15 	stw	r8,1140(sp)
   62d88:	d8c11c15 	stw	r3,1136(sp)
   62d8c:	008001c4 	movi	r2,7
   62d90:	10c14016 	blt	r2,r3,63294 <___vfprintf_internal_r+0x1ab8>
   62d94:	4a400204 	addi	r9,r9,8
   62d98:	d8813717 	ldw	r2,1244(sp)
   62d9c:	9ca7883a 	add	r19,r19,r18
   62da0:	48800015 	stw	r2,0(r9)
   62da4:	00800044 	movi	r2,1
   62da8:	48800115 	stw	r2,4(r9)
   62dac:	4091883a 	add	r8,r8,r2
   62db0:	1887883a 	add	r3,r3,r2
   62db4:	da011d15 	stw	r8,1140(sp)
   62db8:	d8c11c15 	stw	r3,1136(sp)
   62dbc:	008001c4 	movi	r2,7
   62dc0:	10c12c16 	blt	r2,r3,63274 <___vfprintf_internal_r+0x1a98>
   62dc4:	4a400204 	addi	r9,r9,8
   62dc8:	d9013217 	ldw	r4,1224(sp)
   62dcc:	da011d17 	ldw	r8,1140(sp)
   62dd0:	d8c11c17 	ldw	r3,1136(sp)
   62dd4:	24a5c83a 	sub	r18,r4,r18
   62dd8:	4cc00015 	stw	r19,0(r9)
   62ddc:	003fa506 	br	62c74 <___vfprintf_internal_r+0x1498>
   62de0:	04c001f4 	movhi	r19,7
   62de4:	9cf71504 	addi	r19,r19,-9132
   62de8:	003c2e06 	br	61ea4 <___vfprintf_internal_r+0x6c8>
   62dec:	d9412917 	ldw	r5,1188(sp)
   62df0:	8809883a 	mov	r4,r17
   62df4:	d9811b04 	addi	r6,sp,1132
   62df8:	00617a80 	call	617a8 <__sprint_r>
   62dfc:	103bbd1e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   62e00:	da011d17 	ldw	r8,1140(sp)
   62e04:	da400404 	addi	r9,sp,16
   62e08:	003df606 	br	625e4 <___vfprintf_internal_r+0xe08>
   62e0c:	008001f4 	movhi	r2,7
   62e10:	10b72404 	addi	r2,r2,-9072
   62e14:	48800015 	stw	r2,0(r9)
   62e18:	00800044 	movi	r2,1
   62e1c:	48800115 	stw	r2,4(r9)
   62e20:	4091883a 	add	r8,r8,r2
   62e24:	1887883a 	add	r3,r3,r2
   62e28:	da011d15 	stw	r8,1140(sp)
   62e2c:	d8c11c15 	stw	r3,1136(sp)
   62e30:	008001c4 	movi	r2,7
   62e34:	10c0bc16 	blt	r2,r3,63128 <___vfprintf_internal_r+0x194c>
   62e38:	4a400204 	addi	r9,r9,8
   62e3c:	9000041e 	bne	r18,zero,62e50 <___vfprintf_internal_r+0x1674>
   62e40:	d8c13217 	ldw	r3,1224(sp)
   62e44:	1800021e 	bne	r3,zero,62e50 <___vfprintf_internal_r+0x1674>
   62e48:	8080004c 	andi	r2,r16,1
   62e4c:	103d5226 	beq	r2,zero,62398 <___vfprintf_internal_r+0xbbc>
   62e50:	d8c11c17 	ldw	r3,1136(sp)
   62e54:	d9013717 	ldw	r4,1244(sp)
   62e58:	00800044 	movi	r2,1
   62e5c:	48800115 	stw	r2,4(r9)
   62e60:	49000015 	stw	r4,0(r9)
   62e64:	4091883a 	add	r8,r8,r2
   62e68:	1887883a 	add	r3,r3,r2
   62e6c:	da011d15 	stw	r8,1140(sp)
   62e70:	d8c11c15 	stw	r3,1136(sp)
   62e74:	008001c4 	movi	r2,7
   62e78:	10c14516 	blt	r2,r3,63390 <___vfprintf_internal_r+0x1bb4>
   62e7c:	4a400204 	addi	r9,r9,8
   62e80:	04a5c83a 	sub	r18,zero,r18
   62e84:	0480d70e 	bge	zero,r18,631e4 <___vfprintf_internal_r+0x1a08>
   62e88:	05800404 	movi	r22,16
   62e8c:	050001f4 	movhi	r20,7
   62e90:	a5372884 	addi	r20,r20,-9054
   62e94:	b480db0e 	bge	r22,r18,63204 <___vfprintf_internal_r+0x1a28>
   62e98:	05c001c4 	movi	r23,7
   62e9c:	df012917 	ldw	fp,1188(sp)
   62ea0:	00000306 	br	62eb0 <___vfprintf_internal_r+0x16d4>
   62ea4:	4a400204 	addi	r9,r9,8
   62ea8:	94bffc04 	addi	r18,r18,-16
   62eac:	b480d50e 	bge	r22,r18,63204 <___vfprintf_internal_r+0x1a28>
   62eb0:	4d000015 	stw	r20,0(r9)
   62eb4:	4d800115 	stw	r22,4(r9)
   62eb8:	42000404 	addi	r8,r8,16
   62ebc:	18c00044 	addi	r3,r3,1
   62ec0:	da011d15 	stw	r8,1140(sp)
   62ec4:	d8c11c15 	stw	r3,1136(sp)
   62ec8:	b8fff60e 	bge	r23,r3,62ea4 <___vfprintf_internal_r+0x16c8>
   62ecc:	8809883a 	mov	r4,r17
   62ed0:	e00b883a 	mov	r5,fp
   62ed4:	d9811b04 	addi	r6,sp,1132
   62ed8:	00617a80 	call	617a8 <__sprint_r>
   62edc:	103b851e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   62ee0:	da011d17 	ldw	r8,1140(sp)
   62ee4:	d8c11c17 	ldw	r3,1136(sp)
   62ee8:	da400404 	addi	r9,sp,16
   62eec:	003fee06 	br	62ea8 <___vfprintf_internal_r+0x16cc>
   62ef0:	da413c15 	stw	r9,1264(sp)
   62ef4:	00683880 	call	68388 <__isnand>
   62ef8:	da413c17 	ldw	r9,1264(sp)
   62efc:	10007e1e 	bne	r2,zero,630f8 <___vfprintf_internal_r+0x191c>
   62f00:	00bfffc4 	movi	r2,-1
   62f04:	e0816a26 	beq	fp,r2,634b0 <___vfprintf_internal_r+0x1cd4>
   62f08:	008019c4 	movi	r2,103
   62f0c:	90816526 	beq	r18,r2,634a4 <___vfprintf_internal_r+0x1cc8>
   62f10:	008011c4 	movi	r2,71
   62f14:	90816326 	beq	r18,r2,634a4 <___vfprintf_internal_r+0x1cc8>
   62f18:	80c04014 	ori	r3,r16,256
   62f1c:	d8c12a15 	stw	r3,1192(sp)
   62f20:	a0016516 	blt	r20,zero,634b8 <___vfprintf_internal_r+0x1cdc>
   62f24:	d8012f05 	stb	zero,1212(sp)
   62f28:	00801984 	movi	r2,102
   62f2c:	9080f226 	beq	r18,r2,632f8 <___vfprintf_internal_r+0x1b1c>
   62f30:	00801184 	movi	r2,70
   62f34:	9080f026 	beq	r18,r2,632f8 <___vfprintf_internal_r+0x1b1c>
   62f38:	00801944 	movi	r2,101
   62f3c:	90818d26 	beq	r18,r2,63574 <___vfprintf_internal_r+0x1d98>
   62f40:	00801144 	movi	r2,69
   62f44:	90818b26 	beq	r18,r2,63574 <___vfprintf_internal_r+0x1d98>
   62f48:	e02f883a 	mov	r23,fp
   62f4c:	d8812404 	addi	r2,sp,1168
   62f50:	d8800115 	stw	r2,4(sp)
   62f54:	d8812304 	addi	r2,sp,1164
   62f58:	d8800215 	stw	r2,8(sp)
   62f5c:	d8812204 	addi	r2,sp,1160
   62f60:	ddc00015 	stw	r23,0(sp)
   62f64:	d8800315 	stw	r2,12(sp)
   62f68:	8809883a 	mov	r4,r17
   62f6c:	b00b883a 	mov	r5,r22
   62f70:	a00d883a 	mov	r6,r20
   62f74:	01c00084 	movi	r7,2
   62f78:	da413c15 	stw	r9,1264(sp)
   62f7c:	0063a2c0 	call	63a2c <_dtoa_r>
   62f80:	1027883a 	mov	r19,r2
   62f84:	008019c4 	movi	r2,103
   62f88:	da413c17 	ldw	r9,1264(sp)
   62f8c:	9081951e 	bne	r18,r2,635e4 <___vfprintf_internal_r+0x1e08>
   62f90:	8080004c 	andi	r2,r16,1
   62f94:	10017926 	beq	r2,zero,6357c <___vfprintf_internal_r+0x1da0>
   62f98:	00801184 	movi	r2,70
   62f9c:	9dc7883a 	add	r3,r19,r23
   62fa0:	9080e626 	beq	r18,r2,6333c <___vfprintf_internal_r+0x1b60>
   62fa4:	b009883a 	mov	r4,r22
   62fa8:	a00b883a 	mov	r5,r20
   62fac:	000d883a 	mov	r6,zero
   62fb0:	000f883a 	mov	r7,zero
   62fb4:	d8c13b15 	stw	r3,1260(sp)
   62fb8:	da413c15 	stw	r9,1264(sp)
   62fbc:	0069fa40 	call	69fa4 <__eqdf2>
   62fc0:	d8c13b17 	ldw	r3,1260(sp)
   62fc4:	da413c17 	ldw	r9,1264(sp)
   62fc8:	10000726 	beq	r2,zero,62fe8 <___vfprintf_internal_r+0x180c>
   62fcc:	d8812217 	ldw	r2,1160(sp)
   62fd0:	10c18a2e 	bgeu	r2,r3,635fc <___vfprintf_internal_r+0x1e20>
   62fd4:	01000c04 	movi	r4,48
   62fd8:	11000005 	stb	r4,0(r2)
   62fdc:	10800044 	addi	r2,r2,1
   62fe0:	d8812215 	stw	r2,1160(sp)
   62fe4:	10fffc1e 	bne	r2,r3,62fd8 <___vfprintf_internal_r+0x17fc>
   62fe8:	1cc7c83a 	sub	r3,r3,r19
   62fec:	d8c13215 	stw	r3,1224(sp)
   62ff0:	008019c4 	movi	r2,103
   62ff4:	9080fa26 	beq	r18,r2,633e0 <___vfprintf_internal_r+0x1c04>
   62ff8:	008011c4 	movi	r2,71
   62ffc:	9080f826 	beq	r18,r2,633e0 <___vfprintf_internal_r+0x1c04>
   63000:	00801984 	movi	r2,102
   63004:	90818e1e 	bne	r18,r2,63640 <___vfprintf_internal_r+0x1e64>
   63008:	d8812417 	ldw	r2,1168(sp)
   6300c:	d8812b15 	stw	r2,1196(sp)
   63010:	00817c0e 	bge	zero,r2,63604 <___vfprintf_internal_r+0x1e28>
   63014:	e000021e 	bne	fp,zero,63020 <___vfprintf_internal_r+0x1844>
   63018:	8400004c 	andi	r16,r16,1
   6301c:	80000426 	beq	r16,zero,63030 <___vfprintf_internal_r+0x1854>
   63020:	d8812b17 	ldw	r2,1196(sp)
   63024:	e2000044 	addi	r8,fp,1
   63028:	1205883a 	add	r2,r2,r8
   6302c:	d8812b15 	stw	r2,1196(sp)
   63030:	d8812815 	stw	r2,1184(sp)
   63034:	10010b16 	blt	r2,zero,63464 <___vfprintf_internal_r+0x1c88>
   63038:	ddc12f07 	ldb	r23,1212(sp)
   6303c:	b800e426 	beq	r23,zero,633d0 <___vfprintf_internal_r+0x1bf4>
   63040:	00800b44 	movi	r2,45
   63044:	d8812585 	stb	r2,1174(sp)
   63048:	dc012a17 	ldw	r16,1192(sp)
   6304c:	d8013115 	stw	zero,1220(sp)
   63050:	003b7306 	br	61e20 <___vfprintf_internal_r+0x644>
   63054:	d8812b17 	ldw	r2,1196(sp)
   63058:	d8812815 	stw	r2,1184(sp)
   6305c:	10005716 	blt	r2,zero,631bc <___vfprintf_internal_r+0x19e0>
   63060:	d8812583 	ldbu	r2,1174(sp)
   63064:	ddc12d15 	stw	r23,1204(sp)
   63068:	d8013115 	stw	zero,1220(sp)
   6306c:	003b6806 	br	61e10 <___vfprintf_internal_r+0x634>
   63070:	d8c12d17 	ldw	r3,1204(sp)
   63074:	1dc00017 	ldw	r23,0(r3)
   63078:	18c00104 	addi	r3,r3,4
   6307c:	d8c12d15 	stw	r3,1204(sp)
   63080:	b82dd7fa 	srai	r22,r23,31
   63084:	b005883a 	mov	r2,r22
   63088:	003b4406 	br	61d9c <___vfprintf_internal_r+0x5c0>
   6308c:	d9012d17 	ldw	r4,1204(sp)
   63090:	002d883a 	mov	r22,zero
   63094:	00c00044 	movi	r3,1
   63098:	25c00017 	ldw	r23,0(r4)
   6309c:	21000104 	addi	r4,r4,4
   630a0:	d9012d15 	stw	r4,1204(sp)
   630a4:	b805883a 	mov	r2,r23
   630a8:	d8012585 	stb	zero,1174(sp)
   630ac:	003b4406 	br	61dc0 <___vfprintf_internal_r+0x5e4>
   630b0:	d9012d17 	ldw	r4,1204(sp)
   630b4:	002d883a 	mov	r22,zero
   630b8:	25c00017 	ldw	r23,0(r4)
   630bc:	21000104 	addi	r4,r4,4
   630c0:	d9012d15 	stw	r4,1204(sp)
   630c4:	003bab06 	br	61f74 <___vfprintf_internal_r+0x798>
   630c8:	d8812d17 	ldw	r2,1204(sp)
   630cc:	002d883a 	mov	r22,zero
   630d0:	0007883a 	mov	r3,zero
   630d4:	15c00017 	ldw	r23,0(r2)
   630d8:	10800104 	addi	r2,r2,4
   630dc:	d8812d15 	stw	r2,1204(sp)
   630e0:	d8012585 	stb	zero,1174(sp)
   630e4:	b805883a 	mov	r2,r23
   630e8:	003b3506 	br	61dc0 <___vfprintf_internal_r+0x5e4>
   630ec:	00ffffc4 	movi	r3,-1
   630f0:	b82b883a 	mov	r21,r23
   630f4:	003a1606 	br	61950 <___vfprintf_internal_r+0x174>
   630f8:	008011c4 	movi	r2,71
   630fc:	1480b116 	blt	r2,r18,633c4 <___vfprintf_internal_r+0x1be8>
   63100:	04c001f4 	movhi	r19,7
   63104:	9cf71604 	addi	r19,r19,-9128
   63108:	00c000c4 	movi	r3,3
   6310c:	00bfdfc4 	movi	r2,-129
   63110:	80a0703a 	and	r16,r16,r2
   63114:	d8c12815 	stw	r3,1184(sp)
   63118:	d8812583 	ldbu	r2,1174(sp)
   6311c:	d8c12b15 	stw	r3,1196(sp)
   63120:	d8013115 	stw	zero,1220(sp)
   63124:	003b3a06 	br	61e10 <___vfprintf_internal_r+0x634>
   63128:	d9412917 	ldw	r5,1188(sp)
   6312c:	8809883a 	mov	r4,r17
   63130:	d9811b04 	addi	r6,sp,1132
   63134:	00617a80 	call	617a8 <__sprint_r>
   63138:	103aee1e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   6313c:	dc812417 	ldw	r18,1168(sp)
   63140:	da011d17 	ldw	r8,1140(sp)
   63144:	da400404 	addi	r9,sp,16
   63148:	003f3c06 	br	62e3c <___vfprintf_internal_r+0x1660>
   6314c:	ad400044 	addi	r21,r21,1
   63150:	84000814 	ori	r16,r16,32
   63154:	14800047 	ldb	r18,1(r2)
   63158:	0039fc06 	br	6194c <___vfprintf_internal_r+0x170>
   6315c:	d9412917 	ldw	r5,1188(sp)
   63160:	8809883a 	mov	r4,r17
   63164:	d9811b04 	addi	r6,sp,1132
   63168:	00617a80 	call	617a8 <__sprint_r>
   6316c:	103ae11e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   63170:	da011d17 	ldw	r8,1140(sp)
   63174:	da400404 	addi	r9,sp,16
   63178:	003d2b06 	br	62628 <___vfprintf_internal_r+0xe4c>
   6317c:	4d000015 	stw	r20,0(r9)
   63180:	4c800115 	stw	r18,4(r9)
   63184:	4491883a 	add	r8,r8,r18
   63188:	18c00044 	addi	r3,r3,1
   6318c:	da011d15 	stw	r8,1140(sp)
   63190:	d8c11c15 	stw	r3,1136(sp)
   63194:	008001c4 	movi	r2,7
   63198:	10fcbd16 	blt	r2,r3,62490 <___vfprintf_internal_r+0xcb4>
   6319c:	4a400204 	addi	r9,r9,8
   631a0:	003cc206 	br	624ac <___vfprintf_internal_r+0xcd0>
   631a4:	da413c15 	stw	r9,1264(sp)
   631a8:	006171c0 	call	6171c <strlen>
   631ac:	d8812b15 	stw	r2,1196(sp)
   631b0:	d8812815 	stw	r2,1184(sp)
   631b4:	da413c17 	ldw	r9,1264(sp)
   631b8:	103fa90e 	bge	r2,zero,63060 <___vfprintf_internal_r+0x1884>
   631bc:	d8012815 	stw	zero,1184(sp)
   631c0:	003fa706 	br	63060 <___vfprintf_internal_r+0x1884>
   631c4:	d9412917 	ldw	r5,1188(sp)
   631c8:	8809883a 	mov	r4,r17
   631cc:	d9811b04 	addi	r6,sp,1132
   631d0:	00617a80 	call	617a8 <__sprint_r>
   631d4:	103ac71e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   631d8:	da011d17 	ldw	r8,1140(sp)
   631dc:	d8c11c17 	ldw	r3,1136(sp)
   631e0:	da400404 	addi	r9,sp,16
   631e4:	d8813217 	ldw	r2,1224(sp)
   631e8:	4cc00015 	stw	r19,0(r9)
   631ec:	48800115 	stw	r2,4(r9)
   631f0:	4091883a 	add	r8,r8,r2
   631f4:	003c6206 	br	62380 <___vfprintf_internal_r+0xba4>
   631f8:	00800b44 	movi	r2,45
   631fc:	d8812585 	stb	r2,1174(sp)
   63200:	003b2406 	br	61e94 <___vfprintf_internal_r+0x6b8>
   63204:	4d000015 	stw	r20,0(r9)
   63208:	4c800115 	stw	r18,4(r9)
   6320c:	4491883a 	add	r8,r8,r18
   63210:	18c00044 	addi	r3,r3,1
   63214:	da011d15 	stw	r8,1140(sp)
   63218:	d8c11c15 	stw	r3,1136(sp)
   6321c:	008001c4 	movi	r2,7
   63220:	10ffe816 	blt	r2,r3,631c4 <___vfprintf_internal_r+0x19e8>
   63224:	4a400204 	addi	r9,r9,8
   63228:	003fee06 	br	631e4 <___vfprintf_internal_r+0x1a08>
   6322c:	d8c12b15 	stw	r3,1196(sp)
   63230:	00800184 	movi	r2,6
   63234:	10c0062e 	bgeu	r2,r3,63250 <___vfprintf_internal_r+0x1a74>
   63238:	d8812b15 	stw	r2,1196(sp)
   6323c:	d8812815 	stw	r2,1184(sp)
   63240:	ddc12d15 	stw	r23,1204(sp)
   63244:	04c001f4 	movhi	r19,7
   63248:	9cf72204 	addi	r19,r19,-9080
   6324c:	0039ca06 	br	61978 <___vfprintf_internal_r+0x19c>
   63250:	d8812b17 	ldw	r2,1196(sp)
   63254:	d8812815 	stw	r2,1184(sp)
   63258:	103ff90e 	bge	r2,zero,63240 <___vfprintf_internal_r+0x1a64>
   6325c:	d8012815 	stw	zero,1184(sp)
   63260:	003ff706 	br	63240 <___vfprintf_internal_r+0x1a64>
   63264:	00800244 	movi	r2,9
   63268:	15fdaa36 	bltu	r2,r23,62914 <___vfprintf_internal_r+0x1138>
   6326c:	dd010e04 	addi	r20,sp,1080
   63270:	003dc606 	br	6298c <___vfprintf_internal_r+0x11b0>
   63274:	d9412917 	ldw	r5,1188(sp)
   63278:	8809883a 	mov	r4,r17
   6327c:	d9811b04 	addi	r6,sp,1132
   63280:	00617a80 	call	617a8 <__sprint_r>
   63284:	103a9b1e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   63288:	dc812417 	ldw	r18,1168(sp)
   6328c:	da400404 	addi	r9,sp,16
   63290:	003ecd06 	br	62dc8 <___vfprintf_internal_r+0x15ec>
   63294:	d9412917 	ldw	r5,1188(sp)
   63298:	8809883a 	mov	r4,r17
   6329c:	d9811b04 	addi	r6,sp,1132
   632a0:	00617a80 	call	617a8 <__sprint_r>
   632a4:	103a931e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   632a8:	dc812417 	ldw	r18,1168(sp)
   632ac:	da011d17 	ldw	r8,1140(sp)
   632b0:	d8c11c17 	ldw	r3,1136(sp)
   632b4:	da400404 	addi	r9,sp,16
   632b8:	003eb706 	br	62d98 <___vfprintf_internal_r+0x15bc>
   632bc:	d9412917 	ldw	r5,1188(sp)
   632c0:	8809883a 	mov	r4,r17
   632c4:	d9811b04 	addi	r6,sp,1132
   632c8:	00617a80 	call	617a8 <__sprint_r>
   632cc:	103a891e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   632d0:	dc812417 	ldw	r18,1168(sp)
   632d4:	da011d17 	ldw	r8,1140(sp)
   632d8:	da400404 	addi	r9,sp,16
   632dc:	003dc206 	br	629e8 <___vfprintf_internal_r+0x120c>
   632e0:	df012815 	stw	fp,1184(sp)
   632e4:	d8812583 	ldbu	r2,1174(sp)
   632e8:	df012b15 	stw	fp,1196(sp)
   632ec:	ddc12d15 	stw	r23,1204(sp)
   632f0:	d8013115 	stw	zero,1220(sp)
   632f4:	003ac606 	br	61e10 <___vfprintf_internal_r+0x634>
   632f8:	d8812404 	addi	r2,sp,1168
   632fc:	d8800115 	stw	r2,4(sp)
   63300:	d8812304 	addi	r2,sp,1164
   63304:	d8800215 	stw	r2,8(sp)
   63308:	d8812204 	addi	r2,sp,1160
   6330c:	df000015 	stw	fp,0(sp)
   63310:	d8800315 	stw	r2,12(sp)
   63314:	8809883a 	mov	r4,r17
   63318:	b00b883a 	mov	r5,r22
   6331c:	a00d883a 	mov	r6,r20
   63320:	01c000c4 	movi	r7,3
   63324:	da413c15 	stw	r9,1264(sp)
   63328:	0063a2c0 	call	63a2c <_dtoa_r>
   6332c:	da413c17 	ldw	r9,1264(sp)
   63330:	1027883a 	mov	r19,r2
   63334:	1707883a 	add	r3,r2,fp
   63338:	e02f883a 	mov	r23,fp
   6333c:	99000007 	ldb	r4,0(r19)
   63340:	00800c04 	movi	r2,48
   63344:	20800326 	beq	r4,r2,63354 <___vfprintf_internal_r+0x1b78>
   63348:	da812417 	ldw	r10,1168(sp)
   6334c:	1a87883a 	add	r3,r3,r10
   63350:	003f1406 	br	62fa4 <___vfprintf_internal_r+0x17c8>
   63354:	b009883a 	mov	r4,r22
   63358:	a00b883a 	mov	r5,r20
   6335c:	000d883a 	mov	r6,zero
   63360:	000f883a 	mov	r7,zero
   63364:	d8c13b15 	stw	r3,1260(sp)
   63368:	da413c15 	stw	r9,1264(sp)
   6336c:	006a0000 	call	6a000 <__nedf2>
   63370:	d8c13b17 	ldw	r3,1260(sp)
   63374:	da413c17 	ldw	r9,1264(sp)
   63378:	103ff326 	beq	r2,zero,63348 <___vfprintf_internal_r+0x1b6c>
   6337c:	00800044 	movi	r2,1
   63380:	15d5c83a 	sub	r10,r2,r23
   63384:	da812415 	stw	r10,1168(sp)
   63388:	1a87883a 	add	r3,r3,r10
   6338c:	003f0506 	br	62fa4 <___vfprintf_internal_r+0x17c8>
   63390:	d9412917 	ldw	r5,1188(sp)
   63394:	8809883a 	mov	r4,r17
   63398:	d9811b04 	addi	r6,sp,1132
   6339c:	00617a80 	call	617a8 <__sprint_r>
   633a0:	103a541e 	bne	r2,zero,61cf4 <___vfprintf_internal_r+0x518>
   633a4:	dc812417 	ldw	r18,1168(sp)
   633a8:	da011d17 	ldw	r8,1140(sp)
   633ac:	d8c11c17 	ldw	r3,1136(sp)
   633b0:	da400404 	addi	r9,sp,16
   633b4:	003eb206 	br	62e80 <___vfprintf_internal_r+0x16a4>
   633b8:	b82b883a 	mov	r21,r23
   633bc:	0007883a 	mov	r3,zero
   633c0:	00396306 	br	61950 <___vfprintf_internal_r+0x174>
   633c4:	04c001f4 	movhi	r19,7
   633c8:	9cf71704 	addi	r19,r19,-9124
   633cc:	003f4e06 	br	63108 <___vfprintf_internal_r+0x192c>
   633d0:	d8812583 	ldbu	r2,1174(sp)
   633d4:	dc012a17 	ldw	r16,1192(sp)
   633d8:	d8013115 	stw	zero,1220(sp)
   633dc:	003a8c06 	br	61e10 <___vfprintf_internal_r+0x634>
   633e0:	d8812417 	ldw	r2,1168(sp)
   633e4:	d8812b15 	stw	r2,1196(sp)
   633e8:	1029883a 	mov	r20,r2
   633ec:	00bfff44 	movi	r2,-3
   633f0:	a0800116 	blt	r20,r2,633f8 <___vfprintf_internal_r+0x1c1c>
   633f4:	e5001d0e 	bge	fp,r20,6346c <___vfprintf_internal_r+0x1c90>
   633f8:	94bfff84 	addi	r18,r18,-2
   633fc:	a53fffc4 	addi	r20,r20,-1
   63400:	dd012415 	stw	r20,1168(sp)
   63404:	dc811fc5 	stb	r18,1151(sp)
   63408:	a0007216 	blt	r20,zero,635d4 <___vfprintf_internal_r+0x1df8>
   6340c:	00800ac4 	movi	r2,43
   63410:	d8812005 	stb	r2,1152(sp)
   63414:	00800244 	movi	r2,9
   63418:	15003516 	blt	r2,r20,634f0 <___vfprintf_internal_r+0x1d14>
   6341c:	00800c04 	movi	r2,48
   63420:	a5000c04 	addi	r20,r20,48
   63424:	d8812045 	stb	r2,1153(sp)
   63428:	dd012085 	stb	r20,1154(sp)
   6342c:	d8c120c4 	addi	r3,sp,1155
   63430:	d8811fc4 	addi	r2,sp,1151
   63434:	1885c83a 	sub	r2,r3,r2
   63438:	d8c13217 	ldw	r3,1224(sp)
   6343c:	d8813515 	stw	r2,1236(sp)
   63440:	1885883a 	add	r2,r3,r2
   63444:	d8812b15 	stw	r2,1196(sp)
   63448:	00800044 	movi	r2,1
   6344c:	10c0580e 	bge	r2,r3,635b0 <___vfprintf_internal_r+0x1dd4>
   63450:	d8812b17 	ldw	r2,1196(sp)
   63454:	10800044 	addi	r2,r2,1
   63458:	d8812b15 	stw	r2,1196(sp)
   6345c:	d8812815 	stw	r2,1184(sp)
   63460:	103ef50e 	bge	r2,zero,63038 <___vfprintf_internal_r+0x185c>
   63464:	d8012815 	stw	zero,1184(sp)
   63468:	003ef306 	br	63038 <___vfprintf_internal_r+0x185c>
   6346c:	d8812b17 	ldw	r2,1196(sp)
   63470:	d8c13217 	ldw	r3,1224(sp)
   63474:	10c01416 	blt	r2,r3,634c8 <___vfprintf_internal_r+0x1cec>
   63478:	8400004c 	andi	r16,r16,1
   6347c:	80000326 	beq	r16,zero,6348c <___vfprintf_internal_r+0x1cb0>
   63480:	d8812b17 	ldw	r2,1196(sp)
   63484:	10800044 	addi	r2,r2,1
   63488:	d8812b15 	stw	r2,1196(sp)
   6348c:	d8812815 	stw	r2,1184(sp)
   63490:	10001416 	blt	r2,zero,634e4 <___vfprintf_internal_r+0x1d08>
   63494:	048019c4 	movi	r18,103
   63498:	003ee706 	br	63038 <___vfprintf_internal_r+0x185c>
   6349c:	d8012815 	stw	zero,1184(sp)
   634a0:	003b1a06 	br	6210c <___vfprintf_internal_r+0x930>
   634a4:	e03e9c1e 	bne	fp,zero,62f18 <___vfprintf_internal_r+0x173c>
   634a8:	07000044 	movi	fp,1
   634ac:	003e9a06 	br	62f18 <___vfprintf_internal_r+0x173c>
   634b0:	07000184 	movi	fp,6
   634b4:	003e9806 	br	62f18 <___vfprintf_internal_r+0x173c>
   634b8:	00c00b44 	movi	r3,45
   634bc:	a520003c 	xorhi	r20,r20,32768
   634c0:	d8c12f05 	stb	r3,1212(sp)
   634c4:	003e9806 	br	62f28 <___vfprintf_internal_r+0x174c>
   634c8:	05003f0e 	bge	zero,r20,635c8 <___vfprintf_internal_r+0x1dec>
   634cc:	05000044 	movi	r20,1
   634d0:	d8c13217 	ldw	r3,1224(sp)
   634d4:	a0e9883a 	add	r20,r20,r3
   634d8:	dd012b15 	stw	r20,1196(sp)
   634dc:	dd012815 	stw	r20,1184(sp)
   634e0:	a03fec0e 	bge	r20,zero,63494 <___vfprintf_internal_r+0x1cb8>
   634e4:	d8012815 	stw	zero,1184(sp)
   634e8:	048019c4 	movi	r18,103
   634ec:	003ed206 	br	63038 <___vfprintf_internal_r+0x185c>
   634f0:	d8c11f84 	addi	r3,sp,1150
   634f4:	102f883a 	mov	r23,r2
   634f8:	4839883a 	mov	fp,r9
   634fc:	a009883a 	mov	r4,r20
   63500:	01400284 	movi	r5,10
   63504:	182d883a 	mov	r22,r3
   63508:	006a5080 	call	6a508 <__modsi3>
   6350c:	10800c04 	addi	r2,r2,48
   63510:	a009883a 	mov	r4,r20
   63514:	b0800005 	stb	r2,0(r22)
   63518:	01400284 	movi	r5,10
   6351c:	006a4b80 	call	6a4b8 <__divsi3>
   63520:	1029883a 	mov	r20,r2
   63524:	b0ffffc4 	addi	r3,r22,-1
   63528:	b8bff416 	blt	r23,r2,634fc <___vfprintf_internal_r+0x1d20>
   6352c:	11400c04 	addi	r5,r2,48
   63530:	b17fffc5 	stb	r5,-1(r22)
   63534:	d8811fc4 	addi	r2,sp,1151
   63538:	e013883a 	mov	r9,fp
   6353c:	18803e2e 	bgeu	r3,r2,63638 <___vfprintf_internal_r+0x1e5c>
   63540:	b007883a 	mov	r3,r22
   63544:	d9012044 	addi	r4,sp,1153
   63548:	00000206 	br	63554 <___vfprintf_internal_r+0x1d78>
   6354c:	19400003 	ldbu	r5,0(r3)
   63550:	18c00044 	addi	r3,r3,1
   63554:	21400005 	stb	r5,0(r4)
   63558:	21000044 	addi	r4,r4,1
   6355c:	10fffb1e 	bne	r2,r3,6354c <___vfprintf_internal_r+0x1d70>
   63560:	d8c12004 	addi	r3,sp,1152
   63564:	1d87c83a 	sub	r3,r3,r22
   63568:	d9012044 	addi	r4,sp,1153
   6356c:	20c7883a 	add	r3,r4,r3
   63570:	003fb006 	br	63434 <___vfprintf_internal_r+0x1c58>
   63574:	e5c00044 	addi	r23,fp,1
   63578:	003e7406 	br	62f4c <___vfprintf_internal_r+0x1770>
   6357c:	d8c12217 	ldw	r3,1160(sp)
   63580:	003e9906 	br	62fe8 <___vfprintf_internal_r+0x180c>
   63584:	d9012d17 	ldw	r4,1204(sp)
   63588:	ac800043 	ldbu	r18,1(r21)
   6358c:	b82b883a 	mov	r21,r23
   63590:	20c00017 	ldw	r3,0(r4)
   63594:	20800104 	addi	r2,r4,4
   63598:	d8812d15 	stw	r2,1204(sp)
   6359c:	18002116 	blt	r3,zero,63624 <___vfprintf_internal_r+0x1e48>
   635a0:	94803fcc 	andi	r18,r18,255
   635a4:	9480201c 	xori	r18,r18,128
   635a8:	94bfe004 	addi	r18,r18,-128
   635ac:	0038e706 	br	6194c <___vfprintf_internal_r+0x170>
   635b0:	80a0703a 	and	r16,r16,r2
   635b4:	803fa61e 	bne	r16,zero,63450 <___vfprintf_internal_r+0x1c74>
   635b8:	d8812b17 	ldw	r2,1196(sp)
   635bc:	d8812815 	stw	r2,1184(sp)
   635c0:	103e9d0e 	bge	r2,zero,63038 <___vfprintf_internal_r+0x185c>
   635c4:	003fa706 	br	63464 <___vfprintf_internal_r+0x1c88>
   635c8:	00800084 	movi	r2,2
   635cc:	1529c83a 	sub	r20,r2,r20
   635d0:	003fbf06 	br	634d0 <___vfprintf_internal_r+0x1cf4>
   635d4:	00800b44 	movi	r2,45
   635d8:	0529c83a 	sub	r20,zero,r20
   635dc:	d8812005 	stb	r2,1152(sp)
   635e0:	003f8c06 	br	63414 <___vfprintf_internal_r+0x1c38>
   635e4:	008011c4 	movi	r2,71
   635e8:	90be6926 	beq	r18,r2,62f90 <___vfprintf_internal_r+0x17b4>
   635ec:	003e6a06 	br	62f98 <___vfprintf_internal_r+0x17bc>
   635f0:	00bfffc4 	movi	r2,-1
   635f4:	d8812c15 	stw	r2,1200(sp)
   635f8:	0039ad06 	br	61cb0 <___vfprintf_internal_r+0x4d4>
   635fc:	1007883a 	mov	r3,r2
   63600:	003e7906 	br	62fe8 <___vfprintf_internal_r+0x180c>
   63604:	e000021e 	bne	fp,zero,63610 <___vfprintf_internal_r+0x1e34>
   63608:	8400004c 	andi	r16,r16,1
   6360c:	80000e26 	beq	r16,zero,63648 <___vfprintf_internal_r+0x1e6c>
   63610:	e7000084 	addi	fp,fp,2
   63614:	df012b15 	stw	fp,1196(sp)
   63618:	df012815 	stw	fp,1184(sp)
   6361c:	e03e860e 	bge	fp,zero,63038 <___vfprintf_internal_r+0x185c>
   63620:	003f9006 	br	63464 <___vfprintf_internal_r+0x1c88>
   63624:	94803fcc 	andi	r18,r18,255
   63628:	9480201c 	xori	r18,r18,128
   6362c:	00ffffc4 	movi	r3,-1
   63630:	94bfe004 	addi	r18,r18,-128
   63634:	0038c506 	br	6194c <___vfprintf_internal_r+0x170>
   63638:	d8c12044 	addi	r3,sp,1153
   6363c:	003f7d06 	br	63434 <___vfprintf_internal_r+0x1c58>
   63640:	dd012417 	ldw	r20,1168(sp)
   63644:	003f6d06 	br	633fc <___vfprintf_internal_r+0x1c20>
   63648:	00c00044 	movi	r3,1
   6364c:	d8c12815 	stw	r3,1184(sp)
   63650:	d8c12b15 	stw	r3,1196(sp)
   63654:	003e7806 	br	63038 <___vfprintf_internal_r+0x185c>

00063658 <__vfprintf_internal>:
   63658:	008001f4 	movhi	r2,7
   6365c:	10be7104 	addi	r2,r2,-1596
   63660:	2007883a 	mov	r3,r4
   63664:	11000017 	ldw	r4,0(r2)
   63668:	2805883a 	mov	r2,r5
   6366c:	300f883a 	mov	r7,r6
   63670:	180b883a 	mov	r5,r3
   63674:	100d883a 	mov	r6,r2
   63678:	00617dc1 	jmpi	617dc <___vfprintf_internal_r>

0006367c <__swsetup_r>:
   6367c:	008001f4 	movhi	r2,7
   63680:	10be7104 	addi	r2,r2,-1596
   63684:	10800017 	ldw	r2,0(r2)
   63688:	defffd04 	addi	sp,sp,-12
   6368c:	dc400115 	stw	r17,4(sp)
   63690:	dc000015 	stw	r16,0(sp)
   63694:	dfc00215 	stw	ra,8(sp)
   63698:	2023883a 	mov	r17,r4
   6369c:	2821883a 	mov	r16,r5
   636a0:	10000226 	beq	r2,zero,636ac <__swsetup_r+0x30>
   636a4:	10c00e17 	ldw	r3,56(r2)
   636a8:	18003d26 	beq	r3,zero,637a0 <__swsetup_r+0x124>
   636ac:	8080030b 	ldhu	r2,12(r16)
   636b0:	10c0020c 	andi	r3,r2,8
   636b4:	18ffffcc 	andi	r3,r3,65535
   636b8:	18e0001c 	xori	r3,r3,32768
   636bc:	18e00004 	addi	r3,r3,-32768
   636c0:	18001226 	beq	r3,zero,6370c <__swsetup_r+0x90>
   636c4:	80c00417 	ldw	r3,16(r16)
   636c8:	18001f26 	beq	r3,zero,63748 <__swsetup_r+0xcc>
   636cc:	1100004c 	andi	r4,r2,1
   636d0:	2000261e 	bne	r4,zero,6376c <__swsetup_r+0xf0>
   636d4:	1080008c 	andi	r2,r2,2
   636d8:	10bfffcc 	andi	r2,r2,65535
   636dc:	10a0001c 	xori	r2,r2,32768
   636e0:	10a00004 	addi	r2,r2,-32768
   636e4:	1000311e 	bne	r2,zero,637ac <__swsetup_r+0x130>
   636e8:	80800517 	ldw	r2,20(r16)
   636ec:	80800215 	stw	r2,8(r16)
   636f0:	18002326 	beq	r3,zero,63780 <__swsetup_r+0x104>
   636f4:	0005883a 	mov	r2,zero
   636f8:	dfc00217 	ldw	ra,8(sp)
   636fc:	dc400117 	ldw	r17,4(sp)
   63700:	dc000017 	ldw	r16,0(sp)
   63704:	dec00304 	addi	sp,sp,12
   63708:	f800283a 	ret
   6370c:	10c0040c 	andi	r3,r2,16
   63710:	18ffffcc 	andi	r3,r3,65535
   63714:	18e0001c 	xori	r3,r3,32768
   63718:	18e00004 	addi	r3,r3,-32768
   6371c:	18001e26 	beq	r3,zero,63798 <__swsetup_r+0x11c>
   63720:	10c0010c 	andi	r3,r2,4
   63724:	18ffffcc 	andi	r3,r3,65535
   63728:	18e0001c 	xori	r3,r3,32768
   6372c:	18e00004 	addi	r3,r3,-32768
   63730:	1800211e 	bne	r3,zero,637b8 <__swsetup_r+0x13c>
   63734:	80c00417 	ldw	r3,16(r16)
   63738:	11400214 	ori	r5,r2,8
   6373c:	8140030d 	sth	r5,12(r16)
   63740:	2805883a 	mov	r2,r5
   63744:	183fe11e 	bne	r3,zero,636cc <__swsetup_r+0x50>
   63748:	1140a00c 	andi	r5,r2,640
   6374c:	01008004 	movi	r4,512
   63750:	293fde26 	beq	r5,r4,636cc <__swsetup_r+0x50>
   63754:	8809883a 	mov	r4,r17
   63758:	800b883a 	mov	r5,r16
   6375c:	00660780 	call	66078 <__smakebuf_r>
   63760:	8080030b 	ldhu	r2,12(r16)
   63764:	80c00417 	ldw	r3,16(r16)
   63768:	003fd806 	br	636cc <__swsetup_r+0x50>
   6376c:	80800517 	ldw	r2,20(r16)
   63770:	80000215 	stw	zero,8(r16)
   63774:	0085c83a 	sub	r2,zero,r2
   63778:	80800615 	stw	r2,24(r16)
   6377c:	183fdd1e 	bne	r3,zero,636f4 <__swsetup_r+0x78>
   63780:	8080030b 	ldhu	r2,12(r16)
   63784:	1080200c 	andi	r2,r2,128
   63788:	10bfffcc 	andi	r2,r2,65535
   6378c:	10a0001c 	xori	r2,r2,32768
   63790:	10a00004 	addi	r2,r2,-32768
   63794:	103fd826 	beq	r2,zero,636f8 <__swsetup_r+0x7c>
   63798:	00bfffc4 	movi	r2,-1
   6379c:	003fd606 	br	636f8 <__swsetup_r+0x7c>
   637a0:	1009883a 	mov	r4,r2
   637a4:	00653040 	call	65304 <__sinit>
   637a8:	003fc006 	br	636ac <__swsetup_r+0x30>
   637ac:	0005883a 	mov	r2,zero
   637b0:	80800215 	stw	r2,8(r16)
   637b4:	003fce06 	br	636f0 <__swsetup_r+0x74>
   637b8:	81400c17 	ldw	r5,48(r16)
   637bc:	28000626 	beq	r5,zero,637d8 <__swsetup_r+0x15c>
   637c0:	80c01004 	addi	r3,r16,64
   637c4:	28c00326 	beq	r5,r3,637d4 <__swsetup_r+0x158>
   637c8:	8809883a 	mov	r4,r17
   637cc:	00656880 	call	65688 <_free_r>
   637d0:	8080030b 	ldhu	r2,12(r16)
   637d4:	80000c15 	stw	zero,48(r16)
   637d8:	80c00417 	ldw	r3,16(r16)
   637dc:	013ff6c4 	movi	r4,-37
   637e0:	2084703a 	and	r2,r4,r2
   637e4:	80000115 	stw	zero,4(r16)
   637e8:	80c00015 	stw	r3,0(r16)
   637ec:	003fd206 	br	63738 <__swsetup_r+0xbc>

000637f0 <quorem>:
   637f0:	defff204 	addi	sp,sp,-56
   637f4:	dd000815 	stw	r20,32(sp)
   637f8:	20800417 	ldw	r2,16(r4)
   637fc:	2d000417 	ldw	r20,16(r5)
   63800:	dcc00715 	stw	r19,28(sp)
   63804:	dfc00d15 	stw	ra,52(sp)
   63808:	df000c15 	stw	fp,48(sp)
   6380c:	ddc00b15 	stw	r23,44(sp)
   63810:	dd800a15 	stw	r22,40(sp)
   63814:	dd400915 	stw	r21,36(sp)
   63818:	dc800615 	stw	r18,24(sp)
   6381c:	dc400515 	stw	r17,20(sp)
   63820:	dc000415 	stw	r16,16(sp)
   63824:	d9400015 	stw	r5,0(sp)
   63828:	2027883a 	mov	r19,r4
   6382c:	15007d16 	blt	r2,r20,63a24 <quorem+0x234>
   63830:	a0800104 	addi	r2,r20,4
   63834:	1085883a 	add	r2,r2,r2
   63838:	1085883a 	add	r2,r2,r2
   6383c:	28ad883a 	add	r22,r5,r2
   63840:	2085883a 	add	r2,r4,r2
   63844:	10800017 	ldw	r2,0(r2)
   63848:	b1400017 	ldw	r5,0(r22)
   6384c:	a53fffc4 	addi	r20,r20,-1
   63850:	1009883a 	mov	r4,r2
   63854:	29400044 	addi	r5,r5,1
   63858:	d8800115 	stw	r2,4(sp)
   6385c:	006a5640 	call	6a564 <__udivsi3>
   63860:	1025883a 	mov	r18,r2
   63864:	d8800017 	ldw	r2,0(sp)
   63868:	9f000504 	addi	fp,r19,20
   6386c:	14000504 	addi	r16,r2,20
   63870:	90003626 	beq	r18,zero,6394c <quorem+0x15c>
   63874:	802b883a 	mov	r21,r16
   63878:	e023883a 	mov	r17,fp
   6387c:	0007883a 	mov	r3,zero
   63880:	002f883a 	mov	r23,zero
   63884:	a9800017 	ldw	r6,0(r21)
   63888:	900b883a 	mov	r5,r18
   6388c:	d8c00315 	stw	r3,12(sp)
   63890:	313fffcc 	andi	r4,r6,65535
   63894:	d9800215 	stw	r6,8(sp)
   63898:	00614b40 	call	614b4 <__mulsi3>
   6389c:	d9800217 	ldw	r6,8(sp)
   638a0:	d8c00317 	ldw	r3,12(sp)
   638a4:	900b883a 	mov	r5,r18
   638a8:	3008d43a 	srli	r4,r6,16
   638ac:	1887883a 	add	r3,r3,r2
   638b0:	d8c00315 	stw	r3,12(sp)
   638b4:	00614b40 	call	614b4 <__mulsi3>
   638b8:	89400017 	ldw	r5,0(r17)
   638bc:	d8c00317 	ldw	r3,12(sp)
   638c0:	ad400104 	addi	r21,r21,4
   638c4:	293fffcc 	andi	r4,r5,65535
   638c8:	1810d43a 	srli	r8,r3,16
   638cc:	25c9883a 	add	r4,r4,r23
   638d0:	18ffffcc 	andi	r3,r3,65535
   638d4:	20c9c83a 	sub	r4,r4,r3
   638d8:	280cd43a 	srli	r6,r5,16
   638dc:	4085883a 	add	r2,r8,r2
   638e0:	2007d43a 	srai	r3,r4,16
   638e4:	117fffcc 	andi	r5,r2,65535
   638e8:	314bc83a 	sub	r5,r6,r5
   638ec:	28cb883a 	add	r5,r5,r3
   638f0:	8940008d 	sth	r5,2(r17)
   638f4:	8900000d 	sth	r4,0(r17)
   638f8:	1006d43a 	srli	r3,r2,16
   638fc:	282fd43a 	srai	r23,r5,16
   63900:	8c400104 	addi	r17,r17,4
   63904:	b57fdf2e 	bgeu	r22,r21,63884 <quorem+0x94>
   63908:	d8c00117 	ldw	r3,4(sp)
   6390c:	18000f1e 	bne	r3,zero,6394c <quorem+0x15c>
   63910:	a0800144 	addi	r2,r20,5
   63914:	1085883a 	add	r2,r2,r2
   63918:	1085883a 	add	r2,r2,r2
   6391c:	9887883a 	add	r3,r19,r2
   63920:	18bfff04 	addi	r2,r3,-4
   63924:	e080082e 	bgeu	fp,r2,63948 <quorem+0x158>
   63928:	18ffff17 	ldw	r3,-4(r3)
   6392c:	18000326 	beq	r3,zero,6393c <quorem+0x14c>
   63930:	00000506 	br	63948 <quorem+0x158>
   63934:	10c00017 	ldw	r3,0(r2)
   63938:	1800031e 	bne	r3,zero,63948 <quorem+0x158>
   6393c:	10bfff04 	addi	r2,r2,-4
   63940:	a53fffc4 	addi	r20,r20,-1
   63944:	e0bffb36 	bltu	fp,r2,63934 <quorem+0x144>
   63948:	9d000415 	stw	r20,16(r19)
   6394c:	d9400017 	ldw	r5,0(sp)
   63950:	9809883a 	mov	r4,r19
   63954:	00676500 	call	67650 <__mcmp>
   63958:	10002516 	blt	r2,zero,639f0 <quorem+0x200>
   6395c:	94800044 	addi	r18,r18,1
   63960:	e007883a 	mov	r3,fp
   63964:	000d883a 	mov	r6,zero
   63968:	18800017 	ldw	r2,0(r3)
   6396c:	82000017 	ldw	r8,0(r16)
   63970:	84000104 	addi	r16,r16,4
   63974:	11ffffcc 	andi	r7,r2,65535
   63978:	413fffcc 	andi	r4,r8,65535
   6397c:	398d883a 	add	r6,r7,r6
   63980:	310fc83a 	sub	r7,r6,r4
   63984:	4010d43a 	srli	r8,r8,16
   63988:	100cd43a 	srli	r6,r2,16
   6398c:	3809d43a 	srai	r4,r7,16
   63990:	19c0000d 	sth	r7,0(r3)
   63994:	320dc83a 	sub	r6,r6,r8
   63998:	310d883a 	add	r6,r6,r4
   6399c:	1980008d 	sth	r6,2(r3)
   639a0:	300dd43a 	srai	r6,r6,16
   639a4:	18c00104 	addi	r3,r3,4
   639a8:	b43fef2e 	bgeu	r22,r16,63968 <quorem+0x178>
   639ac:	a0800144 	addi	r2,r20,5
   639b0:	1085883a 	add	r2,r2,r2
   639b4:	1085883a 	add	r2,r2,r2
   639b8:	9885883a 	add	r2,r19,r2
   639bc:	10c00017 	ldw	r3,0(r2)
   639c0:	18000b1e 	bne	r3,zero,639f0 <quorem+0x200>
   639c4:	10ffff04 	addi	r3,r2,-4
   639c8:	e0c0082e 	bgeu	fp,r3,639ec <quorem+0x1fc>
   639cc:	10bfff17 	ldw	r2,-4(r2)
   639d0:	10000326 	beq	r2,zero,639e0 <quorem+0x1f0>
   639d4:	00000506 	br	639ec <quorem+0x1fc>
   639d8:	18800017 	ldw	r2,0(r3)
   639dc:	1000031e 	bne	r2,zero,639ec <quorem+0x1fc>
   639e0:	18ffff04 	addi	r3,r3,-4
   639e4:	a53fffc4 	addi	r20,r20,-1
   639e8:	e0fffb36 	bltu	fp,r3,639d8 <quorem+0x1e8>
   639ec:	9d000415 	stw	r20,16(r19)
   639f0:	9005883a 	mov	r2,r18
   639f4:	dfc00d17 	ldw	ra,52(sp)
   639f8:	df000c17 	ldw	fp,48(sp)
   639fc:	ddc00b17 	ldw	r23,44(sp)
   63a00:	dd800a17 	ldw	r22,40(sp)
   63a04:	dd400917 	ldw	r21,36(sp)
   63a08:	dd000817 	ldw	r20,32(sp)
   63a0c:	dcc00717 	ldw	r19,28(sp)
   63a10:	dc800617 	ldw	r18,24(sp)
   63a14:	dc400517 	ldw	r17,20(sp)
   63a18:	dc000417 	ldw	r16,16(sp)
   63a1c:	dec00e04 	addi	sp,sp,56
   63a20:	f800283a 	ret
   63a24:	0005883a 	mov	r2,zero
   63a28:	003ff206 	br	639f4 <quorem+0x204>

00063a2c <_dtoa_r>:
   63a2c:	20801017 	ldw	r2,64(r4)
   63a30:	deffdf04 	addi	sp,sp,-132
   63a34:	dcc01a15 	stw	r19,104(sp)
   63a38:	dc801915 	stw	r18,100(sp)
   63a3c:	dc401815 	stw	r17,96(sp)
   63a40:	dc001715 	stw	r16,92(sp)
   63a44:	dfc02015 	stw	ra,128(sp)
   63a48:	df001f15 	stw	fp,124(sp)
   63a4c:	ddc01e15 	stw	r23,120(sp)
   63a50:	dd801d15 	stw	r22,116(sp)
   63a54:	dd401c15 	stw	r21,112(sp)
   63a58:	dd001b15 	stw	r20,108(sp)
   63a5c:	d9400315 	stw	r5,12(sp)
   63a60:	d9c00415 	stw	r7,16(sp)
   63a64:	2021883a 	mov	r16,r4
   63a68:	3025883a 	mov	r18,r6
   63a6c:	dcc02317 	ldw	r19,140(sp)
   63a70:	3023883a 	mov	r17,r6
   63a74:	10000826 	beq	r2,zero,63a98 <_dtoa_r+0x6c>
   63a78:	20c01117 	ldw	r3,68(r4)
   63a7c:	01800044 	movi	r6,1
   63a80:	100b883a 	mov	r5,r2
   63a84:	30cc983a 	sll	r6,r6,r3
   63a88:	10c00115 	stw	r3,4(r2)
   63a8c:	11800215 	stw	r6,8(r2)
   63a90:	0066dac0 	call	66dac <_Bfree>
   63a94:	80001015 	stw	zero,64(r16)
   63a98:	90002f16 	blt	r18,zero,63b58 <_dtoa_r+0x12c>
   63a9c:	98000015 	stw	zero,0(r19)
   63aa0:	90dffc2c 	andhi	r3,r18,32752
   63aa4:	009ffc34 	movhi	r2,32752
   63aa8:	18801c26 	beq	r3,r2,63b1c <_dtoa_r+0xf0>
   63aac:	d9000317 	ldw	r4,12(sp)
   63ab0:	880b883a 	mov	r5,r17
   63ab4:	000d883a 	mov	r6,zero
   63ab8:	000f883a 	mov	r7,zero
   63abc:	0069fa40 	call	69fa4 <__eqdf2>
   63ac0:	10002c1e 	bne	r2,zero,63b74 <_dtoa_r+0x148>
   63ac4:	d9002217 	ldw	r4,136(sp)
   63ac8:	d9c02417 	ldw	r7,144(sp)
   63acc:	00800044 	movi	r2,1
   63ad0:	20800015 	stw	r2,0(r4)
   63ad4:	38019426 	beq	r7,zero,64128 <_dtoa_r+0x6fc>
   63ad8:	008001f4 	movhi	r2,7
   63adc:	10b72444 	addi	r2,r2,-9071
   63ae0:	38800015 	stw	r2,0(r7)
   63ae4:	15ffffc4 	addi	r23,r2,-1
   63ae8:	b805883a 	mov	r2,r23
   63aec:	dfc02017 	ldw	ra,128(sp)
   63af0:	df001f17 	ldw	fp,124(sp)
   63af4:	ddc01e17 	ldw	r23,120(sp)
   63af8:	dd801d17 	ldw	r22,116(sp)
   63afc:	dd401c17 	ldw	r21,112(sp)
   63b00:	dd001b17 	ldw	r20,108(sp)
   63b04:	dcc01a17 	ldw	r19,104(sp)
   63b08:	dc801917 	ldw	r18,100(sp)
   63b0c:	dc401817 	ldw	r17,96(sp)
   63b10:	dc001717 	ldw	r16,92(sp)
   63b14:	dec02104 	addi	sp,sp,132
   63b18:	f800283a 	ret
   63b1c:	d8c02217 	ldw	r3,136(sp)
   63b20:	d9000317 	ldw	r4,12(sp)
   63b24:	0089c3c4 	movi	r2,9999
   63b28:	18800015 	stw	r2,0(r3)
   63b2c:	20016c26 	beq	r4,zero,640e0 <_dtoa_r+0x6b4>
   63b30:	05c001f4 	movhi	r23,7
   63b34:	bdf73004 	addi	r23,r23,-9024
   63b38:	d9c02417 	ldw	r7,144(sp)
   63b3c:	383fea26 	beq	r7,zero,63ae8 <_dtoa_r+0xbc>
   63b40:	b88000c7 	ldb	r2,3(r23)
   63b44:	10016d1e 	bne	r2,zero,640fc <_dtoa_r+0x6d0>
   63b48:	b88000c4 	addi	r2,r23,3
   63b4c:	d8c02417 	ldw	r3,144(sp)
   63b50:	18800015 	stw	r2,0(r3)
   63b54:	003fe406 	br	63ae8 <_dtoa_r+0xbc>
   63b58:	04600034 	movhi	r17,32768
   63b5c:	8c7fffc4 	addi	r17,r17,-1
   63b60:	9462703a 	and	r17,r18,r17
   63b64:	00800044 	movi	r2,1
   63b68:	98800015 	stw	r2,0(r19)
   63b6c:	8825883a 	mov	r18,r17
   63b70:	003fcb06 	br	63aa0 <_dtoa_r+0x74>
   63b74:	d9400317 	ldw	r5,12(sp)
   63b78:	9028d53a 	srli	r20,r18,20
   63b7c:	d8800204 	addi	r2,sp,8
   63b80:	d8800015 	stw	r2,0(sp)
   63b84:	8009883a 	mov	r4,r16
   63b88:	880d883a 	mov	r6,r17
   63b8c:	d9c00104 	addi	r7,sp,4
   63b90:	00679f80 	call	679f8 <__d2b>
   63b94:	a501ffcc 	andi	r20,r20,2047
   63b98:	1039883a 	mov	fp,r2
   63b9c:	a001591e 	bne	r20,zero,64104 <_dtoa_r+0x6d8>
   63ba0:	dd400217 	ldw	r21,8(sp)
   63ba4:	dd000117 	ldw	r20,4(sp)
   63ba8:	00befbc4 	movi	r2,-1041
   63bac:	ad29883a 	add	r20,r21,r20
   63bb0:	a082d216 	blt	r20,r2,646fc <_dtoa_r+0xcd0>
   63bb4:	d8c00317 	ldw	r3,12(sp)
   63bb8:	013f0384 	movi	r4,-1010
   63bbc:	2509c83a 	sub	r4,r4,r20
   63bc0:	a0810484 	addi	r2,r20,1042
   63bc4:	9124983a 	sll	r18,r18,r4
   63bc8:	1884d83a 	srl	r2,r3,r2
   63bcc:	9088b03a 	or	r4,r18,r2
   63bd0:	006a3280 	call	6a328 <__floatunsidf>
   63bd4:	1009883a 	mov	r4,r2
   63bd8:	017f8434 	movhi	r5,65040
   63bdc:	00800044 	movi	r2,1
   63be0:	194b883a 	add	r5,r3,r5
   63be4:	a53fffc4 	addi	r20,r20,-1
   63be8:	d8800f15 	stw	r2,60(sp)
   63bec:	000d883a 	mov	r6,zero
   63bf0:	01cffe34 	movhi	r7,16376
   63bf4:	0069aac0 	call	69aac <__subdf3>
   63bf8:	1009883a 	mov	r4,r2
   63bfc:	180b883a 	mov	r5,r3
   63c00:	0198dbf4 	movhi	r6,25455
   63c04:	3190d844 	addi	r6,r6,17249
   63c08:	01cff4f4 	movhi	r7,16339
   63c0c:	39e1e9c4 	addi	r7,r7,-30809
   63c10:	0069b0c0 	call	69b0c <__muldf3>
   63c14:	180b883a 	mov	r5,r3
   63c18:	01a2d874 	movhi	r6,35681
   63c1c:	31b22cc4 	addi	r6,r6,-14157
   63c20:	01cff1f4 	movhi	r7,16327
   63c24:	39e28a04 	addi	r7,r7,-30168
   63c28:	1009883a 	mov	r4,r2
   63c2c:	0069a580 	call	69a58 <__adddf3>
   63c30:	a009883a 	mov	r4,r20
   63c34:	1027883a 	mov	r19,r2
   63c38:	1825883a 	mov	r18,r3
   63c3c:	006a1800 	call	6a180 <__floatsidf>
   63c40:	1009883a 	mov	r4,r2
   63c44:	180b883a 	mov	r5,r3
   63c48:	019427f4 	movhi	r6,20639
   63c4c:	319e7ec4 	addi	r6,r6,31227
   63c50:	01cff4f4 	movhi	r7,16339
   63c54:	39d104c4 	addi	r7,r7,17427
   63c58:	0069b0c0 	call	69b0c <__muldf3>
   63c5c:	9809883a 	mov	r4,r19
   63c60:	900b883a 	mov	r5,r18
   63c64:	100d883a 	mov	r6,r2
   63c68:	180f883a 	mov	r7,r3
   63c6c:	0069a580 	call	69a58 <__adddf3>
   63c70:	1009883a 	mov	r4,r2
   63c74:	180b883a 	mov	r5,r3
   63c78:	1027883a 	mov	r19,r2
   63c7c:	1825883a 	mov	r18,r3
   63c80:	006a2540 	call	6a254 <__fixdfsi>
   63c84:	9809883a 	mov	r4,r19
   63c88:	900b883a 	mov	r5,r18
   63c8c:	000d883a 	mov	r6,zero
   63c90:	000f883a 	mov	r7,zero
   63c94:	d8800615 	stw	r2,24(sp)
   63c98:	006a1240 	call	6a124 <__ltdf2>
   63c9c:	10027e16 	blt	r2,zero,64698 <_dtoa_r+0xc6c>
   63ca0:	d8c00617 	ldw	r3,24(sp)
   63ca4:	00800584 	movi	r2,22
   63ca8:	10c26c36 	bltu	r2,r3,6465c <_dtoa_r+0xc30>
   63cac:	180490fa 	slli	r2,r3,3
   63cb0:	00c001f4 	movhi	r3,7
   63cb4:	18f75604 	addi	r3,r3,-8872
   63cb8:	d9800317 	ldw	r6,12(sp)
   63cbc:	1885883a 	add	r2,r3,r2
   63cc0:	11000017 	ldw	r4,0(r2)
   63cc4:	11400117 	ldw	r5,4(r2)
   63cc8:	880f883a 	mov	r7,r17
   63ccc:	006a05c0 	call	6a05c <__gtdf2>
   63cd0:	00828f0e 	bge	zero,r2,64710 <_dtoa_r+0xce4>
   63cd4:	d8800617 	ldw	r2,24(sp)
   63cd8:	d8000d15 	stw	zero,52(sp)
   63cdc:	10bfffc4 	addi	r2,r2,-1
   63ce0:	d8800615 	stw	r2,24(sp)
   63ce4:	ad29c83a 	sub	r20,r21,r20
   63ce8:	a53fffc4 	addi	r20,r20,-1
   63cec:	a0026616 	blt	r20,zero,64688 <_dtoa_r+0xc5c>
   63cf0:	dd000715 	stw	r20,28(sp)
   63cf4:	d8000815 	stw	zero,32(sp)
   63cf8:	d8800617 	ldw	r2,24(sp)
   63cfc:	10025a16 	blt	r2,zero,64668 <_dtoa_r+0xc3c>
   63d00:	d8c00717 	ldw	r3,28(sp)
   63d04:	d8800b15 	stw	r2,44(sp)
   63d08:	d8000a15 	stw	zero,40(sp)
   63d0c:	1887883a 	add	r3,r3,r2
   63d10:	d8c00715 	stw	r3,28(sp)
   63d14:	d9c00417 	ldw	r7,16(sp)
   63d18:	00800244 	movi	r2,9
   63d1c:	11c10536 	bltu	r2,r7,64134 <_dtoa_r+0x708>
   63d20:	00800144 	movi	r2,5
   63d24:	11c4c60e 	bge	r2,r7,65040 <_dtoa_r+0x1614>
   63d28:	39ffff04 	addi	r7,r7,-4
   63d2c:	d9c00415 	stw	r7,16(sp)
   63d30:	0027883a 	mov	r19,zero
   63d34:	d9c00417 	ldw	r7,16(sp)
   63d38:	008000c4 	movi	r2,3
   63d3c:	3883a226 	beq	r7,r2,64bc8 <_dtoa_r+0x119c>
   63d40:	11c2bc16 	blt	r2,r7,64834 <_dtoa_r+0xe08>
   63d44:	00800084 	movi	r2,2
   63d48:	3880fb1e 	bne	r7,r2,64138 <_dtoa_r+0x70c>
   63d4c:	d8000c15 	stw	zero,48(sp)
   63d50:	d9002117 	ldw	r4,132(sp)
   63d54:	0103ae0e 	bge	zero,r4,64c10 <_dtoa_r+0x11e4>
   63d58:	2025883a 	mov	r18,r4
   63d5c:	d9000e15 	stw	r4,56(sp)
   63d60:	d9000915 	stw	r4,36(sp)
   63d64:	80001115 	stw	zero,68(r16)
   63d68:	008005c4 	movi	r2,23
   63d6c:	1484b22e 	bgeu	r2,r18,65038 <_dtoa_r+0x160c>
   63d70:	00c00044 	movi	r3,1
   63d74:	00800104 	movi	r2,4
   63d78:	1085883a 	add	r2,r2,r2
   63d7c:	11000504 	addi	r4,r2,20
   63d80:	180b883a 	mov	r5,r3
   63d84:	18c00044 	addi	r3,r3,1
   63d88:	913ffb2e 	bgeu	r18,r4,63d78 <_dtoa_r+0x34c>
   63d8c:	81401115 	stw	r5,68(r16)
   63d90:	8009883a 	mov	r4,r16
   63d94:	0066d040 	call	66d04 <_Balloc>
   63d98:	102f883a 	mov	r23,r2
   63d9c:	80801015 	stw	r2,64(r16)
   63da0:	00800384 	movi	r2,14
   63da4:	1480f036 	bltu	r2,r18,64168 <_dtoa_r+0x73c>
   63da8:	9800ef26 	beq	r19,zero,64168 <_dtoa_r+0x73c>
   63dac:	d8800617 	ldw	r2,24(sp)
   63db0:	00839c0e 	bge	zero,r2,64c24 <_dtoa_r+0x11f8>
   63db4:	d8c00617 	ldw	r3,24(sp)
   63db8:	108003cc 	andi	r2,r2,15
   63dbc:	100490fa 	slli	r2,r2,3
   63dc0:	182bd13a 	srai	r21,r3,4
   63dc4:	00c001f4 	movhi	r3,7
   63dc8:	18f75604 	addi	r3,r3,-8872
   63dcc:	1885883a 	add	r2,r3,r2
   63dd0:	a8c0040c 	andi	r3,r21,16
   63dd4:	12800017 	ldw	r10,0(r2)
   63dd8:	15800117 	ldw	r22,4(r2)
   63ddc:	18038726 	beq	r3,zero,64bfc <_dtoa_r+0x11d0>
   63de0:	008001f4 	movhi	r2,7
   63de4:	10b74c04 	addi	r2,r2,-8912
   63de8:	11800817 	ldw	r6,32(r2)
   63dec:	11c00917 	ldw	r7,36(r2)
   63df0:	d9000317 	ldw	r4,12(sp)
   63df4:	880b883a 	mov	r5,r17
   63df8:	da801515 	stw	r10,84(sp)
   63dfc:	0069df00 	call	69df0 <__divdf3>
   63e00:	da801517 	ldw	r10,84(sp)
   63e04:	d8801015 	stw	r2,64(sp)
   63e08:	1829883a 	mov	r20,r3
   63e0c:	ad4003cc 	andi	r21,r21,15
   63e10:	048000c4 	movi	r18,3
   63e14:	a8001126 	beq	r21,zero,63e5c <_dtoa_r+0x430>
   63e18:	04c001f4 	movhi	r19,7
   63e1c:	9cf74c04 	addi	r19,r19,-8912
   63e20:	5005883a 	mov	r2,r10
   63e24:	b007883a 	mov	r3,r22
   63e28:	a980004c 	andi	r6,r21,1
   63e2c:	1009883a 	mov	r4,r2
   63e30:	a82bd07a 	srai	r21,r21,1
   63e34:	180b883a 	mov	r5,r3
   63e38:	30000426 	beq	r6,zero,63e4c <_dtoa_r+0x420>
   63e3c:	99800017 	ldw	r6,0(r19)
   63e40:	99c00117 	ldw	r7,4(r19)
   63e44:	94800044 	addi	r18,r18,1
   63e48:	0069b0c0 	call	69b0c <__muldf3>
   63e4c:	9cc00204 	addi	r19,r19,8
   63e50:	a83ff51e 	bne	r21,zero,63e28 <_dtoa_r+0x3fc>
   63e54:	1015883a 	mov	r10,r2
   63e58:	182d883a 	mov	r22,r3
   63e5c:	d9001017 	ldw	r4,64(sp)
   63e60:	a00b883a 	mov	r5,r20
   63e64:	500d883a 	mov	r6,r10
   63e68:	b00f883a 	mov	r7,r22
   63e6c:	0069df00 	call	69df0 <__divdf3>
   63e70:	1027883a 	mov	r19,r2
   63e74:	1829883a 	mov	r20,r3
   63e78:	d8c00d17 	ldw	r3,52(sp)
   63e7c:	18000626 	beq	r3,zero,63e98 <_dtoa_r+0x46c>
   63e80:	9809883a 	mov	r4,r19
   63e84:	a00b883a 	mov	r5,r20
   63e88:	000d883a 	mov	r6,zero
   63e8c:	01cffc34 	movhi	r7,16368
   63e90:	006a1240 	call	6a124 <__ltdf2>
   63e94:	10040e16 	blt	r2,zero,64ed0 <_dtoa_r+0x14a4>
   63e98:	9009883a 	mov	r4,r18
   63e9c:	006a1800 	call	6a180 <__floatsidf>
   63ea0:	1009883a 	mov	r4,r2
   63ea4:	180b883a 	mov	r5,r3
   63ea8:	980d883a 	mov	r6,r19
   63eac:	a00f883a 	mov	r7,r20
   63eb0:	0069b0c0 	call	69b0c <__muldf3>
   63eb4:	1009883a 	mov	r4,r2
   63eb8:	180b883a 	mov	r5,r3
   63ebc:	000d883a 	mov	r6,zero
   63ec0:	01d00734 	movhi	r7,16412
   63ec4:	0069a580 	call	69a58 <__adddf3>
   63ec8:	057f3034 	movhi	r21,64704
   63ecc:	1d6b883a 	add	r21,r3,r21
   63ed0:	d8c00917 	ldw	r3,36(sp)
   63ed4:	1025883a 	mov	r18,r2
   63ed8:	18031f26 	beq	r3,zero,64b58 <_dtoa_r+0x112c>
   63edc:	d8800617 	ldw	r2,24(sp)
   63ee0:	dac00917 	ldw	r11,36(sp)
   63ee4:	d8801315 	stw	r2,76(sp)
   63ee8:	d8c00c17 	ldw	r3,48(sp)
   63eec:	18039026 	beq	r3,zero,64d30 <_dtoa_r+0x1304>
   63ef0:	58bfffc4 	addi	r2,r11,-1
   63ef4:	100490fa 	slli	r2,r2,3
   63ef8:	00c001f4 	movhi	r3,7
   63efc:	18f75604 	addi	r3,r3,-8872
   63f00:	0009883a 	mov	r4,zero
   63f04:	1885883a 	add	r2,r3,r2
   63f08:	11800017 	ldw	r6,0(r2)
   63f0c:	11c00117 	ldw	r7,4(r2)
   63f10:	014ff834 	movhi	r5,16352
   63f14:	dac01615 	stw	r11,88(sp)
   63f18:	0069df00 	call	69df0 <__divdf3>
   63f1c:	900d883a 	mov	r6,r18
   63f20:	a80f883a 	mov	r7,r21
   63f24:	1009883a 	mov	r4,r2
   63f28:	180b883a 	mov	r5,r3
   63f2c:	0069aac0 	call	69aac <__subdf3>
   63f30:	a00b883a 	mov	r5,r20
   63f34:	9809883a 	mov	r4,r19
   63f38:	182b883a 	mov	r21,r3
   63f3c:	d8801015 	stw	r2,64(sp)
   63f40:	006a2540 	call	6a254 <__fixdfsi>
   63f44:	1009883a 	mov	r4,r2
   63f48:	d8801515 	stw	r2,84(sp)
   63f4c:	006a1800 	call	6a180 <__floatsidf>
   63f50:	9809883a 	mov	r4,r19
   63f54:	a00b883a 	mov	r5,r20
   63f58:	100d883a 	mov	r6,r2
   63f5c:	180f883a 	mov	r7,r3
   63f60:	0069aac0 	call	69aac <__subdf3>
   63f64:	da401517 	ldw	r9,84(sp)
   63f68:	d9001017 	ldw	r4,64(sp)
   63f6c:	a80b883a 	mov	r5,r21
   63f70:	4d000c04 	addi	r20,r9,48
   63f74:	bd000005 	stb	r20,0(r23)
   63f78:	100d883a 	mov	r6,r2
   63f7c:	180f883a 	mov	r7,r3
   63f80:	bd800044 	addi	r22,r23,1
   63f84:	1025883a 	mov	r18,r2
   63f88:	1827883a 	mov	r19,r3
   63f8c:	006a05c0 	call	6a05c <__gtdf2>
   63f90:	00842216 	blt	zero,r2,6501c <_dtoa_r+0x15f0>
   63f94:	0009883a 	mov	r4,zero
   63f98:	014ffc34 	movhi	r5,16368
   63f9c:	900d883a 	mov	r6,r18
   63fa0:	980f883a 	mov	r7,r19
   63fa4:	0069aac0 	call	69aac <__subdf3>
   63fa8:	d9001017 	ldw	r4,64(sp)
   63fac:	a80b883a 	mov	r5,r21
   63fb0:	100d883a 	mov	r6,r2
   63fb4:	180f883a 	mov	r7,r3
   63fb8:	006a05c0 	call	6a05c <__gtdf2>
   63fbc:	dac01617 	ldw	r11,88(sp)
   63fc0:	00841316 	blt	zero,r2,65010 <_dtoa_r+0x15e4>
   63fc4:	00800044 	movi	r2,1
   63fc8:	12c0670e 	bge	r2,r11,64168 <_dtoa_r+0x73c>
   63fcc:	bad7883a 	add	r11,r23,r11
   63fd0:	df001115 	stw	fp,68(sp)
   63fd4:	dc401215 	stw	r17,72(sp)
   63fd8:	5839883a 	mov	fp,r11
   63fdc:	dc401017 	ldw	r17,64(sp)
   63fe0:	00000806 	br	64004 <_dtoa_r+0x5d8>
   63fe4:	0069aac0 	call	69aac <__subdf3>
   63fe8:	1009883a 	mov	r4,r2
   63fec:	180b883a 	mov	r5,r3
   63ff0:	880d883a 	mov	r6,r17
   63ff4:	a80f883a 	mov	r7,r21
   63ff8:	006a1240 	call	6a124 <__ltdf2>
   63ffc:	1003ee16 	blt	r2,zero,64fb8 <_dtoa_r+0x158c>
   64000:	b703f126 	beq	r22,fp,64fc8 <_dtoa_r+0x159c>
   64004:	8809883a 	mov	r4,r17
   64008:	a80b883a 	mov	r5,r21
   6400c:	000d883a 	mov	r6,zero
   64010:	01d00934 	movhi	r7,16420
   64014:	0069b0c0 	call	69b0c <__muldf3>
   64018:	000d883a 	mov	r6,zero
   6401c:	01d00934 	movhi	r7,16420
   64020:	9009883a 	mov	r4,r18
   64024:	980b883a 	mov	r5,r19
   64028:	1023883a 	mov	r17,r2
   6402c:	182b883a 	mov	r21,r3
   64030:	0069b0c0 	call	69b0c <__muldf3>
   64034:	180b883a 	mov	r5,r3
   64038:	1009883a 	mov	r4,r2
   6403c:	1825883a 	mov	r18,r3
   64040:	1027883a 	mov	r19,r2
   64044:	006a2540 	call	6a254 <__fixdfsi>
   64048:	1009883a 	mov	r4,r2
   6404c:	1029883a 	mov	r20,r2
   64050:	006a1800 	call	6a180 <__floatsidf>
   64054:	9809883a 	mov	r4,r19
   64058:	900b883a 	mov	r5,r18
   6405c:	100d883a 	mov	r6,r2
   64060:	180f883a 	mov	r7,r3
   64064:	0069aac0 	call	69aac <__subdf3>
   64068:	a5000c04 	addi	r20,r20,48
   6406c:	b5000005 	stb	r20,0(r22)
   64070:	1009883a 	mov	r4,r2
   64074:	180b883a 	mov	r5,r3
   64078:	880d883a 	mov	r6,r17
   6407c:	a80f883a 	mov	r7,r21
   64080:	1025883a 	mov	r18,r2
   64084:	1827883a 	mov	r19,r3
   64088:	006a1240 	call	6a124 <__ltdf2>
   6408c:	b5800044 	addi	r22,r22,1
   64090:	0009883a 	mov	r4,zero
   64094:	014ffc34 	movhi	r5,16368
   64098:	900d883a 	mov	r6,r18
   6409c:	980f883a 	mov	r7,r19
   640a0:	103fd00e 	bge	r2,zero,63fe4 <_dtoa_r+0x5b8>
   640a4:	d9001317 	ldw	r4,76(sp)
   640a8:	df001117 	ldw	fp,68(sp)
   640ac:	d9000615 	stw	r4,24(sp)
   640b0:	8009883a 	mov	r4,r16
   640b4:	e00b883a 	mov	r5,fp
   640b8:	0066dac0 	call	66dac <_Bfree>
   640bc:	d9c00617 	ldw	r7,24(sp)
   640c0:	d8c02217 	ldw	r3,136(sp)
   640c4:	d9002417 	ldw	r4,144(sp)
   640c8:	b0000005 	stb	zero,0(r22)
   640cc:	38800044 	addi	r2,r7,1
   640d0:	18800015 	stw	r2,0(r3)
   640d4:	203e8426 	beq	r4,zero,63ae8 <_dtoa_r+0xbc>
   640d8:	25800015 	stw	r22,0(r4)
   640dc:	003e8206 	br	63ae8 <_dtoa_r+0xbc>
   640e0:	00800434 	movhi	r2,16
   640e4:	10bfffc4 	addi	r2,r2,-1
   640e8:	90a4703a 	and	r18,r18,r2
   640ec:	903e901e 	bne	r18,zero,63b30 <_dtoa_r+0x104>
   640f0:	05c001f4 	movhi	r23,7
   640f4:	bdf72d04 	addi	r23,r23,-9036
   640f8:	003e8f06 	br	63b38 <_dtoa_r+0x10c>
   640fc:	b8800204 	addi	r2,r23,8
   64100:	003e9206 	br	63b4c <_dtoa_r+0x120>
   64104:	01400434 	movhi	r5,16
   64108:	297fffc4 	addi	r5,r5,-1
   6410c:	894a703a 	and	r5,r17,r5
   64110:	d9000317 	ldw	r4,12(sp)
   64114:	294ffc34 	orhi	r5,r5,16368
   64118:	a53f0044 	addi	r20,r20,-1023
   6411c:	dd400217 	ldw	r21,8(sp)
   64120:	d8000f15 	stw	zero,60(sp)
   64124:	003eb106 	br	63bec <_dtoa_r+0x1c0>
   64128:	05c001f4 	movhi	r23,7
   6412c:	bdf72404 	addi	r23,r23,-9072
   64130:	003e6d06 	br	63ae8 <_dtoa_r+0xbc>
   64134:	d8000415 	stw	zero,16(sp)
   64138:	80001115 	stw	zero,68(r16)
   6413c:	8009883a 	mov	r4,r16
   64140:	000b883a 	mov	r5,zero
   64144:	0066d040 	call	66d04 <_Balloc>
   64148:	01ffffc4 	movi	r7,-1
   6414c:	102f883a 	mov	r23,r2
   64150:	80801015 	stw	r2,64(r16)
   64154:	00800044 	movi	r2,1
   64158:	d9c00915 	stw	r7,36(sp)
   6415c:	d8002115 	stw	zero,132(sp)
   64160:	d9c00e15 	stw	r7,56(sp)
   64164:	d8800c15 	stw	r2,48(sp)
   64168:	d8800117 	ldw	r2,4(sp)
   6416c:	10008b16 	blt	r2,zero,6439c <_dtoa_r+0x970>
   64170:	d9000617 	ldw	r4,24(sp)
   64174:	00c00384 	movi	r3,14
   64178:	19008816 	blt	r3,r4,6439c <_dtoa_r+0x970>
   6417c:	200490fa 	slli	r2,r4,3
   64180:	d9c02117 	ldw	r7,132(sp)
   64184:	00c001f4 	movhi	r3,7
   64188:	18f75604 	addi	r3,r3,-8872
   6418c:	1885883a 	add	r2,r3,r2
   64190:	14800017 	ldw	r18,0(r2)
   64194:	14c00117 	ldw	r19,4(r2)
   64198:	3801c916 	blt	r7,zero,648c0 <_dtoa_r+0xe94>
   6419c:	d9000317 	ldw	r4,12(sp)
   641a0:	900d883a 	mov	r6,r18
   641a4:	980f883a 	mov	r7,r19
   641a8:	880b883a 	mov	r5,r17
   641ac:	0069df00 	call	69df0 <__divdf3>
   641b0:	180b883a 	mov	r5,r3
   641b4:	1009883a 	mov	r4,r2
   641b8:	006a2540 	call	6a254 <__fixdfsi>
   641bc:	1009883a 	mov	r4,r2
   641c0:	102b883a 	mov	r21,r2
   641c4:	006a1800 	call	6a180 <__floatsidf>
   641c8:	1009883a 	mov	r4,r2
   641cc:	180b883a 	mov	r5,r3
   641d0:	900d883a 	mov	r6,r18
   641d4:	980f883a 	mov	r7,r19
   641d8:	0069b0c0 	call	69b0c <__muldf3>
   641dc:	d9000317 	ldw	r4,12(sp)
   641e0:	880b883a 	mov	r5,r17
   641e4:	100d883a 	mov	r6,r2
   641e8:	180f883a 	mov	r7,r3
   641ec:	0069aac0 	call	69aac <__subdf3>
   641f0:	d9c00917 	ldw	r7,36(sp)
   641f4:	1009883a 	mov	r4,r2
   641f8:	a8800c04 	addi	r2,r21,48
   641fc:	b8800005 	stb	r2,0(r23)
   64200:	01800044 	movi	r6,1
   64204:	180b883a 	mov	r5,r3
   64208:	2005883a 	mov	r2,r4
   6420c:	bd800044 	addi	r22,r23,1
   64210:	39803726 	beq	r7,r6,642f0 <_dtoa_r+0x8c4>
   64214:	000d883a 	mov	r6,zero
   64218:	01d00934 	movhi	r7,16420
   6421c:	0069b0c0 	call	69b0c <__muldf3>
   64220:	1009883a 	mov	r4,r2
   64224:	180b883a 	mov	r5,r3
   64228:	000d883a 	mov	r6,zero
   6422c:	000f883a 	mov	r7,zero
   64230:	1029883a 	mov	r20,r2
   64234:	1823883a 	mov	r17,r3
   64238:	0069fa40 	call	69fa4 <__eqdf2>
   6423c:	103f9c26 	beq	r2,zero,640b0 <_dtoa_r+0x684>
   64240:	dd400917 	ldw	r21,36(sp)
   64244:	dc000415 	stw	r16,16(sp)
   64248:	00000906 	br	64270 <_dtoa_r+0x844>
   6424c:	0069b0c0 	call	69b0c <__muldf3>
   64250:	1009883a 	mov	r4,r2
   64254:	180b883a 	mov	r5,r3
   64258:	000d883a 	mov	r6,zero
   6425c:	000f883a 	mov	r7,zero
   64260:	1029883a 	mov	r20,r2
   64264:	1823883a 	mov	r17,r3
   64268:	0069fa40 	call	69fa4 <__eqdf2>
   6426c:	10022926 	beq	r2,zero,64b14 <_dtoa_r+0x10e8>
   64270:	900d883a 	mov	r6,r18
   64274:	980f883a 	mov	r7,r19
   64278:	a009883a 	mov	r4,r20
   6427c:	880b883a 	mov	r5,r17
   64280:	0069df00 	call	69df0 <__divdf3>
   64284:	180b883a 	mov	r5,r3
   64288:	1009883a 	mov	r4,r2
   6428c:	006a2540 	call	6a254 <__fixdfsi>
   64290:	1009883a 	mov	r4,r2
   64294:	1021883a 	mov	r16,r2
   64298:	006a1800 	call	6a180 <__floatsidf>
   6429c:	1009883a 	mov	r4,r2
   642a0:	180b883a 	mov	r5,r3
   642a4:	900d883a 	mov	r6,r18
   642a8:	980f883a 	mov	r7,r19
   642ac:	0069b0c0 	call	69b0c <__muldf3>
   642b0:	a009883a 	mov	r4,r20
   642b4:	880b883a 	mov	r5,r17
   642b8:	100d883a 	mov	r6,r2
   642bc:	180f883a 	mov	r7,r3
   642c0:	0069aac0 	call	69aac <__subdf3>
   642c4:	82400c04 	addi	r9,r16,48
   642c8:	b2400005 	stb	r9,0(r22)
   642cc:	b5800044 	addi	r22,r22,1
   642d0:	b5d3c83a 	sub	r9,r22,r23
   642d4:	000d883a 	mov	r6,zero
   642d8:	01d00934 	movhi	r7,16420
   642dc:	1009883a 	mov	r4,r2
   642e0:	180b883a 	mov	r5,r3
   642e4:	aa7fd91e 	bne	r21,r9,6424c <_dtoa_r+0x820>
   642e8:	802b883a 	mov	r21,r16
   642ec:	dc000417 	ldw	r16,16(sp)
   642f0:	1009883a 	mov	r4,r2
   642f4:	180b883a 	mov	r5,r3
   642f8:	100d883a 	mov	r6,r2
   642fc:	180f883a 	mov	r7,r3
   64300:	0069a580 	call	69a58 <__adddf3>
   64304:	9009883a 	mov	r4,r18
   64308:	980b883a 	mov	r5,r19
   6430c:	100d883a 	mov	r6,r2
   64310:	180f883a 	mov	r7,r3
   64314:	1023883a 	mov	r17,r2
   64318:	1829883a 	mov	r20,r3
   6431c:	006a1240 	call	6a124 <__ltdf2>
   64320:	10000816 	blt	r2,zero,64344 <_dtoa_r+0x918>
   64324:	9009883a 	mov	r4,r18
   64328:	980b883a 	mov	r5,r19
   6432c:	880d883a 	mov	r6,r17
   64330:	a00f883a 	mov	r7,r20
   64334:	0069fa40 	call	69fa4 <__eqdf2>
   64338:	103f5d1e 	bne	r2,zero,640b0 <_dtoa_r+0x684>
   6433c:	ad40004c 	andi	r21,r21,1
   64340:	a83f5b26 	beq	r21,zero,640b0 <_dtoa_r+0x684>
   64344:	b53fffc3 	ldbu	r20,-1(r22)
   64348:	b0ffff84 	addi	r3,r22,-2
   6434c:	01400e44 	movi	r5,57
   64350:	00000306 	br	64360 <_dtoa_r+0x934>
   64354:	1d000003 	ldbu	r20,0(r3)
   64358:	102d883a 	mov	r22,r2
   6435c:	18ffffc4 	addi	r3,r3,-1
   64360:	a1003fcc 	andi	r4,r20,255
   64364:	2100201c 	xori	r4,r4,128
   64368:	213fe004 	addi	r4,r4,-128
   6436c:	b0bfffc4 	addi	r2,r22,-1
   64370:	2142ca1e 	bne	r4,r5,64e9c <_dtoa_r+0x1470>
   64374:	b8bff71e 	bne	r23,r2,64354 <_dtoa_r+0x928>
   64378:	d8800617 	ldw	r2,24(sp)
   6437c:	05000c44 	movi	r20,49
   64380:	10800044 	addi	r2,r2,1
   64384:	d8800615 	stw	r2,24(sp)
   64388:	00800c04 	movi	r2,48
   6438c:	b8800005 	stb	r2,0(r23)
   64390:	b805883a 	mov	r2,r23
   64394:	15000005 	stb	r20,0(r2)
   64398:	003f4506 	br	640b0 <_dtoa_r+0x684>
   6439c:	d9c00c17 	ldw	r7,48(sp)
   643a0:	3800c926 	beq	r7,zero,646c8 <_dtoa_r+0xc9c>
   643a4:	d9c00417 	ldw	r7,16(sp)
   643a8:	00c00044 	movi	r3,1
   643ac:	19c16c0e 	bge	r3,r7,64960 <_dtoa_r+0xf34>
   643b0:	d9000917 	ldw	r4,36(sp)
   643b4:	d9c00a17 	ldw	r7,40(sp)
   643b8:	24ffffc4 	addi	r19,r4,-1
   643bc:	3cc20716 	blt	r7,r19,64bdc <_dtoa_r+0x11b0>
   643c0:	3ce7c83a 	sub	r19,r7,r19
   643c4:	d9c00917 	ldw	r7,36(sp)
   643c8:	3802ae16 	blt	r7,zero,64e84 <_dtoa_r+0x1458>
   643cc:	dc800817 	ldw	r18,32(sp)
   643d0:	d8800917 	ldw	r2,36(sp)
   643d4:	d8c00817 	ldw	r3,32(sp)
   643d8:	d9c00717 	ldw	r7,28(sp)
   643dc:	8009883a 	mov	r4,r16
   643e0:	1887883a 	add	r3,r3,r2
   643e4:	388f883a 	add	r7,r7,r2
   643e8:	01400044 	movi	r5,1
   643ec:	d8c00815 	stw	r3,32(sp)
   643f0:	d9c00715 	stw	r7,28(sp)
   643f4:	00671340 	call	67134 <__i2b>
   643f8:	102b883a 	mov	r21,r2
   643fc:	90000a26 	beq	r18,zero,64428 <_dtoa_r+0x9fc>
   64400:	d8800717 	ldw	r2,28(sp)
   64404:	0080080e 	bge	zero,r2,64428 <_dtoa_r+0x9fc>
   64408:	90812b16 	blt	r18,r2,648b8 <_dtoa_r+0xe8c>
   6440c:	d8c00817 	ldw	r3,32(sp)
   64410:	d9000717 	ldw	r4,28(sp)
   64414:	90a5c83a 	sub	r18,r18,r2
   64418:	1887c83a 	sub	r3,r3,r2
   6441c:	2089c83a 	sub	r4,r4,r2
   64420:	d8c00815 	stw	r3,32(sp)
   64424:	d9000715 	stw	r4,28(sp)
   64428:	d9c00a17 	ldw	r7,40(sp)
   6442c:	01c0140e 	bge	zero,r7,64480 <_dtoa_r+0xa54>
   64430:	d8800c17 	ldw	r2,48(sp)
   64434:	1001de26 	beq	r2,zero,64bb0 <_dtoa_r+0x1184>
   64438:	04c00e0e 	bge	zero,r19,64474 <_dtoa_r+0xa48>
   6443c:	a80b883a 	mov	r5,r21
   64440:	8009883a 	mov	r4,r16
   64444:	980d883a 	mov	r6,r19
   64448:	00673c80 	call	673c8 <__pow5mult>
   6444c:	e00d883a 	mov	r6,fp
   64450:	8009883a 	mov	r4,r16
   64454:	100b883a 	mov	r5,r2
   64458:	102b883a 	mov	r21,r2
   6445c:	00671700 	call	67170 <__multiply>
   64460:	1029883a 	mov	r20,r2
   64464:	e00b883a 	mov	r5,fp
   64468:	8009883a 	mov	r4,r16
   6446c:	0066dac0 	call	66dac <_Bfree>
   64470:	a039883a 	mov	fp,r20
   64474:	d8c00a17 	ldw	r3,40(sp)
   64478:	1ccdc83a 	sub	r6,r3,r19
   6447c:	3001291e 	bne	r6,zero,64924 <_dtoa_r+0xef8>
   64480:	8009883a 	mov	r4,r16
   64484:	01400044 	movi	r5,1
   64488:	00671340 	call	67134 <__i2b>
   6448c:	d9000b17 	ldw	r4,44(sp)
   64490:	1029883a 	mov	r20,r2
   64494:	0100050e 	bge	zero,r4,644ac <_dtoa_r+0xa80>
   64498:	d9800b17 	ldw	r6,44(sp)
   6449c:	8009883a 	mov	r4,r16
   644a0:	100b883a 	mov	r5,r2
   644a4:	00673c80 	call	673c8 <__pow5mult>
   644a8:	1029883a 	mov	r20,r2
   644ac:	d9c00417 	ldw	r7,16(sp)
   644b0:	00800044 	movi	r2,1
   644b4:	11c0f00e 	bge	r2,r7,64878 <_dtoa_r+0xe4c>
   644b8:	0023883a 	mov	r17,zero
   644bc:	d8800b17 	ldw	r2,44(sp)
   644c0:	1001741e 	bne	r2,zero,64a94 <_dtoa_r+0x1068>
   644c4:	00800044 	movi	r2,1
   644c8:	d8c00717 	ldw	r3,28(sp)
   644cc:	10c5883a 	add	r2,r2,r3
   644d0:	108007cc 	andi	r2,r2,31
   644d4:	10008026 	beq	r2,zero,646d8 <_dtoa_r+0xcac>
   644d8:	01000804 	movi	r4,32
   644dc:	2089c83a 	sub	r4,r4,r2
   644e0:	00c00104 	movi	r3,4
   644e4:	1902d00e 	bge	r3,r4,65028 <_dtoa_r+0x15fc>
   644e8:	d9000817 	ldw	r4,32(sp)
   644ec:	d9c00717 	ldw	r7,28(sp)
   644f0:	00c00704 	movi	r3,28
   644f4:	1885c83a 	sub	r2,r3,r2
   644f8:	2089883a 	add	r4,r4,r2
   644fc:	388f883a 	add	r7,r7,r2
   64500:	d9000815 	stw	r4,32(sp)
   64504:	90a5883a 	add	r18,r18,r2
   64508:	d9c00715 	stw	r7,28(sp)
   6450c:	d9c00817 	ldw	r7,32(sp)
   64510:	01c0050e 	bge	zero,r7,64528 <_dtoa_r+0xafc>
   64514:	e00b883a 	mov	r5,fp
   64518:	8009883a 	mov	r4,r16
   6451c:	380d883a 	mov	r6,r7
   64520:	00674f40 	call	674f4 <__lshift>
   64524:	1039883a 	mov	fp,r2
   64528:	d8800717 	ldw	r2,28(sp)
   6452c:	0080050e 	bge	zero,r2,64544 <_dtoa_r+0xb18>
   64530:	a00b883a 	mov	r5,r20
   64534:	8009883a 	mov	r4,r16
   64538:	100d883a 	mov	r6,r2
   6453c:	00674f40 	call	674f4 <__lshift>
   64540:	1029883a 	mov	r20,r2
   64544:	d8c00d17 	ldw	r3,52(sp)
   64548:	1801401e 	bne	r3,zero,64a4c <_dtoa_r+0x1020>
   6454c:	d8800917 	ldw	r2,36(sp)
   64550:	00815a0e 	bge	zero,r2,64abc <_dtoa_r+0x1090>
   64554:	d8c00c17 	ldw	r3,48(sp)
   64558:	18006f1e 	bne	r3,zero,64718 <_dtoa_r+0xcec>
   6455c:	b823883a 	mov	r17,r23
   64560:	dc800917 	ldw	r18,36(sp)
   64564:	00000206 	br	64570 <_dtoa_r+0xb44>
   64568:	0066dd40 	call	66dd4 <__multadd>
   6456c:	1039883a 	mov	fp,r2
   64570:	e009883a 	mov	r4,fp
   64574:	a00b883a 	mov	r5,r20
   64578:	00637f00 	call	637f0 <quorem>
   6457c:	10800c04 	addi	r2,r2,48
   64580:	88800005 	stb	r2,0(r17)
   64584:	8c400044 	addi	r17,r17,1
   64588:	8dc7c83a 	sub	r3,r17,r23
   6458c:	8009883a 	mov	r4,r16
   64590:	e00b883a 	mov	r5,fp
   64594:	01800284 	movi	r6,10
   64598:	000f883a 	mov	r7,zero
   6459c:	1cbff216 	blt	r3,r18,64568 <_dtoa_r+0xb3c>
   645a0:	dd800917 	ldw	r22,36(sp)
   645a4:	1007883a 	mov	r3,r2
   645a8:	05823a0e 	bge	zero,r22,64e94 <_dtoa_r+0x1468>
   645ac:	bdad883a 	add	r22,r23,r22
   645b0:	0023883a 	mov	r17,zero
   645b4:	e00b883a 	mov	r5,fp
   645b8:	01800044 	movi	r6,1
   645bc:	8009883a 	mov	r4,r16
   645c0:	d8c01515 	stw	r3,84(sp)
   645c4:	00674f40 	call	674f4 <__lshift>
   645c8:	1009883a 	mov	r4,r2
   645cc:	a00b883a 	mov	r5,r20
   645d0:	1039883a 	mov	fp,r2
   645d4:	00676500 	call	67650 <__mcmp>
   645d8:	d8c01517 	ldw	r3,84(sp)
   645dc:	0080d60e 	bge	zero,r2,64938 <_dtoa_r+0xf0c>
   645e0:	b13fffc3 	ldbu	r4,-1(r22)
   645e4:	b0ffff84 	addi	r3,r22,-2
   645e8:	01800e44 	movi	r6,57
   645ec:	00000306 	br	645fc <_dtoa_r+0xbd0>
   645f0:	19000003 	ldbu	r4,0(r3)
   645f4:	102d883a 	mov	r22,r2
   645f8:	18ffffc4 	addi	r3,r3,-1
   645fc:	21403fcc 	andi	r5,r4,255
   64600:	2940201c 	xori	r5,r5,128
   64604:	297fe004 	addi	r5,r5,-128
   64608:	b0bfffc4 	addi	r2,r22,-1
   6460c:	2981a71e 	bne	r5,r6,64cac <_dtoa_r+0x1280>
   64610:	b8bff71e 	bne	r23,r2,645f0 <_dtoa_r+0xbc4>
   64614:	d8800617 	ldw	r2,24(sp)
   64618:	10800044 	addi	r2,r2,1
   6461c:	d8800615 	stw	r2,24(sp)
   64620:	00800c44 	movi	r2,49
   64624:	b8800005 	stb	r2,0(r23)
   64628:	8009883a 	mov	r4,r16
   6462c:	a00b883a 	mov	r5,r20
   64630:	0066dac0 	call	66dac <_Bfree>
   64634:	a83e9e26 	beq	r21,zero,640b0 <_dtoa_r+0x684>
   64638:	88000426 	beq	r17,zero,6464c <_dtoa_r+0xc20>
   6463c:	8d400326 	beq	r17,r21,6464c <_dtoa_r+0xc20>
   64640:	8009883a 	mov	r4,r16
   64644:	880b883a 	mov	r5,r17
   64648:	0066dac0 	call	66dac <_Bfree>
   6464c:	8009883a 	mov	r4,r16
   64650:	a80b883a 	mov	r5,r21
   64654:	0066dac0 	call	66dac <_Bfree>
   64658:	003e9506 	br	640b0 <_dtoa_r+0x684>
   6465c:	00c00044 	movi	r3,1
   64660:	d8c00d15 	stw	r3,52(sp)
   64664:	003d9f06 	br	63ce4 <_dtoa_r+0x2b8>
   64668:	d9000817 	ldw	r4,32(sp)
   6466c:	d8800617 	ldw	r2,24(sp)
   64670:	d8000b15 	stw	zero,44(sp)
   64674:	2089c83a 	sub	r4,r4,r2
   64678:	0087c83a 	sub	r3,zero,r2
   6467c:	d9000815 	stw	r4,32(sp)
   64680:	d8c00a15 	stw	r3,40(sp)
   64684:	003da306 	br	63d14 <_dtoa_r+0x2e8>
   64688:	0529c83a 	sub	r20,zero,r20
   6468c:	dd000815 	stw	r20,32(sp)
   64690:	d8000715 	stw	zero,28(sp)
   64694:	003d9806 	br	63cf8 <_dtoa_r+0x2cc>
   64698:	d9000617 	ldw	r4,24(sp)
   6469c:	006a1800 	call	6a180 <__floatsidf>
   646a0:	1009883a 	mov	r4,r2
   646a4:	180b883a 	mov	r5,r3
   646a8:	980d883a 	mov	r6,r19
   646ac:	900f883a 	mov	r7,r18
   646b0:	006a0000 	call	6a000 <__nedf2>
   646b4:	103d7a26 	beq	r2,zero,63ca0 <_dtoa_r+0x274>
   646b8:	d8800617 	ldw	r2,24(sp)
   646bc:	10bfffc4 	addi	r2,r2,-1
   646c0:	d8800615 	stw	r2,24(sp)
   646c4:	003d7606 	br	63ca0 <_dtoa_r+0x274>
   646c8:	dcc00a17 	ldw	r19,40(sp)
   646cc:	dc800817 	ldw	r18,32(sp)
   646d0:	002b883a 	mov	r21,zero
   646d4:	003f4906 	br	643fc <_dtoa_r+0x9d0>
   646d8:	00800704 	movi	r2,28
   646dc:	d8c00817 	ldw	r3,32(sp)
   646e0:	d9000717 	ldw	r4,28(sp)
   646e4:	90a5883a 	add	r18,r18,r2
   646e8:	1887883a 	add	r3,r3,r2
   646ec:	2089883a 	add	r4,r4,r2
   646f0:	d8c00815 	stw	r3,32(sp)
   646f4:	d9000715 	stw	r4,28(sp)
   646f8:	003f8406 	br	6450c <_dtoa_r+0xae0>
   646fc:	d9c00317 	ldw	r7,12(sp)
   64700:	013efb84 	movi	r4,-1042
   64704:	2509c83a 	sub	r4,r4,r20
   64708:	3908983a 	sll	r4,r7,r4
   6470c:	003d3006 	br	63bd0 <_dtoa_r+0x1a4>
   64710:	d8000d15 	stw	zero,52(sp)
   64714:	003d7306 	br	63ce4 <_dtoa_r+0x2b8>
   64718:	0480050e 	bge	zero,r18,64730 <_dtoa_r+0xd04>
   6471c:	a80b883a 	mov	r5,r21
   64720:	8009883a 	mov	r4,r16
   64724:	900d883a 	mov	r6,r18
   64728:	00674f40 	call	674f4 <__lshift>
   6472c:	102b883a 	mov	r21,r2
   64730:	8801611e 	bne	r17,zero,64cb8 <_dtoa_r+0x128c>
   64734:	a827883a 	mov	r19,r21
   64738:	d8c00317 	ldw	r3,12(sp)
   6473c:	d9000917 	ldw	r4,36(sp)
   64740:	b8bfffc4 	addi	r2,r23,-1
   64744:	18c0004c 	andi	r3,r3,1
   64748:	1105883a 	add	r2,r2,r4
   6474c:	b825883a 	mov	r18,r23
   64750:	d8800515 	stw	r2,20(sp)
   64754:	a823883a 	mov	r17,r21
   64758:	d8c00315 	stw	r3,12(sp)
   6475c:	ddc00715 	stw	r23,28(sp)
   64760:	e009883a 	mov	r4,fp
   64764:	a00b883a 	mov	r5,r20
   64768:	00637f00 	call	637f0 <quorem>
   6476c:	e009883a 	mov	r4,fp
   64770:	880b883a 	mov	r5,r17
   64774:	102d883a 	mov	r22,r2
   64778:	00676500 	call	67650 <__mcmp>
   6477c:	980d883a 	mov	r6,r19
   64780:	8009883a 	mov	r4,r16
   64784:	a00b883a 	mov	r5,r20
   64788:	102b883a 	mov	r21,r2
   6478c:	00676a80 	call	676a8 <__mdiff>
   64790:	100d883a 	mov	r6,r2
   64794:	10800317 	ldw	r2,12(r2)
   64798:	b5c00c04 	addi	r23,r22,48
   6479c:	10008c26 	beq	r2,zero,649d0 <_dtoa_r+0xfa4>
   647a0:	8009883a 	mov	r4,r16
   647a4:	300b883a 	mov	r5,r6
   647a8:	0066dac0 	call	66dac <_Bfree>
   647ac:	00800044 	movi	r2,1
   647b0:	a8007116 	blt	r21,zero,64978 <_dtoa_r+0xf4c>
   647b4:	a800041e 	bne	r21,zero,647c8 <_dtoa_r+0xd9c>
   647b8:	d9c00417 	ldw	r7,16(sp)
   647bc:	3800021e 	bne	r7,zero,647c8 <_dtoa_r+0xd9c>
   647c0:	d8c00317 	ldw	r3,12(sp)
   647c4:	18006c26 	beq	r3,zero,64978 <_dtoa_r+0xf4c>
   647c8:	00814c16 	blt	zero,r2,64cfc <_dtoa_r+0x12d0>
   647cc:	d8c00517 	ldw	r3,20(sp)
   647d0:	95400044 	addi	r21,r18,1
   647d4:	95c00005 	stb	r23,0(r18)
   647d8:	a82d883a 	mov	r22,r21
   647dc:	90c14d26 	beq	r18,r3,64d14 <_dtoa_r+0x12e8>
   647e0:	e00b883a 	mov	r5,fp
   647e4:	8009883a 	mov	r4,r16
   647e8:	01800284 	movi	r6,10
   647ec:	000f883a 	mov	r7,zero
   647f0:	0066dd40 	call	66dd4 <__multadd>
   647f4:	1039883a 	mov	fp,r2
   647f8:	8cc08b26 	beq	r17,r19,64a28 <_dtoa_r+0xffc>
   647fc:	880b883a 	mov	r5,r17
   64800:	01800284 	movi	r6,10
   64804:	000f883a 	mov	r7,zero
   64808:	8009883a 	mov	r4,r16
   6480c:	0066dd40 	call	66dd4 <__multadd>
   64810:	980b883a 	mov	r5,r19
   64814:	8009883a 	mov	r4,r16
   64818:	01800284 	movi	r6,10
   6481c:	000f883a 	mov	r7,zero
   64820:	1023883a 	mov	r17,r2
   64824:	0066dd40 	call	66dd4 <__multadd>
   64828:	1027883a 	mov	r19,r2
   6482c:	a825883a 	mov	r18,r21
   64830:	003fcb06 	br	64760 <_dtoa_r+0xd34>
   64834:	d9c00417 	ldw	r7,16(sp)
   64838:	00800104 	movi	r2,4
   6483c:	3880e426 	beq	r7,r2,64bd0 <_dtoa_r+0x11a4>
   64840:	00800144 	movi	r2,5
   64844:	38be3c1e 	bne	r7,r2,64138 <_dtoa_r+0x70c>
   64848:	00c00044 	movi	r3,1
   6484c:	d8c00c15 	stw	r3,48(sp)
   64850:	d9c02117 	ldw	r7,132(sp)
   64854:	d8800617 	ldw	r2,24(sp)
   64858:	388f883a 	add	r7,r7,r2
   6485c:	3c800044 	addi	r18,r7,1
   64860:	d9c00e15 	stw	r7,56(sp)
   64864:	dc800915 	stw	r18,36(sp)
   64868:	04bd3e16 	blt	zero,r18,63d64 <_dtoa_r+0x338>
   6486c:	80001115 	stw	zero,68(r16)
   64870:	000b883a 	mov	r5,zero
   64874:	003d4606 	br	63d90 <_dtoa_r+0x364>
   64878:	d8c00317 	ldw	r3,12(sp)
   6487c:	183f0e1e 	bne	r3,zero,644b8 <_dtoa_r+0xa8c>
   64880:	00c00434 	movhi	r3,16
   64884:	18ffffc4 	addi	r3,r3,-1
   64888:	88c6703a 	and	r3,r17,r3
   6488c:	183f0a1e 	bne	r3,zero,644b8 <_dtoa_r+0xa8c>
   64890:	8c5ffc2c 	andhi	r17,r17,32752
   64894:	883f0826 	beq	r17,zero,644b8 <_dtoa_r+0xa8c>
   64898:	d9000817 	ldw	r4,32(sp)
   6489c:	d9c00717 	ldw	r7,28(sp)
   648a0:	1023883a 	mov	r17,r2
   648a4:	2089883a 	add	r4,r4,r2
   648a8:	388f883a 	add	r7,r7,r2
   648ac:	d9000815 	stw	r4,32(sp)
   648b0:	d9c00715 	stw	r7,28(sp)
   648b4:	003f0106 	br	644bc <_dtoa_r+0xa90>
   648b8:	9005883a 	mov	r2,r18
   648bc:	003ed306 	br	6440c <_dtoa_r+0x9e0>
   648c0:	d8800917 	ldw	r2,36(sp)
   648c4:	00be3516 	blt	zero,r2,6419c <_dtoa_r+0x770>
   648c8:	1000b61e 	bne	r2,zero,64ba4 <_dtoa_r+0x1178>
   648cc:	9009883a 	mov	r4,r18
   648d0:	980b883a 	mov	r5,r19
   648d4:	000d883a 	mov	r6,zero
   648d8:	01d00534 	movhi	r7,16404
   648dc:	0069b0c0 	call	69b0c <__muldf3>
   648e0:	d9800317 	ldw	r6,12(sp)
   648e4:	1009883a 	mov	r4,r2
   648e8:	180b883a 	mov	r5,r3
   648ec:	880f883a 	mov	r7,r17
   648f0:	006a0c00 	call	6a0c0 <__gedf2>
   648f4:	0029883a 	mov	r20,zero
   648f8:	002b883a 	mov	r21,zero
   648fc:	10007e16 	blt	r2,zero,64af8 <_dtoa_r+0x10cc>
   64900:	d8802117 	ldw	r2,132(sp)
   64904:	b82d883a 	mov	r22,r23
   64908:	0084303a 	nor	r2,zero,r2
   6490c:	d8800615 	stw	r2,24(sp)
   64910:	8009883a 	mov	r4,r16
   64914:	a00b883a 	mov	r5,r20
   64918:	0066dac0 	call	66dac <_Bfree>
   6491c:	a83f4b1e 	bne	r21,zero,6464c <_dtoa_r+0xc20>
   64920:	003de306 	br	640b0 <_dtoa_r+0x684>
   64924:	e00b883a 	mov	r5,fp
   64928:	8009883a 	mov	r4,r16
   6492c:	00673c80 	call	673c8 <__pow5mult>
   64930:	1039883a 	mov	fp,r2
   64934:	003ed206 	br	64480 <_dtoa_r+0xa54>
   64938:	1000021e 	bne	r2,zero,64944 <_dtoa_r+0xf18>
   6493c:	18c0004c 	andi	r3,r3,1
   64940:	183f271e 	bne	r3,zero,645e0 <_dtoa_r+0xbb4>
   64944:	01000c04 	movi	r4,48
   64948:	00000106 	br	64950 <_dtoa_r+0xf24>
   6494c:	102d883a 	mov	r22,r2
   64950:	b0bfffc4 	addi	r2,r22,-1
   64954:	10c00007 	ldb	r3,0(r2)
   64958:	193ffc26 	beq	r3,r4,6494c <_dtoa_r+0xf20>
   6495c:	003f3206 	br	64628 <_dtoa_r+0xbfc>
   64960:	d8c00f17 	ldw	r3,60(sp)
   64964:	18015026 	beq	r3,zero,64ea8 <_dtoa_r+0x147c>
   64968:	10810cc4 	addi	r2,r2,1075
   6496c:	dcc00a17 	ldw	r19,40(sp)
   64970:	dc800817 	ldw	r18,32(sp)
   64974:	003e9706 	br	643d4 <_dtoa_r+0x9a8>
   64978:	b807883a 	mov	r3,r23
   6497c:	182b883a 	mov	r21,r3
   64980:	ddc00717 	ldw	r23,28(sp)
   64984:	00800e0e 	bge	zero,r2,649c0 <_dtoa_r+0xf94>
   64988:	e00b883a 	mov	r5,fp
   6498c:	01800044 	movi	r6,1
   64990:	8009883a 	mov	r4,r16
   64994:	d8c01515 	stw	r3,84(sp)
   64998:	00674f40 	call	674f4 <__lshift>
   6499c:	1009883a 	mov	r4,r2
   649a0:	a00b883a 	mov	r5,r20
   649a4:	1039883a 	mov	fp,r2
   649a8:	00676500 	call	67650 <__mcmp>
   649ac:	d8c01517 	ldw	r3,84(sp)
   649b0:	0081880e 	bge	zero,r2,64fd4 <_dtoa_r+0x15a8>
   649b4:	00800e44 	movi	r2,57
   649b8:	b0c00c44 	addi	r3,r22,49
   649bc:	a8816326 	beq	r21,r2,64f4c <_dtoa_r+0x1520>
   649c0:	90c00005 	stb	r3,0(r18)
   649c4:	95800044 	addi	r22,r18,1
   649c8:	982b883a 	mov	r21,r19
   649cc:	003f1606 	br	64628 <_dtoa_r+0xbfc>
   649d0:	300b883a 	mov	r5,r6
   649d4:	e009883a 	mov	r4,fp
   649d8:	d9801515 	stw	r6,84(sp)
   649dc:	00676500 	call	67650 <__mcmp>
   649e0:	d9801517 	ldw	r6,84(sp)
   649e4:	8009883a 	mov	r4,r16
   649e8:	d8801515 	stw	r2,84(sp)
   649ec:	300b883a 	mov	r5,r6
   649f0:	0066dac0 	call	66dac <_Bfree>
   649f4:	d8801517 	ldw	r2,84(sp)
   649f8:	103f6d1e 	bne	r2,zero,647b0 <_dtoa_r+0xd84>
   649fc:	d9c00417 	ldw	r7,16(sp)
   64a00:	383f6b1e 	bne	r7,zero,647b0 <_dtoa_r+0xd84>
   64a04:	d8c00317 	ldw	r3,12(sp)
   64a08:	183f691e 	bne	r3,zero,647b0 <_dtoa_r+0xd84>
   64a0c:	b807883a 	mov	r3,r23
   64a10:	00800e44 	movi	r2,57
   64a14:	ddc00717 	ldw	r23,28(sp)
   64a18:	18814c26 	beq	r3,r2,64f4c <_dtoa_r+0x1520>
   64a1c:	057fe80e 	bge	zero,r21,649c0 <_dtoa_r+0xf94>
   64a20:	b0c00c44 	addi	r3,r22,49
   64a24:	003fe606 	br	649c0 <_dtoa_r+0xf94>
   64a28:	880b883a 	mov	r5,r17
   64a2c:	8009883a 	mov	r4,r16
   64a30:	01800284 	movi	r6,10
   64a34:	000f883a 	mov	r7,zero
   64a38:	0066dd40 	call	66dd4 <__multadd>
   64a3c:	1023883a 	mov	r17,r2
   64a40:	1027883a 	mov	r19,r2
   64a44:	a825883a 	mov	r18,r21
   64a48:	003f4506 	br	64760 <_dtoa_r+0xd34>
   64a4c:	e009883a 	mov	r4,fp
   64a50:	a00b883a 	mov	r5,r20
   64a54:	00676500 	call	67650 <__mcmp>
   64a58:	103ebc0e 	bge	r2,zero,6454c <_dtoa_r+0xb20>
   64a5c:	e00b883a 	mov	r5,fp
   64a60:	8009883a 	mov	r4,r16
   64a64:	01800284 	movi	r6,10
   64a68:	000f883a 	mov	r7,zero
   64a6c:	0066dd40 	call	66dd4 <__multadd>
   64a70:	1039883a 	mov	fp,r2
   64a74:	d8800617 	ldw	r2,24(sp)
   64a78:	d8c00c17 	ldw	r3,48(sp)
   64a7c:	10bfffc4 	addi	r2,r2,-1
   64a80:	d8800615 	stw	r2,24(sp)
   64a84:	1801571e 	bne	r3,zero,64fe4 <_dtoa_r+0x15b8>
   64a88:	d9c00e17 	ldw	r7,56(sp)
   64a8c:	d9c00915 	stw	r7,36(sp)
   64a90:	003eae06 	br	6454c <_dtoa_r+0xb20>
   64a94:	a0800417 	ldw	r2,16(r20)
   64a98:	10800104 	addi	r2,r2,4
   64a9c:	1085883a 	add	r2,r2,r2
   64aa0:	1085883a 	add	r2,r2,r2
   64aa4:	a085883a 	add	r2,r20,r2
   64aa8:	11000017 	ldw	r4,0(r2)
   64aac:	006701c0 	call	6701c <__hi0bits>
   64ab0:	00c00804 	movi	r3,32
   64ab4:	1885c83a 	sub	r2,r3,r2
   64ab8:	003e8306 	br	644c8 <_dtoa_r+0xa9c>
   64abc:	d9c00417 	ldw	r7,16(sp)
   64ac0:	00800084 	movi	r2,2
   64ac4:	11fea30e 	bge	r2,r7,64554 <_dtoa_r+0xb28>
   64ac8:	d8800917 	ldw	r2,36(sp)
   64acc:	103f8c1e 	bne	r2,zero,64900 <_dtoa_r+0xed4>
   64ad0:	a00b883a 	mov	r5,r20
   64ad4:	8009883a 	mov	r4,r16
   64ad8:	01800144 	movi	r6,5
   64adc:	000f883a 	mov	r7,zero
   64ae0:	0066dd40 	call	66dd4 <__multadd>
   64ae4:	e009883a 	mov	r4,fp
   64ae8:	100b883a 	mov	r5,r2
   64aec:	1029883a 	mov	r20,r2
   64af0:	00676500 	call	67650 <__mcmp>
   64af4:	00bf820e 	bge	zero,r2,64900 <_dtoa_r+0xed4>
   64af8:	00800c44 	movi	r2,49
   64afc:	b8800005 	stb	r2,0(r23)
   64b00:	d8800617 	ldw	r2,24(sp)
   64b04:	bd800044 	addi	r22,r23,1
   64b08:	10800044 	addi	r2,r2,1
   64b0c:	d8800615 	stw	r2,24(sp)
   64b10:	003f7f06 	br	64910 <_dtoa_r+0xee4>
   64b14:	dc000417 	ldw	r16,16(sp)
   64b18:	003d6506 	br	640b0 <_dtoa_r+0x684>
   64b1c:	9009883a 	mov	r4,r18
   64b20:	006a1800 	call	6a180 <__floatsidf>
   64b24:	1009883a 	mov	r4,r2
   64b28:	180b883a 	mov	r5,r3
   64b2c:	980d883a 	mov	r6,r19
   64b30:	a00f883a 	mov	r7,r20
   64b34:	0069b0c0 	call	69b0c <__muldf3>
   64b38:	1009883a 	mov	r4,r2
   64b3c:	180b883a 	mov	r5,r3
   64b40:	000d883a 	mov	r6,zero
   64b44:	01d00734 	movhi	r7,16412
   64b48:	0069a580 	call	69a58 <__adddf3>
   64b4c:	057f3034 	movhi	r21,64704
   64b50:	1025883a 	mov	r18,r2
   64b54:	1d6b883a 	add	r21,r3,r21
   64b58:	9809883a 	mov	r4,r19
   64b5c:	a00b883a 	mov	r5,r20
   64b60:	000d883a 	mov	r6,zero
   64b64:	01d00534 	movhi	r7,16404
   64b68:	0069aac0 	call	69aac <__subdf3>
   64b6c:	1009883a 	mov	r4,r2
   64b70:	180b883a 	mov	r5,r3
   64b74:	900d883a 	mov	r6,r18
   64b78:	a80f883a 	mov	r7,r21
   64b7c:	1027883a 	mov	r19,r2
   64b80:	1829883a 	mov	r20,r3
   64b84:	006a05c0 	call	6a05c <__gtdf2>
   64b88:	00806616 	blt	zero,r2,64d24 <_dtoa_r+0x12f8>
   64b8c:	a9e0003c 	xorhi	r7,r21,32768
   64b90:	9809883a 	mov	r4,r19
   64b94:	a00b883a 	mov	r5,r20
   64b98:	900d883a 	mov	r6,r18
   64b9c:	006a1240 	call	6a124 <__ltdf2>
   64ba0:	103d710e 	bge	r2,zero,64168 <_dtoa_r+0x73c>
   64ba4:	0029883a 	mov	r20,zero
   64ba8:	002b883a 	mov	r21,zero
   64bac:	003f5406 	br	64900 <_dtoa_r+0xed4>
   64bb0:	d9800a17 	ldw	r6,40(sp)
   64bb4:	e00b883a 	mov	r5,fp
   64bb8:	8009883a 	mov	r4,r16
   64bbc:	00673c80 	call	673c8 <__pow5mult>
   64bc0:	1039883a 	mov	fp,r2
   64bc4:	003e2e06 	br	64480 <_dtoa_r+0xa54>
   64bc8:	d8000c15 	stw	zero,48(sp)
   64bcc:	003f2006 	br	64850 <_dtoa_r+0xe24>
   64bd0:	00800044 	movi	r2,1
   64bd4:	d8800c15 	stw	r2,48(sp)
   64bd8:	003c5d06 	br	63d50 <_dtoa_r+0x324>
   64bdc:	d8c00a17 	ldw	r3,40(sp)
   64be0:	d9000b17 	ldw	r4,44(sp)
   64be4:	dcc00a15 	stw	r19,40(sp)
   64be8:	98c5c83a 	sub	r2,r19,r3
   64bec:	2089883a 	add	r4,r4,r2
   64bf0:	d9000b15 	stw	r4,44(sp)
   64bf4:	0027883a 	mov	r19,zero
   64bf8:	003df206 	br	643c4 <_dtoa_r+0x998>
   64bfc:	d9000317 	ldw	r4,12(sp)
   64c00:	8829883a 	mov	r20,r17
   64c04:	04800084 	movi	r18,2
   64c08:	d9001015 	stw	r4,64(sp)
   64c0c:	003c8106 	br	63e14 <_dtoa_r+0x3e8>
   64c10:	04800044 	movi	r18,1
   64c14:	dc800e15 	stw	r18,56(sp)
   64c18:	dc800915 	stw	r18,36(sp)
   64c1c:	dc802115 	stw	r18,132(sp)
   64c20:	003f1206 	br	6486c <_dtoa_r+0xe40>
   64c24:	d8800617 	ldw	r2,24(sp)
   64c28:	00abc83a 	sub	r21,zero,r2
   64c2c:	a800a426 	beq	r21,zero,64ec0 <_dtoa_r+0x1494>
   64c30:	a88003cc 	andi	r2,r21,15
   64c34:	100490fa 	slli	r2,r2,3
   64c38:	00c001f4 	movhi	r3,7
   64c3c:	18f75604 	addi	r3,r3,-8872
   64c40:	d9000317 	ldw	r4,12(sp)
   64c44:	1885883a 	add	r2,r3,r2
   64c48:	11800017 	ldw	r6,0(r2)
   64c4c:	11c00117 	ldw	r7,4(r2)
   64c50:	a82bd13a 	srai	r21,r21,4
   64c54:	880b883a 	mov	r5,r17
   64c58:	0069b0c0 	call	69b0c <__muldf3>
   64c5c:	1027883a 	mov	r19,r2
   64c60:	1829883a 	mov	r20,r3
   64c64:	a800e826 	beq	r21,zero,65008 <_dtoa_r+0x15dc>
   64c68:	058001f4 	movhi	r22,7
   64c6c:	b5b74c04 	addi	r22,r22,-8912
   64c70:	04800084 	movi	r18,2
   64c74:	a980004c 	andi	r6,r21,1
   64c78:	1009883a 	mov	r4,r2
   64c7c:	a82bd07a 	srai	r21,r21,1
   64c80:	180b883a 	mov	r5,r3
   64c84:	30000426 	beq	r6,zero,64c98 <_dtoa_r+0x126c>
   64c88:	b1800017 	ldw	r6,0(r22)
   64c8c:	b1c00117 	ldw	r7,4(r22)
   64c90:	94800044 	addi	r18,r18,1
   64c94:	0069b0c0 	call	69b0c <__muldf3>
   64c98:	b5800204 	addi	r22,r22,8
   64c9c:	a83ff51e 	bne	r21,zero,64c74 <_dtoa_r+0x1248>
   64ca0:	1027883a 	mov	r19,r2
   64ca4:	1829883a 	mov	r20,r3
   64ca8:	003c7306 	br	63e78 <_dtoa_r+0x44c>
   64cac:	21000044 	addi	r4,r4,1
   64cb0:	11000005 	stb	r4,0(r2)
   64cb4:	003e5c06 	br	64628 <_dtoa_r+0xbfc>
   64cb8:	a9400117 	ldw	r5,4(r21)
   64cbc:	8009883a 	mov	r4,r16
   64cc0:	0066d040 	call	66d04 <_Balloc>
   64cc4:	a9800417 	ldw	r6,16(r21)
   64cc8:	11000304 	addi	r4,r2,12
   64ccc:	a9400304 	addi	r5,r21,12
   64cd0:	31800084 	addi	r6,r6,2
   64cd4:	318d883a 	add	r6,r6,r6
   64cd8:	318d883a 	add	r6,r6,r6
   64cdc:	1023883a 	mov	r17,r2
   64ce0:	00614dc0 	call	614dc <memcpy>
   64ce4:	8009883a 	mov	r4,r16
   64ce8:	880b883a 	mov	r5,r17
   64cec:	01800044 	movi	r6,1
   64cf0:	00674f40 	call	674f4 <__lshift>
   64cf4:	1027883a 	mov	r19,r2
   64cf8:	003e8f06 	br	64738 <_dtoa_r+0xd0c>
   64cfc:	b807883a 	mov	r3,r23
   64d00:	00800e44 	movi	r2,57
   64d04:	ddc00717 	ldw	r23,28(sp)
   64d08:	18809026 	beq	r3,r2,64f4c <_dtoa_r+0x1520>
   64d0c:	18c00044 	addi	r3,r3,1
   64d10:	003f2b06 	br	649c0 <_dtoa_r+0xf94>
   64d14:	b807883a 	mov	r3,r23
   64d18:	982b883a 	mov	r21,r19
   64d1c:	ddc00717 	ldw	r23,28(sp)
   64d20:	003e2406 	br	645b4 <_dtoa_r+0xb88>
   64d24:	0029883a 	mov	r20,zero
   64d28:	002b883a 	mov	r21,zero
   64d2c:	003f7206 	br	64af8 <_dtoa_r+0x10cc>
   64d30:	593fffc4 	addi	r4,r11,-1
   64d34:	200490fa 	slli	r2,r4,3
   64d38:	00c001f4 	movhi	r3,7
   64d3c:	18f75604 	addi	r3,r3,-8872
   64d40:	d9001015 	stw	r4,64(sp)
   64d44:	1885883a 	add	r2,r3,r2
   64d48:	11000017 	ldw	r4,0(r2)
   64d4c:	11400117 	ldw	r5,4(r2)
   64d50:	900d883a 	mov	r6,r18
   64d54:	a80f883a 	mov	r7,r21
   64d58:	dac01615 	stw	r11,88(sp)
   64d5c:	0069b0c0 	call	69b0c <__muldf3>
   64d60:	a00b883a 	mov	r5,r20
   64d64:	9809883a 	mov	r4,r19
   64d68:	d8c01215 	stw	r3,72(sp)
   64d6c:	d8801115 	stw	r2,68(sp)
   64d70:	006a2540 	call	6a254 <__fixdfsi>
   64d74:	1009883a 	mov	r4,r2
   64d78:	1025883a 	mov	r18,r2
   64d7c:	006a1800 	call	6a180 <__floatsidf>
   64d80:	9809883a 	mov	r4,r19
   64d84:	a00b883a 	mov	r5,r20
   64d88:	100d883a 	mov	r6,r2
   64d8c:	180f883a 	mov	r7,r3
   64d90:	94800c04 	addi	r18,r18,48
   64d94:	0069aac0 	call	69aac <__subdf3>
   64d98:	bc800005 	stb	r18,0(r23)
   64d9c:	dac01617 	ldw	r11,88(sp)
   64da0:	102b883a 	mov	r21,r2
   64da4:	00800044 	movi	r2,1
   64da8:	bd800044 	addi	r22,r23,1
   64dac:	1815883a 	mov	r10,r3
   64db0:	58802226 	beq	r11,r2,64e3c <_dtoa_r+0x1410>
   64db4:	bad7883a 	add	r11,r23,r11
   64db8:	dc001415 	stw	r16,80(sp)
   64dbc:	a805883a 	mov	r2,r21
   64dc0:	b027883a 	mov	r19,r22
   64dc4:	5821883a 	mov	r16,r11
   64dc8:	882b883a 	mov	r21,r17
   64dcc:	000d883a 	mov	r6,zero
   64dd0:	01d00934 	movhi	r7,16420
   64dd4:	1009883a 	mov	r4,r2
   64dd8:	180b883a 	mov	r5,r3
   64ddc:	0069b0c0 	call	69b0c <__muldf3>
   64de0:	180b883a 	mov	r5,r3
   64de4:	1009883a 	mov	r4,r2
   64de8:	1829883a 	mov	r20,r3
   64dec:	1023883a 	mov	r17,r2
   64df0:	006a2540 	call	6a254 <__fixdfsi>
   64df4:	1009883a 	mov	r4,r2
   64df8:	1025883a 	mov	r18,r2
   64dfc:	006a1800 	call	6a180 <__floatsidf>
   64e00:	8809883a 	mov	r4,r17
   64e04:	a00b883a 	mov	r5,r20
   64e08:	100d883a 	mov	r6,r2
   64e0c:	180f883a 	mov	r7,r3
   64e10:	94800c04 	addi	r18,r18,48
   64e14:	0069aac0 	call	69aac <__subdf3>
   64e18:	9cc00044 	addi	r19,r19,1
   64e1c:	9cbfffc5 	stb	r18,-1(r19)
   64e20:	9c3fea1e 	bne	r19,r16,64dcc <_dtoa_r+0x13a0>
   64e24:	1815883a 	mov	r10,r3
   64e28:	d8c01017 	ldw	r3,64(sp)
   64e2c:	dc001417 	ldw	r16,80(sp)
   64e30:	a823883a 	mov	r17,r21
   64e34:	b0ed883a 	add	r22,r22,r3
   64e38:	102b883a 	mov	r21,r2
   64e3c:	d9001117 	ldw	r4,68(sp)
   64e40:	d9401217 	ldw	r5,72(sp)
   64e44:	000d883a 	mov	r6,zero
   64e48:	01cff834 	movhi	r7,16352
   64e4c:	da801515 	stw	r10,84(sp)
   64e50:	0069a580 	call	69a58 <__adddf3>
   64e54:	da801517 	ldw	r10,84(sp)
   64e58:	1009883a 	mov	r4,r2
   64e5c:	180b883a 	mov	r5,r3
   64e60:	500f883a 	mov	r7,r10
   64e64:	a80d883a 	mov	r6,r21
   64e68:	006a1240 	call	6a124 <__ltdf2>
   64e6c:	da801517 	ldw	r10,84(sp)
   64e70:	10003b0e 	bge	r2,zero,64f60 <_dtoa_r+0x1534>
   64e74:	d9c01317 	ldw	r7,76(sp)
   64e78:	b53fffc3 	ldbu	r20,-1(r22)
   64e7c:	d9c00615 	stw	r7,24(sp)
   64e80:	003d3106 	br	64348 <_dtoa_r+0x91c>
   64e84:	d8800817 	ldw	r2,32(sp)
   64e88:	11e5c83a 	sub	r18,r2,r7
   64e8c:	0005883a 	mov	r2,zero
   64e90:	003d5006 	br	643d4 <_dtoa_r+0x9a8>
   64e94:	05800044 	movi	r22,1
   64e98:	003dc406 	br	645ac <_dtoa_r+0xb80>
   64e9c:	a5000044 	addi	r20,r20,1
   64ea0:	15000005 	stb	r20,0(r2)
   64ea4:	003c8206 	br	640b0 <_dtoa_r+0x684>
   64ea8:	d8800217 	ldw	r2,8(sp)
   64eac:	00c00d84 	movi	r3,54
   64eb0:	dcc00a17 	ldw	r19,40(sp)
   64eb4:	1885c83a 	sub	r2,r3,r2
   64eb8:	dc800817 	ldw	r18,32(sp)
   64ebc:	003d4506 	br	643d4 <_dtoa_r+0x9a8>
   64ec0:	dcc00317 	ldw	r19,12(sp)
   64ec4:	8829883a 	mov	r20,r17
   64ec8:	04800084 	movi	r18,2
   64ecc:	003bea06 	br	63e78 <_dtoa_r+0x44c>
   64ed0:	d9000917 	ldw	r4,36(sp)
   64ed4:	203f1126 	beq	r4,zero,64b1c <_dtoa_r+0x10f0>
   64ed8:	d9c00e17 	ldw	r7,56(sp)
   64edc:	01fca20e 	bge	zero,r7,64168 <_dtoa_r+0x73c>
   64ee0:	a00b883a 	mov	r5,r20
   64ee4:	9809883a 	mov	r4,r19
   64ee8:	000d883a 	mov	r6,zero
   64eec:	01d00934 	movhi	r7,16420
   64ef0:	0069b0c0 	call	69b0c <__muldf3>
   64ef4:	91000044 	addi	r4,r18,1
   64ef8:	1027883a 	mov	r19,r2
   64efc:	1829883a 	mov	r20,r3
   64f00:	006a1800 	call	6a180 <__floatsidf>
   64f04:	9809883a 	mov	r4,r19
   64f08:	a00b883a 	mov	r5,r20
   64f0c:	100d883a 	mov	r6,r2
   64f10:	180f883a 	mov	r7,r3
   64f14:	0069b0c0 	call	69b0c <__muldf3>
   64f18:	1009883a 	mov	r4,r2
   64f1c:	180b883a 	mov	r5,r3
   64f20:	000d883a 	mov	r6,zero
   64f24:	01d00734 	movhi	r7,16412
   64f28:	0069a580 	call	69a58 <__adddf3>
   64f2c:	1025883a 	mov	r18,r2
   64f30:	d8800617 	ldw	r2,24(sp)
   64f34:	057f3034 	movhi	r21,64704
   64f38:	1d6b883a 	add	r21,r3,r21
   64f3c:	10bfffc4 	addi	r2,r2,-1
   64f40:	d8801315 	stw	r2,76(sp)
   64f44:	dac00e17 	ldw	r11,56(sp)
   64f48:	003be706 	br	63ee8 <_dtoa_r+0x4bc>
   64f4c:	01000e44 	movi	r4,57
   64f50:	91000005 	stb	r4,0(r18)
   64f54:	95800044 	addi	r22,r18,1
   64f58:	982b883a 	mov	r21,r19
   64f5c:	003da106 	br	645e4 <_dtoa_r+0xbb8>
   64f60:	d9801117 	ldw	r6,68(sp)
   64f64:	d9c01217 	ldw	r7,72(sp)
   64f68:	0009883a 	mov	r4,zero
   64f6c:	014ff834 	movhi	r5,16352
   64f70:	da801515 	stw	r10,84(sp)
   64f74:	0069aac0 	call	69aac <__subdf3>
   64f78:	da801517 	ldw	r10,84(sp)
   64f7c:	1009883a 	mov	r4,r2
   64f80:	180b883a 	mov	r5,r3
   64f84:	a80d883a 	mov	r6,r21
   64f88:	500f883a 	mov	r7,r10
   64f8c:	006a05c0 	call	6a05c <__gtdf2>
   64f90:	00bc750e 	bge	zero,r2,64168 <_dtoa_r+0x73c>
   64f94:	01000c04 	movi	r4,48
   64f98:	00000106 	br	64fa0 <_dtoa_r+0x1574>
   64f9c:	102d883a 	mov	r22,r2
   64fa0:	b0bfffc4 	addi	r2,r22,-1
   64fa4:	10c00007 	ldb	r3,0(r2)
   64fa8:	193ffc26 	beq	r3,r4,64f9c <_dtoa_r+0x1570>
   64fac:	d8801317 	ldw	r2,76(sp)
   64fb0:	d8800615 	stw	r2,24(sp)
   64fb4:	003c3e06 	br	640b0 <_dtoa_r+0x684>
   64fb8:	d9001317 	ldw	r4,76(sp)
   64fbc:	df001117 	ldw	fp,68(sp)
   64fc0:	d9000615 	stw	r4,24(sp)
   64fc4:	003ce006 	br	64348 <_dtoa_r+0x91c>
   64fc8:	df001117 	ldw	fp,68(sp)
   64fcc:	dc401217 	ldw	r17,72(sp)
   64fd0:	003c6506 	br	64168 <_dtoa_r+0x73c>
   64fd4:	103e7a1e 	bne	r2,zero,649c0 <_dtoa_r+0xf94>
   64fd8:	1880004c 	andi	r2,r3,1
   64fdc:	103e7826 	beq	r2,zero,649c0 <_dtoa_r+0xf94>
   64fe0:	003e7406 	br	649b4 <_dtoa_r+0xf88>
   64fe4:	8009883a 	mov	r4,r16
   64fe8:	a80b883a 	mov	r5,r21
   64fec:	01800284 	movi	r6,10
   64ff0:	000f883a 	mov	r7,zero
   64ff4:	0066dd40 	call	66dd4 <__multadd>
   64ff8:	d9000e17 	ldw	r4,56(sp)
   64ffc:	102b883a 	mov	r21,r2
   65000:	d9000915 	stw	r4,36(sp)
   65004:	003d5106 	br	6454c <_dtoa_r+0xb20>
   65008:	04800084 	movi	r18,2
   6500c:	003b9a06 	br	63e78 <_dtoa_r+0x44c>
   65010:	d8c01317 	ldw	r3,76(sp)
   65014:	d8c00615 	stw	r3,24(sp)
   65018:	003ccb06 	br	64348 <_dtoa_r+0x91c>
   6501c:	d8c01317 	ldw	r3,76(sp)
   65020:	d8c00615 	stw	r3,24(sp)
   65024:	003c2206 	br	640b0 <_dtoa_r+0x684>
   65028:	20fd3826 	beq	r4,r3,6450c <_dtoa_r+0xae0>
   6502c:	00c00f04 	movi	r3,60
   65030:	1885c83a 	sub	r2,r3,r2
   65034:	003da906 	br	646dc <_dtoa_r+0xcb0>
   65038:	000b883a 	mov	r5,zero
   6503c:	003b5406 	br	63d90 <_dtoa_r+0x364>
   65040:	04c00044 	movi	r19,1
   65044:	003b3b06 	br	63d34 <_dtoa_r+0x308>

00065048 <_fflush_r>:
   65048:	defffb04 	addi	sp,sp,-20
   6504c:	dcc00315 	stw	r19,12(sp)
   65050:	dc400115 	stw	r17,4(sp)
   65054:	dfc00415 	stw	ra,16(sp)
   65058:	dc800215 	stw	r18,8(sp)
   6505c:	dc000015 	stw	r16,0(sp)
   65060:	2027883a 	mov	r19,r4
   65064:	2823883a 	mov	r17,r5
   65068:	20000226 	beq	r4,zero,65074 <_fflush_r+0x2c>
   6506c:	20800e17 	ldw	r2,56(r4)
   65070:	10005726 	beq	r2,zero,651d0 <_fflush_r+0x188>
   65074:	8880030b 	ldhu	r2,12(r17)
   65078:	10c0020c 	andi	r3,r2,8
   6507c:	18ffffcc 	andi	r3,r3,65535
   65080:	18e0001c 	xori	r3,r3,32768
   65084:	18e00004 	addi	r3,r3,-32768
   65088:	1800311e 	bne	r3,zero,65150 <_fflush_r+0x108>
   6508c:	89000117 	ldw	r4,4(r17)
   65090:	10c20014 	ori	r3,r2,2048
   65094:	88c0030d 	sth	r3,12(r17)
   65098:	180b883a 	mov	r5,r3
   6509c:	0100520e 	bge	zero,r4,651e8 <_fflush_r+0x1a0>
   650a0:	88c00a17 	ldw	r3,40(r17)
   650a4:	18002226 	beq	r3,zero,65130 <_fflush_r+0xe8>
   650a8:	1084000c 	andi	r2,r2,4096
   650ac:	10bfffcc 	andi	r2,r2,65535
   650b0:	10a0001c 	xori	r2,r2,32768
   650b4:	10a00004 	addi	r2,r2,-32768
   650b8:	10004e26 	beq	r2,zero,651f4 <_fflush_r+0x1ac>
   650bc:	8c001417 	ldw	r16,80(r17)
   650c0:	2940010c 	andi	r5,r5,4
   650c4:	297fffcc 	andi	r5,r5,65535
   650c8:	2960001c 	xori	r5,r5,32768
   650cc:	29600004 	addi	r5,r5,-32768
   650d0:	28000626 	beq	r5,zero,650ec <_fflush_r+0xa4>
   650d4:	89000117 	ldw	r4,4(r17)
   650d8:	88800c17 	ldw	r2,48(r17)
   650dc:	8121c83a 	sub	r16,r16,r4
   650e0:	10000226 	beq	r2,zero,650ec <_fflush_r+0xa4>
   650e4:	88800f17 	ldw	r2,60(r17)
   650e8:	80a1c83a 	sub	r16,r16,r2
   650ec:	89400717 	ldw	r5,28(r17)
   650f0:	9809883a 	mov	r4,r19
   650f4:	800d883a 	mov	r6,r16
   650f8:	000f883a 	mov	r7,zero
   650fc:	183ee83a 	callr	r3
   65100:	8080281e 	bne	r16,r2,651a4 <_fflush_r+0x15c>
   65104:	8880030b 	ldhu	r2,12(r17)
   65108:	88c00417 	ldw	r3,16(r17)
   6510c:	88000115 	stw	zero,4(r17)
   65110:	113dffcc 	andi	r4,r2,63487
   65114:	1084000c 	andi	r2,r2,4096
   65118:	10bfffcc 	andi	r2,r2,65535
   6511c:	10a0001c 	xori	r2,r2,32768
   65120:	8900030d 	sth	r4,12(r17)
   65124:	88c00015 	stw	r3,0(r17)
   65128:	10a00004 	addi	r2,r2,-32768
   6512c:	10002c1e 	bne	r2,zero,651e0 <_fflush_r+0x198>
   65130:	0005883a 	mov	r2,zero
   65134:	dfc00417 	ldw	ra,16(sp)
   65138:	dcc00317 	ldw	r19,12(sp)
   6513c:	dc800217 	ldw	r18,8(sp)
   65140:	dc400117 	ldw	r17,4(sp)
   65144:	dc000017 	ldw	r16,0(sp)
   65148:	dec00504 	addi	sp,sp,20
   6514c:	f800283a 	ret
   65150:	8c800417 	ldw	r18,16(r17)
   65154:	903ff626 	beq	r18,zero,65130 <_fflush_r+0xe8>
   65158:	8c000017 	ldw	r16,0(r17)
   6515c:	108000cc 	andi	r2,r2,3
   65160:	8c800015 	stw	r18,0(r17)
   65164:	84a1c83a 	sub	r16,r16,r18
   65168:	10001b1e 	bne	r2,zero,651d8 <_fflush_r+0x190>
   6516c:	88800517 	ldw	r2,20(r17)
   65170:	88800215 	stw	r2,8(r17)
   65174:	04000316 	blt	zero,r16,65184 <_fflush_r+0x13c>
   65178:	003fed06 	br	65130 <_fflush_r+0xe8>
   6517c:	90a5883a 	add	r18,r18,r2
   65180:	043feb0e 	bge	zero,r16,65130 <_fflush_r+0xe8>
   65184:	88800917 	ldw	r2,36(r17)
   65188:	89400717 	ldw	r5,28(r17)
   6518c:	800f883a 	mov	r7,r16
   65190:	900d883a 	mov	r6,r18
   65194:	9809883a 	mov	r4,r19
   65198:	103ee83a 	callr	r2
   6519c:	80a1c83a 	sub	r16,r16,r2
   651a0:	00bff616 	blt	zero,r2,6517c <_fflush_r+0x134>
   651a4:	88c0030b 	ldhu	r3,12(r17)
   651a8:	00bfffc4 	movi	r2,-1
   651ac:	18c01014 	ori	r3,r3,64
   651b0:	88c0030d 	sth	r3,12(r17)
   651b4:	dfc00417 	ldw	ra,16(sp)
   651b8:	dcc00317 	ldw	r19,12(sp)
   651bc:	dc800217 	ldw	r18,8(sp)
   651c0:	dc400117 	ldw	r17,4(sp)
   651c4:	dc000017 	ldw	r16,0(sp)
   651c8:	dec00504 	addi	sp,sp,20
   651cc:	f800283a 	ret
   651d0:	00653040 	call	65304 <__sinit>
   651d4:	003fa706 	br	65074 <_fflush_r+0x2c>
   651d8:	0005883a 	mov	r2,zero
   651dc:	003fe406 	br	65170 <_fflush_r+0x128>
   651e0:	8c001415 	stw	r16,80(r17)
   651e4:	003fd206 	br	65130 <_fflush_r+0xe8>
   651e8:	88c00f17 	ldw	r3,60(r17)
   651ec:	00ffac16 	blt	zero,r3,650a0 <_fflush_r+0x58>
   651f0:	003fcf06 	br	65130 <_fflush_r+0xe8>
   651f4:	89400717 	ldw	r5,28(r17)
   651f8:	9809883a 	mov	r4,r19
   651fc:	000d883a 	mov	r6,zero
   65200:	01c00044 	movi	r7,1
   65204:	183ee83a 	callr	r3
   65208:	1021883a 	mov	r16,r2
   6520c:	00bfffc4 	movi	r2,-1
   65210:	80800326 	beq	r16,r2,65220 <_fflush_r+0x1d8>
   65214:	8940030b 	ldhu	r5,12(r17)
   65218:	88c00a17 	ldw	r3,40(r17)
   6521c:	003fa806 	br	650c0 <_fflush_r+0x78>
   65220:	98c00017 	ldw	r3,0(r19)
   65224:	00800744 	movi	r2,29
   65228:	18bfde1e 	bne	r3,r2,651a4 <_fflush_r+0x15c>
   6522c:	003fc006 	br	65130 <_fflush_r+0xe8>

00065230 <fflush>:
   65230:	200b883a 	mov	r5,r4
   65234:	20000426 	beq	r4,zero,65248 <fflush+0x18>
   65238:	008001f4 	movhi	r2,7
   6523c:	10be7104 	addi	r2,r2,-1596
   65240:	11000017 	ldw	r4,0(r2)
   65244:	00650481 	jmpi	65048 <_fflush_r>
   65248:	008001f4 	movhi	r2,7
   6524c:	10be7004 	addi	r2,r2,-1600
   65250:	11000017 	ldw	r4,0(r2)
   65254:	014001b4 	movhi	r5,6
   65258:	29541204 	addi	r5,r5,20552
   6525c:	0065ee41 	jmpi	65ee4 <_fwalk_reent>

00065260 <__fp_lock>:
   65260:	0005883a 	mov	r2,zero
   65264:	f800283a 	ret

00065268 <__fp_unlock>:
   65268:	0005883a 	mov	r2,zero
   6526c:	f800283a 	ret

00065270 <_cleanup_r>:
   65270:	014001f4 	movhi	r5,7
   65274:	29623504 	addi	r5,r5,-30508
   65278:	0065e3c1 	jmpi	65e3c <_fwalk>

0006527c <__sfmoreglue>:
   6527c:	defffc04 	addi	sp,sp,-16
   65280:	dc800215 	stw	r18,8(sp)
   65284:	2825883a 	mov	r18,r5
   65288:	dc000015 	stw	r16,0(sp)
   6528c:	01401704 	movi	r5,92
   65290:	2021883a 	mov	r16,r4
   65294:	9009883a 	mov	r4,r18
   65298:	dfc00315 	stw	ra,12(sp)
   6529c:	dc400115 	stw	r17,4(sp)
   652a0:	00614b40 	call	614b4 <__mulsi3>
   652a4:	8009883a 	mov	r4,r16
   652a8:	11400304 	addi	r5,r2,12
   652ac:	1023883a 	mov	r17,r2
   652b0:	00662200 	call	66220 <_malloc_r>
   652b4:	1021883a 	mov	r16,r2
   652b8:	10000726 	beq	r2,zero,652d8 <__sfmoreglue+0x5c>
   652bc:	11000304 	addi	r4,r2,12
   652c0:	10000015 	stw	zero,0(r2)
   652c4:	14800115 	stw	r18,4(r2)
   652c8:	11000215 	stw	r4,8(r2)
   652cc:	000b883a 	mov	r5,zero
   652d0:	880d883a 	mov	r6,r17
   652d4:	0066c280 	call	66c28 <memset>
   652d8:	8005883a 	mov	r2,r16
   652dc:	dfc00317 	ldw	ra,12(sp)
   652e0:	dc800217 	ldw	r18,8(sp)
   652e4:	dc400117 	ldw	r17,4(sp)
   652e8:	dc000017 	ldw	r16,0(sp)
   652ec:	dec00404 	addi	sp,sp,16
   652f0:	f800283a 	ret

000652f4 <_cleanup>:
   652f4:	008001f4 	movhi	r2,7
   652f8:	10be7004 	addi	r2,r2,-1600
   652fc:	11000017 	ldw	r4,0(r2)
   65300:	00652701 	jmpi	65270 <_cleanup_r>

00065304 <__sinit>:
   65304:	20800e17 	ldw	r2,56(r4)
   65308:	1000401e 	bne	r2,zero,6540c <__sinit+0x108>
   6530c:	21400117 	ldw	r5,4(r4)
   65310:	018001b4 	movhi	r6,6
   65314:	31949c04 	addi	r6,r6,21104
   65318:	20c00217 	ldw	r3,8(r4)
   6531c:	21800f15 	stw	r6,60(r4)
   65320:	2080bb04 	addi	r2,r4,748
   65324:	02400044 	movi	r9,1
   65328:	018000c4 	movi	r6,3
   6532c:	2180b915 	stw	r6,740(r4)
   65330:	2080ba15 	stw	r2,744(r4)
   65334:	22400e15 	stw	r9,56(r4)
   65338:	20800317 	ldw	r2,12(r4)
   6533c:	2000b815 	stw	zero,736(r4)
   65340:	020001f4 	movhi	r8,7
   65344:	42210604 	addi	r8,r8,-31720
   65348:	01c001f4 	movhi	r7,7
   6534c:	39e11b04 	addi	r7,r7,-31636
   65350:	018001f4 	movhi	r6,7
   65354:	31a13d04 	addi	r6,r6,-31500
   65358:	010001f4 	movhi	r4,7
   6535c:	21215404 	addi	r4,r4,-31408
   65360:	02800104 	movi	r10,4
   65364:	28000015 	stw	zero,0(r5)
   65368:	28000115 	stw	zero,4(r5)
   6536c:	28000215 	stw	zero,8(r5)
   65370:	2a80030d 	sth	r10,12(r5)
   65374:	2800038d 	sth	zero,14(r5)
   65378:	28000415 	stw	zero,16(r5)
   6537c:	28000515 	stw	zero,20(r5)
   65380:	28000615 	stw	zero,24(r5)
   65384:	29400715 	stw	r5,28(r5)
   65388:	2a000815 	stw	r8,32(r5)
   6538c:	29c00915 	stw	r7,36(r5)
   65390:	29800a15 	stw	r6,40(r5)
   65394:	29000b15 	stw	r4,44(r5)
   65398:	01400284 	movi	r5,10
   6539c:	18000015 	stw	zero,0(r3)
   653a0:	18000115 	stw	zero,4(r3)
   653a4:	18000215 	stw	zero,8(r3)
   653a8:	1940030d 	sth	r5,12(r3)
   653ac:	1a40038d 	sth	r9,14(r3)
   653b0:	18000415 	stw	zero,16(r3)
   653b4:	18000515 	stw	zero,20(r3)
   653b8:	18000615 	stw	zero,24(r3)
   653bc:	18c00715 	stw	r3,28(r3)
   653c0:	1a000815 	stw	r8,32(r3)
   653c4:	19c00915 	stw	r7,36(r3)
   653c8:	19800a15 	stw	r6,40(r3)
   653cc:	19000b15 	stw	r4,44(r3)
   653d0:	00c00484 	movi	r3,18
   653d4:	10c0030d 	sth	r3,12(r2)
   653d8:	00c00084 	movi	r3,2
   653dc:	10000015 	stw	zero,0(r2)
   653e0:	10000115 	stw	zero,4(r2)
   653e4:	10000215 	stw	zero,8(r2)
   653e8:	10c0038d 	sth	r3,14(r2)
   653ec:	10000415 	stw	zero,16(r2)
   653f0:	10000515 	stw	zero,20(r2)
   653f4:	10000615 	stw	zero,24(r2)
   653f8:	10800715 	stw	r2,28(r2)
   653fc:	12000815 	stw	r8,32(r2)
   65400:	11c00915 	stw	r7,36(r2)
   65404:	11800a15 	stw	r6,40(r2)
   65408:	11000b15 	stw	r4,44(r2)
   6540c:	f800283a 	ret

00065410 <__sfp>:
   65410:	defffc04 	addi	sp,sp,-16
   65414:	008001f4 	movhi	r2,7
   65418:	10be7004 	addi	r2,r2,-1600
   6541c:	dc400115 	stw	r17,4(sp)
   65420:	14400017 	ldw	r17,0(r2)
   65424:	dc800215 	stw	r18,8(sp)
   65428:	dfc00315 	stw	ra,12(sp)
   6542c:	88800e17 	ldw	r2,56(r17)
   65430:	dc000015 	stw	r16,0(sp)
   65434:	2025883a 	mov	r18,r4
   65438:	10002826 	beq	r2,zero,654dc <__sfp+0xcc>
   6543c:	8c40b804 	addi	r17,r17,736
   65440:	043fffc4 	movi	r16,-1
   65444:	89400117 	ldw	r5,4(r17)
   65448:	88800217 	ldw	r2,8(r17)
   6544c:	297fffc4 	addi	r5,r5,-1
   65450:	28000a16 	blt	r5,zero,6547c <__sfp+0x6c>
   65454:	10c0030f 	ldh	r3,12(r2)
   65458:	18000c26 	beq	r3,zero,6548c <__sfp+0x7c>
   6545c:	10c01a04 	addi	r3,r2,104
   65460:	00000206 	br	6546c <__sfp+0x5c>
   65464:	19bfe90f 	ldh	r6,-92(r3)
   65468:	30000826 	beq	r6,zero,6548c <__sfp+0x7c>
   6546c:	297fffc4 	addi	r5,r5,-1
   65470:	18bffd04 	addi	r2,r3,-12
   65474:	18c01704 	addi	r3,r3,92
   65478:	2c3ffa1e 	bne	r5,r16,65464 <__sfp+0x54>
   6547c:	88800017 	ldw	r2,0(r17)
   65480:	10001926 	beq	r2,zero,654e8 <__sfp+0xd8>
   65484:	1023883a 	mov	r17,r2
   65488:	003fee06 	br	65444 <__sfp+0x34>
   6548c:	00ffffc4 	movi	r3,-1
   65490:	10c0038d 	sth	r3,14(r2)
   65494:	00c00044 	movi	r3,1
   65498:	10c0030d 	sth	r3,12(r2)
   6549c:	10000015 	stw	zero,0(r2)
   654a0:	10000215 	stw	zero,8(r2)
   654a4:	10000115 	stw	zero,4(r2)
   654a8:	10000415 	stw	zero,16(r2)
   654ac:	10000515 	stw	zero,20(r2)
   654b0:	10000615 	stw	zero,24(r2)
   654b4:	10000c15 	stw	zero,48(r2)
   654b8:	10000d15 	stw	zero,52(r2)
   654bc:	10001115 	stw	zero,68(r2)
   654c0:	10001215 	stw	zero,72(r2)
   654c4:	dfc00317 	ldw	ra,12(sp)
   654c8:	dc800217 	ldw	r18,8(sp)
   654cc:	dc400117 	ldw	r17,4(sp)
   654d0:	dc000017 	ldw	r16,0(sp)
   654d4:	dec00404 	addi	sp,sp,16
   654d8:	f800283a 	ret
   654dc:	8809883a 	mov	r4,r17
   654e0:	00653040 	call	65304 <__sinit>
   654e4:	003fd506 	br	6543c <__sfp+0x2c>
   654e8:	9009883a 	mov	r4,r18
   654ec:	01400104 	movi	r5,4
   654f0:	006527c0 	call	6527c <__sfmoreglue>
   654f4:	88800015 	stw	r2,0(r17)
   654f8:	103fe21e 	bne	r2,zero,65484 <__sfp+0x74>
   654fc:	00800304 	movi	r2,12
   65500:	90800015 	stw	r2,0(r18)
   65504:	0005883a 	mov	r2,zero
   65508:	003fee06 	br	654c4 <__sfp+0xb4>

0006550c <__sfp_lock_acquire>:
   6550c:	f800283a 	ret

00065510 <__sfp_lock_release>:
   65510:	f800283a 	ret

00065514 <__sinit_lock_acquire>:
   65514:	f800283a 	ret

00065518 <__sinit_lock_release>:
   65518:	f800283a 	ret

0006551c <__fp_lock_all>:
   6551c:	008001f4 	movhi	r2,7
   65520:	10be7104 	addi	r2,r2,-1596
   65524:	11000017 	ldw	r4,0(r2)
   65528:	014001b4 	movhi	r5,6
   6552c:	29549804 	addi	r5,r5,21088
   65530:	0065e3c1 	jmpi	65e3c <_fwalk>

00065534 <__fp_unlock_all>:
   65534:	008001f4 	movhi	r2,7
   65538:	10be7104 	addi	r2,r2,-1596
   6553c:	11000017 	ldw	r4,0(r2)
   65540:	014001b4 	movhi	r5,6
   65544:	29549a04 	addi	r5,r5,21096
   65548:	0065e3c1 	jmpi	65e3c <_fwalk>

0006554c <_malloc_trim_r>:
   6554c:	defffb04 	addi	sp,sp,-20
   65550:	dcc00315 	stw	r19,12(sp)
   65554:	dc800215 	stw	r18,8(sp)
   65558:	dc400115 	stw	r17,4(sp)
   6555c:	dc000015 	stw	r16,0(sp)
   65560:	2827883a 	mov	r19,r5
   65564:	dfc00415 	stw	ra,16(sp)
   65568:	044001f4 	movhi	r17,7
   6556c:	8c78ec04 	addi	r17,r17,-7248
   65570:	2021883a 	mov	r16,r4
   65574:	006b1740 	call	6b174 <__malloc_lock>
   65578:	88800217 	ldw	r2,8(r17)
   6557c:	14800117 	ldw	r18,4(r2)
   65580:	00bfff04 	movi	r2,-4
   65584:	90a4703a 	and	r18,r18,r2
   65588:	9083fbc4 	addi	r2,r18,4079
   6558c:	14e7c83a 	sub	r19,r2,r19
   65590:	9826d33a 	srli	r19,r19,12
   65594:	0083ffc4 	movi	r2,4095
   65598:	9cffffc4 	addi	r19,r19,-1
   6559c:	9826933a 	slli	r19,r19,12
   655a0:	14c0060e 	bge	r2,r19,655bc <_malloc_trim_r+0x70>
   655a4:	8009883a 	mov	r4,r16
   655a8:	000b883a 	mov	r5,zero
   655ac:	00683b40 	call	683b4 <_sbrk_r>
   655b0:	88c00217 	ldw	r3,8(r17)
   655b4:	1c87883a 	add	r3,r3,r18
   655b8:	10c00a26 	beq	r2,r3,655e4 <_malloc_trim_r+0x98>
   655bc:	8009883a 	mov	r4,r16
   655c0:	006b1940 	call	6b194 <__malloc_unlock>
   655c4:	0005883a 	mov	r2,zero
   655c8:	dfc00417 	ldw	ra,16(sp)
   655cc:	dcc00317 	ldw	r19,12(sp)
   655d0:	dc800217 	ldw	r18,8(sp)
   655d4:	dc400117 	ldw	r17,4(sp)
   655d8:	dc000017 	ldw	r16,0(sp)
   655dc:	dec00504 	addi	sp,sp,20
   655e0:	f800283a 	ret
   655e4:	8009883a 	mov	r4,r16
   655e8:	04cbc83a 	sub	r5,zero,r19
   655ec:	00683b40 	call	683b4 <_sbrk_r>
   655f0:	00ffffc4 	movi	r3,-1
   655f4:	10c01326 	beq	r2,r3,65644 <_malloc_trim_r+0xf8>
   655f8:	008001f4 	movhi	r2,7
   655fc:	10853604 	addi	r2,r2,5336
   65600:	11000017 	ldw	r4,0(r2)
   65604:	88c00217 	ldw	r3,8(r17)
   65608:	94e5c83a 	sub	r18,r18,r19
   6560c:	94800054 	ori	r18,r18,1
   65610:	24e7c83a 	sub	r19,r4,r19
   65614:	1c800115 	stw	r18,4(r3)
   65618:	8009883a 	mov	r4,r16
   6561c:	14c00015 	stw	r19,0(r2)
   65620:	006b1940 	call	6b194 <__malloc_unlock>
   65624:	00800044 	movi	r2,1
   65628:	dfc00417 	ldw	ra,16(sp)
   6562c:	dcc00317 	ldw	r19,12(sp)
   65630:	dc800217 	ldw	r18,8(sp)
   65634:	dc400117 	ldw	r17,4(sp)
   65638:	dc000017 	ldw	r16,0(sp)
   6563c:	dec00504 	addi	sp,sp,20
   65640:	f800283a 	ret
   65644:	8009883a 	mov	r4,r16
   65648:	000b883a 	mov	r5,zero
   6564c:	00683b40 	call	683b4 <_sbrk_r>
   65650:	88c00217 	ldw	r3,8(r17)
   65654:	014003c4 	movi	r5,15
   65658:	10c9c83a 	sub	r4,r2,r3
   6565c:	293fd70e 	bge	r5,r4,655bc <_malloc_trim_r+0x70>
   65660:	014001f4 	movhi	r5,7
   65664:	297e7304 	addi	r5,r5,-1588
   65668:	29400017 	ldw	r5,0(r5)
   6566c:	21000054 	ori	r4,r4,1
   65670:	19000115 	stw	r4,4(r3)
   65674:	1145c83a 	sub	r2,r2,r5
   65678:	014001f4 	movhi	r5,7
   6567c:	29453604 	addi	r5,r5,5336
   65680:	28800015 	stw	r2,0(r5)
   65684:	003fcd06 	br	655bc <_malloc_trim_r+0x70>

00065688 <_free_r>:
   65688:	defffd04 	addi	sp,sp,-12
   6568c:	dc400115 	stw	r17,4(sp)
   65690:	dc000015 	stw	r16,0(sp)
   65694:	dfc00215 	stw	ra,8(sp)
   65698:	2821883a 	mov	r16,r5
   6569c:	2023883a 	mov	r17,r4
   656a0:	28004b26 	beq	r5,zero,657d0 <_free_r+0x148>
   656a4:	006b1740 	call	6b174 <__malloc_lock>
   656a8:	823fff17 	ldw	r8,-4(r16)
   656ac:	00bfff84 	movi	r2,-2
   656b0:	81bffe04 	addi	r6,r16,-8
   656b4:	4084703a 	and	r2,r8,r2
   656b8:	3087883a 	add	r3,r6,r2
   656bc:	014001f4 	movhi	r5,7
   656c0:	2978ec04 	addi	r5,r5,-7248
   656c4:	1a400117 	ldw	r9,4(r3)
   656c8:	29000217 	ldw	r4,8(r5)
   656cc:	01ffff04 	movi	r7,-4
   656d0:	49ce703a 	and	r7,r9,r7
   656d4:	20c06526 	beq	r4,r3,6586c <_free_r+0x1e4>
   656d8:	19c00115 	stw	r7,4(r3)
   656dc:	4200004c 	andi	r8,r8,1
   656e0:	40003026 	beq	r8,zero,657a4 <_free_r+0x11c>
   656e4:	0009883a 	mov	r4,zero
   656e8:	19d1883a 	add	r8,r3,r7
   656ec:	42000117 	ldw	r8,4(r8)
   656f0:	4200004c 	andi	r8,r8,1
   656f4:	4000061e 	bne	r8,zero,65710 <_free_r+0x88>
   656f8:	11c5883a 	add	r2,r2,r7
   656fc:	19c00217 	ldw	r7,8(r3)
   65700:	20004e26 	beq	r4,zero,6583c <_free_r+0x1b4>
   65704:	18c00317 	ldw	r3,12(r3)
   65708:	38c00315 	stw	r3,12(r7)
   6570c:	19c00215 	stw	r7,8(r3)
   65710:	11c00054 	ori	r7,r2,1
   65714:	3087883a 	add	r3,r6,r2
   65718:	31c00115 	stw	r7,4(r6)
   6571c:	18800015 	stw	r2,0(r3)
   65720:	20001a1e 	bne	r4,zero,6578c <_free_r+0x104>
   65724:	00c07fc4 	movi	r3,511
   65728:	18802e2e 	bgeu	r3,r2,657e4 <_free_r+0x15c>
   6572c:	1006d27a 	srli	r3,r2,9
   65730:	01000104 	movi	r4,4
   65734:	20c06636 	bltu	r4,r3,658d0 <_free_r+0x248>
   65738:	1008d1ba 	srli	r4,r2,6
   6573c:	21000e04 	addi	r4,r4,56
   65740:	210f883a 	add	r7,r4,r4
   65744:	39cf883a 	add	r7,r7,r7
   65748:	39cf883a 	add	r7,r7,r7
   6574c:	29cf883a 	add	r7,r5,r7
   65750:	38c00217 	ldw	r3,8(r7)
   65754:	014001f4 	movhi	r5,7
   65758:	2978ec04 	addi	r5,r5,-7248
   6575c:	19c06126 	beq	r3,r7,658e4 <_free_r+0x25c>
   65760:	013fff04 	movi	r4,-4
   65764:	19400117 	ldw	r5,4(r3)
   65768:	290a703a 	and	r5,r5,r4
   6576c:	1140022e 	bgeu	r2,r5,65778 <_free_r+0xf0>
   65770:	18c00217 	ldw	r3,8(r3)
   65774:	38fffb1e 	bne	r7,r3,65764 <_free_r+0xdc>
   65778:	18800317 	ldw	r2,12(r3)
   6577c:	30800315 	stw	r2,12(r6)
   65780:	30c00215 	stw	r3,8(r6)
   65784:	11800215 	stw	r6,8(r2)
   65788:	19800315 	stw	r6,12(r3)
   6578c:	8809883a 	mov	r4,r17
   65790:	dfc00217 	ldw	ra,8(sp)
   65794:	dc400117 	ldw	r17,4(sp)
   65798:	dc000017 	ldw	r16,0(sp)
   6579c:	dec00304 	addi	sp,sp,12
   657a0:	006b1941 	jmpi	6b194 <__malloc_unlock>
   657a4:	813ffe17 	ldw	r4,-8(r16)
   657a8:	2a400204 	addi	r9,r5,8
   657ac:	310dc83a 	sub	r6,r6,r4
   657b0:	32000217 	ldw	r8,8(r6)
   657b4:	1105883a 	add	r2,r2,r4
   657b8:	42404326 	beq	r8,r9,658c8 <_free_r+0x240>
   657bc:	32400317 	ldw	r9,12(r6)
   657c0:	0009883a 	mov	r4,zero
   657c4:	42400315 	stw	r9,12(r8)
   657c8:	4a000215 	stw	r8,8(r9)
   657cc:	003fc606 	br	656e8 <_free_r+0x60>
   657d0:	dfc00217 	ldw	ra,8(sp)
   657d4:	dc400117 	ldw	r17,4(sp)
   657d8:	dc000017 	ldw	r16,0(sp)
   657dc:	dec00304 	addi	sp,sp,12
   657e0:	f800283a 	ret
   657e4:	1004d0fa 	srli	r2,r2,3
   657e8:	02000044 	movi	r8,1
   657ec:	29c00117 	ldw	r7,4(r5)
   657f0:	1087883a 	add	r3,r2,r2
   657f4:	18c7883a 	add	r3,r3,r3
   657f8:	1005d0ba 	srai	r2,r2,2
   657fc:	18c7883a 	add	r3,r3,r3
   65800:	28c7883a 	add	r3,r5,r3
   65804:	19000217 	ldw	r4,8(r3)
   65808:	4084983a 	sll	r2,r8,r2
   6580c:	30c00315 	stw	r3,12(r6)
   65810:	31000215 	stw	r4,8(r6)
   65814:	11c4b03a 	or	r2,r2,r7
   65818:	21800315 	stw	r6,12(r4)
   6581c:	8809883a 	mov	r4,r17
   65820:	28800115 	stw	r2,4(r5)
   65824:	19800215 	stw	r6,8(r3)
   65828:	dfc00217 	ldw	ra,8(sp)
   6582c:	dc400117 	ldw	r17,4(sp)
   65830:	dc000017 	ldw	r16,0(sp)
   65834:	dec00304 	addi	sp,sp,12
   65838:	006b1941 	jmpi	6b194 <__malloc_unlock>
   6583c:	020001f4 	movhi	r8,7
   65840:	4238ee04 	addi	r8,r8,-7240
   65844:	3a3faf1e 	bne	r7,r8,65704 <_free_r+0x7c>
   65848:	29800515 	stw	r6,20(r5)
   6584c:	29800415 	stw	r6,16(r5)
   65850:	11000054 	ori	r4,r2,1
   65854:	3087883a 	add	r3,r6,r2
   65858:	31c00315 	stw	r7,12(r6)
   6585c:	31c00215 	stw	r7,8(r6)
   65860:	31000115 	stw	r4,4(r6)
   65864:	18800015 	stw	r2,0(r3)
   65868:	003fc806 	br	6578c <_free_r+0x104>
   6586c:	4200004c 	andi	r8,r8,1
   65870:	3885883a 	add	r2,r7,r2
   65874:	4000071e 	bne	r8,zero,65894 <_free_r+0x20c>
   65878:	81fffe17 	ldw	r7,-8(r16)
   6587c:	31cdc83a 	sub	r6,r6,r7
   65880:	30c00317 	ldw	r3,12(r6)
   65884:	31000217 	ldw	r4,8(r6)
   65888:	11c5883a 	add	r2,r2,r7
   6588c:	20c00315 	stw	r3,12(r4)
   65890:	19000215 	stw	r4,8(r3)
   65894:	00c001f4 	movhi	r3,7
   65898:	18fe7404 	addi	r3,r3,-1584
   6589c:	18c00017 	ldw	r3,0(r3)
   658a0:	11000054 	ori	r4,r2,1
   658a4:	31000115 	stw	r4,4(r6)
   658a8:	29800215 	stw	r6,8(r5)
   658ac:	10ffb736 	bltu	r2,r3,6578c <_free_r+0x104>
   658b0:	008001f4 	movhi	r2,7
   658b4:	10852c04 	addi	r2,r2,5296
   658b8:	11400017 	ldw	r5,0(r2)
   658bc:	8809883a 	mov	r4,r17
   658c0:	006554c0 	call	6554c <_malloc_trim_r>
   658c4:	003fb106 	br	6578c <_free_r+0x104>
   658c8:	01000044 	movi	r4,1
   658cc:	003f8606 	br	656e8 <_free_r+0x60>
   658d0:	01000504 	movi	r4,20
   658d4:	20c00b36 	bltu	r4,r3,65904 <_free_r+0x27c>
   658d8:	190016c4 	addi	r4,r3,91
   658dc:	210f883a 	add	r7,r4,r4
   658e0:	003f9806 	br	65744 <_free_r+0xbc>
   658e4:	2009d0ba 	srai	r4,r4,2
   658e8:	00800044 	movi	r2,1
   658ec:	29c00117 	ldw	r7,4(r5)
   658f0:	1108983a 	sll	r4,r2,r4
   658f4:	1805883a 	mov	r2,r3
   658f8:	21c8b03a 	or	r4,r4,r7
   658fc:	29000115 	stw	r4,4(r5)
   65900:	003f9e06 	br	6577c <_free_r+0xf4>
   65904:	01001504 	movi	r4,84
   65908:	20c00436 	bltu	r4,r3,6591c <_free_r+0x294>
   6590c:	1008d33a 	srli	r4,r2,12
   65910:	21001b84 	addi	r4,r4,110
   65914:	210f883a 	add	r7,r4,r4
   65918:	003f8a06 	br	65744 <_free_r+0xbc>
   6591c:	01005504 	movi	r4,340
   65920:	20c00436 	bltu	r4,r3,65934 <_free_r+0x2ac>
   65924:	1008d3fa 	srli	r4,r2,15
   65928:	21001dc4 	addi	r4,r4,119
   6592c:	210f883a 	add	r7,r4,r4
   65930:	003f8406 	br	65744 <_free_r+0xbc>
   65934:	01015504 	movi	r4,1364
   65938:	20c00436 	bltu	r4,r3,6594c <_free_r+0x2c4>
   6593c:	1008d4ba 	srli	r4,r2,18
   65940:	21001f04 	addi	r4,r4,124
   65944:	210f883a 	add	r7,r4,r4
   65948:	003f7e06 	br	65744 <_free_r+0xbc>
   6594c:	01c03f04 	movi	r7,252
   65950:	01001f84 	movi	r4,126
   65954:	003f7b06 	br	65744 <_free_r+0xbc>

00065958 <__sfvwrite_r>:
   65958:	30800217 	ldw	r2,8(r6)
   6595c:	defff504 	addi	sp,sp,-44
   65960:	dd400615 	stw	r21,24(sp)
   65964:	dd000515 	stw	r20,20(sp)
   65968:	dc000115 	stw	r16,4(sp)
   6596c:	dfc00a15 	stw	ra,40(sp)
   65970:	df000915 	stw	fp,36(sp)
   65974:	ddc00815 	stw	r23,32(sp)
   65978:	dd800715 	stw	r22,28(sp)
   6597c:	dcc00415 	stw	r19,16(sp)
   65980:	dc800315 	stw	r18,12(sp)
   65984:	dc400215 	stw	r17,8(sp)
   65988:	3029883a 	mov	r20,r6
   6598c:	202b883a 	mov	r21,r4
   65990:	2821883a 	mov	r16,r5
   65994:	10002126 	beq	r2,zero,65a1c <__sfvwrite_r+0xc4>
   65998:	2880030b 	ldhu	r2,12(r5)
   6599c:	10c0020c 	andi	r3,r2,8
   659a0:	18ffffcc 	andi	r3,r3,65535
   659a4:	18e0001c 	xori	r3,r3,32768
   659a8:	18e00004 	addi	r3,r3,-32768
   659ac:	18002826 	beq	r3,zero,65a50 <__sfvwrite_r+0xf8>
   659b0:	28c00417 	ldw	r3,16(r5)
   659b4:	18002626 	beq	r3,zero,65a50 <__sfvwrite_r+0xf8>
   659b8:	10c0008c 	andi	r3,r2,2
   659bc:	18ffffcc 	andi	r3,r3,65535
   659c0:	18e0001c 	xori	r3,r3,32768
   659c4:	18e00004 	addi	r3,r3,-32768
   659c8:	a4400017 	ldw	r17,0(r20)
   659cc:	18002b26 	beq	r3,zero,65a7c <__sfvwrite_r+0x124>
   659d0:	0027883a 	mov	r19,zero
   659d4:	0025883a 	mov	r18,zero
   659d8:	05810004 	movi	r22,1024
   659dc:	980d883a 	mov	r6,r19
   659e0:	a809883a 	mov	r4,r21
   659e4:	90004f26 	beq	r18,zero,65b24 <__sfvwrite_r+0x1cc>
   659e8:	900f883a 	mov	r7,r18
   659ec:	81400717 	ldw	r5,28(r16)
   659f0:	b480012e 	bgeu	r22,r18,659f8 <__sfvwrite_r+0xa0>
   659f4:	01c10004 	movi	r7,1024
   659f8:	80800917 	ldw	r2,36(r16)
   659fc:	103ee83a 	callr	r2
   65a00:	0080540e 	bge	zero,r2,65b54 <__sfvwrite_r+0x1fc>
   65a04:	a0c00217 	ldw	r3,8(r20)
   65a08:	98a7883a 	add	r19,r19,r2
   65a0c:	90a5c83a 	sub	r18,r18,r2
   65a10:	1885c83a 	sub	r2,r3,r2
   65a14:	a0800215 	stw	r2,8(r20)
   65a18:	103ff01e 	bne	r2,zero,659dc <__sfvwrite_r+0x84>
   65a1c:	0005883a 	mov	r2,zero
   65a20:	dfc00a17 	ldw	ra,40(sp)
   65a24:	df000917 	ldw	fp,36(sp)
   65a28:	ddc00817 	ldw	r23,32(sp)
   65a2c:	dd800717 	ldw	r22,28(sp)
   65a30:	dd400617 	ldw	r21,24(sp)
   65a34:	dd000517 	ldw	r20,20(sp)
   65a38:	dcc00417 	ldw	r19,16(sp)
   65a3c:	dc800317 	ldw	r18,12(sp)
   65a40:	dc400217 	ldw	r17,8(sp)
   65a44:	dc000117 	ldw	r16,4(sp)
   65a48:	dec00b04 	addi	sp,sp,44
   65a4c:	f800283a 	ret
   65a50:	a809883a 	mov	r4,r21
   65a54:	800b883a 	mov	r5,r16
   65a58:	006367c0 	call	6367c <__swsetup_r>
   65a5c:	1000f01e 	bne	r2,zero,65e20 <__sfvwrite_r+0x4c8>
   65a60:	8080030b 	ldhu	r2,12(r16)
   65a64:	a4400017 	ldw	r17,0(r20)
   65a68:	10c0008c 	andi	r3,r2,2
   65a6c:	18ffffcc 	andi	r3,r3,65535
   65a70:	18e0001c 	xori	r3,r3,32768
   65a74:	18e00004 	addi	r3,r3,-32768
   65a78:	183fd51e 	bne	r3,zero,659d0 <__sfvwrite_r+0x78>
   65a7c:	10c0004c 	andi	r3,r2,1
   65a80:	002d883a 	mov	r22,zero
   65a84:	1800381e 	bne	r3,zero,65b68 <__sfvwrite_r+0x210>
   65a88:	0025883a 	mov	r18,zero
   65a8c:	90002126 	beq	r18,zero,65b14 <__sfvwrite_r+0x1bc>
   65a90:	10c0800c 	andi	r3,r2,512
   65a94:	18ffffcc 	andi	r3,r3,65535
   65a98:	18e0001c 	xori	r3,r3,32768
   65a9c:	18e00004 	addi	r3,r3,-32768
   65aa0:	84c00217 	ldw	r19,8(r16)
   65aa4:	18006b26 	beq	r3,zero,65c54 <__sfvwrite_r+0x2fc>
   65aa8:	980f883a 	mov	r7,r19
   65aac:	94c08636 	bltu	r18,r19,65cc8 <__sfvwrite_r+0x370>
   65ab0:	10c1200c 	andi	r3,r2,1152
   65ab4:	18009f1e 	bne	r3,zero,65d34 <__sfvwrite_r+0x3dc>
   65ab8:	81000017 	ldw	r4,0(r16)
   65abc:	982f883a 	mov	r23,r19
   65ac0:	9039883a 	mov	fp,r18
   65ac4:	9027883a 	mov	r19,r18
   65ac8:	380d883a 	mov	r6,r7
   65acc:	b00b883a 	mov	r5,r22
   65ad0:	d9c00015 	stw	r7,0(sp)
   65ad4:	0066a9c0 	call	66a9c <memmove>
   65ad8:	d9c00017 	ldw	r7,0(sp)
   65adc:	81000217 	ldw	r4,8(r16)
   65ae0:	80800017 	ldw	r2,0(r16)
   65ae4:	25efc83a 	sub	r23,r4,r23
   65ae8:	11cf883a 	add	r7,r2,r7
   65aec:	85c00215 	stw	r23,8(r16)
   65af0:	81c00015 	stw	r7,0(r16)
   65af4:	a0800217 	ldw	r2,8(r20)
   65af8:	b72d883a 	add	r22,r22,fp
   65afc:	9725c83a 	sub	r18,r18,fp
   65b00:	14e7c83a 	sub	r19,r2,r19
   65b04:	a4c00215 	stw	r19,8(r20)
   65b08:	983fc426 	beq	r19,zero,65a1c <__sfvwrite_r+0xc4>
   65b0c:	8080030b 	ldhu	r2,12(r16)
   65b10:	903fdf1e 	bne	r18,zero,65a90 <__sfvwrite_r+0x138>
   65b14:	8d800017 	ldw	r22,0(r17)
   65b18:	8c800117 	ldw	r18,4(r17)
   65b1c:	8c400204 	addi	r17,r17,8
   65b20:	003fda06 	br	65a8c <__sfvwrite_r+0x134>
   65b24:	8cc00017 	ldw	r19,0(r17)
   65b28:	8c800117 	ldw	r18,4(r17)
   65b2c:	8c400204 	addi	r17,r17,8
   65b30:	003faa06 	br	659dc <__sfvwrite_r+0x84>
   65b34:	0067d540 	call	67d54 <_realloc_r>
   65b38:	102f883a 	mov	r23,r2
   65b3c:	10009f1e 	bne	r2,zero,65dbc <__sfvwrite_r+0x464>
   65b40:	81400417 	ldw	r5,16(r16)
   65b44:	a809883a 	mov	r4,r21
   65b48:	00656880 	call	65688 <_free_r>
   65b4c:	00800304 	movi	r2,12
   65b50:	a8800015 	stw	r2,0(r21)
   65b54:	80c0030b 	ldhu	r3,12(r16)
   65b58:	00bfffc4 	movi	r2,-1
   65b5c:	18c01014 	ori	r3,r3,64
   65b60:	80c0030d 	sth	r3,12(r16)
   65b64:	003fae06 	br	65a20 <__sfvwrite_r+0xc8>
   65b68:	0007883a 	mov	r3,zero
   65b6c:	0039883a 	mov	fp,zero
   65b70:	0025883a 	mov	r18,zero
   65b74:	90001e26 	beq	r18,zero,65bf0 <__sfvwrite_r+0x298>
   65b78:	18006526 	beq	r3,zero,65d10 <__sfvwrite_r+0x3b8>
   65b7c:	b02f883a 	mov	r23,r22
   65b80:	9580012e 	bgeu	r18,r22,65b88 <__sfvwrite_r+0x230>
   65b84:	902f883a 	mov	r23,r18
   65b88:	81000017 	ldw	r4,0(r16)
   65b8c:	80800417 	ldw	r2,16(r16)
   65b90:	84c00217 	ldw	r19,8(r16)
   65b94:	81c00517 	ldw	r7,20(r16)
   65b98:	1100022e 	bgeu	r2,r4,65ba4 <__sfvwrite_r+0x24c>
   65b9c:	99e7883a 	add	r19,r19,r7
   65ba0:	9dc01816 	blt	r19,r23,65c04 <__sfvwrite_r+0x2ac>
   65ba4:	b9c03b16 	blt	r23,r7,65c94 <__sfvwrite_r+0x33c>
   65ba8:	80800917 	ldw	r2,36(r16)
   65bac:	81400717 	ldw	r5,28(r16)
   65bb0:	a809883a 	mov	r4,r21
   65bb4:	d8c00015 	stw	r3,0(sp)
   65bb8:	e00d883a 	mov	r6,fp
   65bbc:	103ee83a 	callr	r2
   65bc0:	1027883a 	mov	r19,r2
   65bc4:	d8c00017 	ldw	r3,0(sp)
   65bc8:	00bfe20e 	bge	zero,r2,65b54 <__sfvwrite_r+0x1fc>
   65bcc:	b4edc83a 	sub	r22,r22,r19
   65bd0:	b0001a26 	beq	r22,zero,65c3c <__sfvwrite_r+0x2e4>
   65bd4:	a0800217 	ldw	r2,8(r20)
   65bd8:	e4f9883a 	add	fp,fp,r19
   65bdc:	94e5c83a 	sub	r18,r18,r19
   65be0:	14e7c83a 	sub	r19,r2,r19
   65be4:	a4c00215 	stw	r19,8(r20)
   65be8:	983f8c26 	beq	r19,zero,65a1c <__sfvwrite_r+0xc4>
   65bec:	903fe21e 	bne	r18,zero,65b78 <__sfvwrite_r+0x220>
   65bf0:	8f000017 	ldw	fp,0(r17)
   65bf4:	8c800117 	ldw	r18,4(r17)
   65bf8:	0007883a 	mov	r3,zero
   65bfc:	8c400204 	addi	r17,r17,8
   65c00:	003fdc06 	br	65b74 <__sfvwrite_r+0x21c>
   65c04:	e00b883a 	mov	r5,fp
   65c08:	980d883a 	mov	r6,r19
   65c0c:	d8c00015 	stw	r3,0(sp)
   65c10:	0066a9c0 	call	66a9c <memmove>
   65c14:	80800017 	ldw	r2,0(r16)
   65c18:	a809883a 	mov	r4,r21
   65c1c:	800b883a 	mov	r5,r16
   65c20:	14c5883a 	add	r2,r2,r19
   65c24:	80800015 	stw	r2,0(r16)
   65c28:	00650480 	call	65048 <_fflush_r>
   65c2c:	d8c00017 	ldw	r3,0(sp)
   65c30:	103fc81e 	bne	r2,zero,65b54 <__sfvwrite_r+0x1fc>
   65c34:	b4edc83a 	sub	r22,r22,r19
   65c38:	b03fe61e 	bne	r22,zero,65bd4 <__sfvwrite_r+0x27c>
   65c3c:	a809883a 	mov	r4,r21
   65c40:	800b883a 	mov	r5,r16
   65c44:	00650480 	call	65048 <_fflush_r>
   65c48:	103fc21e 	bne	r2,zero,65b54 <__sfvwrite_r+0x1fc>
   65c4c:	0007883a 	mov	r3,zero
   65c50:	003fe006 	br	65bd4 <__sfvwrite_r+0x27c>
   65c54:	81000017 	ldw	r4,0(r16)
   65c58:	80800417 	ldw	r2,16(r16)
   65c5c:	1100022e 	bgeu	r2,r4,65c68 <__sfvwrite_r+0x310>
   65c60:	9839883a 	mov	fp,r19
   65c64:	9c806036 	bltu	r19,r18,65de8 <__sfvwrite_r+0x490>
   65c68:	81c00517 	ldw	r7,20(r16)
   65c6c:	91c01c36 	bltu	r18,r7,65ce0 <__sfvwrite_r+0x388>
   65c70:	80800917 	ldw	r2,36(r16)
   65c74:	81400717 	ldw	r5,28(r16)
   65c78:	a809883a 	mov	r4,r21
   65c7c:	b00d883a 	mov	r6,r22
   65c80:	103ee83a 	callr	r2
   65c84:	1027883a 	mov	r19,r2
   65c88:	00bfb20e 	bge	zero,r2,65b54 <__sfvwrite_r+0x1fc>
   65c8c:	1039883a 	mov	fp,r2
   65c90:	003f9806 	br	65af4 <__sfvwrite_r+0x19c>
   65c94:	b80d883a 	mov	r6,r23
   65c98:	e00b883a 	mov	r5,fp
   65c9c:	d8c00015 	stw	r3,0(sp)
   65ca0:	0066a9c0 	call	66a9c <memmove>
   65ca4:	80800217 	ldw	r2,8(r16)
   65ca8:	81000017 	ldw	r4,0(r16)
   65cac:	b827883a 	mov	r19,r23
   65cb0:	15c5c83a 	sub	r2,r2,r23
   65cb4:	25ef883a 	add	r23,r4,r23
   65cb8:	80800215 	stw	r2,8(r16)
   65cbc:	85c00015 	stw	r23,0(r16)
   65cc0:	d8c00017 	ldw	r3,0(sp)
   65cc4:	003fc106 	br	65bcc <__sfvwrite_r+0x274>
   65cc8:	81000017 	ldw	r4,0(r16)
   65ccc:	902f883a 	mov	r23,r18
   65cd0:	9039883a 	mov	fp,r18
   65cd4:	9027883a 	mov	r19,r18
   65cd8:	900f883a 	mov	r7,r18
   65cdc:	003f7a06 	br	65ac8 <__sfvwrite_r+0x170>
   65ce0:	b00b883a 	mov	r5,r22
   65ce4:	900d883a 	mov	r6,r18
   65ce8:	0066a9c0 	call	66a9c <memmove>
   65cec:	80c00217 	ldw	r3,8(r16)
   65cf0:	80800017 	ldw	r2,0(r16)
   65cf4:	9027883a 	mov	r19,r18
   65cf8:	1c87c83a 	sub	r3,r3,r18
   65cfc:	1485883a 	add	r2,r2,r18
   65d00:	80c00215 	stw	r3,8(r16)
   65d04:	80800015 	stw	r2,0(r16)
   65d08:	9039883a 	mov	fp,r18
   65d0c:	003f7906 	br	65af4 <__sfvwrite_r+0x19c>
   65d10:	e009883a 	mov	r4,fp
   65d14:	01400284 	movi	r5,10
   65d18:	900d883a 	mov	r6,r18
   65d1c:	00669a40 	call	669a4 <memchr>
   65d20:	10003c26 	beq	r2,zero,65e14 <__sfvwrite_r+0x4bc>
   65d24:	15800044 	addi	r22,r2,1
   65d28:	b72dc83a 	sub	r22,r22,fp
   65d2c:	00c00044 	movi	r3,1
   65d30:	003f9206 	br	65b7c <__sfvwrite_r+0x224>
   65d34:	81000517 	ldw	r4,20(r16)
   65d38:	81400417 	ldw	r5,16(r16)
   65d3c:	80c00017 	ldw	r3,0(r16)
   65d40:	210d883a 	add	r6,r4,r4
   65d44:	3109883a 	add	r4,r6,r4
   65d48:	2026d7fa 	srli	r19,r4,31
   65d4c:	1979c83a 	sub	fp,r3,r5
   65d50:	e1800044 	addi	r6,fp,1
   65d54:	9909883a 	add	r4,r19,r4
   65d58:	2027d07a 	srai	r19,r4,1
   65d5c:	3489883a 	add	r4,r6,r18
   65d60:	980d883a 	mov	r6,r19
   65d64:	9900022e 	bgeu	r19,r4,65d70 <__sfvwrite_r+0x418>
   65d68:	2027883a 	mov	r19,r4
   65d6c:	200d883a 	mov	r6,r4
   65d70:	1081000c 	andi	r2,r2,1024
   65d74:	10bfffcc 	andi	r2,r2,65535
   65d78:	10a0001c 	xori	r2,r2,32768
   65d7c:	10a00004 	addi	r2,r2,-32768
   65d80:	a809883a 	mov	r4,r21
   65d84:	103f6b26 	beq	r2,zero,65b34 <__sfvwrite_r+0x1dc>
   65d88:	300b883a 	mov	r5,r6
   65d8c:	00662200 	call	66220 <_malloc_r>
   65d90:	102f883a 	mov	r23,r2
   65d94:	103f6d26 	beq	r2,zero,65b4c <__sfvwrite_r+0x1f4>
   65d98:	81400417 	ldw	r5,16(r16)
   65d9c:	1009883a 	mov	r4,r2
   65da0:	e00d883a 	mov	r6,fp
   65da4:	00614dc0 	call	614dc <memcpy>
   65da8:	8080030b 	ldhu	r2,12(r16)
   65dac:	00fedfc4 	movi	r3,-1153
   65db0:	10c4703a 	and	r2,r2,r3
   65db4:	10802014 	ori	r2,r2,128
   65db8:	8080030d 	sth	r2,12(r16)
   65dbc:	bf09883a 	add	r4,r23,fp
   65dc0:	9f07c83a 	sub	r3,r19,fp
   65dc4:	85c00415 	stw	r23,16(r16)
   65dc8:	84c00515 	stw	r19,20(r16)
   65dcc:	81000015 	stw	r4,0(r16)
   65dd0:	902f883a 	mov	r23,r18
   65dd4:	80c00215 	stw	r3,8(r16)
   65dd8:	9039883a 	mov	fp,r18
   65ddc:	9027883a 	mov	r19,r18
   65de0:	900f883a 	mov	r7,r18
   65de4:	003f3806 	br	65ac8 <__sfvwrite_r+0x170>
   65de8:	b00b883a 	mov	r5,r22
   65dec:	980d883a 	mov	r6,r19
   65df0:	0066a9c0 	call	66a9c <memmove>
   65df4:	80800017 	ldw	r2,0(r16)
   65df8:	a809883a 	mov	r4,r21
   65dfc:	800b883a 	mov	r5,r16
   65e00:	14c5883a 	add	r2,r2,r19
   65e04:	80800015 	stw	r2,0(r16)
   65e08:	00650480 	call	65048 <_fflush_r>
   65e0c:	103f3926 	beq	r2,zero,65af4 <__sfvwrite_r+0x19c>
   65e10:	003f5006 	br	65b54 <__sfvwrite_r+0x1fc>
   65e14:	95800044 	addi	r22,r18,1
   65e18:	00c00044 	movi	r3,1
   65e1c:	003f5706 	br	65b7c <__sfvwrite_r+0x224>
   65e20:	80c0030b 	ldhu	r3,12(r16)
   65e24:	00bfffc4 	movi	r2,-1
   65e28:	18c01014 	ori	r3,r3,64
   65e2c:	80c0030d 	sth	r3,12(r16)
   65e30:	00c00244 	movi	r3,9
   65e34:	a8c00015 	stw	r3,0(r21)
   65e38:	003ef906 	br	65a20 <__sfvwrite_r+0xc8>

00065e3c <_fwalk>:
   65e3c:	defff904 	addi	sp,sp,-28
   65e40:	dcc00315 	stw	r19,12(sp)
   65e44:	24c0b804 	addi	r19,r4,736
   65e48:	dd400515 	stw	r21,20(sp)
   65e4c:	dd000415 	stw	r20,16(sp)
   65e50:	dfc00615 	stw	ra,24(sp)
   65e54:	dc800215 	stw	r18,8(sp)
   65e58:	dc400115 	stw	r17,4(sp)
   65e5c:	dc000015 	stw	r16,0(sp)
   65e60:	282b883a 	mov	r21,r5
   65e64:	0029883a 	mov	r20,zero
   65e68:	006550c0 	call	6550c <__sfp_lock_acquire>
   65e6c:	98001226 	beq	r19,zero,65eb8 <_fwalk+0x7c>
   65e70:	04bfffc4 	movi	r18,-1
   65e74:	9c400117 	ldw	r17,4(r19)
   65e78:	9c000217 	ldw	r16,8(r19)
   65e7c:	8c7fffc4 	addi	r17,r17,-1
   65e80:	88000b16 	blt	r17,zero,65eb0 <_fwalk+0x74>
   65e84:	84000304 	addi	r16,r16,12
   65e88:	80c0000f 	ldh	r3,0(r16)
   65e8c:	8c7fffc4 	addi	r17,r17,-1
   65e90:	813ffd04 	addi	r4,r16,-12
   65e94:	18000426 	beq	r3,zero,65ea8 <_fwalk+0x6c>
   65e98:	80c0008f 	ldh	r3,2(r16)
   65e9c:	1c800226 	beq	r3,r18,65ea8 <_fwalk+0x6c>
   65ea0:	a83ee83a 	callr	r21
   65ea4:	a0a8b03a 	or	r20,r20,r2
   65ea8:	84001704 	addi	r16,r16,92
   65eac:	8cbff61e 	bne	r17,r18,65e88 <_fwalk+0x4c>
   65eb0:	9cc00017 	ldw	r19,0(r19)
   65eb4:	983fef1e 	bne	r19,zero,65e74 <_fwalk+0x38>
   65eb8:	00655100 	call	65510 <__sfp_lock_release>
   65ebc:	a005883a 	mov	r2,r20
   65ec0:	dfc00617 	ldw	ra,24(sp)
   65ec4:	dd400517 	ldw	r21,20(sp)
   65ec8:	dd000417 	ldw	r20,16(sp)
   65ecc:	dcc00317 	ldw	r19,12(sp)
   65ed0:	dc800217 	ldw	r18,8(sp)
   65ed4:	dc400117 	ldw	r17,4(sp)
   65ed8:	dc000017 	ldw	r16,0(sp)
   65edc:	dec00704 	addi	sp,sp,28
   65ee0:	f800283a 	ret

00065ee4 <_fwalk_reent>:
   65ee4:	defff804 	addi	sp,sp,-32
   65ee8:	dcc00315 	stw	r19,12(sp)
   65eec:	24c0b804 	addi	r19,r4,736
   65ef0:	dd800615 	stw	r22,24(sp)
   65ef4:	dd400515 	stw	r21,20(sp)
   65ef8:	dd000415 	stw	r20,16(sp)
   65efc:	dfc00715 	stw	ra,28(sp)
   65f00:	dc800215 	stw	r18,8(sp)
   65f04:	dc400115 	stw	r17,4(sp)
   65f08:	dc000015 	stw	r16,0(sp)
   65f0c:	2029883a 	mov	r20,r4
   65f10:	282b883a 	mov	r21,r5
   65f14:	002d883a 	mov	r22,zero
   65f18:	006550c0 	call	6550c <__sfp_lock_acquire>
   65f1c:	98001326 	beq	r19,zero,65f6c <_fwalk_reent+0x88>
   65f20:	04bfffc4 	movi	r18,-1
   65f24:	9c400117 	ldw	r17,4(r19)
   65f28:	9c000217 	ldw	r16,8(r19)
   65f2c:	8c7fffc4 	addi	r17,r17,-1
   65f30:	88000c16 	blt	r17,zero,65f64 <_fwalk_reent+0x80>
   65f34:	84000304 	addi	r16,r16,12
   65f38:	80c0000f 	ldh	r3,0(r16)
   65f3c:	8c7fffc4 	addi	r17,r17,-1
   65f40:	817ffd04 	addi	r5,r16,-12
   65f44:	18000526 	beq	r3,zero,65f5c <_fwalk_reent+0x78>
   65f48:	80c0008f 	ldh	r3,2(r16)
   65f4c:	a009883a 	mov	r4,r20
   65f50:	1c800226 	beq	r3,r18,65f5c <_fwalk_reent+0x78>
   65f54:	a83ee83a 	callr	r21
   65f58:	b0acb03a 	or	r22,r22,r2
   65f5c:	84001704 	addi	r16,r16,92
   65f60:	8cbff51e 	bne	r17,r18,65f38 <_fwalk_reent+0x54>
   65f64:	9cc00017 	ldw	r19,0(r19)
   65f68:	983fee1e 	bne	r19,zero,65f24 <_fwalk_reent+0x40>
   65f6c:	00655100 	call	65510 <__sfp_lock_release>
   65f70:	b005883a 	mov	r2,r22
   65f74:	dfc00717 	ldw	ra,28(sp)
   65f78:	dd800617 	ldw	r22,24(sp)
   65f7c:	dd400517 	ldw	r21,20(sp)
   65f80:	dd000417 	ldw	r20,16(sp)
   65f84:	dcc00317 	ldw	r19,12(sp)
   65f88:	dc800217 	ldw	r18,8(sp)
   65f8c:	dc400117 	ldw	r17,4(sp)
   65f90:	dc000017 	ldw	r16,0(sp)
   65f94:	dec00804 	addi	sp,sp,32
   65f98:	f800283a 	ret

00065f9c <_setlocale_r>:
   65f9c:	defffc04 	addi	sp,sp,-16
   65fa0:	dc800215 	stw	r18,8(sp)
   65fa4:	dc400115 	stw	r17,4(sp)
   65fa8:	dc000015 	stw	r16,0(sp)
   65fac:	dfc00315 	stw	ra,12(sp)
   65fb0:	3021883a 	mov	r16,r6
   65fb4:	2023883a 	mov	r17,r4
   65fb8:	2825883a 	mov	r18,r5
   65fbc:	30001626 	beq	r6,zero,66018 <_setlocale_r+0x7c>
   65fc0:	3009883a 	mov	r4,r6
   65fc4:	014001f4 	movhi	r5,7
   65fc8:	29773104 	addi	r5,r5,-9020
   65fcc:	00685580 	call	68558 <strcmp>
   65fd0:	10000a1e 	bne	r2,zero,65ffc <_setlocale_r+0x60>
   65fd4:	8c800c15 	stw	r18,48(r17)
   65fd8:	8c000d15 	stw	r16,52(r17)
   65fdc:	008001f4 	movhi	r2,7
   65fe0:	10b73104 	addi	r2,r2,-9020
   65fe4:	dfc00317 	ldw	ra,12(sp)
   65fe8:	dc800217 	ldw	r18,8(sp)
   65fec:	dc400117 	ldw	r17,4(sp)
   65ff0:	dc000017 	ldw	r16,0(sp)
   65ff4:	dec00404 	addi	sp,sp,16
   65ff8:	f800283a 	ret
   65ffc:	8009883a 	mov	r4,r16
   66000:	014001f4 	movhi	r5,7
   66004:	29771c04 	addi	r5,r5,-9104
   66008:	00685580 	call	68558 <strcmp>
   6600c:	103ff126 	beq	r2,zero,65fd4 <_setlocale_r+0x38>
   66010:	0005883a 	mov	r2,zero
   66014:	003ff306 	br	65fe4 <_setlocale_r+0x48>
   66018:	008001f4 	movhi	r2,7
   6601c:	10b73104 	addi	r2,r2,-9020
   66020:	dfc00317 	ldw	ra,12(sp)
   66024:	dc800217 	ldw	r18,8(sp)
   66028:	dc400117 	ldw	r17,4(sp)
   6602c:	dc000017 	ldw	r16,0(sp)
   66030:	dec00404 	addi	sp,sp,16
   66034:	f800283a 	ret

00066038 <__locale_charset>:
   66038:	008001f4 	movhi	r2,7
   6603c:	10b73204 	addi	r2,r2,-9016
   66040:	f800283a 	ret

00066044 <_localeconv_r>:
   66044:	008001f4 	movhi	r2,7
   66048:	10b73604 	addi	r2,r2,-9000
   6604c:	f800283a 	ret

00066050 <setlocale>:
   66050:	00c001f4 	movhi	r3,7
   66054:	18fe7104 	addi	r3,r3,-1596
   66058:	2005883a 	mov	r2,r4
   6605c:	19000017 	ldw	r4,0(r3)
   66060:	280d883a 	mov	r6,r5
   66064:	100b883a 	mov	r5,r2
   66068:	0065f9c1 	jmpi	65f9c <_setlocale_r>

0006606c <localeconv>:
   6606c:	008001f4 	movhi	r2,7
   66070:	10b73604 	addi	r2,r2,-9000
   66074:	f800283a 	ret

00066078 <__smakebuf_r>:
   66078:	2880030b 	ldhu	r2,12(r5)
   6607c:	deffed04 	addi	sp,sp,-76
   66080:	dc401015 	stw	r17,64(sp)
   66084:	10c0008c 	andi	r3,r2,2
   66088:	18ffffcc 	andi	r3,r3,65535
   6608c:	18e0001c 	xori	r3,r3,32768
   66090:	dc000f15 	stw	r16,60(sp)
   66094:	dfc01215 	stw	ra,72(sp)
   66098:	dc801115 	stw	r18,68(sp)
   6609c:	18e00004 	addi	r3,r3,-32768
   660a0:	2821883a 	mov	r16,r5
   660a4:	2023883a 	mov	r17,r4
   660a8:	1800381e 	bne	r3,zero,6618c <__smakebuf_r+0x114>
   660ac:	2940038f 	ldh	r5,14(r5)
   660b0:	28002d16 	blt	r5,zero,66168 <__smakebuf_r+0xf0>
   660b4:	d80d883a 	mov	r6,sp
   660b8:	00688e80 	call	688e8 <_fstat_r>
   660bc:	10002916 	blt	r2,zero,66164 <__smakebuf_r+0xec>
   660c0:	d8800117 	ldw	r2,4(sp)
   660c4:	00e00014 	movui	r3,32768
   660c8:	10bc000c 	andi	r2,r2,61440
   660cc:	10c03c26 	beq	r2,r3,661c0 <__smakebuf_r+0x148>
   660d0:	80c0030b 	ldhu	r3,12(r16)
   660d4:	18c20014 	ori	r3,r3,2048
   660d8:	80c0030d 	sth	r3,12(r16)
   660dc:	00c80004 	movi	r3,8192
   660e0:	10c00c1e 	bne	r2,r3,66114 <__smakebuf_r+0x9c>
   660e4:	8140038f 	ldh	r5,14(r16)
   660e8:	8809883a 	mov	r4,r17
   660ec:	00689500 	call	68950 <_isatty_r>
   660f0:	10000826 	beq	r2,zero,66114 <__smakebuf_r+0x9c>
   660f4:	80c0030b 	ldhu	r3,12(r16)
   660f8:	808010c4 	addi	r2,r16,67
   660fc:	80800015 	stw	r2,0(r16)
   66100:	18c00054 	ori	r3,r3,1
   66104:	80800415 	stw	r2,16(r16)
   66108:	00800044 	movi	r2,1
   6610c:	80c0030d 	sth	r3,12(r16)
   66110:	80800515 	stw	r2,20(r16)
   66114:	04810004 	movi	r18,1024
   66118:	8809883a 	mov	r4,r17
   6611c:	900b883a 	mov	r5,r18
   66120:	00662200 	call	66220 <_malloc_r>
   66124:	10003026 	beq	r2,zero,661e8 <__smakebuf_r+0x170>
   66128:	80c0030b 	ldhu	r3,12(r16)
   6612c:	010001b4 	movhi	r4,6
   66130:	21149c04 	addi	r4,r4,21104
   66134:	89000f15 	stw	r4,60(r17)
   66138:	18c02014 	ori	r3,r3,128
   6613c:	80c0030d 	sth	r3,12(r16)
   66140:	80800015 	stw	r2,0(r16)
   66144:	80800415 	stw	r2,16(r16)
   66148:	84800515 	stw	r18,20(r16)
   6614c:	dfc01217 	ldw	ra,72(sp)
   66150:	dc801117 	ldw	r18,68(sp)
   66154:	dc401017 	ldw	r17,64(sp)
   66158:	dc000f17 	ldw	r16,60(sp)
   6615c:	dec01304 	addi	sp,sp,76
   66160:	f800283a 	ret
   66164:	8080030b 	ldhu	r2,12(r16)
   66168:	10c0200c 	andi	r3,r2,128
   6616c:	18ffffcc 	andi	r3,r3,65535
   66170:	18e0001c 	xori	r3,r3,32768
   66174:	18e00004 	addi	r3,r3,-32768
   66178:	18000f1e 	bne	r3,zero,661b8 <__smakebuf_r+0x140>
   6617c:	04810004 	movi	r18,1024
   66180:	10820014 	ori	r2,r2,2048
   66184:	8080030d 	sth	r2,12(r16)
   66188:	003fe306 	br	66118 <__smakebuf_r+0xa0>
   6618c:	288010c4 	addi	r2,r5,67
   66190:	28800015 	stw	r2,0(r5)
   66194:	28800415 	stw	r2,16(r5)
   66198:	00800044 	movi	r2,1
   6619c:	28800515 	stw	r2,20(r5)
   661a0:	dfc01217 	ldw	ra,72(sp)
   661a4:	dc801117 	ldw	r18,68(sp)
   661a8:	dc401017 	ldw	r17,64(sp)
   661ac:	dc000f17 	ldw	r16,60(sp)
   661b0:	dec01304 	addi	sp,sp,76
   661b4:	f800283a 	ret
   661b8:	04801004 	movi	r18,64
   661bc:	003ff006 	br	66180 <__smakebuf_r+0x108>
   661c0:	81000a17 	ldw	r4,40(r16)
   661c4:	00c001f4 	movhi	r3,7
   661c8:	18e13d04 	addi	r3,r3,-31500
   661cc:	20ffc01e 	bne	r4,r3,660d0 <__smakebuf_r+0x58>
   661d0:	8080030b 	ldhu	r2,12(r16)
   661d4:	00c10004 	movi	r3,1024
   661d8:	80c01315 	stw	r3,76(r16)
   661dc:	10c4b03a 	or	r2,r2,r3
   661e0:	8080030d 	sth	r2,12(r16)
   661e4:	003fcb06 	br	66114 <__smakebuf_r+0x9c>
   661e8:	8080030b 	ldhu	r2,12(r16)
   661ec:	10c0800c 	andi	r3,r2,512
   661f0:	18ffffcc 	andi	r3,r3,65535
   661f4:	18e0001c 	xori	r3,r3,32768
   661f8:	18e00004 	addi	r3,r3,-32768
   661fc:	183fd31e 	bne	r3,zero,6614c <__smakebuf_r+0xd4>
   66200:	10800094 	ori	r2,r2,2
   66204:	80c010c4 	addi	r3,r16,67
   66208:	8080030d 	sth	r2,12(r16)
   6620c:	00800044 	movi	r2,1
   66210:	80c00015 	stw	r3,0(r16)
   66214:	80c00415 	stw	r3,16(r16)
   66218:	80800515 	stw	r2,20(r16)
   6621c:	003fcb06 	br	6614c <__smakebuf_r+0xd4>

00066220 <_malloc_r>:
   66220:	defff604 	addi	sp,sp,-40
   66224:	dc800215 	stw	r18,8(sp)
   66228:	dfc00915 	stw	ra,36(sp)
   6622c:	df000815 	stw	fp,32(sp)
   66230:	ddc00715 	stw	r23,28(sp)
   66234:	dd800615 	stw	r22,24(sp)
   66238:	dd400515 	stw	r21,20(sp)
   6623c:	dd000415 	stw	r20,16(sp)
   66240:	dcc00315 	stw	r19,12(sp)
   66244:	dc400115 	stw	r17,4(sp)
   66248:	dc000015 	stw	r16,0(sp)
   6624c:	288002c4 	addi	r2,r5,11
   66250:	00c00584 	movi	r3,22
   66254:	2025883a 	mov	r18,r4
   66258:	18802b2e 	bgeu	r3,r2,66308 <_malloc_r+0xe8>
   6625c:	047ffe04 	movi	r17,-8
   66260:	1462703a 	and	r17,r2,r17
   66264:	88002a16 	blt	r17,zero,66310 <_malloc_r+0xf0>
   66268:	89402936 	bltu	r17,r5,66310 <_malloc_r+0xf0>
   6626c:	9009883a 	mov	r4,r18
   66270:	006b1740 	call	6b174 <__malloc_lock>
   66274:	00807dc4 	movi	r2,503
   66278:	14402936 	bltu	r2,r17,66320 <_malloc_r+0x100>
   6627c:	8808d0fa 	srli	r4,r17,3
   66280:	04c001f4 	movhi	r19,7
   66284:	9cf8ec04 	addi	r19,r19,-7248
   66288:	2105883a 	add	r2,r4,r4
   6628c:	1085883a 	add	r2,r2,r2
   66290:	1085883a 	add	r2,r2,r2
   66294:	9885883a 	add	r2,r19,r2
   66298:	14000317 	ldw	r16,12(r2)
   6629c:	80815526 	beq	r16,r2,667f4 <_malloc_r+0x5d4>
   662a0:	81000117 	ldw	r4,4(r16)
   662a4:	00bfff04 	movi	r2,-4
   662a8:	80c00317 	ldw	r3,12(r16)
   662ac:	2084703a 	and	r2,r4,r2
   662b0:	8085883a 	add	r2,r16,r2
   662b4:	11800117 	ldw	r6,4(r2)
   662b8:	81400217 	ldw	r5,8(r16)
   662bc:	9009883a 	mov	r4,r18
   662c0:	31800054 	ori	r6,r6,1
   662c4:	11800115 	stw	r6,4(r2)
   662c8:	28c00315 	stw	r3,12(r5)
   662cc:	19400215 	stw	r5,8(r3)
   662d0:	006b1940 	call	6b194 <__malloc_unlock>
   662d4:	80800204 	addi	r2,r16,8
   662d8:	dfc00917 	ldw	ra,36(sp)
   662dc:	df000817 	ldw	fp,32(sp)
   662e0:	ddc00717 	ldw	r23,28(sp)
   662e4:	dd800617 	ldw	r22,24(sp)
   662e8:	dd400517 	ldw	r21,20(sp)
   662ec:	dd000417 	ldw	r20,16(sp)
   662f0:	dcc00317 	ldw	r19,12(sp)
   662f4:	dc800217 	ldw	r18,8(sp)
   662f8:	dc400117 	ldw	r17,4(sp)
   662fc:	dc000017 	ldw	r16,0(sp)
   66300:	dec00a04 	addi	sp,sp,40
   66304:	f800283a 	ret
   66308:	04400404 	movi	r17,16
   6630c:	897fd72e 	bgeu	r17,r5,6626c <_malloc_r+0x4c>
   66310:	00800304 	movi	r2,12
   66314:	90800015 	stw	r2,0(r18)
   66318:	0005883a 	mov	r2,zero
   6631c:	003fee06 	br	662d8 <_malloc_r+0xb8>
   66320:	8808d27a 	srli	r4,r17,9
   66324:	20007126 	beq	r4,zero,664ec <_malloc_r+0x2cc>
   66328:	00800104 	movi	r2,4
   6632c:	1100eb36 	bltu	r2,r4,666dc <_malloc_r+0x4bc>
   66330:	8808d1ba 	srli	r4,r17,6
   66334:	21000e04 	addi	r4,r4,56
   66338:	210b883a 	add	r5,r4,r4
   6633c:	294b883a 	add	r5,r5,r5
   66340:	294b883a 	add	r5,r5,r5
   66344:	04c001f4 	movhi	r19,7
   66348:	9cf8ec04 	addi	r19,r19,-7248
   6634c:	994b883a 	add	r5,r19,r5
   66350:	2c000317 	ldw	r16,12(r5)
   66354:	2c000e26 	beq	r5,r16,66390 <_malloc_r+0x170>
   66358:	80c00117 	ldw	r3,4(r16)
   6635c:	01ffff04 	movi	r7,-4
   66360:	018003c4 	movi	r6,15
   66364:	19c6703a 	and	r3,r3,r7
   66368:	1c45c83a 	sub	r2,r3,r17
   6636c:	30800716 	blt	r6,r2,6638c <_malloc_r+0x16c>
   66370:	1000610e 	bge	r2,zero,664f8 <_malloc_r+0x2d8>
   66374:	84000317 	ldw	r16,12(r16)
   66378:	2c000526 	beq	r5,r16,66390 <_malloc_r+0x170>
   6637c:	80c00117 	ldw	r3,4(r16)
   66380:	19c6703a 	and	r3,r3,r7
   66384:	1c45c83a 	sub	r2,r3,r17
   66388:	30bff90e 	bge	r6,r2,66370 <_malloc_r+0x150>
   6638c:	213fffc4 	addi	r4,r4,-1
   66390:	21000044 	addi	r4,r4,1
   66394:	9c000417 	ldw	r16,16(r19)
   66398:	00c001f4 	movhi	r3,7
   6639c:	18f8ec04 	addi	r3,r3,-7248
   663a0:	1a400204 	addi	r9,r3,8
   663a4:	8240ff26 	beq	r16,r9,667a4 <_malloc_r+0x584>
   663a8:	81400117 	ldw	r5,4(r16)
   663ac:	00bfff04 	movi	r2,-4
   663b0:	018003c4 	movi	r6,15
   663b4:	2884703a 	and	r2,r5,r2
   663b8:	144bc83a 	sub	r5,r2,r17
   663bc:	3140ea16 	blt	r6,r5,66768 <_malloc_r+0x548>
   663c0:	1a400515 	stw	r9,20(r3)
   663c4:	1a400415 	stw	r9,16(r3)
   663c8:	2800570e 	bge	r5,zero,66528 <_malloc_r+0x308>
   663cc:	01407fc4 	movi	r5,511
   663d0:	2880ca36 	bltu	r5,r2,666fc <_malloc_r+0x4dc>
   663d4:	1004d0fa 	srli	r2,r2,3
   663d8:	02000044 	movi	r8,1
   663dc:	19c00117 	ldw	r7,4(r3)
   663e0:	108b883a 	add	r5,r2,r2
   663e4:	294b883a 	add	r5,r5,r5
   663e8:	1005d0ba 	srai	r2,r2,2
   663ec:	294b883a 	add	r5,r5,r5
   663f0:	28cb883a 	add	r5,r5,r3
   663f4:	29800217 	ldw	r6,8(r5)
   663f8:	4084983a 	sll	r2,r8,r2
   663fc:	81400315 	stw	r5,12(r16)
   66400:	81800215 	stw	r6,8(r16)
   66404:	11c4b03a 	or	r2,r2,r7
   66408:	18800115 	stw	r2,4(r3)
   6640c:	2c000215 	stw	r16,8(r5)
   66410:	34000315 	stw	r16,12(r6)
   66414:	200bd0ba 	srai	r5,r4,2
   66418:	00c00044 	movi	r3,1
   6641c:	194a983a 	sll	r5,r3,r5
   66420:	11404936 	bltu	r2,r5,66548 <_malloc_r+0x328>
   66424:	1146703a 	and	r3,r2,r5
   66428:	18000a1e 	bne	r3,zero,66454 <_malloc_r+0x234>
   6642c:	00ffff04 	movi	r3,-4
   66430:	294b883a 	add	r5,r5,r5
   66434:	20c8703a 	and	r4,r4,r3
   66438:	1146703a 	and	r3,r2,r5
   6643c:	21000104 	addi	r4,r4,4
   66440:	1800041e 	bne	r3,zero,66454 <_malloc_r+0x234>
   66444:	294b883a 	add	r5,r5,r5
   66448:	1146703a 	and	r3,r2,r5
   6644c:	21000104 	addi	r4,r4,4
   66450:	183ffc26 	beq	r3,zero,66444 <_malloc_r+0x224>
   66454:	023fff04 	movi	r8,-4
   66458:	01c003c4 	movi	r7,15
   6645c:	2105883a 	add	r2,r4,r4
   66460:	1085883a 	add	r2,r2,r2
   66464:	1085883a 	add	r2,r2,r2
   66468:	9899883a 	add	r12,r19,r2
   6646c:	62800304 	addi	r10,r12,12
   66470:	2017883a 	mov	r11,r4
   66474:	54000017 	ldw	r16,0(r10)
   66478:	51bffd04 	addi	r6,r10,-12
   6647c:	8180041e 	bne	r16,r6,66490 <_malloc_r+0x270>
   66480:	0000ca06 	br	667ac <_malloc_r+0x58c>
   66484:	10001c0e 	bge	r2,zero,664f8 <_malloc_r+0x2d8>
   66488:	84000317 	ldw	r16,12(r16)
   6648c:	8180c726 	beq	r16,r6,667ac <_malloc_r+0x58c>
   66490:	80c00117 	ldw	r3,4(r16)
   66494:	1a06703a 	and	r3,r3,r8
   66498:	1c45c83a 	sub	r2,r3,r17
   6649c:	38bff90e 	bge	r7,r2,66484 <_malloc_r+0x264>
   664a0:	81000317 	ldw	r4,12(r16)
   664a4:	81400217 	ldw	r5,8(r16)
   664a8:	8447883a 	add	r3,r16,r17
   664ac:	8c400054 	ori	r17,r17,1
   664b0:	29000315 	stw	r4,12(r5)
   664b4:	21400215 	stw	r5,8(r4)
   664b8:	84400115 	stw	r17,4(r16)
   664bc:	1889883a 	add	r4,r3,r2
   664c0:	11400054 	ori	r5,r2,1
   664c4:	98c00515 	stw	r3,20(r19)
   664c8:	98c00415 	stw	r3,16(r19)
   664cc:	20800015 	stw	r2,0(r4)
   664d0:	1a400315 	stw	r9,12(r3)
   664d4:	1a400215 	stw	r9,8(r3)
   664d8:	19400115 	stw	r5,4(r3)
   664dc:	9009883a 	mov	r4,r18
   664e0:	006b1940 	call	6b194 <__malloc_unlock>
   664e4:	80800204 	addi	r2,r16,8
   664e8:	003f7b06 	br	662d8 <_malloc_r+0xb8>
   664ec:	8808d0fa 	srli	r4,r17,3
   664f0:	210b883a 	add	r5,r4,r4
   664f4:	003f9106 	br	6633c <_malloc_r+0x11c>
   664f8:	80c7883a 	add	r3,r16,r3
   664fc:	19400117 	ldw	r5,4(r3)
   66500:	80800317 	ldw	r2,12(r16)
   66504:	81000217 	ldw	r4,8(r16)
   66508:	29400054 	ori	r5,r5,1
   6650c:	19400115 	stw	r5,4(r3)
   66510:	20800315 	stw	r2,12(r4)
   66514:	11000215 	stw	r4,8(r2)
   66518:	9009883a 	mov	r4,r18
   6651c:	006b1940 	call	6b194 <__malloc_unlock>
   66520:	80800204 	addi	r2,r16,8
   66524:	003f6c06 	br	662d8 <_malloc_r+0xb8>
   66528:	8085883a 	add	r2,r16,r2
   6652c:	10c00117 	ldw	r3,4(r2)
   66530:	9009883a 	mov	r4,r18
   66534:	18c00054 	ori	r3,r3,1
   66538:	10c00115 	stw	r3,4(r2)
   6653c:	006b1940 	call	6b194 <__malloc_unlock>
   66540:	80800204 	addi	r2,r16,8
   66544:	003f6406 	br	662d8 <_malloc_r+0xb8>
   66548:	9c000217 	ldw	r16,8(r19)
   6654c:	00bfff04 	movi	r2,-4
   66550:	85400117 	ldw	r21,4(r16)
   66554:	a8aa703a 	and	r21,r21,r2
   66558:	ac400336 	bltu	r21,r17,66568 <_malloc_r+0x348>
   6655c:	ac45c83a 	sub	r2,r21,r17
   66560:	00c003c4 	movi	r3,15
   66564:	18805316 	blt	r3,r2,666b4 <_malloc_r+0x494>
   66568:	d5e6bc17 	ldw	r23,-25872(gp)
   6656c:	d0e00317 	ldw	r3,-32756(gp)
   66570:	00bfffc4 	movi	r2,-1
   66574:	8579883a 	add	fp,r16,r21
   66578:	8def883a 	add	r23,r17,r23
   6657c:	1880d226 	beq	r3,r2,668c8 <_malloc_r+0x6a8>
   66580:	bdc403c4 	addi	r23,r23,4111
   66584:	00bc0004 	movi	r2,-4096
   66588:	b8ae703a 	and	r23,r23,r2
   6658c:	9009883a 	mov	r4,r18
   66590:	b80b883a 	mov	r5,r23
   66594:	00683b40 	call	683b4 <_sbrk_r>
   66598:	1029883a 	mov	r20,r2
   6659c:	00bfffc4 	movi	r2,-1
   665a0:	a080d126 	beq	r20,r2,668e8 <_malloc_r+0x6c8>
   665a4:	a7009f36 	bltu	r20,fp,66824 <_malloc_r+0x604>
   665a8:	058001f4 	movhi	r22,7
   665ac:	b5853604 	addi	r22,r22,5336
   665b0:	b0800017 	ldw	r2,0(r22)
   665b4:	b885883a 	add	r2,r23,r2
   665b8:	b0800015 	stw	r2,0(r22)
   665bc:	e500cf26 	beq	fp,r20,668fc <_malloc_r+0x6dc>
   665c0:	d1200317 	ldw	r4,-32756(gp)
   665c4:	00ffffc4 	movi	r3,-1
   665c8:	20c0e026 	beq	r4,r3,6694c <_malloc_r+0x72c>
   665cc:	a739c83a 	sub	fp,r20,fp
   665d0:	1705883a 	add	r2,r2,fp
   665d4:	b0800015 	stw	r2,0(r22)
   665d8:	a08001cc 	andi	r2,r20,7
   665dc:	1000a526 	beq	r2,zero,66874 <_malloc_r+0x654>
   665e0:	a0a9c83a 	sub	r20,r20,r2
   665e4:	00c40204 	movi	r3,4104
   665e8:	a5000204 	addi	r20,r20,8
   665ec:	1885c83a 	sub	r2,r3,r2
   665f0:	a5c7883a 	add	r3,r20,r23
   665f4:	18c3ffcc 	andi	r3,r3,4095
   665f8:	10efc83a 	sub	r23,r2,r3
   665fc:	9009883a 	mov	r4,r18
   66600:	b80b883a 	mov	r5,r23
   66604:	00683b40 	call	683b4 <_sbrk_r>
   66608:	00ffffc4 	movi	r3,-1
   6660c:	10c0cc26 	beq	r2,r3,66940 <_malloc_r+0x720>
   66610:	1505c83a 	sub	r2,r2,r20
   66614:	b887883a 	add	r3,r23,r2
   66618:	18c00054 	ori	r3,r3,1
   6661c:	b0800017 	ldw	r2,0(r22)
   66620:	9d000215 	stw	r20,8(r19)
   66624:	a0c00115 	stw	r3,4(r20)
   66628:	b885883a 	add	r2,r23,r2
   6662c:	b0800015 	stw	r2,0(r22)
   66630:	84c00e26 	beq	r16,r19,6666c <_malloc_r+0x44c>
   66634:	00c003c4 	movi	r3,15
   66638:	1d40902e 	bgeu	r3,r21,6687c <_malloc_r+0x65c>
   6663c:	ad7ffd04 	addi	r21,r21,-12
   66640:	013ffe04 	movi	r4,-8
   66644:	a908703a 	and	r4,r21,r4
   66648:	810b883a 	add	r5,r16,r4
   6664c:	01800144 	movi	r6,5
   66650:	29800115 	stw	r6,4(r5)
   66654:	29800215 	stw	r6,8(r5)
   66658:	81400117 	ldw	r5,4(r16)
   6665c:	2940004c 	andi	r5,r5,1
   66660:	214ab03a 	or	r5,r4,r5
   66664:	81400115 	stw	r5,4(r16)
   66668:	1900ae36 	bltu	r3,r4,66924 <_malloc_r+0x704>
   6666c:	d0e6bb17 	ldw	r3,-25876(gp)
   66670:	1880012e 	bgeu	r3,r2,66678 <_malloc_r+0x458>
   66674:	d0a6bb15 	stw	r2,-25876(gp)
   66678:	d0e6ba17 	ldw	r3,-25880(gp)
   6667c:	9c000217 	ldw	r16,8(r19)
   66680:	1880012e 	bgeu	r3,r2,66688 <_malloc_r+0x468>
   66684:	d0a6ba15 	stw	r2,-25880(gp)
   66688:	80c00117 	ldw	r3,4(r16)
   6668c:	00bfff04 	movi	r2,-4
   66690:	1886703a 	and	r3,r3,r2
   66694:	1c45c83a 	sub	r2,r3,r17
   66698:	1c400236 	bltu	r3,r17,666a4 <_malloc_r+0x484>
   6669c:	00c003c4 	movi	r3,15
   666a0:	18800416 	blt	r3,r2,666b4 <_malloc_r+0x494>
   666a4:	9009883a 	mov	r4,r18
   666a8:	006b1940 	call	6b194 <__malloc_unlock>
   666ac:	0005883a 	mov	r2,zero
   666b0:	003f0906 	br	662d8 <_malloc_r+0xb8>
   666b4:	88c00054 	ori	r3,r17,1
   666b8:	10800054 	ori	r2,r2,1
   666bc:	80c00115 	stw	r3,4(r16)
   666c0:	8463883a 	add	r17,r16,r17
   666c4:	88800115 	stw	r2,4(r17)
   666c8:	9009883a 	mov	r4,r18
   666cc:	9c400215 	stw	r17,8(r19)
   666d0:	006b1940 	call	6b194 <__malloc_unlock>
   666d4:	80800204 	addi	r2,r16,8
   666d8:	003eff06 	br	662d8 <_malloc_r+0xb8>
   666dc:	00800504 	movi	r2,20
   666e0:	1100492e 	bgeu	r2,r4,66808 <_malloc_r+0x5e8>
   666e4:	00801504 	movi	r2,84
   666e8:	11005c36 	bltu	r2,r4,6685c <_malloc_r+0x63c>
   666ec:	8808d33a 	srli	r4,r17,12
   666f0:	21001b84 	addi	r4,r4,110
   666f4:	210b883a 	add	r5,r4,r4
   666f8:	003f1006 	br	6633c <_malloc_r+0x11c>
   666fc:	1006d27a 	srli	r3,r2,9
   66700:	01400104 	movi	r5,4
   66704:	28c0432e 	bgeu	r5,r3,66814 <_malloc_r+0x5f4>
   66708:	01400504 	movi	r5,20
   6670c:	28c07036 	bltu	r5,r3,668d0 <_malloc_r+0x6b0>
   66710:	194016c4 	addi	r5,r3,91
   66714:	294d883a 	add	r6,r5,r5
   66718:	318d883a 	add	r6,r6,r6
   6671c:	318d883a 	add	r6,r6,r6
   66720:	998d883a 	add	r6,r19,r6
   66724:	30c00217 	ldw	r3,8(r6)
   66728:	01c001f4 	movhi	r7,7
   6672c:	39f8ec04 	addi	r7,r7,-7248
   66730:	19805726 	beq	r3,r6,66890 <_malloc_r+0x670>
   66734:	01ffff04 	movi	r7,-4
   66738:	19400117 	ldw	r5,4(r3)
   6673c:	29ca703a 	and	r5,r5,r7
   66740:	1140022e 	bgeu	r2,r5,6674c <_malloc_r+0x52c>
   66744:	18c00217 	ldw	r3,8(r3)
   66748:	30fffb1e 	bne	r6,r3,66738 <_malloc_r+0x518>
   6674c:	19400317 	ldw	r5,12(r3)
   66750:	98800117 	ldw	r2,4(r19)
   66754:	81400315 	stw	r5,12(r16)
   66758:	80c00215 	stw	r3,8(r16)
   6675c:	2c000215 	stw	r16,8(r5)
   66760:	1c000315 	stw	r16,12(r3)
   66764:	003f2b06 	br	66414 <_malloc_r+0x1f4>
   66768:	8445883a 	add	r2,r16,r17
   6676c:	8c400054 	ori	r17,r17,1
   66770:	18800515 	stw	r2,20(r3)
   66774:	18800415 	stw	r2,16(r3)
   66778:	29000054 	ori	r4,r5,1
   6677c:	1147883a 	add	r3,r2,r5
   66780:	84400115 	stw	r17,4(r16)
   66784:	11000115 	stw	r4,4(r2)
   66788:	12400315 	stw	r9,12(r2)
   6678c:	12400215 	stw	r9,8(r2)
   66790:	19400015 	stw	r5,0(r3)
   66794:	9009883a 	mov	r4,r18
   66798:	006b1940 	call	6b194 <__malloc_unlock>
   6679c:	80800204 	addi	r2,r16,8
   667a0:	003ecd06 	br	662d8 <_malloc_r+0xb8>
   667a4:	18800117 	ldw	r2,4(r3)
   667a8:	003f1a06 	br	66414 <_malloc_r+0x1f4>
   667ac:	5ac00044 	addi	r11,r11,1
   667b0:	588000cc 	andi	r2,r11,3
   667b4:	52800204 	addi	r10,r10,8
   667b8:	103f2e1e 	bne	r2,zero,66474 <_malloc_r+0x254>
   667bc:	20c000cc 	andi	r3,r4,3
   667c0:	60bffe04 	addi	r2,r12,-8
   667c4:	18006f26 	beq	r3,zero,66984 <_malloc_r+0x764>
   667c8:	63000017 	ldw	r12,0(r12)
   667cc:	213fffc4 	addi	r4,r4,-1
   667d0:	60bffa26 	beq	r12,r2,667bc <_malloc_r+0x59c>
   667d4:	98800117 	ldw	r2,4(r19)
   667d8:	294b883a 	add	r5,r5,r5
   667dc:	117f5a36 	bltu	r2,r5,66548 <_malloc_r+0x328>
   667e0:	283f5926 	beq	r5,zero,66548 <_malloc_r+0x328>
   667e4:	1146703a 	and	r3,r2,r5
   667e8:	18001626 	beq	r3,zero,66844 <_malloc_r+0x624>
   667ec:	5809883a 	mov	r4,r11
   667f0:	003f1a06 	br	6645c <_malloc_r+0x23c>
   667f4:	80800204 	addi	r2,r16,8
   667f8:	84000517 	ldw	r16,20(r16)
   667fc:	143ea81e 	bne	r2,r16,662a0 <_malloc_r+0x80>
   66800:	21000084 	addi	r4,r4,2
   66804:	003ee306 	br	66394 <_malloc_r+0x174>
   66808:	210016c4 	addi	r4,r4,91
   6680c:	210b883a 	add	r5,r4,r4
   66810:	003eca06 	br	6633c <_malloc_r+0x11c>
   66814:	100ad1ba 	srli	r5,r2,6
   66818:	29400e04 	addi	r5,r5,56
   6681c:	294d883a 	add	r6,r5,r5
   66820:	003fbd06 	br	66718 <_malloc_r+0x4f8>
   66824:	84ff6026 	beq	r16,r19,665a8 <_malloc_r+0x388>
   66828:	008001f4 	movhi	r2,7
   6682c:	10b8ec04 	addi	r2,r2,-7248
   66830:	14000217 	ldw	r16,8(r2)
   66834:	00bfff04 	movi	r2,-4
   66838:	80c00117 	ldw	r3,4(r16)
   6683c:	1886703a 	and	r3,r3,r2
   66840:	003f9406 	br	66694 <_malloc_r+0x474>
   66844:	294b883a 	add	r5,r5,r5
   66848:	1146703a 	and	r3,r2,r5
   6684c:	5ac00104 	addi	r11,r11,4
   66850:	183ffc26 	beq	r3,zero,66844 <_malloc_r+0x624>
   66854:	5809883a 	mov	r4,r11
   66858:	003f0006 	br	6645c <_malloc_r+0x23c>
   6685c:	00805504 	movi	r2,340
   66860:	11001336 	bltu	r2,r4,668b0 <_malloc_r+0x690>
   66864:	8808d3fa 	srli	r4,r17,15
   66868:	21001dc4 	addi	r4,r4,119
   6686c:	210b883a 	add	r5,r4,r4
   66870:	003eb206 	br	6633c <_malloc_r+0x11c>
   66874:	00840004 	movi	r2,4096
   66878:	003f5d06 	br	665f0 <_malloc_r+0x3d0>
   6687c:	00800044 	movi	r2,1
   66880:	a0800115 	stw	r2,4(r20)
   66884:	a021883a 	mov	r16,r20
   66888:	0007883a 	mov	r3,zero
   6688c:	003f8106 	br	66694 <_malloc_r+0x474>
   66890:	280bd0ba 	srai	r5,r5,2
   66894:	01800044 	movi	r6,1
   66898:	38800117 	ldw	r2,4(r7)
   6689c:	314c983a 	sll	r6,r6,r5
   668a0:	180b883a 	mov	r5,r3
   668a4:	3084b03a 	or	r2,r6,r2
   668a8:	38800115 	stw	r2,4(r7)
   668ac:	003fa906 	br	66754 <_malloc_r+0x534>
   668b0:	00815504 	movi	r2,1364
   668b4:	11001836 	bltu	r2,r4,66918 <_malloc_r+0x6f8>
   668b8:	8808d4ba 	srli	r4,r17,18
   668bc:	21001f04 	addi	r4,r4,124
   668c0:	210b883a 	add	r5,r4,r4
   668c4:	003e9d06 	br	6633c <_malloc_r+0x11c>
   668c8:	bdc00404 	addi	r23,r23,16
   668cc:	003f2f06 	br	6658c <_malloc_r+0x36c>
   668d0:	01401504 	movi	r5,84
   668d4:	28c01f36 	bltu	r5,r3,66954 <_malloc_r+0x734>
   668d8:	100ad33a 	srli	r5,r2,12
   668dc:	29401b84 	addi	r5,r5,110
   668e0:	294d883a 	add	r6,r5,r5
   668e4:	003f8c06 	br	66718 <_malloc_r+0x4f8>
   668e8:	9c000217 	ldw	r16,8(r19)
   668ec:	00bfff04 	movi	r2,-4
   668f0:	80c00117 	ldw	r3,4(r16)
   668f4:	1886703a 	and	r3,r3,r2
   668f8:	003f6606 	br	66694 <_malloc_r+0x474>
   668fc:	e0c3ffcc 	andi	r3,fp,4095
   66900:	183f2f1e 	bne	r3,zero,665c0 <_malloc_r+0x3a0>
   66904:	98c00217 	ldw	r3,8(r19)
   66908:	bd49883a 	add	r4,r23,r21
   6690c:	21000054 	ori	r4,r4,1
   66910:	19000115 	stw	r4,4(r3)
   66914:	003f5506 	br	6666c <_malloc_r+0x44c>
   66918:	01403f04 	movi	r5,252
   6691c:	01001f84 	movi	r4,126
   66920:	003e8606 	br	6633c <_malloc_r+0x11c>
   66924:	9009883a 	mov	r4,r18
   66928:	81400204 	addi	r5,r16,8
   6692c:	00656880 	call	65688 <_free_r>
   66930:	008001f4 	movhi	r2,7
   66934:	10853604 	addi	r2,r2,5336
   66938:	10800017 	ldw	r2,0(r2)
   6693c:	003f4b06 	br	6666c <_malloc_r+0x44c>
   66940:	00c00044 	movi	r3,1
   66944:	002f883a 	mov	r23,zero
   66948:	003f3406 	br	6661c <_malloc_r+0x3fc>
   6694c:	d5200315 	stw	r20,-32756(gp)
   66950:	003f2106 	br	665d8 <_malloc_r+0x3b8>
   66954:	01405504 	movi	r5,340
   66958:	28c00436 	bltu	r5,r3,6696c <_malloc_r+0x74c>
   6695c:	100ad3fa 	srli	r5,r2,15
   66960:	29401dc4 	addi	r5,r5,119
   66964:	294d883a 	add	r6,r5,r5
   66968:	003f6b06 	br	66718 <_malloc_r+0x4f8>
   6696c:	01415504 	movi	r5,1364
   66970:	28c00936 	bltu	r5,r3,66998 <_malloc_r+0x778>
   66974:	100ad4ba 	srli	r5,r2,18
   66978:	29401f04 	addi	r5,r5,124
   6697c:	294d883a 	add	r6,r5,r5
   66980:	003f6506 	br	66718 <_malloc_r+0x4f8>
   66984:	98800117 	ldw	r2,4(r19)
   66988:	0146303a 	nor	r3,zero,r5
   6698c:	1884703a 	and	r2,r3,r2
   66990:	98800115 	stw	r2,4(r19)
   66994:	003f9006 	br	667d8 <_malloc_r+0x5b8>
   66998:	01803f04 	movi	r6,252
   6699c:	01401f84 	movi	r5,126
   669a0:	003f5d06 	br	66718 <_malloc_r+0x4f8>

000669a4 <memchr>:
   669a4:	008000c4 	movi	r2,3
   669a8:	29403fcc 	andi	r5,r5,255
   669ac:	1180282e 	bgeu	r2,r6,66a50 <memchr+0xac>
   669b0:	2086703a 	and	r3,r4,r2
   669b4:	1800351e 	bne	r3,zero,66a8c <memchr+0xe8>
   669b8:	2816923a 	slli	r11,r5,8
   669bc:	2093883a 	add	r9,r4,r2
   669c0:	22000084 	addi	r8,r4,2
   669c4:	5957883a 	add	r11,r11,r5
   669c8:	5816923a 	slli	r11,r11,8
   669cc:	20c00044 	addi	r3,r4,1
   669d0:	037fbff4 	movhi	r13,65279
   669d4:	6b7fbfc4 	addi	r13,r13,-257
   669d8:	5957883a 	add	r11,r11,r5
   669dc:	5816923a 	slli	r11,r11,8
   669e0:	03202074 	movhi	r12,32897
   669e4:	63202004 	addi	r12,r12,-32640
   669e8:	101d883a 	mov	r14,r2
   669ec:	5957883a 	add	r11,r11,r5
   669f0:	21c00017 	ldw	r7,0(r4)
   669f4:	31bfff04 	addi	r6,r6,-4
   669f8:	1805883a 	mov	r2,r3
   669fc:	3acef03a 	xor	r7,r7,r11
   66a00:	3b55883a 	add	r10,r7,r13
   66a04:	01ce303a 	nor	r7,zero,r7
   66a08:	51ce703a 	and	r7,r10,r7
   66a0c:	3b0e703a 	and	r7,r7,r12
   66a10:	38000a26 	beq	r7,zero,66a3c <memchr+0x98>
   66a14:	21c00003 	ldbu	r7,0(r4)
   66a18:	39401e26 	beq	r7,r5,66a94 <memchr+0xf0>
   66a1c:	19c00003 	ldbu	r7,0(r3)
   66a20:	39401926 	beq	r7,r5,66a88 <memchr+0xe4>
   66a24:	41c00003 	ldbu	r7,0(r8)
   66a28:	4005883a 	mov	r2,r8
   66a2c:	39401626 	beq	r7,r5,66a88 <memchr+0xe4>
   66a30:	49c00003 	ldbu	r7,0(r9)
   66a34:	4805883a 	mov	r2,r9
   66a38:	39401326 	beq	r7,r5,66a88 <memchr+0xe4>
   66a3c:	21000104 	addi	r4,r4,4
   66a40:	4a400104 	addi	r9,r9,4
   66a44:	42000104 	addi	r8,r8,4
   66a48:	18c00104 	addi	r3,r3,4
   66a4c:	71bfe836 	bltu	r14,r6,669f0 <memchr+0x4c>
   66a50:	2005883a 	mov	r2,r4
   66a54:	30000a26 	beq	r6,zero,66a80 <memchr+0xdc>
   66a58:	10c00003 	ldbu	r3,0(r2)
   66a5c:	19400a26 	beq	r3,r5,66a88 <memchr+0xe4>
   66a60:	10c00044 	addi	r3,r2,1
   66a64:	118d883a 	add	r6,r2,r6
   66a68:	00000306 	br	66a78 <memchr+0xd4>
   66a6c:	11000003 	ldbu	r4,0(r2)
   66a70:	18c00044 	addi	r3,r3,1
   66a74:	21400426 	beq	r4,r5,66a88 <memchr+0xe4>
   66a78:	1805883a 	mov	r2,r3
   66a7c:	19bffb1e 	bne	r3,r6,66a6c <memchr+0xc8>
   66a80:	0005883a 	mov	r2,zero
   66a84:	f800283a 	ret
   66a88:	f800283a 	ret
   66a8c:	2005883a 	mov	r2,r4
   66a90:	003ff106 	br	66a58 <memchr+0xb4>
   66a94:	2005883a 	mov	r2,r4
   66a98:	f800283a 	ret

00066a9c <memmove>:
   66a9c:	defffb04 	addi	sp,sp,-20
   66aa0:	dc000015 	stw	r16,0(sp)
   66aa4:	dfc00415 	stw	ra,16(sp)
   66aa8:	dcc00315 	stw	r19,12(sp)
   66aac:	dc800215 	stw	r18,8(sp)
   66ab0:	dc400115 	stw	r17,4(sp)
   66ab4:	2021883a 	mov	r16,r4
   66ab8:	300f883a 	mov	r7,r6
   66abc:	2900122e 	bgeu	r5,r4,66b08 <memmove+0x6c>
   66ac0:	2987883a 	add	r3,r5,r6
   66ac4:	20c0102e 	bgeu	r4,r3,66b08 <memmove+0x6c>
   66ac8:	218b883a 	add	r5,r4,r6
   66acc:	1989c83a 	sub	r4,r3,r6
   66ad0:	30000526 	beq	r6,zero,66ae8 <memmove+0x4c>
   66ad4:	18ffffc4 	addi	r3,r3,-1
   66ad8:	18800003 	ldbu	r2,0(r3)
   66adc:	297fffc4 	addi	r5,r5,-1
   66ae0:	28800005 	stb	r2,0(r5)
   66ae4:	193ffb1e 	bne	r3,r4,66ad4 <memmove+0x38>
   66ae8:	8005883a 	mov	r2,r16
   66aec:	dfc00417 	ldw	ra,16(sp)
   66af0:	dcc00317 	ldw	r19,12(sp)
   66af4:	dc800217 	ldw	r18,8(sp)
   66af8:	dc400117 	ldw	r17,4(sp)
   66afc:	dc000017 	ldw	r16,0(sp)
   66b00:	dec00504 	addi	sp,sp,20
   66b04:	f800283a 	ret
   66b08:	008003c4 	movi	r2,15
   66b0c:	1180422e 	bgeu	r2,r6,66c18 <memmove+0x17c>
   66b10:	2c04b03a 	or	r2,r5,r16
   66b14:	108000cc 	andi	r2,r2,3
   66b18:	10003f1e 	bne	r2,zero,66c18 <memmove+0x17c>
   66b1c:	32bffc04 	addi	r10,r6,-16
   66b20:	5014d13a 	srli	r10,r10,4
   66b24:	81000404 	addi	r4,r16,16
   66b28:	8007883a 	mov	r3,r16
   66b2c:	5004913a 	slli	r2,r10,4
   66b30:	280f883a 	mov	r7,r5
   66b34:	2089883a 	add	r4,r4,r2
   66b38:	38800017 	ldw	r2,0(r7)
   66b3c:	18c00404 	addi	r3,r3,16
   66b40:	39c00404 	addi	r7,r7,16
   66b44:	18bffc15 	stw	r2,-16(r3)
   66b48:	38bffd17 	ldw	r2,-12(r7)
   66b4c:	18bffd15 	stw	r2,-12(r3)
   66b50:	38bffe17 	ldw	r2,-8(r7)
   66b54:	18bffe15 	stw	r2,-8(r3)
   66b58:	38bfff17 	ldw	r2,-4(r7)
   66b5c:	18bfff15 	stw	r2,-4(r3)
   66b60:	193ff51e 	bne	r3,r4,66b38 <memmove+0x9c>
   66b64:	52800044 	addi	r10,r10,1
   66b68:	5014913a 	slli	r10,r10,4
   66b6c:	31c003cc 	andi	r7,r6,15
   66b70:	008000c4 	movi	r2,3
   66b74:	8287883a 	add	r3,r16,r10
   66b78:	2a95883a 	add	r10,r5,r10
   66b7c:	11c0282e 	bgeu	r2,r7,66c20 <memmove+0x184>
   66b80:	3c7fff04 	addi	r17,r7,-4
   66b84:	8808d0ba 	srli	r4,r17,2
   66b88:	1a400104 	addi	r9,r3,4
   66b8c:	180d883a 	mov	r6,r3
   66b90:	2105883a 	add	r2,r4,r4
   66b94:	1085883a 	add	r2,r2,r2
   66b98:	4893883a 	add	r9,r9,r2
   66b9c:	5005883a 	mov	r2,r10
   66ba0:	12000017 	ldw	r8,0(r2)
   66ba4:	31800104 	addi	r6,r6,4
   66ba8:	10800104 	addi	r2,r2,4
   66bac:	323fff15 	stw	r8,-4(r6)
   66bb0:	327ffb1e 	bne	r6,r9,66ba0 <memmove+0x104>
   66bb4:	20800044 	addi	r2,r4,1
   66bb8:	1085883a 	add	r2,r2,r2
   66bbc:	1085883a 	add	r2,r2,r2
   66bc0:	017fff04 	movi	r5,-4
   66bc4:	18a5883a 	add	r18,r3,r2
   66bc8:	50a7883a 	add	r19,r10,r2
   66bcc:	00614b40 	call	614b4 <__mulsi3>
   66bd0:	144f883a 	add	r7,r2,r17
   66bd4:	980b883a 	mov	r5,r19
   66bd8:	9007883a 	mov	r3,r18
   66bdc:	383fc226 	beq	r7,zero,66ae8 <memmove+0x4c>
   66be0:	19cf883a 	add	r7,r3,r7
   66be4:	29800003 	ldbu	r6,0(r5)
   66be8:	18c00044 	addi	r3,r3,1
   66bec:	29400044 	addi	r5,r5,1
   66bf0:	19bfffc5 	stb	r6,-1(r3)
   66bf4:	19fffb1e 	bne	r3,r7,66be4 <memmove+0x148>
   66bf8:	8005883a 	mov	r2,r16
   66bfc:	dfc00417 	ldw	ra,16(sp)
   66c00:	dcc00317 	ldw	r19,12(sp)
   66c04:	dc800217 	ldw	r18,8(sp)
   66c08:	dc400117 	ldw	r17,4(sp)
   66c0c:	dc000017 	ldw	r16,0(sp)
   66c10:	dec00504 	addi	sp,sp,20
   66c14:	f800283a 	ret
   66c18:	8007883a 	mov	r3,r16
   66c1c:	003fef06 	br	66bdc <memmove+0x140>
   66c20:	500b883a 	mov	r5,r10
   66c24:	003fed06 	br	66bdc <memmove+0x140>

00066c28 <memset>:
   66c28:	00c000c4 	movi	r3,3
   66c2c:	2005883a 	mov	r2,r4
   66c30:	29403fcc 	andi	r5,r5,255
   66c34:	19802d2e 	bgeu	r3,r6,66cec <memset+0xc4>
   66c38:	20c6703a 	and	r3,r4,r3
   66c3c:	18002e1e 	bne	r3,zero,66cf8 <memset+0xd0>
   66c40:	2806923a 	slli	r3,r5,8
   66c44:	010003c4 	movi	r4,15
   66c48:	3011883a 	mov	r8,r6
   66c4c:	1946b03a 	or	r3,r3,r5
   66c50:	180e943a 	slli	r7,r3,16
   66c54:	38ceb03a 	or	r7,r7,r3
   66c58:	1007883a 	mov	r3,r2
   66c5c:	21800f2e 	bgeu	r4,r6,66c9c <memset+0x74>
   66c60:	19c00015 	stw	r7,0(r3)
   66c64:	19c00115 	stw	r7,4(r3)
   66c68:	19c00215 	stw	r7,8(r3)
   66c6c:	19c00315 	stw	r7,12(r3)
   66c70:	423ffc04 	addi	r8,r8,-16
   66c74:	18c00404 	addi	r3,r3,16
   66c78:	223ff936 	bltu	r4,r8,66c60 <memset+0x38>
   66c7c:	30fffc04 	addi	r3,r6,-16
   66c80:	1806d13a 	srli	r3,r3,4
   66c84:	318003cc 	andi	r6,r6,15
   66c88:	010000c4 	movi	r4,3
   66c8c:	18c00044 	addi	r3,r3,1
   66c90:	1806913a 	slli	r3,r3,4
   66c94:	10c7883a 	add	r3,r2,r3
   66c98:	21800e2e 	bgeu	r4,r6,66cd4 <memset+0xac>
   66c9c:	1813883a 	mov	r9,r3
   66ca0:	3011883a 	mov	r8,r6
   66ca4:	010000c4 	movi	r4,3
   66ca8:	49c00015 	stw	r7,0(r9)
   66cac:	423fff04 	addi	r8,r8,-4
   66cb0:	4a400104 	addi	r9,r9,4
   66cb4:	223ffc36 	bltu	r4,r8,66ca8 <memset+0x80>
   66cb8:	313fff04 	addi	r4,r6,-4
   66cbc:	2008d0ba 	srli	r4,r4,2
   66cc0:	318000cc 	andi	r6,r6,3
   66cc4:	21000044 	addi	r4,r4,1
   66cc8:	2109883a 	add	r4,r4,r4
   66ccc:	2109883a 	add	r4,r4,r4
   66cd0:	1907883a 	add	r3,r3,r4
   66cd4:	30000a26 	beq	r6,zero,66d00 <memset+0xd8>
   66cd8:	198d883a 	add	r6,r3,r6
   66cdc:	19400005 	stb	r5,0(r3)
   66ce0:	18c00044 	addi	r3,r3,1
   66ce4:	19bffd1e 	bne	r3,r6,66cdc <memset+0xb4>
   66ce8:	f800283a 	ret
   66cec:	2007883a 	mov	r3,r4
   66cf0:	303ff91e 	bne	r6,zero,66cd8 <memset+0xb0>
   66cf4:	00000206 	br	66d00 <memset+0xd8>
   66cf8:	2007883a 	mov	r3,r4
   66cfc:	003ff606 	br	66cd8 <memset+0xb0>
   66d00:	f800283a 	ret

00066d04 <_Balloc>:
   66d04:	20801317 	ldw	r2,76(r4)
   66d08:	defffc04 	addi	sp,sp,-16
   66d0c:	dc400115 	stw	r17,4(sp)
   66d10:	dc000015 	stw	r16,0(sp)
   66d14:	dfc00315 	stw	ra,12(sp)
   66d18:	dc800215 	stw	r18,8(sp)
   66d1c:	2023883a 	mov	r17,r4
   66d20:	2821883a 	mov	r16,r5
   66d24:	10000f26 	beq	r2,zero,66d64 <_Balloc+0x60>
   66d28:	8407883a 	add	r3,r16,r16
   66d2c:	18c7883a 	add	r3,r3,r3
   66d30:	10c7883a 	add	r3,r2,r3
   66d34:	18800017 	ldw	r2,0(r3)
   66d38:	10001126 	beq	r2,zero,66d80 <_Balloc+0x7c>
   66d3c:	11000017 	ldw	r4,0(r2)
   66d40:	19000015 	stw	r4,0(r3)
   66d44:	10000415 	stw	zero,16(r2)
   66d48:	10000315 	stw	zero,12(r2)
   66d4c:	dfc00317 	ldw	ra,12(sp)
   66d50:	dc800217 	ldw	r18,8(sp)
   66d54:	dc400117 	ldw	r17,4(sp)
   66d58:	dc000017 	ldw	r16,0(sp)
   66d5c:	dec00404 	addi	sp,sp,16
   66d60:	f800283a 	ret
   66d64:	01400104 	movi	r5,4
   66d68:	01800404 	movi	r6,16
   66d6c:	00686680 	call	68668 <_calloc_r>
   66d70:	88801315 	stw	r2,76(r17)
   66d74:	103fec1e 	bne	r2,zero,66d28 <_Balloc+0x24>
   66d78:	0005883a 	mov	r2,zero
   66d7c:	003ff306 	br	66d4c <_Balloc+0x48>
   66d80:	01400044 	movi	r5,1
   66d84:	2c24983a 	sll	r18,r5,r16
   66d88:	8809883a 	mov	r4,r17
   66d8c:	91800144 	addi	r6,r18,5
   66d90:	318d883a 	add	r6,r6,r6
   66d94:	318d883a 	add	r6,r6,r6
   66d98:	00686680 	call	68668 <_calloc_r>
   66d9c:	103ff626 	beq	r2,zero,66d78 <_Balloc+0x74>
   66da0:	14000115 	stw	r16,4(r2)
   66da4:	14800215 	stw	r18,8(r2)
   66da8:	003fe606 	br	66d44 <_Balloc+0x40>

00066dac <_Bfree>:
   66dac:	28000826 	beq	r5,zero,66dd0 <_Bfree+0x24>
   66db0:	28c00117 	ldw	r3,4(r5)
   66db4:	20801317 	ldw	r2,76(r4)
   66db8:	18c7883a 	add	r3,r3,r3
   66dbc:	18c7883a 	add	r3,r3,r3
   66dc0:	10c5883a 	add	r2,r2,r3
   66dc4:	10c00017 	ldw	r3,0(r2)
   66dc8:	28c00015 	stw	r3,0(r5)
   66dcc:	11400015 	stw	r5,0(r2)
   66dd0:	f800283a 	ret

00066dd4 <__multadd>:
   66dd4:	defff604 	addi	sp,sp,-40
   66dd8:	dd400515 	stw	r21,20(sp)
   66ddc:	2d400417 	ldw	r21,16(r5)
   66de0:	df000815 	stw	fp,32(sp)
   66de4:	ddc00715 	stw	r23,28(sp)
   66de8:	dd800615 	stw	r22,24(sp)
   66dec:	dd000415 	stw	r20,16(sp)
   66df0:	dc400115 	stw	r17,4(sp)
   66df4:	dc000015 	stw	r16,0(sp)
   66df8:	dfc00915 	stw	ra,36(sp)
   66dfc:	dcc00315 	stw	r19,12(sp)
   66e00:	dc800215 	stw	r18,8(sp)
   66e04:	282d883a 	mov	r22,r5
   66e08:	202f883a 	mov	r23,r4
   66e0c:	3029883a 	mov	r20,r6
   66e10:	3839883a 	mov	fp,r7
   66e14:	2c000504 	addi	r16,r5,20
   66e18:	0023883a 	mov	r17,zero
   66e1c:	84c00017 	ldw	r19,0(r16)
   66e20:	a00b883a 	mov	r5,r20
   66e24:	8c400044 	addi	r17,r17,1
   66e28:	993fffcc 	andi	r4,r19,65535
   66e2c:	00614b40 	call	614b4 <__mulsi3>
   66e30:	1725883a 	add	r18,r2,fp
   66e34:	9808d43a 	srli	r4,r19,16
   66e38:	9026d43a 	srli	r19,r18,16
   66e3c:	a00b883a 	mov	r5,r20
   66e40:	00614b40 	call	614b4 <__mulsi3>
   66e44:	988f883a 	add	r7,r19,r2
   66e48:	3804943a 	slli	r2,r7,16
   66e4c:	94bfffcc 	andi	r18,r18,65535
   66e50:	3838d43a 	srli	fp,r7,16
   66e54:	14a5883a 	add	r18,r2,r18
   66e58:	84800015 	stw	r18,0(r16)
   66e5c:	84000104 	addi	r16,r16,4
   66e60:	8d7fee16 	blt	r17,r21,66e1c <__multadd+0x48>
   66e64:	e0000926 	beq	fp,zero,66e8c <__multadd+0xb8>
   66e68:	b0800217 	ldw	r2,8(r22)
   66e6c:	a880140e 	bge	r21,r2,66ec0 <__multadd+0xec>
   66e70:	a8800144 	addi	r2,r21,5
   66e74:	1085883a 	add	r2,r2,r2
   66e78:	1085883a 	add	r2,r2,r2
   66e7c:	b085883a 	add	r2,r22,r2
   66e80:	ad400044 	addi	r21,r21,1
   66e84:	17000015 	stw	fp,0(r2)
   66e88:	b5400415 	stw	r21,16(r22)
   66e8c:	b005883a 	mov	r2,r22
   66e90:	dfc00917 	ldw	ra,36(sp)
   66e94:	df000817 	ldw	fp,32(sp)
   66e98:	ddc00717 	ldw	r23,28(sp)
   66e9c:	dd800617 	ldw	r22,24(sp)
   66ea0:	dd400517 	ldw	r21,20(sp)
   66ea4:	dd000417 	ldw	r20,16(sp)
   66ea8:	dcc00317 	ldw	r19,12(sp)
   66eac:	dc800217 	ldw	r18,8(sp)
   66eb0:	dc400117 	ldw	r17,4(sp)
   66eb4:	dc000017 	ldw	r16,0(sp)
   66eb8:	dec00a04 	addi	sp,sp,40
   66ebc:	f800283a 	ret
   66ec0:	b1400117 	ldw	r5,4(r22)
   66ec4:	b809883a 	mov	r4,r23
   66ec8:	29400044 	addi	r5,r5,1
   66ecc:	0066d040 	call	66d04 <_Balloc>
   66ed0:	b1800417 	ldw	r6,16(r22)
   66ed4:	b1400304 	addi	r5,r22,12
   66ed8:	11000304 	addi	r4,r2,12
   66edc:	31800084 	addi	r6,r6,2
   66ee0:	318d883a 	add	r6,r6,r6
   66ee4:	318d883a 	add	r6,r6,r6
   66ee8:	1021883a 	mov	r16,r2
   66eec:	00614dc0 	call	614dc <memcpy>
   66ef0:	b0c00117 	ldw	r3,4(r22)
   66ef4:	b8801317 	ldw	r2,76(r23)
   66ef8:	18c7883a 	add	r3,r3,r3
   66efc:	18c7883a 	add	r3,r3,r3
   66f00:	10c5883a 	add	r2,r2,r3
   66f04:	10c00017 	ldw	r3,0(r2)
   66f08:	b0c00015 	stw	r3,0(r22)
   66f0c:	15800015 	stw	r22,0(r2)
   66f10:	802d883a 	mov	r22,r16
   66f14:	003fd606 	br	66e70 <__multadd+0x9c>

00066f18 <__s2b>:
   66f18:	defff904 	addi	sp,sp,-28
   66f1c:	dd000415 	stw	r20,16(sp)
   66f20:	dc400115 	stw	r17,4(sp)
   66f24:	2829883a 	mov	r20,r5
   66f28:	2023883a 	mov	r17,r4
   66f2c:	01400244 	movi	r5,9
   66f30:	39000204 	addi	r4,r7,8
   66f34:	dcc00315 	stw	r19,12(sp)
   66f38:	dc800215 	stw	r18,8(sp)
   66f3c:	dfc00615 	stw	ra,24(sp)
   66f40:	dd400515 	stw	r21,20(sp)
   66f44:	dc000015 	stw	r16,0(sp)
   66f48:	3825883a 	mov	r18,r7
   66f4c:	3027883a 	mov	r19,r6
   66f50:	006a4b80 	call	6a4b8 <__divsi3>
   66f54:	00c00044 	movi	r3,1
   66f58:	000b883a 	mov	r5,zero
   66f5c:	1880030e 	bge	r3,r2,66f6c <__s2b+0x54>
   66f60:	18c7883a 	add	r3,r3,r3
   66f64:	29400044 	addi	r5,r5,1
   66f68:	18bffd16 	blt	r3,r2,66f60 <__s2b+0x48>
   66f6c:	8809883a 	mov	r4,r17
   66f70:	0066d040 	call	66d04 <_Balloc>
   66f74:	d8c00717 	ldw	r3,28(sp)
   66f78:	10c00515 	stw	r3,20(r2)
   66f7c:	00c00044 	movi	r3,1
   66f80:	10c00415 	stw	r3,16(r2)
   66f84:	00c00244 	movi	r3,9
   66f88:	1cc0210e 	bge	r3,r19,67010 <__s2b+0xf8>
   66f8c:	a0eb883a 	add	r21,r20,r3
   66f90:	a821883a 	mov	r16,r21
   66f94:	a4e9883a 	add	r20,r20,r19
   66f98:	81c00007 	ldb	r7,0(r16)
   66f9c:	8809883a 	mov	r4,r17
   66fa0:	84000044 	addi	r16,r16,1
   66fa4:	100b883a 	mov	r5,r2
   66fa8:	01800284 	movi	r6,10
   66fac:	39fff404 	addi	r7,r7,-48
   66fb0:	0066dd40 	call	66dd4 <__multadd>
   66fb4:	853ff81e 	bne	r16,r20,66f98 <__s2b+0x80>
   66fb8:	ace1883a 	add	r16,r21,r19
   66fbc:	843ffe04 	addi	r16,r16,-8
   66fc0:	9c800a0e 	bge	r19,r18,66fec <__s2b+0xd4>
   66fc4:	94e5c83a 	sub	r18,r18,r19
   66fc8:	84a5883a 	add	r18,r16,r18
   66fcc:	81c00007 	ldb	r7,0(r16)
   66fd0:	8809883a 	mov	r4,r17
   66fd4:	84000044 	addi	r16,r16,1
   66fd8:	100b883a 	mov	r5,r2
   66fdc:	01800284 	movi	r6,10
   66fe0:	39fff404 	addi	r7,r7,-48
   66fe4:	0066dd40 	call	66dd4 <__multadd>
   66fe8:	84bff81e 	bne	r16,r18,66fcc <__s2b+0xb4>
   66fec:	dfc00617 	ldw	ra,24(sp)
   66ff0:	dd400517 	ldw	r21,20(sp)
   66ff4:	dd000417 	ldw	r20,16(sp)
   66ff8:	dcc00317 	ldw	r19,12(sp)
   66ffc:	dc800217 	ldw	r18,8(sp)
   67000:	dc400117 	ldw	r17,4(sp)
   67004:	dc000017 	ldw	r16,0(sp)
   67008:	dec00704 	addi	sp,sp,28
   6700c:	f800283a 	ret
   67010:	a4000284 	addi	r16,r20,10
   67014:	1827883a 	mov	r19,r3
   67018:	003fe906 	br	66fc0 <__s2b+0xa8>

0006701c <__hi0bits>:
   6701c:	20bfffec 	andhi	r2,r4,65535
   67020:	1000141e 	bne	r2,zero,67074 <__hi0bits+0x58>
   67024:	2008943a 	slli	r4,r4,16
   67028:	00800404 	movi	r2,16
   6702c:	20ffc02c 	andhi	r3,r4,65280
   67030:	1800021e 	bne	r3,zero,6703c <__hi0bits+0x20>
   67034:	2008923a 	slli	r4,r4,8
   67038:	10800204 	addi	r2,r2,8
   6703c:	20fc002c 	andhi	r3,r4,61440
   67040:	1800021e 	bne	r3,zero,6704c <__hi0bits+0x30>
   67044:	2008913a 	slli	r4,r4,4
   67048:	10800104 	addi	r2,r2,4
   6704c:	20f0002c 	andhi	r3,r4,49152
   67050:	1800031e 	bne	r3,zero,67060 <__hi0bits+0x44>
   67054:	2109883a 	add	r4,r4,r4
   67058:	10800084 	addi	r2,r2,2
   6705c:	2109883a 	add	r4,r4,r4
   67060:	20000316 	blt	r4,zero,67070 <__hi0bits+0x54>
   67064:	2110002c 	andhi	r4,r4,16384
   67068:	2000041e 	bne	r4,zero,6707c <__hi0bits+0x60>
   6706c:	00800804 	movi	r2,32
   67070:	f800283a 	ret
   67074:	0005883a 	mov	r2,zero
   67078:	003fec06 	br	6702c <__hi0bits+0x10>
   6707c:	10800044 	addi	r2,r2,1
   67080:	f800283a 	ret

00067084 <__lo0bits>:
   67084:	20c00017 	ldw	r3,0(r4)
   67088:	188001cc 	andi	r2,r3,7
   6708c:	10000826 	beq	r2,zero,670b0 <__lo0bits+0x2c>
   67090:	1880004c 	andi	r2,r3,1
   67094:	1000211e 	bne	r2,zero,6711c <__lo0bits+0x98>
   67098:	1880008c 	andi	r2,r3,2
   6709c:	1000211e 	bne	r2,zero,67124 <__lo0bits+0xa0>
   670a0:	1806d0ba 	srli	r3,r3,2
   670a4:	00800084 	movi	r2,2
   670a8:	20c00015 	stw	r3,0(r4)
   670ac:	f800283a 	ret
   670b0:	18bfffcc 	andi	r2,r3,65535
   670b4:	10001326 	beq	r2,zero,67104 <__lo0bits+0x80>
   670b8:	0005883a 	mov	r2,zero
   670bc:	19403fcc 	andi	r5,r3,255
   670c0:	2800021e 	bne	r5,zero,670cc <__lo0bits+0x48>
   670c4:	1806d23a 	srli	r3,r3,8
   670c8:	10800204 	addi	r2,r2,8
   670cc:	194003cc 	andi	r5,r3,15
   670d0:	2800021e 	bne	r5,zero,670dc <__lo0bits+0x58>
   670d4:	1806d13a 	srli	r3,r3,4
   670d8:	10800104 	addi	r2,r2,4
   670dc:	194000cc 	andi	r5,r3,3
   670e0:	2800021e 	bne	r5,zero,670ec <__lo0bits+0x68>
   670e4:	1806d0ba 	srli	r3,r3,2
   670e8:	10800084 	addi	r2,r2,2
   670ec:	1940004c 	andi	r5,r3,1
   670f0:	2800081e 	bne	r5,zero,67114 <__lo0bits+0x90>
   670f4:	1806d07a 	srli	r3,r3,1
   670f8:	1800051e 	bne	r3,zero,67110 <__lo0bits+0x8c>
   670fc:	00800804 	movi	r2,32
   67100:	f800283a 	ret
   67104:	1806d43a 	srli	r3,r3,16
   67108:	00800404 	movi	r2,16
   6710c:	003feb06 	br	670bc <__lo0bits+0x38>
   67110:	10800044 	addi	r2,r2,1
   67114:	20c00015 	stw	r3,0(r4)
   67118:	f800283a 	ret
   6711c:	0005883a 	mov	r2,zero
   67120:	f800283a 	ret
   67124:	1806d07a 	srli	r3,r3,1
   67128:	00800044 	movi	r2,1
   6712c:	20c00015 	stw	r3,0(r4)
   67130:	f800283a 	ret

00067134 <__i2b>:
   67134:	defffd04 	addi	sp,sp,-12
   67138:	dc000015 	stw	r16,0(sp)
   6713c:	04000044 	movi	r16,1
   67140:	dc400115 	stw	r17,4(sp)
   67144:	2823883a 	mov	r17,r5
   67148:	800b883a 	mov	r5,r16
   6714c:	dfc00215 	stw	ra,8(sp)
   67150:	0066d040 	call	66d04 <_Balloc>
   67154:	14400515 	stw	r17,20(r2)
   67158:	14000415 	stw	r16,16(r2)
   6715c:	dfc00217 	ldw	ra,8(sp)
   67160:	dc400117 	ldw	r17,4(sp)
   67164:	dc000017 	ldw	r16,0(sp)
   67168:	dec00304 	addi	sp,sp,12
   6716c:	f800283a 	ret

00067170 <__multiply>:
   67170:	defff004 	addi	sp,sp,-64
   67174:	dc800815 	stw	r18,32(sp)
   67178:	dc400715 	stw	r17,28(sp)
   6717c:	34800417 	ldw	r18,16(r6)
   67180:	2c400417 	ldw	r17,16(r5)
   67184:	ddc00d15 	stw	r23,52(sp)
   67188:	dc000615 	stw	r16,24(sp)
   6718c:	dfc00f15 	stw	ra,60(sp)
   67190:	df000e15 	stw	fp,56(sp)
   67194:	dd800c15 	stw	r22,48(sp)
   67198:	dd400b15 	stw	r21,44(sp)
   6719c:	dd000a15 	stw	r20,40(sp)
   671a0:	dcc00915 	stw	r19,36(sp)
   671a4:	2821883a 	mov	r16,r5
   671a8:	302f883a 	mov	r23,r6
   671ac:	8c80050e 	bge	r17,r18,671c4 <__multiply+0x54>
   671b0:	8807883a 	mov	r3,r17
   671b4:	3021883a 	mov	r16,r6
   671b8:	9023883a 	mov	r17,r18
   671bc:	282f883a 	mov	r23,r5
   671c0:	1825883a 	mov	r18,r3
   671c4:	80800217 	ldw	r2,8(r16)
   671c8:	8c87883a 	add	r3,r17,r18
   671cc:	d8c00115 	stw	r3,4(sp)
   671d0:	81400117 	ldw	r5,4(r16)
   671d4:	10c0010e 	bge	r2,r3,671dc <__multiply+0x6c>
   671d8:	29400044 	addi	r5,r5,1
   671dc:	0066d040 	call	66d04 <_Balloc>
   671e0:	d8c00117 	ldw	r3,4(sp)
   671e4:	d8800515 	stw	r2,20(sp)
   671e8:	14c00504 	addi	r19,r2,20
   671ec:	1d400144 	addi	r21,r3,5
   671f0:	ad6b883a 	add	r21,r21,r21
   671f4:	ad6b883a 	add	r21,r21,r21
   671f8:	156b883a 	add	r21,r2,r21
   671fc:	dd400215 	stw	r21,8(sp)
   67200:	9805883a 	mov	r2,r19
   67204:	9d40042e 	bgeu	r19,r21,67218 <__multiply+0xa8>
   67208:	d8c00217 	ldw	r3,8(sp)
   6720c:	10000015 	stw	zero,0(r2)
   67210:	10800104 	addi	r2,r2,4
   67214:	10fffc36 	bltu	r2,r3,67208 <__multiply+0x98>
   67218:	94800144 	addi	r18,r18,5
   6721c:	94a5883a 	add	r18,r18,r18
   67220:	94ad883a 	add	r22,r18,r18
   67224:	8c400144 	addi	r17,r17,5
   67228:	8c63883a 	add	r17,r17,r17
   6722c:	bdad883a 	add	r22,r23,r22
   67230:	80c00504 	addi	r3,r16,20
   67234:	8c63883a 	add	r17,r17,r17
   67238:	bc800504 	addi	r18,r23,20
   6723c:	dd800315 	stw	r22,12(sp)
   67240:	d8c00415 	stw	r3,16(sp)
   67244:	dcc00015 	stw	r19,0(sp)
   67248:	8463883a 	add	r17,r16,r17
   6724c:	9580412e 	bgeu	r18,r22,67354 <__multiply+0x1e4>
   67250:	90800017 	ldw	r2,0(r18)
   67254:	173fffcc 	andi	fp,r2,65535
   67258:	e0001a26 	beq	fp,zero,672c4 <__multiply+0x154>
   6725c:	dd000017 	ldw	r20,0(sp)
   67260:	dd800417 	ldw	r22,16(sp)
   67264:	002b883a 	mov	r21,zero
   67268:	b4c00017 	ldw	r19,0(r22)
   6726c:	a4000017 	ldw	r16,0(r20)
   67270:	e00b883a 	mov	r5,fp
   67274:	993fffcc 	andi	r4,r19,65535
   67278:	00614b40 	call	614b4 <__mulsi3>
   6727c:	9808d43a 	srli	r4,r19,16
   67280:	817fffcc 	andi	r5,r16,65535
   67284:	1145883a 	add	r2,r2,r5
   67288:	e00b883a 	mov	r5,fp
   6728c:	1567883a 	add	r19,r2,r21
   67290:	8020d43a 	srli	r16,r16,16
   67294:	00614b40 	call	614b4 <__mulsi3>
   67298:	9808d43a 	srli	r4,r19,16
   6729c:	1405883a 	add	r2,r2,r16
   672a0:	a4c0000d 	sth	r19,0(r20)
   672a4:	110f883a 	add	r7,r2,r4
   672a8:	a1c0008d 	sth	r7,2(r20)
   672ac:	b5800104 	addi	r22,r22,4
   672b0:	382ad43a 	srli	r21,r7,16
   672b4:	a5000104 	addi	r20,r20,4
   672b8:	b47feb36 	bltu	r22,r17,67268 <__multiply+0xf8>
   672bc:	a5400015 	stw	r21,0(r20)
   672c0:	90800017 	ldw	r2,0(r18)
   672c4:	1038d43a 	srli	fp,r2,16
   672c8:	e0001c26 	beq	fp,zero,6733c <__multiply+0x1cc>
   672cc:	d8c00017 	ldw	r3,0(sp)
   672d0:	dd000417 	ldw	r20,16(sp)
   672d4:	002b883a 	mov	r21,zero
   672d8:	1d800017 	ldw	r22,0(r3)
   672dc:	182f883a 	mov	r23,r3
   672e0:	b021883a 	mov	r16,r22
   672e4:	a4c00017 	ldw	r19,0(r20)
   672e8:	8020d43a 	srli	r16,r16,16
   672ec:	e00b883a 	mov	r5,fp
   672f0:	993fffcc 	andi	r4,r19,65535
   672f4:	00614b40 	call	614b4 <__mulsi3>
   672f8:	1405883a 	add	r2,r2,r16
   672fc:	9808d43a 	srli	r4,r19,16
   67300:	156b883a 	add	r21,r2,r21
   67304:	bdc00104 	addi	r23,r23,4
   67308:	bdbfff0d 	sth	r22,-4(r23)
   6730c:	bd7fff8d 	sth	r21,-2(r23)
   67310:	bc000017 	ldw	r16,0(r23)
   67314:	e00b883a 	mov	r5,fp
   67318:	00614b40 	call	614b4 <__mulsi3>
   6731c:	a80ed43a 	srli	r7,r21,16
   67320:	813fffcc 	andi	r4,r16,65535
   67324:	2085883a 	add	r2,r4,r2
   67328:	11ed883a 	add	r22,r2,r7
   6732c:	a5000104 	addi	r20,r20,4
   67330:	b02ad43a 	srli	r21,r22,16
   67334:	a47feb36 	bltu	r20,r17,672e4 <__multiply+0x174>
   67338:	bd800015 	stw	r22,0(r23)
   6733c:	d8c00017 	ldw	r3,0(sp)
   67340:	94800104 	addi	r18,r18,4
   67344:	18c00104 	addi	r3,r3,4
   67348:	d8c00015 	stw	r3,0(sp)
   6734c:	d8c00317 	ldw	r3,12(sp)
   67350:	90ffbf36 	bltu	r18,r3,67250 <__multiply+0xe0>
   67354:	d8c00117 	ldw	r3,4(sp)
   67358:	00c00c0e 	bge	zero,r3,6738c <__multiply+0x21c>
   6735c:	d8c00217 	ldw	r3,8(sp)
   67360:	18bfff17 	ldw	r2,-4(r3)
   67364:	1d7fff04 	addi	r21,r3,-4
   67368:	10000326 	beq	r2,zero,67378 <__multiply+0x208>
   6736c:	00000706 	br	6738c <__multiply+0x21c>
   67370:	a8800017 	ldw	r2,0(r21)
   67374:	1000051e 	bne	r2,zero,6738c <__multiply+0x21c>
   67378:	d8c00117 	ldw	r3,4(sp)
   6737c:	ad7fff04 	addi	r21,r21,-4
   67380:	18ffffc4 	addi	r3,r3,-1
   67384:	d8c00115 	stw	r3,4(sp)
   67388:	183ff91e 	bne	r3,zero,67370 <__multiply+0x200>
   6738c:	d8800517 	ldw	r2,20(sp)
   67390:	d8c00117 	ldw	r3,4(sp)
   67394:	10c00415 	stw	r3,16(r2)
   67398:	dfc00f17 	ldw	ra,60(sp)
   6739c:	df000e17 	ldw	fp,56(sp)
   673a0:	ddc00d17 	ldw	r23,52(sp)
   673a4:	dd800c17 	ldw	r22,48(sp)
   673a8:	dd400b17 	ldw	r21,44(sp)
   673ac:	dd000a17 	ldw	r20,40(sp)
   673b0:	dcc00917 	ldw	r19,36(sp)
   673b4:	dc800817 	ldw	r18,32(sp)
   673b8:	dc400717 	ldw	r17,28(sp)
   673bc:	dc000617 	ldw	r16,24(sp)
   673c0:	dec01004 	addi	sp,sp,64
   673c4:	f800283a 	ret

000673c8 <__pow5mult>:
   673c8:	defffb04 	addi	sp,sp,-20
   673cc:	dcc00315 	stw	r19,12(sp)
   673d0:	dc800215 	stw	r18,8(sp)
   673d4:	dc000015 	stw	r16,0(sp)
   673d8:	dfc00415 	stw	ra,16(sp)
   673dc:	dc400115 	stw	r17,4(sp)
   673e0:	308000cc 	andi	r2,r6,3
   673e4:	3021883a 	mov	r16,r6
   673e8:	2027883a 	mov	r19,r4
   673ec:	2825883a 	mov	r18,r5
   673f0:	10002e1e 	bne	r2,zero,674ac <__pow5mult+0xe4>
   673f4:	8021d0ba 	srai	r16,r16,2
   673f8:	80001a26 	beq	r16,zero,67464 <__pow5mult+0x9c>
   673fc:	9c401217 	ldw	r17,72(r19)
   67400:	8800061e 	bne	r17,zero,6741c <__pow5mult+0x54>
   67404:	00003406 	br	674d8 <__pow5mult+0x110>
   67408:	8021d07a 	srai	r16,r16,1
   6740c:	80001526 	beq	r16,zero,67464 <__pow5mult+0x9c>
   67410:	88c00017 	ldw	r3,0(r17)
   67414:	18001b26 	beq	r3,zero,67484 <__pow5mult+0xbc>
   67418:	1823883a 	mov	r17,r3
   6741c:	80c0004c 	andi	r3,r16,1
   67420:	183ff926 	beq	r3,zero,67408 <__pow5mult+0x40>
   67424:	900b883a 	mov	r5,r18
   67428:	880d883a 	mov	r6,r17
   6742c:	9809883a 	mov	r4,r19
   67430:	00671700 	call	67170 <__multiply>
   67434:	90001b26 	beq	r18,zero,674a4 <__pow5mult+0xdc>
   67438:	91000117 	ldw	r4,4(r18)
   6743c:	98c01317 	ldw	r3,76(r19)
   67440:	8021d07a 	srai	r16,r16,1
   67444:	2109883a 	add	r4,r4,r4
   67448:	2109883a 	add	r4,r4,r4
   6744c:	1907883a 	add	r3,r3,r4
   67450:	19000017 	ldw	r4,0(r3)
   67454:	91000015 	stw	r4,0(r18)
   67458:	1c800015 	stw	r18,0(r3)
   6745c:	1025883a 	mov	r18,r2
   67460:	803feb1e 	bne	r16,zero,67410 <__pow5mult+0x48>
   67464:	9005883a 	mov	r2,r18
   67468:	dfc00417 	ldw	ra,16(sp)
   6746c:	dcc00317 	ldw	r19,12(sp)
   67470:	dc800217 	ldw	r18,8(sp)
   67474:	dc400117 	ldw	r17,4(sp)
   67478:	dc000017 	ldw	r16,0(sp)
   6747c:	dec00504 	addi	sp,sp,20
   67480:	f800283a 	ret
   67484:	880b883a 	mov	r5,r17
   67488:	880d883a 	mov	r6,r17
   6748c:	9809883a 	mov	r4,r19
   67490:	00671700 	call	67170 <__multiply>
   67494:	88800015 	stw	r2,0(r17)
   67498:	10000015 	stw	zero,0(r2)
   6749c:	1023883a 	mov	r17,r2
   674a0:	003fde06 	br	6741c <__pow5mult+0x54>
   674a4:	1025883a 	mov	r18,r2
   674a8:	003fd706 	br	67408 <__pow5mult+0x40>
   674ac:	10bfffc4 	addi	r2,r2,-1
   674b0:	1085883a 	add	r2,r2,r2
   674b4:	00c001f4 	movhi	r3,7
   674b8:	18f78804 	addi	r3,r3,-8672
   674bc:	1085883a 	add	r2,r2,r2
   674c0:	1885883a 	add	r2,r3,r2
   674c4:	11800017 	ldw	r6,0(r2)
   674c8:	000f883a 	mov	r7,zero
   674cc:	0066dd40 	call	66dd4 <__multadd>
   674d0:	1025883a 	mov	r18,r2
   674d4:	003fc706 	br	673f4 <__pow5mult+0x2c>
   674d8:	9809883a 	mov	r4,r19
   674dc:	01409c44 	movi	r5,625
   674e0:	00671340 	call	67134 <__i2b>
   674e4:	98801215 	stw	r2,72(r19)
   674e8:	1023883a 	mov	r17,r2
   674ec:	10000015 	stw	zero,0(r2)
   674f0:	003fca06 	br	6741c <__pow5mult+0x54>

000674f4 <__lshift>:
   674f4:	defff904 	addi	sp,sp,-28
   674f8:	dd400515 	stw	r21,20(sp)
   674fc:	dc400115 	stw	r17,4(sp)
   67500:	2d400417 	ldw	r21,16(r5)
   67504:	3023d17a 	srai	r17,r6,5
   67508:	28800217 	ldw	r2,8(r5)
   6750c:	dd000415 	stw	r20,16(sp)
   67510:	8d6b883a 	add	r21,r17,r21
   67514:	dcc00315 	stw	r19,12(sp)
   67518:	dc800215 	stw	r18,8(sp)
   6751c:	dc000015 	stw	r16,0(sp)
   67520:	dfc00615 	stw	ra,24(sp)
   67524:	ac000044 	addi	r16,r21,1
   67528:	2825883a 	mov	r18,r5
   6752c:	3029883a 	mov	r20,r6
   67530:	2027883a 	mov	r19,r4
   67534:	29400117 	ldw	r5,4(r5)
   67538:	1400030e 	bge	r2,r16,67548 <__lshift+0x54>
   6753c:	1085883a 	add	r2,r2,r2
   67540:	29400044 	addi	r5,r5,1
   67544:	143ffd16 	blt	r2,r16,6753c <__lshift+0x48>
   67548:	9809883a 	mov	r4,r19
   6754c:	0066d040 	call	66d04 <_Balloc>
   67550:	10c00504 	addi	r3,r2,20
   67554:	0440090e 	bge	zero,r17,6757c <__lshift+0x88>
   67558:	000f883a 	mov	r7,zero
   6755c:	18000015 	stw	zero,0(r3)
   67560:	39c00044 	addi	r7,r7,1
   67564:	18c00104 	addi	r3,r3,4
   67568:	3c7ffc1e 	bne	r7,r17,6755c <__lshift+0x68>
   6756c:	38c00144 	addi	r3,r7,5
   67570:	18c7883a 	add	r3,r3,r3
   67574:	18c7883a 	add	r3,r3,r3
   67578:	10c7883a 	add	r3,r2,r3
   6757c:	92000417 	ldw	r8,16(r18)
   67580:	a18007cc 	andi	r6,r20,31
   67584:	91c00504 	addi	r7,r18,20
   67588:	42000144 	addi	r8,r8,5
   6758c:	4211883a 	add	r8,r8,r8
   67590:	4211883a 	add	r8,r8,r8
   67594:	9211883a 	add	r8,r18,r8
   67598:	30002226 	beq	r6,zero,67624 <__lshift+0x130>
   6759c:	02800804 	movi	r10,32
   675a0:	5195c83a 	sub	r10,r10,r6
   675a4:	000b883a 	mov	r5,zero
   675a8:	3a400017 	ldw	r9,0(r7)
   675ac:	18c00104 	addi	r3,r3,4
   675b0:	39c00104 	addi	r7,r7,4
   675b4:	4992983a 	sll	r9,r9,r6
   675b8:	2a4ab03a 	or	r5,r5,r9
   675bc:	197fff15 	stw	r5,-4(r3)
   675c0:	397fff17 	ldw	r5,-4(r7)
   675c4:	2a8ad83a 	srl	r5,r5,r10
   675c8:	3a3ff736 	bltu	r7,r8,675a8 <__lshift+0xb4>
   675cc:	19400015 	stw	r5,0(r3)
   675d0:	28000126 	beq	r5,zero,675d8 <__lshift+0xe4>
   675d4:	ac000084 	addi	r16,r21,2
   675d8:	91000117 	ldw	r4,4(r18)
   675dc:	98c01317 	ldw	r3,76(r19)
   675e0:	843fffc4 	addi	r16,r16,-1
   675e4:	2109883a 	add	r4,r4,r4
   675e8:	2109883a 	add	r4,r4,r4
   675ec:	1907883a 	add	r3,r3,r4
   675f0:	19000017 	ldw	r4,0(r3)
   675f4:	14000415 	stw	r16,16(r2)
   675f8:	91000015 	stw	r4,0(r18)
   675fc:	1c800015 	stw	r18,0(r3)
   67600:	dfc00617 	ldw	ra,24(sp)
   67604:	dd400517 	ldw	r21,20(sp)
   67608:	dd000417 	ldw	r20,16(sp)
   6760c:	dcc00317 	ldw	r19,12(sp)
   67610:	dc800217 	ldw	r18,8(sp)
   67614:	dc400117 	ldw	r17,4(sp)
   67618:	dc000017 	ldw	r16,0(sp)
   6761c:	dec00704 	addi	sp,sp,28
   67620:	f800283a 	ret
   67624:	39400017 	ldw	r5,0(r7)
   67628:	18c00104 	addi	r3,r3,4
   6762c:	39c00104 	addi	r7,r7,4
   67630:	197fff15 	stw	r5,-4(r3)
   67634:	3a3fe82e 	bgeu	r7,r8,675d8 <__lshift+0xe4>
   67638:	39400017 	ldw	r5,0(r7)
   6763c:	18c00104 	addi	r3,r3,4
   67640:	39c00104 	addi	r7,r7,4
   67644:	197fff15 	stw	r5,-4(r3)
   67648:	3a3ff636 	bltu	r7,r8,67624 <__lshift+0x130>
   6764c:	003fe206 	br	675d8 <__lshift+0xe4>

00067650 <__mcmp>:
   67650:	20800417 	ldw	r2,16(r4)
   67654:	28c00417 	ldw	r3,16(r5)
   67658:	10c5c83a 	sub	r2,r2,r3
   6765c:	10000f1e 	bne	r2,zero,6769c <__mcmp+0x4c>
   67660:	18c00144 	addi	r3,r3,5
   67664:	18c7883a 	add	r3,r3,r3
   67668:	18c7883a 	add	r3,r3,r3
   6766c:	21c00504 	addi	r7,r4,20
   67670:	28cb883a 	add	r5,r5,r3
   67674:	20c9883a 	add	r4,r4,r3
   67678:	213fff04 	addi	r4,r4,-4
   6767c:	297fff04 	addi	r5,r5,-4
   67680:	21800017 	ldw	r6,0(r4)
   67684:	28c00017 	ldw	r3,0(r5)
   67688:	30c0021e 	bne	r6,r3,67694 <__mcmp+0x44>
   6768c:	393ffa36 	bltu	r7,r4,67678 <__mcmp+0x28>
   67690:	f800283a 	ret
   67694:	30c00236 	bltu	r6,r3,676a0 <__mcmp+0x50>
   67698:	00800044 	movi	r2,1
   6769c:	f800283a 	ret
   676a0:	00bfffc4 	movi	r2,-1
   676a4:	f800283a 	ret

000676a8 <__mdiff>:
   676a8:	defffb04 	addi	sp,sp,-20
   676ac:	dc000015 	stw	r16,0(sp)
   676b0:	2821883a 	mov	r16,r5
   676b4:	dc800215 	stw	r18,8(sp)
   676b8:	300b883a 	mov	r5,r6
   676bc:	2025883a 	mov	r18,r4
   676c0:	8009883a 	mov	r4,r16
   676c4:	dc400115 	stw	r17,4(sp)
   676c8:	dfc00415 	stw	ra,16(sp)
   676cc:	dcc00315 	stw	r19,12(sp)
   676d0:	3023883a 	mov	r17,r6
   676d4:	00676500 	call	67650 <__mcmp>
   676d8:	10005026 	beq	r2,zero,6781c <__mdiff+0x174>
   676dc:	10004a16 	blt	r2,zero,67808 <__mdiff+0x160>
   676e0:	0027883a 	mov	r19,zero
   676e4:	81400117 	ldw	r5,4(r16)
   676e8:	9009883a 	mov	r4,r18
   676ec:	0066d040 	call	66d04 <_Balloc>
   676f0:	82400417 	ldw	r9,16(r16)
   676f4:	89800417 	ldw	r6,16(r17)
   676f8:	14c00315 	stw	r19,12(r2)
   676fc:	4b800144 	addi	r14,r9,5
   67700:	31800144 	addi	r6,r6,5
   67704:	739d883a 	add	r14,r14,r14
   67708:	318d883a 	add	r6,r6,r6
   6770c:	739d883a 	add	r14,r14,r14
   67710:	318d883a 	add	r6,r6,r6
   67714:	81c00504 	addi	r7,r16,20
   67718:	839d883a 	add	r14,r16,r14
   6771c:	8a000504 	addi	r8,r17,20
   67720:	898d883a 	add	r6,r17,r6
   67724:	10c00504 	addi	r3,r2,20
   67728:	0009883a 	mov	r4,zero
   6772c:	3b000017 	ldw	r12,0(r7)
   67730:	42c00017 	ldw	r11,0(r8)
   67734:	42000104 	addi	r8,r8,4
   67738:	62bfffcc 	andi	r10,r12,65535
   6773c:	5b7fffcc 	andi	r13,r11,65535
   67740:	5109883a 	add	r4,r10,r4
   67744:	2355c83a 	sub	r10,r4,r13
   67748:	5816d43a 	srli	r11,r11,16
   6774c:	6008d43a 	srli	r4,r12,16
   67750:	501bd43a 	srai	r13,r10,16
   67754:	1a80000d 	sth	r10,0(r3)
   67758:	22c9c83a 	sub	r4,r4,r11
   6775c:	2349883a 	add	r4,r4,r13
   67760:	1900008d 	sth	r4,2(r3)
   67764:	39c00104 	addi	r7,r7,4
   67768:	2009d43a 	srai	r4,r4,16
   6776c:	18c00104 	addi	r3,r3,4
   67770:	41bfee36 	bltu	r8,r6,6772c <__mdiff+0x84>
   67774:	180b883a 	mov	r5,r3
   67778:	3815883a 	mov	r10,r7
   6777c:	3b80132e 	bgeu	r7,r14,677cc <__mdiff+0x124>
   67780:	3a000017 	ldw	r8,0(r7)
   67784:	18c00104 	addi	r3,r3,4
   67788:	39c00104 	addi	r7,r7,4
   6778c:	41bfffcc 	andi	r6,r8,65535
   67790:	310d883a 	add	r6,r6,r4
   67794:	3009d43a 	srai	r4,r6,16
   67798:	4010d43a 	srli	r8,r8,16
   6779c:	19bfff0d 	sth	r6,-4(r3)
   677a0:	2209883a 	add	r4,r4,r8
   677a4:	193fff8d 	sth	r4,-2(r3)
   677a8:	2009d43a 	srai	r4,r4,16
   677ac:	3bbff436 	bltu	r7,r14,67780 <__mdiff+0xd8>
   677b0:	0286303a 	nor	r3,zero,r10
   677b4:	1b87883a 	add	r3,r3,r14
   677b8:	1806d0ba 	srli	r3,r3,2
   677bc:	18c00044 	addi	r3,r3,1
   677c0:	18c7883a 	add	r3,r3,r3
   677c4:	18c7883a 	add	r3,r3,r3
   677c8:	28c7883a 	add	r3,r5,r3
   677cc:	193fff17 	ldw	r4,-4(r3)
   677d0:	18ffff04 	addi	r3,r3,-4
   677d4:	2000041e 	bne	r4,zero,677e8 <__mdiff+0x140>
   677d8:	18ffff04 	addi	r3,r3,-4
   677dc:	19000017 	ldw	r4,0(r3)
   677e0:	4a7fffc4 	addi	r9,r9,-1
   677e4:	203ffc26 	beq	r4,zero,677d8 <__mdiff+0x130>
   677e8:	12400415 	stw	r9,16(r2)
   677ec:	dfc00417 	ldw	ra,16(sp)
   677f0:	dcc00317 	ldw	r19,12(sp)
   677f4:	dc800217 	ldw	r18,8(sp)
   677f8:	dc400117 	ldw	r17,4(sp)
   677fc:	dc000017 	ldw	r16,0(sp)
   67800:	dec00504 	addi	sp,sp,20
   67804:	f800283a 	ret
   67808:	8005883a 	mov	r2,r16
   6780c:	04c00044 	movi	r19,1
   67810:	8821883a 	mov	r16,r17
   67814:	1023883a 	mov	r17,r2
   67818:	003fb206 	br	676e4 <__mdiff+0x3c>
   6781c:	9009883a 	mov	r4,r18
   67820:	000b883a 	mov	r5,zero
   67824:	0066d040 	call	66d04 <_Balloc>
   67828:	00c00044 	movi	r3,1
   6782c:	10c00415 	stw	r3,16(r2)
   67830:	10000515 	stw	zero,20(r2)
   67834:	dfc00417 	ldw	ra,16(sp)
   67838:	dcc00317 	ldw	r19,12(sp)
   6783c:	dc800217 	ldw	r18,8(sp)
   67840:	dc400117 	ldw	r17,4(sp)
   67844:	dc000017 	ldw	r16,0(sp)
   67848:	dec00504 	addi	sp,sp,20
   6784c:	f800283a 	ret

00067850 <__ulp>:
   67850:	295ffc2c 	andhi	r5,r5,32752
   67854:	00bf3034 	movhi	r2,64704
   67858:	2887883a 	add	r3,r5,r2
   6785c:	00c0020e 	bge	zero,r3,67868 <__ulp+0x18>
   67860:	0005883a 	mov	r2,zero
   67864:	f800283a 	ret
   67868:	00c7c83a 	sub	r3,zero,r3
   6786c:	1805d53a 	srai	r2,r3,20
   67870:	00c004c4 	movi	r3,19
   67874:	18800a0e 	bge	r3,r2,678a0 <__ulp+0x50>
   67878:	01000c84 	movi	r4,50
   6787c:	0007883a 	mov	r3,zero
   67880:	20800516 	blt	r4,r2,67898 <__ulp+0x48>
   67884:	01000cc4 	movi	r4,51
   67888:	2085c83a 	sub	r2,r4,r2
   6788c:	01000044 	movi	r4,1
   67890:	2084983a 	sll	r2,r4,r2
   67894:	f800283a 	ret
   67898:	00800044 	movi	r2,1
   6789c:	f800283a 	ret
   678a0:	00c00234 	movhi	r3,8
   678a4:	1887d83a 	sra	r3,r3,r2
   678a8:	0005883a 	mov	r2,zero
   678ac:	f800283a 	ret

000678b0 <__b2d>:
   678b0:	defffa04 	addi	sp,sp,-24
   678b4:	dc000015 	stw	r16,0(sp)
   678b8:	24000417 	ldw	r16,16(r4)
   678bc:	dc400115 	stw	r17,4(sp)
   678c0:	dcc00315 	stw	r19,12(sp)
   678c4:	84000144 	addi	r16,r16,5
   678c8:	8421883a 	add	r16,r16,r16
   678cc:	8421883a 	add	r16,r16,r16
   678d0:	2421883a 	add	r16,r4,r16
   678d4:	847fff17 	ldw	r17,-4(r16)
   678d8:	24c00504 	addi	r19,r4,20
   678dc:	dd000415 	stw	r20,16(sp)
   678e0:	8809883a 	mov	r4,r17
   678e4:	dc800215 	stw	r18,8(sp)
   678e8:	2829883a 	mov	r20,r5
   678ec:	dfc00515 	stw	ra,20(sp)
   678f0:	006701c0 	call	6701c <__hi0bits>
   678f4:	00c00804 	movi	r3,32
   678f8:	1887c83a 	sub	r3,r3,r2
   678fc:	a0c00015 	stw	r3,0(r20)
   67900:	00c00284 	movi	r3,10
   67904:	84bfff04 	addi	r18,r16,-4
   67908:	18801216 	blt	r3,r2,67954 <__b2d+0xa4>
   6790c:	010002c4 	movi	r4,11
   67910:	2089c83a 	sub	r4,r4,r2
   67914:	8906d83a 	srl	r3,r17,r4
   67918:	18cffc34 	orhi	r3,r3,16368
   6791c:	9c80322e 	bgeu	r19,r18,679e8 <__b2d+0x138>
   67920:	817ffe17 	ldw	r5,-8(r16)
   67924:	2908d83a 	srl	r4,r5,r4
   67928:	10800544 	addi	r2,r2,21
   6792c:	88a2983a 	sll	r17,r17,r2
   67930:	2444b03a 	or	r2,r4,r17
   67934:	dfc00517 	ldw	ra,20(sp)
   67938:	dd000417 	ldw	r20,16(sp)
   6793c:	dcc00317 	ldw	r19,12(sp)
   67940:	dc800217 	ldw	r18,8(sp)
   67944:	dc400117 	ldw	r17,4(sp)
   67948:	dc000017 	ldw	r16,0(sp)
   6794c:	dec00604 	addi	sp,sp,24
   67950:	f800283a 	ret
   67954:	9c801636 	bltu	r19,r18,679b0 <__b2d+0x100>
   67958:	113ffd44 	addi	r4,r2,-11
   6795c:	000b883a 	mov	r5,zero
   67960:	20001726 	beq	r4,zero,679c0 <__b2d+0x110>
   67964:	00c00ac4 	movi	r3,43
   67968:	1885c83a 	sub	r2,r3,r2
   6796c:	8906983a 	sll	r3,r17,r4
   67970:	288cd83a 	srl	r6,r5,r2
   67974:	18cffc34 	orhi	r3,r3,16368
   67978:	1986b03a 	or	r3,r3,r6
   6797c:	9c801c2e 	bgeu	r19,r18,679f0 <__b2d+0x140>
   67980:	91bfff17 	ldw	r6,-4(r18)
   67984:	3084d83a 	srl	r2,r6,r2
   67988:	2908983a 	sll	r4,r5,r4
   6798c:	1104b03a 	or	r2,r2,r4
   67990:	dfc00517 	ldw	ra,20(sp)
   67994:	dd000417 	ldw	r20,16(sp)
   67998:	dcc00317 	ldw	r19,12(sp)
   6799c:	dc800217 	ldw	r18,8(sp)
   679a0:	dc400117 	ldw	r17,4(sp)
   679a4:	dc000017 	ldw	r16,0(sp)
   679a8:	dec00604 	addi	sp,sp,24
   679ac:	f800283a 	ret
   679b0:	113ffd44 	addi	r4,r2,-11
   679b4:	84bffe04 	addi	r18,r16,-8
   679b8:	817ffe17 	ldw	r5,-8(r16)
   679bc:	203fe91e 	bne	r4,zero,67964 <__b2d+0xb4>
   679c0:	88cffc34 	orhi	r3,r17,16368
   679c4:	2805883a 	mov	r2,r5
   679c8:	dfc00517 	ldw	ra,20(sp)
   679cc:	dd000417 	ldw	r20,16(sp)
   679d0:	dcc00317 	ldw	r19,12(sp)
   679d4:	dc800217 	ldw	r18,8(sp)
   679d8:	dc400117 	ldw	r17,4(sp)
   679dc:	dc000017 	ldw	r16,0(sp)
   679e0:	dec00604 	addi	sp,sp,24
   679e4:	f800283a 	ret
   679e8:	0009883a 	mov	r4,zero
   679ec:	003fce06 	br	67928 <__b2d+0x78>
   679f0:	0005883a 	mov	r2,zero
   679f4:	003fe406 	br	67988 <__b2d+0xd8>

000679f8 <__d2b>:
   679f8:	defff804 	addi	sp,sp,-32
   679fc:	dc400315 	stw	r17,12(sp)
   67a00:	3023883a 	mov	r17,r6
   67a04:	dc800415 	stw	r18,16(sp)
   67a08:	8824907a 	slli	r18,r17,1
   67a0c:	dcc00515 	stw	r19,20(sp)
   67a10:	2827883a 	mov	r19,r5
   67a14:	9024d57a 	srli	r18,r18,21
   67a18:	01400044 	movi	r5,1
   67a1c:	dd000615 	stw	r20,24(sp)
   67a20:	dc000215 	stw	r16,8(sp)
   67a24:	dfc00715 	stw	ra,28(sp)
   67a28:	3829883a 	mov	r20,r7
   67a2c:	0066d040 	call	66d04 <_Balloc>
   67a30:	1021883a 	mov	r16,r2
   67a34:	00800434 	movhi	r2,16
   67a38:	10bfffc4 	addi	r2,r2,-1
   67a3c:	88a2703a 	and	r17,r17,r2
   67a40:	90000126 	beq	r18,zero,67a48 <__d2b+0x50>
   67a44:	8c400434 	orhi	r17,r17,16
   67a48:	dc400015 	stw	r17,0(sp)
   67a4c:	98002226 	beq	r19,zero,67ad8 <__d2b+0xe0>
   67a50:	d9000104 	addi	r4,sp,4
   67a54:	dcc00115 	stw	r19,4(sp)
   67a58:	00670840 	call	67084 <__lo0bits>
   67a5c:	d8c00017 	ldw	r3,0(sp)
   67a60:	10002d1e 	bne	r2,zero,67b18 <__d2b+0x120>
   67a64:	d9000117 	ldw	r4,4(sp)
   67a68:	81000515 	stw	r4,20(r16)
   67a6c:	1823003a 	cmpeq	r17,r3,zero
   67a70:	01000084 	movi	r4,2
   67a74:	2463c83a 	sub	r17,r4,r17
   67a78:	80c00615 	stw	r3,24(r16)
   67a7c:	84400415 	stw	r17,16(r16)
   67a80:	90001d1e 	bne	r18,zero,67af8 <__d2b+0x100>
   67a84:	88c00104 	addi	r3,r17,4
   67a88:	18c7883a 	add	r3,r3,r3
   67a8c:	18c7883a 	add	r3,r3,r3
   67a90:	80c7883a 	add	r3,r16,r3
   67a94:	19000017 	ldw	r4,0(r3)
   67a98:	10bef384 	addi	r2,r2,-1074
   67a9c:	a0800015 	stw	r2,0(r20)
   67aa0:	006701c0 	call	6701c <__hi0bits>
   67aa4:	8822917a 	slli	r17,r17,5
   67aa8:	d8c00817 	ldw	r3,32(sp)
   67aac:	8885c83a 	sub	r2,r17,r2
   67ab0:	18800015 	stw	r2,0(r3)
   67ab4:	8005883a 	mov	r2,r16
   67ab8:	dfc00717 	ldw	ra,28(sp)
   67abc:	dd000617 	ldw	r20,24(sp)
   67ac0:	dcc00517 	ldw	r19,20(sp)
   67ac4:	dc800417 	ldw	r18,16(sp)
   67ac8:	dc400317 	ldw	r17,12(sp)
   67acc:	dc000217 	ldw	r16,8(sp)
   67ad0:	dec00804 	addi	sp,sp,32
   67ad4:	f800283a 	ret
   67ad8:	d809883a 	mov	r4,sp
   67adc:	00670840 	call	67084 <__lo0bits>
   67ae0:	d8c00017 	ldw	r3,0(sp)
   67ae4:	04400044 	movi	r17,1
   67ae8:	84400415 	stw	r17,16(r16)
   67aec:	80c00515 	stw	r3,20(r16)
   67af0:	10800804 	addi	r2,r2,32
   67af4:	903fe326 	beq	r18,zero,67a84 <__d2b+0x8c>
   67af8:	00c00d44 	movi	r3,53
   67afc:	94bef344 	addi	r18,r18,-1075
   67b00:	90a5883a 	add	r18,r18,r2
   67b04:	1885c83a 	sub	r2,r3,r2
   67b08:	d8c00817 	ldw	r3,32(sp)
   67b0c:	a4800015 	stw	r18,0(r20)
   67b10:	18800015 	stw	r2,0(r3)
   67b14:	003fe706 	br	67ab4 <__d2b+0xbc>
   67b18:	01000804 	movi	r4,32
   67b1c:	2089c83a 	sub	r4,r4,r2
   67b20:	1908983a 	sll	r4,r3,r4
   67b24:	d9400117 	ldw	r5,4(sp)
   67b28:	1886d83a 	srl	r3,r3,r2
   67b2c:	2148b03a 	or	r4,r4,r5
   67b30:	81000515 	stw	r4,20(r16)
   67b34:	d8c00015 	stw	r3,0(sp)
   67b38:	003fcc06 	br	67a6c <__d2b+0x74>

00067b3c <__ratio>:
   67b3c:	defff904 	addi	sp,sp,-28
   67b40:	dc400315 	stw	r17,12(sp)
   67b44:	2823883a 	mov	r17,r5
   67b48:	d9400104 	addi	r5,sp,4
   67b4c:	dfc00615 	stw	ra,24(sp)
   67b50:	dcc00515 	stw	r19,20(sp)
   67b54:	dc800415 	stw	r18,16(sp)
   67b58:	2027883a 	mov	r19,r4
   67b5c:	dc000215 	stw	r16,8(sp)
   67b60:	00678b00 	call	678b0 <__b2d>
   67b64:	8809883a 	mov	r4,r17
   67b68:	d80b883a 	mov	r5,sp
   67b6c:	1025883a 	mov	r18,r2
   67b70:	1821883a 	mov	r16,r3
   67b74:	00678b00 	call	678b0 <__b2d>
   67b78:	99400417 	ldw	r5,16(r19)
   67b7c:	89000417 	ldw	r4,16(r17)
   67b80:	d9800117 	ldw	r6,4(sp)
   67b84:	2909c83a 	sub	r4,r5,r4
   67b88:	d9400017 	ldw	r5,0(sp)
   67b8c:	2008917a 	slli	r4,r4,5
   67b90:	314bc83a 	sub	r5,r6,r5
   67b94:	290b883a 	add	r5,r5,r4
   67b98:	01400e0e 	bge	zero,r5,67bd4 <__ratio+0x98>
   67b9c:	280a953a 	slli	r5,r5,20
   67ba0:	2c21883a 	add	r16,r5,r16
   67ba4:	9009883a 	mov	r4,r18
   67ba8:	800b883a 	mov	r5,r16
   67bac:	100d883a 	mov	r6,r2
   67bb0:	180f883a 	mov	r7,r3
   67bb4:	0069df00 	call	69df0 <__divdf3>
   67bb8:	dfc00617 	ldw	ra,24(sp)
   67bbc:	dcc00517 	ldw	r19,20(sp)
   67bc0:	dc800417 	ldw	r18,16(sp)
   67bc4:	dc400317 	ldw	r17,12(sp)
   67bc8:	dc000217 	ldw	r16,8(sp)
   67bcc:	dec00704 	addi	sp,sp,28
   67bd0:	f800283a 	ret
   67bd4:	280a953a 	slli	r5,r5,20
   67bd8:	1947c83a 	sub	r3,r3,r5
   67bdc:	003ff106 	br	67ba4 <__ratio+0x68>

00067be0 <_mprec_log10>:
   67be0:	defffe04 	addi	sp,sp,-8
   67be4:	dc000015 	stw	r16,0(sp)
   67be8:	dfc00115 	stw	ra,4(sp)
   67bec:	008005c4 	movi	r2,23
   67bf0:	2021883a 	mov	r16,r4
   67bf4:	11000d0e 	bge	r2,r4,67c2c <_mprec_log10+0x4c>
   67bf8:	0005883a 	mov	r2,zero
   67bfc:	00cffc34 	movhi	r3,16368
   67c00:	843fffc4 	addi	r16,r16,-1
   67c04:	1009883a 	mov	r4,r2
   67c08:	180b883a 	mov	r5,r3
   67c0c:	000d883a 	mov	r6,zero
   67c10:	01d00934 	movhi	r7,16420
   67c14:	0069b0c0 	call	69b0c <__muldf3>
   67c18:	803ff91e 	bne	r16,zero,67c00 <_mprec_log10+0x20>
   67c1c:	dfc00117 	ldw	ra,4(sp)
   67c20:	dc000017 	ldw	r16,0(sp)
   67c24:	dec00204 	addi	sp,sp,8
   67c28:	f800283a 	ret
   67c2c:	202090fa 	slli	r16,r4,3
   67c30:	008001f4 	movhi	r2,7
   67c34:	10b75604 	addi	r2,r2,-8872
   67c38:	1421883a 	add	r16,r2,r16
   67c3c:	80800017 	ldw	r2,0(r16)
   67c40:	80c00117 	ldw	r3,4(r16)
   67c44:	dfc00117 	ldw	ra,4(sp)
   67c48:	dc000017 	ldw	r16,0(sp)
   67c4c:	dec00204 	addi	sp,sp,8
   67c50:	f800283a 	ret

00067c54 <__copybits>:
   67c54:	297fffc4 	addi	r5,r5,-1
   67c58:	31c00417 	ldw	r7,16(r6)
   67c5c:	2811d17a 	srai	r8,r5,5
   67c60:	30800504 	addi	r2,r6,20
   67c64:	39c00144 	addi	r7,r7,5
   67c68:	42000044 	addi	r8,r8,1
   67c6c:	39cf883a 	add	r7,r7,r7
   67c70:	4211883a 	add	r8,r8,r8
   67c74:	39cf883a 	add	r7,r7,r7
   67c78:	4211883a 	add	r8,r8,r8
   67c7c:	31cf883a 	add	r7,r6,r7
   67c80:	2211883a 	add	r8,r4,r8
   67c84:	11c00d2e 	bgeu	r2,r7,67cbc <__copybits+0x68>
   67c88:	2007883a 	mov	r3,r4
   67c8c:	11400017 	ldw	r5,0(r2)
   67c90:	18c00104 	addi	r3,r3,4
   67c94:	10800104 	addi	r2,r2,4
   67c98:	197fff15 	stw	r5,-4(r3)
   67c9c:	11fffb36 	bltu	r2,r7,67c8c <__copybits+0x38>
   67ca0:	3985c83a 	sub	r2,r7,r6
   67ca4:	10bffac4 	addi	r2,r2,-21
   67ca8:	1004d0ba 	srli	r2,r2,2
   67cac:	10800044 	addi	r2,r2,1
   67cb0:	1085883a 	add	r2,r2,r2
   67cb4:	1085883a 	add	r2,r2,r2
   67cb8:	2089883a 	add	r4,r4,r2
   67cbc:	2200032e 	bgeu	r4,r8,67ccc <__copybits+0x78>
   67cc0:	20000015 	stw	zero,0(r4)
   67cc4:	21000104 	addi	r4,r4,4
   67cc8:	223ffd36 	bltu	r4,r8,67cc0 <__copybits+0x6c>
   67ccc:	f800283a 	ret

00067cd0 <__any_on>:
   67cd0:	21800417 	ldw	r6,16(r4)
   67cd4:	2805d17a 	srai	r2,r5,5
   67cd8:	20c00504 	addi	r3,r4,20
   67cdc:	30800f0e 	bge	r6,r2,67d1c <__any_on+0x4c>
   67ce0:	3005883a 	mov	r2,r6
   67ce4:	10800144 	addi	r2,r2,5
   67ce8:	1085883a 	add	r2,r2,r2
   67cec:	1085883a 	add	r2,r2,r2
   67cf0:	2089883a 	add	r4,r4,r2
   67cf4:	1900152e 	bgeu	r3,r4,67d4c <__any_on+0x7c>
   67cf8:	20bfff17 	ldw	r2,-4(r4)
   67cfc:	213fff04 	addi	r4,r4,-4
   67d00:	1000041e 	bne	r2,zero,67d14 <__any_on+0x44>
   67d04:	1900112e 	bgeu	r3,r4,67d4c <__any_on+0x7c>
   67d08:	213fff04 	addi	r4,r4,-4
   67d0c:	20800017 	ldw	r2,0(r4)
   67d10:	103ffc26 	beq	r2,zero,67d04 <__any_on+0x34>
   67d14:	00800044 	movi	r2,1
   67d18:	f800283a 	ret
   67d1c:	11bff10e 	bge	r2,r6,67ce4 <__any_on+0x14>
   67d20:	294007cc 	andi	r5,r5,31
   67d24:	283fef26 	beq	r5,zero,67ce4 <__any_on+0x14>
   67d28:	11800144 	addi	r6,r2,5
   67d2c:	318d883a 	add	r6,r6,r6
   67d30:	318d883a 	add	r6,r6,r6
   67d34:	218d883a 	add	r6,r4,r6
   67d38:	31800017 	ldw	r6,0(r6)
   67d3c:	314ed83a 	srl	r7,r6,r5
   67d40:	394a983a 	sll	r5,r7,r5
   67d44:	29bff31e 	bne	r5,r6,67d14 <__any_on+0x44>
   67d48:	003fe606 	br	67ce4 <__any_on+0x14>
   67d4c:	0005883a 	mov	r2,zero
   67d50:	f800283a 	ret

00067d54 <_realloc_r>:
   67d54:	defff504 	addi	sp,sp,-44
   67d58:	dd400615 	stw	r21,24(sp)
   67d5c:	dc800315 	stw	r18,12(sp)
   67d60:	dc000115 	stw	r16,4(sp)
   67d64:	dfc00a15 	stw	ra,40(sp)
   67d68:	df000915 	stw	fp,36(sp)
   67d6c:	ddc00815 	stw	r23,32(sp)
   67d70:	dd800715 	stw	r22,28(sp)
   67d74:	dd000515 	stw	r20,20(sp)
   67d78:	dcc00415 	stw	r19,16(sp)
   67d7c:	dc400215 	stw	r17,8(sp)
   67d80:	2821883a 	mov	r16,r5
   67d84:	202b883a 	mov	r21,r4
   67d88:	3025883a 	mov	r18,r6
   67d8c:	28009626 	beq	r5,zero,67fe8 <_realloc_r+0x294>
   67d90:	006b1740 	call	6b174 <__malloc_lock>
   67d94:	80bfff17 	ldw	r2,-4(r16)
   67d98:	04ffff04 	movi	r19,-4
   67d9c:	90c002c4 	addi	r3,r18,11
   67da0:	01000584 	movi	r4,22
   67da4:	85bffe04 	addi	r22,r16,-8
   67da8:	14e6703a 	and	r19,r2,r19
   67dac:	20c0372e 	bgeu	r4,r3,67e8c <_realloc_r+0x138>
   67db0:	047ffe04 	movi	r17,-8
   67db4:	1c62703a 	and	r17,r3,r17
   67db8:	8807883a 	mov	r3,r17
   67dbc:	88005a16 	blt	r17,zero,67f28 <_realloc_r+0x1d4>
   67dc0:	8c805936 	bltu	r17,r18,67f28 <_realloc_r+0x1d4>
   67dc4:	98c0340e 	bge	r19,r3,67e98 <_realloc_r+0x144>
   67dc8:	070001f4 	movhi	fp,7
   67dcc:	e738ec04 	addi	fp,fp,-7248
   67dd0:	e1400217 	ldw	r5,8(fp)
   67dd4:	b4c9883a 	add	r4,r22,r19
   67dd8:	29009026 	beq	r5,r4,6801c <_realloc_r+0x2c8>
   67ddc:	21800117 	ldw	r6,4(r4)
   67de0:	01ffff84 	movi	r7,-2
   67de4:	31ce703a 	and	r7,r6,r7
   67de8:	21cf883a 	add	r7,r4,r7
   67dec:	39c00117 	ldw	r7,4(r7)
   67df0:	39c0004c 	andi	r7,r7,1
   67df4:	38004326 	beq	r7,zero,67f04 <_realloc_r+0x1b0>
   67df8:	000d883a 	mov	r6,zero
   67dfc:	0009883a 	mov	r4,zero
   67e00:	1080004c 	andi	r2,r2,1
   67e04:	10005a1e 	bne	r2,zero,67f70 <_realloc_r+0x21c>
   67e08:	85fffe17 	ldw	r23,-8(r16)
   67e0c:	00bfff04 	movi	r2,-4
   67e10:	b5efc83a 	sub	r23,r22,r23
   67e14:	b9c00117 	ldw	r7,4(r23)
   67e18:	388e703a 	and	r7,r7,r2
   67e1c:	3ccf883a 	add	r7,r7,r19
   67e20:	20005226 	beq	r4,zero,67f6c <_realloc_r+0x218>
   67e24:	31e9883a 	add	r20,r6,r7
   67e28:	2140c726 	beq	r4,r5,68148 <_realloc_r+0x3f4>
   67e2c:	a0c04f16 	blt	r20,r3,67f6c <_realloc_r+0x218>
   67e30:	20800317 	ldw	r2,12(r4)
   67e34:	20c00217 	ldw	r3,8(r4)
   67e38:	99bfff04 	addi	r6,r19,-4
   67e3c:	01000904 	movi	r4,36
   67e40:	18800315 	stw	r2,12(r3)
   67e44:	10c00215 	stw	r3,8(r2)
   67e48:	b8c00217 	ldw	r3,8(r23)
   67e4c:	b8800317 	ldw	r2,12(r23)
   67e50:	bc800204 	addi	r18,r23,8
   67e54:	18800315 	stw	r2,12(r3)
   67e58:	10c00215 	stw	r3,8(r2)
   67e5c:	2180ed36 	bltu	r4,r6,68214 <_realloc_r+0x4c0>
   67e60:	008004c4 	movi	r2,19
   67e64:	11809b2e 	bgeu	r2,r6,680d4 <_realloc_r+0x380>
   67e68:	80800017 	ldw	r2,0(r16)
   67e6c:	b8800215 	stw	r2,8(r23)
   67e70:	80800117 	ldw	r2,4(r16)
   67e74:	b8800315 	stw	r2,12(r23)
   67e78:	008006c4 	movi	r2,27
   67e7c:	1180f936 	bltu	r2,r6,68264 <_realloc_r+0x510>
   67e80:	b8800404 	addi	r2,r23,16
   67e84:	80c00204 	addi	r3,r16,8
   67e88:	00009406 	br	680dc <_realloc_r+0x388>
   67e8c:	00c00404 	movi	r3,16
   67e90:	1823883a 	mov	r17,r3
   67e94:	003fca06 	br	67dc0 <_realloc_r+0x6c>
   67e98:	9829883a 	mov	r20,r19
   67e9c:	a447c83a 	sub	r3,r20,r17
   67ea0:	010003c4 	movi	r4,15
   67ea4:	1080004c 	andi	r2,r2,1
   67ea8:	20c02336 	bltu	r4,r3,67f38 <_realloc_r+0x1e4>
   67eac:	1504b03a 	or	r2,r2,r20
   67eb0:	b0800115 	stw	r2,4(r22)
   67eb4:	b52d883a 	add	r22,r22,r20
   67eb8:	b0800117 	ldw	r2,4(r22)
   67ebc:	10800054 	ori	r2,r2,1
   67ec0:	b0800115 	stw	r2,4(r22)
   67ec4:	a809883a 	mov	r4,r21
   67ec8:	006b1940 	call	6b194 <__malloc_unlock>
   67ecc:	8025883a 	mov	r18,r16
   67ed0:	9005883a 	mov	r2,r18
   67ed4:	dfc00a17 	ldw	ra,40(sp)
   67ed8:	df000917 	ldw	fp,36(sp)
   67edc:	ddc00817 	ldw	r23,32(sp)
   67ee0:	dd800717 	ldw	r22,28(sp)
   67ee4:	dd400617 	ldw	r21,24(sp)
   67ee8:	dd000517 	ldw	r20,20(sp)
   67eec:	dcc00417 	ldw	r19,16(sp)
   67ef0:	dc800317 	ldw	r18,12(sp)
   67ef4:	dc400217 	ldw	r17,8(sp)
   67ef8:	dc000117 	ldw	r16,4(sp)
   67efc:	dec00b04 	addi	sp,sp,44
   67f00:	f800283a 	ret
   67f04:	01ffff04 	movi	r7,-4
   67f08:	31cc703a 	and	r6,r6,r7
   67f0c:	34e9883a 	add	r20,r6,r19
   67f10:	a0ffbb16 	blt	r20,r3,67e00 <_realloc_r+0xac>
   67f14:	20c00317 	ldw	r3,12(r4)
   67f18:	21000217 	ldw	r4,8(r4)
   67f1c:	20c00315 	stw	r3,12(r4)
   67f20:	19000215 	stw	r4,8(r3)
   67f24:	003fdd06 	br	67e9c <_realloc_r+0x148>
   67f28:	00800304 	movi	r2,12
   67f2c:	a8800015 	stw	r2,0(r21)
   67f30:	0025883a 	mov	r18,zero
   67f34:	003fe606 	br	67ed0 <_realloc_r+0x17c>
   67f38:	1444b03a 	or	r2,r2,r17
   67f3c:	b0800115 	stw	r2,4(r22)
   67f40:	b44b883a 	add	r5,r22,r17
   67f44:	18800054 	ori	r2,r3,1
   67f48:	28800115 	stw	r2,4(r5)
   67f4c:	28c7883a 	add	r3,r5,r3
   67f50:	18800117 	ldw	r2,4(r3)
   67f54:	a809883a 	mov	r4,r21
   67f58:	29400204 	addi	r5,r5,8
   67f5c:	10800054 	ori	r2,r2,1
   67f60:	18800115 	stw	r2,4(r3)
   67f64:	00656880 	call	65688 <_free_r>
   67f68:	003fd606 	br	67ec4 <_realloc_r+0x170>
   67f6c:	38c0330e 	bge	r7,r3,6803c <_realloc_r+0x2e8>
   67f70:	900b883a 	mov	r5,r18
   67f74:	a809883a 	mov	r4,r21
   67f78:	00662200 	call	66220 <_malloc_r>
   67f7c:	1025883a 	mov	r18,r2
   67f80:	10001626 	beq	r2,zero,67fdc <_realloc_r+0x288>
   67f84:	80bfff17 	ldw	r2,-4(r16)
   67f88:	00ffff84 	movi	r3,-2
   67f8c:	913ffe04 	addi	r4,r18,-8
   67f90:	10c6703a 	and	r3,r2,r3
   67f94:	b0c7883a 	add	r3,r22,r3
   67f98:	20c09926 	beq	r4,r3,68200 <_realloc_r+0x4ac>
   67f9c:	99bfff04 	addi	r6,r19,-4
   67fa0:	00800904 	movi	r2,36
   67fa4:	11806436 	bltu	r2,r6,68138 <_realloc_r+0x3e4>
   67fa8:	00c004c4 	movi	r3,19
   67fac:	19804036 	bltu	r3,r6,680b0 <_realloc_r+0x35c>
   67fb0:	9005883a 	mov	r2,r18
   67fb4:	8007883a 	mov	r3,r16
   67fb8:	19000017 	ldw	r4,0(r3)
   67fbc:	11000015 	stw	r4,0(r2)
   67fc0:	19000117 	ldw	r4,4(r3)
   67fc4:	11000115 	stw	r4,4(r2)
   67fc8:	18c00217 	ldw	r3,8(r3)
   67fcc:	10c00215 	stw	r3,8(r2)
   67fd0:	a809883a 	mov	r4,r21
   67fd4:	800b883a 	mov	r5,r16
   67fd8:	00656880 	call	65688 <_free_r>
   67fdc:	a809883a 	mov	r4,r21
   67fe0:	006b1940 	call	6b194 <__malloc_unlock>
   67fe4:	003fba06 	br	67ed0 <_realloc_r+0x17c>
   67fe8:	300b883a 	mov	r5,r6
   67fec:	dfc00a17 	ldw	ra,40(sp)
   67ff0:	df000917 	ldw	fp,36(sp)
   67ff4:	ddc00817 	ldw	r23,32(sp)
   67ff8:	dd800717 	ldw	r22,28(sp)
   67ffc:	dd400617 	ldw	r21,24(sp)
   68000:	dd000517 	ldw	r20,20(sp)
   68004:	dcc00417 	ldw	r19,16(sp)
   68008:	dc800317 	ldw	r18,12(sp)
   6800c:	dc400217 	ldw	r17,8(sp)
   68010:	dc000117 	ldw	r16,4(sp)
   68014:	dec00b04 	addi	sp,sp,44
   68018:	00662201 	jmpi	66220 <_malloc_r>
   6801c:	29800117 	ldw	r6,4(r5)
   68020:	013fff04 	movi	r4,-4
   68024:	89c00404 	addi	r7,r17,16
   68028:	310c703a 	and	r6,r6,r4
   6802c:	34c9883a 	add	r4,r6,r19
   68030:	21c0340e 	bge	r4,r7,68104 <_realloc_r+0x3b0>
   68034:	2809883a 	mov	r4,r5
   68038:	003f7106 	br	67e00 <_realloc_r+0xac>
   6803c:	b8800317 	ldw	r2,12(r23)
   68040:	b8c00217 	ldw	r3,8(r23)
   68044:	99bfff04 	addi	r6,r19,-4
   68048:	01000904 	movi	r4,36
   6804c:	18800315 	stw	r2,12(r3)
   68050:	10c00215 	stw	r3,8(r2)
   68054:	bc800204 	addi	r18,r23,8
   68058:	21807836 	bltu	r4,r6,6823c <_realloc_r+0x4e8>
   6805c:	008004c4 	movi	r2,19
   68060:	1180732e 	bgeu	r2,r6,68230 <_realloc_r+0x4dc>
   68064:	80800017 	ldw	r2,0(r16)
   68068:	b8800215 	stw	r2,8(r23)
   6806c:	80800117 	ldw	r2,4(r16)
   68070:	b8800315 	stw	r2,12(r23)
   68074:	008006c4 	movi	r2,27
   68078:	11808936 	bltu	r2,r6,682a0 <_realloc_r+0x54c>
   6807c:	b8800404 	addi	r2,r23,16
   68080:	80c00204 	addi	r3,r16,8
   68084:	19000017 	ldw	r4,0(r3)
   68088:	9021883a 	mov	r16,r18
   6808c:	3829883a 	mov	r20,r7
   68090:	11000015 	stw	r4,0(r2)
   68094:	19000117 	ldw	r4,4(r3)
   68098:	b82d883a 	mov	r22,r23
   6809c:	11000115 	stw	r4,4(r2)
   680a0:	18c00217 	ldw	r3,8(r3)
   680a4:	10c00215 	stw	r3,8(r2)
   680a8:	b8800117 	ldw	r2,4(r23)
   680ac:	003f7b06 	br	67e9c <_realloc_r+0x148>
   680b0:	80c00017 	ldw	r3,0(r16)
   680b4:	90c00015 	stw	r3,0(r18)
   680b8:	80c00117 	ldw	r3,4(r16)
   680bc:	90c00115 	stw	r3,4(r18)
   680c0:	00c006c4 	movi	r3,27
   680c4:	19804636 	bltu	r3,r6,681e0 <_realloc_r+0x48c>
   680c8:	90800204 	addi	r2,r18,8
   680cc:	80c00204 	addi	r3,r16,8
   680d0:	003fb906 	br	67fb8 <_realloc_r+0x264>
   680d4:	9005883a 	mov	r2,r18
   680d8:	8007883a 	mov	r3,r16
   680dc:	19000017 	ldw	r4,0(r3)
   680e0:	9021883a 	mov	r16,r18
   680e4:	b82d883a 	mov	r22,r23
   680e8:	11000015 	stw	r4,0(r2)
   680ec:	19000117 	ldw	r4,4(r3)
   680f0:	11000115 	stw	r4,4(r2)
   680f4:	18c00217 	ldw	r3,8(r3)
   680f8:	10c00215 	stw	r3,8(r2)
   680fc:	b8800117 	ldw	r2,4(r23)
   68100:	003f6606 	br	67e9c <_realloc_r+0x148>
   68104:	2445c83a 	sub	r2,r4,r17
   68108:	b46d883a 	add	r22,r22,r17
   6810c:	10800054 	ori	r2,r2,1
   68110:	b0800115 	stw	r2,4(r22)
   68114:	80bfff17 	ldw	r2,-4(r16)
   68118:	a809883a 	mov	r4,r21
   6811c:	e5800215 	stw	r22,8(fp)
   68120:	1080004c 	andi	r2,r2,1
   68124:	88a2b03a 	or	r17,r17,r2
   68128:	847fff15 	stw	r17,-4(r16)
   6812c:	006b1940 	call	6b194 <__malloc_unlock>
   68130:	8025883a 	mov	r18,r16
   68134:	003f6606 	br	67ed0 <_realloc_r+0x17c>
   68138:	9009883a 	mov	r4,r18
   6813c:	800b883a 	mov	r5,r16
   68140:	0066a9c0 	call	66a9c <memmove>
   68144:	003fa206 	br	67fd0 <_realloc_r+0x27c>
   68148:	88800404 	addi	r2,r17,16
   6814c:	a0bf8716 	blt	r20,r2,67f6c <_realloc_r+0x218>
   68150:	b8800317 	ldw	r2,12(r23)
   68154:	b8c00217 	ldw	r3,8(r23)
   68158:	99bfff04 	addi	r6,r19,-4
   6815c:	01000904 	movi	r4,36
   68160:	18800315 	stw	r2,12(r3)
   68164:	10c00215 	stw	r3,8(r2)
   68168:	bc800204 	addi	r18,r23,8
   6816c:	21806536 	bltu	r4,r6,68304 <_realloc_r+0x5b0>
   68170:	008004c4 	movi	r2,19
   68174:	1180592e 	bgeu	r2,r6,682dc <_realloc_r+0x588>
   68178:	80800017 	ldw	r2,0(r16)
   6817c:	b8800215 	stw	r2,8(r23)
   68180:	80800117 	ldw	r2,4(r16)
   68184:	b8800315 	stw	r2,12(r23)
   68188:	008006c4 	movi	r2,27
   6818c:	11806136 	bltu	r2,r6,68314 <_realloc_r+0x5c0>
   68190:	b8800404 	addi	r2,r23,16
   68194:	80c00204 	addi	r3,r16,8
   68198:	19000017 	ldw	r4,0(r3)
   6819c:	11000015 	stw	r4,0(r2)
   681a0:	19000117 	ldw	r4,4(r3)
   681a4:	11000115 	stw	r4,4(r2)
   681a8:	18c00217 	ldw	r3,8(r3)
   681ac:	10c00215 	stw	r3,8(r2)
   681b0:	a447c83a 	sub	r3,r20,r17
   681b4:	bc45883a 	add	r2,r23,r17
   681b8:	18c00054 	ori	r3,r3,1
   681bc:	10c00115 	stw	r3,4(r2)
   681c0:	b8c00117 	ldw	r3,4(r23)
   681c4:	e0800215 	stw	r2,8(fp)
   681c8:	a809883a 	mov	r4,r21
   681cc:	1880004c 	andi	r2,r3,1
   681d0:	88a2b03a 	or	r17,r17,r2
   681d4:	bc400115 	stw	r17,4(r23)
   681d8:	006b1940 	call	6b194 <__malloc_unlock>
   681dc:	003f3c06 	br	67ed0 <_realloc_r+0x17c>
   681e0:	80c00217 	ldw	r3,8(r16)
   681e4:	90c00215 	stw	r3,8(r18)
   681e8:	80c00317 	ldw	r3,12(r16)
   681ec:	90c00315 	stw	r3,12(r18)
   681f0:	30802426 	beq	r6,r2,68284 <_realloc_r+0x530>
   681f4:	90800404 	addi	r2,r18,16
   681f8:	80c00404 	addi	r3,r16,16
   681fc:	003f6e06 	br	67fb8 <_realloc_r+0x264>
   68200:	953fff17 	ldw	r20,-4(r18)
   68204:	00ffff04 	movi	r3,-4
   68208:	a0e8703a 	and	r20,r20,r3
   6820c:	a4e9883a 	add	r20,r20,r19
   68210:	003f2206 	br	67e9c <_realloc_r+0x148>
   68214:	800b883a 	mov	r5,r16
   68218:	9009883a 	mov	r4,r18
   6821c:	0066a9c0 	call	66a9c <memmove>
   68220:	9021883a 	mov	r16,r18
   68224:	b8800117 	ldw	r2,4(r23)
   68228:	b82d883a 	mov	r22,r23
   6822c:	003f1b06 	br	67e9c <_realloc_r+0x148>
   68230:	9005883a 	mov	r2,r18
   68234:	8007883a 	mov	r3,r16
   68238:	003f9206 	br	68084 <_realloc_r+0x330>
   6823c:	800b883a 	mov	r5,r16
   68240:	9009883a 	mov	r4,r18
   68244:	d9c00015 	stw	r7,0(sp)
   68248:	0066a9c0 	call	66a9c <memmove>
   6824c:	d9c00017 	ldw	r7,0(sp)
   68250:	9021883a 	mov	r16,r18
   68254:	b8800117 	ldw	r2,4(r23)
   68258:	3829883a 	mov	r20,r7
   6825c:	b82d883a 	mov	r22,r23
   68260:	003f0e06 	br	67e9c <_realloc_r+0x148>
   68264:	80800217 	ldw	r2,8(r16)
   68268:	b8800415 	stw	r2,16(r23)
   6826c:	80800317 	ldw	r2,12(r16)
   68270:	b8800515 	stw	r2,20(r23)
   68274:	31001226 	beq	r6,r4,682c0 <_realloc_r+0x56c>
   68278:	b8800604 	addi	r2,r23,24
   6827c:	80c00404 	addi	r3,r16,16
   68280:	003f9606 	br	680dc <_realloc_r+0x388>
   68284:	81000417 	ldw	r4,16(r16)
   68288:	90800604 	addi	r2,r18,24
   6828c:	80c00604 	addi	r3,r16,24
   68290:	91000415 	stw	r4,16(r18)
   68294:	81000517 	ldw	r4,20(r16)
   68298:	91000515 	stw	r4,20(r18)
   6829c:	003f4606 	br	67fb8 <_realloc_r+0x264>
   682a0:	80800217 	ldw	r2,8(r16)
   682a4:	b8800415 	stw	r2,16(r23)
   682a8:	80800317 	ldw	r2,12(r16)
   682ac:	b8800515 	stw	r2,20(r23)
   682b0:	31000d26 	beq	r6,r4,682e8 <_realloc_r+0x594>
   682b4:	b8800604 	addi	r2,r23,24
   682b8:	80c00404 	addi	r3,r16,16
   682bc:	003f7106 	br	68084 <_realloc_r+0x330>
   682c0:	81000417 	ldw	r4,16(r16)
   682c4:	b8800804 	addi	r2,r23,32
   682c8:	80c00604 	addi	r3,r16,24
   682cc:	b9000615 	stw	r4,24(r23)
   682d0:	81000517 	ldw	r4,20(r16)
   682d4:	b9000715 	stw	r4,28(r23)
   682d8:	003f8006 	br	680dc <_realloc_r+0x388>
   682dc:	9005883a 	mov	r2,r18
   682e0:	8007883a 	mov	r3,r16
   682e4:	003fac06 	br	68198 <_realloc_r+0x444>
   682e8:	81000417 	ldw	r4,16(r16)
   682ec:	b8800804 	addi	r2,r23,32
   682f0:	80c00604 	addi	r3,r16,24
   682f4:	b9000615 	stw	r4,24(r23)
   682f8:	81000517 	ldw	r4,20(r16)
   682fc:	b9000715 	stw	r4,28(r23)
   68300:	003f6006 	br	68084 <_realloc_r+0x330>
   68304:	9009883a 	mov	r4,r18
   68308:	800b883a 	mov	r5,r16
   6830c:	0066a9c0 	call	66a9c <memmove>
   68310:	003fa706 	br	681b0 <_realloc_r+0x45c>
   68314:	80800217 	ldw	r2,8(r16)
   68318:	b8800415 	stw	r2,16(r23)
   6831c:	80800317 	ldw	r2,12(r16)
   68320:	b8800515 	stw	r2,20(r23)
   68324:	31000326 	beq	r6,r4,68334 <_realloc_r+0x5e0>
   68328:	b8800604 	addi	r2,r23,24
   6832c:	80c00404 	addi	r3,r16,16
   68330:	003f9906 	br	68198 <_realloc_r+0x444>
   68334:	81000417 	ldw	r4,16(r16)
   68338:	b8800804 	addi	r2,r23,32
   6833c:	80c00604 	addi	r3,r16,24
   68340:	b9000615 	stw	r4,24(r23)
   68344:	81000517 	ldw	r4,20(r16)
   68348:	b9000715 	stw	r4,28(r23)
   6834c:	003f9206 	br	68198 <_realloc_r+0x444>

00068350 <__isinfd>:
   68350:	0105c83a 	sub	r2,zero,r4
   68354:	1108b03a 	or	r4,r2,r4
   68358:	2004d7fa 	srli	r2,r4,31
   6835c:	00e00034 	movhi	r3,32768
   68360:	18ffffc4 	addi	r3,r3,-1
   68364:	28ca703a 	and	r5,r5,r3
   68368:	1144b03a 	or	r2,r2,r5
   6836c:	00dffc34 	movhi	r3,32752
   68370:	1885c83a 	sub	r2,r3,r2
   68374:	0087c83a 	sub	r3,zero,r2
   68378:	1884b03a 	or	r2,r3,r2
   6837c:	1005d7fa 	srai	r2,r2,31
   68380:	10800044 	addi	r2,r2,1
   68384:	f800283a 	ret

00068388 <__isnand>:
   68388:	0105c83a 	sub	r2,zero,r4
   6838c:	1108b03a 	or	r4,r2,r4
   68390:	2004d7fa 	srli	r2,r4,31
   68394:	00e00034 	movhi	r3,32768
   68398:	18ffffc4 	addi	r3,r3,-1
   6839c:	28ca703a 	and	r5,r5,r3
   683a0:	1144b03a 	or	r2,r2,r5
   683a4:	00dffc34 	movhi	r3,32752
   683a8:	1885c83a 	sub	r2,r3,r2
   683ac:	1004d7fa 	srli	r2,r2,31
   683b0:	f800283a 	ret

000683b4 <_sbrk_r>:
   683b4:	defffd04 	addi	sp,sp,-12
   683b8:	dc400115 	stw	r17,4(sp)
   683bc:	dc000015 	stw	r16,0(sp)
   683c0:	2023883a 	mov	r17,r4
   683c4:	040001f4 	movhi	r16,7
   683c8:	84052d04 	addi	r16,r16,5300
   683cc:	2809883a 	mov	r4,r5
   683d0:	dfc00215 	stw	ra,8(sp)
   683d4:	80000015 	stw	zero,0(r16)
   683d8:	006b3780 	call	6b378 <sbrk>
   683dc:	00ffffc4 	movi	r3,-1
   683e0:	10c00526 	beq	r2,r3,683f8 <_sbrk_r+0x44>
   683e4:	dfc00217 	ldw	ra,8(sp)
   683e8:	dc400117 	ldw	r17,4(sp)
   683ec:	dc000017 	ldw	r16,0(sp)
   683f0:	dec00304 	addi	sp,sp,12
   683f4:	f800283a 	ret
   683f8:	80c00017 	ldw	r3,0(r16)
   683fc:	183ff926 	beq	r3,zero,683e4 <_sbrk_r+0x30>
   68400:	88c00015 	stw	r3,0(r17)
   68404:	dfc00217 	ldw	ra,8(sp)
   68408:	dc400117 	ldw	r17,4(sp)
   6840c:	dc000017 	ldw	r16,0(sp)
   68410:	dec00304 	addi	sp,sp,12
   68414:	f800283a 	ret

00068418 <__sread>:
   68418:	defffe04 	addi	sp,sp,-8
   6841c:	dc000015 	stw	r16,0(sp)
   68420:	2821883a 	mov	r16,r5
   68424:	2940038f 	ldh	r5,14(r5)
   68428:	dfc00115 	stw	ra,4(sp)
   6842c:	0068a200 	call	68a20 <_read_r>
   68430:	10000716 	blt	r2,zero,68450 <__sread+0x38>
   68434:	80c01417 	ldw	r3,80(r16)
   68438:	1887883a 	add	r3,r3,r2
   6843c:	80c01415 	stw	r3,80(r16)
   68440:	dfc00117 	ldw	ra,4(sp)
   68444:	dc000017 	ldw	r16,0(sp)
   68448:	dec00204 	addi	sp,sp,8
   6844c:	f800283a 	ret
   68450:	80c0030b 	ldhu	r3,12(r16)
   68454:	18fbffcc 	andi	r3,r3,61439
   68458:	80c0030d 	sth	r3,12(r16)
   6845c:	dfc00117 	ldw	ra,4(sp)
   68460:	dc000017 	ldw	r16,0(sp)
   68464:	dec00204 	addi	sp,sp,8
   68468:	f800283a 	ret

0006846c <__swrite>:
   6846c:	2880030b 	ldhu	r2,12(r5)
   68470:	defffb04 	addi	sp,sp,-20
   68474:	dcc00315 	stw	r19,12(sp)
   68478:	10c0400c 	andi	r3,r2,256
   6847c:	18ffffcc 	andi	r3,r3,65535
   68480:	18e0001c 	xori	r3,r3,32768
   68484:	dc800215 	stw	r18,8(sp)
   68488:	dc400115 	stw	r17,4(sp)
   6848c:	dc000015 	stw	r16,0(sp)
   68490:	dfc00415 	stw	ra,16(sp)
   68494:	18e00004 	addi	r3,r3,-32768
   68498:	2821883a 	mov	r16,r5
   6849c:	2027883a 	mov	r19,r4
   684a0:	3025883a 	mov	r18,r6
   684a4:	3823883a 	mov	r17,r7
   684a8:	18000526 	beq	r3,zero,684c0 <__swrite+0x54>
   684ac:	2940038f 	ldh	r5,14(r5)
   684b0:	000d883a 	mov	r6,zero
   684b4:	01c00084 	movi	r7,2
   684b8:	00689b40 	call	689b4 <_lseek_r>
   684bc:	8080030b 	ldhu	r2,12(r16)
   684c0:	8140038f 	ldh	r5,14(r16)
   684c4:	10bbffcc 	andi	r2,r2,61439
   684c8:	9809883a 	mov	r4,r19
   684cc:	900d883a 	mov	r6,r18
   684d0:	880f883a 	mov	r7,r17
   684d4:	8080030d 	sth	r2,12(r16)
   684d8:	dfc00417 	ldw	ra,16(sp)
   684dc:	dcc00317 	ldw	r19,12(sp)
   684e0:	dc800217 	ldw	r18,8(sp)
   684e4:	dc400117 	ldw	r17,4(sp)
   684e8:	dc000017 	ldw	r16,0(sp)
   684ec:	dec00504 	addi	sp,sp,20
   684f0:	00685fc1 	jmpi	685fc <_write_r>

000684f4 <__sseek>:
   684f4:	defffe04 	addi	sp,sp,-8
   684f8:	dc000015 	stw	r16,0(sp)
   684fc:	2821883a 	mov	r16,r5
   68500:	2940038f 	ldh	r5,14(r5)
   68504:	dfc00115 	stw	ra,4(sp)
   68508:	00689b40 	call	689b4 <_lseek_r>
   6850c:	00ffffc4 	movi	r3,-1
   68510:	10c00826 	beq	r2,r3,68534 <__sseek+0x40>
   68514:	80c0030b 	ldhu	r3,12(r16)
   68518:	80801415 	stw	r2,80(r16)
   6851c:	18c40014 	ori	r3,r3,4096
   68520:	80c0030d 	sth	r3,12(r16)
   68524:	dfc00117 	ldw	ra,4(sp)
   68528:	dc000017 	ldw	r16,0(sp)
   6852c:	dec00204 	addi	sp,sp,8
   68530:	f800283a 	ret
   68534:	80c0030b 	ldhu	r3,12(r16)
   68538:	18fbffcc 	andi	r3,r3,61439
   6853c:	80c0030d 	sth	r3,12(r16)
   68540:	dfc00117 	ldw	ra,4(sp)
   68544:	dc000017 	ldw	r16,0(sp)
   68548:	dec00204 	addi	sp,sp,8
   6854c:	f800283a 	ret

00068550 <__sclose>:
   68550:	2940038f 	ldh	r5,14(r5)
   68554:	00687341 	jmpi	68734 <_close_r>

00068558 <strcmp>:
   68558:	2904b03a 	or	r2,r5,r4
   6855c:	108000cc 	andi	r2,r2,3
   68560:	1000171e 	bne	r2,zero,685c0 <strcmp+0x68>
   68564:	20800017 	ldw	r2,0(r4)
   68568:	28c00017 	ldw	r3,0(r5)
   6856c:	10c0141e 	bne	r2,r3,685c0 <strcmp+0x68>
   68570:	027fbff4 	movhi	r9,65279
   68574:	4a7fbfc4 	addi	r9,r9,-257
   68578:	1247883a 	add	r3,r2,r9
   6857c:	0084303a 	nor	r2,zero,r2
   68580:	1884703a 	and	r2,r3,r2
   68584:	02202074 	movhi	r8,32897
   68588:	42202004 	addi	r8,r8,-32640
   6858c:	1204703a 	and	r2,r2,r8
   68590:	10000226 	beq	r2,zero,6859c <strcmp+0x44>
   68594:	00001706 	br	685f4 <strcmp+0x9c>
   68598:	3000161e 	bne	r6,zero,685f4 <strcmp+0x9c>
   6859c:	21000104 	addi	r4,r4,4
   685a0:	20800017 	ldw	r2,0(r4)
   685a4:	29400104 	addi	r5,r5,4
   685a8:	28c00017 	ldw	r3,0(r5)
   685ac:	124f883a 	add	r7,r2,r9
   685b0:	008c303a 	nor	r6,zero,r2
   685b4:	398c703a 	and	r6,r7,r6
   685b8:	320c703a 	and	r6,r6,r8
   685bc:	10fff626 	beq	r2,r3,68598 <strcmp+0x40>
   685c0:	20800007 	ldb	r2,0(r4)
   685c4:	1000051e 	bne	r2,zero,685dc <strcmp+0x84>
   685c8:	00000606 	br	685e4 <strcmp+0x8c>
   685cc:	21000044 	addi	r4,r4,1
   685d0:	20800007 	ldb	r2,0(r4)
   685d4:	29400044 	addi	r5,r5,1
   685d8:	10000226 	beq	r2,zero,685e4 <strcmp+0x8c>
   685dc:	28c00007 	ldb	r3,0(r5)
   685e0:	10fffa26 	beq	r2,r3,685cc <strcmp+0x74>
   685e4:	20c00003 	ldbu	r3,0(r4)
   685e8:	28800003 	ldbu	r2,0(r5)
   685ec:	1885c83a 	sub	r2,r3,r2
   685f0:	f800283a 	ret
   685f4:	0005883a 	mov	r2,zero
   685f8:	f800283a 	ret

000685fc <_write_r>:
   685fc:	defffd04 	addi	sp,sp,-12
   68600:	dc400115 	stw	r17,4(sp)
   68604:	dc000015 	stw	r16,0(sp)
   68608:	2023883a 	mov	r17,r4
   6860c:	040001f4 	movhi	r16,7
   68610:	84052d04 	addi	r16,r16,5300
   68614:	2809883a 	mov	r4,r5
   68618:	300b883a 	mov	r5,r6
   6861c:	380d883a 	mov	r6,r7
   68620:	dfc00215 	stw	ra,8(sp)
   68624:	80000015 	stw	zero,0(r16)
   68628:	006b4a80 	call	6b4a8 <write>
   6862c:	00ffffc4 	movi	r3,-1
   68630:	10c00526 	beq	r2,r3,68648 <_write_r+0x4c>
   68634:	dfc00217 	ldw	ra,8(sp)
   68638:	dc400117 	ldw	r17,4(sp)
   6863c:	dc000017 	ldw	r16,0(sp)
   68640:	dec00304 	addi	sp,sp,12
   68644:	f800283a 	ret
   68648:	80c00017 	ldw	r3,0(r16)
   6864c:	183ff926 	beq	r3,zero,68634 <_write_r+0x38>
   68650:	88c00015 	stw	r3,0(r17)
   68654:	dfc00217 	ldw	ra,8(sp)
   68658:	dc400117 	ldw	r17,4(sp)
   6865c:	dc000017 	ldw	r16,0(sp)
   68660:	dec00304 	addi	sp,sp,12
   68664:	f800283a 	ret

00068668 <_calloc_r>:
   68668:	defffe04 	addi	sp,sp,-8
   6866c:	dc000015 	stw	r16,0(sp)
   68670:	2021883a 	mov	r16,r4
   68674:	3009883a 	mov	r4,r6
   68678:	dfc00115 	stw	ra,4(sp)
   6867c:	00614b40 	call	614b4 <__mulsi3>
   68680:	8009883a 	mov	r4,r16
   68684:	100b883a 	mov	r5,r2
   68688:	00662200 	call	66220 <_malloc_r>
   6868c:	1021883a 	mov	r16,r2
   68690:	10000c26 	beq	r2,zero,686c4 <_calloc_r+0x5c>
   68694:	11bfff17 	ldw	r6,-4(r2)
   68698:	00ffff04 	movi	r3,-4
   6869c:	00800904 	movi	r2,36
   686a0:	30cc703a 	and	r6,r6,r3
   686a4:	30cd883a 	add	r6,r6,r3
   686a8:	11801436 	bltu	r2,r6,686fc <_calloc_r+0x94>
   686ac:	00c004c4 	movi	r3,19
   686b0:	19800936 	bltu	r3,r6,686d8 <_calloc_r+0x70>
   686b4:	8005883a 	mov	r2,r16
   686b8:	10000015 	stw	zero,0(r2)
   686bc:	10000115 	stw	zero,4(r2)
   686c0:	10000215 	stw	zero,8(r2)
   686c4:	8005883a 	mov	r2,r16
   686c8:	dfc00117 	ldw	ra,4(sp)
   686cc:	dc000017 	ldw	r16,0(sp)
   686d0:	dec00204 	addi	sp,sp,8
   686d4:	f800283a 	ret
   686d8:	80000015 	stw	zero,0(r16)
   686dc:	80000115 	stw	zero,4(r16)
   686e0:	00c006c4 	movi	r3,27
   686e4:	19800d2e 	bgeu	r3,r6,6871c <_calloc_r+0xb4>
   686e8:	80000215 	stw	zero,8(r16)
   686ec:	80000315 	stw	zero,12(r16)
   686f0:	30800c26 	beq	r6,r2,68724 <_calloc_r+0xbc>
   686f4:	80800404 	addi	r2,r16,16
   686f8:	003fef06 	br	686b8 <_calloc_r+0x50>
   686fc:	8009883a 	mov	r4,r16
   68700:	000b883a 	mov	r5,zero
   68704:	0066c280 	call	66c28 <memset>
   68708:	8005883a 	mov	r2,r16
   6870c:	dfc00117 	ldw	ra,4(sp)
   68710:	dc000017 	ldw	r16,0(sp)
   68714:	dec00204 	addi	sp,sp,8
   68718:	f800283a 	ret
   6871c:	80800204 	addi	r2,r16,8
   68720:	003fe506 	br	686b8 <_calloc_r+0x50>
   68724:	80000415 	stw	zero,16(r16)
   68728:	80000515 	stw	zero,20(r16)
   6872c:	80800604 	addi	r2,r16,24
   68730:	003fe106 	br	686b8 <_calloc_r+0x50>

00068734 <_close_r>:
   68734:	defffd04 	addi	sp,sp,-12
   68738:	dc400115 	stw	r17,4(sp)
   6873c:	dc000015 	stw	r16,0(sp)
   68740:	2023883a 	mov	r17,r4
   68744:	040001f4 	movhi	r16,7
   68748:	84052d04 	addi	r16,r16,5300
   6874c:	2809883a 	mov	r4,r5
   68750:	dfc00215 	stw	ra,8(sp)
   68754:	80000015 	stw	zero,0(r16)
   68758:	006ac000 	call	6ac00 <close>
   6875c:	00ffffc4 	movi	r3,-1
   68760:	10c00526 	beq	r2,r3,68778 <_close_r+0x44>
   68764:	dfc00217 	ldw	ra,8(sp)
   68768:	dc400117 	ldw	r17,4(sp)
   6876c:	dc000017 	ldw	r16,0(sp)
   68770:	dec00304 	addi	sp,sp,12
   68774:	f800283a 	ret
   68778:	80c00017 	ldw	r3,0(r16)
   6877c:	183ff926 	beq	r3,zero,68764 <_close_r+0x30>
   68780:	88c00015 	stw	r3,0(r17)
   68784:	dfc00217 	ldw	ra,8(sp)
   68788:	dc400117 	ldw	r17,4(sp)
   6878c:	dc000017 	ldw	r16,0(sp)
   68790:	dec00304 	addi	sp,sp,12
   68794:	f800283a 	ret

00068798 <_fclose_r>:
   68798:	defffc04 	addi	sp,sp,-16
   6879c:	dc400115 	stw	r17,4(sp)
   687a0:	dc000015 	stw	r16,0(sp)
   687a4:	dfc00315 	stw	ra,12(sp)
   687a8:	dc800215 	stw	r18,8(sp)
   687ac:	2821883a 	mov	r16,r5
   687b0:	2023883a 	mov	r17,r4
   687b4:	28003426 	beq	r5,zero,68888 <_fclose_r+0xf0>
   687b8:	006550c0 	call	6550c <__sfp_lock_acquire>
   687bc:	88000226 	beq	r17,zero,687c8 <_fclose_r+0x30>
   687c0:	88800e17 	ldw	r2,56(r17)
   687c4:	10003826 	beq	r2,zero,688a8 <_fclose_r+0x110>
   687c8:	8080030f 	ldh	r2,12(r16)
   687cc:	10002526 	beq	r2,zero,68864 <_fclose_r+0xcc>
   687d0:	8809883a 	mov	r4,r17
   687d4:	800b883a 	mov	r5,r16
   687d8:	00650480 	call	65048 <_fflush_r>
   687dc:	1025883a 	mov	r18,r2
   687e0:	80800b17 	ldw	r2,44(r16)
   687e4:	10000426 	beq	r2,zero,687f8 <_fclose_r+0x60>
   687e8:	81400717 	ldw	r5,28(r16)
   687ec:	8809883a 	mov	r4,r17
   687f0:	103ee83a 	callr	r2
   687f4:	10003516 	blt	r2,zero,688cc <_fclose_r+0x134>
   687f8:	8080030b 	ldhu	r2,12(r16)
   687fc:	1080200c 	andi	r2,r2,128
   68800:	10bfffcc 	andi	r2,r2,65535
   68804:	10a0001c 	xori	r2,r2,32768
   68808:	10a00004 	addi	r2,r2,-32768
   6880c:	10002b1e 	bne	r2,zero,688bc <_fclose_r+0x124>
   68810:	81400c17 	ldw	r5,48(r16)
   68814:	28000526 	beq	r5,zero,6882c <_fclose_r+0x94>
   68818:	80801004 	addi	r2,r16,64
   6881c:	28800226 	beq	r5,r2,68828 <_fclose_r+0x90>
   68820:	8809883a 	mov	r4,r17
   68824:	00656880 	call	65688 <_free_r>
   68828:	80000c15 	stw	zero,48(r16)
   6882c:	81401117 	ldw	r5,68(r16)
   68830:	28000326 	beq	r5,zero,68840 <_fclose_r+0xa8>
   68834:	8809883a 	mov	r4,r17
   68838:	00656880 	call	65688 <_free_r>
   6883c:	80001115 	stw	zero,68(r16)
   68840:	8000030d 	sth	zero,12(r16)
   68844:	00655100 	call	65510 <__sfp_lock_release>
   68848:	9005883a 	mov	r2,r18
   6884c:	dfc00317 	ldw	ra,12(sp)
   68850:	dc800217 	ldw	r18,8(sp)
   68854:	dc400117 	ldw	r17,4(sp)
   68858:	dc000017 	ldw	r16,0(sp)
   6885c:	dec00404 	addi	sp,sp,16
   68860:	f800283a 	ret
   68864:	00655100 	call	65510 <__sfp_lock_release>
   68868:	0025883a 	mov	r18,zero
   6886c:	9005883a 	mov	r2,r18
   68870:	dfc00317 	ldw	ra,12(sp)
   68874:	dc800217 	ldw	r18,8(sp)
   68878:	dc400117 	ldw	r17,4(sp)
   6887c:	dc000017 	ldw	r16,0(sp)
   68880:	dec00404 	addi	sp,sp,16
   68884:	f800283a 	ret
   68888:	0025883a 	mov	r18,zero
   6888c:	9005883a 	mov	r2,r18
   68890:	dfc00317 	ldw	ra,12(sp)
   68894:	dc800217 	ldw	r18,8(sp)
   68898:	dc400117 	ldw	r17,4(sp)
   6889c:	dc000017 	ldw	r16,0(sp)
   688a0:	dec00404 	addi	sp,sp,16
   688a4:	f800283a 	ret
   688a8:	8809883a 	mov	r4,r17
   688ac:	00653040 	call	65304 <__sinit>
   688b0:	8080030f 	ldh	r2,12(r16)
   688b4:	103fc61e 	bne	r2,zero,687d0 <_fclose_r+0x38>
   688b8:	003fea06 	br	68864 <_fclose_r+0xcc>
   688bc:	81400417 	ldw	r5,16(r16)
   688c0:	8809883a 	mov	r4,r17
   688c4:	00656880 	call	65688 <_free_r>
   688c8:	003fd106 	br	68810 <_fclose_r+0x78>
   688cc:	04bfffc4 	movi	r18,-1
   688d0:	003fc906 	br	687f8 <_fclose_r+0x60>

000688d4 <fclose>:
   688d4:	008001f4 	movhi	r2,7
   688d8:	10be7104 	addi	r2,r2,-1596
   688dc:	200b883a 	mov	r5,r4
   688e0:	11000017 	ldw	r4,0(r2)
   688e4:	00687981 	jmpi	68798 <_fclose_r>

000688e8 <_fstat_r>:
   688e8:	defffd04 	addi	sp,sp,-12
   688ec:	dc400115 	stw	r17,4(sp)
   688f0:	dc000015 	stw	r16,0(sp)
   688f4:	2023883a 	mov	r17,r4
   688f8:	040001f4 	movhi	r16,7
   688fc:	84052d04 	addi	r16,r16,5300
   68900:	2809883a 	mov	r4,r5
   68904:	300b883a 	mov	r5,r6
   68908:	dfc00215 	stw	ra,8(sp)
   6890c:	80000015 	stw	zero,0(r16)
   68910:	006ad480 	call	6ad48 <fstat>
   68914:	00ffffc4 	movi	r3,-1
   68918:	10c00526 	beq	r2,r3,68930 <_fstat_r+0x48>
   6891c:	dfc00217 	ldw	ra,8(sp)
   68920:	dc400117 	ldw	r17,4(sp)
   68924:	dc000017 	ldw	r16,0(sp)
   68928:	dec00304 	addi	sp,sp,12
   6892c:	f800283a 	ret
   68930:	80c00017 	ldw	r3,0(r16)
   68934:	183ff926 	beq	r3,zero,6891c <_fstat_r+0x34>
   68938:	88c00015 	stw	r3,0(r17)
   6893c:	dfc00217 	ldw	ra,8(sp)
   68940:	dc400117 	ldw	r17,4(sp)
   68944:	dc000017 	ldw	r16,0(sp)
   68948:	dec00304 	addi	sp,sp,12
   6894c:	f800283a 	ret

00068950 <_isatty_r>:
   68950:	defffd04 	addi	sp,sp,-12
   68954:	dc400115 	stw	r17,4(sp)
   68958:	dc000015 	stw	r16,0(sp)
   6895c:	2023883a 	mov	r17,r4
   68960:	040001f4 	movhi	r16,7
   68964:	84052d04 	addi	r16,r16,5300
   68968:	2809883a 	mov	r4,r5
   6896c:	dfc00215 	stw	ra,8(sp)
   68970:	80000015 	stw	zero,0(r16)
   68974:	006ae480 	call	6ae48 <isatty>
   68978:	00ffffc4 	movi	r3,-1
   6897c:	10c00526 	beq	r2,r3,68994 <_isatty_r+0x44>
   68980:	dfc00217 	ldw	ra,8(sp)
   68984:	dc400117 	ldw	r17,4(sp)
   68988:	dc000017 	ldw	r16,0(sp)
   6898c:	dec00304 	addi	sp,sp,12
   68990:	f800283a 	ret
   68994:	80c00017 	ldw	r3,0(r16)
   68998:	183ff926 	beq	r3,zero,68980 <_isatty_r+0x30>
   6899c:	88c00015 	stw	r3,0(r17)
   689a0:	dfc00217 	ldw	ra,8(sp)
   689a4:	dc400117 	ldw	r17,4(sp)
   689a8:	dc000017 	ldw	r16,0(sp)
   689ac:	dec00304 	addi	sp,sp,12
   689b0:	f800283a 	ret

000689b4 <_lseek_r>:
   689b4:	defffd04 	addi	sp,sp,-12
   689b8:	dc400115 	stw	r17,4(sp)
   689bc:	dc000015 	stw	r16,0(sp)
   689c0:	2023883a 	mov	r17,r4
   689c4:	040001f4 	movhi	r16,7
   689c8:	84052d04 	addi	r16,r16,5300
   689cc:	2809883a 	mov	r4,r5
   689d0:	300b883a 	mov	r5,r6
   689d4:	380d883a 	mov	r6,r7
   689d8:	dfc00215 	stw	ra,8(sp)
   689dc:	80000015 	stw	zero,0(r16)
   689e0:	006b0280 	call	6b028 <lseek>
   689e4:	00ffffc4 	movi	r3,-1
   689e8:	10c00526 	beq	r2,r3,68a00 <_lseek_r+0x4c>
   689ec:	dfc00217 	ldw	ra,8(sp)
   689f0:	dc400117 	ldw	r17,4(sp)
   689f4:	dc000017 	ldw	r16,0(sp)
   689f8:	dec00304 	addi	sp,sp,12
   689fc:	f800283a 	ret
   68a00:	80c00017 	ldw	r3,0(r16)
   68a04:	183ff926 	beq	r3,zero,689ec <_lseek_r+0x38>
   68a08:	88c00015 	stw	r3,0(r17)
   68a0c:	dfc00217 	ldw	ra,8(sp)
   68a10:	dc400117 	ldw	r17,4(sp)
   68a14:	dc000017 	ldw	r16,0(sp)
   68a18:	dec00304 	addi	sp,sp,12
   68a1c:	f800283a 	ret

00068a20 <_read_r>:
   68a20:	defffd04 	addi	sp,sp,-12
   68a24:	dc400115 	stw	r17,4(sp)
   68a28:	dc000015 	stw	r16,0(sp)
   68a2c:	2023883a 	mov	r17,r4
   68a30:	040001f4 	movhi	r16,7
   68a34:	84052d04 	addi	r16,r16,5300
   68a38:	2809883a 	mov	r4,r5
   68a3c:	300b883a 	mov	r5,r6
   68a40:	380d883a 	mov	r6,r7
   68a44:	dfc00215 	stw	ra,8(sp)
   68a48:	80000015 	stw	zero,0(r16)
   68a4c:	006b2040 	call	6b204 <read>
   68a50:	00ffffc4 	movi	r3,-1
   68a54:	10c00526 	beq	r2,r3,68a6c <_read_r+0x4c>
   68a58:	dfc00217 	ldw	ra,8(sp)
   68a5c:	dc400117 	ldw	r17,4(sp)
   68a60:	dc000017 	ldw	r16,0(sp)
   68a64:	dec00304 	addi	sp,sp,12
   68a68:	f800283a 	ret
   68a6c:	80c00017 	ldw	r3,0(r16)
   68a70:	183ff926 	beq	r3,zero,68a58 <_read_r+0x38>
   68a74:	88c00015 	stw	r3,0(r17)
   68a78:	dfc00217 	ldw	ra,8(sp)
   68a7c:	dc400117 	ldw	r17,4(sp)
   68a80:	dc000017 	ldw	r16,0(sp)
   68a84:	dec00304 	addi	sp,sp,12
   68a88:	f800283a 	ret

00068a8c <__udivdi3>:
   68a8c:	defff504 	addi	sp,sp,-44
   68a90:	dd000515 	stw	r20,20(sp)
   68a94:	dcc00415 	stw	r19,16(sp)
   68a98:	dc800315 	stw	r18,12(sp)
   68a9c:	dc400215 	stw	r17,8(sp)
   68aa0:	dc000115 	stw	r16,4(sp)
   68aa4:	dfc00a15 	stw	ra,40(sp)
   68aa8:	df000915 	stw	fp,36(sp)
   68aac:	ddc00815 	stw	r23,32(sp)
   68ab0:	dd800715 	stw	r22,28(sp)
   68ab4:	dd400615 	stw	r21,24(sp)
   68ab8:	2025883a 	mov	r18,r4
   68abc:	2823883a 	mov	r17,r5
   68ac0:	3021883a 	mov	r16,r6
   68ac4:	2027883a 	mov	r19,r4
   68ac8:	2829883a 	mov	r20,r5
   68acc:	3800451e 	bne	r7,zero,68be4 <__udivdi3+0x158>
   68ad0:	2980652e 	bgeu	r5,r6,68c68 <__udivdi3+0x1dc>
   68ad4:	00bfffd4 	movui	r2,65535
   68ad8:	1180b436 	bltu	r2,r6,68dac <__udivdi3+0x320>
   68adc:	00803fc4 	movi	r2,255
   68ae0:	11816636 	bltu	r2,r6,6907c <__udivdi3+0x5f0>
   68ae4:	0005883a 	mov	r2,zero
   68ae8:	0007883a 	mov	r3,zero
   68aec:	3084d83a 	srl	r2,r6,r2
   68af0:	010001f4 	movhi	r4,7
   68af4:	21379004 	addi	r4,r4,-8640
   68af8:	2085883a 	add	r2,r4,r2
   68afc:	10800003 	ldbu	r2,0(r2)
   68b00:	10c7883a 	add	r3,r2,r3
   68b04:	00800804 	movi	r2,32
   68b08:	10c5c83a 	sub	r2,r2,r3
   68b0c:	10000526 	beq	r2,zero,68b24 <__udivdi3+0x98>
   68b10:	88a2983a 	sll	r17,r17,r2
   68b14:	90c6d83a 	srl	r3,r18,r3
   68b18:	30a0983a 	sll	r16,r6,r2
   68b1c:	90a6983a 	sll	r19,r18,r2
   68b20:	88e8b03a 	or	r20,r17,r3
   68b24:	8022d43a 	srli	r17,r16,16
   68b28:	a009883a 	mov	r4,r20
   68b2c:	857fffcc 	andi	r21,r16,65535
   68b30:	880b883a 	mov	r5,r17
   68b34:	006a56c0 	call	6a56c <__umodsi3>
   68b38:	a009883a 	mov	r4,r20
   68b3c:	880b883a 	mov	r5,r17
   68b40:	102d883a 	mov	r22,r2
   68b44:	006a5640 	call	6a564 <__udivsi3>
   68b48:	1009883a 	mov	r4,r2
   68b4c:	a80b883a 	mov	r5,r21
   68b50:	1025883a 	mov	r18,r2
   68b54:	00614b40 	call	614b4 <__mulsi3>
   68b58:	1009883a 	mov	r4,r2
   68b5c:	b006943a 	slli	r3,r22,16
   68b60:	9804d43a 	srli	r2,r19,16
   68b64:	1886b03a 	or	r3,r3,r2
   68b68:	1900052e 	bgeu	r3,r4,68b80 <__udivdi3+0xf4>
   68b6c:	1c07883a 	add	r3,r3,r16
   68b70:	90bfffc4 	addi	r2,r18,-1
   68b74:	1c000136 	bltu	r3,r16,68b7c <__udivdi3+0xf0>
   68b78:	19015536 	bltu	r3,r4,690d0 <__udivdi3+0x644>
   68b7c:	1025883a 	mov	r18,r2
   68b80:	1929c83a 	sub	r20,r3,r4
   68b84:	880b883a 	mov	r5,r17
   68b88:	a009883a 	mov	r4,r20
   68b8c:	006a56c0 	call	6a56c <__umodsi3>
   68b90:	102d883a 	mov	r22,r2
   68b94:	880b883a 	mov	r5,r17
   68b98:	a009883a 	mov	r4,r20
   68b9c:	b02c943a 	slli	r22,r22,16
   68ba0:	006a5640 	call	6a564 <__udivsi3>
   68ba4:	1009883a 	mov	r4,r2
   68ba8:	a80b883a 	mov	r5,r21
   68bac:	9cffffcc 	andi	r19,r19,65535
   68bb0:	1023883a 	mov	r17,r2
   68bb4:	b4e6b03a 	or	r19,r22,r19
   68bb8:	00614b40 	call	614b4 <__mulsi3>
   68bbc:	9880052e 	bgeu	r19,r2,68bd4 <__udivdi3+0x148>
   68bc0:	9c27883a 	add	r19,r19,r16
   68bc4:	88ffffc4 	addi	r3,r17,-1
   68bc8:	9c011436 	bltu	r19,r16,6901c <__udivdi3+0x590>
   68bcc:	9881132e 	bgeu	r19,r2,6901c <__udivdi3+0x590>
   68bd0:	8c7fff84 	addi	r17,r17,-2
   68bd4:	9004943a 	slli	r2,r18,16
   68bd8:	0007883a 	mov	r3,zero
   68bdc:	8884b03a 	or	r2,r17,r2
   68be0:	00001506 	br	68c38 <__udivdi3+0x1ac>
   68be4:	29c06a36 	bltu	r5,r7,68d90 <__udivdi3+0x304>
   68be8:	00bfffd4 	movui	r2,65535
   68bec:	11c06a2e 	bgeu	r2,r7,68d98 <__udivdi3+0x30c>
   68bf0:	00804034 	movhi	r2,256
   68bf4:	10bfffc4 	addi	r2,r2,-1
   68bf8:	11c11436 	bltu	r2,r7,6904c <__udivdi3+0x5c0>
   68bfc:	00c00404 	movi	r3,16
   68c00:	180b883a 	mov	r5,r3
   68c04:	38c6d83a 	srl	r3,r7,r3
   68c08:	010001f4 	movhi	r4,7
   68c0c:	21379004 	addi	r4,r4,-8640
   68c10:	04000804 	movi	r16,32
   68c14:	20c7883a 	add	r3,r4,r3
   68c18:	18800003 	ldbu	r2,0(r3)
   68c1c:	1145883a 	add	r2,r2,r5
   68c20:	80a1c83a 	sub	r16,r16,r2
   68c24:	80006e1e 	bne	r16,zero,68de0 <__udivdi3+0x354>
   68c28:	0007883a 	mov	r3,zero
   68c2c:	3c406a36 	bltu	r7,r17,68dd8 <__udivdi3+0x34c>
   68c30:	9180692e 	bgeu	r18,r6,68dd8 <__udivdi3+0x34c>
   68c34:	0005883a 	mov	r2,zero
   68c38:	dfc00a17 	ldw	ra,40(sp)
   68c3c:	df000917 	ldw	fp,36(sp)
   68c40:	ddc00817 	ldw	r23,32(sp)
   68c44:	dd800717 	ldw	r22,28(sp)
   68c48:	dd400617 	ldw	r21,24(sp)
   68c4c:	dd000517 	ldw	r20,20(sp)
   68c50:	dcc00417 	ldw	r19,16(sp)
   68c54:	dc800317 	ldw	r18,12(sp)
   68c58:	dc400217 	ldw	r17,8(sp)
   68c5c:	dc000117 	ldw	r16,4(sp)
   68c60:	dec00b04 	addi	sp,sp,44
   68c64:	f800283a 	ret
   68c68:	3000041e 	bne	r6,zero,68c7c <__udivdi3+0x1f0>
   68c6c:	01000044 	movi	r4,1
   68c70:	000b883a 	mov	r5,zero
   68c74:	006a5640 	call	6a564 <__udivsi3>
   68c78:	1021883a 	mov	r16,r2
   68c7c:	00bfffd4 	movui	r2,65535
   68c80:	1400502e 	bgeu	r2,r16,68dc4 <__udivdi3+0x338>
   68c84:	00804034 	movhi	r2,256
   68c88:	10bfffc4 	addi	r2,r2,-1
   68c8c:	1400f536 	bltu	r2,r16,69064 <__udivdi3+0x5d8>
   68c90:	00800404 	movi	r2,16
   68c94:	1007883a 	mov	r3,r2
   68c98:	8084d83a 	srl	r2,r16,r2
   68c9c:	010001f4 	movhi	r4,7
   68ca0:	21379004 	addi	r4,r4,-8640
   68ca4:	2085883a 	add	r2,r4,r2
   68ca8:	10800003 	ldbu	r2,0(r2)
   68cac:	10c7883a 	add	r3,r2,r3
   68cb0:	00800804 	movi	r2,32
   68cb4:	10c5c83a 	sub	r2,r2,r3
   68cb8:	1000a01e 	bne	r2,zero,68f3c <__udivdi3+0x4b0>
   68cbc:	8028d43a 	srli	r20,r16,16
   68cc0:	8c23c83a 	sub	r17,r17,r16
   68cc4:	857fffcc 	andi	r21,r16,65535
   68cc8:	00c00044 	movi	r3,1
   68ccc:	8809883a 	mov	r4,r17
   68cd0:	a00b883a 	mov	r5,r20
   68cd4:	d8c00015 	stw	r3,0(sp)
   68cd8:	006a56c0 	call	6a56c <__umodsi3>
   68cdc:	8809883a 	mov	r4,r17
   68ce0:	a00b883a 	mov	r5,r20
   68ce4:	102d883a 	mov	r22,r2
   68ce8:	006a5640 	call	6a564 <__udivsi3>
   68cec:	1009883a 	mov	r4,r2
   68cf0:	a80b883a 	mov	r5,r21
   68cf4:	1025883a 	mov	r18,r2
   68cf8:	00614b40 	call	614b4 <__mulsi3>
   68cfc:	1009883a 	mov	r4,r2
   68d00:	b00c943a 	slli	r6,r22,16
   68d04:	9804d43a 	srli	r2,r19,16
   68d08:	d8c00017 	ldw	r3,0(sp)
   68d0c:	308cb03a 	or	r6,r6,r2
   68d10:	3100052e 	bgeu	r6,r4,68d28 <__udivdi3+0x29c>
   68d14:	340d883a 	add	r6,r6,r16
   68d18:	90bfffc4 	addi	r2,r18,-1
   68d1c:	34000136 	bltu	r6,r16,68d24 <__udivdi3+0x298>
   68d20:	3100e836 	bltu	r6,r4,690c4 <__udivdi3+0x638>
   68d24:	1025883a 	mov	r18,r2
   68d28:	3123c83a 	sub	r17,r6,r4
   68d2c:	8809883a 	mov	r4,r17
   68d30:	a00b883a 	mov	r5,r20
   68d34:	d8c00015 	stw	r3,0(sp)
   68d38:	006a56c0 	call	6a56c <__umodsi3>
   68d3c:	102d883a 	mov	r22,r2
   68d40:	8809883a 	mov	r4,r17
   68d44:	a00b883a 	mov	r5,r20
   68d48:	b02c943a 	slli	r22,r22,16
   68d4c:	006a5640 	call	6a564 <__udivsi3>
   68d50:	1009883a 	mov	r4,r2
   68d54:	a80b883a 	mov	r5,r21
   68d58:	9cffffcc 	andi	r19,r19,65535
   68d5c:	1023883a 	mov	r17,r2
   68d60:	b4e6b03a 	or	r19,r22,r19
   68d64:	00614b40 	call	614b4 <__mulsi3>
   68d68:	d8c00017 	ldw	r3,0(sp)
   68d6c:	9880052e 	bgeu	r19,r2,68d84 <__udivdi3+0x2f8>
   68d70:	9c27883a 	add	r19,r19,r16
   68d74:	893fffc4 	addi	r4,r17,-1
   68d78:	9c00aa36 	bltu	r19,r16,69024 <__udivdi3+0x598>
   68d7c:	9880a92e 	bgeu	r19,r2,69024 <__udivdi3+0x598>
   68d80:	8c7fff84 	addi	r17,r17,-2
   68d84:	9004943a 	slli	r2,r18,16
   68d88:	8884b03a 	or	r2,r17,r2
   68d8c:	003faa06 	br	68c38 <__udivdi3+0x1ac>
   68d90:	0007883a 	mov	r3,zero
   68d94:	003fa706 	br	68c34 <__udivdi3+0x1a8>
   68d98:	00803fc4 	movi	r2,255
   68d9c:	11c0ae36 	bltu	r2,r7,69058 <__udivdi3+0x5cc>
   68da0:	0007883a 	mov	r3,zero
   68da4:	000b883a 	mov	r5,zero
   68da8:	003f9606 	br	68c04 <__udivdi3+0x178>
   68dac:	00804034 	movhi	r2,256
   68db0:	10bfffc4 	addi	r2,r2,-1
   68db4:	1180ae36 	bltu	r2,r6,69070 <__udivdi3+0x5e4>
   68db8:	00800404 	movi	r2,16
   68dbc:	1007883a 	mov	r3,r2
   68dc0:	003f4a06 	br	68aec <__udivdi3+0x60>
   68dc4:	00803fc4 	movi	r2,255
   68dc8:	1400af36 	bltu	r2,r16,69088 <__udivdi3+0x5fc>
   68dcc:	0005883a 	mov	r2,zero
   68dd0:	0007883a 	mov	r3,zero
   68dd4:	003fb006 	br	68c98 <__udivdi3+0x20c>
   68dd8:	00800044 	movi	r2,1
   68ddc:	003f9606 	br	68c38 <__udivdi3+0x1ac>
   68de0:	3c0e983a 	sll	r7,r7,r16
   68de4:	3086d83a 	srl	r3,r6,r2
   68de8:	88aed83a 	srl	r23,r17,r2
   68dec:	9084d83a 	srl	r2,r18,r2
   68df0:	38e6b03a 	or	r19,r7,r3
   68df4:	9828d43a 	srli	r20,r19,16
   68df8:	8c22983a 	sll	r17,r17,r16
   68dfc:	b809883a 	mov	r4,r23
   68e00:	a00b883a 	mov	r5,r20
   68e04:	342a983a 	sll	r21,r6,r16
   68e08:	88a2b03a 	or	r17,r17,r2
   68e0c:	006a56c0 	call	6a56c <__umodsi3>
   68e10:	b809883a 	mov	r4,r23
   68e14:	a00b883a 	mov	r5,r20
   68e18:	1039883a 	mov	fp,r2
   68e1c:	9dbfffcc 	andi	r22,r19,65535
   68e20:	006a5640 	call	6a564 <__udivsi3>
   68e24:	1009883a 	mov	r4,r2
   68e28:	b00b883a 	mov	r5,r22
   68e2c:	102f883a 	mov	r23,r2
   68e30:	00614b40 	call	614b4 <__mulsi3>
   68e34:	1009883a 	mov	r4,r2
   68e38:	e00e943a 	slli	r7,fp,16
   68e3c:	8804d43a 	srli	r2,r17,16
   68e40:	388eb03a 	or	r7,r7,r2
   68e44:	3900042e 	bgeu	r7,r4,68e58 <__udivdi3+0x3cc>
   68e48:	3ccf883a 	add	r7,r7,r19
   68e4c:	b8bfffc4 	addi	r2,r23,-1
   68e50:	3cc0942e 	bgeu	r7,r19,690a4 <__udivdi3+0x618>
   68e54:	102f883a 	mov	r23,r2
   68e58:	3939c83a 	sub	fp,r7,r4
   68e5c:	a00b883a 	mov	r5,r20
   68e60:	e009883a 	mov	r4,fp
   68e64:	006a56c0 	call	6a56c <__umodsi3>
   68e68:	a00b883a 	mov	r5,r20
   68e6c:	e009883a 	mov	r4,fp
   68e70:	d8800015 	stw	r2,0(sp)
   68e74:	006a5640 	call	6a564 <__udivsi3>
   68e78:	1009883a 	mov	r4,r2
   68e7c:	b00b883a 	mov	r5,r22
   68e80:	1029883a 	mov	r20,r2
   68e84:	00614b40 	call	614b4 <__mulsi3>
   68e88:	d8c00017 	ldw	r3,0(sp)
   68e8c:	8c7fffcc 	andi	r17,r17,65535
   68e90:	1806943a 	slli	r3,r3,16
   68e94:	1c46b03a 	or	r3,r3,r17
   68e98:	1880042e 	bgeu	r3,r2,68eac <__udivdi3+0x420>
   68e9c:	1cc7883a 	add	r3,r3,r19
   68ea0:	a13fffc4 	addi	r4,r20,-1
   68ea4:	1cc07b2e 	bgeu	r3,r19,69094 <__udivdi3+0x608>
   68ea8:	2029883a 	mov	r20,r4
   68eac:	b82e943a 	slli	r23,r23,16
   68eb0:	a822d43a 	srli	r17,r21,16
   68eb4:	ad7fffcc 	andi	r21,r21,65535
   68eb8:	a5e8b03a 	or	r20,r20,r23
   68ebc:	a5bfffcc 	andi	r22,r20,65535
   68ec0:	b009883a 	mov	r4,r22
   68ec4:	a80b883a 	mov	r5,r21
   68ec8:	18afc83a 	sub	r23,r3,r2
   68ecc:	a026d43a 	srli	r19,r20,16
   68ed0:	00614b40 	call	614b4 <__mulsi3>
   68ed4:	b009883a 	mov	r4,r22
   68ed8:	880b883a 	mov	r5,r17
   68edc:	1039883a 	mov	fp,r2
   68ee0:	00614b40 	call	614b4 <__mulsi3>
   68ee4:	a80b883a 	mov	r5,r21
   68ee8:	9809883a 	mov	r4,r19
   68eec:	102d883a 	mov	r22,r2
   68ef0:	00614b40 	call	614b4 <__mulsi3>
   68ef4:	9809883a 	mov	r4,r19
   68ef8:	880b883a 	mov	r5,r17
   68efc:	102b883a 	mov	r21,r2
   68f00:	00614b40 	call	614b4 <__mulsi3>
   68f04:	100b883a 	mov	r5,r2
   68f08:	e004d43a 	srli	r2,fp,16
   68f0c:	ad89883a 	add	r4,r21,r22
   68f10:	2089883a 	add	r4,r4,r2
   68f14:	2540022e 	bgeu	r4,r21,68f20 <__udivdi3+0x494>
   68f18:	00800074 	movhi	r2,1
   68f1c:	288b883a 	add	r5,r5,r2
   68f20:	2004d43a 	srli	r2,r4,16
   68f24:	288b883a 	add	r5,r5,r2
   68f28:	b9404536 	bltu	r23,r5,69040 <__udivdi3+0x5b4>
   68f2c:	b9403f26 	beq	r23,r5,6902c <__udivdi3+0x5a0>
   68f30:	a005883a 	mov	r2,r20
   68f34:	0007883a 	mov	r3,zero
   68f38:	003f3f06 	br	68c38 <__udivdi3+0x1ac>
   68f3c:	80a0983a 	sll	r16,r16,r2
   68f40:	88eed83a 	srl	r23,r17,r3
   68f44:	90c6d83a 	srl	r3,r18,r3
   68f48:	8028d43a 	srli	r20,r16,16
   68f4c:	88a2983a 	sll	r17,r17,r2
   68f50:	b809883a 	mov	r4,r23
   68f54:	a00b883a 	mov	r5,r20
   68f58:	88ecb03a 	or	r22,r17,r3
   68f5c:	90a6983a 	sll	r19,r18,r2
   68f60:	006a56c0 	call	6a56c <__umodsi3>
   68f64:	b809883a 	mov	r4,r23
   68f68:	a00b883a 	mov	r5,r20
   68f6c:	1023883a 	mov	r17,r2
   68f70:	857fffcc 	andi	r21,r16,65535
   68f74:	006a5640 	call	6a564 <__udivsi3>
   68f78:	1009883a 	mov	r4,r2
   68f7c:	a80b883a 	mov	r5,r21
   68f80:	102f883a 	mov	r23,r2
   68f84:	00614b40 	call	614b4 <__mulsi3>
   68f88:	1009883a 	mov	r4,r2
   68f8c:	880a943a 	slli	r5,r17,16
   68f90:	b004d43a 	srli	r2,r22,16
   68f94:	288ab03a 	or	r5,r5,r2
   68f98:	2900062e 	bgeu	r5,r4,68fb4 <__udivdi3+0x528>
   68f9c:	2c0b883a 	add	r5,r5,r16
   68fa0:	b8bfffc4 	addi	r2,r23,-1
   68fa4:	2c004536 	bltu	r5,r16,690bc <__udivdi3+0x630>
   68fa8:	2900442e 	bgeu	r5,r4,690bc <__udivdi3+0x630>
   68fac:	bdffff84 	addi	r23,r23,-2
   68fb0:	2c0b883a 	add	r5,r5,r16
   68fb4:	2925c83a 	sub	r18,r5,r4
   68fb8:	9009883a 	mov	r4,r18
   68fbc:	a00b883a 	mov	r5,r20
   68fc0:	006a56c0 	call	6a56c <__umodsi3>
   68fc4:	1023883a 	mov	r17,r2
   68fc8:	9009883a 	mov	r4,r18
   68fcc:	a00b883a 	mov	r5,r20
   68fd0:	8822943a 	slli	r17,r17,16
   68fd4:	006a5640 	call	6a564 <__udivsi3>
   68fd8:	1009883a 	mov	r4,r2
   68fdc:	a80b883a 	mov	r5,r21
   68fe0:	b5bfffcc 	andi	r22,r22,65535
   68fe4:	1025883a 	mov	r18,r2
   68fe8:	8da2b03a 	or	r17,r17,r22
   68fec:	00614b40 	call	614b4 <__mulsi3>
   68ff0:	8880062e 	bgeu	r17,r2,6900c <__udivdi3+0x580>
   68ff4:	8c23883a 	add	r17,r17,r16
   68ff8:	90ffffc4 	addi	r3,r18,-1
   68ffc:	8c002d36 	bltu	r17,r16,690b4 <__udivdi3+0x628>
   69000:	88802c2e 	bgeu	r17,r2,690b4 <__udivdi3+0x628>
   69004:	94bfff84 	addi	r18,r18,-2
   69008:	8c23883a 	add	r17,r17,r16
   6900c:	b806943a 	slli	r3,r23,16
   69010:	88a3c83a 	sub	r17,r17,r2
   69014:	90c6b03a 	or	r3,r18,r3
   69018:	003f2c06 	br	68ccc <__udivdi3+0x240>
   6901c:	1823883a 	mov	r17,r3
   69020:	003eec06 	br	68bd4 <__udivdi3+0x148>
   69024:	2023883a 	mov	r17,r4
   69028:	003f5606 	br	68d84 <__udivdi3+0x2f8>
   6902c:	2008943a 	slli	r4,r4,16
   69030:	9420983a 	sll	r16,r18,r16
   69034:	e73fffcc 	andi	fp,fp,65535
   69038:	2709883a 	add	r4,r4,fp
   6903c:	813fbc2e 	bgeu	r16,r4,68f30 <__udivdi3+0x4a4>
   69040:	a0bfffc4 	addi	r2,r20,-1
   69044:	0007883a 	mov	r3,zero
   69048:	003efb06 	br	68c38 <__udivdi3+0x1ac>
   6904c:	00c00604 	movi	r3,24
   69050:	180b883a 	mov	r5,r3
   69054:	003eeb06 	br	68c04 <__udivdi3+0x178>
   69058:	00c00204 	movi	r3,8
   6905c:	180b883a 	mov	r5,r3
   69060:	003ee806 	br	68c04 <__udivdi3+0x178>
   69064:	00800604 	movi	r2,24
   69068:	1007883a 	mov	r3,r2
   6906c:	003f0a06 	br	68c98 <__udivdi3+0x20c>
   69070:	00800604 	movi	r2,24
   69074:	1007883a 	mov	r3,r2
   69078:	003e9c06 	br	68aec <__udivdi3+0x60>
   6907c:	00800204 	movi	r2,8
   69080:	1007883a 	mov	r3,r2
   69084:	003e9906 	br	68aec <__udivdi3+0x60>
   69088:	00800204 	movi	r2,8
   6908c:	1007883a 	mov	r3,r2
   69090:	003f0106 	br	68c98 <__udivdi3+0x20c>
   69094:	18bf842e 	bgeu	r3,r2,68ea8 <__udivdi3+0x41c>
   69098:	a53fff84 	addi	r20,r20,-2
   6909c:	1cc7883a 	add	r3,r3,r19
   690a0:	003f8206 	br	68eac <__udivdi3+0x420>
   690a4:	393f6b2e 	bgeu	r7,r4,68e54 <__udivdi3+0x3c8>
   690a8:	bdffff84 	addi	r23,r23,-2
   690ac:	3ccf883a 	add	r7,r7,r19
   690b0:	003f6906 	br	68e58 <__udivdi3+0x3cc>
   690b4:	1825883a 	mov	r18,r3
   690b8:	003fd406 	br	6900c <__udivdi3+0x580>
   690bc:	102f883a 	mov	r23,r2
   690c0:	003fbc06 	br	68fb4 <__udivdi3+0x528>
   690c4:	94bfff84 	addi	r18,r18,-2
   690c8:	340d883a 	add	r6,r6,r16
   690cc:	003f1606 	br	68d28 <__udivdi3+0x29c>
   690d0:	94bfff84 	addi	r18,r18,-2
   690d4:	1c07883a 	add	r3,r3,r16
   690d8:	003ea906 	br	68b80 <__udivdi3+0xf4>

000690dc <__umoddi3>:
   690dc:	defff304 	addi	sp,sp,-52
   690e0:	dd000715 	stw	r20,28(sp)
   690e4:	dcc00615 	stw	r19,24(sp)
   690e8:	dc800515 	stw	r18,20(sp)
   690ec:	dc400415 	stw	r17,16(sp)
   690f0:	dc000315 	stw	r16,12(sp)
   690f4:	dfc00c15 	stw	ra,48(sp)
   690f8:	df000b15 	stw	fp,44(sp)
   690fc:	ddc00a15 	stw	r23,40(sp)
   69100:	dd800915 	stw	r22,36(sp)
   69104:	dd400815 	stw	r21,32(sp)
   69108:	2025883a 	mov	r18,r4
   6910c:	2823883a 	mov	r17,r5
   69110:	3021883a 	mov	r16,r6
   69114:	2027883a 	mov	r19,r4
   69118:	2829883a 	mov	r20,r5
   6911c:	38003a1e 	bne	r7,zero,69208 <__umoddi3+0x12c>
   69120:	2980522e 	bgeu	r5,r6,6926c <__umoddi3+0x190>
   69124:	00bfffd4 	movui	r2,65535
   69128:	1180a436 	bltu	r2,r6,693bc <__umoddi3+0x2e0>
   6912c:	00803fc4 	movi	r2,255
   69130:	11816036 	bltu	r2,r6,696b4 <__umoddi3+0x5d8>
   69134:	0005883a 	mov	r2,zero
   69138:	0009883a 	mov	r4,zero
   6913c:	3084d83a 	srl	r2,r6,r2
   69140:	00c001f4 	movhi	r3,7
   69144:	18f79004 	addi	r3,r3,-8640
   69148:	05400804 	movi	r21,32
   6914c:	1885883a 	add	r2,r3,r2
   69150:	10800003 	ldbu	r2,0(r2)
   69154:	1109883a 	add	r4,r2,r4
   69158:	a92bc83a 	sub	r21,r21,r4
   6915c:	a8010e26 	beq	r21,zero,69598 <__umoddi3+0x4bc>
   69160:	8d62983a 	sll	r17,r17,r21
   69164:	9108d83a 	srl	r4,r18,r4
   69168:	3560983a 	sll	r16,r6,r21
   6916c:	9566983a 	sll	r19,r18,r21
   69170:	8928b03a 	or	r20,r17,r4
   69174:	8022d43a 	srli	r17,r16,16
   69178:	a009883a 	mov	r4,r20
   6917c:	84bfffcc 	andi	r18,r16,65535
   69180:	880b883a 	mov	r5,r17
   69184:	006a56c0 	call	6a56c <__umodsi3>
   69188:	a009883a 	mov	r4,r20
   6918c:	880b883a 	mov	r5,r17
   69190:	102d883a 	mov	r22,r2
   69194:	006a5640 	call	6a564 <__udivsi3>
   69198:	1009883a 	mov	r4,r2
   6919c:	900b883a 	mov	r5,r18
   691a0:	00614b40 	call	614b4 <__mulsi3>
   691a4:	1009883a 	mov	r4,r2
   691a8:	b006943a 	slli	r3,r22,16
   691ac:	9804d43a 	srli	r2,r19,16
   691b0:	1886b03a 	or	r3,r3,r2
   691b4:	1900042e 	bgeu	r3,r4,691c8 <__umoddi3+0xec>
   691b8:	1c07883a 	add	r3,r3,r16
   691bc:	1c000236 	bltu	r3,r16,691c8 <__umoddi3+0xec>
   691c0:	1900012e 	bgeu	r3,r4,691c8 <__umoddi3+0xec>
   691c4:	1c07883a 	add	r3,r3,r16
   691c8:	1929c83a 	sub	r20,r3,r4
   691cc:	a009883a 	mov	r4,r20
   691d0:	880b883a 	mov	r5,r17
   691d4:	006a56c0 	call	6a56c <__umodsi3>
   691d8:	102d883a 	mov	r22,r2
   691dc:	a009883a 	mov	r4,r20
   691e0:	880b883a 	mov	r5,r17
   691e4:	b02c943a 	slli	r22,r22,16
   691e8:	006a5640 	call	6a564 <__udivsi3>
   691ec:	1009883a 	mov	r4,r2
   691f0:	900b883a 	mov	r5,r18
   691f4:	9cffffcc 	andi	r19,r19,65535
   691f8:	00614b40 	call	614b4 <__mulsi3>
   691fc:	b4e6b03a 	or	r19,r22,r19
   69200:	9880572e 	bgeu	r19,r2,69360 <__umoddi3+0x284>
   69204:	00005206 	br	69350 <__umoddi3+0x274>
   69208:	29c05936 	bltu	r5,r7,69370 <__umoddi3+0x294>
   6920c:	00bfffd4 	movui	r2,65535
   69210:	11c0652e 	bgeu	r2,r7,693a8 <__umoddi3+0x2cc>
   69214:	00804034 	movhi	r2,256
   69218:	10bfffc4 	addi	r2,r2,-1
   6921c:	11c11936 	bltu	r2,r7,69684 <__umoddi3+0x5a8>
   69220:	00c00404 	movi	r3,16
   69224:	1827883a 	mov	r19,r3
   69228:	38c6d83a 	srl	r3,r7,r3
   6922c:	010001f4 	movhi	r4,7
   69230:	21379004 	addi	r4,r4,-8640
   69234:	04000804 	movi	r16,32
   69238:	20c7883a 	add	r3,r4,r3
   6923c:	18800003 	ldbu	r2,0(r3)
   69240:	14e7883a 	add	r19,r2,r19
   69244:	84e1c83a 	sub	r16,r16,r19
   69248:	8000671e 	bne	r16,zero,693e8 <__umoddi3+0x30c>
   6924c:	3c400136 	bltu	r7,r17,69254 <__umoddi3+0x178>
   69250:	91812536 	bltu	r18,r6,696e8 <__umoddi3+0x60c>
   69254:	9185c83a 	sub	r2,r18,r6
   69258:	89e3c83a 	sub	r17,r17,r7
   6925c:	90a5803a 	cmpltu	r18,r18,r2
   69260:	8ca9c83a 	sub	r20,r17,r18
   69264:	a007883a 	mov	r3,r20
   69268:	00004306 	br	69378 <__umoddi3+0x29c>
   6926c:	3000041e 	bne	r6,zero,69280 <__umoddi3+0x1a4>
   69270:	01000044 	movi	r4,1
   69274:	000b883a 	mov	r5,zero
   69278:	006a5640 	call	6a564 <__udivsi3>
   6927c:	1021883a 	mov	r16,r2
   69280:	00bfffd4 	movui	r2,65535
   69284:	1400532e 	bgeu	r2,r16,693d4 <__umoddi3+0x2f8>
   69288:	00804034 	movhi	r2,256
   6928c:	10bfffc4 	addi	r2,r2,-1
   69290:	14010536 	bltu	r2,r16,696a8 <__umoddi3+0x5cc>
   69294:	00800404 	movi	r2,16
   69298:	1007883a 	mov	r3,r2
   6929c:	8084d83a 	srl	r2,r16,r2
   692a0:	010001f4 	movhi	r4,7
   692a4:	21379004 	addi	r4,r4,-8640
   692a8:	05400804 	movi	r21,32
   692ac:	2085883a 	add	r2,r4,r2
   692b0:	10800003 	ldbu	r2,0(r2)
   692b4:	10c7883a 	add	r3,r2,r3
   692b8:	a8ebc83a 	sub	r21,r21,r3
   692bc:	a800b81e 	bne	r21,zero,695a0 <__umoddi3+0x4c4>
   692c0:	8028d43a 	srli	r20,r16,16
   692c4:	8c23c83a 	sub	r17,r17,r16
   692c8:	85bfffcc 	andi	r22,r16,65535
   692cc:	8809883a 	mov	r4,r17
   692d0:	a00b883a 	mov	r5,r20
   692d4:	006a56c0 	call	6a56c <__umodsi3>
   692d8:	8809883a 	mov	r4,r17
   692dc:	a00b883a 	mov	r5,r20
   692e0:	1025883a 	mov	r18,r2
   692e4:	006a5640 	call	6a564 <__udivsi3>
   692e8:	1009883a 	mov	r4,r2
   692ec:	b00b883a 	mov	r5,r22
   692f0:	00614b40 	call	614b4 <__mulsi3>
   692f4:	1009883a 	mov	r4,r2
   692f8:	9006943a 	slli	r3,r18,16
   692fc:	9804d43a 	srli	r2,r19,16
   69300:	1886b03a 	or	r3,r3,r2
   69304:	1900032e 	bgeu	r3,r4,69314 <__umoddi3+0x238>
   69308:	1c07883a 	add	r3,r3,r16
   6930c:	1c000136 	bltu	r3,r16,69314 <__umoddi3+0x238>
   69310:	1900f336 	bltu	r3,r4,696e0 <__umoddi3+0x604>
   69314:	1923c83a 	sub	r17,r3,r4
   69318:	8809883a 	mov	r4,r17
   6931c:	a00b883a 	mov	r5,r20
   69320:	006a56c0 	call	6a56c <__umodsi3>
   69324:	102f883a 	mov	r23,r2
   69328:	8809883a 	mov	r4,r17
   6932c:	a00b883a 	mov	r5,r20
   69330:	b82e943a 	slli	r23,r23,16
   69334:	006a5640 	call	6a564 <__udivsi3>
   69338:	1009883a 	mov	r4,r2
   6933c:	b00b883a 	mov	r5,r22
   69340:	9cffffcc 	andi	r19,r19,65535
   69344:	00614b40 	call	614b4 <__mulsi3>
   69348:	bce6b03a 	or	r19,r23,r19
   6934c:	9880042e 	bgeu	r19,r2,69360 <__umoddi3+0x284>
   69350:	9c27883a 	add	r19,r19,r16
   69354:	9c000236 	bltu	r19,r16,69360 <__umoddi3+0x284>
   69358:	9880012e 	bgeu	r19,r2,69360 <__umoddi3+0x284>
   6935c:	9c27883a 	add	r19,r19,r16
   69360:	9885c83a 	sub	r2,r19,r2
   69364:	1544d83a 	srl	r2,r2,r21
   69368:	0007883a 	mov	r3,zero
   6936c:	00000206 	br	69378 <__umoddi3+0x29c>
   69370:	2005883a 	mov	r2,r4
   69374:	2807883a 	mov	r3,r5
   69378:	dfc00c17 	ldw	ra,48(sp)
   6937c:	df000b17 	ldw	fp,44(sp)
   69380:	ddc00a17 	ldw	r23,40(sp)
   69384:	dd800917 	ldw	r22,36(sp)
   69388:	dd400817 	ldw	r21,32(sp)
   6938c:	dd000717 	ldw	r20,28(sp)
   69390:	dcc00617 	ldw	r19,24(sp)
   69394:	dc800517 	ldw	r18,20(sp)
   69398:	dc400417 	ldw	r17,16(sp)
   6939c:	dc000317 	ldw	r16,12(sp)
   693a0:	dec00d04 	addi	sp,sp,52
   693a4:	f800283a 	ret
   693a8:	00803fc4 	movi	r2,255
   693ac:	11c0b236 	bltu	r2,r7,69678 <__umoddi3+0x59c>
   693b0:	0007883a 	mov	r3,zero
   693b4:	0027883a 	mov	r19,zero
   693b8:	003f9b06 	br	69228 <__umoddi3+0x14c>
   693bc:	00804034 	movhi	r2,256
   693c0:	10bfffc4 	addi	r2,r2,-1
   693c4:	1180b236 	bltu	r2,r6,69690 <__umoddi3+0x5b4>
   693c8:	00800404 	movi	r2,16
   693cc:	1009883a 	mov	r4,r2
   693d0:	003f5a06 	br	6913c <__umoddi3+0x60>
   693d4:	00803fc4 	movi	r2,255
   693d8:	1400b036 	bltu	r2,r16,6969c <__umoddi3+0x5c0>
   693dc:	0005883a 	mov	r2,zero
   693e0:	0007883a 	mov	r3,zero
   693e4:	003fad06 	br	6929c <__umoddi3+0x1c0>
   693e8:	34c4d83a 	srl	r2,r6,r19
   693ec:	3c0e983a 	sll	r7,r7,r16
   693f0:	8cf8d83a 	srl	fp,r17,r19
   693f4:	8c22983a 	sll	r17,r17,r16
   693f8:	38a8b03a 	or	r20,r7,r2
   693fc:	a02ad43a 	srli	r21,r20,16
   69400:	94c4d83a 	srl	r2,r18,r19
   69404:	e009883a 	mov	r4,fp
   69408:	a80b883a 	mov	r5,r21
   6940c:	342c983a 	sll	r22,r6,r16
   69410:	88a2b03a 	or	r17,r17,r2
   69414:	006a56c0 	call	6a56c <__umodsi3>
   69418:	e009883a 	mov	r4,fp
   6941c:	a80b883a 	mov	r5,r21
   69420:	a5ffffcc 	andi	r23,r20,65535
   69424:	d8800215 	stw	r2,8(sp)
   69428:	006a5640 	call	6a564 <__udivsi3>
   6942c:	1009883a 	mov	r4,r2
   69430:	b80b883a 	mov	r5,r23
   69434:	1039883a 	mov	fp,r2
   69438:	00614b40 	call	614b4 <__mulsi3>
   6943c:	d8c00217 	ldw	r3,8(sp)
   69440:	1009883a 	mov	r4,r2
   69444:	8804d43a 	srli	r2,r17,16
   69448:	1806943a 	slli	r3,r3,16
   6944c:	9424983a 	sll	r18,r18,r16
   69450:	1886b03a 	or	r3,r3,r2
   69454:	1900042e 	bgeu	r3,r4,69468 <__umoddi3+0x38c>
   69458:	1d07883a 	add	r3,r3,r20
   6945c:	e0bfffc4 	addi	r2,fp,-1
   69460:	1d009b2e 	bgeu	r3,r20,696d0 <__umoddi3+0x5f4>
   69464:	1039883a 	mov	fp,r2
   69468:	1907c83a 	sub	r3,r3,r4
   6946c:	1809883a 	mov	r4,r3
   69470:	a80b883a 	mov	r5,r21
   69474:	d8c00215 	stw	r3,8(sp)
   69478:	006a56c0 	call	6a56c <__umodsi3>
   6947c:	d8c00217 	ldw	r3,8(sp)
   69480:	a80b883a 	mov	r5,r21
   69484:	d8800015 	stw	r2,0(sp)
   69488:	1809883a 	mov	r4,r3
   6948c:	006a5640 	call	6a564 <__udivsi3>
   69490:	1009883a 	mov	r4,r2
   69494:	b80b883a 	mov	r5,r23
   69498:	102b883a 	mov	r21,r2
   6949c:	00614b40 	call	614b4 <__mulsi3>
   694a0:	d9c00017 	ldw	r7,0(sp)
   694a4:	8c7fffcc 	andi	r17,r17,65535
   694a8:	380e943a 	slli	r7,r7,16
   694ac:	3c4eb03a 	or	r7,r7,r17
   694b0:	3880042e 	bgeu	r7,r2,694c4 <__umoddi3+0x3e8>
   694b4:	3d0f883a 	add	r7,r7,r20
   694b8:	a8ffffc4 	addi	r3,r21,-1
   694bc:	3d00802e 	bgeu	r7,r20,696c0 <__umoddi3+0x5e4>
   694c0:	182b883a 	mov	r21,r3
   694c4:	e038943a 	slli	fp,fp,16
   694c8:	b010d43a 	srli	r8,r22,16
   694cc:	b1bfffcc 	andi	r6,r22,65535
   694d0:	af2ab03a 	or	r21,r21,fp
   694d4:	a82ed43a 	srli	r23,r21,16
   694d8:	ad7fffcc 	andi	r21,r21,65535
   694dc:	300b883a 	mov	r5,r6
   694e0:	a809883a 	mov	r4,r21
   694e4:	38a3c83a 	sub	r17,r7,r2
   694e8:	d9800115 	stw	r6,4(sp)
   694ec:	da000015 	stw	r8,0(sp)
   694f0:	00614b40 	call	614b4 <__mulsi3>
   694f4:	da000017 	ldw	r8,0(sp)
   694f8:	a809883a 	mov	r4,r21
   694fc:	1039883a 	mov	fp,r2
   69500:	400b883a 	mov	r5,r8
   69504:	da000215 	stw	r8,8(sp)
   69508:	00614b40 	call	614b4 <__mulsi3>
   6950c:	d9800117 	ldw	r6,4(sp)
   69510:	b809883a 	mov	r4,r23
   69514:	d8800015 	stw	r2,0(sp)
   69518:	300b883a 	mov	r5,r6
   6951c:	00614b40 	call	614b4 <__mulsi3>
   69520:	d8c00217 	ldw	r3,8(sp)
   69524:	b809883a 	mov	r4,r23
   69528:	102b883a 	mov	r21,r2
   6952c:	180b883a 	mov	r5,r3
   69530:	00614b40 	call	614b4 <__mulsi3>
   69534:	d9c00017 	ldw	r7,0(sp)
   69538:	1007883a 	mov	r3,r2
   6953c:	e004d43a 	srli	r2,fp,16
   69540:	a9c9883a 	add	r4,r21,r7
   69544:	2089883a 	add	r4,r4,r2
   69548:	2540022e 	bgeu	r4,r21,69554 <__umoddi3+0x478>
   6954c:	00800074 	movhi	r2,1
   69550:	1887883a 	add	r3,r3,r2
   69554:	2004d43a 	srli	r2,r4,16
   69558:	2008943a 	slli	r4,r4,16
   6955c:	e73fffcc 	andi	fp,fp,65535
   69560:	1887883a 	add	r3,r3,r2
   69564:	2709883a 	add	r4,r4,fp
   69568:	88c03d36 	bltu	r17,r3,69660 <__umoddi3+0x584>
   6956c:	88c06126 	beq	r17,r3,696f4 <__umoddi3+0x618>
   69570:	88c7c83a 	sub	r3,r17,r3
   69574:	202d883a 	mov	r22,r4
   69578:	95adc83a 	sub	r22,r18,r22
   6957c:	95a5803a 	cmpltu	r18,r18,r22
   69580:	1c87c83a 	sub	r3,r3,r18
   69584:	1cc4983a 	sll	r2,r3,r19
   69588:	b42cd83a 	srl	r22,r22,r16
   6958c:	1c06d83a 	srl	r3,r3,r16
   69590:	1584b03a 	or	r2,r2,r22
   69594:	003f7806 	br	69378 <__umoddi3+0x29c>
   69598:	002b883a 	mov	r21,zero
   6959c:	003ef506 	br	69174 <__umoddi3+0x98>
   695a0:	8560983a 	sll	r16,r16,r21
   695a4:	88e6d83a 	srl	r19,r17,r3
   695a8:	90c6d83a 	srl	r3,r18,r3
   695ac:	8028d43a 	srli	r20,r16,16
   695b0:	8d62983a 	sll	r17,r17,r21
   695b4:	9809883a 	mov	r4,r19
   695b8:	a00b883a 	mov	r5,r20
   695bc:	88eeb03a 	or	r23,r17,r3
   695c0:	006a56c0 	call	6a56c <__umodsi3>
   695c4:	9809883a 	mov	r4,r19
   695c8:	a00b883a 	mov	r5,r20
   695cc:	1023883a 	mov	r17,r2
   695d0:	85bfffcc 	andi	r22,r16,65535
   695d4:	006a5640 	call	6a564 <__udivsi3>
   695d8:	1009883a 	mov	r4,r2
   695dc:	b00b883a 	mov	r5,r22
   695e0:	00614b40 	call	614b4 <__mulsi3>
   695e4:	1007883a 	mov	r3,r2
   695e8:	8808943a 	slli	r4,r17,16
   695ec:	b804d43a 	srli	r2,r23,16
   695f0:	9566983a 	sll	r19,r18,r21
   695f4:	2088b03a 	or	r4,r4,r2
   695f8:	20c0042e 	bgeu	r4,r3,6960c <__umoddi3+0x530>
   695fc:	2409883a 	add	r4,r4,r16
   69600:	24000236 	bltu	r4,r16,6960c <__umoddi3+0x530>
   69604:	20c0012e 	bgeu	r4,r3,6960c <__umoddi3+0x530>
   69608:	2409883a 	add	r4,r4,r16
   6960c:	20e5c83a 	sub	r18,r4,r3
   69610:	9009883a 	mov	r4,r18
   69614:	a00b883a 	mov	r5,r20
   69618:	006a56c0 	call	6a56c <__umodsi3>
   6961c:	1023883a 	mov	r17,r2
   69620:	9009883a 	mov	r4,r18
   69624:	a00b883a 	mov	r5,r20
   69628:	8822943a 	slli	r17,r17,16
   6962c:	006a5640 	call	6a564 <__udivsi3>
   69630:	1009883a 	mov	r4,r2
   69634:	b00b883a 	mov	r5,r22
   69638:	bdffffcc 	andi	r23,r23,65535
   6963c:	00614b40 	call	614b4 <__mulsi3>
   69640:	8de2b03a 	or	r17,r17,r23
   69644:	8880042e 	bgeu	r17,r2,69658 <__umoddi3+0x57c>
   69648:	8c23883a 	add	r17,r17,r16
   6964c:	8c000236 	bltu	r17,r16,69658 <__umoddi3+0x57c>
   69650:	8880012e 	bgeu	r17,r2,69658 <__umoddi3+0x57c>
   69654:	8c23883a 	add	r17,r17,r16
   69658:	88a3c83a 	sub	r17,r17,r2
   6965c:	003f1b06 	br	692cc <__umoddi3+0x1f0>
   69660:	25adc83a 	sub	r22,r4,r22
   69664:	1d07c83a 	sub	r3,r3,r20
   69668:	2589803a 	cmpltu	r4,r4,r22
   6966c:	1907c83a 	sub	r3,r3,r4
   69670:	88c7c83a 	sub	r3,r17,r3
   69674:	003fc006 	br	69578 <__umoddi3+0x49c>
   69678:	00c00204 	movi	r3,8
   6967c:	1827883a 	mov	r19,r3
   69680:	003ee906 	br	69228 <__umoddi3+0x14c>
   69684:	00c00604 	movi	r3,24
   69688:	1827883a 	mov	r19,r3
   6968c:	003ee606 	br	69228 <__umoddi3+0x14c>
   69690:	00800604 	movi	r2,24
   69694:	1009883a 	mov	r4,r2
   69698:	003ea806 	br	6913c <__umoddi3+0x60>
   6969c:	00800204 	movi	r2,8
   696a0:	1007883a 	mov	r3,r2
   696a4:	003efd06 	br	6929c <__umoddi3+0x1c0>
   696a8:	00800604 	movi	r2,24
   696ac:	1007883a 	mov	r3,r2
   696b0:	003efa06 	br	6929c <__umoddi3+0x1c0>
   696b4:	00800204 	movi	r2,8
   696b8:	1009883a 	mov	r4,r2
   696bc:	003e9f06 	br	6913c <__umoddi3+0x60>
   696c0:	38bf7f2e 	bgeu	r7,r2,694c0 <__umoddi3+0x3e4>
   696c4:	ad7fff84 	addi	r21,r21,-2
   696c8:	3d0f883a 	add	r7,r7,r20
   696cc:	003f7d06 	br	694c4 <__umoddi3+0x3e8>
   696d0:	193f642e 	bgeu	r3,r4,69464 <__umoddi3+0x388>
   696d4:	e73fff84 	addi	fp,fp,-2
   696d8:	1d07883a 	add	r3,r3,r20
   696dc:	003f6206 	br	69468 <__umoddi3+0x38c>
   696e0:	1c07883a 	add	r3,r3,r16
   696e4:	003f0b06 	br	69314 <__umoddi3+0x238>
   696e8:	9005883a 	mov	r2,r18
   696ec:	a007883a 	mov	r3,r20
   696f0:	003f2106 	br	69378 <__umoddi3+0x29c>
   696f4:	913fda36 	bltu	r18,r4,69660 <__umoddi3+0x584>
   696f8:	202d883a 	mov	r22,r4
   696fc:	0007883a 	mov	r3,zero
   69700:	003f9d06 	br	69578 <__umoddi3+0x49c>

00069704 <_fpadd_parts>:
   69704:	2005883a 	mov	r2,r4
   69708:	21000017 	ldw	r4,0(r4)
   6970c:	01c00044 	movi	r7,1
   69710:	3900622e 	bgeu	r7,r4,6989c <_fpadd_parts+0x198>
   69714:	28c00017 	ldw	r3,0(r5)
   69718:	38c05f2e 	bgeu	r7,r3,69898 <_fpadd_parts+0x194>
   6971c:	01c00104 	movi	r7,4
   69720:	21c0c626 	beq	r4,r7,69a3c <_fpadd_parts+0x338>
   69724:	19c05c26 	beq	r3,r7,69898 <_fpadd_parts+0x194>
   69728:	01c00084 	movi	r7,2
   6972c:	19c06b26 	beq	r3,r7,698dc <_fpadd_parts+0x1d8>
   69730:	21c05926 	beq	r4,r7,69898 <_fpadd_parts+0x194>
   69734:	11c00217 	ldw	r7,8(r2)
   69738:	2ac00217 	ldw	r11,8(r5)
   6973c:	13000317 	ldw	r12,12(r2)
   69740:	13400417 	ldw	r13,16(r2)
   69744:	3ac9c83a 	sub	r4,r7,r11
   69748:	2a000317 	ldw	r8,12(r5)
   6974c:	2a400417 	ldw	r9,16(r5)
   69750:	2015883a 	mov	r10,r4
   69754:	20007516 	blt	r4,zero,6992c <_fpadd_parts+0x228>
   69758:	00c00fc4 	movi	r3,63
   6975c:	1a805016 	blt	r3,r10,698a0 <_fpadd_parts+0x19c>
   69760:	0100870e 	bge	zero,r4,69980 <_fpadd_parts+0x27c>
   69764:	50fff804 	addi	r3,r10,-32
   69768:	18009916 	blt	r3,zero,699d0 <_fpadd_parts+0x2cc>
   6976c:	48d6d83a 	srl	r11,r9,r3
   69770:	001d883a 	mov	r14,zero
   69774:	18009e16 	blt	r3,zero,699f0 <_fpadd_parts+0x2ec>
   69778:	01000044 	movi	r4,1
   6977c:	20c6983a 	sll	r3,r4,r3
   69780:	0015883a 	mov	r10,zero
   69784:	513fffc4 	addi	r4,r10,-1
   69788:	2295403a 	cmpgeu	r10,r4,r10
   6978c:	1a87c83a 	sub	r3,r3,r10
   69790:	1a52703a 	and	r9,r3,r9
   69794:	2210703a 	and	r8,r4,r8
   69798:	4250b03a 	or	r8,r8,r9
   6979c:	4010c03a 	cmpne	r8,r8,zero
   697a0:	42d0b03a 	or	r8,r8,r11
   697a4:	7013883a 	mov	r9,r14
   697a8:	11000117 	ldw	r4,4(r2)
   697ac:	28800117 	ldw	r2,4(r5)
   697b0:	20804126 	beq	r4,r2,698b8 <_fpadd_parts+0x1b4>
   697b4:	20006326 	beq	r4,zero,69944 <_fpadd_parts+0x240>
   697b8:	4305c83a 	sub	r2,r8,r12
   697bc:	4091803a 	cmpltu	r8,r8,r2
   697c0:	4b47c83a 	sub	r3,r9,r13
   697c4:	1a07c83a 	sub	r3,r3,r8
   697c8:	18006316 	blt	r3,zero,69958 <_fpadd_parts+0x254>
   697cc:	30000115 	stw	zero,4(r6)
   697d0:	31c00215 	stw	r7,8(r6)
   697d4:	30800315 	stw	r2,12(r6)
   697d8:	30c00415 	stw	r3,16(r6)
   697dc:	11ffffc4 	addi	r7,r2,-1
   697e0:	388b403a 	cmpgeu	r5,r7,r2
   697e4:	194bc83a 	sub	r5,r3,r5
   697e8:	01040034 	movhi	r4,4096
   697ec:	213fffc4 	addi	r4,r4,-1
   697f0:	21401736 	bltu	r4,r5,69850 <_fpadd_parts+0x14c>
   697f4:	29008226 	beq	r5,r4,69a00 <_fpadd_parts+0x2fc>
   697f8:	31400217 	ldw	r5,8(r6)
   697fc:	02840034 	movhi	r10,4096
   69800:	52bfffc4 	addi	r10,r10,-1
   69804:	033fff84 	movi	r12,-2
   69808:	297fffc4 	addi	r5,r5,-1
   6980c:	00000106 	br	69814 <_fpadd_parts+0x110>
   69810:	3a804a26 	beq	r7,r10,6993c <_fpadd_parts+0x238>
   69814:	1089883a 	add	r4,r2,r2
   69818:	2091803a 	cmpltu	r8,r4,r2
   6981c:	18c7883a 	add	r3,r3,r3
   69820:	227fffc4 	addi	r9,r4,-1
   69824:	40d1883a 	add	r8,r8,r3
   69828:	490f403a 	cmpgeu	r7,r9,r4
   6982c:	41cfc83a 	sub	r7,r8,r7
   69830:	2817883a 	mov	r11,r5
   69834:	2005883a 	mov	r2,r4
   69838:	4007883a 	mov	r3,r8
   6983c:	297fffc4 	addi	r5,r5,-1
   69840:	51fff32e 	bgeu	r10,r7,69810 <_fpadd_parts+0x10c>
   69844:	31000315 	stw	r4,12(r6)
   69848:	32000415 	stw	r8,16(r6)
   6984c:	32c00215 	stw	r11,8(r6)
   69850:	010000c4 	movi	r4,3
   69854:	31000015 	stw	r4,0(r6)
   69858:	01080034 	movhi	r4,8192
   6985c:	213fffc4 	addi	r4,r4,-1
   69860:	20c00b2e 	bgeu	r4,r3,69890 <_fpadd_parts+0x18c>
   69864:	180e97fa 	slli	r7,r3,31
   69868:	1008d07a 	srli	r4,r2,1
   6986c:	31400217 	ldw	r5,8(r6)
   69870:	1806d07a 	srli	r3,r3,1
   69874:	1080004c 	andi	r2,r2,1
   69878:	3908b03a 	or	r4,r7,r4
   6987c:	1108b03a 	or	r4,r2,r4
   69880:	29400044 	addi	r5,r5,1
   69884:	31000315 	stw	r4,12(r6)
   69888:	30c00415 	stw	r3,16(r6)
   6988c:	31400215 	stw	r5,8(r6)
   69890:	3005883a 	mov	r2,r6
   69894:	f800283a 	ret
   69898:	2805883a 	mov	r2,r5
   6989c:	f800283a 	ret
   698a0:	59c01e0e 	bge	r11,r7,6991c <_fpadd_parts+0x218>
   698a4:	11000117 	ldw	r4,4(r2)
   698a8:	28800117 	ldw	r2,4(r5)
   698ac:	0011883a 	mov	r8,zero
   698b0:	0013883a 	mov	r9,zero
   698b4:	20bfbf1e 	bne	r4,r2,697b4 <_fpadd_parts+0xb0>
   698b8:	4305883a 	add	r2,r8,r12
   698bc:	1207803a 	cmpltu	r3,r2,r8
   698c0:	4b53883a 	add	r9,r9,r13
   698c4:	1a47883a 	add	r3,r3,r9
   698c8:	31000115 	stw	r4,4(r6)
   698cc:	31c00215 	stw	r7,8(r6)
   698d0:	30800315 	stw	r2,12(r6)
   698d4:	30c00415 	stw	r3,16(r6)
   698d8:	003fdd06 	br	69850 <_fpadd_parts+0x14c>
   698dc:	20ffef1e 	bne	r4,r3,6989c <_fpadd_parts+0x198>
   698e0:	31000015 	stw	r4,0(r6)
   698e4:	10c00117 	ldw	r3,4(r2)
   698e8:	30c00115 	stw	r3,4(r6)
   698ec:	10c00217 	ldw	r3,8(r2)
   698f0:	11000117 	ldw	r4,4(r2)
   698f4:	29400117 	ldw	r5,4(r5)
   698f8:	30c00215 	stw	r3,8(r6)
   698fc:	10c00317 	ldw	r3,12(r2)
   69900:	2908703a 	and	r4,r5,r4
   69904:	30c00315 	stw	r3,12(r6)
   69908:	10c00417 	ldw	r3,16(r2)
   6990c:	31000115 	stw	r4,4(r6)
   69910:	3005883a 	mov	r2,r6
   69914:	30c00415 	stw	r3,16(r6)
   69918:	f800283a 	ret
   6991c:	580f883a 	mov	r7,r11
   69920:	0019883a 	mov	r12,zero
   69924:	001b883a 	mov	r13,zero
   69928:	003f9f06 	br	697a8 <_fpadd_parts+0xa4>
   6992c:	0115c83a 	sub	r10,zero,r4
   69930:	00c00fc4 	movi	r3,63
   69934:	1abfda16 	blt	r3,r10,698a0 <_fpadd_parts+0x19c>
   69938:	003f8906 	br	69760 <_fpadd_parts+0x5c>
   6993c:	627fb52e 	bgeu	r12,r9,69814 <_fpadd_parts+0x110>
   69940:	003fc006 	br	69844 <_fpadd_parts+0x140>
   69944:	6205c83a 	sub	r2,r12,r8
   69948:	6099803a 	cmpltu	r12,r12,r2
   6994c:	6a47c83a 	sub	r3,r13,r9
   69950:	1b07c83a 	sub	r3,r3,r12
   69954:	183f9d0e 	bge	r3,zero,697cc <_fpadd_parts+0xc8>
   69958:	0085c83a 	sub	r2,zero,r2
   6995c:	1008c03a 	cmpne	r4,r2,zero
   69960:	00c7c83a 	sub	r3,zero,r3
   69964:	1907c83a 	sub	r3,r3,r4
   69968:	01000044 	movi	r4,1
   6996c:	31000115 	stw	r4,4(r6)
   69970:	31c00215 	stw	r7,8(r6)
   69974:	30800315 	stw	r2,12(r6)
   69978:	30c00415 	stw	r3,16(r6)
   6997c:	003f9706 	br	697dc <_fpadd_parts+0xd8>
   69980:	203f8926 	beq	r4,zero,697a8 <_fpadd_parts+0xa4>
   69984:	50fff804 	addi	r3,r10,-32
   69988:	3a8f883a 	add	r7,r7,r10
   6998c:	18002316 	blt	r3,zero,69a1c <_fpadd_parts+0x318>
   69990:	68d6d83a 	srl	r11,r13,r3
   69994:	001d883a 	mov	r14,zero
   69998:	18001c16 	blt	r3,zero,69a0c <_fpadd_parts+0x308>
   6999c:	01000044 	movi	r4,1
   699a0:	20c6983a 	sll	r3,r4,r3
   699a4:	0015883a 	mov	r10,zero
   699a8:	513fffc4 	addi	r4,r10,-1
   699ac:	2295403a 	cmpgeu	r10,r4,r10
   699b0:	1a87c83a 	sub	r3,r3,r10
   699b4:	1b5a703a 	and	r13,r3,r13
   699b8:	2318703a 	and	r12,r4,r12
   699bc:	6358b03a 	or	r12,r12,r13
   699c0:	6018c03a 	cmpne	r12,r12,zero
   699c4:	62d8b03a 	or	r12,r12,r11
   699c8:	701b883a 	mov	r13,r14
   699cc:	003f7606 	br	697a8 <_fpadd_parts+0xa4>
   699d0:	4808907a 	slli	r4,r9,1
   699d4:	02c007c4 	movi	r11,31
   699d8:	5a97c83a 	sub	r11,r11,r10
   699dc:	22c8983a 	sll	r4,r4,r11
   699e0:	4296d83a 	srl	r11,r8,r10
   699e4:	4a9cd83a 	srl	r14,r9,r10
   699e8:	22d6b03a 	or	r11,r4,r11
   699ec:	003f6106 	br	69774 <_fpadd_parts+0x70>
   699f0:	00c00044 	movi	r3,1
   699f4:	1a94983a 	sll	r10,r3,r10
   699f8:	0007883a 	mov	r3,zero
   699fc:	003f6106 	br	69784 <_fpadd_parts+0x80>
   69a00:	013fff84 	movi	r4,-2
   69a04:	21ff7c2e 	bgeu	r4,r7,697f8 <_fpadd_parts+0xf4>
   69a08:	003f9106 	br	69850 <_fpadd_parts+0x14c>
   69a0c:	00c00044 	movi	r3,1
   69a10:	1a94983a 	sll	r10,r3,r10
   69a14:	0007883a 	mov	r3,zero
   69a18:	003fe306 	br	699a8 <_fpadd_parts+0x2a4>
   69a1c:	6816907a 	slli	r11,r13,1
   69a20:	010007c4 	movi	r4,31
   69a24:	2289c83a 	sub	r4,r4,r10
   69a28:	5908983a 	sll	r4,r11,r4
   69a2c:	6296d83a 	srl	r11,r12,r10
   69a30:	6a9cd83a 	srl	r14,r13,r10
   69a34:	22d6b03a 	or	r11,r4,r11
   69a38:	003fd706 	br	69998 <_fpadd_parts+0x294>
   69a3c:	193f971e 	bne	r3,r4,6989c <_fpadd_parts+0x198>
   69a40:	11000117 	ldw	r4,4(r2)
   69a44:	28c00117 	ldw	r3,4(r5)
   69a48:	20ff9426 	beq	r4,r3,6989c <_fpadd_parts+0x198>
   69a4c:	008001f4 	movhi	r2,7
   69a50:	10b78b04 	addi	r2,r2,-8660
   69a54:	f800283a 	ret

00069a58 <__adddf3>:
   69a58:	deffec04 	addi	sp,sp,-80
   69a5c:	d9001115 	stw	r4,68(sp)
   69a60:	d9401215 	stw	r5,72(sp)
   69a64:	d9001104 	addi	r4,sp,68
   69a68:	d9400a04 	addi	r5,sp,40
   69a6c:	dfc01315 	stw	ra,76(sp)
   69a70:	d9c01015 	stw	r7,64(sp)
   69a74:	d9800f15 	stw	r6,60(sp)
   69a78:	006a9540 	call	6a954 <__unpack_d>
   69a7c:	d9000f04 	addi	r4,sp,60
   69a80:	d9400504 	addi	r5,sp,20
   69a84:	006a9540 	call	6a954 <__unpack_d>
   69a88:	d9000a04 	addi	r4,sp,40
   69a8c:	d9400504 	addi	r5,sp,20
   69a90:	d80d883a 	mov	r6,sp
   69a94:	00697040 	call	69704 <_fpadd_parts>
   69a98:	1009883a 	mov	r4,r2
   69a9c:	006a7300 	call	6a730 <__pack_d>
   69aa0:	dfc01317 	ldw	ra,76(sp)
   69aa4:	dec01404 	addi	sp,sp,80
   69aa8:	f800283a 	ret

00069aac <__subdf3>:
   69aac:	deffec04 	addi	sp,sp,-80
   69ab0:	d9001115 	stw	r4,68(sp)
   69ab4:	d9401215 	stw	r5,72(sp)
   69ab8:	d9001104 	addi	r4,sp,68
   69abc:	d9400a04 	addi	r5,sp,40
   69ac0:	dfc01315 	stw	ra,76(sp)
   69ac4:	d9c01015 	stw	r7,64(sp)
   69ac8:	d9800f15 	stw	r6,60(sp)
   69acc:	006a9540 	call	6a954 <__unpack_d>
   69ad0:	d9000f04 	addi	r4,sp,60
   69ad4:	d9400504 	addi	r5,sp,20
   69ad8:	006a9540 	call	6a954 <__unpack_d>
   69adc:	d8800617 	ldw	r2,24(sp)
   69ae0:	d9000a04 	addi	r4,sp,40
   69ae4:	d9400504 	addi	r5,sp,20
   69ae8:	d80d883a 	mov	r6,sp
   69aec:	1080005c 	xori	r2,r2,1
   69af0:	d8800615 	stw	r2,24(sp)
   69af4:	00697040 	call	69704 <_fpadd_parts>
   69af8:	1009883a 	mov	r4,r2
   69afc:	006a7300 	call	6a730 <__pack_d>
   69b00:	dfc01317 	ldw	ra,76(sp)
   69b04:	dec01404 	addi	sp,sp,80
   69b08:	f800283a 	ret

00069b0c <__muldf3>:
   69b0c:	deffe404 	addi	sp,sp,-112
   69b10:	d9001115 	stw	r4,68(sp)
   69b14:	d9401215 	stw	r5,72(sp)
   69b18:	d9001104 	addi	r4,sp,68
   69b1c:	d9400a04 	addi	r5,sp,40
   69b20:	dfc01b15 	stw	ra,108(sp)
   69b24:	d9800f15 	stw	r6,60(sp)
   69b28:	d9c01015 	stw	r7,64(sp)
   69b2c:	ddc01a15 	stw	r23,104(sp)
   69b30:	dd801915 	stw	r22,100(sp)
   69b34:	dd401815 	stw	r21,96(sp)
   69b38:	dd001715 	stw	r20,92(sp)
   69b3c:	dcc01615 	stw	r19,88(sp)
   69b40:	dc801515 	stw	r18,84(sp)
   69b44:	dc401415 	stw	r17,80(sp)
   69b48:	dc001315 	stw	r16,76(sp)
   69b4c:	006a9540 	call	6a954 <__unpack_d>
   69b50:	d9000f04 	addi	r4,sp,60
   69b54:	d9400504 	addi	r5,sp,20
   69b58:	006a9540 	call	6a954 <__unpack_d>
   69b5c:	d8c00a17 	ldw	r3,40(sp)
   69b60:	00800044 	movi	r2,1
   69b64:	10c01136 	bltu	r2,r3,69bac <__muldf3+0xa0>
   69b68:	d8c00b17 	ldw	r3,44(sp)
   69b6c:	d8800617 	ldw	r2,24(sp)
   69b70:	d9000a04 	addi	r4,sp,40
   69b74:	1884c03a 	cmpne	r2,r3,r2
   69b78:	d8800b15 	stw	r2,44(sp)
   69b7c:	006a7300 	call	6a730 <__pack_d>
   69b80:	dfc01b17 	ldw	ra,108(sp)
   69b84:	ddc01a17 	ldw	r23,104(sp)
   69b88:	dd801917 	ldw	r22,100(sp)
   69b8c:	dd401817 	ldw	r21,96(sp)
   69b90:	dd001717 	ldw	r20,92(sp)
   69b94:	dcc01617 	ldw	r19,88(sp)
   69b98:	dc801517 	ldw	r18,84(sp)
   69b9c:	dc401417 	ldw	r17,80(sp)
   69ba0:	dc001317 	ldw	r16,76(sp)
   69ba4:	dec01c04 	addi	sp,sp,112
   69ba8:	f800283a 	ret
   69bac:	d9000517 	ldw	r4,20(sp)
   69bb0:	11000636 	bltu	r2,r4,69bcc <__muldf3+0xc0>
   69bb4:	d8800617 	ldw	r2,24(sp)
   69bb8:	d8c00b17 	ldw	r3,44(sp)
   69bbc:	d9000504 	addi	r4,sp,20
   69bc0:	1884c03a 	cmpne	r2,r3,r2
   69bc4:	d8800615 	stw	r2,24(sp)
   69bc8:	003fec06 	br	69b7c <__muldf3+0x70>
   69bcc:	00800104 	movi	r2,4
   69bd0:	1880051e 	bne	r3,r2,69be8 <__muldf3+0xdc>
   69bd4:	00800084 	movi	r2,2
   69bd8:	20bfe31e 	bne	r4,r2,69b68 <__muldf3+0x5c>
   69bdc:	010001f4 	movhi	r4,7
   69be0:	21378b04 	addi	r4,r4,-8660
   69be4:	003fe506 	br	69b7c <__muldf3+0x70>
   69be8:	2080031e 	bne	r4,r2,69bf8 <__muldf3+0xec>
   69bec:	00800084 	movi	r2,2
   69bf0:	18bffa26 	beq	r3,r2,69bdc <__muldf3+0xd0>
   69bf4:	003fef06 	br	69bb4 <__muldf3+0xa8>
   69bf8:	00800084 	movi	r2,2
   69bfc:	18bfda26 	beq	r3,r2,69b68 <__muldf3+0x5c>
   69c00:	20bfec26 	beq	r4,r2,69bb4 <__muldf3+0xa8>
   69c04:	dc000d17 	ldw	r16,52(sp)
   69c08:	dd000817 	ldw	r20,32(sp)
   69c0c:	dc800917 	ldw	r18,36(sp)
   69c10:	8009883a 	mov	r4,r16
   69c14:	000b883a 	mov	r5,zero
   69c18:	a00d883a 	mov	r6,r20
   69c1c:	000f883a 	mov	r7,zero
   69c20:	006a5740 	call	6a574 <__muldi3>
   69c24:	dc400e17 	ldw	r17,56(sp)
   69c28:	9009883a 	mov	r4,r18
   69c2c:	800d883a 	mov	r6,r16
   69c30:	000b883a 	mov	r5,zero
   69c34:	000f883a 	mov	r7,zero
   69c38:	102f883a 	mov	r23,r2
   69c3c:	1827883a 	mov	r19,r3
   69c40:	006a5740 	call	6a574 <__muldi3>
   69c44:	900d883a 	mov	r6,r18
   69c48:	8809883a 	mov	r4,r17
   69c4c:	000b883a 	mov	r5,zero
   69c50:	000f883a 	mov	r7,zero
   69c54:	102b883a 	mov	r21,r2
   69c58:	1821883a 	mov	r16,r3
   69c5c:	006a5740 	call	6a574 <__muldi3>
   69c60:	8809883a 	mov	r4,r17
   69c64:	000b883a 	mov	r5,zero
   69c68:	a00d883a 	mov	r6,r20
   69c6c:	000f883a 	mov	r7,zero
   69c70:	102d883a 	mov	r22,r2
   69c74:	1825883a 	mov	r18,r3
   69c78:	006a5740 	call	6a574 <__muldi3>
   69c7c:	154b883a 	add	r5,r2,r21
   69c80:	2889803a 	cmpltu	r4,r5,r2
   69c84:	1c07883a 	add	r3,r3,r16
   69c88:	20c9883a 	add	r4,r4,r3
   69c8c:	24004b36 	bltu	r4,r16,69dbc <__muldf3+0x2b0>
   69c90:	8100011e 	bne	r16,r4,69c98 <__muldf3+0x18c>
   69c94:	2d404936 	bltu	r5,r21,69dbc <__muldf3+0x2b0>
   69c98:	0011883a 	mov	r8,zero
   69c9c:	0007883a 	mov	r3,zero
   69ca0:	2ccb883a 	add	r5,r5,r19
   69ca4:	b80d883a 	mov	r6,r23
   69ca8:	2cc0012e 	bgeu	r5,r19,69cb0 <__muldf3+0x1a4>
   69cac:	02000044 	movi	r8,1
   69cb0:	258f883a 	add	r7,r4,r22
   69cb4:	3909803a 	cmpltu	r4,r7,r4
   69cb8:	da400c17 	ldw	r9,48(sp)
   69cbc:	2489883a 	add	r4,r4,r18
   69cc0:	d8800717 	ldw	r2,28(sp)
   69cc4:	20c9883a 	add	r4,r4,r3
   69cc8:	da800b17 	ldw	r10,44(sp)
   69ccc:	d8c00617 	ldw	r3,24(sp)
   69cd0:	3a11883a 	add	r8,r7,r8
   69cd4:	4885883a 	add	r2,r9,r2
   69cd8:	50c6c03a 	cmpne	r3,r10,r3
   69cdc:	41cf803a 	cmpltu	r7,r8,r7
   69ce0:	12400104 	addi	r9,r2,4
   69ce4:	d8c00115 	stw	r3,4(sp)
   69ce8:	3909883a 	add	r4,r7,r4
   69cec:	da400215 	stw	r9,8(sp)
   69cf0:	03480034 	movhi	r13,8192
   69cf4:	6b7fffc4 	addi	r13,r13,-1
   69cf8:	4007883a 	mov	r3,r8
   69cfc:	6900102e 	bgeu	r13,r4,69d40 <__muldf3+0x234>
   69d00:	10800144 	addi	r2,r2,5
   69d04:	180ed07a 	srli	r7,r3,1
   69d08:	18c0004c 	andi	r3,r3,1
   69d0c:	201097fa 	slli	r8,r4,31
   69d10:	281697fa 	slli	r11,r5,31
   69d14:	2008d07a 	srli	r4,r4,1
   69d18:	3014d07a 	srli	r10,r6,1
   69d1c:	2812d07a 	srli	r9,r5,1
   69d20:	1019883a 	mov	r12,r2
   69d24:	18000226 	beq	r3,zero,69d30 <__muldf3+0x224>
   69d28:	5a8cb03a 	or	r6,r11,r10
   69d2c:	49600034 	orhi	r5,r9,32768
   69d30:	41c6b03a 	or	r3,r8,r7
   69d34:	10800044 	addi	r2,r2,1
   69d38:	693ff236 	bltu	r13,r4,69d04 <__muldf3+0x1f8>
   69d3c:	db000215 	stw	r12,8(sp)
   69d40:	03440034 	movhi	r13,4096
   69d44:	6b7fffc4 	addi	r13,r13,-1
   69d48:	69001336 	bltu	r13,r4,69d98 <__muldf3+0x28c>
   69d4c:	d8800217 	ldw	r2,8(sp)
   69d50:	10bfffc4 	addi	r2,r2,-1
   69d54:	18d3883a 	add	r9,r3,r3
   69d58:	48c7803a 	cmpltu	r3,r9,r3
   69d5c:	2109883a 	add	r4,r4,r4
   69d60:	190f883a 	add	r7,r3,r4
   69d64:	3191883a 	add	r8,r6,r6
   69d68:	4197803a 	cmpltu	r11,r8,r6
   69d6c:	2955883a 	add	r10,r5,r5
   69d70:	1019883a 	mov	r12,r2
   69d74:	4807883a 	mov	r3,r9
   69d78:	3809883a 	mov	r4,r7
   69d7c:	2800010e 	bge	r5,zero,69d84 <__muldf3+0x278>
   69d80:	48c00054 	ori	r3,r9,1
   69d84:	400d883a 	mov	r6,r8
   69d88:	5a8b883a 	add	r5,r11,r10
   69d8c:	10bfffc4 	addi	r2,r2,-1
   69d90:	69fff02e 	bgeu	r13,r7,69d54 <__muldf3+0x248>
   69d94:	db000215 	stw	r12,8(sp)
   69d98:	18803fcc 	andi	r2,r3,255
   69d9c:	01c02004 	movi	r7,128
   69da0:	11c00926 	beq	r2,r7,69dc8 <__muldf3+0x2bc>
   69da4:	008000c4 	movi	r2,3
   69da8:	d9000415 	stw	r4,16(sp)
   69dac:	d8c00315 	stw	r3,12(sp)
   69db0:	d8800015 	stw	r2,0(sp)
   69db4:	d809883a 	mov	r4,sp
   69db8:	003f7006 	br	69b7c <__muldf3+0x70>
   69dbc:	0011883a 	mov	r8,zero
   69dc0:	00c00044 	movi	r3,1
   69dc4:	003fb606 	br	69ca0 <__muldf3+0x194>
   69dc8:	19c0400c 	andi	r7,r3,256
   69dcc:	383ff51e 	bne	r7,zero,69da4 <__muldf3+0x298>
   69dd0:	314ab03a 	or	r5,r6,r5
   69dd4:	283ff326 	beq	r5,zero,69da4 <__muldf3+0x298>
   69dd8:	1885883a 	add	r2,r3,r2
   69ddc:	10cb803a 	cmpltu	r5,r2,r3
   69de0:	00ffc004 	movi	r3,-256
   69de4:	10c6703a 	and	r3,r2,r3
   69de8:	2909883a 	add	r4,r5,r4
   69dec:	003fed06 	br	69da4 <__muldf3+0x298>

00069df0 <__divdf3>:
   69df0:	defff104 	addi	sp,sp,-60
   69df4:	d9000c15 	stw	r4,48(sp)
   69df8:	d9400d15 	stw	r5,52(sp)
   69dfc:	d9000c04 	addi	r4,sp,48
   69e00:	d9400504 	addi	r5,sp,20
   69e04:	dfc00e15 	stw	ra,56(sp)
   69e08:	d9800a15 	stw	r6,40(sp)
   69e0c:	d9c00b15 	stw	r7,44(sp)
   69e10:	006a9540 	call	6a954 <__unpack_d>
   69e14:	d9000a04 	addi	r4,sp,40
   69e18:	d80b883a 	mov	r5,sp
   69e1c:	006a9540 	call	6a954 <__unpack_d>
   69e20:	d8c00517 	ldw	r3,20(sp)
   69e24:	00800044 	movi	r2,1
   69e28:	10c00536 	bltu	r2,r3,69e40 <__divdf3+0x50>
   69e2c:	d9000504 	addi	r4,sp,20
   69e30:	006a7300 	call	6a730 <__pack_d>
   69e34:	dfc00e17 	ldw	ra,56(sp)
   69e38:	dec00f04 	addi	sp,sp,60
   69e3c:	f800283a 	ret
   69e40:	d9000017 	ldw	r4,0(sp)
   69e44:	11000536 	bltu	r2,r4,69e5c <__divdf3+0x6c>
   69e48:	d809883a 	mov	r4,sp
   69e4c:	006a7300 	call	6a730 <__pack_d>
   69e50:	dfc00e17 	ldw	ra,56(sp)
   69e54:	dec00f04 	addi	sp,sp,60
   69e58:	f800283a 	ret
   69e5c:	d9800617 	ldw	r6,24(sp)
   69e60:	d9400117 	ldw	r5,4(sp)
   69e64:	00800104 	movi	r2,4
   69e68:	314af03a 	xor	r5,r6,r5
   69e6c:	d9400615 	stw	r5,24(sp)
   69e70:	18800226 	beq	r3,r2,69e7c <__divdf3+0x8c>
   69e74:	01400084 	movi	r5,2
   69e78:	1940041e 	bne	r3,r5,69e8c <__divdf3+0x9c>
   69e7c:	193feb1e 	bne	r3,r4,69e2c <__divdf3+0x3c>
   69e80:	010001f4 	movhi	r4,7
   69e84:	21378b04 	addi	r4,r4,-8660
   69e88:	003fe906 	br	69e30 <__divdf3+0x40>
   69e8c:	20803326 	beq	r4,r2,69f5c <__divdf3+0x16c>
   69e90:	21403726 	beq	r4,r5,69f70 <__divdf3+0x180>
   69e94:	d8800217 	ldw	r2,8(sp)
   69e98:	d9000717 	ldw	r4,28(sp)
   69e9c:	d8c00917 	ldw	r3,36(sp)
   69ea0:	da000417 	ldw	r8,16(sp)
   69ea4:	2089c83a 	sub	r4,r4,r2
   69ea8:	d9000715 	stw	r4,28(sp)
   69eac:	d8800817 	ldw	r2,32(sp)
   69eb0:	dbc00317 	ldw	r15,12(sp)
   69eb4:	1a000236 	bltu	r3,r8,69ec0 <__divdf3+0xd0>
   69eb8:	40c0081e 	bne	r8,r3,69edc <__divdf3+0xec>
   69ebc:	13c0072e 	bgeu	r2,r15,69edc <__divdf3+0xec>
   69ec0:	108b883a 	add	r5,r2,r2
   69ec4:	288d803a 	cmpltu	r6,r5,r2
   69ec8:	18c7883a 	add	r3,r3,r3
   69ecc:	213fffc4 	addi	r4,r4,-1
   69ed0:	2805883a 	mov	r2,r5
   69ed4:	30c7883a 	add	r3,r6,r3
   69ed8:	d9000715 	stw	r4,28(sp)
   69edc:	01400f44 	movi	r5,61
   69ee0:	000f883a 	mov	r7,zero
   69ee4:	01040034 	movhi	r4,4096
   69ee8:	0019883a 	mov	r12,zero
   69eec:	001b883a 	mov	r13,zero
   69ef0:	201697fa 	slli	r11,r4,31
   69ef4:	3814d07a 	srli	r10,r7,1
   69ef8:	297fffc4 	addi	r5,r5,-1
   69efc:	1a000936 	bltu	r3,r8,69f24 <__divdf3+0x134>
   69f00:	13cdc83a 	sub	r6,r2,r15
   69f04:	1193803a 	cmpltu	r9,r2,r6
   69f08:	1a1dc83a 	sub	r14,r3,r8
   69f0c:	40c0011e 	bne	r8,r3,69f14 <__divdf3+0x124>
   69f10:	13c00436 	bltu	r2,r15,69f24 <__divdf3+0x134>
   69f14:	3005883a 	mov	r2,r6
   69f18:	7247c83a 	sub	r3,r14,r9
   69f1c:	61d8b03a 	or	r12,r12,r7
   69f20:	691ab03a 	or	r13,r13,r4
   69f24:	108d883a 	add	r6,r2,r2
   69f28:	3093803a 	cmpltu	r9,r6,r2
   69f2c:	18c7883a 	add	r3,r3,r3
   69f30:	5a8eb03a 	or	r7,r11,r10
   69f34:	2008d07a 	srli	r4,r4,1
   69f38:	3005883a 	mov	r2,r6
   69f3c:	48c7883a 	add	r3,r9,r3
   69f40:	283feb1e 	bne	r5,zero,69ef0 <__divdf3+0x100>
   69f44:	61003fcc 	andi	r4,r12,255
   69f48:	01402004 	movi	r5,128
   69f4c:	21400b26 	beq	r4,r5,69f7c <__divdf3+0x18c>
   69f50:	db000815 	stw	r12,32(sp)
   69f54:	db400915 	stw	r13,36(sp)
   69f58:	003fb406 	br	69e2c <__divdf3+0x3c>
   69f5c:	d8000815 	stw	zero,32(sp)
   69f60:	d8000915 	stw	zero,36(sp)
   69f64:	d8000715 	stw	zero,28(sp)
   69f68:	d9000504 	addi	r4,sp,20
   69f6c:	003fb006 	br	69e30 <__divdf3+0x40>
   69f70:	d8800515 	stw	r2,20(sp)
   69f74:	d9000504 	addi	r4,sp,20
   69f78:	003fad06 	br	69e30 <__divdf3+0x40>
   69f7c:	6140400c 	andi	r5,r12,256
   69f80:	283ff31e 	bne	r5,zero,69f50 <__divdf3+0x160>
   69f84:	30c4b03a 	or	r2,r6,r3
   69f88:	103ff126 	beq	r2,zero,69f50 <__divdf3+0x160>
   69f8c:	6109883a 	add	r4,r12,r4
   69f90:	2305803a 	cmpltu	r2,r4,r12
   69f94:	033fc004 	movi	r12,-256
   69f98:	2318703a 	and	r12,r4,r12
   69f9c:	135b883a 	add	r13,r2,r13
   69fa0:	003feb06 	br	69f50 <__divdf3+0x160>

00069fa4 <__eqdf2>:
   69fa4:	defff104 	addi	sp,sp,-60
   69fa8:	d9000c15 	stw	r4,48(sp)
   69fac:	d9400d15 	stw	r5,52(sp)
   69fb0:	d9000c04 	addi	r4,sp,48
   69fb4:	d9400504 	addi	r5,sp,20
   69fb8:	dfc00e15 	stw	ra,56(sp)
   69fbc:	d9800a15 	stw	r6,40(sp)
   69fc0:	d9c00b15 	stw	r7,44(sp)
   69fc4:	006a9540 	call	6a954 <__unpack_d>
   69fc8:	d9000a04 	addi	r4,sp,40
   69fcc:	d80b883a 	mov	r5,sp
   69fd0:	006a9540 	call	6a954 <__unpack_d>
   69fd4:	d8c00517 	ldw	r3,20(sp)
   69fd8:	00800044 	movi	r2,1
   69fdc:	10c0052e 	bgeu	r2,r3,69ff4 <__eqdf2+0x50>
   69fe0:	d8c00017 	ldw	r3,0(sp)
   69fe4:	10c0032e 	bgeu	r2,r3,69ff4 <__eqdf2+0x50>
   69fe8:	d9000504 	addi	r4,sp,20
   69fec:	d80b883a 	mov	r5,sp
   69ff0:	006aa580 	call	6aa58 <__fpcmp_parts_d>
   69ff4:	dfc00e17 	ldw	ra,56(sp)
   69ff8:	dec00f04 	addi	sp,sp,60
   69ffc:	f800283a 	ret

0006a000 <__nedf2>:
   6a000:	defff104 	addi	sp,sp,-60
   6a004:	d9000c15 	stw	r4,48(sp)
   6a008:	d9400d15 	stw	r5,52(sp)
   6a00c:	d9000c04 	addi	r4,sp,48
   6a010:	d9400504 	addi	r5,sp,20
   6a014:	dfc00e15 	stw	ra,56(sp)
   6a018:	d9800a15 	stw	r6,40(sp)
   6a01c:	d9c00b15 	stw	r7,44(sp)
   6a020:	006a9540 	call	6a954 <__unpack_d>
   6a024:	d9000a04 	addi	r4,sp,40
   6a028:	d80b883a 	mov	r5,sp
   6a02c:	006a9540 	call	6a954 <__unpack_d>
   6a030:	d8c00517 	ldw	r3,20(sp)
   6a034:	00800044 	movi	r2,1
   6a038:	10c0052e 	bgeu	r2,r3,6a050 <__nedf2+0x50>
   6a03c:	d8c00017 	ldw	r3,0(sp)
   6a040:	10c0032e 	bgeu	r2,r3,6a050 <__nedf2+0x50>
   6a044:	d9000504 	addi	r4,sp,20
   6a048:	d80b883a 	mov	r5,sp
   6a04c:	006aa580 	call	6aa58 <__fpcmp_parts_d>
   6a050:	dfc00e17 	ldw	ra,56(sp)
   6a054:	dec00f04 	addi	sp,sp,60
   6a058:	f800283a 	ret

0006a05c <__gtdf2>:
   6a05c:	defff104 	addi	sp,sp,-60
   6a060:	d9000c15 	stw	r4,48(sp)
   6a064:	d9400d15 	stw	r5,52(sp)
   6a068:	d9000c04 	addi	r4,sp,48
   6a06c:	d9400504 	addi	r5,sp,20
   6a070:	dfc00e15 	stw	ra,56(sp)
   6a074:	d9800a15 	stw	r6,40(sp)
   6a078:	d9c00b15 	stw	r7,44(sp)
   6a07c:	006a9540 	call	6a954 <__unpack_d>
   6a080:	d9000a04 	addi	r4,sp,40
   6a084:	d80b883a 	mov	r5,sp
   6a088:	006a9540 	call	6a954 <__unpack_d>
   6a08c:	d8c00517 	ldw	r3,20(sp)
   6a090:	00800044 	movi	r2,1
   6a094:	10c0082e 	bgeu	r2,r3,6a0b8 <__gtdf2+0x5c>
   6a098:	d8c00017 	ldw	r3,0(sp)
   6a09c:	10c0062e 	bgeu	r2,r3,6a0b8 <__gtdf2+0x5c>
   6a0a0:	d9000504 	addi	r4,sp,20
   6a0a4:	d80b883a 	mov	r5,sp
   6a0a8:	006aa580 	call	6aa58 <__fpcmp_parts_d>
   6a0ac:	dfc00e17 	ldw	ra,56(sp)
   6a0b0:	dec00f04 	addi	sp,sp,60
   6a0b4:	f800283a 	ret
   6a0b8:	00bfffc4 	movi	r2,-1
   6a0bc:	003ffb06 	br	6a0ac <__gtdf2+0x50>

0006a0c0 <__gedf2>:
   6a0c0:	defff104 	addi	sp,sp,-60
   6a0c4:	d9000c15 	stw	r4,48(sp)
   6a0c8:	d9400d15 	stw	r5,52(sp)
   6a0cc:	d9000c04 	addi	r4,sp,48
   6a0d0:	d9400504 	addi	r5,sp,20
   6a0d4:	dfc00e15 	stw	ra,56(sp)
   6a0d8:	d9800a15 	stw	r6,40(sp)
   6a0dc:	d9c00b15 	stw	r7,44(sp)
   6a0e0:	006a9540 	call	6a954 <__unpack_d>
   6a0e4:	d9000a04 	addi	r4,sp,40
   6a0e8:	d80b883a 	mov	r5,sp
   6a0ec:	006a9540 	call	6a954 <__unpack_d>
   6a0f0:	d8c00517 	ldw	r3,20(sp)
   6a0f4:	00800044 	movi	r2,1
   6a0f8:	10c0082e 	bgeu	r2,r3,6a11c <__gedf2+0x5c>
   6a0fc:	d8c00017 	ldw	r3,0(sp)
   6a100:	10c0062e 	bgeu	r2,r3,6a11c <__gedf2+0x5c>
   6a104:	d9000504 	addi	r4,sp,20
   6a108:	d80b883a 	mov	r5,sp
   6a10c:	006aa580 	call	6aa58 <__fpcmp_parts_d>
   6a110:	dfc00e17 	ldw	ra,56(sp)
   6a114:	dec00f04 	addi	sp,sp,60
   6a118:	f800283a 	ret
   6a11c:	00bfffc4 	movi	r2,-1
   6a120:	003ffb06 	br	6a110 <__gedf2+0x50>

0006a124 <__ltdf2>:
   6a124:	defff104 	addi	sp,sp,-60
   6a128:	d9000c15 	stw	r4,48(sp)
   6a12c:	d9400d15 	stw	r5,52(sp)
   6a130:	d9000c04 	addi	r4,sp,48
   6a134:	d9400504 	addi	r5,sp,20
   6a138:	dfc00e15 	stw	ra,56(sp)
   6a13c:	d9800a15 	stw	r6,40(sp)
   6a140:	d9c00b15 	stw	r7,44(sp)
   6a144:	006a9540 	call	6a954 <__unpack_d>
   6a148:	d9000a04 	addi	r4,sp,40
   6a14c:	d80b883a 	mov	r5,sp
   6a150:	006a9540 	call	6a954 <__unpack_d>
   6a154:	d8c00517 	ldw	r3,20(sp)
   6a158:	00800044 	movi	r2,1
   6a15c:	10c0052e 	bgeu	r2,r3,6a174 <__ltdf2+0x50>
   6a160:	d8c00017 	ldw	r3,0(sp)
   6a164:	10c0032e 	bgeu	r2,r3,6a174 <__ltdf2+0x50>
   6a168:	d9000504 	addi	r4,sp,20
   6a16c:	d80b883a 	mov	r5,sp
   6a170:	006aa580 	call	6aa58 <__fpcmp_parts_d>
   6a174:	dfc00e17 	ldw	ra,56(sp)
   6a178:	dec00f04 	addi	sp,sp,60
   6a17c:	f800283a 	ret

0006a180 <__floatsidf>:
   6a180:	2004d7fa 	srli	r2,r4,31
   6a184:	defff904 	addi	sp,sp,-28
   6a188:	00c000c4 	movi	r3,3
   6a18c:	dfc00615 	stw	ra,24(sp)
   6a190:	dc000515 	stw	r16,20(sp)
   6a194:	d8c00015 	stw	r3,0(sp)
   6a198:	d8800115 	stw	r2,4(sp)
   6a19c:	2000081e 	bne	r4,zero,6a1c0 <__floatsidf+0x40>
   6a1a0:	00800084 	movi	r2,2
   6a1a4:	d8800015 	stw	r2,0(sp)
   6a1a8:	d809883a 	mov	r4,sp
   6a1ac:	006a7300 	call	6a730 <__pack_d>
   6a1b0:	dfc00617 	ldw	ra,24(sp)
   6a1b4:	dc000517 	ldw	r16,20(sp)
   6a1b8:	dec00704 	addi	sp,sp,28
   6a1bc:	f800283a 	ret
   6a1c0:	00c00f04 	movi	r3,60
   6a1c4:	d8c00215 	stw	r3,8(sp)
   6a1c8:	10000f1e 	bne	r2,zero,6a208 <__floatsidf+0x88>
   6a1cc:	2021883a 	mov	r16,r4
   6a1d0:	8009883a 	mov	r4,r16
   6a1d4:	006a6840 	call	6a684 <__clzsi2>
   6a1d8:	11000744 	addi	r4,r2,29
   6a1dc:	0100110e 	bge	zero,r4,6a224 <__floatsidf+0xa4>
   6a1e0:	10ffff44 	addi	r3,r2,-3
   6a1e4:	18001216 	blt	r3,zero,6a230 <__floatsidf+0xb0>
   6a1e8:	80c6983a 	sll	r3,r16,r3
   6a1ec:	0009883a 	mov	r4,zero
   6a1f0:	014007c4 	movi	r5,31
   6a1f4:	2885c83a 	sub	r2,r5,r2
   6a1f8:	d9000315 	stw	r4,12(sp)
   6a1fc:	d8c00415 	stw	r3,16(sp)
   6a200:	d8800215 	stw	r2,8(sp)
   6a204:	003fe806 	br	6a1a8 <__floatsidf+0x28>
   6a208:	00a00034 	movhi	r2,32768
   6a20c:	20800e26 	beq	r4,r2,6a248 <__floatsidf+0xc8>
   6a210:	0121c83a 	sub	r16,zero,r4
   6a214:	8009883a 	mov	r4,r16
   6a218:	006a6840 	call	6a684 <__clzsi2>
   6a21c:	11000744 	addi	r4,r2,29
   6a220:	013fef16 	blt	zero,r4,6a1e0 <__floatsidf+0x60>
   6a224:	dc000315 	stw	r16,12(sp)
   6a228:	d8000415 	stw	zero,16(sp)
   6a22c:	003fde06 	br	6a1a8 <__floatsidf+0x28>
   6a230:	800ad07a 	srli	r5,r16,1
   6a234:	00c007c4 	movi	r3,31
   6a238:	1907c83a 	sub	r3,r3,r4
   6a23c:	28c6d83a 	srl	r3,r5,r3
   6a240:	8108983a 	sll	r4,r16,r4
   6a244:	003fea06 	br	6a1f0 <__floatsidf+0x70>
   6a248:	0005883a 	mov	r2,zero
   6a24c:	00f07834 	movhi	r3,49632
   6a250:	003fd706 	br	6a1b0 <__floatsidf+0x30>

0006a254 <__fixdfsi>:
   6a254:	defff804 	addi	sp,sp,-32
   6a258:	d9000515 	stw	r4,20(sp)
   6a25c:	d9400615 	stw	r5,24(sp)
   6a260:	d9000504 	addi	r4,sp,20
   6a264:	d80b883a 	mov	r5,sp
   6a268:	dfc00715 	stw	ra,28(sp)
   6a26c:	006a9540 	call	6a954 <__unpack_d>
   6a270:	d8800017 	ldw	r2,0(sp)
   6a274:	00c00084 	movi	r3,2
   6a278:	10c01c26 	beq	r2,r3,6a2ec <__fixdfsi+0x98>
   6a27c:	00c00044 	movi	r3,1
   6a280:	18801a2e 	bgeu	r3,r2,6a2ec <__fixdfsi+0x98>
   6a284:	00c00104 	movi	r3,4
   6a288:	10c01126 	beq	r2,r3,6a2d0 <__fixdfsi+0x7c>
   6a28c:	d8800217 	ldw	r2,8(sp)
   6a290:	10001616 	blt	r2,zero,6a2ec <__fixdfsi+0x98>
   6a294:	00c00784 	movi	r3,30
   6a298:	18800d16 	blt	r3,r2,6a2d0 <__fixdfsi+0x7c>
   6a29c:	00c00f04 	movi	r3,60
   6a2a0:	1885c83a 	sub	r2,r3,r2
   6a2a4:	10fff804 	addi	r3,r2,-32
   6a2a8:	d9400317 	ldw	r5,12(sp)
   6a2ac:	d9000417 	ldw	r4,16(sp)
   6a2b0:	18001616 	blt	r3,zero,6a30c <__fixdfsi+0xb8>
   6a2b4:	20c4d83a 	srl	r2,r4,r3
   6a2b8:	d8c00117 	ldw	r3,4(sp)
   6a2bc:	18000126 	beq	r3,zero,6a2c4 <__fixdfsi+0x70>
   6a2c0:	0085c83a 	sub	r2,zero,r2
   6a2c4:	dfc00717 	ldw	ra,28(sp)
   6a2c8:	dec00804 	addi	sp,sp,32
   6a2cc:	f800283a 	ret
   6a2d0:	d8800117 	ldw	r2,4(sp)
   6a2d4:	1000091e 	bne	r2,zero,6a2fc <__fixdfsi+0xa8>
   6a2d8:	00a00034 	movhi	r2,32768
   6a2dc:	10bfffc4 	addi	r2,r2,-1
   6a2e0:	dfc00717 	ldw	ra,28(sp)
   6a2e4:	dec00804 	addi	sp,sp,32
   6a2e8:	f800283a 	ret
   6a2ec:	0005883a 	mov	r2,zero
   6a2f0:	dfc00717 	ldw	ra,28(sp)
   6a2f4:	dec00804 	addi	sp,sp,32
   6a2f8:	f800283a 	ret
   6a2fc:	00a00034 	movhi	r2,32768
   6a300:	dfc00717 	ldw	ra,28(sp)
   6a304:	dec00804 	addi	sp,sp,32
   6a308:	f800283a 	ret
   6a30c:	2008907a 	slli	r4,r4,1
   6a310:	018007c4 	movi	r6,31
   6a314:	308dc83a 	sub	r6,r6,r2
   6a318:	2188983a 	sll	r4,r4,r6
   6a31c:	2884d83a 	srl	r2,r5,r2
   6a320:	2084b03a 	or	r2,r4,r2
   6a324:	003fe406 	br	6a2b8 <__fixdfsi+0x64>

0006a328 <__floatunsidf>:
   6a328:	defff904 	addi	sp,sp,-28
   6a32c:	dc000515 	stw	r16,20(sp)
   6a330:	dfc00615 	stw	ra,24(sp)
   6a334:	d8000115 	stw	zero,4(sp)
   6a338:	2021883a 	mov	r16,r4
   6a33c:	20001726 	beq	r4,zero,6a39c <__floatunsidf+0x74>
   6a340:	008000c4 	movi	r2,3
   6a344:	d8800015 	stw	r2,0(sp)
   6a348:	00800f04 	movi	r2,60
   6a34c:	d8800215 	stw	r2,8(sp)
   6a350:	006a6840 	call	6a684 <__clzsi2>
   6a354:	10c00744 	addi	r3,r2,29
   6a358:	18001816 	blt	r3,zero,6a3bc <__floatunsidf+0x94>
   6a35c:	18002d26 	beq	r3,zero,6a414 <__floatunsidf+0xec>
   6a360:	113fff44 	addi	r4,r2,-3
   6a364:	20002e16 	blt	r4,zero,6a420 <__floatunsidf+0xf8>
   6a368:	8108983a 	sll	r4,r16,r4
   6a36c:	0021883a 	mov	r16,zero
   6a370:	014007c4 	movi	r5,31
   6a374:	2885c83a 	sub	r2,r5,r2
   6a378:	dc000315 	stw	r16,12(sp)
   6a37c:	d9000415 	stw	r4,16(sp)
   6a380:	d8800215 	stw	r2,8(sp)
   6a384:	d809883a 	mov	r4,sp
   6a388:	006a7300 	call	6a730 <__pack_d>
   6a38c:	dfc00617 	ldw	ra,24(sp)
   6a390:	dc000517 	ldw	r16,20(sp)
   6a394:	dec00704 	addi	sp,sp,28
   6a398:	f800283a 	ret
   6a39c:	00800084 	movi	r2,2
   6a3a0:	d809883a 	mov	r4,sp
   6a3a4:	d8800015 	stw	r2,0(sp)
   6a3a8:	006a7300 	call	6a730 <__pack_d>
   6a3ac:	dfc00617 	ldw	ra,24(sp)
   6a3b0:	dc000517 	ldw	r16,20(sp)
   6a3b4:	dec00704 	addi	sp,sp,28
   6a3b8:	f800283a 	ret
   6a3bc:	00c7c83a 	sub	r3,zero,r3
   6a3c0:	193ff804 	addi	r4,r3,-32
   6a3c4:	20001c16 	blt	r4,zero,6a438 <__floatunsidf+0x110>
   6a3c8:	000b883a 	mov	r5,zero
   6a3cc:	2009d7fa 	srai	r4,r4,31
   6a3d0:	80c6d83a 	srl	r3,r16,r3
   6a3d4:	297fffc4 	addi	r5,r5,-1
   6a3d8:	2c20703a 	and	r16,r5,r16
   6a3dc:	8020c03a 	cmpne	r16,r16,zero
   6a3e0:	1906703a 	and	r3,r3,r4
   6a3e4:	010007c4 	movi	r4,31
   6a3e8:	80c6b03a 	or	r3,r16,r3
   6a3ec:	2085c83a 	sub	r2,r4,r2
   6a3f0:	d809883a 	mov	r4,sp
   6a3f4:	d8c00315 	stw	r3,12(sp)
   6a3f8:	d8000415 	stw	zero,16(sp)
   6a3fc:	d8800215 	stw	r2,8(sp)
   6a400:	006a7300 	call	6a730 <__pack_d>
   6a404:	dfc00617 	ldw	ra,24(sp)
   6a408:	dc000517 	ldw	r16,20(sp)
   6a40c:	dec00704 	addi	sp,sp,28
   6a410:	f800283a 	ret
   6a414:	dc000315 	stw	r16,12(sp)
   6a418:	d8000415 	stw	zero,16(sp)
   6a41c:	003fd906 	br	6a384 <__floatunsidf+0x5c>
   6a420:	800ad07a 	srli	r5,r16,1
   6a424:	010007c4 	movi	r4,31
   6a428:	20c9c83a 	sub	r4,r4,r3
   6a42c:	2908d83a 	srl	r4,r5,r4
   6a430:	80e0983a 	sll	r16,r16,r3
   6a434:	003fce06 	br	6a370 <__floatunsidf+0x48>
   6a438:	01400044 	movi	r5,1
   6a43c:	28ca983a 	sll	r5,r5,r3
   6a440:	003fe206 	br	6a3cc <__floatunsidf+0xa4>

0006a444 <udivmodsi4>:
   6a444:	2005883a 	mov	r2,r4
   6a448:	2900182e 	bgeu	r5,r4,6a4ac <udivmodsi4+0x68>
   6a44c:	28001716 	blt	r5,zero,6a4ac <udivmodsi4+0x68>
   6a450:	01000804 	movi	r4,32
   6a454:	00c00044 	movi	r3,1
   6a458:	00000206 	br	6a464 <udivmodsi4+0x20>
   6a45c:	20001126 	beq	r4,zero,6a4a4 <udivmodsi4+0x60>
   6a460:	28000516 	blt	r5,zero,6a478 <udivmodsi4+0x34>
   6a464:	294b883a 	add	r5,r5,r5
   6a468:	213fffc4 	addi	r4,r4,-1
   6a46c:	18c7883a 	add	r3,r3,r3
   6a470:	28bffa36 	bltu	r5,r2,6a45c <udivmodsi4+0x18>
   6a474:	18000b26 	beq	r3,zero,6a4a4 <udivmodsi4+0x60>
   6a478:	0009883a 	mov	r4,zero
   6a47c:	11400236 	bltu	r2,r5,6a488 <udivmodsi4+0x44>
   6a480:	1145c83a 	sub	r2,r2,r5
   6a484:	20c8b03a 	or	r4,r4,r3
   6a488:	1806d07a 	srli	r3,r3,1
   6a48c:	280ad07a 	srli	r5,r5,1
   6a490:	183ffa1e 	bne	r3,zero,6a47c <udivmodsi4+0x38>
   6a494:	3000021e 	bne	r6,zero,6a4a0 <udivmodsi4+0x5c>
   6a498:	2005883a 	mov	r2,r4
   6a49c:	f800283a 	ret
   6a4a0:	f800283a 	ret
   6a4a4:	0009883a 	mov	r4,zero
   6a4a8:	003ffa06 	br	6a494 <udivmodsi4+0x50>
   6a4ac:	00c00044 	movi	r3,1
   6a4b0:	0009883a 	mov	r4,zero
   6a4b4:	003ff106 	br	6a47c <udivmodsi4+0x38>

0006a4b8 <__divsi3>:
   6a4b8:	defffe04 	addi	sp,sp,-8
   6a4bc:	dfc00115 	stw	ra,4(sp)
   6a4c0:	dc000015 	stw	r16,0(sp)
   6a4c4:	20000a16 	blt	r4,zero,6a4f0 <__divsi3+0x38>
   6a4c8:	0021883a 	mov	r16,zero
   6a4cc:	28000b16 	blt	r5,zero,6a4fc <__divsi3+0x44>
   6a4d0:	000d883a 	mov	r6,zero
   6a4d4:	006a4440 	call	6a444 <udivmodsi4>
   6a4d8:	80000126 	beq	r16,zero,6a4e0 <__divsi3+0x28>
   6a4dc:	0085c83a 	sub	r2,zero,r2
   6a4e0:	dfc00117 	ldw	ra,4(sp)
   6a4e4:	dc000017 	ldw	r16,0(sp)
   6a4e8:	dec00204 	addi	sp,sp,8
   6a4ec:	f800283a 	ret
   6a4f0:	0109c83a 	sub	r4,zero,r4
   6a4f4:	04000044 	movi	r16,1
   6a4f8:	283ff50e 	bge	r5,zero,6a4d0 <__divsi3+0x18>
   6a4fc:	014bc83a 	sub	r5,zero,r5
   6a500:	8400005c 	xori	r16,r16,1
   6a504:	003ff206 	br	6a4d0 <__divsi3+0x18>

0006a508 <__modsi3>:
   6a508:	deffff04 	addi	sp,sp,-4
   6a50c:	dfc00015 	stw	ra,0(sp)
   6a510:	20000516 	blt	r4,zero,6a528 <__modsi3+0x20>
   6a514:	28000c16 	blt	r5,zero,6a548 <__modsi3+0x40>
   6a518:	01800044 	movi	r6,1
   6a51c:	dfc00017 	ldw	ra,0(sp)
   6a520:	dec00104 	addi	sp,sp,4
   6a524:	006a4441 	jmpi	6a444 <udivmodsi4>
   6a528:	0109c83a 	sub	r4,zero,r4
   6a52c:	28000b16 	blt	r5,zero,6a55c <__modsi3+0x54>
   6a530:	01800044 	movi	r6,1
   6a534:	006a4440 	call	6a444 <udivmodsi4>
   6a538:	0085c83a 	sub	r2,zero,r2
   6a53c:	dfc00017 	ldw	ra,0(sp)
   6a540:	dec00104 	addi	sp,sp,4
   6a544:	f800283a 	ret
   6a548:	014bc83a 	sub	r5,zero,r5
   6a54c:	01800044 	movi	r6,1
   6a550:	dfc00017 	ldw	ra,0(sp)
   6a554:	dec00104 	addi	sp,sp,4
   6a558:	006a4441 	jmpi	6a444 <udivmodsi4>
   6a55c:	014bc83a 	sub	r5,zero,r5
   6a560:	003ff306 	br	6a530 <__modsi3+0x28>

0006a564 <__udivsi3>:
   6a564:	000d883a 	mov	r6,zero
   6a568:	006a4441 	jmpi	6a444 <udivmodsi4>

0006a56c <__umodsi3>:
   6a56c:	01800044 	movi	r6,1
   6a570:	006a4441 	jmpi	6a444 <udivmodsi4>

0006a574 <__muldi3>:
   6a574:	defff604 	addi	sp,sp,-40
   6a578:	dd400515 	stw	r21,20(sp)
   6a57c:	dd000415 	stw	r20,16(sp)
   6a580:	257fffcc 	andi	r21,r4,65535
   6a584:	353fffcc 	andi	r20,r6,65535
   6a588:	dcc00315 	stw	r19,12(sp)
   6a58c:	3026d43a 	srli	r19,r6,16
   6a590:	dd800615 	stw	r22,24(sp)
   6a594:	dc800215 	stw	r18,8(sp)
   6a598:	dc400115 	stw	r17,4(sp)
   6a59c:	2024d43a 	srli	r18,r4,16
   6a5a0:	2023883a 	mov	r17,r4
   6a5a4:	282d883a 	mov	r22,r5
   6a5a8:	a009883a 	mov	r4,r20
   6a5ac:	a80b883a 	mov	r5,r21
   6a5b0:	dfc00915 	stw	ra,36(sp)
   6a5b4:	df000815 	stw	fp,32(sp)
   6a5b8:	ddc00715 	stw	r23,28(sp)
   6a5bc:	3839883a 	mov	fp,r7
   6a5c0:	dc000015 	stw	r16,0(sp)
   6a5c4:	3021883a 	mov	r16,r6
   6a5c8:	00614b40 	call	614b4 <__mulsi3>
   6a5cc:	a80b883a 	mov	r5,r21
   6a5d0:	9809883a 	mov	r4,r19
   6a5d4:	102f883a 	mov	r23,r2
   6a5d8:	00614b40 	call	614b4 <__mulsi3>
   6a5dc:	a009883a 	mov	r4,r20
   6a5e0:	900b883a 	mov	r5,r18
   6a5e4:	102b883a 	mov	r21,r2
   6a5e8:	00614b40 	call	614b4 <__mulsi3>
   6a5ec:	9809883a 	mov	r4,r19
   6a5f0:	900b883a 	mov	r5,r18
   6a5f4:	1029883a 	mov	r20,r2
   6a5f8:	00614b40 	call	614b4 <__mulsi3>
   6a5fc:	1007883a 	mov	r3,r2
   6a600:	b804d43a 	srli	r2,r23,16
   6a604:	a549883a 	add	r4,r20,r21
   6a608:	2089883a 	add	r4,r4,r2
   6a60c:	2500022e 	bgeu	r4,r20,6a618 <__muldi3+0xa4>
   6a610:	00800074 	movhi	r2,1
   6a614:	1887883a 	add	r3,r3,r2
   6a618:	200cd43a 	srli	r6,r4,16
   6a61c:	2004943a 	slli	r2,r4,16
   6a620:	e00b883a 	mov	r5,fp
   6a624:	8809883a 	mov	r4,r17
   6a628:	bdffffcc 	andi	r23,r23,65535
   6a62c:	19a3883a 	add	r17,r3,r6
   6a630:	15ef883a 	add	r23,r2,r23
   6a634:	00614b40 	call	614b4 <__mulsi3>
   6a638:	8009883a 	mov	r4,r16
   6a63c:	b00b883a 	mov	r5,r22
   6a640:	1025883a 	mov	r18,r2
   6a644:	00614b40 	call	614b4 <__mulsi3>
   6a648:	9085883a 	add	r2,r18,r2
   6a64c:	1447883a 	add	r3,r2,r17
   6a650:	b805883a 	mov	r2,r23
   6a654:	dfc00917 	ldw	ra,36(sp)
   6a658:	df000817 	ldw	fp,32(sp)
   6a65c:	ddc00717 	ldw	r23,28(sp)
   6a660:	dd800617 	ldw	r22,24(sp)
   6a664:	dd400517 	ldw	r21,20(sp)
   6a668:	dd000417 	ldw	r20,16(sp)
   6a66c:	dcc00317 	ldw	r19,12(sp)
   6a670:	dc800217 	ldw	r18,8(sp)
   6a674:	dc400117 	ldw	r17,4(sp)
   6a678:	dc000017 	ldw	r16,0(sp)
   6a67c:	dec00a04 	addi	sp,sp,40
   6a680:	f800283a 	ret

0006a684 <__clzsi2>:
   6a684:	00bfffd4 	movui	r2,65535
   6a688:	11000b36 	bltu	r2,r4,6a6b8 <__clzsi2+0x34>
   6a68c:	00803fc4 	movi	r2,255
   6a690:	11001e2e 	bgeu	r2,r4,6a70c <__clzsi2+0x88>
   6a694:	00c00204 	movi	r3,8
   6a698:	20c8d83a 	srl	r4,r4,r3
   6a69c:	00c001f4 	movhi	r3,7
   6a6a0:	18f79004 	addi	r3,r3,-8640
   6a6a4:	00800604 	movi	r2,24
   6a6a8:	1909883a 	add	r4,r3,r4
   6a6ac:	20c00003 	ldbu	r3,0(r4)
   6a6b0:	10c5c83a 	sub	r2,r2,r3
   6a6b4:	f800283a 	ret
   6a6b8:	00804034 	movhi	r2,256
   6a6bc:	10bfffc4 	addi	r2,r2,-1
   6a6c0:	11000936 	bltu	r2,r4,6a6e8 <__clzsi2+0x64>
   6a6c4:	00800404 	movi	r2,16
   6a6c8:	1007883a 	mov	r3,r2
   6a6cc:	20c8d83a 	srl	r4,r4,r3
   6a6d0:	00c001f4 	movhi	r3,7
   6a6d4:	18f79004 	addi	r3,r3,-8640
   6a6d8:	1909883a 	add	r4,r3,r4
   6a6dc:	20c00003 	ldbu	r3,0(r4)
   6a6e0:	10c5c83a 	sub	r2,r2,r3
   6a6e4:	f800283a 	ret
   6a6e8:	00c00604 	movi	r3,24
   6a6ec:	20c8d83a 	srl	r4,r4,r3
   6a6f0:	00c001f4 	movhi	r3,7
   6a6f4:	18f79004 	addi	r3,r3,-8640
   6a6f8:	00800204 	movi	r2,8
   6a6fc:	1909883a 	add	r4,r3,r4
   6a700:	20c00003 	ldbu	r3,0(r4)
   6a704:	10c5c83a 	sub	r2,r2,r3
   6a708:	f800283a 	ret
   6a70c:	0007883a 	mov	r3,zero
   6a710:	20c8d83a 	srl	r4,r4,r3
   6a714:	00c001f4 	movhi	r3,7
   6a718:	18f79004 	addi	r3,r3,-8640
   6a71c:	00800804 	movi	r2,32
   6a720:	1909883a 	add	r4,r3,r4
   6a724:	20c00003 	ldbu	r3,0(r4)
   6a728:	10c5c83a 	sub	r2,r2,r3
   6a72c:	f800283a 	ret

0006a730 <__pack_d>:
   6a730:	20800017 	ldw	r2,0(r4)
   6a734:	defff804 	addi	sp,sp,-32
   6a738:	dcc00315 	stw	r19,12(sp)
   6a73c:	dc800215 	stw	r18,8(sp)
   6a740:	dfc00715 	stw	ra,28(sp)
   6a744:	dd800615 	stw	r22,24(sp)
   6a748:	dd400515 	stw	r21,20(sp)
   6a74c:	dd000415 	stw	r20,16(sp)
   6a750:	dc400115 	stw	r17,4(sp)
   6a754:	dc000015 	stw	r16,0(sp)
   6a758:	04800044 	movi	r18,1
   6a75c:	24400317 	ldw	r17,12(r4)
   6a760:	24000417 	ldw	r16,16(r4)
   6a764:	24c00117 	ldw	r19,4(r4)
   6a768:	9080422e 	bgeu	r18,r2,6a874 <__pack_d+0x144>
   6a76c:	00c00104 	movi	r3,4
   6a770:	10c03c26 	beq	r2,r3,6a864 <__pack_d+0x134>
   6a774:	00c00084 	movi	r3,2
   6a778:	10c01926 	beq	r2,r3,6a7e0 <__pack_d+0xb0>
   6a77c:	8c04b03a 	or	r2,r17,r16
   6a780:	10001726 	beq	r2,zero,6a7e0 <__pack_d+0xb0>
   6a784:	21000217 	ldw	r4,8(r4)
   6a788:	00bf0084 	movi	r2,-1022
   6a78c:	20804016 	blt	r4,r2,6a890 <__pack_d+0x160>
   6a790:	0080ffc4 	movi	r2,1023
   6a794:	11003316 	blt	r2,r4,6a864 <__pack_d+0x134>
   6a798:	88803fcc 	andi	r2,r17,255
   6a79c:	00c02004 	movi	r3,128
   6a7a0:	10c02926 	beq	r2,r3,6a848 <__pack_d+0x118>
   6a7a4:	88801fc4 	addi	r2,r17,127
   6a7a8:	1463803a 	cmpltu	r17,r2,r17
   6a7ac:	8c21883a 	add	r16,r17,r16
   6a7b0:	1023883a 	mov	r17,r2
   6a7b4:	00880034 	movhi	r2,8192
   6a7b8:	10bfffc4 	addi	r2,r2,-1
   6a7bc:	14001c36 	bltu	r2,r16,6a830 <__pack_d+0x100>
   6a7c0:	2100ffc4 	addi	r4,r4,1023
   6a7c4:	8006963a 	slli	r3,r16,24
   6a7c8:	8804d23a 	srli	r2,r17,8
   6a7cc:	8020913a 	slli	r16,r16,4
   6a7d0:	2101ffcc 	andi	r4,r4,2047
   6a7d4:	1884b03a 	or	r2,r3,r2
   6a7d8:	8020d33a 	srli	r16,r16,12
   6a7dc:	00000306 	br	6a7ec <__pack_d+0xbc>
   6a7e0:	0009883a 	mov	r4,zero
   6a7e4:	0005883a 	mov	r2,zero
   6a7e8:	0021883a 	mov	r16,zero
   6a7ec:	2008953a 	slli	r4,r4,20
   6a7f0:	982697fa 	slli	r19,r19,31
   6a7f4:	00c00434 	movhi	r3,16
   6a7f8:	18ffffc4 	addi	r3,r3,-1
   6a7fc:	80e0703a 	and	r16,r16,r3
   6a800:	8106b03a 	or	r3,r16,r4
   6a804:	1cc6b03a 	or	r3,r3,r19
   6a808:	dfc00717 	ldw	ra,28(sp)
   6a80c:	dd800617 	ldw	r22,24(sp)
   6a810:	dd400517 	ldw	r21,20(sp)
   6a814:	dd000417 	ldw	r20,16(sp)
   6a818:	dcc00317 	ldw	r19,12(sp)
   6a81c:	dc800217 	ldw	r18,8(sp)
   6a820:	dc400117 	ldw	r17,4(sp)
   6a824:	dc000017 	ldw	r16,0(sp)
   6a828:	dec00804 	addi	sp,sp,32
   6a82c:	f800283a 	ret
   6a830:	800697fa 	slli	r3,r16,31
   6a834:	8804d07a 	srli	r2,r17,1
   6a838:	21010004 	addi	r4,r4,1024
   6a83c:	8020d07a 	srli	r16,r16,1
   6a840:	18a2b03a 	or	r17,r3,r2
   6a844:	003fdf06 	br	6a7c4 <__pack_d+0x94>
   6a848:	88c0400c 	andi	r3,r17,256
   6a84c:	183fd926 	beq	r3,zero,6a7b4 <__pack_d+0x84>
   6a850:	8885883a 	add	r2,r17,r2
   6a854:	1463803a 	cmpltu	r17,r2,r17
   6a858:	8c21883a 	add	r16,r17,r16
   6a85c:	1023883a 	mov	r17,r2
   6a860:	003fd406 	br	6a7b4 <__pack_d+0x84>
   6a864:	0101ffc4 	movi	r4,2047
   6a868:	0005883a 	mov	r2,zero
   6a86c:	0021883a 	mov	r16,zero
   6a870:	003fde06 	br	6a7ec <__pack_d+0xbc>
   6a874:	84000234 	orhi	r16,r16,8
   6a878:	00c00434 	movhi	r3,16
   6a87c:	18ffffc4 	addi	r3,r3,-1
   6a880:	8805883a 	mov	r2,r17
   6a884:	80e0703a 	and	r16,r16,r3
   6a888:	0101ffc4 	movi	r4,2047
   6a88c:	003fd706 	br	6a7ec <__pack_d+0xbc>
   6a890:	1129c83a 	sub	r20,r2,r4
   6a894:	00800e04 	movi	r2,56
   6a898:	15002716 	blt	r2,r20,6a938 <__pack_d+0x208>
   6a89c:	800b883a 	mov	r5,r16
   6a8a0:	a00d883a 	mov	r6,r20
   6a8a4:	8809883a 	mov	r4,r17
   6a8a8:	006ab280 	call	6ab28 <__lshrdi3>
   6a8ac:	9009883a 	mov	r4,r18
   6a8b0:	000b883a 	mov	r5,zero
   6a8b4:	a00d883a 	mov	r6,r20
   6a8b8:	102d883a 	mov	r22,r2
   6a8bc:	182b883a 	mov	r21,r3
   6a8c0:	006ab6c0 	call	6ab6c <__ashldi3>
   6a8c4:	1009003a 	cmpeq	r4,r2,zero
   6a8c8:	1907c83a 	sub	r3,r3,r4
   6a8cc:	10bfffc4 	addi	r2,r2,-1
   6a8d0:	1c20703a 	and	r16,r3,r16
   6a8d4:	1444703a 	and	r2,r2,r17
   6a8d8:	1404b03a 	or	r2,r2,r16
   6a8dc:	1004c03a 	cmpne	r2,r2,zero
   6a8e0:	1584b03a 	or	r2,r2,r22
   6a8e4:	11003fcc 	andi	r4,r2,255
   6a8e8:	01402004 	movi	r5,128
   6a8ec:	a807883a 	mov	r3,r21
   6a8f0:	2140131e 	bne	r4,r5,6a940 <__pack_d+0x210>
   6a8f4:	1140400c 	andi	r5,r2,256
   6a8f8:	28000426 	beq	r5,zero,6a90c <__pack_d+0x1dc>
   6a8fc:	1109883a 	add	r4,r2,r4
   6a900:	2085803a 	cmpltu	r2,r4,r2
   6a904:	1547883a 	add	r3,r2,r21
   6a908:	2005883a 	mov	r2,r4
   6a90c:	1808963a 	slli	r4,r3,24
   6a910:	1004d23a 	srli	r2,r2,8
   6a914:	1820913a 	slli	r16,r3,4
   6a918:	01440034 	movhi	r5,4096
   6a91c:	297fffc4 	addi	r5,r5,-1
   6a920:	2084b03a 	or	r2,r4,r2
   6a924:	8020d33a 	srli	r16,r16,12
   6a928:	01000044 	movi	r4,1
   6a92c:	28ffaf36 	bltu	r5,r3,6a7ec <__pack_d+0xbc>
   6a930:	0009883a 	mov	r4,zero
   6a934:	003fad06 	br	6a7ec <__pack_d+0xbc>
   6a938:	0005883a 	mov	r2,zero
   6a93c:	0007883a 	mov	r3,zero
   6a940:	11001fc4 	addi	r4,r2,127
   6a944:	2085803a 	cmpltu	r2,r4,r2
   6a948:	10c7883a 	add	r3,r2,r3
   6a94c:	2005883a 	mov	r2,r4
   6a950:	003fee06 	br	6a90c <__pack_d+0x1dc>

0006a954 <__unpack_d>:
   6a954:	21800117 	ldw	r6,4(r4)
   6a958:	20c00017 	ldw	r3,0(r4)
   6a95c:	3004d7fa 	srli	r2,r6,31
   6a960:	3008d53a 	srli	r4,r6,20
   6a964:	28800115 	stw	r2,4(r5)
   6a968:	2101ffcc 	andi	r4,r4,2047
   6a96c:	00800434 	movhi	r2,16
   6a970:	10bfffc4 	addi	r2,r2,-1
   6a974:	3084703a 	and	r2,r6,r2
   6a978:	20001a1e 	bne	r4,zero,6a9e4 <__unpack_d+0x90>
   6a97c:	1888b03a 	or	r4,r3,r2
   6a980:	20002626 	beq	r4,zero,6aa1c <__unpack_d+0xc8>
   6a984:	1808d63a 	srli	r4,r3,24
   6a988:	1004923a 	slli	r2,r2,8
   6a98c:	01bf0084 	movi	r6,-1022
   6a990:	29800215 	stw	r6,8(r5)
   6a994:	2084b03a 	or	r2,r4,r2
   6a998:	010000c4 	movi	r4,3
   6a99c:	29000015 	stw	r4,0(r5)
   6a9a0:	02040034 	movhi	r8,4096
   6a9a4:	423fffc4 	addi	r8,r8,-1
   6a9a8:	1806923a 	slli	r3,r3,8
   6a9ac:	40801836 	bltu	r8,r2,6aa10 <__unpack_d+0xbc>
   6a9b0:	013f0044 	movi	r4,-1023
   6a9b4:	18cd883a 	add	r6,r3,r3
   6a9b8:	30c7803a 	cmpltu	r3,r6,r3
   6a9bc:	1085883a 	add	r2,r2,r2
   6a9c0:	1885883a 	add	r2,r3,r2
   6a9c4:	200f883a 	mov	r7,r4
   6a9c8:	3007883a 	mov	r3,r6
   6a9cc:	213fffc4 	addi	r4,r4,-1
   6a9d0:	40bff82e 	bgeu	r8,r2,6a9b4 <__unpack_d+0x60>
   6a9d4:	29c00215 	stw	r7,8(r5)
   6a9d8:	28c00315 	stw	r3,12(r5)
   6a9dc:	28800415 	stw	r2,16(r5)
   6a9e0:	f800283a 	ret
   6a9e4:	01c1ffc4 	movi	r7,2047
   6a9e8:	21c00f26 	beq	r4,r7,6aa28 <__unpack_d+0xd4>
   6a9ec:	180cd63a 	srli	r6,r3,24
   6a9f0:	1004923a 	slli	r2,r2,8
   6a9f4:	213f0044 	addi	r4,r4,-1023
   6a9f8:	1806923a 	slli	r3,r3,8
   6a9fc:	3084b03a 	or	r2,r6,r2
   6aa00:	29000215 	stw	r4,8(r5)
   6aa04:	010000c4 	movi	r4,3
   6aa08:	10840034 	orhi	r2,r2,4096
   6aa0c:	29000015 	stw	r4,0(r5)
   6aa10:	28c00315 	stw	r3,12(r5)
   6aa14:	28800415 	stw	r2,16(r5)
   6aa18:	f800283a 	ret
   6aa1c:	00800084 	movi	r2,2
   6aa20:	28800015 	stw	r2,0(r5)
   6aa24:	f800283a 	ret
   6aa28:	1888b03a 	or	r4,r3,r2
   6aa2c:	20000526 	beq	r4,zero,6aa44 <__unpack_d+0xf0>
   6aa30:	3180022c 	andhi	r6,r6,8
   6aa34:	30000626 	beq	r6,zero,6aa50 <__unpack_d+0xfc>
   6aa38:	01000044 	movi	r4,1
   6aa3c:	29000015 	stw	r4,0(r5)
   6aa40:	003ff306 	br	6aa10 <__unpack_d+0xbc>
   6aa44:	00800104 	movi	r2,4
   6aa48:	28800015 	stw	r2,0(r5)
   6aa4c:	f800283a 	ret
   6aa50:	28000015 	stw	zero,0(r5)
   6aa54:	003fee06 	br	6aa10 <__unpack_d+0xbc>

0006aa58 <__fpcmp_parts_d>:
   6aa58:	20c00017 	ldw	r3,0(r4)
   6aa5c:	00800044 	movi	r2,1
   6aa60:	10c0142e 	bgeu	r2,r3,6aab4 <__fpcmp_parts_d+0x5c>
   6aa64:	29800017 	ldw	r6,0(r5)
   6aa68:	1180122e 	bgeu	r2,r6,6aab4 <__fpcmp_parts_d+0x5c>
   6aa6c:	01c00104 	movi	r7,4
   6aa70:	19c02826 	beq	r3,r7,6ab14 <__fpcmp_parts_d+0xbc>
   6aa74:	31c00926 	beq	r6,r7,6aa9c <__fpcmp_parts_d+0x44>
   6aa78:	01c00084 	movi	r7,2
   6aa7c:	19c00626 	beq	r3,r7,6aa98 <__fpcmp_parts_d+0x40>
   6aa80:	31c00a26 	beq	r6,r7,6aaac <__fpcmp_parts_d+0x54>
   6aa84:	20c00117 	ldw	r3,4(r4)
   6aa88:	29800117 	ldw	r6,4(r5)
   6aa8c:	19800b26 	beq	r3,r6,6aabc <__fpcmp_parts_d+0x64>
   6aa90:	1800041e 	bne	r3,zero,6aaa4 <__fpcmp_parts_d+0x4c>
   6aa94:	f800283a 	ret
   6aa98:	30c01a26 	beq	r6,r3,6ab04 <__fpcmp_parts_d+0xac>
   6aa9c:	28800117 	ldw	r2,4(r5)
   6aaa0:	1000041e 	bne	r2,zero,6aab4 <__fpcmp_parts_d+0x5c>
   6aaa4:	00bfffc4 	movi	r2,-1
   6aaa8:	f800283a 	ret
   6aaac:	20800117 	ldw	r2,4(r4)
   6aab0:	103ffc1e 	bne	r2,zero,6aaa4 <__fpcmp_parts_d+0x4c>
   6aab4:	00800044 	movi	r2,1
   6aab8:	f800283a 	ret
   6aabc:	21c00217 	ldw	r7,8(r4)
   6aac0:	29800217 	ldw	r6,8(r5)
   6aac4:	31c0020e 	bge	r6,r7,6aad0 <__fpcmp_parts_d+0x78>
   6aac8:	183ff61e 	bne	r3,zero,6aaa4 <__fpcmp_parts_d+0x4c>
   6aacc:	f800283a 	ret
   6aad0:	39800a16 	blt	r7,r6,6aafc <__fpcmp_parts_d+0xa4>
   6aad4:	20800417 	ldw	r2,16(r4)
   6aad8:	29800417 	ldw	r6,16(r5)
   6aadc:	21c00317 	ldw	r7,12(r4)
   6aae0:	29000317 	ldw	r4,12(r5)
   6aae4:	30800936 	bltu	r6,r2,6ab0c <__fpcmp_parts_d+0xb4>
   6aae8:	1180011e 	bne	r2,r6,6aaf0 <__fpcmp_parts_d+0x98>
   6aaec:	21c00736 	bltu	r4,r7,6ab0c <__fpcmp_parts_d+0xb4>
   6aaf0:	11800236 	bltu	r2,r6,6aafc <__fpcmp_parts_d+0xa4>
   6aaf4:	3080031e 	bne	r6,r2,6ab04 <__fpcmp_parts_d+0xac>
   6aaf8:	3900022e 	bgeu	r7,r4,6ab04 <__fpcmp_parts_d+0xac>
   6aafc:	183fe926 	beq	r3,zero,6aaa4 <__fpcmp_parts_d+0x4c>
   6ab00:	003fec06 	br	6aab4 <__fpcmp_parts_d+0x5c>
   6ab04:	0005883a 	mov	r2,zero
   6ab08:	f800283a 	ret
   6ab0c:	183fe926 	beq	r3,zero,6aab4 <__fpcmp_parts_d+0x5c>
   6ab10:	003fe406 	br	6aaa4 <__fpcmp_parts_d+0x4c>
   6ab14:	30ffe51e 	bne	r6,r3,6aaac <__fpcmp_parts_d+0x54>
   6ab18:	28c00117 	ldw	r3,4(r5)
   6ab1c:	20800117 	ldw	r2,4(r4)
   6ab20:	1885c83a 	sub	r2,r3,r2
   6ab24:	f800283a 	ret

0006ab28 <__lshrdi3>:
   6ab28:	2005883a 	mov	r2,r4
   6ab2c:	2807883a 	mov	r3,r5
   6ab30:	30000826 	beq	r6,zero,6ab54 <__lshrdi3+0x2c>
   6ab34:	01000804 	movi	r4,32
   6ab38:	2189c83a 	sub	r4,r4,r6
   6ab3c:	0100060e 	bge	zero,r4,6ab58 <__lshrdi3+0x30>
   6ab40:	1184d83a 	srl	r2,r2,r6
   6ab44:	2908983a 	sll	r4,r5,r4
   6ab48:	298cd83a 	srl	r6,r5,r6
   6ab4c:	2084b03a 	or	r2,r4,r2
   6ab50:	3007883a 	mov	r3,r6
   6ab54:	f800283a 	ret
   6ab58:	0105c83a 	sub	r2,zero,r4
   6ab5c:	000d883a 	mov	r6,zero
   6ab60:	2884d83a 	srl	r2,r5,r2
   6ab64:	3007883a 	mov	r3,r6
   6ab68:	003ffa06 	br	6ab54 <__lshrdi3+0x2c>

0006ab6c <__ashldi3>:
   6ab6c:	2005883a 	mov	r2,r4
   6ab70:	2807883a 	mov	r3,r5
   6ab74:	30000826 	beq	r6,zero,6ab98 <__ashldi3+0x2c>
   6ab78:	01000804 	movi	r4,32
   6ab7c:	2189c83a 	sub	r4,r4,r6
   6ab80:	0100060e 	bge	zero,r4,6ab9c <__ashldi3+0x30>
   6ab84:	1108d83a 	srl	r4,r2,r4
   6ab88:	2986983a 	sll	r3,r5,r6
   6ab8c:	118c983a 	sll	r6,r2,r6
   6ab90:	20c6b03a 	or	r3,r4,r3
   6ab94:	3005883a 	mov	r2,r6
   6ab98:	f800283a 	ret
   6ab9c:	0107c83a 	sub	r3,zero,r4
   6aba0:	000d883a 	mov	r6,zero
   6aba4:	10c6983a 	sll	r3,r2,r3
   6aba8:	3005883a 	mov	r2,r6
   6abac:	003ffa06 	br	6ab98 <__ashldi3+0x2c>

0006abb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   6abb0:	defffe04 	addi	sp,sp,-8
   6abb4:	dfc00115 	stw	ra,4(sp)
   6abb8:	df000015 	stw	fp,0(sp)
   6abbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   6abc0:	008001f4 	movhi	r2,7
   6abc4:	10be7a04 	addi	r2,r2,-1560
   6abc8:	10800017 	ldw	r2,0(r2)
   6abcc:	10000526 	beq	r2,zero,6abe4 <alt_get_errno+0x34>
   6abd0:	008001f4 	movhi	r2,7
   6abd4:	10be7a04 	addi	r2,r2,-1560
   6abd8:	10800017 	ldw	r2,0(r2)
   6abdc:	103ee83a 	callr	r2
   6abe0:	00000206 	br	6abec <alt_get_errno+0x3c>
   6abe4:	008001f4 	movhi	r2,7
   6abe8:	10852d04 	addi	r2,r2,5300
}
   6abec:	e037883a 	mov	sp,fp
   6abf0:	dfc00117 	ldw	ra,4(sp)
   6abf4:	df000017 	ldw	fp,0(sp)
   6abf8:	dec00204 	addi	sp,sp,8
   6abfc:	f800283a 	ret

0006ac00 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   6ac00:	defffb04 	addi	sp,sp,-20
   6ac04:	dfc00415 	stw	ra,16(sp)
   6ac08:	df000315 	stw	fp,12(sp)
   6ac0c:	df000304 	addi	fp,sp,12
   6ac10:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   6ac14:	e0bfff17 	ldw	r2,-4(fp)
   6ac18:	10000716 	blt	r2,zero,6ac38 <close+0x38>
   6ac1c:	e13fff17 	ldw	r4,-4(fp)
   6ac20:	01400304 	movi	r5,12
   6ac24:	00614b40 	call	614b4 <__mulsi3>
   6ac28:	00c001f4 	movhi	r3,7
   6ac2c:	18f9f804 	addi	r3,r3,-6176
   6ac30:	10c5883a 	add	r2,r2,r3
   6ac34:	00000106 	br	6ac3c <close+0x3c>
   6ac38:	0005883a 	mov	r2,zero
   6ac3c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   6ac40:	e0bffd17 	ldw	r2,-12(fp)
   6ac44:	10001826 	beq	r2,zero,6aca8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   6ac48:	e0bffd17 	ldw	r2,-12(fp)
   6ac4c:	10800017 	ldw	r2,0(r2)
   6ac50:	10800417 	ldw	r2,16(r2)
   6ac54:	10000626 	beq	r2,zero,6ac70 <close+0x70>
   6ac58:	e0bffd17 	ldw	r2,-12(fp)
   6ac5c:	10800017 	ldw	r2,0(r2)
   6ac60:	10800417 	ldw	r2,16(r2)
   6ac64:	e13ffd17 	ldw	r4,-12(fp)
   6ac68:	103ee83a 	callr	r2
   6ac6c:	00000106 	br	6ac74 <close+0x74>
   6ac70:	0005883a 	mov	r2,zero
   6ac74:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   6ac78:	e13fff17 	ldw	r4,-4(fp)
   6ac7c:	006b2f80 	call	6b2f8 <alt_release_fd>
    if (rval < 0)
   6ac80:	e0bffe17 	ldw	r2,-8(fp)
   6ac84:	1000060e 	bge	r2,zero,6aca0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   6ac88:	006abb00 	call	6abb0 <alt_get_errno>
   6ac8c:	e0fffe17 	ldw	r3,-8(fp)
   6ac90:	00c7c83a 	sub	r3,zero,r3
   6ac94:	10c00015 	stw	r3,0(r2)
      return -1;
   6ac98:	00bfffc4 	movi	r2,-1
   6ac9c:	00000606 	br	6acb8 <close+0xb8>
    }
    return 0;
   6aca0:	0005883a 	mov	r2,zero
   6aca4:	00000406 	br	6acb8 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   6aca8:	006abb00 	call	6abb0 <alt_get_errno>
   6acac:	00c01444 	movi	r3,81
   6acb0:	10c00015 	stw	r3,0(r2)
    return -1;
   6acb4:	00bfffc4 	movi	r2,-1
  }
}
   6acb8:	e037883a 	mov	sp,fp
   6acbc:	dfc00117 	ldw	ra,4(sp)
   6acc0:	df000017 	ldw	fp,0(sp)
   6acc4:	dec00204 	addi	sp,sp,8
   6acc8:	f800283a 	ret

0006accc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   6accc:	defffc04 	addi	sp,sp,-16
   6acd0:	df000315 	stw	fp,12(sp)
   6acd4:	df000304 	addi	fp,sp,12
   6acd8:	e13ffd15 	stw	r4,-12(fp)
   6acdc:	e17ffe15 	stw	r5,-8(fp)
   6ace0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   6ace4:	e0bfff17 	ldw	r2,-4(fp)
}
   6ace8:	e037883a 	mov	sp,fp
   6acec:	df000017 	ldw	fp,0(sp)
   6acf0:	dec00104 	addi	sp,sp,4
   6acf4:	f800283a 	ret

0006acf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   6acf8:	defffe04 	addi	sp,sp,-8
   6acfc:	dfc00115 	stw	ra,4(sp)
   6ad00:	df000015 	stw	fp,0(sp)
   6ad04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   6ad08:	008001f4 	movhi	r2,7
   6ad0c:	10be7a04 	addi	r2,r2,-1560
   6ad10:	10800017 	ldw	r2,0(r2)
   6ad14:	10000526 	beq	r2,zero,6ad2c <alt_get_errno+0x34>
   6ad18:	008001f4 	movhi	r2,7
   6ad1c:	10be7a04 	addi	r2,r2,-1560
   6ad20:	10800017 	ldw	r2,0(r2)
   6ad24:	103ee83a 	callr	r2
   6ad28:	00000206 	br	6ad34 <alt_get_errno+0x3c>
   6ad2c:	008001f4 	movhi	r2,7
   6ad30:	10852d04 	addi	r2,r2,5300
}
   6ad34:	e037883a 	mov	sp,fp
   6ad38:	dfc00117 	ldw	ra,4(sp)
   6ad3c:	df000017 	ldw	fp,0(sp)
   6ad40:	dec00204 	addi	sp,sp,8
   6ad44:	f800283a 	ret

0006ad48 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   6ad48:	defffb04 	addi	sp,sp,-20
   6ad4c:	dfc00415 	stw	ra,16(sp)
   6ad50:	df000315 	stw	fp,12(sp)
   6ad54:	df000304 	addi	fp,sp,12
   6ad58:	e13ffe15 	stw	r4,-8(fp)
   6ad5c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   6ad60:	e0bffe17 	ldw	r2,-8(fp)
   6ad64:	10000716 	blt	r2,zero,6ad84 <fstat+0x3c>
   6ad68:	e13ffe17 	ldw	r4,-8(fp)
   6ad6c:	01400304 	movi	r5,12
   6ad70:	00614b40 	call	614b4 <__mulsi3>
   6ad74:	00c001f4 	movhi	r3,7
   6ad78:	18f9f804 	addi	r3,r3,-6176
   6ad7c:	10c5883a 	add	r2,r2,r3
   6ad80:	00000106 	br	6ad88 <fstat+0x40>
   6ad84:	0005883a 	mov	r2,zero
   6ad88:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   6ad8c:	e0bffd17 	ldw	r2,-12(fp)
   6ad90:	10001026 	beq	r2,zero,6add4 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   6ad94:	e0bffd17 	ldw	r2,-12(fp)
   6ad98:	10800017 	ldw	r2,0(r2)
   6ad9c:	10800817 	ldw	r2,32(r2)
   6ada0:	10000726 	beq	r2,zero,6adc0 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   6ada4:	e0bffd17 	ldw	r2,-12(fp)
   6ada8:	10800017 	ldw	r2,0(r2)
   6adac:	10800817 	ldw	r2,32(r2)
   6adb0:	e13ffd17 	ldw	r4,-12(fp)
   6adb4:	e17fff17 	ldw	r5,-4(fp)
   6adb8:	103ee83a 	callr	r2
   6adbc:	00000906 	br	6ade4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   6adc0:	e0bfff17 	ldw	r2,-4(fp)
   6adc4:	00c80004 	movi	r3,8192
   6adc8:	10c00115 	stw	r3,4(r2)
      return 0;
   6adcc:	0005883a 	mov	r2,zero
   6add0:	00000406 	br	6ade4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   6add4:	006acf80 	call	6acf8 <alt_get_errno>
   6add8:	00c01444 	movi	r3,81
   6addc:	10c00015 	stw	r3,0(r2)
    return -1;
   6ade0:	00bfffc4 	movi	r2,-1
  }
}
   6ade4:	e037883a 	mov	sp,fp
   6ade8:	dfc00117 	ldw	ra,4(sp)
   6adec:	df000017 	ldw	fp,0(sp)
   6adf0:	dec00204 	addi	sp,sp,8
   6adf4:	f800283a 	ret

0006adf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   6adf8:	defffe04 	addi	sp,sp,-8
   6adfc:	dfc00115 	stw	ra,4(sp)
   6ae00:	df000015 	stw	fp,0(sp)
   6ae04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   6ae08:	008001f4 	movhi	r2,7
   6ae0c:	10be7a04 	addi	r2,r2,-1560
   6ae10:	10800017 	ldw	r2,0(r2)
   6ae14:	10000526 	beq	r2,zero,6ae2c <alt_get_errno+0x34>
   6ae18:	008001f4 	movhi	r2,7
   6ae1c:	10be7a04 	addi	r2,r2,-1560
   6ae20:	10800017 	ldw	r2,0(r2)
   6ae24:	103ee83a 	callr	r2
   6ae28:	00000206 	br	6ae34 <alt_get_errno+0x3c>
   6ae2c:	008001f4 	movhi	r2,7
   6ae30:	10852d04 	addi	r2,r2,5300
}
   6ae34:	e037883a 	mov	sp,fp
   6ae38:	dfc00117 	ldw	ra,4(sp)
   6ae3c:	df000017 	ldw	fp,0(sp)
   6ae40:	dec00204 	addi	sp,sp,8
   6ae44:	f800283a 	ret

0006ae48 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   6ae48:	deffed04 	addi	sp,sp,-76
   6ae4c:	dfc01215 	stw	ra,72(sp)
   6ae50:	df001115 	stw	fp,68(sp)
   6ae54:	df001104 	addi	fp,sp,68
   6ae58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   6ae5c:	e0bfff17 	ldw	r2,-4(fp)
   6ae60:	10000716 	blt	r2,zero,6ae80 <isatty+0x38>
   6ae64:	e13fff17 	ldw	r4,-4(fp)
   6ae68:	01400304 	movi	r5,12
   6ae6c:	00614b40 	call	614b4 <__mulsi3>
   6ae70:	00c001f4 	movhi	r3,7
   6ae74:	18f9f804 	addi	r3,r3,-6176
   6ae78:	10c5883a 	add	r2,r2,r3
   6ae7c:	00000106 	br	6ae84 <isatty+0x3c>
   6ae80:	0005883a 	mov	r2,zero
   6ae84:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   6ae88:	e0bfef17 	ldw	r2,-68(fp)
   6ae8c:	10000e26 	beq	r2,zero,6aec8 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   6ae90:	e0bfef17 	ldw	r2,-68(fp)
   6ae94:	10800017 	ldw	r2,0(r2)
   6ae98:	10800817 	ldw	r2,32(r2)
   6ae9c:	1000021e 	bne	r2,zero,6aea8 <isatty+0x60>
    {
      return 1;
   6aea0:	00800044 	movi	r2,1
   6aea4:	00000c06 	br	6aed8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   6aea8:	e0bff004 	addi	r2,fp,-64
   6aeac:	e13fff17 	ldw	r4,-4(fp)
   6aeb0:	100b883a 	mov	r5,r2
   6aeb4:	006ad480 	call	6ad48 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   6aeb8:	e0bff117 	ldw	r2,-60(fp)
   6aebc:	10880020 	cmpeqi	r2,r2,8192
   6aec0:	10803fcc 	andi	r2,r2,255
   6aec4:	00000406 	br	6aed8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   6aec8:	006adf80 	call	6adf8 <alt_get_errno>
   6aecc:	00c01444 	movi	r3,81
   6aed0:	10c00015 	stw	r3,0(r2)
    return 0;
   6aed4:	0005883a 	mov	r2,zero
  }
}
   6aed8:	e037883a 	mov	sp,fp
   6aedc:	dfc00117 	ldw	ra,4(sp)
   6aee0:	df000017 	ldw	fp,0(sp)
   6aee4:	dec00204 	addi	sp,sp,8
   6aee8:	f800283a 	ret

0006aeec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   6aeec:	defffc04 	addi	sp,sp,-16
   6aef0:	df000315 	stw	fp,12(sp)
   6aef4:	df000304 	addi	fp,sp,12
   6aef8:	e13ffd15 	stw	r4,-12(fp)
   6aefc:	e17ffe15 	stw	r5,-8(fp)
   6af00:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   6af04:	e0fffe17 	ldw	r3,-8(fp)
   6af08:	e0bffd17 	ldw	r2,-12(fp)
   6af0c:	18800e26 	beq	r3,r2,6af48 <alt_load_section+0x5c>
  {
    while( to != end )
   6af10:	00000a06 	br	6af3c <alt_load_section+0x50>
    {
      *to++ = *from++;
   6af14:	e0bffd17 	ldw	r2,-12(fp)
   6af18:	10c00017 	ldw	r3,0(r2)
   6af1c:	e0bffe17 	ldw	r2,-8(fp)
   6af20:	10c00015 	stw	r3,0(r2)
   6af24:	e0bffe17 	ldw	r2,-8(fp)
   6af28:	10800104 	addi	r2,r2,4
   6af2c:	e0bffe15 	stw	r2,-8(fp)
   6af30:	e0bffd17 	ldw	r2,-12(fp)
   6af34:	10800104 	addi	r2,r2,4
   6af38:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   6af3c:	e0fffe17 	ldw	r3,-8(fp)
   6af40:	e0bfff17 	ldw	r2,-4(fp)
   6af44:	18bff31e 	bne	r3,r2,6af14 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   6af48:	e037883a 	mov	sp,fp
   6af4c:	df000017 	ldw	fp,0(sp)
   6af50:	dec00104 	addi	sp,sp,4
   6af54:	f800283a 	ret

0006af58 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   6af58:	defffe04 	addi	sp,sp,-8
   6af5c:	dfc00115 	stw	ra,4(sp)
   6af60:	df000015 	stw	fp,0(sp)
   6af64:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   6af68:	010001f4 	movhi	r4,7
   6af6c:	213e7f04 	addi	r4,r4,-1540
   6af70:	014001f4 	movhi	r5,7
   6af74:	2977d904 	addi	r5,r5,-8348
   6af78:	018001f4 	movhi	r6,7
   6af7c:	31be7f04 	addi	r6,r6,-1540
   6af80:	006aeec0 	call	6aeec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   6af84:	010001b4 	movhi	r4,6
   6af88:	21000804 	addi	r4,r4,32
   6af8c:	014001b4 	movhi	r5,6
   6af90:	29400804 	addi	r5,r5,32
   6af94:	018001b4 	movhi	r6,6
   6af98:	31806e04 	addi	r6,r6,440
   6af9c:	006aeec0 	call	6aeec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   6afa0:	010001f4 	movhi	r4,7
   6afa4:	2136af04 	addi	r4,r4,-9540
   6afa8:	014001f4 	movhi	r5,7
   6afac:	2976af04 	addi	r5,r5,-9540
   6afb0:	018001f4 	movhi	r6,7
   6afb4:	31b7d904 	addi	r6,r6,-8348
   6afb8:	006aeec0 	call	6aeec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   6afbc:	006c97c0 	call	6c97c <alt_dcache_flush_all>
  alt_icache_flush_all();
   6afc0:	006cb400 	call	6cb40 <alt_icache_flush_all>
}
   6afc4:	e037883a 	mov	sp,fp
   6afc8:	dfc00117 	ldw	ra,4(sp)
   6afcc:	df000017 	ldw	fp,0(sp)
   6afd0:	dec00204 	addi	sp,sp,8
   6afd4:	f800283a 	ret

0006afd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   6afd8:	defffe04 	addi	sp,sp,-8
   6afdc:	dfc00115 	stw	ra,4(sp)
   6afe0:	df000015 	stw	fp,0(sp)
   6afe4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   6afe8:	008001f4 	movhi	r2,7
   6afec:	10be7a04 	addi	r2,r2,-1560
   6aff0:	10800017 	ldw	r2,0(r2)
   6aff4:	10000526 	beq	r2,zero,6b00c <alt_get_errno+0x34>
   6aff8:	008001f4 	movhi	r2,7
   6affc:	10be7a04 	addi	r2,r2,-1560
   6b000:	10800017 	ldw	r2,0(r2)
   6b004:	103ee83a 	callr	r2
   6b008:	00000206 	br	6b014 <alt_get_errno+0x3c>
   6b00c:	008001f4 	movhi	r2,7
   6b010:	10852d04 	addi	r2,r2,5300
}
   6b014:	e037883a 	mov	sp,fp
   6b018:	dfc00117 	ldw	ra,4(sp)
   6b01c:	df000017 	ldw	fp,0(sp)
   6b020:	dec00204 	addi	sp,sp,8
   6b024:	f800283a 	ret

0006b028 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   6b028:	defff904 	addi	sp,sp,-28
   6b02c:	dfc00615 	stw	ra,24(sp)
   6b030:	df000515 	stw	fp,20(sp)
   6b034:	df000504 	addi	fp,sp,20
   6b038:	e13ffd15 	stw	r4,-12(fp)
   6b03c:	e17ffe15 	stw	r5,-8(fp)
   6b040:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   6b044:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   6b048:	e0bffd17 	ldw	r2,-12(fp)
   6b04c:	10000716 	blt	r2,zero,6b06c <lseek+0x44>
   6b050:	e13ffd17 	ldw	r4,-12(fp)
   6b054:	01400304 	movi	r5,12
   6b058:	00614b40 	call	614b4 <__mulsi3>
   6b05c:	00c001f4 	movhi	r3,7
   6b060:	18f9f804 	addi	r3,r3,-6176
   6b064:	10c5883a 	add	r2,r2,r3
   6b068:	00000106 	br	6b070 <lseek+0x48>
   6b06c:	0005883a 	mov	r2,zero
   6b070:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   6b074:	e0bffc17 	ldw	r2,-16(fp)
   6b078:	10001026 	beq	r2,zero,6b0bc <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   6b07c:	e0bffc17 	ldw	r2,-16(fp)
   6b080:	10800017 	ldw	r2,0(r2)
   6b084:	10800717 	ldw	r2,28(r2)
   6b088:	10000926 	beq	r2,zero,6b0b0 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   6b08c:	e0bffc17 	ldw	r2,-16(fp)
   6b090:	10800017 	ldw	r2,0(r2)
   6b094:	10800717 	ldw	r2,28(r2)
   6b098:	e13ffc17 	ldw	r4,-16(fp)
   6b09c:	e17ffe17 	ldw	r5,-8(fp)
   6b0a0:	e1bfff17 	ldw	r6,-4(fp)
   6b0a4:	103ee83a 	callr	r2
   6b0a8:	e0bffb15 	stw	r2,-20(fp)
   6b0ac:	00000506 	br	6b0c4 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   6b0b0:	00bfde84 	movi	r2,-134
   6b0b4:	e0bffb15 	stw	r2,-20(fp)
   6b0b8:	00000206 	br	6b0c4 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   6b0bc:	00bfebc4 	movi	r2,-81
   6b0c0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   6b0c4:	e0bffb17 	ldw	r2,-20(fp)
   6b0c8:	1000060e 	bge	r2,zero,6b0e4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   6b0cc:	006afd80 	call	6afd8 <alt_get_errno>
   6b0d0:	e0fffb17 	ldw	r3,-20(fp)
   6b0d4:	00c7c83a 	sub	r3,zero,r3
   6b0d8:	10c00015 	stw	r3,0(r2)
    rc = -1;
   6b0dc:	00bfffc4 	movi	r2,-1
   6b0e0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   6b0e4:	e0bffb17 	ldw	r2,-20(fp)
}
   6b0e8:	e037883a 	mov	sp,fp
   6b0ec:	dfc00117 	ldw	ra,4(sp)
   6b0f0:	df000017 	ldw	fp,0(sp)
   6b0f4:	dec00204 	addi	sp,sp,8
   6b0f8:	f800283a 	ret

0006b0fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   6b0fc:	defffd04 	addi	sp,sp,-12
   6b100:	dfc00215 	stw	ra,8(sp)
   6b104:	df000115 	stw	fp,4(sp)
   6b108:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   6b10c:	0009883a 	mov	r4,zero
   6b110:	006b5d00 	call	6b5d0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   6b114:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   6b118:	006b6040 	call	6b604 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   6b11c:	010001f4 	movhi	r4,7
   6b120:	2137d304 	addi	r4,r4,-8372
   6b124:	014001f4 	movhi	r5,7
   6b128:	2977d304 	addi	r5,r5,-8372
   6b12c:	018001f4 	movhi	r6,7
   6b130:	31b7d304 	addi	r6,r6,-8372
   6b134:	006cf180 	call	6cf18 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   6b138:	006ca880 	call	6ca88 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   6b13c:	010001f4 	movhi	r4,7
   6b140:	2132b904 	addi	r4,r4,-13596
   6b144:	006d6e80 	call	6d6e8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   6b148:	d126be17 	ldw	r4,-25864(gp)
   6b14c:	d0e6bf17 	ldw	r3,-25860(gp)
   6b150:	d0a6c017 	ldw	r2,-25856(gp)
   6b154:	180b883a 	mov	r5,r3
   6b158:	100d883a 	mov	r6,r2
   6b15c:	00602280 	call	60228 <main>
   6b160:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   6b164:	01000044 	movi	r4,1
   6b168:	006ac000 	call	6ac00 <close>
  exit (result);
   6b16c:	e13fff17 	ldw	r4,-4(fp)
   6b170:	006d6fc0 	call	6d6fc <exit>

0006b174 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   6b174:	defffe04 	addi	sp,sp,-8
   6b178:	df000115 	stw	fp,4(sp)
   6b17c:	df000104 	addi	fp,sp,4
   6b180:	e13fff15 	stw	r4,-4(fp)
}
   6b184:	e037883a 	mov	sp,fp
   6b188:	df000017 	ldw	fp,0(sp)
   6b18c:	dec00104 	addi	sp,sp,4
   6b190:	f800283a 	ret

0006b194 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   6b194:	defffe04 	addi	sp,sp,-8
   6b198:	df000115 	stw	fp,4(sp)
   6b19c:	df000104 	addi	fp,sp,4
   6b1a0:	e13fff15 	stw	r4,-4(fp)
}
   6b1a4:	e037883a 	mov	sp,fp
   6b1a8:	df000017 	ldw	fp,0(sp)
   6b1ac:	dec00104 	addi	sp,sp,4
   6b1b0:	f800283a 	ret

0006b1b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   6b1b4:	defffe04 	addi	sp,sp,-8
   6b1b8:	dfc00115 	stw	ra,4(sp)
   6b1bc:	df000015 	stw	fp,0(sp)
   6b1c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   6b1c4:	008001f4 	movhi	r2,7
   6b1c8:	10be7a04 	addi	r2,r2,-1560
   6b1cc:	10800017 	ldw	r2,0(r2)
   6b1d0:	10000526 	beq	r2,zero,6b1e8 <alt_get_errno+0x34>
   6b1d4:	008001f4 	movhi	r2,7
   6b1d8:	10be7a04 	addi	r2,r2,-1560
   6b1dc:	10800017 	ldw	r2,0(r2)
   6b1e0:	103ee83a 	callr	r2
   6b1e4:	00000206 	br	6b1f0 <alt_get_errno+0x3c>
   6b1e8:	008001f4 	movhi	r2,7
   6b1ec:	10852d04 	addi	r2,r2,5300
}
   6b1f0:	e037883a 	mov	sp,fp
   6b1f4:	dfc00117 	ldw	ra,4(sp)
   6b1f8:	df000017 	ldw	fp,0(sp)
   6b1fc:	dec00204 	addi	sp,sp,8
   6b200:	f800283a 	ret

0006b204 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   6b204:	defff904 	addi	sp,sp,-28
   6b208:	dfc00615 	stw	ra,24(sp)
   6b20c:	df000515 	stw	fp,20(sp)
   6b210:	df000504 	addi	fp,sp,20
   6b214:	e13ffd15 	stw	r4,-12(fp)
   6b218:	e17ffe15 	stw	r5,-8(fp)
   6b21c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   6b220:	e0bffd17 	ldw	r2,-12(fp)
   6b224:	10000716 	blt	r2,zero,6b244 <read+0x40>
   6b228:	e13ffd17 	ldw	r4,-12(fp)
   6b22c:	01400304 	movi	r5,12
   6b230:	00614b40 	call	614b4 <__mulsi3>
   6b234:	00c001f4 	movhi	r3,7
   6b238:	18f9f804 	addi	r3,r3,-6176
   6b23c:	10c5883a 	add	r2,r2,r3
   6b240:	00000106 	br	6b248 <read+0x44>
   6b244:	0005883a 	mov	r2,zero
   6b248:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   6b24c:	e0bffb17 	ldw	r2,-20(fp)
   6b250:	10002026 	beq	r2,zero,6b2d4 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   6b254:	e0bffb17 	ldw	r2,-20(fp)
   6b258:	10800217 	ldw	r2,8(r2)
   6b25c:	108000cc 	andi	r2,r2,3
   6b260:	10800060 	cmpeqi	r2,r2,1
   6b264:	1000171e 	bne	r2,zero,6b2c4 <read+0xc0>
        (fd->dev->read))
   6b268:	e0bffb17 	ldw	r2,-20(fp)
   6b26c:	10800017 	ldw	r2,0(r2)
   6b270:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   6b274:	10001326 	beq	r2,zero,6b2c4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   6b278:	e0bffb17 	ldw	r2,-20(fp)
   6b27c:	10800017 	ldw	r2,0(r2)
   6b280:	10c00517 	ldw	r3,20(r2)
   6b284:	e0bfff17 	ldw	r2,-4(fp)
   6b288:	e13ffb17 	ldw	r4,-20(fp)
   6b28c:	e17ffe17 	ldw	r5,-8(fp)
   6b290:	100d883a 	mov	r6,r2
   6b294:	183ee83a 	callr	r3
   6b298:	e0bffc15 	stw	r2,-16(fp)
   6b29c:	e0bffc17 	ldw	r2,-16(fp)
   6b2a0:	1000060e 	bge	r2,zero,6b2bc <read+0xb8>
        {
          ALT_ERRNO = -rval;
   6b2a4:	006b1b40 	call	6b1b4 <alt_get_errno>
   6b2a8:	e0fffc17 	ldw	r3,-16(fp)
   6b2ac:	00c7c83a 	sub	r3,zero,r3
   6b2b0:	10c00015 	stw	r3,0(r2)
          return -1;
   6b2b4:	00bfffc4 	movi	r2,-1
   6b2b8:	00000a06 	br	6b2e4 <read+0xe0>
        }
        return rval;
   6b2bc:	e0bffc17 	ldw	r2,-16(fp)
   6b2c0:	00000806 	br	6b2e4 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   6b2c4:	006b1b40 	call	6b1b4 <alt_get_errno>
   6b2c8:	00c00344 	movi	r3,13
   6b2cc:	10c00015 	stw	r3,0(r2)
   6b2d0:	00000306 	br	6b2e0 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   6b2d4:	006b1b40 	call	6b1b4 <alt_get_errno>
   6b2d8:	00c01444 	movi	r3,81
   6b2dc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   6b2e0:	00bfffc4 	movi	r2,-1
}
   6b2e4:	e037883a 	mov	sp,fp
   6b2e8:	dfc00117 	ldw	ra,4(sp)
   6b2ec:	df000017 	ldw	fp,0(sp)
   6b2f0:	dec00204 	addi	sp,sp,8
   6b2f4:	f800283a 	ret

0006b2f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   6b2f8:	defffc04 	addi	sp,sp,-16
   6b2fc:	dfc00315 	stw	ra,12(sp)
   6b300:	df000215 	stw	fp,8(sp)
   6b304:	dc000115 	stw	r16,4(sp)
   6b308:	df000104 	addi	fp,sp,4
   6b30c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   6b310:	e0bfff17 	ldw	r2,-4(fp)
   6b314:	108000d0 	cmplti	r2,r2,3
   6b318:	1000111e 	bne	r2,zero,6b360 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   6b31c:	040001f4 	movhi	r16,7
   6b320:	8439f804 	addi	r16,r16,-6176
   6b324:	e0bfff17 	ldw	r2,-4(fp)
   6b328:	1009883a 	mov	r4,r2
   6b32c:	01400304 	movi	r5,12
   6b330:	00614b40 	call	614b4 <__mulsi3>
   6b334:	8085883a 	add	r2,r16,r2
   6b338:	10800204 	addi	r2,r2,8
   6b33c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   6b340:	040001f4 	movhi	r16,7
   6b344:	8439f804 	addi	r16,r16,-6176
   6b348:	e0bfff17 	ldw	r2,-4(fp)
   6b34c:	1009883a 	mov	r4,r2
   6b350:	01400304 	movi	r5,12
   6b354:	00614b40 	call	614b4 <__mulsi3>
   6b358:	8085883a 	add	r2,r16,r2
   6b35c:	10000015 	stw	zero,0(r2)
  }
}
   6b360:	e037883a 	mov	sp,fp
   6b364:	dfc00217 	ldw	ra,8(sp)
   6b368:	df000117 	ldw	fp,4(sp)
   6b36c:	dc000017 	ldw	r16,0(sp)
   6b370:	dec00304 	addi	sp,sp,12
   6b374:	f800283a 	ret

0006b378 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   6b378:	defff904 	addi	sp,sp,-28
   6b37c:	df000615 	stw	fp,24(sp)
   6b380:	df000604 	addi	fp,sp,24
   6b384:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   6b388:	0005303a 	rdctl	r2,status
   6b38c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   6b390:	e0fffc17 	ldw	r3,-16(fp)
   6b394:	00bfff84 	movi	r2,-2
   6b398:	1884703a 	and	r2,r3,r2
   6b39c:	1001703a 	wrctl	status,r2
  
  return context;
   6b3a0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   6b3a4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   6b3a8:	d0a00b17 	ldw	r2,-32724(gp)
   6b3ac:	10c000c4 	addi	r3,r2,3
   6b3b0:	00bfff04 	movi	r2,-4
   6b3b4:	1884703a 	and	r2,r3,r2
   6b3b8:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   6b3bc:	d0e00b17 	ldw	r3,-32724(gp)
   6b3c0:	e0bfff17 	ldw	r2,-4(fp)
   6b3c4:	1885883a 	add	r2,r3,r2
   6b3c8:	00c00234 	movhi	r3,8
   6b3cc:	18c00004 	addi	r3,r3,0
   6b3d0:	1880062e 	bgeu	r3,r2,6b3ec <sbrk+0x74>
   6b3d4:	e0bffa17 	ldw	r2,-24(fp)
   6b3d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   6b3dc:	e0bffd17 	ldw	r2,-12(fp)
   6b3e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   6b3e4:	00bfffc4 	movi	r2,-1
   6b3e8:	00000b06 	br	6b418 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   6b3ec:	d0a00b17 	ldw	r2,-32724(gp)
   6b3f0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   6b3f4:	d0e00b17 	ldw	r3,-32724(gp)
   6b3f8:	e0bfff17 	ldw	r2,-4(fp)
   6b3fc:	1885883a 	add	r2,r3,r2
   6b400:	d0a00b15 	stw	r2,-32724(gp)
   6b404:	e0bffa17 	ldw	r2,-24(fp)
   6b408:	e0bffe15 	stw	r2,-8(fp)
   6b40c:	e0bffe17 	ldw	r2,-8(fp)
   6b410:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   6b414:	e0bffb17 	ldw	r2,-20(fp)
} 
   6b418:	e037883a 	mov	sp,fp
   6b41c:	df000017 	ldw	fp,0(sp)
   6b420:	dec00104 	addi	sp,sp,4
   6b424:	f800283a 	ret

0006b428 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   6b428:	defffd04 	addi	sp,sp,-12
   6b42c:	dfc00215 	stw	ra,8(sp)
   6b430:	df000115 	stw	fp,4(sp)
   6b434:	df000104 	addi	fp,sp,4
   6b438:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   6b43c:	e13fff17 	ldw	r4,-4(fp)
   6b440:	006c8280 	call	6c828 <alt_busy_sleep>
}
   6b444:	e037883a 	mov	sp,fp
   6b448:	dfc00117 	ldw	ra,4(sp)
   6b44c:	df000017 	ldw	fp,0(sp)
   6b450:	dec00204 	addi	sp,sp,8
   6b454:	f800283a 	ret

0006b458 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   6b458:	defffe04 	addi	sp,sp,-8
   6b45c:	dfc00115 	stw	ra,4(sp)
   6b460:	df000015 	stw	fp,0(sp)
   6b464:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   6b468:	008001f4 	movhi	r2,7
   6b46c:	10be7a04 	addi	r2,r2,-1560
   6b470:	10800017 	ldw	r2,0(r2)
   6b474:	10000526 	beq	r2,zero,6b48c <alt_get_errno+0x34>
   6b478:	008001f4 	movhi	r2,7
   6b47c:	10be7a04 	addi	r2,r2,-1560
   6b480:	10800017 	ldw	r2,0(r2)
   6b484:	103ee83a 	callr	r2
   6b488:	00000206 	br	6b494 <alt_get_errno+0x3c>
   6b48c:	008001f4 	movhi	r2,7
   6b490:	10852d04 	addi	r2,r2,5300
}
   6b494:	e037883a 	mov	sp,fp
   6b498:	dfc00117 	ldw	ra,4(sp)
   6b49c:	df000017 	ldw	fp,0(sp)
   6b4a0:	dec00204 	addi	sp,sp,8
   6b4a4:	f800283a 	ret

0006b4a8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   6b4a8:	defff904 	addi	sp,sp,-28
   6b4ac:	dfc00615 	stw	ra,24(sp)
   6b4b0:	df000515 	stw	fp,20(sp)
   6b4b4:	df000504 	addi	fp,sp,20
   6b4b8:	e13ffd15 	stw	r4,-12(fp)
   6b4bc:	e17ffe15 	stw	r5,-8(fp)
   6b4c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   6b4c4:	e0bffd17 	ldw	r2,-12(fp)
   6b4c8:	10000716 	blt	r2,zero,6b4e8 <write+0x40>
   6b4cc:	e13ffd17 	ldw	r4,-12(fp)
   6b4d0:	01400304 	movi	r5,12
   6b4d4:	00614b40 	call	614b4 <__mulsi3>
   6b4d8:	00c001f4 	movhi	r3,7
   6b4dc:	18f9f804 	addi	r3,r3,-6176
   6b4e0:	10c5883a 	add	r2,r2,r3
   6b4e4:	00000106 	br	6b4ec <write+0x44>
   6b4e8:	0005883a 	mov	r2,zero
   6b4ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   6b4f0:	e0bffb17 	ldw	r2,-20(fp)
   6b4f4:	10001f26 	beq	r2,zero,6b574 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   6b4f8:	e0bffb17 	ldw	r2,-20(fp)
   6b4fc:	10800217 	ldw	r2,8(r2)
   6b500:	108000cc 	andi	r2,r2,3
   6b504:	10001726 	beq	r2,zero,6b564 <write+0xbc>
   6b508:	e0bffb17 	ldw	r2,-20(fp)
   6b50c:	10800017 	ldw	r2,0(r2)
   6b510:	10800617 	ldw	r2,24(r2)
   6b514:	10001326 	beq	r2,zero,6b564 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   6b518:	e0bffb17 	ldw	r2,-20(fp)
   6b51c:	10800017 	ldw	r2,0(r2)
   6b520:	10c00617 	ldw	r3,24(r2)
   6b524:	e0bfff17 	ldw	r2,-4(fp)
   6b528:	e13ffb17 	ldw	r4,-20(fp)
   6b52c:	e17ffe17 	ldw	r5,-8(fp)
   6b530:	100d883a 	mov	r6,r2
   6b534:	183ee83a 	callr	r3
   6b538:	e0bffc15 	stw	r2,-16(fp)
   6b53c:	e0bffc17 	ldw	r2,-16(fp)
   6b540:	1000060e 	bge	r2,zero,6b55c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   6b544:	006b4580 	call	6b458 <alt_get_errno>
   6b548:	e0fffc17 	ldw	r3,-16(fp)
   6b54c:	00c7c83a 	sub	r3,zero,r3
   6b550:	10c00015 	stw	r3,0(r2)
        return -1;
   6b554:	00bfffc4 	movi	r2,-1
   6b558:	00000a06 	br	6b584 <write+0xdc>
      }
      return rval;
   6b55c:	e0bffc17 	ldw	r2,-16(fp)
   6b560:	00000806 	br	6b584 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   6b564:	006b4580 	call	6b458 <alt_get_errno>
   6b568:	00c00344 	movi	r3,13
   6b56c:	10c00015 	stw	r3,0(r2)
   6b570:	00000306 	br	6b580 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   6b574:	006b4580 	call	6b458 <alt_get_errno>
   6b578:	00c01444 	movi	r3,81
   6b57c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   6b580:	00bfffc4 	movi	r2,-1
}
   6b584:	e037883a 	mov	sp,fp
   6b588:	dfc00117 	ldw	ra,4(sp)
   6b58c:	df000017 	ldw	fp,0(sp)
   6b590:	dec00204 	addi	sp,sp,8
   6b594:	f800283a 	ret

0006b598 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   6b598:	defffd04 	addi	sp,sp,-12
   6b59c:	dfc00215 	stw	ra,8(sp)
   6b5a0:	df000115 	stw	fp,4(sp)
   6b5a4:	df000104 	addi	fp,sp,4
   6b5a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   6b5ac:	e13fff17 	ldw	r4,-4(fp)
   6b5b0:	014001f4 	movhi	r5,7
   6b5b4:	297e7704 	addi	r5,r5,-1572
   6b5b8:	006c9e80 	call	6c9e8 <alt_dev_llist_insert>
}
   6b5bc:	e037883a 	mov	sp,fp
   6b5c0:	dfc00117 	ldw	ra,4(sp)
   6b5c4:	df000017 	ldw	fp,0(sp)
   6b5c8:	dec00204 	addi	sp,sp,8
   6b5cc:	f800283a 	ret

0006b5d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   6b5d0:	defffd04 	addi	sp,sp,-12
   6b5d4:	dfc00215 	stw	ra,8(sp)
   6b5d8:	df000115 	stw	fp,4(sp)
   6b5dc:	df000104 	addi	fp,sp,4
   6b5e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_D, cpu_D);
   6b5e4:	006d3c40 	call	6d3c4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   6b5e8:	00800044 	movi	r2,1
   6b5ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   6b5f0:	e037883a 	mov	sp,fp
   6b5f4:	dfc00117 	ldw	ra,4(sp)
   6b5f8:	df000017 	ldw	fp,0(sp)
   6b5fc:	dec00204 	addi	sp,sp,8
   6b600:	f800283a 	ret

0006b604 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   6b604:	defffe04 	addi	sp,sp,-8
   6b608:	dfc00115 	stw	ra,4(sp)
   6b60c:	df000015 	stw	fp,0(sp)
   6b610:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGHTIMER_D, highTimer_D);
   6b614:	008001f4 	movhi	r2,7
   6b618:	10853104 	addi	r2,r2,5316
   6b61c:	00c20074 	movhi	r3,2049
   6b620:	18c42804 	addi	r3,r3,4256
   6b624:	10c00015 	stw	r3,0(r2)
   6b628:	008001f4 	movhi	r2,7
   6b62c:	10853204 	addi	r2,r2,5320
   6b630:	00c17db4 	movhi	r3,1526
   6b634:	18f84004 	addi	r3,r3,-7936
   6b638:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_D, timer_D);
   6b63c:	01020074 	movhi	r4,2049
   6b640:	21041804 	addi	r4,r4,4192
   6b644:	000b883a 	mov	r5,zero
   6b648:	000d883a 	mov	r6,zero
   6b64c:	01c0fa04 	movi	r7,1000
   6b650:	006c6600 	call	6c660 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_AD, fifo_AD);
   6b654:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_CD, fifo_CD);
   6b658:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO_DE, fifo_DE);
   6b65c:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_D, jtag_D);
   6b660:	010001f4 	movhi	r4,7
   6b664:	213a6204 	addi	r4,r4,-5752
   6b668:	000b883a 	mov	r5,zero
   6b66c:	01800084 	movi	r6,2
   6b670:	006bcec0 	call	6bcec <altera_avalon_jtag_uart_init>
   6b674:	010001f4 	movhi	r4,7
   6b678:	213a5804 	addi	r4,r4,-5792
   6b67c:	006b5980 	call	6b598 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_D, sysid_D);
   6b680:	0001883a 	nop
}
   6b684:	e037883a 	mov	sp,fp
   6b688:	dfc00117 	ldw	ra,4(sp)
   6b68c:	df000017 	ldw	fp,0(sp)
   6b690:	dec00204 	addi	sp,sp,8
   6b694:	f800283a 	ret

0006b698 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   6b698:	defffa04 	addi	sp,sp,-24
   6b69c:	dfc00515 	stw	ra,20(sp)
   6b6a0:	df000415 	stw	fp,16(sp)
   6b6a4:	df000404 	addi	fp,sp,16
   6b6a8:	e13ffc15 	stw	r4,-16(fp)
   6b6ac:	e17ffd15 	stw	r5,-12(fp)
   6b6b0:	e1bffe15 	stw	r6,-8(fp)
   6b6b4:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   6b6b8:	e13ffc17 	ldw	r4,-16(fp)
   6b6bc:	01400fc4 	movi	r5,63
   6b6c0:	006b8640 	call	6b864 <altera_avalon_fifo_clear_event>
   6b6c4:	10000226 	beq	r2,zero,6b6d0 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   6b6c8:	00bfffc4 	movi	r2,-1
   6b6cc:	00001306 	br	6b71c <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   6b6d0:	e13ffc17 	ldw	r4,-16(fp)
   6b6d4:	e17ffd17 	ldw	r5,-12(fp)
   6b6d8:	006b8c00 	call	6b8c0 <altera_avalon_fifo_write_ienable>
   6b6dc:	10000226 	beq	r2,zero,6b6e8 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   6b6e0:	00bfff84 	movi	r2,-2
   6b6e4:	00000d06 	br	6b71c <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   6b6e8:	e13ffc17 	ldw	r4,-16(fp)
   6b6ec:	e17fff17 	ldw	r5,-4(fp)
   6b6f0:	006b9180 	call	6b918 <altera_avalon_fifo_write_almostfull>
   6b6f4:	10000226 	beq	r2,zero,6b700 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   6b6f8:	00bfff44 	movi	r2,-3
   6b6fc:	00000706 	br	6b71c <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   6b700:	e13ffc17 	ldw	r4,-16(fp)
   6b704:	e17ffe17 	ldw	r5,-8(fp)
   6b708:	006b9700 	call	6b970 <altera_avalon_fifo_write_almostempty>
   6b70c:	10000226 	beq	r2,zero,6b718 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   6b710:	00bfff44 	movi	r2,-3
   6b714:	00000106 	br	6b71c <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   6b718:	0005883a 	mov	r2,zero
}
   6b71c:	e037883a 	mov	sp,fp
   6b720:	dfc00117 	ldw	ra,4(sp)
   6b724:	df000017 	ldw	fp,0(sp)
   6b728:	dec00204 	addi	sp,sp,8
   6b72c:	f800283a 	ret

0006b730 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   6b730:	defffd04 	addi	sp,sp,-12
   6b734:	df000215 	stw	fp,8(sp)
   6b738:	df000204 	addi	fp,sp,8
   6b73c:	e13ffe15 	stw	r4,-8(fp)
   6b740:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   6b744:	e0bffe17 	ldw	r2,-8(fp)
   6b748:	10800104 	addi	r2,r2,4
   6b74c:	10800037 	ldwio	r2,0(r2)
   6b750:	1007883a 	mov	r3,r2
   6b754:	e0bfff17 	ldw	r2,-4(fp)
   6b758:	1884703a 	and	r2,r3,r2
}
   6b75c:	e037883a 	mov	sp,fp
   6b760:	df000017 	ldw	fp,0(sp)
   6b764:	dec00104 	addi	sp,sp,4
   6b768:	f800283a 	ret

0006b76c <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   6b76c:	defffd04 	addi	sp,sp,-12
   6b770:	df000215 	stw	fp,8(sp)
   6b774:	df000204 	addi	fp,sp,8
   6b778:	e13ffe15 	stw	r4,-8(fp)
   6b77c:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   6b780:	e0bffe17 	ldw	r2,-8(fp)
   6b784:	10800304 	addi	r2,r2,12
   6b788:	10800037 	ldwio	r2,0(r2)
   6b78c:	1007883a 	mov	r3,r2
   6b790:	e0bfff17 	ldw	r2,-4(fp)
   6b794:	1884703a 	and	r2,r3,r2
}
   6b798:	e037883a 	mov	sp,fp
   6b79c:	df000017 	ldw	fp,0(sp)
   6b7a0:	dec00104 	addi	sp,sp,4
   6b7a4:	f800283a 	ret

0006b7a8 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   6b7a8:	defffe04 	addi	sp,sp,-8
   6b7ac:	df000115 	stw	fp,4(sp)
   6b7b0:	df000104 	addi	fp,sp,4
   6b7b4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   6b7b8:	e0bfff17 	ldw	r2,-4(fp)
   6b7bc:	10800404 	addi	r2,r2,16
   6b7c0:	10800037 	ldwio	r2,0(r2)
}
   6b7c4:	e037883a 	mov	sp,fp
   6b7c8:	df000017 	ldw	fp,0(sp)
   6b7cc:	dec00104 	addi	sp,sp,4
   6b7d0:	f800283a 	ret

0006b7d4 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   6b7d4:	defffe04 	addi	sp,sp,-8
   6b7d8:	df000115 	stw	fp,4(sp)
   6b7dc:	df000104 	addi	fp,sp,4
   6b7e0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   6b7e4:	e0bfff17 	ldw	r2,-4(fp)
   6b7e8:	10800504 	addi	r2,r2,20
   6b7ec:	10800037 	ldwio	r2,0(r2)
}
   6b7f0:	e037883a 	mov	sp,fp
   6b7f4:	df000017 	ldw	fp,0(sp)
   6b7f8:	dec00104 	addi	sp,sp,4
   6b7fc:	f800283a 	ret

0006b800 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   6b800:	defffd04 	addi	sp,sp,-12
   6b804:	df000215 	stw	fp,8(sp)
   6b808:	df000204 	addi	fp,sp,8
   6b80c:	e13ffe15 	stw	r4,-8(fp)
   6b810:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   6b814:	e0bffe17 	ldw	r2,-8(fp)
   6b818:	10800204 	addi	r2,r2,8
   6b81c:	10800037 	ldwio	r2,0(r2)
   6b820:	1007883a 	mov	r3,r2
   6b824:	e0bfff17 	ldw	r2,-4(fp)
   6b828:	1884703a 	and	r2,r3,r2
}
   6b82c:	e037883a 	mov	sp,fp
   6b830:	df000017 	ldw	fp,0(sp)
   6b834:	dec00104 	addi	sp,sp,4
   6b838:	f800283a 	ret

0006b83c <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   6b83c:	defffe04 	addi	sp,sp,-8
   6b840:	df000115 	stw	fp,4(sp)
   6b844:	df000104 	addi	fp,sp,4
   6b848:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   6b84c:	e0bfff17 	ldw	r2,-4(fp)
   6b850:	10800037 	ldwio	r2,0(r2)
}
   6b854:	e037883a 	mov	sp,fp
   6b858:	df000017 	ldw	fp,0(sp)
   6b85c:	dec00104 	addi	sp,sp,4
   6b860:	f800283a 	ret

0006b864 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   6b864:	defffd04 	addi	sp,sp,-12
   6b868:	df000215 	stw	fp,8(sp)
   6b86c:	df000204 	addi	fp,sp,8
   6b870:	e13ffe15 	stw	r4,-8(fp)
   6b874:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   6b878:	e0bffe17 	ldw	r2,-8(fp)
   6b87c:	10800204 	addi	r2,r2,8
   6b880:	e0ffff17 	ldw	r3,-4(fp)
   6b884:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   6b888:	e0bffe17 	ldw	r2,-8(fp)
   6b88c:	10800204 	addi	r2,r2,8
   6b890:	10800037 	ldwio	r2,0(r2)
   6b894:	1007883a 	mov	r3,r2
   6b898:	e0bfff17 	ldw	r2,-4(fp)
   6b89c:	1884703a 	and	r2,r3,r2
   6b8a0:	1000021e 	bne	r2,zero,6b8ac <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   6b8a4:	0005883a 	mov	r2,zero
   6b8a8:	00000106 	br	6b8b0 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   6b8ac:	00bfffc4 	movi	r2,-1
}
   6b8b0:	e037883a 	mov	sp,fp
   6b8b4:	df000017 	ldw	fp,0(sp)
   6b8b8:	dec00104 	addi	sp,sp,4
   6b8bc:	f800283a 	ret

0006b8c0 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   6b8c0:	defffd04 	addi	sp,sp,-12
   6b8c4:	df000215 	stw	fp,8(sp)
   6b8c8:	df000204 	addi	fp,sp,8
   6b8cc:	e13ffe15 	stw	r4,-8(fp)
   6b8d0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   6b8d4:	e0bffe17 	ldw	r2,-8(fp)
   6b8d8:	10800304 	addi	r2,r2,12
   6b8dc:	e0ffff17 	ldw	r3,-4(fp)
   6b8e0:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   6b8e4:	e0bffe17 	ldw	r2,-8(fp)
   6b8e8:	10800304 	addi	r2,r2,12
   6b8ec:	10800037 	ldwio	r2,0(r2)
   6b8f0:	1007883a 	mov	r3,r2
   6b8f4:	e0bfff17 	ldw	r2,-4(fp)
   6b8f8:	1880021e 	bne	r3,r2,6b904 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   6b8fc:	0005883a 	mov	r2,zero
   6b900:	00000106 	br	6b908 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   6b904:	00bfff84 	movi	r2,-2
}
   6b908:	e037883a 	mov	sp,fp
   6b90c:	df000017 	ldw	fp,0(sp)
   6b910:	dec00104 	addi	sp,sp,4
   6b914:	f800283a 	ret

0006b918 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   6b918:	defffd04 	addi	sp,sp,-12
   6b91c:	df000215 	stw	fp,8(sp)
   6b920:	df000204 	addi	fp,sp,8
   6b924:	e13ffe15 	stw	r4,-8(fp)
   6b928:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   6b92c:	e0bffe17 	ldw	r2,-8(fp)
   6b930:	10800404 	addi	r2,r2,16
   6b934:	e0ffff17 	ldw	r3,-4(fp)
   6b938:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   6b93c:	e0bffe17 	ldw	r2,-8(fp)
   6b940:	10800404 	addi	r2,r2,16
   6b944:	10800037 	ldwio	r2,0(r2)
   6b948:	1007883a 	mov	r3,r2
   6b94c:	e0bfff17 	ldw	r2,-4(fp)
   6b950:	1880021e 	bne	r3,r2,6b95c <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   6b954:	0005883a 	mov	r2,zero
   6b958:	00000106 	br	6b960 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   6b95c:	00bfff44 	movi	r2,-3
}
   6b960:	e037883a 	mov	sp,fp
   6b964:	df000017 	ldw	fp,0(sp)
   6b968:	dec00104 	addi	sp,sp,4
   6b96c:	f800283a 	ret

0006b970 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   6b970:	defffd04 	addi	sp,sp,-12
   6b974:	df000215 	stw	fp,8(sp)
   6b978:	df000204 	addi	fp,sp,8
   6b97c:	e13ffe15 	stw	r4,-8(fp)
   6b980:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   6b984:	e0bffe17 	ldw	r2,-8(fp)
   6b988:	10800504 	addi	r2,r2,20
   6b98c:	e0ffff17 	ldw	r3,-4(fp)
   6b990:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   6b994:	e0bffe17 	ldw	r2,-8(fp)
   6b998:	10800504 	addi	r2,r2,20
   6b99c:	10800037 	ldwio	r2,0(r2)
   6b9a0:	1007883a 	mov	r3,r2
   6b9a4:	e0bfff17 	ldw	r2,-4(fp)
   6b9a8:	1880021e 	bne	r3,r2,6b9b4 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   6b9ac:	0005883a 	mov	r2,zero
   6b9b0:	00000106 	br	6b9b8 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   6b9b4:	00bfff44 	movi	r2,-3
}
   6b9b8:	e037883a 	mov	sp,fp
   6b9bc:	df000017 	ldw	fp,0(sp)
   6b9c0:	dec00104 	addi	sp,sp,4
   6b9c4:	f800283a 	ret

0006b9c8 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   6b9c8:	defffb04 	addi	sp,sp,-20
   6b9cc:	dfc00415 	stw	ra,16(sp)
   6b9d0:	df000315 	stw	fp,12(sp)
   6b9d4:	df000304 	addi	fp,sp,12
   6b9d8:	e13ffd15 	stw	r4,-12(fp)
   6b9dc:	e17ffe15 	stw	r5,-8(fp)
   6b9e0:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   6b9e4:	e13ffe17 	ldw	r4,-8(fp)
   6b9e8:	01400044 	movi	r5,1
   6b9ec:	006b7300 	call	6b730 <altera_avalon_fifo_read_status>
   6b9f0:	1000051e 	bne	r2,zero,6ba08 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   6b9f4:	e0bffd17 	ldw	r2,-12(fp)
   6b9f8:	e0ffff17 	ldw	r3,-4(fp)
   6b9fc:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   6ba00:	0005883a 	mov	r2,zero
   6ba04:	00000106 	br	6ba0c <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   6ba08:	00bfff04 	movi	r2,-4
    }
}
   6ba0c:	e037883a 	mov	sp,fp
   6ba10:	dfc00117 	ldw	ra,4(sp)
   6ba14:	df000017 	ldw	fp,0(sp)
   6ba18:	dec00204 	addi	sp,sp,8
   6ba1c:	f800283a 	ret

0006ba20 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   6ba20:	defffa04 	addi	sp,sp,-24
   6ba24:	dfc00515 	stw	ra,20(sp)
   6ba28:	df000415 	stw	fp,16(sp)
   6ba2c:	df000404 	addi	fp,sp,16
   6ba30:	e13ffd15 	stw	r4,-12(fp)
   6ba34:	e17ffe15 	stw	r5,-8(fp)
   6ba38:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   6ba3c:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   6ba40:	e0bfff17 	ldw	r2,-4(fp)
   6ba44:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   6ba48:	e13ffe17 	ldw	r4,-8(fp)
   6ba4c:	01400084 	movi	r5,2
   6ba50:	006b7300 	call	6b730 <altera_avalon_fifo_read_status>
   6ba54:	1000071e 	bne	r2,zero,6ba74 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   6ba58:	e13ffe17 	ldw	r4,-8(fp)
   6ba5c:	006b83c0 	call	6b83c <altera_avalon_fifo_read_level>
   6ba60:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   6ba64:	e0bffd17 	ldw	r2,-12(fp)
   6ba68:	10c00037 	ldwio	r3,0(r2)
   6ba6c:	e0bfff17 	ldw	r2,-4(fp)
   6ba70:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   6ba74:	e0bffc17 	ldw	r2,-16(fp)
}
   6ba78:	e037883a 	mov	sp,fp
   6ba7c:	dfc00117 	ldw	ra,4(sp)
   6ba80:	df000017 	ldw	fp,0(sp)
   6ba84:	dec00204 	addi	sp,sp,8
   6ba88:	f800283a 	ret

0006ba8c <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   6ba8c:	defffc04 	addi	sp,sp,-16
   6ba90:	dfc00315 	stw	ra,12(sp)
   6ba94:	df000215 	stw	fp,8(sp)
   6ba98:	df000204 	addi	fp,sp,8
   6ba9c:	e13ffe15 	stw	r4,-8(fp)
   6baa0:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   6baa4:	e13fff17 	ldw	r4,-4(fp)
   6baa8:	01400084 	movi	r5,2
   6baac:	006b7300 	call	6b730 <altera_avalon_fifo_read_status>
   6bab0:	1000031e 	bne	r2,zero,6bac0 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   6bab4:	e0bffe17 	ldw	r2,-8(fp)
   6bab8:	10800037 	ldwio	r2,0(r2)
   6babc:	00000106 	br	6bac4 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   6bac0:	0005883a 	mov	r2,zero
}
   6bac4:	e037883a 	mov	sp,fp
   6bac8:	dfc00117 	ldw	ra,4(sp)
   6bacc:	df000017 	ldw	fp,0(sp)
   6bad0:	dec00204 	addi	sp,sp,8
   6bad4:	f800283a 	ret

0006bad8 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   6bad8:	defffb04 	addi	sp,sp,-20
   6badc:	dfc00415 	stw	ra,16(sp)
   6bae0:	df000315 	stw	fp,12(sp)
   6bae4:	df000304 	addi	fp,sp,12
   6bae8:	e13ffd15 	stw	r4,-12(fp)
   6baec:	e17ffe15 	stw	r5,-8(fp)
   6baf0:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   6baf4:	e13ffe17 	ldw	r4,-8(fp)
   6baf8:	01400044 	movi	r5,1
   6bafc:	006b7300 	call	6b730 <altera_avalon_fifo_read_status>
   6bb00:	1000061e 	bne	r2,zero,6bb1c <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   6bb04:	e0bffd17 	ldw	r2,-12(fp)
   6bb08:	10800104 	addi	r2,r2,4
   6bb0c:	e0ffff17 	ldw	r3,-4(fp)
   6bb10:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   6bb14:	0005883a 	mov	r2,zero
   6bb18:	00000106 	br	6bb20 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   6bb1c:	00bfff04 	movi	r2,-4
    }
}
   6bb20:	e037883a 	mov	sp,fp
   6bb24:	dfc00117 	ldw	ra,4(sp)
   6bb28:	df000017 	ldw	fp,0(sp)
   6bb2c:	dec00204 	addi	sp,sp,8
   6bb30:	f800283a 	ret

0006bb34 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   6bb34:	defffe04 	addi	sp,sp,-8
   6bb38:	df000115 	stw	fp,4(sp)
   6bb3c:	df000104 	addi	fp,sp,4
   6bb40:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   6bb44:	e0bfff17 	ldw	r2,-4(fp)
   6bb48:	10800104 	addi	r2,r2,4
   6bb4c:	10800037 	ldwio	r2,0(r2)
}
   6bb50:	e037883a 	mov	sp,fp
   6bb54:	df000017 	ldw	fp,0(sp)
   6bb58:	dec00104 	addi	sp,sp,4
   6bb5c:	f800283a 	ret

0006bb60 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   6bb60:	defffe04 	addi	sp,sp,-8
   6bb64:	df000115 	stw	fp,4(sp)
   6bb68:	df000104 	addi	fp,sp,4
   6bb6c:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   6bb70:	e0bfff17 	ldw	r2,-4(fp)
   6bb74:	10800037 	ldwio	r2,0(r2)
}
   6bb78:	e037883a 	mov	sp,fp
   6bb7c:	df000017 	ldw	fp,0(sp)
   6bb80:	dec00104 	addi	sp,sp,4
   6bb84:	f800283a 	ret

0006bb88 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   6bb88:	defffa04 	addi	sp,sp,-24
   6bb8c:	dfc00515 	stw	ra,20(sp)
   6bb90:	df000415 	stw	fp,16(sp)
   6bb94:	df000404 	addi	fp,sp,16
   6bb98:	e13ffd15 	stw	r4,-12(fp)
   6bb9c:	e17ffe15 	stw	r5,-8(fp)
   6bba0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   6bba4:	e0bffd17 	ldw	r2,-12(fp)
   6bba8:	10800017 	ldw	r2,0(r2)
   6bbac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   6bbb0:	e0bffc17 	ldw	r2,-16(fp)
   6bbb4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   6bbb8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   6bbbc:	10800217 	ldw	r2,8(r2)
   6bbc0:	1809883a 	mov	r4,r3
   6bbc4:	e17ffe17 	ldw	r5,-8(fp)
   6bbc8:	e1bfff17 	ldw	r6,-4(fp)
   6bbcc:	100f883a 	mov	r7,r2
   6bbd0:	006c1b00 	call	6c1b0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   6bbd4:	e037883a 	mov	sp,fp
   6bbd8:	dfc00117 	ldw	ra,4(sp)
   6bbdc:	df000017 	ldw	fp,0(sp)
   6bbe0:	dec00204 	addi	sp,sp,8
   6bbe4:	f800283a 	ret

0006bbe8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   6bbe8:	defffa04 	addi	sp,sp,-24
   6bbec:	dfc00515 	stw	ra,20(sp)
   6bbf0:	df000415 	stw	fp,16(sp)
   6bbf4:	df000404 	addi	fp,sp,16
   6bbf8:	e13ffd15 	stw	r4,-12(fp)
   6bbfc:	e17ffe15 	stw	r5,-8(fp)
   6bc00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   6bc04:	e0bffd17 	ldw	r2,-12(fp)
   6bc08:	10800017 	ldw	r2,0(r2)
   6bc0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   6bc10:	e0bffc17 	ldw	r2,-16(fp)
   6bc14:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   6bc18:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   6bc1c:	10800217 	ldw	r2,8(r2)
   6bc20:	1809883a 	mov	r4,r3
   6bc24:	e17ffe17 	ldw	r5,-8(fp)
   6bc28:	e1bfff17 	ldw	r6,-4(fp)
   6bc2c:	100f883a 	mov	r7,r2
   6bc30:	006c3c80 	call	6c3c8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   6bc34:	e037883a 	mov	sp,fp
   6bc38:	dfc00117 	ldw	ra,4(sp)
   6bc3c:	df000017 	ldw	fp,0(sp)
   6bc40:	dec00204 	addi	sp,sp,8
   6bc44:	f800283a 	ret

0006bc48 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   6bc48:	defffc04 	addi	sp,sp,-16
   6bc4c:	dfc00315 	stw	ra,12(sp)
   6bc50:	df000215 	stw	fp,8(sp)
   6bc54:	df000204 	addi	fp,sp,8
   6bc58:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   6bc5c:	e0bfff17 	ldw	r2,-4(fp)
   6bc60:	10800017 	ldw	r2,0(r2)
   6bc64:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   6bc68:	e0bffe17 	ldw	r2,-8(fp)
   6bc6c:	10c00a04 	addi	r3,r2,40
   6bc70:	e0bfff17 	ldw	r2,-4(fp)
   6bc74:	10800217 	ldw	r2,8(r2)
   6bc78:	1809883a 	mov	r4,r3
   6bc7c:	100b883a 	mov	r5,r2
   6bc80:	006c0540 	call	6c054 <altera_avalon_jtag_uart_close>
}
   6bc84:	e037883a 	mov	sp,fp
   6bc88:	dfc00117 	ldw	ra,4(sp)
   6bc8c:	df000017 	ldw	fp,0(sp)
   6bc90:	dec00204 	addi	sp,sp,8
   6bc94:	f800283a 	ret

0006bc98 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   6bc98:	defffa04 	addi	sp,sp,-24
   6bc9c:	dfc00515 	stw	ra,20(sp)
   6bca0:	df000415 	stw	fp,16(sp)
   6bca4:	df000404 	addi	fp,sp,16
   6bca8:	e13ffd15 	stw	r4,-12(fp)
   6bcac:	e17ffe15 	stw	r5,-8(fp)
   6bcb0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   6bcb4:	e0bffd17 	ldw	r2,-12(fp)
   6bcb8:	10800017 	ldw	r2,0(r2)
   6bcbc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   6bcc0:	e0bffc17 	ldw	r2,-16(fp)
   6bcc4:	10800a04 	addi	r2,r2,40
   6bcc8:	1009883a 	mov	r4,r2
   6bccc:	e17ffe17 	ldw	r5,-8(fp)
   6bcd0:	e1bfff17 	ldw	r6,-4(fp)
   6bcd4:	006c0bc0 	call	6c0bc <altera_avalon_jtag_uart_ioctl>
}
   6bcd8:	e037883a 	mov	sp,fp
   6bcdc:	dfc00117 	ldw	ra,4(sp)
   6bce0:	df000017 	ldw	fp,0(sp)
   6bce4:	dec00204 	addi	sp,sp,8
   6bce8:	f800283a 	ret

0006bcec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   6bcec:	defffa04 	addi	sp,sp,-24
   6bcf0:	dfc00515 	stw	ra,20(sp)
   6bcf4:	df000415 	stw	fp,16(sp)
   6bcf8:	df000404 	addi	fp,sp,16
   6bcfc:	e13ffd15 	stw	r4,-12(fp)
   6bd00:	e17ffe15 	stw	r5,-8(fp)
   6bd04:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   6bd08:	e0bffd17 	ldw	r2,-12(fp)
   6bd0c:	00c00044 	movi	r3,1
   6bd10:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   6bd14:	e0bffd17 	ldw	r2,-12(fp)
   6bd18:	10800017 	ldw	r2,0(r2)
   6bd1c:	10800104 	addi	r2,r2,4
   6bd20:	e0fffd17 	ldw	r3,-12(fp)
   6bd24:	18c00817 	ldw	r3,32(r3)
   6bd28:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   6bd2c:	e0fffe17 	ldw	r3,-8(fp)
   6bd30:	e0bfff17 	ldw	r2,-4(fp)
   6bd34:	d8000015 	stw	zero,0(sp)
   6bd38:	1809883a 	mov	r4,r3
   6bd3c:	100b883a 	mov	r5,r2
   6bd40:	018001f4 	movhi	r6,7
   6bd44:	31af6b04 	addi	r6,r6,-16980
   6bd48:	e1fffd17 	ldw	r7,-12(fp)
   6bd4c:	006cb700 	call	6cb70 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   6bd50:	e0bffd17 	ldw	r2,-12(fp)
   6bd54:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   6bd58:	e0bffd17 	ldw	r2,-12(fp)
   6bd5c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   6bd60:	008001f4 	movhi	r2,7
   6bd64:	10853404 	addi	r2,r2,5328
   6bd68:	10800017 	ldw	r2,0(r2)
   6bd6c:	1809883a 	mov	r4,r3
   6bd70:	100b883a 	mov	r5,r2
   6bd74:	018001f4 	movhi	r6,7
   6bd78:	31afec04 	addi	r6,r6,-16464
   6bd7c:	e1fffd17 	ldw	r7,-12(fp)
   6bd80:	006c6e80 	call	6c6e8 <alt_alarm_start>
   6bd84:	1000040e 	bge	r2,zero,6bd98 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   6bd88:	e0bffd17 	ldw	r2,-12(fp)
   6bd8c:	00e00034 	movhi	r3,32768
   6bd90:	18ffffc4 	addi	r3,r3,-1
   6bd94:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   6bd98:	e037883a 	mov	sp,fp
   6bd9c:	dfc00117 	ldw	ra,4(sp)
   6bda0:	df000017 	ldw	fp,0(sp)
   6bda4:	dec00204 	addi	sp,sp,8
   6bda8:	f800283a 	ret

0006bdac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   6bdac:	defff804 	addi	sp,sp,-32
   6bdb0:	df000715 	stw	fp,28(sp)
   6bdb4:	df000704 	addi	fp,sp,28
   6bdb8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   6bdbc:	e0bfff17 	ldw	r2,-4(fp)
   6bdc0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   6bdc4:	e0bffb17 	ldw	r2,-20(fp)
   6bdc8:	10800017 	ldw	r2,0(r2)
   6bdcc:	e0bffc15 	stw	r2,-16(fp)
   6bdd0:	00000106 	br	6bdd8 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   6bdd4:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   6bdd8:	e0bffc17 	ldw	r2,-16(fp)
   6bddc:	10800104 	addi	r2,r2,4
   6bde0:	10800037 	ldwio	r2,0(r2)
   6bde4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   6bde8:	e0bffd17 	ldw	r2,-12(fp)
   6bdec:	1080c00c 	andi	r2,r2,768
   6bdf0:	10006a26 	beq	r2,zero,6bf9c <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   6bdf4:	e0bffd17 	ldw	r2,-12(fp)
   6bdf8:	1080400c 	andi	r2,r2,256
   6bdfc:	10003326 	beq	r2,zero,6becc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   6be00:	00800074 	movhi	r2,1
   6be04:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   6be08:	e0bffb17 	ldw	r2,-20(fp)
   6be0c:	10800a17 	ldw	r2,40(r2)
   6be10:	10800044 	addi	r2,r2,1
   6be14:	1081ffcc 	andi	r2,r2,2047
   6be18:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   6be1c:	e0bffb17 	ldw	r2,-20(fp)
   6be20:	10c00b17 	ldw	r3,44(r2)
   6be24:	e0bffe17 	ldw	r2,-8(fp)
   6be28:	18801426 	beq	r3,r2,6be7c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   6be2c:	e0bffc17 	ldw	r2,-16(fp)
   6be30:	10800037 	ldwio	r2,0(r2)
   6be34:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   6be38:	e0bff917 	ldw	r2,-28(fp)
   6be3c:	10a0000c 	andi	r2,r2,32768
   6be40:	10001026 	beq	r2,zero,6be84 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   6be44:	e0bffb17 	ldw	r2,-20(fp)
   6be48:	10800a17 	ldw	r2,40(r2)
   6be4c:	e0fff917 	ldw	r3,-28(fp)
   6be50:	e13ffb17 	ldw	r4,-20(fp)
   6be54:	2085883a 	add	r2,r4,r2
   6be58:	10800e04 	addi	r2,r2,56
   6be5c:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   6be60:	e0bffb17 	ldw	r2,-20(fp)
   6be64:	10800a17 	ldw	r2,40(r2)
   6be68:	10800044 	addi	r2,r2,1
   6be6c:	10c1ffcc 	andi	r3,r2,2047
   6be70:	e0bffb17 	ldw	r2,-20(fp)
   6be74:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   6be78:	003fe306 	br	6be08 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   6be7c:	0001883a 	nop
   6be80:	00000106 	br	6be88 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   6be84:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   6be88:	e0bff917 	ldw	r2,-28(fp)
   6be8c:	10bfffec 	andhi	r2,r2,65535
   6be90:	10000e26 	beq	r2,zero,6becc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   6be94:	e0bffb17 	ldw	r2,-20(fp)
   6be98:	10c00817 	ldw	r3,32(r2)
   6be9c:	00bfff84 	movi	r2,-2
   6bea0:	1886703a 	and	r3,r3,r2
   6bea4:	e0bffb17 	ldw	r2,-20(fp)
   6bea8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   6beac:	e0bffc17 	ldw	r2,-16(fp)
   6beb0:	10800104 	addi	r2,r2,4
   6beb4:	e0fffb17 	ldw	r3,-20(fp)
   6beb8:	18c00817 	ldw	r3,32(r3)
   6bebc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   6bec0:	e0bffc17 	ldw	r2,-16(fp)
   6bec4:	10800104 	addi	r2,r2,4
   6bec8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   6becc:	e0bffd17 	ldw	r2,-12(fp)
   6bed0:	1080800c 	andi	r2,r2,512
   6bed4:	103fbf26 	beq	r2,zero,6bdd4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   6bed8:	e0bffd17 	ldw	r2,-12(fp)
   6bedc:	1004d43a 	srli	r2,r2,16
   6bee0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   6bee4:	00001406 	br	6bf38 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   6bee8:	e0bffc17 	ldw	r2,-16(fp)
   6beec:	e0fffb17 	ldw	r3,-20(fp)
   6bef0:	18c00d17 	ldw	r3,52(r3)
   6bef4:	e13ffb17 	ldw	r4,-20(fp)
   6bef8:	20c7883a 	add	r3,r4,r3
   6befc:	18c20e04 	addi	r3,r3,2104
   6bf00:	18c00003 	ldbu	r3,0(r3)
   6bf04:	18c03fcc 	andi	r3,r3,255
   6bf08:	18c0201c 	xori	r3,r3,128
   6bf0c:	18ffe004 	addi	r3,r3,-128
   6bf10:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   6bf14:	e0bffb17 	ldw	r2,-20(fp)
   6bf18:	10800d17 	ldw	r2,52(r2)
   6bf1c:	10800044 	addi	r2,r2,1
   6bf20:	10c1ffcc 	andi	r3,r2,2047
   6bf24:	e0bffb17 	ldw	r2,-20(fp)
   6bf28:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   6bf2c:	e0bffa17 	ldw	r2,-24(fp)
   6bf30:	10bfffc4 	addi	r2,r2,-1
   6bf34:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   6bf38:	e0bffa17 	ldw	r2,-24(fp)
   6bf3c:	10000526 	beq	r2,zero,6bf54 <altera_avalon_jtag_uart_irq+0x1a8>
   6bf40:	e0bffb17 	ldw	r2,-20(fp)
   6bf44:	10c00d17 	ldw	r3,52(r2)
   6bf48:	e0bffb17 	ldw	r2,-20(fp)
   6bf4c:	10800c17 	ldw	r2,48(r2)
   6bf50:	18bfe51e 	bne	r3,r2,6bee8 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   6bf54:	e0bffa17 	ldw	r2,-24(fp)
   6bf58:	103f9e26 	beq	r2,zero,6bdd4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   6bf5c:	e0bffb17 	ldw	r2,-20(fp)
   6bf60:	10c00817 	ldw	r3,32(r2)
   6bf64:	00bfff44 	movi	r2,-3
   6bf68:	1886703a 	and	r3,r3,r2
   6bf6c:	e0bffb17 	ldw	r2,-20(fp)
   6bf70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   6bf74:	e0bffb17 	ldw	r2,-20(fp)
   6bf78:	10800017 	ldw	r2,0(r2)
   6bf7c:	10800104 	addi	r2,r2,4
   6bf80:	e0fffb17 	ldw	r3,-20(fp)
   6bf84:	18c00817 	ldw	r3,32(r3)
   6bf88:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   6bf8c:	e0bffc17 	ldw	r2,-16(fp)
   6bf90:	10800104 	addi	r2,r2,4
   6bf94:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   6bf98:	003f8e06 	br	6bdd4 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   6bf9c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   6bfa0:	e037883a 	mov	sp,fp
   6bfa4:	df000017 	ldw	fp,0(sp)
   6bfa8:	dec00104 	addi	sp,sp,4
   6bfac:	f800283a 	ret

0006bfb0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   6bfb0:	defffc04 	addi	sp,sp,-16
   6bfb4:	df000315 	stw	fp,12(sp)
   6bfb8:	df000304 	addi	fp,sp,12
   6bfbc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   6bfc0:	e0bfff17 	ldw	r2,-4(fp)
   6bfc4:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   6bfc8:	e0bffd17 	ldw	r2,-12(fp)
   6bfcc:	10800017 	ldw	r2,0(r2)
   6bfd0:	10800104 	addi	r2,r2,4
   6bfd4:	10800037 	ldwio	r2,0(r2)
   6bfd8:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   6bfdc:	e0bffe17 	ldw	r2,-8(fp)
   6bfe0:	1081000c 	andi	r2,r2,1024
   6bfe4:	10000a26 	beq	r2,zero,6c010 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   6bfe8:	e0bffd17 	ldw	r2,-12(fp)
   6bfec:	10800017 	ldw	r2,0(r2)
   6bff0:	10800104 	addi	r2,r2,4
   6bff4:	e0fffd17 	ldw	r3,-12(fp)
   6bff8:	18c00817 	ldw	r3,32(r3)
   6bffc:	18c10014 	ori	r3,r3,1024
   6c000:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   6c004:	e0bffd17 	ldw	r2,-12(fp)
   6c008:	10000915 	stw	zero,36(r2)
   6c00c:	00000a06 	br	6c038 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   6c010:	e0bffd17 	ldw	r2,-12(fp)
   6c014:	10800917 	ldw	r2,36(r2)
   6c018:	00e00034 	movhi	r3,32768
   6c01c:	18ffff04 	addi	r3,r3,-4
   6c020:	18800536 	bltu	r3,r2,6c038 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   6c024:	e0bffd17 	ldw	r2,-12(fp)
   6c028:	10800917 	ldw	r2,36(r2)
   6c02c:	10c00044 	addi	r3,r2,1
   6c030:	e0bffd17 	ldw	r2,-12(fp)
   6c034:	10c00915 	stw	r3,36(r2)
   6c038:	008001f4 	movhi	r2,7
   6c03c:	10853404 	addi	r2,r2,5328
   6c040:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   6c044:	e037883a 	mov	sp,fp
   6c048:	df000017 	ldw	fp,0(sp)
   6c04c:	dec00104 	addi	sp,sp,4
   6c050:	f800283a 	ret

0006c054 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   6c054:	defffd04 	addi	sp,sp,-12
   6c058:	df000215 	stw	fp,8(sp)
   6c05c:	df000204 	addi	fp,sp,8
   6c060:	e13ffe15 	stw	r4,-8(fp)
   6c064:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   6c068:	00000506 	br	6c080 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   6c06c:	e0bfff17 	ldw	r2,-4(fp)
   6c070:	1090000c 	andi	r2,r2,16384
   6c074:	10000226 	beq	r2,zero,6c080 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   6c078:	00bffd44 	movi	r2,-11
   6c07c:	00000b06 	br	6c0ac <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   6c080:	e0bffe17 	ldw	r2,-8(fp)
   6c084:	10c00d17 	ldw	r3,52(r2)
   6c088:	e0bffe17 	ldw	r2,-8(fp)
   6c08c:	10800c17 	ldw	r2,48(r2)
   6c090:	18800526 	beq	r3,r2,6c0a8 <altera_avalon_jtag_uart_close+0x54>
   6c094:	e0bffe17 	ldw	r2,-8(fp)
   6c098:	10c00917 	ldw	r3,36(r2)
   6c09c:	e0bffe17 	ldw	r2,-8(fp)
   6c0a0:	10800117 	ldw	r2,4(r2)
   6c0a4:	18bff136 	bltu	r3,r2,6c06c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   6c0a8:	0005883a 	mov	r2,zero
}
   6c0ac:	e037883a 	mov	sp,fp
   6c0b0:	df000017 	ldw	fp,0(sp)
   6c0b4:	dec00104 	addi	sp,sp,4
   6c0b8:	f800283a 	ret

0006c0bc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   6c0bc:	defffa04 	addi	sp,sp,-24
   6c0c0:	df000515 	stw	fp,20(sp)
   6c0c4:	df000504 	addi	fp,sp,20
   6c0c8:	e13ffd15 	stw	r4,-12(fp)
   6c0cc:	e17ffe15 	stw	r5,-8(fp)
   6c0d0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   6c0d4:	00bff9c4 	movi	r2,-25
   6c0d8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   6c0dc:	e0bffe17 	ldw	r2,-8(fp)
   6c0e0:	10da8060 	cmpeqi	r3,r2,27137
   6c0e4:	1800031e 	bne	r3,zero,6c0f4 <altera_avalon_jtag_uart_ioctl+0x38>
   6c0e8:	109a80a0 	cmpeqi	r2,r2,27138
   6c0ec:	1000181e 	bne	r2,zero,6c150 <altera_avalon_jtag_uart_ioctl+0x94>
   6c0f0:	00002606 	br	6c18c <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   6c0f4:	e0bffd17 	ldw	r2,-12(fp)
   6c0f8:	10c00117 	ldw	r3,4(r2)
   6c0fc:	00a00034 	movhi	r2,32768
   6c100:	10bfffc4 	addi	r2,r2,-1
   6c104:	18802226 	beq	r3,r2,6c190 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   6c108:	e0bfff17 	ldw	r2,-4(fp)
   6c10c:	10800017 	ldw	r2,0(r2)
   6c110:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   6c114:	e0bffc17 	ldw	r2,-16(fp)
   6c118:	10800090 	cmplti	r2,r2,2
   6c11c:	1000061e 	bne	r2,zero,6c138 <altera_avalon_jtag_uart_ioctl+0x7c>
   6c120:	e0fffc17 	ldw	r3,-16(fp)
   6c124:	00a00034 	movhi	r2,32768
   6c128:	10bfffc4 	addi	r2,r2,-1
   6c12c:	18800226 	beq	r3,r2,6c138 <altera_avalon_jtag_uart_ioctl+0x7c>
   6c130:	e0bffc17 	ldw	r2,-16(fp)
   6c134:	00000206 	br	6c140 <altera_avalon_jtag_uart_ioctl+0x84>
   6c138:	00a00034 	movhi	r2,32768
   6c13c:	10bfff84 	addi	r2,r2,-2
   6c140:	e0fffd17 	ldw	r3,-12(fp)
   6c144:	18800115 	stw	r2,4(r3)
      rc = 0;
   6c148:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   6c14c:	00001006 	br	6c190 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   6c150:	e0bffd17 	ldw	r2,-12(fp)
   6c154:	10c00117 	ldw	r3,4(r2)
   6c158:	00a00034 	movhi	r2,32768
   6c15c:	10bfffc4 	addi	r2,r2,-1
   6c160:	18800d26 	beq	r3,r2,6c198 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   6c164:	e0bffd17 	ldw	r2,-12(fp)
   6c168:	10c00917 	ldw	r3,36(r2)
   6c16c:	e0bffd17 	ldw	r2,-12(fp)
   6c170:	10800117 	ldw	r2,4(r2)
   6c174:	1885803a 	cmpltu	r2,r3,r2
   6c178:	10c03fcc 	andi	r3,r2,255
   6c17c:	e0bfff17 	ldw	r2,-4(fp)
   6c180:	10c00015 	stw	r3,0(r2)
      rc = 0;
   6c184:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   6c188:	00000306 	br	6c198 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   6c18c:	00000306 	br	6c19c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   6c190:	0001883a 	nop
   6c194:	00000106 	br	6c19c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   6c198:	0001883a 	nop

  default:
    break;
  }

  return rc;
   6c19c:	e0bffb17 	ldw	r2,-20(fp)
}
   6c1a0:	e037883a 	mov	sp,fp
   6c1a4:	df000017 	ldw	fp,0(sp)
   6c1a8:	dec00104 	addi	sp,sp,4
   6c1ac:	f800283a 	ret

0006c1b0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   6c1b0:	defff304 	addi	sp,sp,-52
   6c1b4:	dfc00c15 	stw	ra,48(sp)
   6c1b8:	df000b15 	stw	fp,44(sp)
   6c1bc:	df000b04 	addi	fp,sp,44
   6c1c0:	e13ffc15 	stw	r4,-16(fp)
   6c1c4:	e17ffd15 	stw	r5,-12(fp)
   6c1c8:	e1bffe15 	stw	r6,-8(fp)
   6c1cc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   6c1d0:	e0bffd17 	ldw	r2,-12(fp)
   6c1d4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   6c1d8:	00004706 	br	6c2f8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   6c1dc:	e0bffc17 	ldw	r2,-16(fp)
   6c1e0:	10800a17 	ldw	r2,40(r2)
   6c1e4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   6c1e8:	e0bffc17 	ldw	r2,-16(fp)
   6c1ec:	10800b17 	ldw	r2,44(r2)
   6c1f0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   6c1f4:	e0fff717 	ldw	r3,-36(fp)
   6c1f8:	e0bff817 	ldw	r2,-32(fp)
   6c1fc:	18800536 	bltu	r3,r2,6c214 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   6c200:	e0fff717 	ldw	r3,-36(fp)
   6c204:	e0bff817 	ldw	r2,-32(fp)
   6c208:	1885c83a 	sub	r2,r3,r2
   6c20c:	e0bff615 	stw	r2,-40(fp)
   6c210:	00000406 	br	6c224 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   6c214:	00c20004 	movi	r3,2048
   6c218:	e0bff817 	ldw	r2,-32(fp)
   6c21c:	1885c83a 	sub	r2,r3,r2
   6c220:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   6c224:	e0bff617 	ldw	r2,-40(fp)
   6c228:	10001e26 	beq	r2,zero,6c2a4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   6c22c:	e0fffe17 	ldw	r3,-8(fp)
   6c230:	e0bff617 	ldw	r2,-40(fp)
   6c234:	1880022e 	bgeu	r3,r2,6c240 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   6c238:	e0bffe17 	ldw	r2,-8(fp)
   6c23c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   6c240:	e0bff817 	ldw	r2,-32(fp)
   6c244:	10800e04 	addi	r2,r2,56
   6c248:	e0fffc17 	ldw	r3,-16(fp)
   6c24c:	1885883a 	add	r2,r3,r2
   6c250:	e13ff517 	ldw	r4,-44(fp)
   6c254:	100b883a 	mov	r5,r2
   6c258:	e1bff617 	ldw	r6,-40(fp)
   6c25c:	00614dc0 	call	614dc <memcpy>
      ptr   += n;
   6c260:	e0fff517 	ldw	r3,-44(fp)
   6c264:	e0bff617 	ldw	r2,-40(fp)
   6c268:	1885883a 	add	r2,r3,r2
   6c26c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   6c270:	e0fffe17 	ldw	r3,-8(fp)
   6c274:	e0bff617 	ldw	r2,-40(fp)
   6c278:	1885c83a 	sub	r2,r3,r2
   6c27c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   6c280:	e0fff817 	ldw	r3,-32(fp)
   6c284:	e0bff617 	ldw	r2,-40(fp)
   6c288:	1885883a 	add	r2,r3,r2
   6c28c:	10c1ffcc 	andi	r3,r2,2047
   6c290:	e0bffc17 	ldw	r2,-16(fp)
   6c294:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   6c298:	e0bffe17 	ldw	r2,-8(fp)
   6c29c:	00bfcf16 	blt	zero,r2,6c1dc <altera_avalon_jtag_uart_read+0x2c>
   6c2a0:	00000106 	br	6c2a8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   6c2a4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   6c2a8:	e0fff517 	ldw	r3,-44(fp)
   6c2ac:	e0bffd17 	ldw	r2,-12(fp)
   6c2b0:	1880141e 	bne	r3,r2,6c304 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   6c2b4:	e0bfff17 	ldw	r2,-4(fp)
   6c2b8:	1090000c 	andi	r2,r2,16384
   6c2bc:	1000131e 	bne	r2,zero,6c30c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   6c2c0:	0001883a 	nop
   6c2c4:	e0bffc17 	ldw	r2,-16(fp)
   6c2c8:	10c00a17 	ldw	r3,40(r2)
   6c2cc:	e0bff717 	ldw	r2,-36(fp)
   6c2d0:	1880051e 	bne	r3,r2,6c2e8 <altera_avalon_jtag_uart_read+0x138>
   6c2d4:	e0bffc17 	ldw	r2,-16(fp)
   6c2d8:	10c00917 	ldw	r3,36(r2)
   6c2dc:	e0bffc17 	ldw	r2,-16(fp)
   6c2e0:	10800117 	ldw	r2,4(r2)
   6c2e4:	18bff736 	bltu	r3,r2,6c2c4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   6c2e8:	e0bffc17 	ldw	r2,-16(fp)
   6c2ec:	10c00a17 	ldw	r3,40(r2)
   6c2f0:	e0bff717 	ldw	r2,-36(fp)
   6c2f4:	18800726 	beq	r3,r2,6c314 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   6c2f8:	e0bffe17 	ldw	r2,-8(fp)
   6c2fc:	00bfb716 	blt	zero,r2,6c1dc <altera_avalon_jtag_uart_read+0x2c>
   6c300:	00000506 	br	6c318 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   6c304:	0001883a 	nop
   6c308:	00000306 	br	6c318 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   6c30c:	0001883a 	nop
   6c310:	00000106 	br	6c318 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   6c314:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   6c318:	e0fff517 	ldw	r3,-44(fp)
   6c31c:	e0bffd17 	ldw	r2,-12(fp)
   6c320:	18801726 	beq	r3,r2,6c380 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   6c324:	0005303a 	rdctl	r2,status
   6c328:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   6c32c:	e0fffa17 	ldw	r3,-24(fp)
   6c330:	00bfff84 	movi	r2,-2
   6c334:	1884703a 	and	r2,r3,r2
   6c338:	1001703a 	wrctl	status,r2
  
  return context;
   6c33c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   6c340:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   6c344:	e0bffc17 	ldw	r2,-16(fp)
   6c348:	10800817 	ldw	r2,32(r2)
   6c34c:	10c00054 	ori	r3,r2,1
   6c350:	e0bffc17 	ldw	r2,-16(fp)
   6c354:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   6c358:	e0bffc17 	ldw	r2,-16(fp)
   6c35c:	10800017 	ldw	r2,0(r2)
   6c360:	10800104 	addi	r2,r2,4
   6c364:	e0fffc17 	ldw	r3,-16(fp)
   6c368:	18c00817 	ldw	r3,32(r3)
   6c36c:	10c00035 	stwio	r3,0(r2)
   6c370:	e0bff917 	ldw	r2,-28(fp)
   6c374:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   6c378:	e0bffb17 	ldw	r2,-20(fp)
   6c37c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   6c380:	e0fff517 	ldw	r3,-44(fp)
   6c384:	e0bffd17 	ldw	r2,-12(fp)
   6c388:	18800426 	beq	r3,r2,6c39c <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   6c38c:	e0fff517 	ldw	r3,-44(fp)
   6c390:	e0bffd17 	ldw	r2,-12(fp)
   6c394:	1885c83a 	sub	r2,r3,r2
   6c398:	00000606 	br	6c3b4 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   6c39c:	e0bfff17 	ldw	r2,-4(fp)
   6c3a0:	1090000c 	andi	r2,r2,16384
   6c3a4:	10000226 	beq	r2,zero,6c3b0 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   6c3a8:	00bffd44 	movi	r2,-11
   6c3ac:	00000106 	br	6c3b4 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   6c3b0:	00bffec4 	movi	r2,-5
}
   6c3b4:	e037883a 	mov	sp,fp
   6c3b8:	dfc00117 	ldw	ra,4(sp)
   6c3bc:	df000017 	ldw	fp,0(sp)
   6c3c0:	dec00204 	addi	sp,sp,8
   6c3c4:	f800283a 	ret

0006c3c8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   6c3c8:	defff304 	addi	sp,sp,-52
   6c3cc:	dfc00c15 	stw	ra,48(sp)
   6c3d0:	df000b15 	stw	fp,44(sp)
   6c3d4:	df000b04 	addi	fp,sp,44
   6c3d8:	e13ffc15 	stw	r4,-16(fp)
   6c3dc:	e17ffd15 	stw	r5,-12(fp)
   6c3e0:	e1bffe15 	stw	r6,-8(fp)
   6c3e4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   6c3e8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   6c3ec:	e0bffd17 	ldw	r2,-12(fp)
   6c3f0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   6c3f4:	00003706 	br	6c4d4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   6c3f8:	e0bffc17 	ldw	r2,-16(fp)
   6c3fc:	10800c17 	ldw	r2,48(r2)
   6c400:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   6c404:	e0bffc17 	ldw	r2,-16(fp)
   6c408:	10800d17 	ldw	r2,52(r2)
   6c40c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   6c410:	e0fff817 	ldw	r3,-32(fp)
   6c414:	e0bff517 	ldw	r2,-44(fp)
   6c418:	1880062e 	bgeu	r3,r2,6c434 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   6c41c:	e0fff517 	ldw	r3,-44(fp)
   6c420:	e0bff817 	ldw	r2,-32(fp)
   6c424:	1885c83a 	sub	r2,r3,r2
   6c428:	10bfffc4 	addi	r2,r2,-1
   6c42c:	e0bff615 	stw	r2,-40(fp)
   6c430:	00000b06 	br	6c460 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   6c434:	e0bff517 	ldw	r2,-44(fp)
   6c438:	10000526 	beq	r2,zero,6c450 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   6c43c:	00c20004 	movi	r3,2048
   6c440:	e0bff817 	ldw	r2,-32(fp)
   6c444:	1885c83a 	sub	r2,r3,r2
   6c448:	e0bff615 	stw	r2,-40(fp)
   6c44c:	00000406 	br	6c460 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   6c450:	00c1ffc4 	movi	r3,2047
   6c454:	e0bff817 	ldw	r2,-32(fp)
   6c458:	1885c83a 	sub	r2,r3,r2
   6c45c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   6c460:	e0bff617 	ldw	r2,-40(fp)
   6c464:	10001e26 	beq	r2,zero,6c4e0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   6c468:	e0fffe17 	ldw	r3,-8(fp)
   6c46c:	e0bff617 	ldw	r2,-40(fp)
   6c470:	1880022e 	bgeu	r3,r2,6c47c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   6c474:	e0bffe17 	ldw	r2,-8(fp)
   6c478:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   6c47c:	e0bff817 	ldw	r2,-32(fp)
   6c480:	10820e04 	addi	r2,r2,2104
   6c484:	e0fffc17 	ldw	r3,-16(fp)
   6c488:	1885883a 	add	r2,r3,r2
   6c48c:	1009883a 	mov	r4,r2
   6c490:	e17ffd17 	ldw	r5,-12(fp)
   6c494:	e1bff617 	ldw	r6,-40(fp)
   6c498:	00614dc0 	call	614dc <memcpy>
      ptr   += n;
   6c49c:	e0fffd17 	ldw	r3,-12(fp)
   6c4a0:	e0bff617 	ldw	r2,-40(fp)
   6c4a4:	1885883a 	add	r2,r3,r2
   6c4a8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   6c4ac:	e0fffe17 	ldw	r3,-8(fp)
   6c4b0:	e0bff617 	ldw	r2,-40(fp)
   6c4b4:	1885c83a 	sub	r2,r3,r2
   6c4b8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   6c4bc:	e0fff817 	ldw	r3,-32(fp)
   6c4c0:	e0bff617 	ldw	r2,-40(fp)
   6c4c4:	1885883a 	add	r2,r3,r2
   6c4c8:	10c1ffcc 	andi	r3,r2,2047
   6c4cc:	e0bffc17 	ldw	r2,-16(fp)
   6c4d0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   6c4d4:	e0bffe17 	ldw	r2,-8(fp)
   6c4d8:	00bfc716 	blt	zero,r2,6c3f8 <altera_avalon_jtag_uart_write+0x30>
   6c4dc:	00000106 	br	6c4e4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   6c4e0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   6c4e4:	0005303a 	rdctl	r2,status
   6c4e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   6c4ec:	e0fffa17 	ldw	r3,-24(fp)
   6c4f0:	00bfff84 	movi	r2,-2
   6c4f4:	1884703a 	and	r2,r3,r2
   6c4f8:	1001703a 	wrctl	status,r2
  
  return context;
   6c4fc:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   6c500:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   6c504:	e0bffc17 	ldw	r2,-16(fp)
   6c508:	10800817 	ldw	r2,32(r2)
   6c50c:	10c00094 	ori	r3,r2,2
   6c510:	e0bffc17 	ldw	r2,-16(fp)
   6c514:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   6c518:	e0bffc17 	ldw	r2,-16(fp)
   6c51c:	10800017 	ldw	r2,0(r2)
   6c520:	10800104 	addi	r2,r2,4
   6c524:	e0fffc17 	ldw	r3,-16(fp)
   6c528:	18c00817 	ldw	r3,32(r3)
   6c52c:	10c00035 	stwio	r3,0(r2)
   6c530:	e0bff917 	ldw	r2,-28(fp)
   6c534:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   6c538:	e0bffb17 	ldw	r2,-20(fp)
   6c53c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   6c540:	e0bffe17 	ldw	r2,-8(fp)
   6c544:	0080110e 	bge	zero,r2,6c58c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   6c548:	e0bfff17 	ldw	r2,-4(fp)
   6c54c:	1090000c 	andi	r2,r2,16384
   6c550:	1000111e 	bne	r2,zero,6c598 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   6c554:	0001883a 	nop
   6c558:	e0bffc17 	ldw	r2,-16(fp)
   6c55c:	10c00d17 	ldw	r3,52(r2)
   6c560:	e0bff517 	ldw	r2,-44(fp)
   6c564:	1880051e 	bne	r3,r2,6c57c <altera_avalon_jtag_uart_write+0x1b4>
   6c568:	e0bffc17 	ldw	r2,-16(fp)
   6c56c:	10c00917 	ldw	r3,36(r2)
   6c570:	e0bffc17 	ldw	r2,-16(fp)
   6c574:	10800117 	ldw	r2,4(r2)
   6c578:	18bff736 	bltu	r3,r2,6c558 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   6c57c:	e0bffc17 	ldw	r2,-16(fp)
   6c580:	10c00d17 	ldw	r3,52(r2)
   6c584:	e0bff517 	ldw	r2,-44(fp)
   6c588:	18800526 	beq	r3,r2,6c5a0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   6c58c:	e0bffe17 	ldw	r2,-8(fp)
   6c590:	00bfd016 	blt	zero,r2,6c4d4 <altera_avalon_jtag_uart_write+0x10c>
   6c594:	00000306 	br	6c5a4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   6c598:	0001883a 	nop
   6c59c:	00000106 	br	6c5a4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   6c5a0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   6c5a4:	e0fffd17 	ldw	r3,-12(fp)
   6c5a8:	e0bff717 	ldw	r2,-36(fp)
   6c5ac:	18800426 	beq	r3,r2,6c5c0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   6c5b0:	e0fffd17 	ldw	r3,-12(fp)
   6c5b4:	e0bff717 	ldw	r2,-36(fp)
   6c5b8:	1885c83a 	sub	r2,r3,r2
   6c5bc:	00000606 	br	6c5d8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   6c5c0:	e0bfff17 	ldw	r2,-4(fp)
   6c5c4:	1090000c 	andi	r2,r2,16384
   6c5c8:	10000226 	beq	r2,zero,6c5d4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   6c5cc:	00bffd44 	movi	r2,-11
   6c5d0:	00000106 	br	6c5d8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   6c5d4:	00bffec4 	movi	r2,-5
}
   6c5d8:	e037883a 	mov	sp,fp
   6c5dc:	dfc00117 	ldw	ra,4(sp)
   6c5e0:	df000017 	ldw	fp,0(sp)
   6c5e4:	dec00204 	addi	sp,sp,8
   6c5e8:	f800283a 	ret

0006c5ec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   6c5ec:	defffa04 	addi	sp,sp,-24
   6c5f0:	dfc00515 	stw	ra,20(sp)
   6c5f4:	df000415 	stw	fp,16(sp)
   6c5f8:	df000404 	addi	fp,sp,16
   6c5fc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   6c600:	0007883a 	mov	r3,zero
   6c604:	e0bfff17 	ldw	r2,-4(fp)
   6c608:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   6c60c:	e0bfff17 	ldw	r2,-4(fp)
   6c610:	10800104 	addi	r2,r2,4
   6c614:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   6c618:	0005303a 	rdctl	r2,status
   6c61c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   6c620:	e0fffd17 	ldw	r3,-12(fp)
   6c624:	00bfff84 	movi	r2,-2
   6c628:	1884703a 	and	r2,r3,r2
   6c62c:	1001703a 	wrctl	status,r2
  
  return context;
   6c630:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   6c634:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   6c638:	006d2c00 	call	6d2c0 <alt_tick>
   6c63c:	e0bffc17 	ldw	r2,-16(fp)
   6c640:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   6c644:	e0bffe17 	ldw	r2,-8(fp)
   6c648:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   6c64c:	e037883a 	mov	sp,fp
   6c650:	dfc00117 	ldw	ra,4(sp)
   6c654:	df000017 	ldw	fp,0(sp)
   6c658:	dec00204 	addi	sp,sp,8
   6c65c:	f800283a 	ret

0006c660 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   6c660:	defff804 	addi	sp,sp,-32
   6c664:	dfc00715 	stw	ra,28(sp)
   6c668:	df000615 	stw	fp,24(sp)
   6c66c:	df000604 	addi	fp,sp,24
   6c670:	e13ffc15 	stw	r4,-16(fp)
   6c674:	e17ffd15 	stw	r5,-12(fp)
   6c678:	e1bffe15 	stw	r6,-8(fp)
   6c67c:	e1ffff15 	stw	r7,-4(fp)
   6c680:	e0bfff17 	ldw	r2,-4(fp)
   6c684:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   6c688:	008001f4 	movhi	r2,7
   6c68c:	10853404 	addi	r2,r2,5328
   6c690:	10800017 	ldw	r2,0(r2)
   6c694:	1000041e 	bne	r2,zero,6c6a8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   6c698:	008001f4 	movhi	r2,7
   6c69c:	10853404 	addi	r2,r2,5328
   6c6a0:	e0fffb17 	ldw	r3,-20(fp)
   6c6a4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   6c6a8:	e0bffc17 	ldw	r2,-16(fp)
   6c6ac:	10800104 	addi	r2,r2,4
   6c6b0:	00c001c4 	movi	r3,7
   6c6b4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   6c6b8:	d8000015 	stw	zero,0(sp)
   6c6bc:	e13ffd17 	ldw	r4,-12(fp)
   6c6c0:	e17ffe17 	ldw	r5,-8(fp)
   6c6c4:	018001f4 	movhi	r6,7
   6c6c8:	31b17b04 	addi	r6,r6,-14868
   6c6cc:	e1fffc17 	ldw	r7,-16(fp)
   6c6d0:	006cb700 	call	6cb70 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   6c6d4:	e037883a 	mov	sp,fp
   6c6d8:	dfc00117 	ldw	ra,4(sp)
   6c6dc:	df000017 	ldw	fp,0(sp)
   6c6e0:	dec00204 	addi	sp,sp,8
   6c6e4:	f800283a 	ret

0006c6e8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   6c6e8:	defff504 	addi	sp,sp,-44
   6c6ec:	df000a15 	stw	fp,40(sp)
   6c6f0:	df000a04 	addi	fp,sp,40
   6c6f4:	e13ffc15 	stw	r4,-16(fp)
   6c6f8:	e17ffd15 	stw	r5,-12(fp)
   6c6fc:	e1bffe15 	stw	r6,-8(fp)
   6c700:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   6c704:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   6c708:	008001f4 	movhi	r2,7
   6c70c:	10853404 	addi	r2,r2,5328
   6c710:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   6c714:	10003f26 	beq	r2,zero,6c814 <alt_alarm_start+0x12c>
  {
    if (alarm)
   6c718:	e0bffc17 	ldw	r2,-16(fp)
   6c71c:	10003b26 	beq	r2,zero,6c80c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   6c720:	e0bffc17 	ldw	r2,-16(fp)
   6c724:	e0fffe17 	ldw	r3,-8(fp)
   6c728:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   6c72c:	e0bffc17 	ldw	r2,-16(fp)
   6c730:	e0ffff17 	ldw	r3,-4(fp)
   6c734:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   6c738:	0005303a 	rdctl	r2,status
   6c73c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   6c740:	e0fff817 	ldw	r3,-32(fp)
   6c744:	00bfff84 	movi	r2,-2
   6c748:	1884703a 	and	r2,r3,r2
   6c74c:	1001703a 	wrctl	status,r2
  
  return context;
   6c750:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   6c754:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   6c758:	008001f4 	movhi	r2,7
   6c75c:	10853504 	addi	r2,r2,5332
   6c760:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   6c764:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   6c768:	e0fffd17 	ldw	r3,-12(fp)
   6c76c:	e0bff617 	ldw	r2,-40(fp)
   6c770:	1885883a 	add	r2,r3,r2
   6c774:	10c00044 	addi	r3,r2,1
   6c778:	e0bffc17 	ldw	r2,-16(fp)
   6c77c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   6c780:	e0bffc17 	ldw	r2,-16(fp)
   6c784:	10c00217 	ldw	r3,8(r2)
   6c788:	e0bff617 	ldw	r2,-40(fp)
   6c78c:	1880042e 	bgeu	r3,r2,6c7a0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   6c790:	e0bffc17 	ldw	r2,-16(fp)
   6c794:	00c00044 	movi	r3,1
   6c798:	10c00405 	stb	r3,16(r2)
   6c79c:	00000206 	br	6c7a8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   6c7a0:	e0bffc17 	ldw	r2,-16(fp)
   6c7a4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   6c7a8:	e0bffc17 	ldw	r2,-16(fp)
   6c7ac:	00c001f4 	movhi	r3,7
   6c7b0:	18fe7d04 	addi	r3,r3,-1548
   6c7b4:	e0fff915 	stw	r3,-28(fp)
   6c7b8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   6c7bc:	e0bffa17 	ldw	r2,-24(fp)
   6c7c0:	e0fff917 	ldw	r3,-28(fp)
   6c7c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   6c7c8:	e0bff917 	ldw	r2,-28(fp)
   6c7cc:	10c00017 	ldw	r3,0(r2)
   6c7d0:	e0bffa17 	ldw	r2,-24(fp)
   6c7d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   6c7d8:	e0bff917 	ldw	r2,-28(fp)
   6c7dc:	10800017 	ldw	r2,0(r2)
   6c7e0:	e0fffa17 	ldw	r3,-24(fp)
   6c7e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   6c7e8:	e0bff917 	ldw	r2,-28(fp)
   6c7ec:	e0fffa17 	ldw	r3,-24(fp)
   6c7f0:	10c00015 	stw	r3,0(r2)
   6c7f4:	e0bff717 	ldw	r2,-36(fp)
   6c7f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   6c7fc:	e0bffb17 	ldw	r2,-20(fp)
   6c800:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   6c804:	0005883a 	mov	r2,zero
   6c808:	00000306 	br	6c818 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   6c80c:	00bffa84 	movi	r2,-22
   6c810:	00000106 	br	6c818 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   6c814:	00bfde84 	movi	r2,-134
  }
}
   6c818:	e037883a 	mov	sp,fp
   6c81c:	df000017 	ldw	fp,0(sp)
   6c820:	dec00104 	addi	sp,sp,4
   6c824:	f800283a 	ret

0006c828 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   6c828:	defffa04 	addi	sp,sp,-24
   6c82c:	dfc00515 	stw	ra,20(sp)
   6c830:	df000415 	stw	fp,16(sp)
   6c834:	df000404 	addi	fp,sp,16
   6c838:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   6c83c:	008000c4 	movi	r2,3
   6c840:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   6c844:	e13ffd17 	ldw	r4,-12(fp)
   6c848:	014003f4 	movhi	r5,15
   6c84c:	29509004 	addi	r5,r5,16960
   6c850:	00614b40 	call	614b4 <__mulsi3>
   6c854:	01017db4 	movhi	r4,1526
   6c858:	21384004 	addi	r4,r4,-7936
   6c85c:	100b883a 	mov	r5,r2
   6c860:	006a5640 	call	6a564 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   6c864:	01200034 	movhi	r4,32768
   6c868:	213fffc4 	addi	r4,r4,-1
   6c86c:	100b883a 	mov	r5,r2
   6c870:	006a5640 	call	6a564 <__udivsi3>
   6c874:	e13fff17 	ldw	r4,-4(fp)
   6c878:	100b883a 	mov	r5,r2
   6c87c:	006a5640 	call	6a564 <__udivsi3>
   6c880:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   6c884:	e0bffe17 	ldw	r2,-8(fp)
   6c888:	10002926 	beq	r2,zero,6c930 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   6c88c:	e03ffc15 	stw	zero,-16(fp)
   6c890:	00001606 	br	6c8ec <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   6c894:	00a00034 	movhi	r2,32768
   6c898:	10bfffc4 	addi	r2,r2,-1
   6c89c:	10bfffc4 	addi	r2,r2,-1
   6c8a0:	103ffe1e 	bne	r2,zero,6c89c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   6c8a4:	e13ffd17 	ldw	r4,-12(fp)
   6c8a8:	014003f4 	movhi	r5,15
   6c8ac:	29509004 	addi	r5,r5,16960
   6c8b0:	00614b40 	call	614b4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   6c8b4:	01017db4 	movhi	r4,1526
   6c8b8:	21384004 	addi	r4,r4,-7936
   6c8bc:	100b883a 	mov	r5,r2
   6c8c0:	006a5640 	call	6a564 <__udivsi3>
   6c8c4:	01200034 	movhi	r4,32768
   6c8c8:	213fffc4 	addi	r4,r4,-1
   6c8cc:	100b883a 	mov	r5,r2
   6c8d0:	006a5640 	call	6a564 <__udivsi3>
   6c8d4:	e0ffff17 	ldw	r3,-4(fp)
   6c8d8:	1885c83a 	sub	r2,r3,r2
   6c8dc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   6c8e0:	e0bffc17 	ldw	r2,-16(fp)
   6c8e4:	10800044 	addi	r2,r2,1
   6c8e8:	e0bffc15 	stw	r2,-16(fp)
   6c8ec:	e0fffc17 	ldw	r3,-16(fp)
   6c8f0:	e0bffe17 	ldw	r2,-8(fp)
   6c8f4:	18bfe716 	blt	r3,r2,6c894 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   6c8f8:	e13ffd17 	ldw	r4,-12(fp)
   6c8fc:	014003f4 	movhi	r5,15
   6c900:	29509004 	addi	r5,r5,16960
   6c904:	00614b40 	call	614b4 <__mulsi3>
   6c908:	01017db4 	movhi	r4,1526
   6c90c:	21384004 	addi	r4,r4,-7936
   6c910:	100b883a 	mov	r5,r2
   6c914:	006a5640 	call	6a564 <__udivsi3>
   6c918:	1009883a 	mov	r4,r2
   6c91c:	e17fff17 	ldw	r5,-4(fp)
   6c920:	00614b40 	call	614b4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   6c924:	10bfffc4 	addi	r2,r2,-1
   6c928:	103ffe1e 	bne	r2,zero,6c924 <alt_busy_sleep+0xfc>
   6c92c:	00000d06 	br	6c964 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   6c930:	e13ffd17 	ldw	r4,-12(fp)
   6c934:	014003f4 	movhi	r5,15
   6c938:	29509004 	addi	r5,r5,16960
   6c93c:	00614b40 	call	614b4 <__mulsi3>
   6c940:	01017db4 	movhi	r4,1526
   6c944:	21384004 	addi	r4,r4,-7936
   6c948:	100b883a 	mov	r5,r2
   6c94c:	006a5640 	call	6a564 <__udivsi3>
   6c950:	1009883a 	mov	r4,r2
   6c954:	e17fff17 	ldw	r5,-4(fp)
   6c958:	00614b40 	call	614b4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   6c95c:	10bfffc4 	addi	r2,r2,-1
   6c960:	00bffe16 	blt	zero,r2,6c95c <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   6c964:	0005883a 	mov	r2,zero
}
   6c968:	e037883a 	mov	sp,fp
   6c96c:	dfc00117 	ldw	ra,4(sp)
   6c970:	df000017 	ldw	fp,0(sp)
   6c974:	dec00204 	addi	sp,sp,8
   6c978:	f800283a 	ret

0006c97c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   6c97c:	deffff04 	addi	sp,sp,-4
   6c980:	df000015 	stw	fp,0(sp)
   6c984:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   6c988:	e037883a 	mov	sp,fp
   6c98c:	df000017 	ldw	fp,0(sp)
   6c990:	dec00104 	addi	sp,sp,4
   6c994:	f800283a 	ret

0006c998 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   6c998:	defffe04 	addi	sp,sp,-8
   6c99c:	dfc00115 	stw	ra,4(sp)
   6c9a0:	df000015 	stw	fp,0(sp)
   6c9a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   6c9a8:	008001f4 	movhi	r2,7
   6c9ac:	10be7a04 	addi	r2,r2,-1560
   6c9b0:	10800017 	ldw	r2,0(r2)
   6c9b4:	10000526 	beq	r2,zero,6c9cc <alt_get_errno+0x34>
   6c9b8:	008001f4 	movhi	r2,7
   6c9bc:	10be7a04 	addi	r2,r2,-1560
   6c9c0:	10800017 	ldw	r2,0(r2)
   6c9c4:	103ee83a 	callr	r2
   6c9c8:	00000206 	br	6c9d4 <alt_get_errno+0x3c>
   6c9cc:	008001f4 	movhi	r2,7
   6c9d0:	10852d04 	addi	r2,r2,5300
}
   6c9d4:	e037883a 	mov	sp,fp
   6c9d8:	dfc00117 	ldw	ra,4(sp)
   6c9dc:	df000017 	ldw	fp,0(sp)
   6c9e0:	dec00204 	addi	sp,sp,8
   6c9e4:	f800283a 	ret

0006c9e8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   6c9e8:	defffa04 	addi	sp,sp,-24
   6c9ec:	dfc00515 	stw	ra,20(sp)
   6c9f0:	df000415 	stw	fp,16(sp)
   6c9f4:	df000404 	addi	fp,sp,16
   6c9f8:	e13ffe15 	stw	r4,-8(fp)
   6c9fc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   6ca00:	e0bffe17 	ldw	r2,-8(fp)
   6ca04:	10000326 	beq	r2,zero,6ca14 <alt_dev_llist_insert+0x2c>
   6ca08:	e0bffe17 	ldw	r2,-8(fp)
   6ca0c:	10800217 	ldw	r2,8(r2)
   6ca10:	1000051e 	bne	r2,zero,6ca28 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   6ca14:	006c9980 	call	6c998 <alt_get_errno>
   6ca18:	00c00584 	movi	r3,22
   6ca1c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   6ca20:	00bffa84 	movi	r2,-22
   6ca24:	00001306 	br	6ca74 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   6ca28:	e0bffe17 	ldw	r2,-8(fp)
   6ca2c:	e0ffff17 	ldw	r3,-4(fp)
   6ca30:	e0fffc15 	stw	r3,-16(fp)
   6ca34:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   6ca38:	e0bffd17 	ldw	r2,-12(fp)
   6ca3c:	e0fffc17 	ldw	r3,-16(fp)
   6ca40:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   6ca44:	e0bffc17 	ldw	r2,-16(fp)
   6ca48:	10c00017 	ldw	r3,0(r2)
   6ca4c:	e0bffd17 	ldw	r2,-12(fp)
   6ca50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   6ca54:	e0bffc17 	ldw	r2,-16(fp)
   6ca58:	10800017 	ldw	r2,0(r2)
   6ca5c:	e0fffd17 	ldw	r3,-12(fp)
   6ca60:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   6ca64:	e0bffc17 	ldw	r2,-16(fp)
   6ca68:	e0fffd17 	ldw	r3,-12(fp)
   6ca6c:	10c00015 	stw	r3,0(r2)

  return 0;  
   6ca70:	0005883a 	mov	r2,zero
}
   6ca74:	e037883a 	mov	sp,fp
   6ca78:	dfc00117 	ldw	ra,4(sp)
   6ca7c:	df000017 	ldw	fp,0(sp)
   6ca80:	dec00204 	addi	sp,sp,8
   6ca84:	f800283a 	ret

0006ca88 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   6ca88:	defffd04 	addi	sp,sp,-12
   6ca8c:	dfc00215 	stw	ra,8(sp)
   6ca90:	df000115 	stw	fp,4(sp)
   6ca94:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   6ca98:	008001f4 	movhi	r2,7
   6ca9c:	10b6ae04 	addi	r2,r2,-9544
   6caa0:	e0bfff15 	stw	r2,-4(fp)
   6caa4:	00000606 	br	6cac0 <_do_ctors+0x38>
        (*ctor) (); 
   6caa8:	e0bfff17 	ldw	r2,-4(fp)
   6caac:	10800017 	ldw	r2,0(r2)
   6cab0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   6cab4:	e0bfff17 	ldw	r2,-4(fp)
   6cab8:	10bfff04 	addi	r2,r2,-4
   6cabc:	e0bfff15 	stw	r2,-4(fp)
   6cac0:	e0ffff17 	ldw	r3,-4(fp)
   6cac4:	008001f4 	movhi	r2,7
   6cac8:	10b6af04 	addi	r2,r2,-9540
   6cacc:	18bff62e 	bgeu	r3,r2,6caa8 <_do_ctors+0x20>
        (*ctor) (); 
}
   6cad0:	e037883a 	mov	sp,fp
   6cad4:	dfc00117 	ldw	ra,4(sp)
   6cad8:	df000017 	ldw	fp,0(sp)
   6cadc:	dec00204 	addi	sp,sp,8
   6cae0:	f800283a 	ret

0006cae4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   6cae4:	defffd04 	addi	sp,sp,-12
   6cae8:	dfc00215 	stw	ra,8(sp)
   6caec:	df000115 	stw	fp,4(sp)
   6caf0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   6caf4:	008001f4 	movhi	r2,7
   6caf8:	10b6ae04 	addi	r2,r2,-9544
   6cafc:	e0bfff15 	stw	r2,-4(fp)
   6cb00:	00000606 	br	6cb1c <_do_dtors+0x38>
        (*dtor) (); 
   6cb04:	e0bfff17 	ldw	r2,-4(fp)
   6cb08:	10800017 	ldw	r2,0(r2)
   6cb0c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   6cb10:	e0bfff17 	ldw	r2,-4(fp)
   6cb14:	10bfff04 	addi	r2,r2,-4
   6cb18:	e0bfff15 	stw	r2,-4(fp)
   6cb1c:	e0ffff17 	ldw	r3,-4(fp)
   6cb20:	008001f4 	movhi	r2,7
   6cb24:	10b6af04 	addi	r2,r2,-9540
   6cb28:	18bff62e 	bgeu	r3,r2,6cb04 <_do_dtors+0x20>
        (*dtor) (); 
}
   6cb2c:	e037883a 	mov	sp,fp
   6cb30:	dfc00117 	ldw	ra,4(sp)
   6cb34:	df000017 	ldw	fp,0(sp)
   6cb38:	dec00204 	addi	sp,sp,8
   6cb3c:	f800283a 	ret

0006cb40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   6cb40:	defffe04 	addi	sp,sp,-8
   6cb44:	dfc00115 	stw	ra,4(sp)
   6cb48:	df000015 	stw	fp,0(sp)
   6cb4c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   6cb50:	0009883a 	mov	r4,zero
   6cb54:	01440004 	movi	r5,4096
   6cb58:	006d65c0 	call	6d65c <alt_icache_flush>
#endif
}
   6cb5c:	e037883a 	mov	sp,fp
   6cb60:	dfc00117 	ldw	ra,4(sp)
   6cb64:	df000017 	ldw	fp,0(sp)
   6cb68:	dec00204 	addi	sp,sp,8
   6cb6c:	f800283a 	ret

0006cb70 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   6cb70:	defff904 	addi	sp,sp,-28
   6cb74:	dfc00615 	stw	ra,24(sp)
   6cb78:	df000515 	stw	fp,20(sp)
   6cb7c:	df000504 	addi	fp,sp,20
   6cb80:	e13ffc15 	stw	r4,-16(fp)
   6cb84:	e17ffd15 	stw	r5,-12(fp)
   6cb88:	e1bffe15 	stw	r6,-8(fp)
   6cb8c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   6cb90:	e0800217 	ldw	r2,8(fp)
   6cb94:	d8800015 	stw	r2,0(sp)
   6cb98:	e13ffc17 	ldw	r4,-16(fp)
   6cb9c:	e17ffd17 	ldw	r5,-12(fp)
   6cba0:	e1bffe17 	ldw	r6,-8(fp)
   6cba4:	e1ffff17 	ldw	r7,-4(fp)
   6cba8:	006cd480 	call	6cd48 <alt_iic_isr_register>
}  
   6cbac:	e037883a 	mov	sp,fp
   6cbb0:	dfc00117 	ldw	ra,4(sp)
   6cbb4:	df000017 	ldw	fp,0(sp)
   6cbb8:	dec00204 	addi	sp,sp,8
   6cbbc:	f800283a 	ret

0006cbc0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   6cbc0:	defff904 	addi	sp,sp,-28
   6cbc4:	df000615 	stw	fp,24(sp)
   6cbc8:	df000604 	addi	fp,sp,24
   6cbcc:	e13ffe15 	stw	r4,-8(fp)
   6cbd0:	e17fff15 	stw	r5,-4(fp)
   6cbd4:	e0bfff17 	ldw	r2,-4(fp)
   6cbd8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   6cbdc:	0005303a 	rdctl	r2,status
   6cbe0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   6cbe4:	e0fffb17 	ldw	r3,-20(fp)
   6cbe8:	00bfff84 	movi	r2,-2
   6cbec:	1884703a 	and	r2,r3,r2
   6cbf0:	1001703a 	wrctl	status,r2
  
  return context;
   6cbf4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   6cbf8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   6cbfc:	e0bffa17 	ldw	r2,-24(fp)
   6cc00:	00c00044 	movi	r3,1
   6cc04:	1884983a 	sll	r2,r3,r2
   6cc08:	1007883a 	mov	r3,r2
   6cc0c:	008001f4 	movhi	r2,7
   6cc10:	10853304 	addi	r2,r2,5324
   6cc14:	10800017 	ldw	r2,0(r2)
   6cc18:	1886b03a 	or	r3,r3,r2
   6cc1c:	008001f4 	movhi	r2,7
   6cc20:	10853304 	addi	r2,r2,5324
   6cc24:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   6cc28:	008001f4 	movhi	r2,7
   6cc2c:	10853304 	addi	r2,r2,5324
   6cc30:	10800017 	ldw	r2,0(r2)
   6cc34:	100170fa 	wrctl	ienable,r2
   6cc38:	e0bffc17 	ldw	r2,-16(fp)
   6cc3c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   6cc40:	e0bffd17 	ldw	r2,-12(fp)
   6cc44:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   6cc48:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   6cc4c:	e037883a 	mov	sp,fp
   6cc50:	df000017 	ldw	fp,0(sp)
   6cc54:	dec00104 	addi	sp,sp,4
   6cc58:	f800283a 	ret

0006cc5c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   6cc5c:	defff904 	addi	sp,sp,-28
   6cc60:	df000615 	stw	fp,24(sp)
   6cc64:	df000604 	addi	fp,sp,24
   6cc68:	e13ffe15 	stw	r4,-8(fp)
   6cc6c:	e17fff15 	stw	r5,-4(fp)
   6cc70:	e0bfff17 	ldw	r2,-4(fp)
   6cc74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   6cc78:	0005303a 	rdctl	r2,status
   6cc7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   6cc80:	e0fffb17 	ldw	r3,-20(fp)
   6cc84:	00bfff84 	movi	r2,-2
   6cc88:	1884703a 	and	r2,r3,r2
   6cc8c:	1001703a 	wrctl	status,r2
  
  return context;
   6cc90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   6cc94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   6cc98:	e0bffa17 	ldw	r2,-24(fp)
   6cc9c:	00c00044 	movi	r3,1
   6cca0:	1884983a 	sll	r2,r3,r2
   6cca4:	0084303a 	nor	r2,zero,r2
   6cca8:	1007883a 	mov	r3,r2
   6ccac:	008001f4 	movhi	r2,7
   6ccb0:	10853304 	addi	r2,r2,5324
   6ccb4:	10800017 	ldw	r2,0(r2)
   6ccb8:	1886703a 	and	r3,r3,r2
   6ccbc:	008001f4 	movhi	r2,7
   6ccc0:	10853304 	addi	r2,r2,5324
   6ccc4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   6ccc8:	008001f4 	movhi	r2,7
   6cccc:	10853304 	addi	r2,r2,5324
   6ccd0:	10800017 	ldw	r2,0(r2)
   6ccd4:	100170fa 	wrctl	ienable,r2
   6ccd8:	e0bffc17 	ldw	r2,-16(fp)
   6ccdc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   6cce0:	e0bffd17 	ldw	r2,-12(fp)
   6cce4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   6cce8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   6ccec:	e037883a 	mov	sp,fp
   6ccf0:	df000017 	ldw	fp,0(sp)
   6ccf4:	dec00104 	addi	sp,sp,4
   6ccf8:	f800283a 	ret

0006ccfc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   6ccfc:	defffc04 	addi	sp,sp,-16
   6cd00:	df000315 	stw	fp,12(sp)
   6cd04:	df000304 	addi	fp,sp,12
   6cd08:	e13ffe15 	stw	r4,-8(fp)
   6cd0c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   6cd10:	000530fa 	rdctl	r2,ienable
   6cd14:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   6cd18:	e0bfff17 	ldw	r2,-4(fp)
   6cd1c:	00c00044 	movi	r3,1
   6cd20:	1884983a 	sll	r2,r3,r2
   6cd24:	1007883a 	mov	r3,r2
   6cd28:	e0bffd17 	ldw	r2,-12(fp)
   6cd2c:	1884703a 	and	r2,r3,r2
   6cd30:	1004c03a 	cmpne	r2,r2,zero
   6cd34:	10803fcc 	andi	r2,r2,255
}
   6cd38:	e037883a 	mov	sp,fp
   6cd3c:	df000017 	ldw	fp,0(sp)
   6cd40:	dec00104 	addi	sp,sp,4
   6cd44:	f800283a 	ret

0006cd48 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   6cd48:	defff504 	addi	sp,sp,-44
   6cd4c:	dfc00a15 	stw	ra,40(sp)
   6cd50:	df000915 	stw	fp,36(sp)
   6cd54:	df000904 	addi	fp,sp,36
   6cd58:	e13ffc15 	stw	r4,-16(fp)
   6cd5c:	e17ffd15 	stw	r5,-12(fp)
   6cd60:	e1bffe15 	stw	r6,-8(fp)
   6cd64:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   6cd68:	00bffa84 	movi	r2,-22
   6cd6c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   6cd70:	e0bffd17 	ldw	r2,-12(fp)
   6cd74:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   6cd78:	e0bff817 	ldw	r2,-32(fp)
   6cd7c:	10800808 	cmpgei	r2,r2,32
   6cd80:	1000271e 	bne	r2,zero,6ce20 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   6cd84:	0005303a 	rdctl	r2,status
   6cd88:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   6cd8c:	e0fffa17 	ldw	r3,-24(fp)
   6cd90:	00bfff84 	movi	r2,-2
   6cd94:	1884703a 	and	r2,r3,r2
   6cd98:	1001703a 	wrctl	status,r2
  
  return context;
   6cd9c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   6cda0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   6cda4:	00c001f4 	movhi	r3,7
   6cda8:	18c5c004 	addi	r3,r3,5888
   6cdac:	e0bff817 	ldw	r2,-32(fp)
   6cdb0:	100490fa 	slli	r2,r2,3
   6cdb4:	1885883a 	add	r2,r3,r2
   6cdb8:	e0fffe17 	ldw	r3,-8(fp)
   6cdbc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   6cdc0:	00c001f4 	movhi	r3,7
   6cdc4:	18c5c004 	addi	r3,r3,5888
   6cdc8:	e0bff817 	ldw	r2,-32(fp)
   6cdcc:	100490fa 	slli	r2,r2,3
   6cdd0:	1885883a 	add	r2,r3,r2
   6cdd4:	10800104 	addi	r2,r2,4
   6cdd8:	e0ffff17 	ldw	r3,-4(fp)
   6cddc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   6cde0:	e0bffe17 	ldw	r2,-8(fp)
   6cde4:	10000526 	beq	r2,zero,6cdfc <alt_iic_isr_register+0xb4>
   6cde8:	e0bff817 	ldw	r2,-32(fp)
   6cdec:	e13ffc17 	ldw	r4,-16(fp)
   6cdf0:	100b883a 	mov	r5,r2
   6cdf4:	006cbc00 	call	6cbc0 <alt_ic_irq_enable>
   6cdf8:	00000406 	br	6ce0c <alt_iic_isr_register+0xc4>
   6cdfc:	e0bff817 	ldw	r2,-32(fp)
   6ce00:	e13ffc17 	ldw	r4,-16(fp)
   6ce04:	100b883a 	mov	r5,r2
   6ce08:	006cc5c0 	call	6cc5c <alt_ic_irq_disable>
   6ce0c:	e0bff715 	stw	r2,-36(fp)
   6ce10:	e0bff917 	ldw	r2,-28(fp)
   6ce14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   6ce18:	e0bffb17 	ldw	r2,-20(fp)
   6ce1c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   6ce20:	e0bff717 	ldw	r2,-36(fp)
}
   6ce24:	e037883a 	mov	sp,fp
   6ce28:	dfc00117 	ldw	ra,4(sp)
   6ce2c:	df000017 	ldw	fp,0(sp)
   6ce30:	dec00204 	addi	sp,sp,8
   6ce34:	f800283a 	ret

0006ce38 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   6ce38:	defff804 	addi	sp,sp,-32
   6ce3c:	dfc00715 	stw	ra,28(sp)
   6ce40:	df000615 	stw	fp,24(sp)
   6ce44:	dc000515 	stw	r16,20(sp)
   6ce48:	df000504 	addi	fp,sp,20
   6ce4c:	e13ffc15 	stw	r4,-16(fp)
   6ce50:	e17ffd15 	stw	r5,-12(fp)
   6ce54:	e1bffe15 	stw	r6,-8(fp)
   6ce58:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   6ce5c:	e13ffd17 	ldw	r4,-12(fp)
   6ce60:	e17ffe17 	ldw	r5,-8(fp)
   6ce64:	e1bfff17 	ldw	r6,-4(fp)
   6ce68:	006d0d00 	call	6d0d0 <open>
   6ce6c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   6ce70:	e0bffb17 	ldw	r2,-20(fp)
   6ce74:	10002216 	blt	r2,zero,6cf00 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   6ce78:	040001f4 	movhi	r16,7
   6ce7c:	8439f804 	addi	r16,r16,-6176
   6ce80:	e0bffb17 	ldw	r2,-20(fp)
   6ce84:	1009883a 	mov	r4,r2
   6ce88:	01400304 	movi	r5,12
   6ce8c:	00614b40 	call	614b4 <__mulsi3>
   6ce90:	8085883a 	add	r2,r16,r2
   6ce94:	10c00017 	ldw	r3,0(r2)
   6ce98:	e0bffc17 	ldw	r2,-16(fp)
   6ce9c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   6cea0:	040001f4 	movhi	r16,7
   6cea4:	8439f804 	addi	r16,r16,-6176
   6cea8:	e0bffb17 	ldw	r2,-20(fp)
   6ceac:	1009883a 	mov	r4,r2
   6ceb0:	01400304 	movi	r5,12
   6ceb4:	00614b40 	call	614b4 <__mulsi3>
   6ceb8:	8085883a 	add	r2,r16,r2
   6cebc:	10800104 	addi	r2,r2,4
   6cec0:	10c00017 	ldw	r3,0(r2)
   6cec4:	e0bffc17 	ldw	r2,-16(fp)
   6cec8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   6cecc:	040001f4 	movhi	r16,7
   6ced0:	8439f804 	addi	r16,r16,-6176
   6ced4:	e0bffb17 	ldw	r2,-20(fp)
   6ced8:	1009883a 	mov	r4,r2
   6cedc:	01400304 	movi	r5,12
   6cee0:	00614b40 	call	614b4 <__mulsi3>
   6cee4:	8085883a 	add	r2,r16,r2
   6cee8:	10800204 	addi	r2,r2,8
   6ceec:	10c00017 	ldw	r3,0(r2)
   6cef0:	e0bffc17 	ldw	r2,-16(fp)
   6cef4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   6cef8:	e13ffb17 	ldw	r4,-20(fp)
   6cefc:	006b2f80 	call	6b2f8 <alt_release_fd>
  }
} 
   6cf00:	e037883a 	mov	sp,fp
   6cf04:	dfc00217 	ldw	ra,8(sp)
   6cf08:	df000117 	ldw	fp,4(sp)
   6cf0c:	dc000017 	ldw	r16,0(sp)
   6cf10:	dec00304 	addi	sp,sp,12
   6cf14:	f800283a 	ret

0006cf18 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   6cf18:	defffb04 	addi	sp,sp,-20
   6cf1c:	dfc00415 	stw	ra,16(sp)
   6cf20:	df000315 	stw	fp,12(sp)
   6cf24:	df000304 	addi	fp,sp,12
   6cf28:	e13ffd15 	stw	r4,-12(fp)
   6cf2c:	e17ffe15 	stw	r5,-8(fp)
   6cf30:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   6cf34:	010001f4 	movhi	r4,7
   6cf38:	2139fb04 	addi	r4,r4,-6164
   6cf3c:	e17ffd17 	ldw	r5,-12(fp)
   6cf40:	01800044 	movi	r6,1
   6cf44:	01c07fc4 	movi	r7,511
   6cf48:	006ce380 	call	6ce38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   6cf4c:	010001f4 	movhi	r4,7
   6cf50:	2139f804 	addi	r4,r4,-6176
   6cf54:	e17ffe17 	ldw	r5,-8(fp)
   6cf58:	000d883a 	mov	r6,zero
   6cf5c:	01c07fc4 	movi	r7,511
   6cf60:	006ce380 	call	6ce38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   6cf64:	010001f4 	movhi	r4,7
   6cf68:	2139fe04 	addi	r4,r4,-6152
   6cf6c:	e17fff17 	ldw	r5,-4(fp)
   6cf70:	01800044 	movi	r6,1
   6cf74:	01c07fc4 	movi	r7,511
   6cf78:	006ce380 	call	6ce38 <alt_open_fd>
}  
   6cf7c:	e037883a 	mov	sp,fp
   6cf80:	dfc00117 	ldw	ra,4(sp)
   6cf84:	df000017 	ldw	fp,0(sp)
   6cf88:	dec00204 	addi	sp,sp,8
   6cf8c:	f800283a 	ret

0006cf90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   6cf90:	defffe04 	addi	sp,sp,-8
   6cf94:	dfc00115 	stw	ra,4(sp)
   6cf98:	df000015 	stw	fp,0(sp)
   6cf9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   6cfa0:	008001f4 	movhi	r2,7
   6cfa4:	10be7a04 	addi	r2,r2,-1560
   6cfa8:	10800017 	ldw	r2,0(r2)
   6cfac:	10000526 	beq	r2,zero,6cfc4 <alt_get_errno+0x34>
   6cfb0:	008001f4 	movhi	r2,7
   6cfb4:	10be7a04 	addi	r2,r2,-1560
   6cfb8:	10800017 	ldw	r2,0(r2)
   6cfbc:	103ee83a 	callr	r2
   6cfc0:	00000206 	br	6cfcc <alt_get_errno+0x3c>
   6cfc4:	008001f4 	movhi	r2,7
   6cfc8:	10852d04 	addi	r2,r2,5300
}
   6cfcc:	e037883a 	mov	sp,fp
   6cfd0:	dfc00117 	ldw	ra,4(sp)
   6cfd4:	df000017 	ldw	fp,0(sp)
   6cfd8:	dec00204 	addi	sp,sp,8
   6cfdc:	f800283a 	ret

0006cfe0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   6cfe0:	defffb04 	addi	sp,sp,-20
   6cfe4:	dfc00415 	stw	ra,16(sp)
   6cfe8:	df000315 	stw	fp,12(sp)
   6cfec:	dc000215 	stw	r16,8(sp)
   6cff0:	df000204 	addi	fp,sp,8
   6cff4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   6cff8:	e0bfff17 	ldw	r2,-4(fp)
   6cffc:	10800217 	ldw	r2,8(r2)
   6d000:	10d00034 	orhi	r3,r2,16384
   6d004:	e0bfff17 	ldw	r2,-4(fp)
   6d008:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   6d00c:	e03ffe15 	stw	zero,-8(fp)
   6d010:	00002206 	br	6d09c <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   6d014:	040001f4 	movhi	r16,7
   6d018:	8439f804 	addi	r16,r16,-6176
   6d01c:	e0bffe17 	ldw	r2,-8(fp)
   6d020:	1009883a 	mov	r4,r2
   6d024:	01400304 	movi	r5,12
   6d028:	00614b40 	call	614b4 <__mulsi3>
   6d02c:	8085883a 	add	r2,r16,r2
   6d030:	10c00017 	ldw	r3,0(r2)
   6d034:	e0bfff17 	ldw	r2,-4(fp)
   6d038:	10800017 	ldw	r2,0(r2)
   6d03c:	1880141e 	bne	r3,r2,6d090 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   6d040:	040001f4 	movhi	r16,7
   6d044:	8439f804 	addi	r16,r16,-6176
   6d048:	e0bffe17 	ldw	r2,-8(fp)
   6d04c:	1009883a 	mov	r4,r2
   6d050:	01400304 	movi	r5,12
   6d054:	00614b40 	call	614b4 <__mulsi3>
   6d058:	8085883a 	add	r2,r16,r2
   6d05c:	10800204 	addi	r2,r2,8
   6d060:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   6d064:	10000a0e 	bge	r2,zero,6d090 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   6d068:	e13ffe17 	ldw	r4,-8(fp)
   6d06c:	01400304 	movi	r5,12
   6d070:	00614b40 	call	614b4 <__mulsi3>
   6d074:	00c001f4 	movhi	r3,7
   6d078:	18f9f804 	addi	r3,r3,-6176
   6d07c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   6d080:	e0bfff17 	ldw	r2,-4(fp)
   6d084:	18800226 	beq	r3,r2,6d090 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   6d088:	00bffcc4 	movi	r2,-13
   6d08c:	00000a06 	br	6d0b8 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   6d090:	e0bffe17 	ldw	r2,-8(fp)
   6d094:	10800044 	addi	r2,r2,1
   6d098:	e0bffe15 	stw	r2,-8(fp)
   6d09c:	008001f4 	movhi	r2,7
   6d0a0:	10be7904 	addi	r2,r2,-1564
   6d0a4:	10800017 	ldw	r2,0(r2)
   6d0a8:	1007883a 	mov	r3,r2
   6d0ac:	e0bffe17 	ldw	r2,-8(fp)
   6d0b0:	18bfd82e 	bgeu	r3,r2,6d014 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   6d0b4:	0005883a 	mov	r2,zero
}
   6d0b8:	e037883a 	mov	sp,fp
   6d0bc:	dfc00217 	ldw	ra,8(sp)
   6d0c0:	df000117 	ldw	fp,4(sp)
   6d0c4:	dc000017 	ldw	r16,0(sp)
   6d0c8:	dec00304 	addi	sp,sp,12
   6d0cc:	f800283a 	ret

0006d0d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   6d0d0:	defff604 	addi	sp,sp,-40
   6d0d4:	dfc00915 	stw	ra,36(sp)
   6d0d8:	df000815 	stw	fp,32(sp)
   6d0dc:	df000804 	addi	fp,sp,32
   6d0e0:	e13ffd15 	stw	r4,-12(fp)
   6d0e4:	e17ffe15 	stw	r5,-8(fp)
   6d0e8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   6d0ec:	00bfffc4 	movi	r2,-1
   6d0f0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   6d0f4:	00bffb44 	movi	r2,-19
   6d0f8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   6d0fc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   6d100:	e13ffd17 	ldw	r4,-12(fp)
   6d104:	014001f4 	movhi	r5,7
   6d108:	297e7704 	addi	r5,r5,-1572
   6d10c:	006d3e40 	call	6d3e4 <alt_find_dev>
   6d110:	e0bff815 	stw	r2,-32(fp)
   6d114:	e0bff817 	ldw	r2,-32(fp)
   6d118:	1000051e 	bne	r2,zero,6d130 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   6d11c:	e13ffd17 	ldw	r4,-12(fp)
   6d120:	006d4740 	call	6d474 <alt_find_file>
   6d124:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   6d128:	00800044 	movi	r2,1
   6d12c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   6d130:	e0bff817 	ldw	r2,-32(fp)
   6d134:	10002a26 	beq	r2,zero,6d1e0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   6d138:	e13ff817 	ldw	r4,-32(fp)
   6d13c:	006d5880 	call	6d588 <alt_get_fd>
   6d140:	e0bff915 	stw	r2,-28(fp)
   6d144:	e0bff917 	ldw	r2,-28(fp)
   6d148:	1000030e 	bge	r2,zero,6d158 <open+0x88>
    {
      status = index;
   6d14c:	e0bff917 	ldw	r2,-28(fp)
   6d150:	e0bffa15 	stw	r2,-24(fp)
   6d154:	00002406 	br	6d1e8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   6d158:	e13ff917 	ldw	r4,-28(fp)
   6d15c:	01400304 	movi	r5,12
   6d160:	00614b40 	call	614b4 <__mulsi3>
   6d164:	00c001f4 	movhi	r3,7
   6d168:	18f9f804 	addi	r3,r3,-6176
   6d16c:	10c5883a 	add	r2,r2,r3
   6d170:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   6d174:	e0fffe17 	ldw	r3,-8(fp)
   6d178:	00900034 	movhi	r2,16384
   6d17c:	10bfffc4 	addi	r2,r2,-1
   6d180:	1886703a 	and	r3,r3,r2
   6d184:	e0bffc17 	ldw	r2,-16(fp)
   6d188:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   6d18c:	e0bffb17 	ldw	r2,-20(fp)
   6d190:	1000051e 	bne	r2,zero,6d1a8 <open+0xd8>
   6d194:	e13ffc17 	ldw	r4,-16(fp)
   6d198:	006cfe00 	call	6cfe0 <alt_file_locked>
   6d19c:	e0bffa15 	stw	r2,-24(fp)
   6d1a0:	e0bffa17 	ldw	r2,-24(fp)
   6d1a4:	10001016 	blt	r2,zero,6d1e8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   6d1a8:	e0bff817 	ldw	r2,-32(fp)
   6d1ac:	10800317 	ldw	r2,12(r2)
   6d1b0:	10000826 	beq	r2,zero,6d1d4 <open+0x104>
   6d1b4:	e0bff817 	ldw	r2,-32(fp)
   6d1b8:	10800317 	ldw	r2,12(r2)
   6d1bc:	e13ffc17 	ldw	r4,-16(fp)
   6d1c0:	e17ffd17 	ldw	r5,-12(fp)
   6d1c4:	e1bffe17 	ldw	r6,-8(fp)
   6d1c8:	e1ffff17 	ldw	r7,-4(fp)
   6d1cc:	103ee83a 	callr	r2
   6d1d0:	00000106 	br	6d1d8 <open+0x108>
   6d1d4:	0005883a 	mov	r2,zero
   6d1d8:	e0bffa15 	stw	r2,-24(fp)
   6d1dc:	00000206 	br	6d1e8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   6d1e0:	00bffb44 	movi	r2,-19
   6d1e4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   6d1e8:	e0bffa17 	ldw	r2,-24(fp)
   6d1ec:	1000080e 	bge	r2,zero,6d210 <open+0x140>
  {
    alt_release_fd (index);  
   6d1f0:	e13ff917 	ldw	r4,-28(fp)
   6d1f4:	006b2f80 	call	6b2f8 <alt_release_fd>
    ALT_ERRNO = -status;
   6d1f8:	006cf900 	call	6cf90 <alt_get_errno>
   6d1fc:	e0fffa17 	ldw	r3,-24(fp)
   6d200:	00c7c83a 	sub	r3,zero,r3
   6d204:	10c00015 	stw	r3,0(r2)
    return -1;
   6d208:	00bfffc4 	movi	r2,-1
   6d20c:	00000106 	br	6d214 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   6d210:	e0bff917 	ldw	r2,-28(fp)
}
   6d214:	e037883a 	mov	sp,fp
   6d218:	dfc00117 	ldw	ra,4(sp)
   6d21c:	df000017 	ldw	fp,0(sp)
   6d220:	dec00204 	addi	sp,sp,8
   6d224:	f800283a 	ret

0006d228 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   6d228:	defffa04 	addi	sp,sp,-24
   6d22c:	df000515 	stw	fp,20(sp)
   6d230:	df000504 	addi	fp,sp,20
   6d234:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   6d238:	0005303a 	rdctl	r2,status
   6d23c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   6d240:	e0fffc17 	ldw	r3,-16(fp)
   6d244:	00bfff84 	movi	r2,-2
   6d248:	1884703a 	and	r2,r3,r2
   6d24c:	1001703a 	wrctl	status,r2
  
  return context;
   6d250:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   6d254:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   6d258:	e0bfff17 	ldw	r2,-4(fp)
   6d25c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   6d260:	e0bffd17 	ldw	r2,-12(fp)
   6d264:	10800017 	ldw	r2,0(r2)
   6d268:	e0fffd17 	ldw	r3,-12(fp)
   6d26c:	18c00117 	ldw	r3,4(r3)
   6d270:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   6d274:	e0bffd17 	ldw	r2,-12(fp)
   6d278:	10800117 	ldw	r2,4(r2)
   6d27c:	e0fffd17 	ldw	r3,-12(fp)
   6d280:	18c00017 	ldw	r3,0(r3)
   6d284:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   6d288:	e0bffd17 	ldw	r2,-12(fp)
   6d28c:	e0fffd17 	ldw	r3,-12(fp)
   6d290:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   6d294:	e0bffd17 	ldw	r2,-12(fp)
   6d298:	e0fffd17 	ldw	r3,-12(fp)
   6d29c:	10c00015 	stw	r3,0(r2)
   6d2a0:	e0bffb17 	ldw	r2,-20(fp)
   6d2a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   6d2a8:	e0bffe17 	ldw	r2,-8(fp)
   6d2ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   6d2b0:	e037883a 	mov	sp,fp
   6d2b4:	df000017 	ldw	fp,0(sp)
   6d2b8:	dec00104 	addi	sp,sp,4
   6d2bc:	f800283a 	ret

0006d2c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   6d2c0:	defffb04 	addi	sp,sp,-20
   6d2c4:	dfc00415 	stw	ra,16(sp)
   6d2c8:	df000315 	stw	fp,12(sp)
   6d2cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   6d2d0:	d0a00d17 	ldw	r2,-32716(gp)
   6d2d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   6d2d8:	d0a6c517 	ldw	r2,-25836(gp)
   6d2dc:	10800044 	addi	r2,r2,1
   6d2e0:	d0a6c515 	stw	r2,-25836(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   6d2e4:	00002e06 	br	6d3a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   6d2e8:	e0bffd17 	ldw	r2,-12(fp)
   6d2ec:	10800017 	ldw	r2,0(r2)
   6d2f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   6d2f4:	e0bffd17 	ldw	r2,-12(fp)
   6d2f8:	10800403 	ldbu	r2,16(r2)
   6d2fc:	10803fcc 	andi	r2,r2,255
   6d300:	10000426 	beq	r2,zero,6d314 <alt_tick+0x54>
   6d304:	d0a6c517 	ldw	r2,-25836(gp)
   6d308:	1000021e 	bne	r2,zero,6d314 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   6d30c:	e0bffd17 	ldw	r2,-12(fp)
   6d310:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   6d314:	e0bffd17 	ldw	r2,-12(fp)
   6d318:	10800217 	ldw	r2,8(r2)
   6d31c:	d0e6c517 	ldw	r3,-25836(gp)
   6d320:	18801d36 	bltu	r3,r2,6d398 <alt_tick+0xd8>
   6d324:	e0bffd17 	ldw	r2,-12(fp)
   6d328:	10800403 	ldbu	r2,16(r2)
   6d32c:	10803fcc 	andi	r2,r2,255
   6d330:	1000191e 	bne	r2,zero,6d398 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   6d334:	e0bffd17 	ldw	r2,-12(fp)
   6d338:	10c00317 	ldw	r3,12(r2)
   6d33c:	e0bffd17 	ldw	r2,-12(fp)
   6d340:	10800517 	ldw	r2,20(r2)
   6d344:	1009883a 	mov	r4,r2
   6d348:	183ee83a 	callr	r3
   6d34c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   6d350:	e0bfff17 	ldw	r2,-4(fp)
   6d354:	1000031e 	bne	r2,zero,6d364 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   6d358:	e13ffd17 	ldw	r4,-12(fp)
   6d35c:	006d2280 	call	6d228 <alt_alarm_stop>
   6d360:	00000d06 	br	6d398 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   6d364:	e0bffd17 	ldw	r2,-12(fp)
   6d368:	10c00217 	ldw	r3,8(r2)
   6d36c:	e0bfff17 	ldw	r2,-4(fp)
   6d370:	1887883a 	add	r3,r3,r2
   6d374:	e0bffd17 	ldw	r2,-12(fp)
   6d378:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   6d37c:	e0bffd17 	ldw	r2,-12(fp)
   6d380:	10c00217 	ldw	r3,8(r2)
   6d384:	d0a6c517 	ldw	r2,-25836(gp)
   6d388:	1880032e 	bgeu	r3,r2,6d398 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   6d38c:	e0bffd17 	ldw	r2,-12(fp)
   6d390:	00c00044 	movi	r3,1
   6d394:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   6d398:	e0bffe17 	ldw	r2,-8(fp)
   6d39c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   6d3a0:	e0fffd17 	ldw	r3,-12(fp)
   6d3a4:	d0a00d04 	addi	r2,gp,-32716
   6d3a8:	18bfcf1e 	bne	r3,r2,6d2e8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   6d3ac:	0001883a 	nop
}
   6d3b0:	e037883a 	mov	sp,fp
   6d3b4:	dfc00117 	ldw	ra,4(sp)
   6d3b8:	df000017 	ldw	fp,0(sp)
   6d3bc:	dec00204 	addi	sp,sp,8
   6d3c0:	f800283a 	ret

0006d3c4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   6d3c4:	deffff04 	addi	sp,sp,-4
   6d3c8:	df000015 	stw	fp,0(sp)
   6d3cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   6d3d0:	000170fa 	wrctl	ienable,zero
}
   6d3d4:	e037883a 	mov	sp,fp
   6d3d8:	df000017 	ldw	fp,0(sp)
   6d3dc:	dec00104 	addi	sp,sp,4
   6d3e0:	f800283a 	ret

0006d3e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   6d3e4:	defffa04 	addi	sp,sp,-24
   6d3e8:	dfc00515 	stw	ra,20(sp)
   6d3ec:	df000415 	stw	fp,16(sp)
   6d3f0:	df000404 	addi	fp,sp,16
   6d3f4:	e13ffe15 	stw	r4,-8(fp)
   6d3f8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   6d3fc:	e0bfff17 	ldw	r2,-4(fp)
   6d400:	10800017 	ldw	r2,0(r2)
   6d404:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   6d408:	e13ffe17 	ldw	r4,-8(fp)
   6d40c:	006171c0 	call	6171c <strlen>
   6d410:	10800044 	addi	r2,r2,1
   6d414:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   6d418:	00000d06 	br	6d450 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   6d41c:	e0bffc17 	ldw	r2,-16(fp)
   6d420:	10c00217 	ldw	r3,8(r2)
   6d424:	e0bffd17 	ldw	r2,-12(fp)
   6d428:	1809883a 	mov	r4,r3
   6d42c:	e17ffe17 	ldw	r5,-8(fp)
   6d430:	100d883a 	mov	r6,r2
   6d434:	006d7340 	call	6d734 <memcmp>
   6d438:	1000021e 	bne	r2,zero,6d444 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   6d43c:	e0bffc17 	ldw	r2,-16(fp)
   6d440:	00000706 	br	6d460 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   6d444:	e0bffc17 	ldw	r2,-16(fp)
   6d448:	10800017 	ldw	r2,0(r2)
   6d44c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   6d450:	e0fffc17 	ldw	r3,-16(fp)
   6d454:	e0bfff17 	ldw	r2,-4(fp)
   6d458:	18bff01e 	bne	r3,r2,6d41c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   6d45c:	0005883a 	mov	r2,zero
}
   6d460:	e037883a 	mov	sp,fp
   6d464:	dfc00117 	ldw	ra,4(sp)
   6d468:	df000017 	ldw	fp,0(sp)
   6d46c:	dec00204 	addi	sp,sp,8
   6d470:	f800283a 	ret

0006d474 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   6d474:	defffb04 	addi	sp,sp,-20
   6d478:	dfc00415 	stw	ra,16(sp)
   6d47c:	df000315 	stw	fp,12(sp)
   6d480:	df000304 	addi	fp,sp,12
   6d484:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   6d488:	008001f4 	movhi	r2,7
   6d48c:	10be7504 	addi	r2,r2,-1580
   6d490:	10800017 	ldw	r2,0(r2)
   6d494:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   6d498:	00003106 	br	6d560 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   6d49c:	e0bffd17 	ldw	r2,-12(fp)
   6d4a0:	10800217 	ldw	r2,8(r2)
   6d4a4:	1009883a 	mov	r4,r2
   6d4a8:	006171c0 	call	6171c <strlen>
   6d4ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   6d4b0:	e0bffd17 	ldw	r2,-12(fp)
   6d4b4:	10c00217 	ldw	r3,8(r2)
   6d4b8:	e0bffe17 	ldw	r2,-8(fp)
   6d4bc:	10bfffc4 	addi	r2,r2,-1
   6d4c0:	1885883a 	add	r2,r3,r2
   6d4c4:	10800003 	ldbu	r2,0(r2)
   6d4c8:	10803fcc 	andi	r2,r2,255
   6d4cc:	1080201c 	xori	r2,r2,128
   6d4d0:	10bfe004 	addi	r2,r2,-128
   6d4d4:	10800bd8 	cmpnei	r2,r2,47
   6d4d8:	1000031e 	bne	r2,zero,6d4e8 <alt_find_file+0x74>
    {
      len -= 1;
   6d4dc:	e0bffe17 	ldw	r2,-8(fp)
   6d4e0:	10bfffc4 	addi	r2,r2,-1
   6d4e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   6d4e8:	e0bffe17 	ldw	r2,-8(fp)
   6d4ec:	e0ffff17 	ldw	r3,-4(fp)
   6d4f0:	1885883a 	add	r2,r3,r2
   6d4f4:	10800003 	ldbu	r2,0(r2)
   6d4f8:	10803fcc 	andi	r2,r2,255
   6d4fc:	1080201c 	xori	r2,r2,128
   6d500:	10bfe004 	addi	r2,r2,-128
   6d504:	10800be0 	cmpeqi	r2,r2,47
   6d508:	1000081e 	bne	r2,zero,6d52c <alt_find_file+0xb8>
   6d50c:	e0bffe17 	ldw	r2,-8(fp)
   6d510:	e0ffff17 	ldw	r3,-4(fp)
   6d514:	1885883a 	add	r2,r3,r2
   6d518:	10800003 	ldbu	r2,0(r2)
   6d51c:	10803fcc 	andi	r2,r2,255
   6d520:	1080201c 	xori	r2,r2,128
   6d524:	10bfe004 	addi	r2,r2,-128
   6d528:	10000a1e 	bne	r2,zero,6d554 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   6d52c:	e0bffd17 	ldw	r2,-12(fp)
   6d530:	10c00217 	ldw	r3,8(r2)
   6d534:	e0bffe17 	ldw	r2,-8(fp)
   6d538:	1809883a 	mov	r4,r3
   6d53c:	e17fff17 	ldw	r5,-4(fp)
   6d540:	100d883a 	mov	r6,r2
   6d544:	006d7340 	call	6d734 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   6d548:	1000021e 	bne	r2,zero,6d554 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   6d54c:	e0bffd17 	ldw	r2,-12(fp)
   6d550:	00000806 	br	6d574 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   6d554:	e0bffd17 	ldw	r2,-12(fp)
   6d558:	10800017 	ldw	r2,0(r2)
   6d55c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   6d560:	e0fffd17 	ldw	r3,-12(fp)
   6d564:	008001f4 	movhi	r2,7
   6d568:	10be7504 	addi	r2,r2,-1580
   6d56c:	18bfcb1e 	bne	r3,r2,6d49c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   6d570:	0005883a 	mov	r2,zero
}
   6d574:	e037883a 	mov	sp,fp
   6d578:	dfc00117 	ldw	ra,4(sp)
   6d57c:	df000017 	ldw	fp,0(sp)
   6d580:	dec00204 	addi	sp,sp,8
   6d584:	f800283a 	ret

0006d588 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   6d588:	defffa04 	addi	sp,sp,-24
   6d58c:	dfc00515 	stw	ra,20(sp)
   6d590:	df000415 	stw	fp,16(sp)
   6d594:	dc000315 	stw	r16,12(sp)
   6d598:	df000304 	addi	fp,sp,12
   6d59c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   6d5a0:	00bffa04 	movi	r2,-24
   6d5a4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   6d5a8:	e03ffd15 	stw	zero,-12(fp)
   6d5ac:	00002106 	br	6d634 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   6d5b0:	040001f4 	movhi	r16,7
   6d5b4:	8439f804 	addi	r16,r16,-6176
   6d5b8:	e0bffd17 	ldw	r2,-12(fp)
   6d5bc:	1009883a 	mov	r4,r2
   6d5c0:	01400304 	movi	r5,12
   6d5c4:	00614b40 	call	614b4 <__mulsi3>
   6d5c8:	8085883a 	add	r2,r16,r2
   6d5cc:	10800017 	ldw	r2,0(r2)
   6d5d0:	1000151e 	bne	r2,zero,6d628 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   6d5d4:	040001f4 	movhi	r16,7
   6d5d8:	8439f804 	addi	r16,r16,-6176
   6d5dc:	e0bffd17 	ldw	r2,-12(fp)
   6d5e0:	1009883a 	mov	r4,r2
   6d5e4:	01400304 	movi	r5,12
   6d5e8:	00614b40 	call	614b4 <__mulsi3>
   6d5ec:	8085883a 	add	r2,r16,r2
   6d5f0:	e0ffff17 	ldw	r3,-4(fp)
   6d5f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   6d5f8:	008001f4 	movhi	r2,7
   6d5fc:	10be7904 	addi	r2,r2,-1564
   6d600:	10c00017 	ldw	r3,0(r2)
   6d604:	e0bffd17 	ldw	r2,-12(fp)
   6d608:	1880040e 	bge	r3,r2,6d61c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   6d60c:	008001f4 	movhi	r2,7
   6d610:	10be7904 	addi	r2,r2,-1564
   6d614:	e0fffd17 	ldw	r3,-12(fp)
   6d618:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   6d61c:	e0bffd17 	ldw	r2,-12(fp)
   6d620:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   6d624:	00000606 	br	6d640 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   6d628:	e0bffd17 	ldw	r2,-12(fp)
   6d62c:	10800044 	addi	r2,r2,1
   6d630:	e0bffd15 	stw	r2,-12(fp)
   6d634:	e0bffd17 	ldw	r2,-12(fp)
   6d638:	10800810 	cmplti	r2,r2,32
   6d63c:	103fdc1e 	bne	r2,zero,6d5b0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   6d640:	e0bffe17 	ldw	r2,-8(fp)
}
   6d644:	e037883a 	mov	sp,fp
   6d648:	dfc00217 	ldw	ra,8(sp)
   6d64c:	df000117 	ldw	fp,4(sp)
   6d650:	dc000017 	ldw	r16,0(sp)
   6d654:	dec00304 	addi	sp,sp,12
   6d658:	f800283a 	ret

0006d65c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   6d65c:	defffb04 	addi	sp,sp,-20
   6d660:	df000415 	stw	fp,16(sp)
   6d664:	df000404 	addi	fp,sp,16
   6d668:	e13ffe15 	stw	r4,-8(fp)
   6d66c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   6d670:	e0bfff17 	ldw	r2,-4(fp)
   6d674:	10840070 	cmpltui	r2,r2,4097
   6d678:	1000021e 	bne	r2,zero,6d684 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   6d67c:	00840004 	movi	r2,4096
   6d680:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   6d684:	e0fffe17 	ldw	r3,-8(fp)
   6d688:	e0bfff17 	ldw	r2,-4(fp)
   6d68c:	1885883a 	add	r2,r3,r2
   6d690:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   6d694:	e0bffe17 	ldw	r2,-8(fp)
   6d698:	e0bffc15 	stw	r2,-16(fp)
   6d69c:	00000506 	br	6d6b4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   6d6a0:	e0bffc17 	ldw	r2,-16(fp)
   6d6a4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   6d6a8:	e0bffc17 	ldw	r2,-16(fp)
   6d6ac:	10800804 	addi	r2,r2,32
   6d6b0:	e0bffc15 	stw	r2,-16(fp)
   6d6b4:	e0fffc17 	ldw	r3,-16(fp)
   6d6b8:	e0bffd17 	ldw	r2,-12(fp)
   6d6bc:	18bff836 	bltu	r3,r2,6d6a0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   6d6c0:	e0bffe17 	ldw	r2,-8(fp)
   6d6c4:	108007cc 	andi	r2,r2,31
   6d6c8:	10000226 	beq	r2,zero,6d6d4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   6d6cc:	e0bffc17 	ldw	r2,-16(fp)
   6d6d0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   6d6d4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   6d6d8:	e037883a 	mov	sp,fp
   6d6dc:	df000017 	ldw	fp,0(sp)
   6d6e0:	dec00104 	addi	sp,sp,4
   6d6e4:	f800283a 	ret

0006d6e8 <atexit>:
   6d6e8:	200b883a 	mov	r5,r4
   6d6ec:	000d883a 	mov	r6,zero
   6d6f0:	0009883a 	mov	r4,zero
   6d6f4:	000f883a 	mov	r7,zero
   6d6f8:	006d7b01 	jmpi	6d7b0 <__register_exitproc>

0006d6fc <exit>:
   6d6fc:	defffe04 	addi	sp,sp,-8
   6d700:	000b883a 	mov	r5,zero
   6d704:	dc000015 	stw	r16,0(sp)
   6d708:	dfc00115 	stw	ra,4(sp)
   6d70c:	2021883a 	mov	r16,r4
   6d710:	006d8e00 	call	6d8e0 <__call_exitprocs>
   6d714:	008001f4 	movhi	r2,7
   6d718:	10be7004 	addi	r2,r2,-1600
   6d71c:	11000017 	ldw	r4,0(r2)
   6d720:	20800f17 	ldw	r2,60(r4)
   6d724:	10000126 	beq	r2,zero,6d72c <exit+0x30>
   6d728:	103ee83a 	callr	r2
   6d72c:	8009883a 	mov	r4,r16
   6d730:	006da800 	call	6da80 <_exit>

0006d734 <memcmp>:
   6d734:	01c000c4 	movi	r7,3
   6d738:	3980192e 	bgeu	r7,r6,6d7a0 <memcmp+0x6c>
   6d73c:	2904b03a 	or	r2,r5,r4
   6d740:	11c4703a 	and	r2,r2,r7
   6d744:	10000f26 	beq	r2,zero,6d784 <memcmp+0x50>
   6d748:	20c00003 	ldbu	r3,0(r4)
   6d74c:	28800003 	ldbu	r2,0(r5)
   6d750:	1880151e 	bne	r3,r2,6d7a8 <memcmp+0x74>
   6d754:	31bfff84 	addi	r6,r6,-2
   6d758:	01ffffc4 	movi	r7,-1
   6d75c:	00000406 	br	6d770 <memcmp+0x3c>
   6d760:	20c00003 	ldbu	r3,0(r4)
   6d764:	28800003 	ldbu	r2,0(r5)
   6d768:	31bfffc4 	addi	r6,r6,-1
   6d76c:	18800e1e 	bne	r3,r2,6d7a8 <memcmp+0x74>
   6d770:	21000044 	addi	r4,r4,1
   6d774:	29400044 	addi	r5,r5,1
   6d778:	31fff91e 	bne	r6,r7,6d760 <memcmp+0x2c>
   6d77c:	0005883a 	mov	r2,zero
   6d780:	f800283a 	ret
   6d784:	20c00017 	ldw	r3,0(r4)
   6d788:	28800017 	ldw	r2,0(r5)
   6d78c:	1880041e 	bne	r3,r2,6d7a0 <memcmp+0x6c>
   6d790:	31bfff04 	addi	r6,r6,-4
   6d794:	21000104 	addi	r4,r4,4
   6d798:	29400104 	addi	r5,r5,4
   6d79c:	39bff936 	bltu	r7,r6,6d784 <memcmp+0x50>
   6d7a0:	303fe91e 	bne	r6,zero,6d748 <memcmp+0x14>
   6d7a4:	003ff506 	br	6d77c <memcmp+0x48>
   6d7a8:	1885c83a 	sub	r2,r3,r2
   6d7ac:	f800283a 	ret

0006d7b0 <__register_exitproc>:
   6d7b0:	defffa04 	addi	sp,sp,-24
   6d7b4:	008001f4 	movhi	r2,7
   6d7b8:	10be7004 	addi	r2,r2,-1600
   6d7bc:	dc000315 	stw	r16,12(sp)
   6d7c0:	14000017 	ldw	r16,0(r2)
   6d7c4:	dc400415 	stw	r17,16(sp)
   6d7c8:	dfc00515 	stw	ra,20(sp)
   6d7cc:	80805217 	ldw	r2,328(r16)
   6d7d0:	2023883a 	mov	r17,r4
   6d7d4:	10003e26 	beq	r2,zero,6d8d0 <__register_exitproc+0x120>
   6d7d8:	10c00117 	ldw	r3,4(r2)
   6d7dc:	020007c4 	movi	r8,31
   6d7e0:	40c0180e 	bge	r8,r3,6d844 <__register_exitproc+0x94>
   6d7e4:	00800034 	movhi	r2,0
   6d7e8:	10800004 	addi	r2,r2,0
   6d7ec:	1000061e 	bne	r2,zero,6d808 <__register_exitproc+0x58>
   6d7f0:	00bfffc4 	movi	r2,-1
   6d7f4:	dfc00517 	ldw	ra,20(sp)
   6d7f8:	dc400417 	ldw	r17,16(sp)
   6d7fc:	dc000317 	ldw	r16,12(sp)
   6d800:	dec00604 	addi	sp,sp,24
   6d804:	f800283a 	ret
   6d808:	01006404 	movi	r4,400
   6d80c:	d9400015 	stw	r5,0(sp)
   6d810:	d9800115 	stw	r6,4(sp)
   6d814:	d9c00215 	stw	r7,8(sp)
   6d818:	00000000 	call	0 <__alt_mem_SDRAM_controller>
   6d81c:	d9400017 	ldw	r5,0(sp)
   6d820:	d9800117 	ldw	r6,4(sp)
   6d824:	d9c00217 	ldw	r7,8(sp)
   6d828:	103ff126 	beq	r2,zero,6d7f0 <__register_exitproc+0x40>
   6d82c:	80c05217 	ldw	r3,328(r16)
   6d830:	10000115 	stw	zero,4(r2)
   6d834:	10c00015 	stw	r3,0(r2)
   6d838:	80805215 	stw	r2,328(r16)
   6d83c:	10006215 	stw	zero,392(r2)
   6d840:	10006315 	stw	zero,396(r2)
   6d844:	10c00117 	ldw	r3,4(r2)
   6d848:	88000d1e 	bne	r17,zero,6d880 <__register_exitproc+0xd0>
   6d84c:	19000084 	addi	r4,r3,2
   6d850:	2109883a 	add	r4,r4,r4
   6d854:	18c00044 	addi	r3,r3,1
   6d858:	2109883a 	add	r4,r4,r4
   6d85c:	1109883a 	add	r4,r2,r4
   6d860:	10c00115 	stw	r3,4(r2)
   6d864:	0005883a 	mov	r2,zero
   6d868:	21400015 	stw	r5,0(r4)
   6d86c:	dfc00517 	ldw	ra,20(sp)
   6d870:	dc400417 	ldw	r17,16(sp)
   6d874:	dc000317 	ldw	r16,12(sp)
   6d878:	dec00604 	addi	sp,sp,24
   6d87c:	f800283a 	ret
   6d880:	02400044 	movi	r9,1
   6d884:	12806217 	ldw	r10,392(r2)
   6d888:	48d2983a 	sll	r9,r9,r3
   6d88c:	19000804 	addi	r4,r3,32
   6d890:	18d1883a 	add	r8,r3,r3
   6d894:	2109883a 	add	r4,r4,r4
   6d898:	4211883a 	add	r8,r8,r8
   6d89c:	2109883a 	add	r4,r4,r4
   6d8a0:	1109883a 	add	r4,r2,r4
   6d8a4:	1211883a 	add	r8,r2,r8
   6d8a8:	5254b03a 	or	r10,r10,r9
   6d8ac:	21c02215 	stw	r7,136(r4)
   6d8b0:	41802215 	stw	r6,136(r8)
   6d8b4:	12806215 	stw	r10,392(r2)
   6d8b8:	01000084 	movi	r4,2
   6d8bc:	893fe31e 	bne	r17,r4,6d84c <__register_exitproc+0x9c>
   6d8c0:	11006317 	ldw	r4,396(r2)
   6d8c4:	2252b03a 	or	r9,r4,r9
   6d8c8:	12406315 	stw	r9,396(r2)
   6d8cc:	003fdf06 	br	6d84c <__register_exitproc+0x9c>
   6d8d0:	008001f4 	movhi	r2,7
   6d8d4:	10860004 	addi	r2,r2,6144
   6d8d8:	80805215 	stw	r2,328(r16)
   6d8dc:	003fbe06 	br	6d7d8 <__register_exitproc+0x28>

0006d8e0 <__call_exitprocs>:
   6d8e0:	008001f4 	movhi	r2,7
   6d8e4:	10be7004 	addi	r2,r2,-1600
   6d8e8:	10800017 	ldw	r2,0(r2)
   6d8ec:	defff304 	addi	sp,sp,-52
   6d8f0:	df000b15 	stw	fp,44(sp)
   6d8f4:	d8800015 	stw	r2,0(sp)
   6d8f8:	10805204 	addi	r2,r2,328
   6d8fc:	dd400815 	stw	r21,32(sp)
   6d900:	dfc00c15 	stw	ra,48(sp)
   6d904:	ddc00a15 	stw	r23,40(sp)
   6d908:	dd800915 	stw	r22,36(sp)
   6d90c:	dd000715 	stw	r20,28(sp)
   6d910:	dcc00615 	stw	r19,24(sp)
   6d914:	dc800515 	stw	r18,20(sp)
   6d918:	dc400415 	stw	r17,16(sp)
   6d91c:	dc000315 	stw	r16,12(sp)
   6d920:	d9000115 	stw	r4,4(sp)
   6d924:	2839883a 	mov	fp,r5
   6d928:	d8800215 	stw	r2,8(sp)
   6d92c:	057fffc4 	movi	r21,-1
   6d930:	d8800017 	ldw	r2,0(sp)
   6d934:	ddc00217 	ldw	r23,8(sp)
   6d938:	14805217 	ldw	r18,328(r2)
   6d93c:	90001726 	beq	r18,zero,6d99c <__call_exitprocs+0xbc>
   6d940:	94400117 	ldw	r17,4(r18)
   6d944:	8c3fffc4 	addi	r16,r17,-1
   6d948:	80001116 	blt	r16,zero,6d990 <__call_exitprocs+0xb0>
   6d94c:	8c400044 	addi	r17,r17,1
   6d950:	8427883a 	add	r19,r16,r16
   6d954:	8c63883a 	add	r17,r17,r17
   6d958:	95802204 	addi	r22,r18,136
   6d95c:	9ce7883a 	add	r19,r19,r19
   6d960:	8c63883a 	add	r17,r17,r17
   6d964:	b4e7883a 	add	r19,r22,r19
   6d968:	9463883a 	add	r17,r18,r17
   6d96c:	e0001726 	beq	fp,zero,6d9cc <__call_exitprocs+0xec>
   6d970:	8c87c83a 	sub	r3,r17,r18
   6d974:	b0c7883a 	add	r3,r22,r3
   6d978:	18c01e17 	ldw	r3,120(r3)
   6d97c:	1f001326 	beq	r3,fp,6d9cc <__call_exitprocs+0xec>
   6d980:	843fffc4 	addi	r16,r16,-1
   6d984:	9cffff04 	addi	r19,r19,-4
   6d988:	8c7fff04 	addi	r17,r17,-4
   6d98c:	857ff71e 	bne	r16,r21,6d96c <__call_exitprocs+0x8c>
   6d990:	00800034 	movhi	r2,0
   6d994:	10800004 	addi	r2,r2,0
   6d998:	10002a1e 	bne	r2,zero,6da44 <__call_exitprocs+0x164>
   6d99c:	dfc00c17 	ldw	ra,48(sp)
   6d9a0:	df000b17 	ldw	fp,44(sp)
   6d9a4:	ddc00a17 	ldw	r23,40(sp)
   6d9a8:	dd800917 	ldw	r22,36(sp)
   6d9ac:	dd400817 	ldw	r21,32(sp)
   6d9b0:	dd000717 	ldw	r20,28(sp)
   6d9b4:	dcc00617 	ldw	r19,24(sp)
   6d9b8:	dc800517 	ldw	r18,20(sp)
   6d9bc:	dc400417 	ldw	r17,16(sp)
   6d9c0:	dc000317 	ldw	r16,12(sp)
   6d9c4:	dec00d04 	addi	sp,sp,52
   6d9c8:	f800283a 	ret
   6d9cc:	91000117 	ldw	r4,4(r18)
   6d9d0:	88c00017 	ldw	r3,0(r17)
   6d9d4:	213fffc4 	addi	r4,r4,-1
   6d9d8:	24001526 	beq	r4,r16,6da30 <__call_exitprocs+0x150>
   6d9dc:	88000015 	stw	zero,0(r17)
   6d9e0:	183fe726 	beq	r3,zero,6d980 <__call_exitprocs+0xa0>
   6d9e4:	00800044 	movi	r2,1
   6d9e8:	1408983a 	sll	r4,r2,r16
   6d9ec:	91406217 	ldw	r5,392(r18)
   6d9f0:	95000117 	ldw	r20,4(r18)
   6d9f4:	214a703a 	and	r5,r4,r5
   6d9f8:	28000b26 	beq	r5,zero,6da28 <__call_exitprocs+0x148>
   6d9fc:	91406317 	ldw	r5,396(r18)
   6da00:	2148703a 	and	r4,r4,r5
   6da04:	20000c1e 	bne	r4,zero,6da38 <__call_exitprocs+0x158>
   6da08:	99400017 	ldw	r5,0(r19)
   6da0c:	d9000117 	ldw	r4,4(sp)
   6da10:	183ee83a 	callr	r3
   6da14:	90c00117 	ldw	r3,4(r18)
   6da18:	1d3fc51e 	bne	r3,r20,6d930 <__call_exitprocs+0x50>
   6da1c:	b8c00017 	ldw	r3,0(r23)
   6da20:	1cbfd726 	beq	r3,r18,6d980 <__call_exitprocs+0xa0>
   6da24:	003fc206 	br	6d930 <__call_exitprocs+0x50>
   6da28:	183ee83a 	callr	r3
   6da2c:	003ff906 	br	6da14 <__call_exitprocs+0x134>
   6da30:	94000115 	stw	r16,4(r18)
   6da34:	003fea06 	br	6d9e0 <__call_exitprocs+0x100>
   6da38:	99000017 	ldw	r4,0(r19)
   6da3c:	183ee83a 	callr	r3
   6da40:	003ff406 	br	6da14 <__call_exitprocs+0x134>
   6da44:	90c00117 	ldw	r3,4(r18)
   6da48:	1800071e 	bne	r3,zero,6da68 <__call_exitprocs+0x188>
   6da4c:	90c00017 	ldw	r3,0(r18)
   6da50:	18000926 	beq	r3,zero,6da78 <__call_exitprocs+0x198>
   6da54:	9009883a 	mov	r4,r18
   6da58:	b8c00015 	stw	r3,0(r23)
   6da5c:	00000000 	call	0 <__alt_mem_SDRAM_controller>
   6da60:	bc800017 	ldw	r18,0(r23)
   6da64:	003fb506 	br	6d93c <__call_exitprocs+0x5c>
   6da68:	90c00017 	ldw	r3,0(r18)
   6da6c:	902f883a 	mov	r23,r18
   6da70:	1825883a 	mov	r18,r3
   6da74:	003fb106 	br	6d93c <__call_exitprocs+0x5c>
   6da78:	0007883a 	mov	r3,zero
   6da7c:	003ffb06 	br	6da6c <__call_exitprocs+0x18c>

0006da80 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   6da80:	defffc04 	addi	sp,sp,-16
   6da84:	df000315 	stw	fp,12(sp)
   6da88:	df000304 	addi	fp,sp,12
   6da8c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   6da90:	0001883a 	nop
   6da94:	e0bfff17 	ldw	r2,-4(fp)
   6da98:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   6da9c:	e0bffd17 	ldw	r2,-12(fp)
   6daa0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   6daa4:	e0bffe17 	ldw	r2,-8(fp)
   6daa8:	10000226 	beq	r2,zero,6dab4 <_exit+0x34>
    ALT_SIM_FAIL();
   6daac:	002af070 	cmpltui	zero,zero,43969
   6dab0:	00000106 	br	6dab8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   6dab4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   6dab8:	003fff06 	br	6dab8 <_exit+0x38>
